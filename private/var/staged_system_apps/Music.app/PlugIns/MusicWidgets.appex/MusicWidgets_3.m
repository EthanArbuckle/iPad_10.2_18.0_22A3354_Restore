uint64_t sub_100189F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for SnapshotIdentifier(0, a6, a3, a4);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - v8, a2, v7);
  v11 = type metadata accessor for Array(0);
  return Array.append(_:)(v9, v11);
}

void static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierSections(from:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  _QWORD aBlock[5];
  uint64_t v19;
  char v20;

  v20 = 0;
  v12 = (_QWORD *)swift_allocObject(&unk_100508EA8, 72, 7);
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v12[8] = &v20;
  v13 = swift_allocObject(&unk_100508ED0, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10018C6D4;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1000DC31C;
  v19 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100189E78;
  aBlock[3] = &unk_100508EE8;
  v14 = _Block_copy(aBlock);
  v15 = v19;
  v16 = a1;
  swift_retain(v13);
  objc_msgSend(v16, "enumerateSectionIdentifiersUsingBlock:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v13, "", 129, 691, 48, 1, v17);
  swift_release(v12);
  swift_release(v13);
  if ((v16 & 1) != 0)
    __break(1u);
}

uint64_t sub_10018A148(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4, void (*a5)(uint64_t, _QWORD *, _BYTE *), uint64_t a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;

  v14 = type metadata accessor for SnapshotIdentifier(0, a8, (uint64_t)a3, (uint64_t)a4);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v23 - v16);
  *v17 = a1;
  v17[1] = a4;
  v20 = type metadata accessor for SnapshotIdentifier.Lazy(0, a8, v18, v19);
  swift_storeEnumTagMultiPayload(v17, v20, 0);
  swift_storeEnumTagMultiPayload(v17, v14, 0);
  v21 = a4;
  a5(a1, v17, a7);
  *a3 = *a7;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
}

void static NSDiffableDataSourceSnapshot<>.snapshot(from:)(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  id v22;
  __n128 v23;
  __n128 v24;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v28;
  uint64_t (*v29)();
  _QWORD *v30;

  v10 = type metadata accessor for SnapshotIdentifier(255, a3, a3, a4);
  WitnessTable = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v10);
  aBlock = a2;
  v26 = v10;
  v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a4;
  v28 = (void *)WitnessTable;
  v12 = type metadata accessor for NSDiffableDataSourceSnapshot(0, &aBlock);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&aBlock - v14;
  NSDiffableDataSourceSnapshot.init()(a2, v10, a4, WitnessTable);
  v16 = objc_opt_self(MPSectionedCollection);
  v17 = swift_dynamicCastObjCClassUnconditional(a1, v16, 0, 0, 0);
  v18 = (_QWORD *)swift_allocObject(&unk_100508F20, 56, 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = v15;
  v18[6] = v17;
  v19 = (_QWORD *)swift_allocObject(&unk_100508F48, 56, 7);
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = sub_10018C738;
  v19[6] = v18;
  v29 = sub_10018C758;
  v30 = v19;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_10018A580;
  v28 = &unk_100508F60;
  v20 = _Block_copy(&aBlock);
  v21 = v30;
  v22 = a1;
  swift_retain(v19);
  objc_msgSend(v22, "enumerateSectionsUsingBlock:", v20, swift_release(v21).n128_f64[0]);
  _Block_release(v20);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v19, "", 129, 708, 38, 1, v23);
  v24 = swift_release(v19);
  if ((v22 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v13 + 32))(a5, v15, v12, v24);
    swift_release(v18);
  }
}

uint64_t sub_10018A448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];

  v14 = sub_1001C40D8(a6, a6);
  v15 = swift_allocObject(v14, ((*(unsigned int *)(v14 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v14 + 52) | 7);
  v16 = static Array._adoptStorage(_:count:)(v15, 1);
  *v17 = a1;
  v18 = sub_1000D0CFC(v16);
  v21 = type metadata accessor for SnapshotIdentifier(255, a7, v19, v20);
  swift_unknownObjectRetain(a1);
  v25[0] = a6;
  v25[1] = v21;
  v25[2] = a8;
  v25[3] = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v21);
  v22 = type metadata accessor for NSDiffableDataSourceSnapshot(0, v25);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)v18);
  swift_bridgeObjectRelease();
  v23 = static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(a5, a2, a6, a7, a8);
  v25[0] = a1;
  swift_unknownObjectRetain(a1);
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v23, v25, v22);
  swift_unknownObjectRelease(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10018A580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  sub_1000DD108(0, &qword_10054FFC0, MPModelObject_ptr);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v9 = swift_unknownObjectRetain(a2);
  v8(v9, a3, a4);
  return swift_unknownObjectRelease(a2);
}

void static NSDiffableDataSourceSnapshot<>.snapshot(from:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  __n128 v22;
  void **aBlock;
  uint64_t v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;

  v8 = type metadata accessor for SnapshotIdentifier(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v8);
  aBlock = (void **)&type metadata for String;
  v24 = v8;
  v25 = (void (*)(uint64_t, void *))&protocol witness table for String;
  v26 = (void *)WitnessTable;
  v10 = type metadata accessor for NSDiffableDataSourceSnapshot(0, &aBlock);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&aBlock - v12;
  NSDiffableDataSourceSnapshot.init()(&type metadata for String, v8, &protocol witness table for String, WitnessTable);
  v14 = objc_opt_self(MPSectionedCollection);
  v15 = swift_dynamicCastObjCClassUnconditional(a1, v14, 0, 0, 0);
  v16 = (_QWORD *)swift_allocObject(&unk_100508F98, 40, 7);
  v16[2] = a2;
  v16[3] = v13;
  v16[4] = v15;
  v17 = swift_allocObject(&unk_100508FC0, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_10018C778;
  *(_QWORD *)(v17 + 24) = v16;
  v27 = sub_1000DC31C;
  v28 = v17;
  aBlock = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10018A928;
  v26 = &unk_100508FD8;
  v18 = _Block_copy(&aBlock);
  v19 = v28;
  v20 = a1;
  swift_retain(v17);
  objc_msgSend(v20, "enumerateSectionsUsingBlock:", v18, swift_release(v19).n128_f64[0]);
  _Block_release(v18);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v17, "", 129, 725, 38, 1, v21);
  v22 = swift_release(v17);
  if ((v20 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v11 + 32))(a5, v13, v10, v22);
    swift_release(v16);
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD v20[6];

  v9 = type metadata accessor for SnapshotIdentifier(0, a2, a3, a4);
  v12 = type metadata accessor for SnapshotIdentifier(0, a3, v10, v11);
  WitnessTable = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v9);
  v14 = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v12);
  NSDiffableDataSourceSnapshot.init()(v9, v12, WitnessTable, v14);
  v15 = objc_opt_self(MPSectionedCollection);
  v16 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v15, 0, 0, 0);
  v17 = objc_opt_self(MPSectionedCollection);
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = a5;
  v20[5] = swift_dynamicCastObjCClassUnconditional(a1, v17, 0, 0, 0);
  v18 = a1;
  v19 = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, a3);
  static NSDiffableDataSourceSnapshot<>.enumerateSnapshotIdentifierSections(from:using:)(v16, (uint64_t)sub_10018C794, (uint64_t)v20, a2, a3, v19);

}

uint64_t sub_10018A7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  Swift::OpaquePointer v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t WitnessTable;

  v10 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v11._rawValue = (void *)swift_allocObject(v10, 48, 7);
  *((_OWORD *)v11._rawValue + 1) = xmmword_100424BB0;
  *((_QWORD *)v11._rawValue + 4) = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *((_QWORD *)v11._rawValue + 5) = v12;
  v19 = &type metadata for String;
  v20 = type metadata accessor for SnapshotIdentifier(255, a6, v13, v14);
  v21 = &protocol witness table for String;
  WitnessTable = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v20);
  v15 = type metadata accessor for NSDiffableDataSourceSnapshot(0, &v19);
  NSDiffableDataSourceSnapshot.appendSections(_:)(v11);
  swift_bridgeObjectRelease();
  v16 = static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(a5, a2, (uint64_t)&type metadata for String, a6, (uint64_t)&protocol witness table for String);
  v19 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v20 = v17;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v16, &v19, v15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10018A928(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_10018AAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];

  v30 = a2;
  v31 = a6;
  v32 = a1;
  v33 = a5;
  v9 = type metadata accessor for SnapshotIdentifier(255, a6, a3, a4);
  v10 = type metadata accessor for Optional(0, v9);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - v11;
  v13 = type metadata accessor for _ContiguousArrayStorage(0, v9);
  v14 = *(_QWORD *)(v9 - 8);
  v15 = swift_allocObject(v13, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
  v16 = static Array._adoptStorage(_:count:)(v15, 1);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v17(v18, a2, v9);
  v19 = sub_1000D0CFC(v16);
  v22 = type metadata accessor for SnapshotIdentifier(255, a7, v20, v21);
  WitnessTable = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v9);
  v24 = swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, v22);
  v36[0] = v9;
  v36[1] = v22;
  v36[2] = WitnessTable;
  v36[3] = v24;
  v25 = type metadata accessor for NSDiffableDataSourceSnapshot(0, v36);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)v19);
  swift_bridgeObjectRelease();
  v26 = v31;
  v27 = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v31);
  v28 = static NSDiffableDataSourceSnapshot<>.snapshotIdentifiers(from:inSection:)(v33, v32, v26, a7, v27);
  v17((uint64_t)v12, v30, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v9);
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v28, v12, v25);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v12, v35);
}

uint64_t MPModelPlaylist.supportsSing.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "traits") & 0x100) != 0)
    return MSVDeviceSupportsVocalAttenuation();
  else
    return 0;
}

id MPModelPlaylist.coverArtworkCatalog.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v1 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v2 = swift_allocObject(v1, 80, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100427490;
  *(_QWORD *)(v2 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistName);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistCoverArtworkRecipe);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistUserEditableComponents);
  *(_QWORD *)(v2 + 72) = v5;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(MPPropertySet), "propertySetWithProperties:", isa);

  LODWORD(isa) = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v7);
  if (!(_DWORD)isa)
    return 0;
  v8 = objc_msgSend(v0, "name");
  if (!v8)
    return 0;
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v12 = v11;

  if ((objc_msgSend(v0, "userEditableComponents") & 2) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = objc_msgSend(v0, "coverArtworkRecipe");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = _s9MusicCore14PlaylistCoversO12ArtworkTokenC7rawJSON13playlistTitleAESgSS_SStcfC_0(v14, v16, v10, v12);
  if (!v17)
    return 0;
  v18 = v17;
  v19 = objc_msgSend(v0, "artworkCatalog");
  if (v19)
  {
    v20 = v19;

  }
  else
  {
    if (qword_10054BD30 != -1)
      swift_once(&qword_10054BD30, sub_10023CDA4);
    v22 = type metadata accessor for Logger(0);
    sub_10000D78C(v22, (uint64_t)static Logger.playlistCovers);
    v23 = v0;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v34 = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = objc_msgSend(v23, "coverArtworkRecipe");
      v29 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      *(_QWORD *)(v26 + 4) = sub_1000BA30C(v29, v31, &v34);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No server artwork catalog available for playlist with coverArtworkRecipe=%{public}s", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    v32 = qword_10054BCE0;
    v33 = v18;
    if (v32 != -1)
      swift_once(&qword_10054BCE0, sub_10022E408);
    v20 = objc_msgSend(objc_allocWithZone((Class)MPArtworkCatalog), "initWithToken:dataSource:", v33, static PlaylistCovers.ArtworkDataSource.shared);

  }
  return v20;
}

void *static MPModelPlaylist.favoriteSongsRequest(labeled:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  NSString v6;

  sub_10000B4C8((uint64_t *)&unk_100550D40);
  static MPModelLibraryRequest<>.favoriteSongs.getter();
  v4 = v3;
  if (a2 && v3)
  {
    v5 = v3;
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setLabel:", v6);

  }
  return v4;
}

void static MPModelLibraryRequest<>.favoriteSongs.getter()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  void *v15;
  id v16;
  Class isa;
  id v18;
  id v19;
  id v20;
  NSString v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  Class v32;
  void *v33;
  uint64_t v34;
  __int128 aBlock;
  void (*v36)(uint64_t, void *);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];

  v0 = objc_msgSend((id)objc_opt_self(MPMediaQuery), "favoriteSongsPlaylist");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "valueForProperty:", MPMediaItemPropertyPersistentID);
    if (v2)
    {
      v3 = v2;
      _bridgeAnyObjectToAny(_:)(v2);
      swift_unknownObjectRelease(v3);
    }
    else
    {
      memset(v41, 0, sizeof(v41));
    }
    sub_10014F4D0((uint64_t)v41, (uint64_t)&aBlock);
    if (!v37)
    {

      sub_100139528((uint64_t)&aBlock);
      return;
    }
    if ((swift_dynamicCast(&v40, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Int64, 6) & 1) == 0)
    {

      return;
    }
    v34 = v40;
    v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
    v5 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v6 = swift_allocObject(v5, 56, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100428000;
    *(_QWORD *)(v6 + 32) = objc_msgSend((id)objc_opt_self(MPModelSong), "kindWithVariants:", 7);
    v7 = (void *)objc_opt_self(NSUserDefaults);
    v8 = objc_msgSend(v7, "standardUserDefaults");
    strcpy((char *)v41, "showAllTVShows");
    HIBYTE(v41[0]) = -18;
    v9 = sub_1000AE4D8();
    NSUserDefaults.subscript.getter((uint64_t)v41, (uint64_t)&type metadata for String, v9, &aBlock);
    if (v37)
    {
      if ((swift_dynamicCast(v41, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      {
        v10 = v41[0];

        if ((v10 & 1) != 0)
        {
          v11 = 3;
          goto LABEL_17;
        }
LABEL_16:
        v11 = 2;
LABEL_17:
        *(_QWORD *)(v6 + 40) = objc_msgSend((id)objc_opt_self(MPModelTVEpisode), "kindWithVariants:", v11);
        v12 = objc_msgSend(v7, "standardUserDefaults");
        strcpy((char *)v41, "showAllTVShows");
        HIBYTE(v41[0]) = -18;
        NSUserDefaults.subscript.getter((uint64_t)v41, (uint64_t)&type metadata for String, v9, &aBlock);
        if (v37)
        {
          if ((swift_dynamicCast(v41, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
          {
            v13 = v41[0];

            if ((v13 & 1) != 0)
            {
              v14 = 3;
              goto LABEL_24;
            }
LABEL_23:
            v14 = 2;
LABEL_24:
            v15 = (void *)objc_opt_self(MPModelPlaylistEntry);
            v16 = objc_msgSend((id)objc_opt_self(MPModelMovie), "kindWithVariants:", v14);
            *(_QWORD *)(v6 + 48) = v16;
            *(_QWORD *)&aBlock = v6;
            specialized Array._endMutation()(v16);
            sub_10000B4C8((uint64_t *)&unk_1005506D0);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            v18 = objc_msgSend(v15, "kindWithKinds:", isa);

            v19 = objc_msgSend((id)objc_opt_self(MPModelPlaylist), "kindWithVariants:playlistEntryKind:options:", 2, v18, 0);
            v20 = v4;
            v21 = String._bridgeToObjectiveC()();
            objc_msgSend(v20, "setLabel:", v21);

            objc_msgSend(v20, "setSectionKind:", v19);
            v33 = v18;
            objc_msgSend(v20, "setItemKind:", v18);
            v22 = swift_allocObject(v5, 40, 7);
            *(_OWORD *)(v22 + 16) = xmmword_100424B90;
            v23 = objc_allocWithZone((Class)MPIdentifierSet);
            v24 = swift_allocObject(&unk_100509010, 24, 7);
            *(_QWORD *)(v24 + 16) = v34;
            v25 = swift_allocObject(&unk_100509038, 32, 7);
            *(_QWORD *)(v25 + 16) = sub_10018D93C;
            *(_QWORD *)(v25 + 24) = v24;
            v38 = sub_1000DC31C;
            v39 = v25;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v36 = sub_1001880C4;
            v37 = &unk_100509050;
            v26 = _Block_copy(&aBlock);
            v27 = v39;
            v28 = v19;
            swift_retain(v25);
            v29 = objc_msgSend(v23, "initWithModelKind:block:", v28, v26, swift_release(v27).n128_f64[0]);

            _Block_release(v26);
            LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(v25, "", 129, 335, 36, 1, v30);
            swift_release(v24);
            swift_release(v25);
            if ((v27 & 1) != 0)
            {
              __break(1u);
            }
            else
            {
              *(_QWORD *)(v22 + 32) = v29;
              *(_QWORD *)&aBlock = v22;
              specialized Array._endMutation()(v31);
              sub_1000DD108(0, &qword_10054FFB8, MPIdentifierSet_ptr);
              v32 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v20, "setAllowedSectionIdentifiers:", v32);

            }
            return;
          }
        }
        else
        {
          sub_100139528((uint64_t)&aBlock);
        }

        goto LABEL_23;
      }
    }
    else
    {
      sub_100139528((uint64_t)&aBlock);
    }

    goto LABEL_16;
  }
}

unint64_t MPNowPlayingAudioFormatBadging.debugDescription.getter(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  switch(a1)
  {
    case 0:
      v1 = 0x6574537973736F6CLL;
      v2 = 0xEB000000006F6572;
      goto LABEL_9;
    case 1:
      v2 = 0xEA0000000000736FLL;
      v1 = 0x6D744179626C6F64;
      goto LABEL_9;
    case 2:
      v1 = 0x64754179626C6F64;
      v2 = 0xEA00000000006F69;
      goto LABEL_9;
    case 3:
      v1 = 0x7373656C73736F6CLL;
      v2 = 0xE800000000000000;
      goto LABEL_9;
    case 4:
      v2 = 0x800000010044AF60;
      v1 = 0xD000000000000016;
      goto LABEL_9;
    case 5:
      v1 = 0x416C616974617073;
      v2 = 0xEC0000006F696475;
LABEL_9:
      String.append(_:)(*(Swift::String *)&v1);
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 62;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = 0x3C6E776F6E6B6E75;
      v6._object = (void *)0xE800000000000000;
      String.append(_:)(v6);
      swift_bridgeObjectRelease(0xE800000000000000);
      break;
  }
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD00000000000001FLL;
}

unint64_t sub_10018B850()
{
  uint64_t *v0;

  return MPNowPlayingAudioFormatBadging.debugDescription.getter(*v0);
}

id MPModelPerson.monogramArtworkCatalog.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v7;

  if (!objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPersonName))
    return 0;
  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  v7 = sub_10018C378(v3, v5, 0, 1);
  swift_bridgeObjectRelease();
  return v7;
}

id sub_10018B904()
{
  void *v0;
  id result;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  result = objc_msgSend(v0, "artworkCatalog");
  if (!result)
  {
    if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPersonName))
    {
      v2 = objc_msgSend(v0, "name");
      if (v2)
      {
        v3 = v2;
        v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
        v6 = v5;

      }
      else
      {
        v4 = 0;
        v6 = 0;
      }
      v7 = sub_10018C378(v4, v6, 0, 1);
      swift_bridgeObjectRelease();
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MPModelTVSeason.title.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_100509088, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_1005090B0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10018C7E4;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_1000D75E8;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_1005090C8;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 129, 870, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_10018BB10(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((uint64_t)objc_msgSend(a1, "number") < 1)
  {
    v24 = objc_msgSend(a1, "show");
    v25 = v24;
    if (v24)
    {
      v26 = objc_msgSend(v24, "title");

      if (v26)
      {
        v25 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v28 = v27;

LABEL_10:
        *a2 = (uint64_t)v25;
        a2[1] = v28;
        return swift_bridgeObjectRelease();
      }
      v25 = 0;
    }
    v28 = 0;
    goto LABEL_10;
  }
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
  v17._countAndFlagsBits = 0x206E6F73616553;
  v17._object = (void *)0xE700000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  v30 = objc_msgSend(a1, "number");
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v30, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  String.LocalizationValue.init(stringInterpolation:)(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v19 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  *a2 = v20;
  a2[1] = v22;
  return swift_bridgeObjectRelease();
}

void sub_10018BDC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1 + 32;
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = 0;
  v5 = (char *)_swiftEmptyArrayStorage;
  v6 = (char *)&_swiftEmptyArrayStorage[4];
LABEL_3:
  v8 = *(_QWORD *)(a1 + 16);
  if (v4 != v8)
  {
    if (v4 >= v8)
    {
LABEL_34:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v9 = *(_QWORD *)(v2 + 8 * v4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v9)
        {
          v7 = *(_QWORD *)(v9 + 16);
          if (v7)
            break;
        }
        ++v4;
        v10 = *(_QWORD *)(a1 + 16);
        if (v4 == v10)
          goto LABEL_30;
        if (v4 >= v10)
          goto LABEL_34;
      }
      v11 = 0;
      ++v4;
      while (v11 < v7)
      {
        v12 = v9 + 16 * v11;
        v13 = *(_QWORD *)(v12 + 40);
        v30 = *(_QWORD *)(v12 + 32);
        if (v3)
        {
          swift_bridgeObjectRetain();
          v14 = v5;
          v15 = __OFSUB__(v3--, 1);
          if (v15)
            goto LABEL_36;
        }
        else
        {
          v16 = *((_QWORD *)v5 + 3);
          if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_37;
          v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
          if (v17 <= 1)
            v18 = 1;
          else
            v18 = v17;
          v19 = sub_10000B4C8((uint64_t *)&unk_100550B40);
          v14 = (char *)swift_allocObject(v19, 16 * v18 + 32, 7);
          v20 = j__malloc_size(v14);
          v21 = v20 - 32;
          if (v20 < 32)
            v21 = v20 - 17;
          v22 = v21 >> 4;
          *((_QWORD *)v14 + 2) = v18;
          *((_QWORD *)v14 + 3) = 2 * (v21 >> 4);
          v23 = v14 + 32;
          v24 = *((_QWORD *)v5 + 3) >> 1;
          v6 = &v14[16 * v24 + 32];
          v25 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
          if (*((_QWORD *)v5 + 2))
          {
            v26 = v5 + 32;
            if (v14 != v5 || v23 >= &v26[16 * v24])
              memmove(v23, v26, 16 * v24);
            swift_bridgeObjectRetain();
            *((_QWORD *)v5 + 2) = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_release(v5);
          v15 = __OFSUB__(v25, 1);
          v3 = v25 - 1;
          if (v15)
            goto LABEL_36;
        }
        ++v11;
        *(_QWORD *)v6 = v30;
        *((_QWORD *)v6 + 1) = v13;
        v6 += 16;
        v5 = v14;
        v7 = *(_QWORD *)(v9 + 16);
        if (v11 == v7)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = *((_QWORD *)v5 + 3);
  if (v27 >= 2)
  {
    v28 = v27 >> 1;
    v15 = __OFSUB__(v28, v3);
    v29 = v28 - v3;
    if (v15)
    {
LABEL_38:
      __break(1u);
      return;
    }
    *((_QWORD *)v5 + 2) = v29;
  }
}

uint64_t sub_10018BFD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018BFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10018C00C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10018C014()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018C038()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_10018C064(void *a1, char a2)
{
  uint64_t v2;

  return sub_100186494(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10018C070()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018C094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10018660C(a1, a2, *(void (**)(_BYTE *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_10018C0A0(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return (uint64_t)_swiftEmptyArrayStorage;
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = _swiftEmptyArrayStorage;
  v17 = result + 40;
  v18 = *(_QWORD *)(result + 16);
  do
  {
    v19 = v5;
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain();
      v11 = (__CFString *)String._bridgeToObjectiveC()();
      v12 = (__CFString *)String._bridgeToObjectiveC()();
      v13 = UTTypeConformsTo(v11, v12);

      if (v13)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return (uint64_t)v19;
    }
    v5 = v19;
    result = swift_isUniquelyReferenced_nonNull_native(v19);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100117EE4(0, v19[2] + 1, 1);
      v5 = v19;
    }
    v15 = v5[2];
    v14 = v5[3];
    if (v15 >= v14 >> 1)
    {
      result = (uint64_t)sub_100117EE4((char *)(v14 > 1), v15 + 1, 1);
      v5 = v19;
    }
    v5[2] = v15 + 1;
    v16 = &v5[2 * v15];
    v16[4] = v10;
    v16[5] = v9;
    v3 = v17;
    v1 = v18;
  }
  while (v4 + v2);
  return (uint64_t)v5;
}

_QWORD *sub_10018C228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v5 = swift_bridgeObjectRetain() + 40;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRetain();
    sub_100186A94(a2, &v11);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    v7 = v11;
    if (v11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_1000DEF98(0, v6[2] + 1, 1, v6);
      v9 = v6[2];
      v8 = v6[3];
      if (v9 >= v8 >> 1)
        v6 = sub_1000DEF98((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      v6[2] = v9 + 1;
      v6[v9 + 4] = v7;
    }
    v5 += 16;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

id sub_10018C378(uint64_t a1, uint64_t a2, id a3, char a4)
{
  id v6;
  NSString v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  if ((a4 & 1) != 0)
  {
    if (!objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
    {
      a3 = 0;
      if (a2)
        goto LABEL_5;
      goto LABEL_7;
    }
    v6 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    a3 = objc_msgSend(v6, "userInterfaceLayoutDirection");

  }
  if (a2)
  {
LABEL_5:
    swift_bridgeObjectRetain();
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }
LABEL_7:
  v7 = 0;
LABEL_8:
  v8 = objc_msgSend(objc_allocWithZone((Class)MusicMonogramArtworkToken), "initWithFullName:rightToLeft:", v7, a3 == (id)1);

  if (v8)
  {
    v9 = (void *)objc_opt_self(MusicMonogramArtworkDataSource);
    v10 = v8;
    v11 = objc_msgSend(v9, "sharedMonogramArtworkDataSource");
    v12 = objc_allocWithZone((Class)MPArtworkCatalog);
    v13 = v10;
    v8 = objc_msgSend(v12, "initWithToken:dataSource:", v13, v11);

  }
  return v8;
}

uint64_t sub_10018C4E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10018C4F8(void *a1)
{
  uint64_t v1;

  sub_100187EEC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10018C500()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t _sSo13MPModelObjectC9MusicCoreE20MediaKitPlayableKindO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD280, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t _sSo13MPModelObjectC9MusicCoreE14FavoriteStatusO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD390, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

id sub_10018C5A0@<X0>(id *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "propertySetByCombiningWithPropertySet:", *a2);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for SnapshotIdentifier.Lazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotIdentifier.Lazy);
}

uint64_t type metadata accessor for SnapshotIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotIdentifier);
}

uint64_t sub_10018C5FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10018C620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100189A18(a1, a2, a3, *(void **)(v3 + 40), *(void (**)(uint64_t, char *, _BYTE *))(v3 + 48), *(_QWORD *)(v3 + 56), *(_BYTE **)(v3 + 64), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10018C650()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018C660()
{
  uint64_t v0;

  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10018C684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100189D60(a1, a2, a3, *(_QWORD *)(v3 + 40), *(void **)(v3 + 48), *(void (**)(uint64_t, char *, _BYTE *))(v3 + 56), *(_QWORD *)(v3 + 64), *(_BYTE **)(v3 + 72), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10018C6B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018C6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100189F5C(a1, a2, a3, v3[5], v3[2], v3[3]);
}

uint64_t sub_10018C6D4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  return sub_10018A148(a1, a2, a3, *(void **)(v3 + 40), *(void (**)(uint64_t, _QWORD *, _BYTE *))(v3 + 48), *(_QWORD *)(v3 + 56), *(_BYTE **)(v3 + 64), *(_QWORD *)(v3 + 16));
}

uint64_t sub_10018C704()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018C714()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10018C738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10018A448(a1, a2, a3, *(_QWORD *)(v3 + 40), *(void **)(v3 + 48), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_10018C748()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10018C758()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_10018C778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10018A7F8(a1, a2, a3, *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 16));
}

uint64_t sub_10018C784()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018C794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10018AAA0(a1, a2, a3, *(_QWORD *)(v3 + 32), *(void **)(v3 + 40), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10018C7A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018C7B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018C7C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018C7E4()
{
  uint64_t v0;

  return sub_10018BB10(*(void **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_10018C7EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10018C800()
{
  unint64_t result;

  result = qword_100550D60;
  if (!qword_100550D60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100550D60);
  }
  return result;
}

unint64_t sub_10018C848()
{
  unint64_t result;

  result = qword_100550D68;
  if (!qword_100550D68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100550D68);
  }
  return result;
}

unint64_t sub_10018C890()
{
  unint64_t result;

  result = qword_100550D70;
  if (!qword_100550D70)
  {
    result = swift_getWitnessTable("٨\r", &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100550D70);
  }
  return result;
}

unint64_t sub_10018C8D8()
{
  unint64_t result;

  result = qword_100550D78;
  if (!qword_100550D78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MPIdentifierSet.Purpose.Options, &type metadata for MPIdentifierSet.Purpose.Options);
    atomic_store(result, (unint64_t *)&qword_100550D78);
  }
  return result;
}

unint64_t sub_10018C920()
{
  unint64_t result;

  result = qword_100550D80;
  if (!qword_100550D80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MPModelObject.MediaKitPlayableKind, &type metadata for MPModelObject.MediaKitPlayableKind);
    atomic_store(result, (unint64_t *)&qword_100550D80);
  }
  return result;
}

unint64_t sub_10018C968()
{
  unint64_t result;

  result = qword_100550D88[0];
  if (!qword_100550D88[0])
  {
    result = swift_getWitnessTable("ͦ\r", &type metadata for MPModelObject.FavoriteStatus);
    atomic_store(result, qword_100550D88);
  }
  return result;
}

uint64_t sub_10018C9AC(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for SnapshotIdentifier<A>, a1);
}

ValueMetadata *type metadata accessor for MPIdentifierSet.Purpose()
{
  return &type metadata for MPIdentifierSet.Purpose;
}

ValueMetadata *type metadata accessor for MPIdentifierSet.Purpose.Options()
{
  return &type metadata for MPIdentifierSet.Purpose.Options;
}

uint64_t _s20MediaKitPlayableKindOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20MediaKitPlayableKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10018CAB8 + 4 * byte_10042ECE9[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10018CAEC + 4 * byte_10042ECE4[v4]))();
}

uint64_t sub_10018CAEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018CAF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018CAFCLL);
  return result;
}

uint64_t sub_10018CB08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018CB10);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10018CB14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018CB1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.MediaKitPlayableKind()
{
  return &type metadata for MPModelObject.MediaKitPlayableKind;
}

uint64_t _s14FavoriteStatusOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10018CB84 + 4 * byte_10042ECF3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10018CBB8 + 4 * byte_10042ECEE[v4]))();
}

uint64_t sub_10018CBB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018CBC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018CBC8);
  return result;
}

uint64_t sub_10018CBD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018CBDCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10018CBE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018CBE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.FavoriteStatus()
{
  return &type metadata for MPModelObject.FavoriteStatus;
}

uint64_t sub_10018CC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  result = type metadata accessor for SnapshotIdentifier.Lazy(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = "\b";
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v7);
    return 0;
  }
  return result;
}

char *sub_10018CC74(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v14[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v9 = *a2;
      *(_QWORD *)a1 = *a2;
      v10 = v9;
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v7, v8);
      if (swift_getEnumCaseMultiPayload(a2, v15) == 1)
      {
        v16 = type metadata accessor for IndexPath(0);
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        v17 = *(int *)(sub_10000B4C8(&qword_100550D28) + 48);
        v18 = *(char **)((char *)a2 + v17);
        *(_QWORD *)&a1[v17] = v18;
        v19 = v18;
        v20 = a1;
        v21 = v15;
        v22 = 1;
      }
      else
      {
        v23 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v23;
        v24 = v23;
        v20 = a1;
        v21 = v15;
        v22 = 0;
      }
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void sub_10018CD9C(id *a1, uint64_t a2)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
  {
    v6 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a2 + 16), v4, v5);
    if (swift_getEnumCaseMultiPayload(v3, v6) == 1)
    {
      v7 = type metadata accessor for IndexPath(0);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v3, v7);
      v3 = (id *)((char *)v3 + *(int *)(sub_10000B4C8(&qword_100550D28) + 48));
    }
    else
    {
      ++v3;
    }
  }

}

_QWORD *sub_10018CE24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v8 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v9 = v8;
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v13 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v6, v7);
    if (swift_getEnumCaseMultiPayload(a2, v13) == 1)
    {
      v14 = type metadata accessor for IndexPath(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = *(int *)(sub_10000B4C8(&qword_100550D28) + 48);
      v16 = *(void **)(a2 + v15);
      *(_QWORD *)((char *)a1 + v15) = v16;
      v17 = v16;
      v18 = a1;
      v19 = v13;
      v20 = 1;
    }
    else
    {
      v21 = *(void **)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v21;
      v22 = v21;
      v18 = a1;
      v19 = v13;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

void **sub_10018CF20(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  if (a1 != a2)
  {
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v8 = *a2;
      *a1 = *a2;
      v9 = v8;
      v10 = 1;
    }
    else
    {
      v11 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v6, v7);
      if (swift_getEnumCaseMultiPayload(a2, v11) == 1)
      {
        v12 = type metadata accessor for IndexPath(0);
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = *(int *)(sub_10000B4C8(&qword_100550D28) + 48);
        v14 = *(void **)((char *)a2 + v13);
        *(void **)((char *)a1 + v13) = v14;
        v15 = v14;
        v16 = a1;
        v17 = v11;
        v18 = 1;
      }
      else
      {
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        v20 = v19;
        v16 = a1;
        v17 = v11;
        v18 = 0;
      }
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

char *sub_10018D038(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v6, v7);
    if (swift_getEnumCaseMultiPayload(a2, v8) == 1)
    {
      v9 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = sub_10000B4C8(&qword_100550D28);
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload(a1, v8, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_10018D124(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
    else
    {
      v9 = type metadata accessor for SnapshotIdentifier.Lazy(0, *(_QWORD *)(a3 + 16), v7, v8);
      if (swift_getEnumCaseMultiPayload(a2, v9) == 1)
      {
        v10 = type metadata accessor for IndexPath(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = sub_10000B4C8(&qword_100550D28);
        *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
        swift_storeEnumTagMultiPayload(a1, v9, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10018D228(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = &unk_10042F2E8;
  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, (char *)&value witness table for Builtin.UnknownObject + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
    return 0;
  }
  return result;
}

uint64_t *sub_10018D2B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for IndexPath(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(sub_10000B4C8(&qword_100550D28) + 48);
      v9 = *(void **)((char *)a2 + v8);
      *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
      v10 = v9;
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = (void *)a2[1];
      *a1 = *a2;
      a1[1] = (uint64_t)v15;
      v16 = v15;
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void sub_10018D388(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id *v4;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = (id *)(a1 + *(int *)(sub_10000B4C8(&qword_100550D28) + 48));
  }
  else
  {
    v4 = (id *)(a1 + 8);
  }

}

_QWORD *sub_10018D3EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for IndexPath(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(sub_10000B4C8(&qword_100550D28) + 48);
    v8 = *(void **)((char *)a2 + v7);
    *(_QWORD *)((char *)a1 + v7) = v8;
    v9 = v8;
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v13 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = v13;
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

_QWORD *sub_10018D498(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  if (a1 != a2)
  {
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for IndexPath(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(sub_10000B4C8(&qword_100550D28) + 48);
      v8 = *(void **)((char *)a2 + v7);
      *(_QWORD *)((char *)a1 + v7) = v8;
      v9 = v8;
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      *a1 = *a2;
      v13 = (void *)a2[1];
      a1[1] = v13;
      v14 = v13;
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

char *sub_10018D568(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_10000B4C8(&qword_100550D28);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10018D60C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_10000B4C8(&qword_100550D28);
      *(_QWORD *)&a1[*(int *)(v8 + 48)] = *(_QWORD *)&a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_10018D6C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10018D6D8(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, "setPersistentID:", *(_QWORD *)(v1 + 16));
}

uint64_t sub_10018D6E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018D6F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10018D71C()
{
  uint64_t v0;

  return sub_10018786C(*(char **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10018D728()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10018D738()
{
  unint64_t result;

  result = qword_100550F00;
  if (!qword_100550F00)
  {
    result = swift_getWitnessTable(aI_2, &_s12LoadingErrorON);
    atomic_store(result, (unint64_t *)&qword_100550F00);
  }
  return result;
}

uint64_t sub_10018D77C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018D7A0()
{
  uint64_t v0;

  return sub_10018786C(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10018D7A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *_s12LoadingErrorOwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t _s12LoadingErrorOwxx(_QWORD *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *_s12LoadingErrorOwca(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  swift_errorRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  swift_errorRelease(v4);
  return a1;
}

_QWORD *_s13InsertCommandV8LocationOwtk(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *_s12LoadingErrorOwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_errorRelease(v3);
  return a1;
}

uint64_t _s12LoadingErrorOwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t _s12LoadingErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_10018D908(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *_s12LoadingErrorOMa()
{
  return &_s12LoadingErrorON;
}

void *Playlist.maximumBatchLimit.unsafeMutableAddressor()
{
  return &static Playlist.maximumBatchLimit;
}

BOOL sub_10018D9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = (*(uint64_t (**)(void))(a2 + 8))();
  if (v2)
    v3 = (_QWORD *)v2;
  else
    v3 = _swiftEmptyArrayStorage;
  v4 = sub_1001908A0((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  v5 = sub_10000B4C8((uint64_t *)&unk_100550FA0);
  v6 = type metadata accessor for AudioVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + 2 * v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100424BA0;
  v12 = v11 + v10;
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104);
  v13(v12, enum case for AudioVariant.dolbyAtmos(_:), v6);
  v13(v12 + v8, enum case for AudioVariant.dolbyAudio(_:), v6);
  v14 = sub_10018F448(v11, v4);
  swift_setDeallocating(v11);
  swift_arrayDestroy(v12, *(_QWORD *)(v11 + 16), v6);
  swift_deallocClassInstance(v11, 32, 7);
  v15 = *(_QWORD *)(v14 + 16);
  swift_release(v14);
  return v15 != 0;
}

uint64_t sub_10018DAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_10000B4C8(&qword_100550F90);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a2, v9);
  v11(v8, a1, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 1;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 0;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 1;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 1;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 1;
}

BOOL MusicLibrarySectionedResponse.isEmpty.getter()
{
  return MusicLibrarySectionedResponse.totalItemCount.getter() == 0;
}

uint64_t AudioVariant.supportsBadge.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  v9 = v6 == enum case for AudioVariant.dolbyAtmos(_:)
    || v6 == enum case for AudioVariant.dolbyAudio(_:)
    || v6 == enum case for AudioVariant.lossless(_:)
    || v6 == enum case for AudioVariant.highResolutionLossless(_:);
  v10 = v9;
  if (!v9)
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

unint64_t AudioVariant.symbolString.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v10;

  v1 = v0;
  v2 = 0xD000000000000018;
  v3 = type metadata accessor for AudioVariant(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 != enum case for AudioVariant.dolbyAtmos(_:) && v7 != enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v7 == enum case for AudioVariant.lossless(_:) || v7 == enum case for AudioVariant.highResolutionLossless(_:))
    {
      return 0xD000000000000015;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return 0;
    }
  }
  return v2;
}

uint64_t AudioVariant.accessibilityLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for AudioVariant.dolbyAtmos(_:))
  {
    if (qword_10054C2D8 != -1)
      swift_once(&qword_10054C2D8, sub_10028D770);
    v7 = &static AccessibilityString.dolbyAtmosLabel;
  }
  else if (v6 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (qword_10054C2E0 != -1)
      swift_once(&qword_10054C2E0, sub_10028D7BC);
    v7 = &static AccessibilityString.dolbyAudioLabel;
  }
  else if (v6 == enum case for AudioVariant.lossless(_:))
  {
    if (qword_10054C2F0 != -1)
      swift_once(&qword_10054C2F0, sub_10028D858);
    v7 = &static AccessibilityString.losslessLabel;
  }
  else
  {
    if (v6 != enum case for AudioVariant.highResolutionLossless(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
    if (qword_10054C2E8 != -1)
      swift_once(&qword_10054C2E8, sub_10028D808);
    v7 = &static AccessibilityString.hiResLosslessLabel;
  }
  v8 = *v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t AudioVariant.badgeText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v22[-v10];
  v12 = type metadata accessor for AudioVariant(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v1, v12);
  v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for AudioVariant.lossless(_:))
  {
    v17 = 0x7373656C73736F4CLL;
    v18 = 0xE800000000000000;
  }
  else
  {
    if (v16 != enum case for AudioVariant.highResolutionLossless(_:))
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
      return 0;
    }
    v18 = 0x800000010044B070;
    v17 = 0x1000000000000012;
  }
  String.LocalizationValue.init(stringLiteral:)(v17, v18);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v19 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v20 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v19, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v20;
}

uint64_t sub_10018E2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_10000B4C8(&qword_100550F90);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a1, v9);
  v11(v8, a2, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 1;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 0;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 1;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 1;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 1;
}

uint64_t sub_10018E47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_10000B4C8(&qword_100550F90);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a2, v9);
  v11(v8, a1, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 0;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 1;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 0;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 0;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 0;
}

uint64_t Array<A>.removingEquivalents()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v0 = sub_10000B4C8(&qword_100550F70);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AudioVariant(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1001908A0(v7);
  swift_bridgeObjectRelease();
  v16 = v8;
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v9(v6, enum case for AudioVariant.highResolutionLossless(_:), v3);
  swift_bridgeObjectRetain();
  v10 = sub_10016784C((uint64_t)v6, v8);
  swift_bridgeObjectRelease();
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v10 & 1) != 0)
  {
    v9(v6, enum case for AudioVariant.lossless(_:), v3);
    sub_10018F888((uint64_t)v6, (uint64_t)v2);
    v11(v6, v3);
    sub_1001909C8((uint64_t)v2);
  }
  v12 = v16;
  v9(v6, enum case for AudioVariant.dolbyAtmos(_:), v3);
  swift_bridgeObjectRetain();
  v13 = sub_10016784C((uint64_t)v6, v12);
  swift_bridgeObjectRelease();
  v11(v6, v3);
  if ((v13 & 1) != 0)
  {
    v9(v6, enum case for AudioVariant.dolbyAudio(_:), v3);
    sub_10018F888((uint64_t)v6, (uint64_t)v2);
    v11(v6, v3);
    sub_1001909C8((uint64_t)v2);
  }
  return v16;
}

uint64_t MusicLibrary.DownloadStatus.DownloadPauseReasons.init(mediaPlayerReason:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 4) != 0)
  {
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.cellularDataDisallowed.getter(v6);
  }
  else if ((a1 & 2) != 0)
  {
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.constrainedNetwork.getter(v6);
  }
  else
  {
    if ((a1 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.thermalPressure.getter(v6);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t MusicLibrary.DownloadStatus.DownloadPauseReasons.alert.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71[4];
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v69 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v70 - 8);
  v7 = __chkstk_darwin(v70);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v67 - v10;
  v12 = type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v67 - v17;
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v67 - v17, v2, v12);
  static MusicLibrary.DownloadStatus.DownloadPauseReasons.cellularDataDisallowed.getter(v19);
  v20 = sub_10001254C(&qword_100550F78, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus.DownloadPauseReasons);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
  v22 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  v23 = v22(v16, v12);
  if ((v21 & 1) != 0)
  {
    v22(v18, v12);
    result = (uint64_t)sub_10017F100(0, 0, v71);
    v25 = v71[0];
    v26 = v71[1];
    v27 = v71[2];
    v28 = v71[3];
    v29 = v72;
    v31 = v73;
    v30 = v74;
  }
  else
  {
    static MusicLibrary.DownloadStatus.DownloadPauseReasons.constrainedNetwork.getter(v23);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
    v33 = v22(v16, v12);
    if ((v32 & 1) != 0)
    {
      v22(v18, v12);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010044B130);
      v34 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v35 = v70;
      v34(v9, v11, v70);
      if (qword_10054B9B0 != -1)
        swift_once(&qword_10054B9B0, sub_1000ABDCC);
      v36 = qword_100561480;
      v37 = (id)qword_100561480;
      v38 = v69;
      static Locale.current.getter(v37);
      v39 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v36, v38, 0, 0, 256);
      v67 = v40;
      v68 = v39;
      v41 = *(void (**)(char *, uint64_t))(v6 + 8);
      v41(v11, v35);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000038, 0x800000010044B150);
      v34(v9, v11, v35);
      v42 = qword_100561480;
      static Locale.current.getter((id)qword_100561480);
      v27 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v42, v38, 0, 0, 256);
      v28 = v43;
      v41(v11, v35);
      v44 = sub_10000B4C8(&qword_100552680);
      v45 = v34;
      v31 = swift_allocObject(v44, 144, 7);
      *(_OWORD *)(v31 + 16) = xmmword_100424BA0;
      if (qword_10054C280 != -1)
        swift_once(&qword_10054C280, sub_10028CD28);
      v47 = static String.okButtonTitle;
      v46 = qword_100562350;
      *(_QWORD *)(v31 + 32) = 0x6C65636E6163;
      *(_QWORD *)(v31 + 40) = 0xE600000000000000;
      *(_QWORD *)(v31 + 48) = v47;
      *(_QWORD *)(v31 + 56) = v46;
      *(_BYTE *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      swift_bridgeObjectRetain();
      String.LocalizationValue.init(stringLiteral:)(0x73676E6974746553, 0xE800000000000000);
      v45(v9, v11, v35);
      v48 = qword_100561480;
      static Locale.current.getter((id)qword_100561480);
      v49 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v48, v38, 0, 0, 256);
      v50 = v35;
      v52 = v51;
      result = ((uint64_t (*)(char *, uint64_t))v41)(v11, v50);
      v29 = 0;
      v30 = 0;
      *(_QWORD *)(v31 + 88) = 0x73676E6974746573;
      *(_QWORD *)(v31 + 96) = 0xE800000000000000;
      *(_QWORD *)(v31 + 104) = v49;
      *(_QWORD *)(v31 + 112) = v52;
      *(_BYTE *)(v31 + 120) = 2;
      *(_QWORD *)(v31 + 128) = &unk_100550F80;
      *(_QWORD *)(v31 + 136) = 0;
    }
    else
    {
      static MusicLibrary.DownloadStatus.DownloadPauseReasons.thermalPressure.getter(v33);
      v53 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v18, v12, v20);
      v22(v16, v12);
      result = v22(v18, v12);
      if ((v53 & 1) == 0)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v31 = 0;
        v30 = 0;
        goto LABEL_17;
      }
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000036, 0x800000010044B090);
      v54 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v55 = v70;
      v54(v9, v11, v70);
      if (qword_10054B9B0 != -1)
        swift_once(&qword_10054B9B0, sub_1000ABDCC);
      v56 = qword_100561480;
      v57 = (id)qword_100561480;
      v58 = v69;
      static Locale.current.getter(v57);
      v59 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v56, v58, 0, 0, 256);
      v67 = v60;
      v68 = v59;
      v61 = *(void (**)(char *, uint64_t))(v6 + 8);
      v61(v11, v55);
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000055, 0x800000010044B0D0);
      v54(v9, v11, v55);
      v62 = qword_100561480;
      static Locale.current.getter((id)qword_100561480);
      v27 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v62, v58, 0, 0, 256);
      v28 = v63;
      v61(v11, v55);
      v64 = sub_10000B4C8(&qword_100552680);
      v31 = swift_allocObject(v64, 88, 7);
      *(_OWORD *)(v31 + 16) = xmmword_100424BB0;
      if (qword_10054C280 != -1)
        swift_once(&qword_10054C280, sub_10028CD28);
      v66 = static String.okButtonTitle;
      v65 = qword_100562350;
      *(_QWORD *)(v31 + 32) = 0x6C65636E6163;
      *(_QWORD *)(v31 + 40) = 0xE600000000000000;
      *(_QWORD *)(v31 + 48) = v66;
      *(_QWORD *)(v31 + 56) = v65;
      *(_BYTE *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 80) = 0;
      result = swift_bridgeObjectRetain();
      v29 = 0;
      v30 = 0;
    }
    v26 = v67;
    v25 = v68;
  }
LABEL_17:
  *a1 = v25;
  a1[1] = v26;
  a1[2] = v27;
  a1[3] = v28;
  a1[4] = v29;
  a1[5] = v31;
  a1[6] = v30;
  return result;
}

uint64_t Track.musicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for Track(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v28 - v8, v1, v3);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v9, v3);
  if (v11 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for Song(0);
    v13 = v12;
    v14 = &protocol witness table for Song;
LABEL_5:
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v14;
    v15 = sub_1000C16E0((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v15, v9, v13);
  }
  if (v11 == enum case for Track.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for MusicVideo(0);
    v13 = v12;
    v14 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (qword_10054BBA0 != -1)
    swift_once(&qword_10054BBA0, sub_10018F364);
  v17 = type metadata accessor for Logger(0);
  sub_10000D78C(v17, (uint64_t)static Logger.musicKit);
  v18 = ((uint64_t (*)(char *, uint64_t, uint64_t))v10)(v7, v1, v3);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.fault.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v29 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = sub_10001254C(&qword_100550F88, (uint64_t (*)(uint64_t))&type metadata accessor for Track, (uint64_t)&protocol conformance descriptor for Track);
    v24 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v3, v23);
    v26 = v25;
    *(_QWORD *)(v21 + 4) = sub_1000BA30C(v24, v25, &v29);
    swift_bridgeObjectRelease(v26);
    v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v27(v7, v3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unsupported Track type=%s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v27(v7, v3);
  }

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v27)(v9, v3);
}

uint64_t Logger.musicKit.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10054BBA0 != -1)
    swift_once(&qword_10054BBA0, sub_10018F364);
  v0 = type metadata accessor for Logger(0);
  return sub_10000D78C(v0, (uint64_t)static Logger.musicKit);
}

NSString sub_10018F2A8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static MusicLibrary.downloadingStateDidChange = (uint64_t)result;
  return result;
}

uint64_t *MusicLibrary.downloadingStateDidChange.unsafeMutableAddressor()
{
  if (qword_10054BB98 != -1)
    swift_once(&qword_10054BB98, sub_10018F2A8);
  return &static MusicLibrary.downloadingStateDidChange;
}

id static MusicLibrary.downloadingStateDidChange.getter()
{
  if (qword_10054BB98 != -1)
    swift_once(&qword_10054BB98, sub_10018F2A8);
  return (id)static MusicLibrary.downloadingStateDidChange;
}

uint64_t static Playlist.maximumBatchLimit.getter()
{
  return 10000;
}

uint64_t sub_10018F364()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.musicKit);
  sub_10000D78C(v0, (uint64_t)static Logger.musicKit);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x74694B636973754DLL, 0xE800000000000000);
}

uint64_t static Logger.musicKit.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10054BBA0 != -1)
    swift_once(&qword_10054BBA0, sub_10018F364);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Logger.musicKit);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10018F448(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_10018F5C8((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3, a2);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_10018F5C8((unint64_t *)v10, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

uint64_t sub_10018F5C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a1;
  v8 = type metadata accessor for AudioVariant(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  v37 = *(_QWORD *)(a3 + 16);
  if (v37)
  {
    v32 = a2;
    v33 = v4;
    v39 = v12;
    v40 = a4 + 56;
    v36 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v41 = *(_QWORD *)(v12 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v31 = a3;
    swift_bridgeObjectRetain();
    v34 = 0;
    v16 = 0;
    while (1)
    {
      v38 = v16;
      v15(v14, v36 + v41 * v16, v8);
      v18 = a4;
      v19 = *(_QWORD *)(a4 + 40);
      v20 = sub_10001254C(&qword_100550A58, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v8, v20);
      a4 = v18;
      v22 = -1 << *(_BYTE *)(v18 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v40 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v24 = ~v22;
        while (1)
        {
          v15(v11, *(_QWORD *)(a4 + 48) + v23 * v41, v8);
          v25 = sub_10001254C(&qword_100550A60, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
          v26 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v14, v8, v25);
          v17 = *(void (**)(char *, uint64_t))(v39 + 8);
          v17(v11, v8);
          if ((v26 & 1) != 0)
            break;
          v23 = (v23 + 1) & v24;
          a4 = v18;
          if (((*(_QWORD *)(v40 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_4;
        }
        result = ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
        v28 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
        v29 = *(unint64_t *)((char *)v35 + v28);
        *(unint64_t *)((char *)v35 + v28) = v29 | (1 << v23);
        if ((v29 & (1 << v23)) != 0)
        {
          a4 = v18;
        }
        else
        {
          if (__OFADD__(v34, 1))
          {
            __break(1u);
            return result;
          }
          a4 = v18;
          ++v34;
        }
      }
      else
      {
        v17 = *(void (**)(char *, uint64_t))(v39 + 8);
LABEL_4:
        v17(v14, v8);
      }
      v16 = v38 + 1;
      if (v38 + 1 == v37)
      {
        swift_bridgeObjectRelease(v31);
        a2 = v32;
        v30 = v34;
        goto LABEL_17;
      }
    }
  }
  v30 = 0;
LABEL_17:
  swift_retain(a4);
  return sub_1001D5D68(v35, a2, v30, a4);
}

uint64_t sub_10018F888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v6 = type metadata accessor for AudioVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10001254C(&qword_100550A58, v12, (uint64_t)&protocol conformance descriptor for AudioVariant);
  swift_bridgeObjectRetain();
  v32 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v33 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_10001254C(&qword_100550A60, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v32, v6, v21);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v23 = 1;
        a2 = v31;
        v7 = v33;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v24 = v30;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
    v26 = *v24;
    v34 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1001D77D8();
      v26 = v34;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v33;
    a2 = v31;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 32))(v31, v27, v6);
    sub_10018FFA0(v16);
    *v24 = v34;
    swift_bridgeObjectRelease();
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_10018FAC4(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[10];

  v3 = *v1;
  Hasher.init(_seed:)(v9);
  v4 = Library.Menu.Identifier.rawValue.getter(a1);
  v6 = v5;
  swift_bridgeObjectRetain();
  String.hash(into:)(v9, v4, v6);
  swift_bridgeObjectRelease();
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v3 + 32));
  if (((*(_QWORD *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  return 13;
}

uint64_t sub_10018FE98(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001D7EE0();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_100190578(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

void sub_10018FFA0(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for AudioVariant(0);
  v31 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v28 = v1;
    v10 = ~v8;
    swift_retain(v6);
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    v30 = v7;
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11 + 1) & v10;
      v13 = *(_QWORD *)(v31 + 72);
      v29 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      do
      {
        v14 = v13 * v9;
        v29(v5, *(_QWORD *)(v6 + 48) + v13 * v9, v3);
        v15 = *(_QWORD *)(v6 + 40);
        v16 = sub_10001254C(&qword_100550A58, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v3, v16);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v3);
        v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 < v12 || a1 < (uint64_t)v18)
            goto LABEL_6;
        }
        else if (v18 < v12 && a1 < (uint64_t)v18)
        {
          goto LABEL_6;
        }
        v21 = *(_QWORD *)(v6 + 48);
        v22 = v13 * a1;
        v23 = v21 + v13 * a1;
        if (v13 * a1 < v14 || v23 >= v21 + v14 + v13)
        {
          swift_arrayInitWithTakeFrontToBack(v23);
        }
        else
        {
          a1 = v9;
          if (v22 == v14)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v23);
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v30 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v30 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release(v6);
    v1 = v28;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v24 = *v1;
  v25 = *(_QWORD *)(*v1 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v24 + 16) = v27;
    ++*(_DWORD *)(v24 + 36);
  }
}

unint64_t sub_10019021C(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[10];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
      Hasher.init(_seed:)(v12);
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x100190544);
  }
  *(_QWORD *)(v3 + 16) = v11;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_100190578(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t _s8MusicKit12AudioVariantO0A4CoreE1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v19;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_10000B4C8(&qword_100550F90);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 48)];
  v9 = type metadata accessor for AudioVariant(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v11(v7, a1, v9);
  v11(v8, a2, v9);
  v12 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v13 = v12(v7, v9);
  v14 = enum case for AudioVariant.dolbyAtmos(_:);
  if (v13 == enum case for AudioVariant.dolbyAtmos(_:))
    goto LABEL_20;
  v15 = enum case for AudioVariant.dolbyAudio(_:);
  if (v13 == enum case for AudioVariant.dolbyAudio(_:))
  {
    if (v12(v8, v9) == v14)
      return 0;
LABEL_20:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    return 1;
  }
  if (v13 == enum case for AudioVariant.lossless(_:))
  {
    v16 = v12(v8, v9);
    if (v16 == v14 || v16 == v15 || v16 == enum case for AudioVariant.highResolutionLossless(_:))
      return 0;
    goto LABEL_20;
  }
  if (v13 == enum case for AudioVariant.highResolutionLossless(_:))
  {
    v19 = v12(v8, v9);
    if (v19 == v14 || v19 == v15)
      return 0;
    goto LABEL_20;
  }
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v8, v9);
  v22(v7, v9);
  return 0;
}

uint64_t sub_1001908A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_10001254C(&qword_100550A58, v10, (uint64_t)&protocol conformance descriptor for AudioVariant);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_1001D3120((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_1001909C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100550F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100190A08()
{
  return sub_10001254C(&qword_100550A60, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
}

uint64_t sub_100190A34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100190AA4();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Library.Menu.Identifier, v3);
  v8 = result;
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_1001D386C(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_100190AA4()
{
  unint64_t result;

  result = qword_100550F98;
  if (!qword_100550F98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Identifier, &type metadata for Library.Menu.Identifier);
    atomic_store(result, (unint64_t *)&qword_100550F98);
  }
  return result;
}

uint64_t static Logger.music(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, a1, a2);
}

uint64_t Logger.motion.unsafeMutableAddressor()
{
  return sub_100190E3C(&qword_10054BBC8, (uint64_t)static Logger.motion, (uint64_t)sub_100190E98);
}

uint64_t *OS_os_log.musicBag.unsafeMutableAddressor()
{
  if (qword_10054BBB0 != -1)
    swift_once(&qword_10054BBB0, sub_100190C98);
  return &static OS_os_log.musicBag;
}

uint64_t OS_os_log.init(musicCategory:)(uint64_t a1, uint64_t a2)
{
  return OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, a1, a2);
}

uint64_t Logger.audioFormat.unsafeMutableAddressor()
{
  return sub_100190E3C(&qword_10054BBB8, (uint64_t)static Logger.audioFormat, (uint64_t)sub_100190D14);
}

uint64_t sub_100190BDC()
{
  uint64_t result;

  sub_100191240();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x74736F706E676953, 0xE900000000000073);
  static OS_os_log.musicSignposts = result;
  return result;
}

uint64_t *OS_os_log.musicSignposts.unsafeMutableAddressor()
{
  if (qword_10054BBA8 != -1)
    swift_once(&qword_10054BBA8, sub_100190BDC);
  return &static OS_os_log.musicSignposts;
}

id static OS_os_log.musicSignposts.getter()
{
  return sub_100159824(&qword_10054BBA8, (id *)&static OS_os_log.musicSignposts);
}

uint64_t sub_100190C98()
{
  uint64_t result;

  sub_100191240();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 6775106, 0xE300000000000000);
  static OS_os_log.musicBag = result;
  return result;
}

id static OS_os_log.musicBag.getter()
{
  return sub_100159824(&qword_10054BBB0, (id *)&static OS_os_log.musicBag);
}

void *String.musicSubsystem.unsafeMutableAddressor()
{
  return &static String.musicSubsystem;
}

uint64_t sub_100190D14()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.audioFormat);
  sub_10000D78C(v0, (uint64_t)static Logger.audioFormat);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x726F466F69647541, 0xEB0000000074616DLL);
}

uint64_t static Logger.audioFormat.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100190F30(&qword_10054BBB8, (uint64_t)static Logger.audioFormat, (uint64_t)sub_100190D14, a1);
}

uint64_t sub_100190DAC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.badging);
  sub_10000D78C(v0, (uint64_t)static Logger.badging);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x676E6967646142, 0xE700000000000000);
}

uint64_t Logger.badging.unsafeMutableAddressor()
{
  return sub_100190E3C(&qword_10054BBC0, (uint64_t)static Logger.badging, (uint64_t)sub_100190DAC);
}

uint64_t sub_100190E3C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Logger(0);
  return sub_10000D78C(v4, a2);
}

uint64_t static Logger.badging.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100190F30(&qword_10054BBC0, (uint64_t)static Logger.badging, (uint64_t)sub_100190DAC, a1);
}

uint64_t sub_100190E98()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.motion);
  sub_10000D78C(v0, (uint64_t)static Logger.motion);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x7472416F65646956, 0xEC0000006B726F77);
}

uint64_t static Logger.motion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100190F30(&qword_10054BBC8, (uint64_t)static Logger.motion, (uint64_t)sub_100190E98, a1);
}

uint64_t sub_100190F30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D78C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

unint64_t static String.musicSubsystem.getter()
{
  return 0xD000000000000013;
}

uint64_t Optional.expectNotNil(logger:file:line:function:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  os_log_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v8 = v7;
  v34 = a3;
  v35 = a4;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 16) - 8) + 48))(v7, 1) == 1)
  {
    v33 = a7;
    v18 = static os_log_type_t.info.getter();
    swift_bridgeObjectRetain_n(a2, 2);
    v19 = swift_bridgeObjectRetain_n(a5, 2);
    v20 = Logger.logObject.getter(v19);
    if (os_log_type_enabled(v20, v18))
    {
      v21 = swift_slowAlloc(32, -1);
      v32 = v18;
      v22 = v21;
      v31 = swift_slowAlloc(64, -1);
      v36 = v31;
      *(_DWORD *)v22 = 136315650;
      v23 = URL.init(fileURLWithPath:)(a1, a2);
      v30 = v20;
      v24 = (char *)URL.lastPathComponent.getter(v23);
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      *(_QWORD *)(v22 + 4) = sub_1000BA30C(v24, v26, &v36);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      *(_QWORD *)(v22 + 14) = v34;
      *(_WORD *)(v22 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v22 + 24) = sub_1000BA30C(v35, a5, &v36);
      swift_bridgeObjectRelease_n(a5, 3);
      v20 = v30;
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v32, "Unexpectedly found nil: %s:%ld %s", (uint8_t *)v22, 0x20u);
      v27 = v31;
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }

    a7 = v33;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(a7, v8, a6);
}

uint64_t sub_100191218@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_100191240()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10054F900;
  if (!qword_10054F900)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10054F900);
  }
  return result;
}

id sub_1001912A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s27WeakViewControllerReferenceCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001912EC()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100550FB0 = result;
  return result;
}

uint64_t sub_100191310()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100550FB8 = result;
  return result;
}

uint64_t sub_100191334()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100550FC0 = result;
  return result;
}

uint64_t sub_100191358()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100550FC8 = result;
  return result;
}

id UIViewController.playActivityFeatureNameSourceViewController.getter()
{
  return sub_100191468(&qword_10054BBD8, (const void **)&qword_100550FB8, (uint64_t)sub_100191310);
}

uint64_t _s27WeakViewControllerReferenceCMa()
{
  return objc_opt_self(_TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference);
}

void UIViewController.playActivityFeatureNameSourceViewController.setter(void *a1)
{
  sub_10019158C(a1, &qword_10054BBD8, (const void **)&qword_100550FB8, (uint64_t)sub_100191310);
}

id UIViewController.playActivityRecommendationDataSourceViewController.getter()
{
  return sub_100191468(&qword_10054BBE0, (const void **)&qword_100550FC0, (uint64_t)sub_100191334);
}

id sub_100191468(_QWORD *a1, const void **a2, uint64_t a3)
{
  void *v3;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t Strong;
  char *v11;
  _OWORD v12[2];
  _BYTE v13[24];
  uint64_t v14;

  if (*a1 != -1)
    swift_once(a1, a3);
  v5 = objc_getAssociatedObject(v3, *a2);
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10014F4D0((uint64_t)v12, (uint64_t)v13);
  if (!v14)
  {
    sub_100139528((uint64_t)v13);
    return objc_msgSend(v3, "parentViewController");
  }
  v7 = _s27WeakViewControllerReferenceCMa();
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    return objc_msgSend(v3, "parentViewController");
  v8 = v11;
  Strong = swift_unknownObjectWeakLoadStrong(&v11[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController]);

  if (!Strong)
    return objc_msgSend(v3, "parentViewController");
  return (id)Strong;
}

void UIViewController.playActivityRecommendationDataSourceViewController.setter(void *a1)
{
  sub_10019158C(a1, &qword_10054BBE0, (const void **)&qword_100550FC0, (uint64_t)sub_100191334);
}

void sub_10019158C(void *a1, _QWORD *a2, const void **a3, uint64_t a4)
{
  void *v4;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  id v12;
  const void *v13;
  id v14;
  objc_super v15;

  if (a1)
  {
    v9 = (objc_class *)_s27WeakViewControllerReferenceCMa();
    v10 = (char *)objc_allocWithZone(v9);
    v11 = swift_unknownObjectWeakInit(&v10[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController], 0);
    swift_unknownObjectWeakAssign(v11, a1);
    v15.receiver = v10;
    v15.super_class = v9;
    v12 = objc_msgSendSuper2(&v15, "init");
  }
  else
  {
    v12 = 0;
  }
  if (*a2 != -1)
    swift_once(a2, a4);
  v13 = *a3;
  v14 = v12;
  objc_setAssociatedObject(v4, v13, v14, (void *)1);

}

void (*UIViewController.playActivityRecommendationDataSourceViewController.modify(_QWORD *a1))(objc_super **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v3[4] = UIViewController.playActivityRecommendationDataSourceViewController.getter();
  return sub_1001916BC;
}

void sub_1001916BC(objc_super **a1, char a2)
{
  objc_super *v2;
  id receiver;
  objc_class *v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super *v8;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  id v12;
  Class super_class;
  const void *v14;
  objc_super *v15;
  Class v16;
  const void *v17;
  id v18;

  v2 = *a1;
  receiver = (*a1)[2].receiver;
  if ((a2 & 1) != 0)
  {
    if (receiver)
    {
      v4 = (objc_class *)_s27WeakViewControllerReferenceCMa();
      v5 = (char *)objc_allocWithZone(v4);
      v6 = swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController], 0);
      swift_unknownObjectWeakAssign(v6, receiver);
      v2->receiver = v5;
      v2->super_class = v4;
      v7 = receiver;
      v8 = -[objc_super init](v2, "init");
    }
    else
    {
      v8 = 0;
    }
    if (qword_10054BBE0 != -1)
      swift_once(&qword_10054BBE0, sub_100191334);
    super_class = v2[2].super_class;
    v14 = (const void *)qword_100550FC0;
    v15 = v8;
    objc_setAssociatedObject(super_class, v14, v15, (void *)1);

    receiver = v2[2].receiver;
  }
  else
  {
    if (receiver)
    {
      v9 = (objc_class *)_s27WeakViewControllerReferenceCMa();
      v10 = (char *)objc_allocWithZone(v9);
      v11 = swift_unknownObjectWeakInit(&v10[OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController], 0);
      swift_unknownObjectWeakAssign(v11, receiver);
      v2[1].receiver = v10;
      v2[1].super_class = v9;
      v12 = objc_msgSendSuper2(v2 + 1, "init");
    }
    else
    {
      v12 = 0;
    }
    if (qword_10054BBE0 != -1)
      swift_once(&qword_10054BBE0, sub_100191334);
    v16 = v2[2].super_class;
    v17 = (const void *)qword_100550FC0;
    v18 = v12;
    objc_setAssociatedObject(v16, v17, v18, (void *)1);

  }
  free(v2);
}

uint64_t UIViewController.playActivityRecommendationData.getter()
{
  return 0;
}

uint64_t UIViewController.playActivityForwardedRecommendationData.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (qword_10054BBE8 != -1)
    swift_once(&qword_10054BBE8, sub_100191358);
  v1 = objc_getAssociatedObject(v0, (const void *)qword_100550FC8);
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10014F4D0((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_100139528((uint64_t)v6);
    return 0;
  }
}

void UIViewController.playActivityForwardedRecommendationData.setter(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  const void *v6;
  Class value;

  v3 = v2;
  if (qword_10054BBE8 != -1)
    swift_once(&qword_10054BBE8, sub_100191358);
  v6 = (const void *)qword_100550FC8;
  if (a2 >> 60 == 15)
  {
    value = 0;
    objc_setAssociatedObject(v3, (const void *)qword_100550FC8, 0, (void *)3);
  }
  else
  {
    sub_10003A5E4(a1, a2);
    value = Data._bridgeToObjectiveC()().super.isa;
    sub_10009FCF0(a1, a2);
    objc_setAssociatedObject(v3, v6, value, (void *)3);
  }
  sub_10009FCF0(a1, a2);

}

void (*UIViewController.playActivityForwardedRecommendationData.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = UIViewController.playActivityForwardedRecommendationData.getter();
  a1[1] = v3;
  return sub_100191A5C;
}

void sub_100191A5C(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  const void *v5;
  Class isa;
  const void *v7;
  Class value;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    sub_1000F2394(*(_QWORD *)a1, v4);
    if (qword_10054BBE8 != -1)
      swift_once(&qword_10054BBE8, sub_100191358);
    v5 = (const void *)qword_100550FC8;
    if (v4 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      sub_10003A5E4(v3, v4);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10009FCF0(v3, v4);
    }
    objc_setAssociatedObject(*(id *)(a1 + 16), v5, isa, (void *)3);
    sub_10009FCF0(v3, v4);

    sub_10009FCF0(v3, v4);
  }
  else
  {
    if (qword_10054BBE8 != -1)
      swift_once(&qword_10054BBE8, sub_100191358);
    v7 = (const void *)qword_100550FC8;
    if (v4 >> 60 == 15)
    {
      value = 0;
      objc_setAssociatedObject(*(id *)(a1 + 16), (const void *)qword_100550FC8, 0, (void *)3);
    }
    else
    {
      sub_10003A5E4(v3, v4);
      value = Data._bridgeToObjectiveC()().super.isa;
      sub_10009FCF0(v3, v4);
      objc_setAssociatedObject(*(id *)(a1 + 16), v7, value, (void *)3);
    }
    sub_10009FCF0(v3, v4);

  }
}

uint64_t UIViewController.inheritedPlayActivityRecommendationData(shouldIncludeForwardedRecommendationData:)(char a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id Strong;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  int v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  uint64_t v30;

  v3 = objc_msgSend(v1, "playActivityRecommendationData");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    if ((a1 & 1) == 0)
    {
      Strong = UIViewController.playActivityRecommendationDataSourceViewController.getter();
      v5 = 0;
LABEL_8:
      if (!Strong)
        return v5;
      while (1)
      {
        v10 = objc_msgSend(Strong, "playActivityRecommendationData");
        if (v10)
        {
          v11 = v10;
          v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v13 = v12;

          goto LABEL_27;
        }
        if ((a1 & 1) == 0)
          goto LABEL_26;
        v14 = qword_10054BBE8;
        v15 = Strong;
        if (v14 != -1)
          swift_once(&qword_10054BBE8, sub_100191358);
        v16 = objc_getAssociatedObject(v15, (const void *)qword_100550FC8);
        if (v16)
        {
          v17 = v16;
          _bridgeAnyObjectToAny(_:)(v16);
          swift_unknownObjectRelease(v17);
        }
        else
        {
          v27 = 0u;
          v28 = 0u;
        }
        sub_10014F4D0((uint64_t)&v27, (uint64_t)v29);
        if (!v30)
          break;
        v18 = swift_dynamicCast(v26, v29, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
        if (v18)
          v5 = v26[0];
        else
          v5 = 0;
        if (v18)
          v13 = v26[1];
        else
          v13 = 0xF000000000000000;

LABEL_27:
        v19 = qword_10054BBE0;
        v20 = Strong;
        if (v19 != -1)
          swift_once(&qword_10054BBE0, sub_100191334);
        v21 = objc_getAssociatedObject(v20, (const void *)qword_100550FC0);
        if (v21)
        {
          v22 = v21;
          _bridgeAnyObjectToAny(_:)(v21);
          swift_unknownObjectRelease(v22);
        }
        else
        {
          v27 = 0u;
          v28 = 0u;
        }
        sub_10014F4D0((uint64_t)&v27, (uint64_t)v29);
        if (v30)
        {
          v23 = _s27WeakViewControllerReferenceCMa();
          if ((swift_dynamicCast(v26, v29, (char *)&type metadata for Any + 8, v23, 6) & 1) != 0)
          {
            v24 = (void *)v26[0];
            Strong = (id)swift_unknownObjectWeakLoadStrong(v26[0]+ OBJC_IVAR____TtCE9MusicCoreCSo16UIViewControllerP33_DFE32C8D797FD8FF4F7188EA667D17A427WeakViewControllerReference_viewController);

            if (Strong)
              goto LABEL_38;
          }
        }
        else
        {
          sub_100139528((uint64_t)v29);
        }
        Strong = objc_msgSend(v20, "parentViewController");
LABEL_38:

        if (v13 >> 60 != 15)
          goto LABEL_6;
        if (!Strong)
          return v5;
      }
      sub_100139528((uint64_t)v29);

LABEL_26:
      v5 = 0;
      v13 = 0xF000000000000000;
      goto LABEL_27;
    }
    v5 = UIViewController.playActivityForwardedRecommendationData.getter();
    v7 = v8;
  }
  Strong = UIViewController.playActivityRecommendationDataSourceViewController.getter();
  if (v7 >> 60 == 15)
    goto LABEL_8;
LABEL_6:

  return v5;
}

uint64_t UIViewController.playActivityFeatureName.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (qword_10054BBD0 != -1)
    swift_once(&qword_10054BBD0, sub_1001912EC);
  v1 = objc_getAssociatedObject(v0, (const void *)qword_100550FB0);
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10014F4D0((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v4;
  }
  else
  {
    sub_100139528((uint64_t)v6);
  }
  return 0;
}

void UIViewController.playActivityFeatureName.setter()
{
  void *v0;
  const void *v1;
  id value;

  if (qword_10054BBD0 != -1)
    swift_once(&qword_10054BBD0, sub_1001912EC);
  v1 = (const void *)qword_100550FB0;
  value = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v0, v1, value, (void *)3);

}

uint64_t UIViewController.playActivityFeatureIdentifier.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "playActivityFeatureName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  return _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(v2, v4);
}

void UIViewController.playActivityFeatureIdentifier.setter(unsigned __int8 a1)
{
  void *v1;
  id v2;

  if (a1 != 18)
    PlayActivityFeatureIdentifier.rawValue.getter(a1);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, "setPlayActivityFeatureName:", v2);

}

void (*UIViewController.playActivityFeatureIdentifier.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, "playActivityFeatureName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_BYTE *)(a1 + 8) = _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(v4, v6);
  return sub_100192258;
}

void sub_100192258(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 18)
    PlayActivityFeatureIdentifier.rawValue.getter(v2);
  v3 = *(void **)a1;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, "setPlayActivityFeatureName:", v4);

}

uint64_t UIViewController.playActivityFeatureNames(sourceChildViewController:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100424BB0;
  v3 = objc_msgSend(v0, "playActivityFeatureName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = v6;
  return v2;
}

uint64_t UIViewController.completePlayActivityFeatureNames.getter()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = 0;
  do
  {
    v3 = v1;
    v4 = objc_msgSend(v1, "playActivityFeatureNamesWithSourceChildViewController:", v2);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

    sub_10012B41C(v5);
    v1 = objc_msgSend(v3, "playActivityFeatureNameSourceViewController");
    v2 = v3;
  }
  while (v1);
  v6 = _swiftEmptyArrayStorage[2];
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = &_swiftEmptyArrayStorage[5];
    do
    {
      v12 = *(v7 - 1);
      v11 = *v7;
      v13 = HIBYTE(*v7) & 0xF;
      if ((*v7 & 0x2000000000000000) == 0)
        v13 = v12 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_100117EE4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v9 = _swiftEmptyArrayStorage[2];
        v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1)
          sub_100117EE4((char *)(v8 > 1), v9 + 1, 1);
        _swiftEmptyArrayStorage[2] = v9 + 1;
        v10 = &_swiftEmptyArrayStorage[2 * v9];
        v10[4] = v12;
        v10[5] = v11;
      }
      v7 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v14 = sub_1001925FC((uint64_t)_swiftEmptyArrayStorage);

  return v14;
}

uint64_t sub_1001925FC(uint64_t result)
{
  char *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;

  v1 = (char *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = 0;
  v5 = v2 >> 1;
  v6 = v2 - 1;
  v7 = 16 * v2 + 16;
  v15 = v2 >> 1;
  while (1)
  {
    if (v4 == v6)
      goto LABEL_4;
    v8 = *((_QWORD *)v1 + 2);
    if (v4 >= v8)
      break;
    if (v6 >= v8)
      goto LABEL_13;
    v10 = *(_QWORD *)&v1[v3 + 32];
    v9 = *(_QWORD *)&v1[v3 + 40];
    v12 = *(_QWORD *)&v1[v7];
    v11 = *(_QWORD *)&v1[v7 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
      v1 = sub_1002577C8((uint64_t)v1);
    v13 = &v1[v3];
    result = swift_bridgeObjectRelease();
    *((_QWORD *)v13 + 4) = v12;
    *((_QWORD *)v13 + 5) = v11;
    if (v6 >= *((_QWORD *)v1 + 2))
      goto LABEL_14;
    v14 = &v1[v7];
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v14 = v10;
    *((_QWORD *)v14 + 1) = v9;
    v5 = v15;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 16;
    v3 += 16;
    if (v5 == v4)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t UIViewController.combinedPlayActivityFeatureName.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "completePlayActivityFeatureNames");
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  v2 = sub_10000B4C8(&qword_10054D598);
  v3 = sub_100012324((unint64_t *)&qword_100550CB0, &qword_10054D598, (const char *)&protocol conformance descriptor for [A]);
  v4 = BidirectionalCollection<>.joined(separator:)(2109216, 0xE300000000000000, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t UIViewController.playActivityInformation.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "combinedPlayActivityFeatureName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  UIViewController.inheritedPlayActivityRecommendationData(shouldIncludeForwardedRecommendationData:)(1);
  return v2;
}

uint64_t UINavigationController.playActivityFeatureNames(sourceChildViewController:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;

  v5 = objc_msgSend((id)v1, "viewControllers");
  v6 = sub_1000DD108(0, &qword_100550FE8, UIViewController_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!a1)
    goto LABEL_25;
  v8 = a1;
  v9 = sub_100192D54((uint64_t)v8, v7);
  if ((v10 & 1) == 0)
  {
    v11 = v9;
    if (v9 < 0)
      goto LABEL_56;
    v3 = (unint64_t)v7 >> 62;
    if ((unint64_t)v7 >> 62)
    {
LABEL_57:
      if (v7 < 0)
        v39 = v7;
      else
        v39 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter(v39);
      result = swift_bridgeObjectRelease();
      if (v2 < 0)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter(v39);
      v9 = swift_bridgeObjectRelease();
      if (v12 >= (uint64_t)v11)
      {
LABEL_6:
        if ((v7 & 0xC000000000000001) != 0 && v11)
        {
          v13 = 0;
          do
          {
            v14 = v13 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v13);
            v13 = v14;
          }
          while (v11 != v14);
        }
        if (v3)
        {
          if (v7 < 0)
            v15 = v7;
          else
            v15 = v7 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v6 = _CocoaArrayWrapper.subscript.getter(0, v11, v15);
          v2 = v16;
          v12 = v17;
          v11 = v18;
          swift_bridgeObjectRelease_n(v7, 2);
          if ((v11 & 1) == 0)
            goto LABEL_18;
        }
        else
        {
          v12 = 0;
          v6 = v7 & 0xFFFFFFFFFFFFFF8;
          v2 = (v7 & 0xFFFFFFFFFFFFFF8) + 32;
          v11 = (2 * v11) | 1;
          if ((v11 & 1) == 0)
          {
LABEL_18:
            sub_100193250(v6, v2, v12, v11);
            v7 = v19;

            swift_unknownObjectRelease(v6);
            goto LABEL_25;
          }
        }
        v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v22 = swift_unknownObjectRetain_n(v6, 2, v21);
        v23 = (_QWORD *)swift_dynamicCastClass(v22, v20);
        if (!v23)
        {
          swift_unknownObjectRelease(v6);
          v23 = _swiftEmptyArrayStorage;
        }
        v3 = v23[2];
        swift_release(v23);
        if (!__OFSUB__(v11 >> 1, v12))
        {
          v9 = v6;
          if (v3 == (v11 >> 1) - v12)
          {
            v7 = swift_dynamicCastClass(v6, v20);

            swift_unknownObjectRelease(v6);
            if (!v7)
            {
              swift_unknownObjectRelease(v6);
              v7 = (uint64_t)_swiftEmptyArrayStorage;
            }
            goto LABEL_25;
          }
          goto LABEL_64;
        }
LABEL_63:
        __break(1u);
LABEL_64:
        swift_unknownObjectRelease(v9);
        goto LABEL_18;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12 >= v9)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_63;
  }

LABEL_25:
  v24 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v8 = (char *)swift_allocObject(v24, 48, 7);
  *((_OWORD *)v8 + 1) = xmmword_100424BB0;
  v25 = objc_msgSend((id)v1, "playActivityFeatureName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v11 = v26;

  *((_QWORD *)v8 + 4) = v6;
  *((_QWORD *)v8 + 5) = v11;
  if ((unint64_t)v7 >> 62)
    goto LABEL_50;
  v1 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v1)
  {
    if (v1 < 1)
    {
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v6 = 0;
    v11 = (unint64_t)&type metadata for String;
    while (1)
    {
      v27 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7)
          : *(id *)(v7 + 8 * v6 + 32);
      v28 = v27;
      v29 = objc_msgSend(v27, "playActivityFeatureNamesWithSourceChildViewController:", 0);
      v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for String);

      v3 = *(_QWORD *)(v30 + 16);
      v31 = *((_QWORD *)v8 + 2);
      v32 = v31 + v3;
      if (__OFADD__(v31, v3))
        break;
      if (v32 > *((_QWORD *)v8 + 3) >> 1)
      {
        if (v31 <= v32)
          v36 = v31 + v3;
        else
          v36 = *((_QWORD *)v8 + 2);
        v8 = sub_1000DEAD8((char *)1, v36, 1, v8);
        v31 = *((_QWORD *)v8 + 2);
        if (*(_QWORD *)(v30 + 16))
        {
LABEL_37:
          if ((*((_QWORD *)v8 + 3) >> 1) - v31 < v3)
            goto LABEL_48;
          swift_arrayInitWithCopy(&v8[16 * v31 + 32]);
          if (v3)
          {
            v33 = *((_QWORD *)v8 + 2);
            v34 = __OFADD__(v33, v3);
            v35 = v33 + v3;
            if (v34)
              goto LABEL_49;
            *((_QWORD *)v8 + 2) = v35;
          }
          goto LABEL_30;
        }
      }
      else if (v3)
      {
        goto LABEL_37;
      }
      if (v3)
        goto LABEL_47;
LABEL_30:
      ++v6;
      swift_bridgeObjectRelease();

      if (v1 == v6)
        goto LABEL_54;
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    if (v7 < 0)
      v37 = v7;
    else
      v37 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
  }
LABEL_54:
  swift_bridgeObjectRelease();
  return (uint64_t)v8;
}

uint64_t sub_100192D54(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v5 = *(id *)(a2 + 32);
    }
    v6 = v5;
    sub_1000DD108(0, &qword_100550FE8, UIViewController_ptr);
    v7 = static NSObject.== infix(_:_:)(v6, v3);

    if ((v7 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      v8 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v8 == v4)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = static NSObject.== infix(_:_:)(v10, v3);

      if ((v12 & 1) != 0)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_100192EEC(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    __asm { BR              X9 }
  return 0;
}

void sub_100193250(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        sub_1000DD108(0, &qword_100550FE8, UIViewController_ptr);
        swift_arrayInitWithCopy(v8 + 4);
        return;
      }
    }
    else
    {
      v7 = sub_10000B4C8((uint64_t *)&unk_100550D50);
      v8 = (_QWORD *)swift_allocObject(v7, 8 * v5 + 32, 7);
      v9 = j__malloc_size(v8);
      v10 = v9 - 32;
      if (v9 < 32)
        v10 = v9 - 25;
      v8[2] = v5;
      v8[3] = (2 * (v10 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

_QWORD *sub_10019333C(const void *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (!a2)
    return _swiftEmptyArrayStorage;
  if (a2 <= 0)
  {
    v5 = 8 * a2;
    v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    v4 = sub_10000B4C8(&qword_100551048);
    v5 = 8 * a2;
    v6 = (_QWORD *)swift_allocObject(v4, 8 * a2 + 32, 7);
    v7 = j__malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v6[2] = a2;
    v6[3] = 2 * (v8 >> 3);
  }
  memcpy(v6 + 4, a1, v5);
  return v6;
}

_QWORD *sub_1001933DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000B4C8(&qword_100551038);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1001937C8((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain();
  sub_100194204(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001934C0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10000B4C8((uint64_t *)&unk_100550D50);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_100194058((uint64_t)(v4 + 4), v2, v1);
    v1 = v7;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v8 = v1;
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001935B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000B4C8(&qword_100551040);
  v4 = (_QWORD *)swift_allocObject(v3, 40 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  v6 = sub_1001939C4((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_100194204(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1001936A4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (!v6)
      {
LABEL_20:
        v8 = 0;
        goto LABEL_17;
      }
      v8 = v6 - 1;
      v9 = a4 + 16 * (v6 - 1);
      v10 = *(_QWORD *)(v9 + 40);
      *a2 = *(_QWORD *)(v9 + 32);
      a2[1] = v10;
      if (a3 == 1)
      {
LABEL_15:
        v6 = a3;
      }
      else if (v6 != 1)
      {
        v11 = 0;
        v12 = a3 - 2;
        v13 = (uint64_t *)(a4 + 16 * v6 + 8);
        v14 = a2 + 3;
        while (v6 + v11 - 1 <= *(_QWORD *)(a4 + 16))
        {
          v15 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v15;
          if (!(v12 + v11))
          {
            swift_bridgeObjectRetain();
            v8 = v6 + v11 - 2;
            goto LABEL_15;
          }
          swift_bridgeObjectRetain();
          --v11;
          v13 -= 2;
          v14 += 2;
          if (v6 + v11 == 1)
          {
            v8 = 0;
            goto LABEL_16;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      swift_bridgeObjectRetain();
    }
    else
    {
      v8 = *(_QWORD *)(a4 + 16);
      v6 = 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 16);
    v6 = 0;
  }
LABEL_17:
  *a1 = a4;
  a1[1] = v8;
  return v6;
}

uint64_t sub_1001937C8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001939C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
LABEL_36:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    result = sub_10013BDE4(*(_QWORD *)(a4 + 48) + 40 * v16, (uint64_t)v23);
    v17 = v24;
    v18 = v23[1];
    *(_OWORD *)v11 = v23[0];
    *(_OWORD *)(v11 + 16) = v18;
    *(_QWORD *)(v11 + 32) = v17;
    v11 += 40;
    if (v13 == a3)
    {
      v13 = a3;
LABEL_35:
      v7 = v22;
      goto LABEL_36;
    }
  }
  v19 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v19 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * v19);
  if (v20)
    goto LABEL_23;
  v21 = v12 + 2;
  ++v12;
  if (v19 + 1 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v12 = v19 + 1;
  if (v19 + 2 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * (v19 + 2));
  if (v20)
  {
    v19 += 2;
    goto LABEL_23;
  }
  v12 = v19 + 2;
  if (v19 + 3 >= v14)
    goto LABEL_34;
  v20 = *(_QWORD *)(v6 + 8 * (v19 + 3));
  if (v20)
  {
    v19 += 3;
    goto LABEL_23;
  }
  v21 = v19 + 4;
  v12 = v19 + 3;
  if (v19 + 4 >= v14)
  {
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
LABEL_16:
    v19 = v21;
LABEL_23:
    v9 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v19 << 6);
    v12 = v19;
    goto LABEL_9;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v14)
    {
      v12 = v14 - 1;
      goto LABEL_34;
    }
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

void (*sub_100193BCC(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100129AE8(v6, a2, a3);
  return sub_100193C20;
}

void (*sub_100193C24(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100129B5C(v6, a2, a3);
  return sub_100193C20;
}

void (*sub_100193C78(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100129BC8(v6, a2, a3);
  return sub_100193C20;
}

void sub_100193CCC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_100193CF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  void (*v11)(_QWORD *);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[4];

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v8 = a3;
      else
        v8 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100012324((unint64_t *)&unk_100551070, &qword_100551068, (const char *)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_10000B4C8(&qword_100551068);
            v11 = sub_100193BCC(v15, i, a3);
            v13 = *v12;
            swift_retain(*v12);
            ((void (*)(uint64_t **, _QWORD))v11)(v15, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for BagProvider.Observer();
        swift_arrayInitWithCopy(v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100193EA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  void (*v11)(_QWORD *);
  id *v12;
  id v13;
  uint64_t v14;
  void (*v15[4])(id *);

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v8 = a3;
      else
        v8 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100012324(&qword_100551060, &qword_100551058, (const char *)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_10000B4C8(&qword_100551058);
            v11 = sub_100193C24(v15, i, a3);
            v13 = *v12;
            ((void (*)(void (**)(id *), _QWORD))v11)(v15, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000DD108(0, (unint64_t *)&qword_100551050, NSError_ptr);
        swift_arrayInitWithCopy(v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100194058(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  void (*v11)(_QWORD *);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[4];

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v8 = a3;
      else
        v8 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      result = swift_bridgeObjectRelease();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100012324(&qword_100551030, &qword_100551028, (const char *)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            sub_10000B4C8(&qword_100551028);
            v11 = sub_100193C78(v15, i, a3);
            v13 = *v12;
            swift_unknownObjectRetain(*v12);
            ((void (*)(uint64_t **, _QWORD))v11)(v15, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_10000B4C8(&qword_100551020);
        swift_arrayInitWithCopy(v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100194204(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t *NSUserDefaults.mobileiPod.unsafeMutableAddressor()
{
  if (qword_10054BBF0 != -1)
    swift_once(&qword_10054BBF0, sub_100194334);
  return &static NSUserDefaults.mobileiPod;
}

uint64_t NSUserDefaults.hasUserRequestedSubscriptionHidden.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t result;
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;

  v0 = sub_10015CBB4();
  v1 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v0, v1, &v4);
  if (v5)
  {
    result = swift_dynamicCast(&v3, &v4, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v3;
  }
  else
  {
    sub_100139528((uint64_t)&v4);
    return 0;
  }
  return result;
}

uint64_t NSUserDefaults.hasUserRequestedSubscriptionHidden.setter(char a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  void *v6;

  v6 = &type metadata for Bool;
  v5[0] = a1;
  v1 = sub_10015CBB4();
  v2 = sub_1000AE4D8();
  return NSUserDefaults.subscript.setter((uint64_t)v5, v3, (uint64_t)&type metadata for NSUserDefaults.MobileiPod, v1, v2);
}

void *NSUserDefaults.MobileiPod.suiteName.unsafeMutableAddressor()
{
  return &static NSUserDefaults.MobileiPod.suiteName;
}

void sub_100194334()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  static NSUserDefaults.mobileiPod = (uint64_t)v2;
}

uint64_t static NSUserDefaults.mobileiPod.getter()
{
  uint64_t v0;
  id v1;

  if (qword_10054BBF0 != -1)
    swift_once(&qword_10054BBF0, sub_100194334);
  v0 = static NSUserDefaults.mobileiPod;
  v1 = (id)static NSUserDefaults.mobileiPod;
  return v0;
}

unint64_t static NSUserDefaults.MobileiPod.suiteName.getter()
{
  return 0xD000000000000014;
}

BOOL NSUserDefaults.MobileiPod.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD5E0, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

unint64_t NSUserDefaults.MobileiPod.rawValue.getter()
{
  return 0xD00000000000001FLL;
}

Swift::Int sub_10019446C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000001FLL, 0x80000001004460C0);
  return Hasher._finalize()();
}

uint64_t sub_1001944C0(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000001FLL, 0x80000001004460C0);
}

Swift::Int sub_1001944DC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000001FLL, 0x80000001004460C0);
  return Hasher._finalize()();
}

uint64_t sub_10019452C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD618, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10019457C(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000001004460C0;
}

void (*NSUserDefaults.hasUserRequestedSubscriptionHidden.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  char v6;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = sub_10015CBB4();
  v3[5] = v4;
  v5 = sub_1000AE4D8();
  v3[6] = v5;
  NSUserDefaults.subscript.getter((uint64_t)&type metadata for NSUserDefaults.MobileiPod, v4, v5, v3);
  if (!v3[3])
  {
    sub_100139528((uint64_t)v3);
    goto LABEL_5;
  }
  if ((swift_dynamicCast((char *)v3 + 57, v3, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v6 = *((_BYTE *)v3 + 57);
LABEL_6:
  *((_BYTE *)v3 + 56) = v6;
  return sub_10019465C;
}

void sub_10019465C(uint64_t a1, uint64_t a2)
{
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  void *v7;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v7 = &type metadata for Bool;
  v6[0] = v3;
  NSUserDefaults.subscript.setter((uint64_t)v6, a2, (uint64_t)&type metadata for NSUserDefaults.MobileiPod, v4, v5);
  free(v2);
}

unint64_t sub_1001946B4()
{
  unint64_t result;

  result = qword_100551080;
  if (!qword_100551080)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NSUserDefaults.MobileiPod, &type metadata for NSUserDefaults.MobileiPod);
    atomic_store(result, (unint64_t *)&qword_100551080);
  }
  return result;
}

uint64_t _s10MobileiPodOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100194738 + 4 * byte_10042F498[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100194758 + 4 * byte_10042F49D[v4]))();
}

_BYTE *sub_100194738(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100194758(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100194760(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100194768(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100194770(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100194778(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NSUserDefaults.MobileiPod()
{
  return &type metadata for NSUserDefaults.MobileiPod;
}

id static ICUserIdentity.active.getter()
{
  uint64_t v0;

  return objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "activeAccount");
}

id static ICUserIdentityStore.activeAccountDSID.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v9;

  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "defaultIdentityStore");
  v2 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v9 = 0;
  v3 = objc_msgSend(v1, "DSIDForUserIdentity:outError:", v2, &v9);

  v4 = v9;
  if (!v3)
  {
    v5 = v4;
    v6 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v7);
    swift_errorRelease(v6);
    return 0;
  }
  return v3;
}

uint64_t static ICMusicKitRequestContext.music.getter()
{
  id v0;
  void *v1;
  id v2;
  __n128 v3;
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5[4] = sub_100195AA4;
  v6 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1001880C4;
  v5[3] = &unk_100509978;
  v1 = _Block_copy(v5);
  v2 = objc_msgSend(v0, "initWithBlock:", v1);
  _Block_release(v1);
  v3 = swift_release(v6);
  result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v3);
  if ((result & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

id static ICURLSessionManager.musicSession.getter()
{
  return objc_msgSend((id)objc_opt_self(ICURLSessionManager), "highPrioritySession");
}

double ICURLBag.subscript.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  double result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v2, "valueForBagKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t *ICClientInfo.music.unsafeMutableAddressor()
{
  if (qword_10054BBF8 != -1)
    swift_once(&qword_10054BBF8, sub_100195410);
  return &static ICClientInfo.music;
}

void sub_100194A78(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  objc_opt_self(ICMusicKitRequestContext);
  v2 = swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = a1;
    v5 = String._bridgeToObjectiveC()();
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend((id)objc_opt_self(ICClientInfo), "clientInfoForMusicKitRequestWithClientIdentifier:clientVersion:", v5, v6);

    objc_msgSend(v3, "setClientInfo:", v7);
    v8 = (void *)objc_opt_self(ICUserIdentityStore);
    v9 = v4;
    v10 = objc_msgSend(v8, "defaultIdentityStore");
    objc_msgSend(v3, "setIdentityStore:", v10);

    v11 = (void *)objc_opt_self(ICUserIdentity);
    v12 = v9;
    v13 = objc_msgSend(v11, "activeAccount");
    objc_msgSend(v3, "setIdentity:", v13);

  }
}

void ICMusicSubscriptionStatusController.performDefaultActiveSubscriptionStatusRequest(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  id v7;
  __n128 v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v5 = objc_allocWithZone((Class)ICStoreRequestContext);
  v17 = sub_100195AA8;
  v18 = 0;
  v13 = _NSConcreteStackBlock;
  v14 = 1107296256;
  v15 = sub_1001880C4;
  v16 = &unk_1005099A0;
  v6 = _Block_copy(&v13);
  v7 = objc_msgSend(v5, "initWithBlock:", v6);
  _Block_release(v6);
  v8 = swift_release(v18);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v8) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)ICMusicSubscriptionStatusRequest), "initWithStoreRequestContext:", v7);
    objc_msgSend(v9, "setShouldReturnLastKnownStatusOnly:", 1);
    v10 = swift_allocObject(&unk_1005099D8, 32, 7);
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = a2;
    v17 = sub_1000D75E8;
    v18 = v10;
    v13 = _NSConcreteStackBlock;
    v14 = 1107296256;
    v15 = sub_100013B60;
    v16 = &unk_1005099F0;
    v11 = _Block_copy(&v13);
    v12 = v18;
    swift_retain(a2);
    objc_msgSend(v2, "performSubscriptionStatusRequest:withCompletionHandler:", v9, v11, swift_release(v12).n128_f64[0]);
    _Block_release(v11);

  }
}

void sub_100194DB8(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  objc_opt_self(ICStoreRequestContext);
  v2 = swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_opt_self(ICUserIdentityStore);
    v5 = a1;
    v6 = objc_msgSend(v4, "defaultIdentityStore");
    objc_msgSend(v3, "setIdentityStore:", v6);

    v7 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    objc_msgSend(v3, "setIdentity:", v7);

    objc_msgSend(v3, "setAllowsExpiredBags:", 1);
    v8 = objc_allocWithZone((Class)ICURLResponseAuthenticationProvider);
    v9 = v5;
    v10 = objc_msgSend(v8, "initWithUserInteractionLevel:", 1);
    objc_msgSend(v3, "setAuthenticationProvider:", v10);

  }
}

BOOL ICMusicSubscriptionStatusCapabilities.hasVoiceActivatedCatalogPlaybackOnly.getter(char a1)
{
  return (a1 & 3) == 2;
}

void static ICStoreRequestContext.default(withConfigurationBlock:)(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  __n128 v5;
  _QWORD v6[4];
  _QWORD aBlock[5];
  uint64_t v8;

  v6[2] = a1;
  v6[3] = a2;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = swift_allocObject(&unk_100509A28, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100195AE8;
  *(_QWORD *)(v3 + 24) = v6;
  aBlock[4] = sub_1000D75E8;
  v8 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001880C4;
  aBlock[3] = &unk_100509A40;
  v4 = _Block_copy(aBlock);
  swift_retain(v3);
  objc_msgSend(v2, "initWithBlock:", v4);
  _Block_release(v4);
  v5 = swift_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v3, "", 0, 0, 0, 1, v5);
  swift_release(v3);
  if ((v4 & 1) != 0)
    __break(1u);
}

void sub_100195024(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  objc_opt_self(ICStoreRequestContext);
  v2 = swift_dynamicCastObjCClass(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (void *)objc_opt_self(ICUserIdentityStore);
    v8 = a1;
    v5 = objc_msgSend(v4, "defaultIdentityStore");
    objc_msgSend(v3, "setIdentityStore:", v5);

    v6 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    objc_msgSend(v3, "setIdentity:", v6);

    objc_msgSend(v3, "setAllowsExpiredBags:", 1);
    v7 = objc_msgSend(objc_allocWithZone((Class)ICURLResponseAuthenticationProvider), "initWithUserInteractionLevel:", 1);
    objc_msgSend(v3, "setAuthenticationProvider:", v7);

    if (qword_10054BC00 != -1)
      swift_once(&qword_10054BC00, sub_100195460);
    objc_msgSend(v3, "setClientInfo:", static ICClientInfo.storeFlow);

  }
}

void sub_10019519C(void *a1, void (*a2)(void *))
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  objc_opt_self(ICStoreRequestContext);
  v4 = swift_dynamicCastObjCClass(a1);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (void *)objc_opt_self(ICUserIdentityStore);
    v9 = a1;
    v7 = objc_msgSend(v6, "defaultIdentityStore");
    objc_msgSend(v5, "setIdentityStore:", v7);

    v8 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
    objc_msgSend(v5, "setIdentity:", v8);

    a2(v5);
  }
}

id static ICStoreRequestContext.current.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v1 = objc_msgSend(objc_allocWithZone((Class)ICStoreRequestContext), "initWithIdentity:", v0);

  return v1;
}

uint64_t static ICStoreRequestContext.storeFlow.getter()
{
  id v0;
  void *v1;
  id v2;
  __n128 v3;
  uint64_t result;
  _QWORD v5[5];
  uint64_t v6;

  v0 = objc_allocWithZone((Class)ICStoreRequestContext);
  v5[4] = sub_100195AA0;
  v6 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1001880C4;
  v5[3] = &unk_100509A68;
  v1 = _Block_copy(v5);
  v2 = objc_msgSend(v0, "initWithBlock:", v1);
  _Block_release(v1);
  v3 = swift_release(v6);
  result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1, v3);
  if ((result & 1) == 0)
    return (uint64_t)v2;
  __break(1u);
  return result;
}

uint64_t *ICClientInfo.storeFlow.unsafeMutableAddressor()
{
  if (qword_10054BC00 != -1)
    swift_once(&qword_10054BC00, sub_100195460);
  return &static ICClientInfo.storeFlow;
}

id sub_100195410()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)ICClientInfo), "initWithSystemApplicationType:", 0);
  static ICClientInfo.music = (uint64_t)result;
  return result;
}

id static ICClientInfo.music.getter()
{
  return sub_100159824(&qword_10054BBF8, (id *)&static ICClientInfo.music);
}

void *sub_100195460()
{
  void *result;

  result = sub_10019547C();
  static ICClientInfo.storeFlow = (uint64_t)result;
  return result;
}

void *sub_10019547C()
{
  id v0;
  id v1;
  unint64_t v2;
  void *v3;
  NSString v4;
  void *v6;
  _BYTE v7[32];

  v0 = objc_msgSend(objc_allocWithZone((Class)ICClientInfo), "initWithSystemApplicationType:", 0);
  v1 = objc_msgSend(v0, "mutableCopy");

  _bridgeAnyObjectToAny(_:)(v1);
  swift_unknownObjectRelease(v1);
  v2 = sub_100195F68();
  swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, v2, 7);
  v3 = v6;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBagProfileVersion:", v4);

  return v3;
}

id static ICClientInfo.storeFlow.getter()
{
  return sub_100159824(&qword_10054BC00, (id *)&static ICClientInfo.storeFlow);
}

double ICURLBag.subscript.getter@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  NSString v3;
  id v4;
  double result;

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "valueForBagKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t ICURLBag.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  _OWORD v65[2];
  uint64_t v66;

  v5 = v4;
  v6 = v3;
  v10 = type metadata accessor for Optional(0, a2);
  __chkstk_darwin(v10);
  v13 = (char *)&v52 - v12;
  if (!*(_QWORD *)(a1 + 16))
  {
    v31 = sub_100195B00();
    v32 = swift_allocError(&type metadata for ICURLBag.Error, v31, 0, 0);
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_QWORD *)(v33 + 32) = 0;
    *(_BYTE *)(v33 + 40) = 2;
    return swift_willThrow(v32);
  }
  v60 = v11;
  v66 = a1;
  v14 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  v15 = v14;
  sub_1000E0E24(0, 1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v6, "valueForBagKey:", v16);

  if (!v17)
  {
    swift_bridgeObjectRelease();
    v34 = sub_100195B00();
    v32 = swift_allocError(&type metadata for ICURLBag.Error, v34, 0, 0);
    *(_QWORD *)v35 = v15;
    *(_BYTE *)(v35 + 40) = 0;
    return swift_willThrow(v32);
  }
  v54 = v10;
  v55 = a3;
  v57 = v13;
  v58 = a2;
  v56 = v5;
  _bridgeAnyObjectToAny(_:)(v17);
  swift_unknownObjectRelease(v17);
  sub_10013BB38(v64, v65);
  sub_1000760E0((uint64_t)v65, (uint64_t)v64);
  v18 = v66;
  v19 = *(_QWORD *)(v66 + 16);
  v59 = v15;
  if (v19)
  {
    v20 = v15;
    v21 = 0;
    v53 = v20;
    v22 = v20;
    while (1)
    {
      v23 = *(void **)(v18 + 8 * v21 + 32);
      sub_1000760E0((uint64_t)v64, (uint64_t)&v62);
      v24 = v23;
      v25 = sub_10000B4C8((uint64_t *)&unk_1005527C0);
      if (!swift_dynamicCast(&v61, &v62, (char *)&type metadata for Any + 8, v25, 6))
      {
        swift_bridgeObjectRelease();
        v46 = sub_100195B00();
        swift_allocError(&type metadata for ICURLBag.Error, v46, 0, 0);
        v48 = v47;
        *v47 = v24;
        sub_1000760E0((uint64_t)v64, (uint64_t)(v47 + 1));
        *((_BYTE *)v48 + 40) = 1;
        goto LABEL_22;
      }
      v26 = v61;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      if (*(_QWORD *)(v26 + 16) && (v29 = sub_10013B57C(v27, v28), (v30 & 1) != 0))
      {
        sub_1000760E0(*(_QWORD *)(v26 + 56) + 32 * v29, (uint64_t)&v62);
      }
      else
      {
        v62 = 0u;
        v63 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v63 + 1))
        break;
      ++v21;
      sub_100011758(v64);

      sub_10013BB38(&v62, v64);
      v22 = v24;
      if (v19 == v21)
        goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    sub_100139528((uint64_t)&v62);
    v49 = sub_100195B00();
    swift_allocError(&type metadata for ICURLBag.Error, v49, 0, 0);
    *(_QWORD *)v50 = v24;
    *(_BYTE *)(v50 + 40) = 0;
LABEL_22:
    v51 = v24;
    swift_willThrow(v51);

  }
  else
  {
    v24 = v15;
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1000760E0((uint64_t)v64, (uint64_t)&v62);
    v38 = v57;
    v37 = v58;
    v39 = swift_dynamicCast(v57, &v62, (char *)&type metadata for Any + 8, v58, 6);
    v40 = *(_QWORD *)(v37 - 8);
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
    if ((v39 & 1) != 0)
    {
      v41(v38, 0, 1, v37);

      sub_100011758(v64);
      sub_100011758(v65);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v55, v38, v37);
    }
    v41(v38, 1, 1, v37);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v38, v54);
    v42 = sub_100195B00();
    swift_allocError(&type metadata for ICURLBag.Error, v42, 0, 0);
    v44 = v43;
    *v43 = v24;
    v45 = sub_1000760E0((uint64_t)v64, (uint64_t)(v43 + 1));
    *((_BYTE *)v44 + 40) = 1;
    swift_willThrow(v45);

  }
  sub_100011758(v64);
  return sub_100011758(v65);
}

BOOL static ICEnvironmentMonitorThermalPressureLevel.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_100195A50(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_100195A64(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100195A78(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100195A8C(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_100195AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100195ABC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100195AC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100195AE8(void *a1)
{
  uint64_t v1;

  sub_10019519C(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_100195AF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100195B00()
{
  unint64_t result;

  result = qword_100551088;
  if (!qword_100551088)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ICURLBag.Error, &type metadata for ICURLBag.Error);
    atomic_store(result, (unint64_t *)&qword_100551088);
  }
  return result;
}

unint64_t sub_100195B48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100551090;
  if (!qword_100551090)
  {
    type metadata accessor for ICEnvironmentMonitorThermalPressureLevel(255);
    result = swift_getWitnessTable(byte_10042933C, v1);
    atomic_store(result, (unint64_t *)&qword_100551090);
  }
  return result;
}

void _s5ErrorOwxx(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
  {

    sub_100011758((_QWORD *)(a1 + 8));
  }
  else if (!v2)
  {

  }
}

uint64_t _s5ErrorOwcp(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  __int128 v11;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v6 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = a2 + 8;
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v8;
    v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
    v10 = v6;
    v9(a1 + 8, v7, v8);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 0;
    v5 = v4;
  }
  return a1;
}

uint64_t _s5ErrorOwca(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  __int128 v13;
  __int128 v14;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {

      sub_100011758((_QWORD *)(a1 + 8));
    }
    else if (!v4)
    {

    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v8 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (uint64_t)a2 + 8;
      v10 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v10;
      v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      v12 = v8;
      v11(a1 + 8, v9, v10);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v13 = *a2;
      v14 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v13;
      *(_OWORD *)(a1 + 16) = v14;
    }
    else
    {
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      v7 = v6;
    }
  }
  return a1;
}

__n128 _s5ErrorOwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s5ErrorOwta(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {

      sub_100011758((_QWORD *)(a1 + 8));
    }
    else if (!v4)
    {

    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t _s5ErrorOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t _s5ErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_100195F14(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_100195F30(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ICURLBag.Error()
{
  return &type metadata for ICURLBag.Error;
}

unint64_t sub_100195F68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100551098;
  if (!qword_100551098)
  {
    v1 = objc_opt_self(ICMutableClientInfo);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100551098);
  }
  return result;
}

unint64_t EnvironmentVariable.rawValue.getter()
{
  return 0xD000000000000013;
}

uint64_t EnvironmentVariable.isEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = _s9MusicCore19EnvironmentVariableO5valueSSSgvg_0();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    if (v0 == 49 && v1 == 0xE100000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v0, v1, 49, 0xE100000000000000, 0) & 1) != 0
      || v2 == 1702195828 && v3 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 1702195828, 0xE400000000000000, 0) & 1) != 0
      || v2 == 5457241 && v3 == 0xE300000000000000)
    {
      v4 = 1;
    }
    else
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 5457241, 0xE300000000000000, 0);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

BOOL EnvironmentVariable.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD650, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

Swift::Int sub_100196114()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000013, 0x80000001004463E0);
  return Hasher._finalize()();
}

uint64_t sub_100196168(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000013, 0x80000001004463E0);
}

Swift::Int sub_100196184()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000013, 0x80000001004463E0);
  return Hasher._finalize()();
}

uint64_t sub_1001961D4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD688, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100196224(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000013;
  a1[1] = 0x80000001004463E0;
}

uint64_t _s9MusicCore19EnvironmentVariableO5valueSSSgvg_0()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10013B57C(0xD000000000000013, 0x80000001004463E0), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_100196324()
{
  unint64_t result;

  result = qword_1005510A0;
  if (!qword_1005510A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EnvironmentVariable, &type metadata for EnvironmentVariable);
    atomic_store(result, (unint64_t *)&qword_1005510A0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EnvironmentVariable(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001963A8 + 4 * asc_10042F610[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001963C8 + 4 * byte_10042F615[v4]))();
}

_BYTE *sub_1001963A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001963C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001963D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001963D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001963E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001963E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentVariable()
{
  return &type metadata for EnvironmentVariable;
}

uint64_t StagedInstall.isInstalled.getter(char a1)
{
  return a1 & 1;
}

uint64_t sub_10019640C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_1005510A8);
  sub_10000D78C(v0, (uint64_t)qword_1005510A8);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x6E49646567617453, 0xED00006C6C617473);
}

uint64_t static StagedInstall.current()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  NSString v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v24;
  uint64_t v25;

  v0 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v0);
  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - v5;
  if (qword_10054C348 != -1)
    swift_once(&qword_10054C348, sub_10028E458);
  if (static DeviceCapabilities.isInternalInstall == 1)
  {
    if (qword_10054BC08 != -1)
      swift_once(&qword_10054BC08, sub_10019640C);
    v25 = v1;
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000D78C(v7, (uint64_t)qword_1005510A8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking for a staged install of Music", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    URL.init(fileURLWithPath:)(0xD00000000000002FLL, 0x800000010044B3C0);
    v12 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL.path.getter(v12);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v12, "fileExistsAtPath:", v13);

    v16 = Logger.logObject.getter(v15);
    v17 = v16;
    if (v14)
    {
      v18 = static os_log_type_t.error.getter(v16);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Found Music.app in staged_system_apps", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      Data.init(contentsOf:options:)(v6, 0);
      __asm { BR              X10 }
    }
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v20, "✅ No staged copy found", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v25);
  }
  return 2;
}

void sub_100196BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100196C3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100196E20);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_100196E44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100196EA0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_100196BDC((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_10003A628(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100197068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_100196BDC(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10019711C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100197160()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_100197194 + dword_100197254[v0 >> 62]))();
}

uint64_t sub_1001971A4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_10003A5E4(v2, v1);
      sub_100196E44(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for StagedInstall(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StagedInstall(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100197350 + 4 * byte_10042F6E9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100197384 + 4 * asc_10042F6E4[v4]))();
}

uint64_t sub_100197384(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019738C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100197394);
  return result;
}

uint64_t sub_1001973A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001973A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001973AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001973B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StagedInstall()
{
  return &type metadata for StagedInstall;
}

char *sub_1001973D0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  UIImage *v6;
  UIImage *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v3 = (char *)_swiftEmptyArrayStorage;
    v4 = 4;
    v16 = v2;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (UIImage *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : (UIImage *)*(id *)(a1 + 8 * v4);
      v7 = v6;
      v8 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v9 = sub_100198298(v4 - 4, v6);
      v11 = v10;

      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_1000DEAD8(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v13 = *((_QWORD *)v3 + 2);
        v12 = *((_QWORD *)v3 + 3);
        if (v13 >= v12 >> 1)
          v3 = sub_1000DEAD8((char *)(v12 > 1), v13 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v13 + 1;
        v5 = &v3[16 * v13];
        *((_QWORD *)v5 + 4) = v9;
        *((_QWORD *)v5 + 5) = v11;
        v2 = v16;
      }
      ++v4;
      if (v8 == v2)
        goto LABEL_21;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v3 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_100197544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  __int128 v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;

  v2 = v1;
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  __chkstk_darwin(v4);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v67 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 64);
  v55 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v56 = (unint64_t)(v9 + 63) >> 6;
  v58 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v63 = a1;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v52 = (char *)_swiftEmptyArrayStorage;
  *(_QWORD *)&v14 = 136446210;
  v54 = v14;
  v53 = (char *)&type metadata for Any + 8;
  v57 = v6;
  while (1)
  {
    if (v11)
    {
      v64 = (v11 - 1) & v11;
      v65 = v13;
      v15 = __clz(__rbit64(v11)) | (v13 << 6);
      goto LABEL_22;
    }
    v16 = __OFADD__(v13, 1);
    v17 = v13 + 1;
    if (v16)
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v56)
      goto LABEL_38;
    v18 = *(_QWORD *)(v55 + 8 * v17);
    if (!v18)
      break;
LABEL_21:
    v64 = (v18 - 1) & v18;
    v65 = v17;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
LABEL_22:
    v20 = 16 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v63 + 48) + v20);
    v22 = *v21;
    v23 = (void *)v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(v63 + 56) + v20);
    v26 = *v24;
    v25 = v24[1];
    swift_bridgeObjectRetain();
    sub_10003A5E4(v26, v25);
    if (qword_10054BC10 != -1)
      swift_once(&qword_10054BC10, sub_1001980F4);
    sub_10000D78C(v6, (uint64_t)qword_1005510C0);
    v68 = 47;
    v69 = 0xE100000000000000;
    v27._countAndFlagsBits = v22;
    v66 = v23;
    v27._object = v23;
    String.append(_:)(v27);
    v28 = v60;
    v29 = v61;
    v30 = v62;
    (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, v58, v62);
    v31 = sub_1000AE4D8();
    v32 = v67;
    URL.appending<A>(path:directoryHint:)(&v68, v28, &type metadata for String, v31);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    swift_bridgeObjectRelease(v69);
    v33 = Data.write(to:options:)(v32, 0, v26, v25);
    if (v2)
    {
      if (qword_10054BC18 != -1)
        swift_once(&qword_10054BC18, sub_10019821C);
      v34 = type metadata accessor for Logger(0);
      sub_10000D78C(v34, (uint64_t)qword_1005510D8);
      swift_errorRetain(v2);
      v35 = swift_errorRetain(v2);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v68 = v39;
        *(_DWORD *)v38 = v54;
        v70 = v2;
        swift_errorRetain(v2);
        v40 = sub_10000B4C8((uint64_t *)&unk_100550630);
        v41 = (char *)String.init<A>(describing:)(&v70, v40);
        v43 = v42;
        *(_QWORD *)(v38 + 4) = sub_1000BA30C(v41, v42, &v68);
        swift_bridgeObjectRelease(v43);
        swift_errorRelease(v2);
        swift_errorRelease(v2);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Tap-to-Radar Attachment file write failed with error: %{public}s", (uint8_t *)v38, 0xCu);
        swift_arrayDestroy(v39, 1, v53);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_errorRelease(v2);
        swift_errorRelease(v2);
      }
      swift_errorRelease(v2);
      v6 = v57;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v57);
      swift_bridgeObjectRelease(v66);
      result = sub_10003A628(v26, v25);
      v2 = 0;
    }
    else
    {
      v44 = v67;
      v45 = URL.path.getter(v33);
      v47 = v46;
      v6 = v57;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v57);
      swift_bridgeObjectRelease(v66);
      sub_10003A628(v26, v25);
      result = swift_isUniquelyReferenced_nonNull_native(v52);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1000DEAD8(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
        v52 = (char *)result;
      }
      v49 = *((_QWORD *)v52 + 2);
      v48 = *((_QWORD *)v52 + 3);
      if (v49 >= v48 >> 1)
      {
        result = (uint64_t)sub_1000DEAD8((char *)(v48 > 1), v49 + 1, 1, v52);
        v52 = (char *)result;
      }
      v50 = v52;
      *((_QWORD *)v52 + 2) = v49 + 1;
      v51 = &v50[16 * v49];
      *((_QWORD *)v51 + 4) = v45;
      *((_QWORD *)v51 + 5) = v47;
    }
    v11 = v64;
    v13 = v65;
  }
  v19 = v17 + 1;
  if (v17 + 1 >= v56)
    goto LABEL_38;
  v18 = *(_QWORD *)(v55 + 8 * v19);
  if (v18)
    goto LABEL_20;
  v19 = v17 + 2;
  if (v17 + 2 >= v56)
    goto LABEL_38;
  v18 = *(_QWORD *)(v55 + 8 * v19);
  if (v18)
    goto LABEL_20;
  v19 = v17 + 3;
  if (v17 + 3 >= v56)
    goto LABEL_38;
  v18 = *(_QWORD *)(v55 + 8 * v19);
  if (v18)
    goto LABEL_20;
  v19 = v17 + 4;
  if (v17 + 4 >= v56)
  {
LABEL_38:
    swift_release(v63);
    return (uint64_t)v52;
  }
  v18 = *(_QWORD *)(v55 + 8 * v19);
  if (v18)
  {
LABEL_20:
    v17 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v56)
      goto LABEL_38;
    v18 = *(_QWORD *)(v55 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_21;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100197AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v69 = a3;
  v70 = a4;
  v16 = sub_10000B4C8(&qword_100550700);
  __chkstk_darwin(v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URLComponents(0);
  __chkstk_darwin(v19);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054C348 != -1)
  {
    v68 = a7;
    v58 = v20;
    swift_once(&qword_10054C348, sub_10028E458);
    v20 = v58;
    a7 = v68;
  }
  if (static DeviceCapabilities.isInternalInstall != 1)
  {
    v29 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a9, 1, 1, v29);
  }
  v68 = a7;
  v23 = v20;
  URLComponents.init(string:)(0xD000000000000012, 0x800000010044B3F0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v65 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v22, v18, v19);
  if ((unint64_t)a5 >> 62)
  {
    if (a5 < 0)
      v59 = a5;
    else
      v59 = a5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v60 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease(a5);
    v66 = a8;
    if (v60)
      goto LABEL_8;
  }
  else
  {
    v25 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v66 = a8;
    if (v25)
    {
LABEL_8:
      v26 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      if (qword_10054BC10 != -1)
        swift_once(&qword_10054BC10, sub_1001980F4);
      v27 = type metadata accessor for URL(0);
      sub_10000D78C(v27, (uint64_t)qword_1005510C0);
      NSFileManager.createDirectoryIfNeeded(at:)();
      v28 = a2;

      goto LABEL_13;
    }
  }
  if (*(_QWORD *)(a6 + 16))
    goto LABEL_8;
  v28 = a2;
LABEL_13:
  v30 = swift_bridgeObjectRetain();
  v31 = sub_1001973D0(v30);
  swift_bridgeObjectRelease(a5);
  v63 = sub_100197544(a6);
  v32 = sub_10000B4C8(&qword_10054DC70);
  v33 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v34 = swift_allocObject(v32, ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ 8 * *(_QWORD *)(v33 + 72), *(unsigned __int8 *)(v33 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_100428050;
  URLQueryItem.init(name:value:)(0x656C746954, 0xE500000000000000, a1, v28);
  URLQueryItem.init(name:value:)(0x7470697263736544, 0xEB000000006E6F69, v69, v70);
  v35 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v36 = objc_msgSend(v35, "bundleIdentifier");

  v67 = a9;
  v64 = v19;
  v62 = v34;
  if (v36)
  {
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0;
  }
  URLQueryItem.init(name:value:)(0x4449656C646E7542, 0xE800000000000000, v37, v39);
  swift_bridgeObjectRelease(v39);
  v71 = (uint64_t)v31;
  v40 = sub_10000B4C8(&qword_10054D598);
  v41 = sub_100185858();
  v42 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
  v44 = v43;
  URLQueryItem.init(name:value:)(0x68736E6565726353, 0xEA0000000000746FLL, v42, v43);
  swift_bridgeObjectRelease(v44);
  v45 = (char *)v63;
  v71 = v63;
  v46 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
  v48 = v47;
  URLQueryItem.init(name:value:)(0x656D686361747441, 0xEB0000000073746ELL, v46, v47);
  swift_bridgeObjectRelease(v48);
  v71 = v68;
  v49 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
  v51 = v50;
  URLQueryItem.init(name:value:)(0x7364726F7779654BLL, 0xE800000000000000, v49, v50);
  swift_bridgeObjectRelease(v51);
  v71 = (uint64_t)v31;
  sub_10012B130(v45);
  v52 = *(_QWORD *)(v71 + 16);
  swift_bridgeObjectRelease(v71);
  if (v52)
    v53 = 49;
  else
    v53 = 0;
  if (v52)
    v54 = 0xE100000000000000;
  else
    v54 = 0;
  URLQueryItem.init(name:value:)(0x6E4F6574656C6544, 0xEE00686361747441, v53, v54);
  swift_bridgeObjectRelease(v54);
  if ((v66 & 1) != 0)
    v55 = 49;
  else
    v55 = 0;
  if ((v66 & 1) != 0)
    v56 = 0xE100000000000000;
  else
    v56 = 0;
  URLQueryItem.init(name:value:)(0xD00000000000001ALL, 0x800000010044B410, v55, v56);
  swift_bridgeObjectRelease(v56);
  v57 = URLComponents.queryItems.setter(v62);
  URLComponents.url.getter(v57);
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v22, v64);
}

uint64_t sub_1001980F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for URL.DirectoryHint(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  sub_10000D924(v7, qword_1005510C0);
  sub_10000D78C(v7, (uint64_t)qword_1005510C0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v0);
  return URL.init(filePath:directoryHint:relativeTo:)(0xD000000000000015, 0x800000010044B450, v3, v6);
}

uint64_t sub_10019821C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_1005510D8);
  sub_10000D78C(v0, (uint64_t)qword_1005510D8);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x522D6F742D706154, 0xEC00000072616461);
}

uint64_t sub_100198298(uint64_t a1, UIImage *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  NSData *v21;
  NSData *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  unint64_t v29;
  unint64_t v30;

  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v28 - v13;
  if (qword_10054BC10 != -1)
    swift_once(&qword_10054BC10, sub_1001980F4);
  v15 = sub_10000D78C(v8, (uint64_t)qword_1005510C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v15, v8);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v30);
  v29 = 0xD000000000000012;
  v30 = 0x800000010044B430;
  v28[1] = a1;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 1735420462;
  v18._object = (void *)0xE400000000000000;
  String.append(_:)(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  v19 = sub_1000AE4D8();
  URL.appending<A>(path:directoryHint:)(&v29, v7, &type metadata for String, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease(v30);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v21 = UIImageJPEGRepresentation(a2, 85.0);
  if (v21)
  {
    v22 = v21;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    Data.write(to:options:)(v14, 0, v23, v25);
    v21 = (NSData *)sub_10003A628(v23, v25);
  }
  v26 = URL.path.getter(v21);
  v20(v14, v8);
  return v26;
}

uint64_t static CloudLibrary.presentCloudLibraryEnabler(context:presentationSource:style:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 89) = a1;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = v6;
  return swift_task_switch(sub_100198718, v5, v6);
}

uint64_t sub_100198718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 89);
  v5 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 64) = v5;
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 72) = v6;
  *(_BYTE *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_QWORD *)(v6 + 32) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 80) = v7;
  *v7 = v1;
  v7[1] = sub_1001987E4;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 88, v5, &protocol witness table for MainActor, 0xD00000000000003DLL, 0x80000001004468B0, sub_10019CE5C, v6, &type metadata for Bool);
}

uint64_t sub_1001987E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A0FC8, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10019884C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000B4C8((uint64_t *)&unk_100551630);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_1000760E0(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10013BB38(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10013BB38(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10013BB38(v37, v38);
    sub_10013BB38(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10013BB38(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100194204(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100198C10(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000B4C8((uint64_t *)&unk_100551630);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, &type metadata for Bool, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10013BB38(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10013BB38(v38, v39);
    sub_10013BB38(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10013BB38(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100194204(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t *CloudLibrary.EnablementContext.action.unsafeMutableAddressor()
{
  if (qword_10054BC20 != -1)
    swift_once(&qword_10054BC20, sub_100199744);
  return &static CloudLibrary.EnablementContext.action;
}

uint64_t *CloudLibrary.StatusObserver.shared.unsafeMutableAddressor()
{
  if (qword_10054BC28 != -1)
    swift_once(&qword_10054BC28, sub_100199910);
  return &static CloudLibrary.StatusObserver.shared;
}

void CloudLibrary.EnablementContext.title.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1001990F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x800000010044B530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v0);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v5 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v6 = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, v5, v2, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  return v6;
}

void CloudLibrary.EnablementContext.message.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1001992FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.LocalizationValue.init(stringLiteral:)(0xD000000000000079, 0x800000010044B8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v0);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v5 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v6 = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, v5, v2, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  return v6;
}

void UIView.CompressionResistancePriority.vertical.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

CFRange (__swiftcall *UIView.CompressionResistancePriority.vertical.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t static CloudLibrary.UpdateContext.__derived_struct_equals(_:_:)(int a1, unsigned int a2, float a3, float a4)
{
  return (a3 == a4) & ~(a1 ^ a2);
}

BOOL sub_100199484(float *a1, float *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2 && a1[1] == a2[1];
}

unint64_t CloudLibrary.FailureType.rawValue.getter(int a1)
{
  return ~a1 | 0xFFFFFFFFFFFFFF00;
}

Swift::Int sub_1001994C0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

void sub_100199504()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(~(unint64_t)*v0);
}

Swift::Int sub_100199530()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

uint64_t sub_100199570@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore12CloudLibraryO11FailureTypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100199598(unint64_t *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = ~(unint64_t)*v1;
}

BOOL CloudLibrary.Status.shouldDisplayBanner.getter(uint64_t a1)
{
  if (a1 >> 30 == 1)
    return a1 & 1;
  return a1 >> 30 != 2 || (unint64_t)(a1 - 0x80000000) >= 3;
}

BOOL CloudLibrary.Status.shouldShowDismissButton.getter(uint64_t a1)
{
  return a1 >> 30 != 1 && (a1 >> 30 != 2 || a1 != 2147483652);
}

BOOL CloudLibrary.Status.shouldShowActionButton.getter(uint64_t a1)
{
  return !(a1 >> 30) || a1 >> 30 == 2 && a1 == 2147483651;
}

void (*CloudLibrary.Status.action.getter(uint64_t a1))()
{
  if (!(a1 >> 30) || a1 >> 30 == 2 && a1 == 2147483651)
    return sub_10019967C;
  else
    return 0;
}

void sub_10019967C()
{
  if (qword_10054BC28 != -1)
    swift_once(&qword_10054BC28, sub_100199910);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(0, 0);
}

BOOL CloudLibrary.Status.shouldShowLoadingView.getter(uint64_t a1)
{
  return a1 >> 30 == 1 || a1 >> 30 == 2 && a1 == 2147483652;
}

unint64_t CloudLibrary.Status.progress.getter(unint64_t a1)
{
  unint64_t v1;

  v1 = HIDWORD(a1);
  if ((a1 & 0xC0000000) != 0x40000000)
    v1 = 0;
  return v1 | ((unint64_t)((a1 & 0xC0000000) != 0x40000000) << 32);
}

uint64_t sub_100199738(uint64_t *a1, uint64_t *a2)
{
  return _s9MusicCore12CloudLibraryO6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t sub_100199744()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v15[-v8];
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010044BCE0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v10 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  v13 = v12;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  static CloudLibrary.EnablementContext.action = v11;
  unk_100561810 = v13;
  return result;
}

uint64_t static CloudLibrary.EnablementContext.action.getter()
{
  uint64_t v0;

  if (qword_10054BC20 != -1)
    swift_once(&qword_10054BC20, sub_100199744);
  v0 = static CloudLibrary.EnablementContext.action;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_100199910()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CloudLibrary.StatusObserver(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10019998C();
  static CloudLibrary.StatusObserver.shared = result;
  return result;
}

uint64_t static CloudLibrary.StatusObserver.shared.getter()
{
  if (qword_10054BC28 != -1)
    swift_once(&qword_10054BC28, sub_100199910);
  return swift_retain(static CloudLibrary.StatusObserver.shared);
}

uint64_t sub_10019998C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  void *v14;
  Swift::Int v15;
  __C::_NSRange v16;
  CFRange v17;
  uint64_t v18;
  id v19;
  void *v20;
  Swift::Int v21;
  __C::_NSRange v22;
  CFRange v23;
  void *v24;
  CFRange v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v44[152];
  _QWORD v45[2];
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;

  v1 = v0;
  v2 = sub_10000B4C8((uint64_t *)&unk_100551128);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = 2;
  v45[0] = 0xD000000000000014;
  v45[1] = 0x8000000100446650;
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v7 = sub_1000AE4D8();
  UserDefault.init(wrappedValue:defaults:key:)((uint64_t)&v46, (uint64_t)v6, (uint64_t)v45, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Bool, v7, (char *)&v47);
  v8 = v48;
  v9 = v49;
  *(_OWORD *)(v1 + 16) = v47;
  *(_QWORD *)(v1 + 32) = v8;
  *(_BYTE *)(v1 + 40) = v9;
  *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
  if (qword_10054BA98 != -1)
    swift_once(&qword_10054BA98, sub_100154564);
  v10 = static ApplicationCapabilities.Controller.shared;
  *(_QWORD *)(v1 + 56) = static ApplicationCapabilities.Controller.shared;
  *(_QWORD *)(v1 + 64) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  v11 = v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status;
  *(_QWORD *)&v47 = 0x80000000;
  swift_retain(v10);
  Published.init(initialValue:)(&v47, &type metadata for CloudLibrary.Status);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v11, v5, v2);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext) = 2;
  v12 = sub_10000B4C8(&qword_100550030);
  inited = swift_initStackObject(v12, v44);
  *(_OWORD *)(inited + 16) = xmmword_100427490;
  if (qword_10054BAF8 != -1)
    swift_once(&qword_10054BAF8, sub_100159644);
  v14 = (void *)static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange;
  v15 = *(_QWORD *)(v1 + 56);
  v16.location = static ApplicationCapabilities.NotificationNames.userSubscriptionStateDidChange;
  v16.length = v15;
  v17 = CFRange.init(_:)(v16);
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 32) = v17;
  v18 = qword_10054BB18;
  v19 = v14;
  swift_retain(v15);
  if (v18 != -1)
    swift_once(&qword_10054BB18, sub_100159784);
  v20 = (void *)static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange;
  v21 = *(_QWORD *)(v1 + 56);
  v22.location = static ApplicationCapabilities.NotificationNames.isCloudLibraryEnabledDidChange;
  v22.length = v21;
  v23 = CFRange.init(_:)(v22);
  *(_QWORD *)(inited + 96) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 104) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 72) = v23;
  v24 = (void *)MPCloudControllerCloudLibraryFailureDidChangeNotification;
  v25 = CFRange.init(_:)((__C::_NSRange)MPCloudControllerCloudLibraryFailureDidChangeNotification);
  *(_QWORD *)(inited + 136) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 144) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 112) = v25;
  v26 = swift_allocObject(&unk_100509CF0, 24, 7);
  swift_weakInit(v26 + 16, v1);
  v27 = type metadata accessor for Whitetail.Binding();
  swift_allocObject(v27, 48, 7);
  v28 = v20;
  swift_retain(v21);
  v29 = v24;
  v30 = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, 1, (uint64_t)sub_1001A0DFC, v26);
  swift_beginAccess(v1 + 72, &v47, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
  v33 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v32 = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v33 >= v32 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
  v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
  specialized Array._endMutation()(v34);
  swift_endAccess(&v47);
  v35 = (void *)MPCloudControllerIsUpdateInProgressDidChangeNotification;
  v36 = (void *)objc_opt_self(MPCloudController);
  v37 = v35;
  v38 = objc_msgSend(v36, "sharedCloudController");
  v39 = swift_allocObject(&unk_100509CF0, 24, 7);
  swift_weakInit(v39 + 16, v1);
  v40 = type metadata accessor for NotificationObserver();
  swift_allocObject(v40, 64, 7);
  v41 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v37, (uint64_t)v38, 1, 1, (uint64_t)sub_1001A0E04, v39);
  v42 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v41;
  swift_release(v42);
  return v1;
}

uint64_t property wrapper backing initializer of CloudLibrary.StatusObserver.status(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return Published.init(initialValue:)(&v2, &type metadata for CloudLibrary.Status);
}

uint64_t sub_100199DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 aBlock;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = *(_QWORD *)(result + 56);
    KeyPath = swift_getKeyPath(&unk_10042FC38);
    v5 = swift_getKeyPath(&unk_10042FC60);
    static Published.subscript.getter(&aBlock, v3, KeyPath, v5);
    swift_release(KeyPath);
    swift_release(v5);
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v19;
    v12 = v20;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);

    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_10019A24C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void (*v36)();
  _QWORD *v37;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v12, v13, v14, v15, v16, v17, v18, v19, v30, v31, aBlock, v33, v34, v35, v36);
  v21 = (_QWORD *)swift_allocObject(&unk_10050A3E8, 40, 7);
  v21[2] = a2;
  v21[3] = a1;
  v21[4] = a3;
  v36 = sub_1001A0E48;
  v37 = v21;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_10015F6F8;
  v35 = &unk_10050A400;
  v22 = _Block_copy(&aBlock);
  v23 = v37;
  swift_errorRetain(a2);
  v24 = a1;
  swift_retain(a3);
  swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v26 = sub_10001254C((unint64_t *)&qword_1005515F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10000B4C8(&qword_10054FC78);
  v28 = sub_100012324((unint64_t *)&qword_100551600, &qword_10054FC78, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v30);
}

void sub_10019A478(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1 && a2)
  {
    v4 = a2;
    v5 = (unint64_t)objc_msgSend(v4, "integerValue");
    if (v5 > 0xFFFFFFFFFFFFFFF9)
    {
      v6 = ~v5;
      KeyPath = swift_getKeyPath(&unk_10042F738);
      v8 = swift_getKeyPath(&unk_10042F760);
      static Published.subscript.getter(&v17, a3, KeyPath, v8);
      swift_release(KeyPath);
      swift_release(v8);
      v9 = v17;
      v10 = swift_getKeyPath(&unk_10042F738);
      v11 = swift_getKeyPath(&unk_10042F760);
      v17 = v6;
      swift_retain(a3);
      static Published.subscript.setter(&v17, a3, v10, v11);
      sub_10019B714(v9);

      return;
    }

  }
  v12 = swift_getKeyPath(&unk_10042F738);
  v13 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(&v17, a3, v12, v13);
  swift_release(v12);
  swift_release(v13);
  v14 = v17;
  v15 = swift_getKeyPath(&unk_10042F738);
  v16 = swift_getKeyPath(&unk_10042F760);
  v17 = 2147483651;
  swift_retain(a3);
  static Published.subscript.setter(&v17, a3, v15, v16);
  sub_10019B714(v14);
}

double sub_10019A60C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_10019BD78();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

BOOL CloudLibrary.StatusObserver.shouldDisplayStatusBanner.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10042F738);
  v2 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(&v5, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = (unint64_t)(v5 - 2147483651) < 0xFFFFFFFFFFFFFFFDLL;
  if (v5 >> 30 != 2)
    v3 = 1;
  if (v5 >> 30 == 1)
    return v5 & 1;
  else
    return v3;
}

void sub_10019A700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v14[24];

  v1 = v0;
  swift_beginAccess(v0 + 16, v14, 0, 0);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v10 = *(_OWORD *)(v0 + 16);
  v11 = v2;
  v12 = v3;
  v4 = sub_10000B4C8(&qword_100551118);
  UserDefault.wrappedValue.getter(v4, (uint64_t)&v13);
  if ((v13 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_10042F738);
    v6 = swift_getKeyPath(&unk_10042F760);
    static Published.subscript.getter(&v10, v0, KeyPath, v6);
    swift_release(v6);
    swift_release(KeyPath);
    v7 = v10;
    v8 = swift_getKeyPath(&unk_10042F738);
    v9 = swift_getKeyPath(&unk_10042F760);
    *(_QWORD *)&v10 = 2147483650;
    swift_retain(v1);
    static Published.subscript.setter(&v10, v1, v8, v9);
    sub_10019B714(v7);
  }
}

uint64_t CloudLibrary.StatusObserver.hasDisregardedBanner.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v3;
  _BYTE v4[24];

  swift_beginAccess(v0 + 16, v4, 0, 0);
  v1 = sub_10000B4C8(&qword_100551118);
  UserDefault.wrappedValue.getter(v1, (uint64_t)&v3);
  return v3;
}

void CloudLibrary.StatusObserver.hasDisregardedBanner.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[31];
  char v4;

  v4 = a1;
  swift_beginAccess(v1 + 16, v3, 33, 0);
  v2 = sub_10000B4C8(&qword_100551118);
  UserDefault.wrappedValue.setter((uint64_t)&v4, v2);
  swift_endAccess(v3);
  sub_10019A700();
}

void (*CloudLibrary.StatusObserver.hasDisregardedBanner.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[7] = v1;
  swift_beginAccess(v1 + 16, v3 + 4, 0, 0);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 16);
  v3[2] = v4;
  *((_BYTE *)v3 + 24) = v5;
  v6 = sub_10000B4C8(&qword_100551118);
  v3[8] = v6;
  UserDefault.wrappedValue.getter(v6, (uint64_t)v3 + 25);
  return sub_10019A97C;
}

void sub_10019A97C(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v3 = *(_QWORD *)(*a1 + 56);
  v2 = *(_QWORD *)(*a1 + 64);
  v4 = *a1;
  *(_BYTE *)(*a1 + 26) = *(_BYTE *)(*a1 + 25);
  swift_beginAccess(v3 + 16, v1, 33, 0);
  UserDefault.wrappedValue.setter(v4 + 26, v2);
  swift_endAccess(v1);
  sub_10019A700();
  free(v1);
}

void CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  Class isa;
  uint64_t v25;
  void *v26;
  _QWORD v27[5];
  uint64_t v28;
  _BYTE v29[80];

  if (a1)
  {
    v5 = swift_allocObject(&unk_100509D40, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = *(_QWORD **)(v2 + 48);
    swift_retain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    *(_QWORD *)(v2 + 48) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v6 = sub_1000DF2F8(0, v6[2] + 1, 1, v6);
      *(_QWORD *)(v2 + 48) = v6;
    }
    v9 = v6[2];
    v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      v6 = sub_1000DF2F8((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
      *(_QWORD *)(v2 + 48) = v6;
    }
    v6[2] = v9 + 1;
    v10 = &v6[2 * v9];
    v10[4] = sub_10019FA74;
    v10[5] = v5;
  }
  KeyPath = swift_getKeyPath(&unk_10042F738);
  v12 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(v27, v2, KeyPath, v12);
  swift_release(v12);
  swift_release(KeyPath);
  v13 = v27[0];
  v14 = swift_getKeyPath(&unk_10042F738);
  v15 = swift_getKeyPath(&unk_10042F760);
  v27[0] = 2147483652;
  swift_retain(v2);
  static Published.subscript.setter(v27, v2, v14, v15);
  sub_10019B714(v13);
  v16 = sub_10000B4C8(&qword_100551120);
  inited = swift_initStackObject(v16, v29);
  *(_OWORD *)(inited + 16) = xmmword_100424BA0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCloudControllerEnableCloudLibraryOptionStartInitialImport);
  *(_QWORD *)(inited + 40) = v18;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCloudControllerEnableCloudLibraryOptionMergeWithCloudLibrary);
  *(_QWORD *)(inited + 64) = v19;
  *(_BYTE *)(inited + 72) = 1;
  v20 = sub_100139D30(inited);
  v21 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (v21)
  {
    v22 = v21;
    v23 = sub_100198C10(v20);
    swift_bridgeObjectRelease(v20);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v25 = swift_allocObject(&unk_100509CF0, 24, 7);
    swift_weakInit(v25 + 16, v2);
    v27[4] = sub_10019FA54;
    v28 = v25;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 1107296256;
    v27[2] = sub_100013BD4;
    v27[3] = &unk_100509D08;
    v26 = _Block_copy(v27);
    objc_msgSend(v22, "enableCloudLibraryWithOptions:completionHandler:", isa, v26, swift_release(v28).n128_f64[0]);
    _Block_release(v26);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10019ACD8(unsigned __int8 *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_10019ACFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **aBlock;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t (*v54)();
  uint64_t v55;
  _QWORD v56[3];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10054BC30 != -1)
      swift_once(&qword_10054BC30, sub_10019F7B4);
    v12 = type metadata accessor for Logger(0);
    sub_10000D78C(v12, (uint64_t)qword_1005510F0);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(12, -1);
      v17 = (void **)swift_slowAlloc(32, -1);
      v47 = v5;
      v18 = v17;
      aBlock = v17;
      *(_DWORD *)v16 = 136315138;
      v56[0] = a1;
      swift_errorRetain(a1);
      v19 = sub_10000B4C8((uint64_t *)&unk_100550630);
      v20 = (char *)String.init<A>(describing:)(v56, v19);
      v22 = v21;
      *(_QWORD *)(v16 + 4) = sub_1000BA30C(v20, v21, (uint64_t *)&aBlock);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to enable Cloud Library with error=%s", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      v23 = v18;
      v5 = v47;
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a1);
      goto LABEL_12;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10054BC30 != -1)
      swift_once(&qword_10054BC30, sub_10019F7B4);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10000D78C(v24, (uint64_t)qword_1005510F0);
    v14 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v26, "Successfully enabled Cloud Library", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
  }

LABEL_12:
  swift_beginAccess(v11, v56, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    v29 = result;
    v30 = sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
    v38 = (void *)static OS_dispatch_queue.main.getter(v30, v31, v32, v33, v34, v35, v36, v37, v47, v48, v49, aBlock, v51, v52, v53);
    v39 = swift_allocObject(&unk_10050A370, 32, 7);
    *(_QWORD *)(v39 + 16) = v29;
    *(_QWORD *)(v39 + 24) = a1;
    v54 = sub_1001A0DF4;
    v55 = v39;
    aBlock = _NSConcreteStackBlock;
    v51 = 1107296256;
    v52 = sub_10015F6F8;
    v53 = &unk_10050A388;
    v40 = _Block_copy(&aBlock);
    v41 = v55;
    swift_errorRetain(a1);
    swift_retain(v29);
    swift_release(v41);
    static DispatchQoS.unspecified.getter(v42);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v43 = sub_10001254C((unint64_t *)&qword_1005515F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v44 = sub_10000B4C8(&qword_10054FC78);
    v45 = sub_100012324((unint64_t *)&qword_100551600, &qword_10054FC78, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v44, v45, v4, v43);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v40);
    _Block_release(v40);

    v46 = swift_release(v29);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v10, v49);
  }
  return result;
}

uint64_t sub_10019B178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(BOOL *);
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = a2 == 0;
    swift_bridgeObjectRetain();
    v5 = (uint64_t *)(v2 + 40);
    do
    {
      v7 = (void (*)(BOOL *))*(v5 - 1);
      v6 = *v5;
      v9 = v4;
      swift_retain(v6);
      v7(&v9);
      swift_release(v6);
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v2);
  }
  return swift_bridgeObjectRelease(v2);
}

uint64_t CloudLibrary.StatusObserver.add(updateObserver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t KeyPath;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  _BYTE v22[8];
  uint64_t v23;
  _BYTE v24[24];

  v3 = v2;
  v6 = (_QWORD *)(v3 + 64);
  swift_beginAccess(v3 + 64, v24, 1, 0);
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + 32;
    swift_bridgeObjectRetain();
    do
    {
      Strong = swift_unknownObjectWeakLoadStrong(v9);
      if (Strong)
      {
        v11 = Strong;
        swift_unknownObjectRelease(Strong);
        if (v11 == a1)
          return swift_bridgeObjectRelease();
      }
      v9 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  v23 = a2;
  swift_unknownObjectWeakInit(v22, a1);
  ObjectType = swift_getObjectType();
  KeyPath = swift_getKeyPath(&unk_10042F738);
  v15 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(v21, v3, KeyPath, v15);
  swift_release(v15);
  v16 = swift_release(KeyPath);
  (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(a2 + 8))(v21[0], ObjectType, a2, v16);
  sub_10019FA98((uint64_t)v22, (uint64_t)v21);
  v17 = *(_QWORD **)(v3 + 64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)(v3 + 64) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = sub_1000DF420(0, v17[2] + 1, 1, v17);
    *v6 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    v17 = sub_1000DF420((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    *v6 = v17;
  }
  v17[2] = v20 + 1;
  sub_10019FAD0((uint64_t)v21, (uint64_t)&v17[2 * v20 + 4]);
  return sub_10019FB08((uint64_t)v22);
}

void CloudLibrary.StatusObserver.remove(updateObserver:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t Strong;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[16];
  _BYTE v12[24];

  v3 = v1 + 64;
  swift_beginAccess(v1 + 64, v12, 0, 0);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v6);
      if (Strong)
      {
        v9 = Strong;
        swift_unknownObjectRelease(Strong);
        if (v9 == a1)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess(v3, v10, 33, 0);
          sub_10019B4B0(i, (uint64_t)v11);
          sub_10019FB08((uint64_t)v11);
          swift_endAccess(v10);
          return;
        }
      }
      v6 += 16;
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10019B4B0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v5 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1002577DC(v5);
    v5 = (_QWORD *)result;
  }
  v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = &v5[2 * a1];
    sub_10019FAD0((uint64_t)(v9 + 4), a2);
    result = swift_arrayInitWithTakeFrontToBack(v9 + 4);
    v5[2] = v8;
    *v2 = v5;
  }
  return result;
}

char *sub_10019B550(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    result = sub_1002577F0(v3);
    v3 = (uint64_t)result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(v3 + a1 + 32);
    memmove((void *)(v3 + a1 + 32), (const void *)(v3 + a1 + 33), v5 - 1 - a1);
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return (char *)v7;
  }
  return result;
}

uint64_t sub_10019B5D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10042F738);
  v5 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

void sub_10019B64C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10042F738);
  v5 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(&v9, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v9;
  v7 = swift_getKeyPath(&unk_10042F738);
  v8 = swift_getKeyPath(&unk_10042F760);
  v9 = v2;
  swift_retain(v3);
  static Published.subscript.setter(&v9, v3, v7, v8);
  sub_10019B714(v6);
}

void sub_10019B714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_10042F738);
  v5 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(&v18, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  if ((_s9MusicCore12CloudLibraryO6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(v18, a1) & 1) == 0)
  {
    if (qword_10054BC30 != -1)
      swift_once(&qword_10054BC30, sub_10019F7B4);
    v6 = type metadata accessor for Logger(0);
    sub_10000D78C(v6, (uint64_t)qword_1005510F0);
    v7 = swift_retain_n(v2, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = swift_getKeyPath(&unk_10042F738);
      v13 = swift_getKeyPath(&unk_10042F760);
      static Published.subscript.getter(&v17, v2, v12, v13);
      swift_release(v13);
      swift_release(v12);
      v14 = (char *)String.init<A>(describing:)(&v17, &type metadata for CloudLibrary.Status);
      v16 = v15;
      *(_QWORD *)(v10 + 4) = sub_1000BA30C(v14, v15, &v18);
      swift_bridgeObjectRelease(v16);
      swift_release_n(v2, 2);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Status did change: %s", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2);
    }

    sub_10019C6E8();
  }
}

uint64_t CloudLibrary.StatusObserver.status.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10042F738);
  v2 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_10019B9AC(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status, v3, 33, 0);
  v1 = sub_10000B4C8((uint64_t *)&unk_100551128);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_10019BA10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = sub_10000B4C8(&qword_100551608);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, (uint64_t)v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status, v16, 33, 0);
  v13 = sub_10000B4C8((uint64_t *)&unk_100551128);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t CloudLibrary.StatusObserver.$status.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status, v3, 33, 0);
  v1 = sub_10000B4C8((uint64_t *)&unk_100551128);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

void sub_10019BB80(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext);
  if (a1 == 2)
  {
    if (v2 != 2 && (v2 & 1) != 0)
    {
      v3 = HIDWORD(v2);
      goto LABEL_9;
    }
  }
  else
  {
    if (v2 == 2)
    {
      KeyPath = swift_getKeyPath(&unk_10042F738);
      v5 = swift_getKeyPath(&unk_10042F760);
      static Published.subscript.getter(&v12, v1, KeyPath, v5);
      swift_release(v5);
      swift_release(KeyPath);
      v6 = v12;
      v7 = swift_getKeyPath(&unk_10042F738);
      v8 = swift_getKeyPath(&unk_10042F760);
      v12 = 0x80000000;
LABEL_10:
      swift_retain(v1);
      static Published.subscript.setter(&v12, v1, v7, v8);
      sub_10019B714(v6);
      return;
    }
    v3 = HIDWORD(v2);
    if (((((a1 & 1) == 0) ^ v2) & (*((float *)&a1 + 1) == *((float *)&v2 + 1))) == 0 && (v2 & 1) != 0)
    {
LABEL_9:
      v9 = (v3 << 32) | 0x40000001;
      v10 = swift_getKeyPath(&unk_10042F738);
      v11 = swift_getKeyPath(&unk_10042F760);
      static Published.subscript.getter(&v12, v1, v10, v11);
      swift_release(v11);
      swift_release(v10);
      v6 = v12;
      v7 = swift_getKeyPath(&unk_10042F738);
      v8 = swift_getKeyPath(&unk_10042F760);
      v12 = v9;
      goto LABEL_10;
    }
  }
}

void (*sub_10019BD28(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext;
  a1[1] = v1;
  a1[2] = v2;
  *a1 = *(_QWORD *)(v1 + v2);
  return sub_10019BD4C;
}

void sub_10019BD4C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = v3;
  sub_10019BB80(v4);
}

void sub_10019BD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  unsigned int v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v39;
  void (*v40)(_QWORD *, uint64_t);
  void *v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[5];
  uint64_t v63;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  __chkstk_darwin(v2);
  v59 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  __chkstk_darwin(v4);
  v56 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  v7 = __chkstk_darwin(v6);
  v53 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v52 = (uint64_t *)((char *)&v47 - v9);
  v10 = type metadata accessor for DispatchTime(0);
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  __chkstk_darwin(v10);
  v49 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v48 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS.QoSClass(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(MPCloudController);
  v20 = objc_msgSend(v19, "sharedCloudController");
  if (!v20)
  {
    __break(1u);
    goto LABEL_13;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "isUpdateInProgress");

  v23 = objc_msgSend(v19, "sharedCloudController");
  if (!v23)
  {
LABEL_13:
    __break(1u);
    return;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "isInitialImport");

  v26 = *(_QWORD *)(v1 + 88);
  if ((v22 & v25) == 1)
  {
    if (!v26)
    {
      v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext);
      *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext) = 1;
      sub_10019BB80(v27);
      sub_1000DD108(0, &qword_100553520, OS_dispatch_source_ptr);
      sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchQoS.QoSClass.userInteractive(_:), v15);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v18);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      aBlock[0] = _swiftEmptyArrayStorage;
      v29 = sub_10001254C(&qword_1005515D8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
      v30 = sub_10000B4C8(&qword_1005515E0);
      v31 = sub_100012324(&qword_1005515E8, &qword_1005515E0, (const char *)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v12, v29);
      v32 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v14, v28);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
      ObjectType = swift_getObjectType();
      v34 = v49;
      static DispatchTime.now()(ObjectType);
      v35 = v52;
      *v52 = 1;
      v37 = v54;
      v36 = v55;
      v38 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v54 + 104);
      v38(v35, enum case for DispatchTimeInterval.seconds(_:), v55);
      v39 = v53;
      *v53 = 1;
      v38(v39, enum case for DispatchTimeInterval.nanoseconds(_:), v36);
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v34, v35, v39, ObjectType);
      v40 = *(void (**)(_QWORD *, uint64_t))(v37 + 8);
      v40(v39, v36);
      v40(v35, v36);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
      aBlock[4] = sub_1001A0D34;
      v63 = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10015F6F8;
      aBlock[3] = &unk_10050A1F8;
      v41 = _Block_copy(aBlock);
      swift_retain(v1);
      v42 = v56;
      j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
      v43 = v59;
      sub_1002106F0();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v42, v43, v41, ObjectType);
      _Block_release(v41);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v61);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v58);
      v44 = swift_release(v63);
      v45 = *(_QWORD *)(v1 + 88);
      *(_QWORD *)(v1 + 88) = v32;
      swift_unknownObjectRetain_n(v32, 2, v44);
      if (v45)
      {
        swift_getObjectType();
        swift_unknownObjectRetain(v45);
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease_n(v45, 2);
      }
      swift_unknownObjectRelease(v32);
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease(v32);
    }
  }
  else
  {
    *(_QWORD *)(v1 + 88) = 0;
    if (v26)
    {
      swift_getObjectType();
      swift_unknownObjectRetain(v26);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease_n(v26, 2);
    }
    v46 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext);
    *(_QWORD *)(v1 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver_updateContext) = 2;
    sub_10019BB80(v46);
  }
}

void sub_10019C318(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (v2)
  {
    v3 = v2;
    v6[4] = sub_1001A0D3C;
    v7 = a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1107296256;
    v6[2] = sub_10019C6AC;
    v6[3] = &unk_10050A220;
    v4 = _Block_copy(v6);
    v5 = v7;
    swift_retain(a1);
    objc_msgSend(v3, "loadCloudMusicLibraryUpdateProgressWithCompletionHandler:", v4, swift_release(v5).n128_f64[0]);
    _Block_release(v4);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10019C3E8(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void **aBlock;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  void (*v34)();
  uint64_t v35;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v11, v12, v13, v14, v15, v16, v17, v18, v28, v29, aBlock, v31, v32, v33, v34);
  v20 = swift_allocObject(&unk_100509CF0, 24, 7);
  swift_weakInit(v20 + 16, a1);
  v21 = swift_allocObject(&unk_10050A258, 28, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(float *)(v21 + 24) = a2;
  v34 = sub_1001A0D68;
  v35 = v21;
  aBlock = _NSConcreteStackBlock;
  v31 = 1107296256;
  v32 = sub_10015F6F8;
  v33 = &unk_10050A270;
  v22 = _Block_copy(&aBlock);
  swift_release(v35);
  static DispatchQoS.unspecified.getter(v23);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v24 = sub_10001254C((unint64_t *)&qword_1005515F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10000B4C8(&qword_10054FC78);
  v26 = sub_100012324((unint64_t *)&qword_100551600, &qword_10054FC78, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v25, v26, v4, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10019C628(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  _QWORD v8[4];
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v7 = sub_10019BD28(v8);
    if (*(_BYTE *)v6 != 2)
      *(float *)(v6 + 4) = a2;
    ((void (*)(_QWORD *, _QWORD))v7)(v8, 0);
    swift_release(v5);
  }
}

uint64_t sub_10019C6AC(uint64_t a1, float a2)
{
  void (*v3)(uint64_t, float);
  uint64_t v4;
  uint64_t v5;

  v3 = *(void (**)(uint64_t, float))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = swift_retain(v4);
  v3(v5, a2);
  return swift_release(v4);
}

void sub_10019C6E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v11[8];
  uint64_t v12;
  _QWORD v13[3];

  KeyPath = swift_getKeyPath(&unk_10042F738);
  v2 = swift_getKeyPath(&unk_10042F760);
  static Published.subscript.getter(v13, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v13[0];
  swift_beginAccess(v0 + 64, v13, 0, 0);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10019FA98(v6, (uint64_t)v11);
      Strong = swift_unknownObjectWeakLoadStrong(v11);
      if (Strong)
      {
        v8 = Strong;
        v9 = v12;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v3, ObjectType, v9);
        swift_unknownObjectRelease(v8);
      }
      sub_10019FB08((uint64_t)v11);
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
  }
}

_QWORD *CloudLibrary.StatusObserver.deinit()
{
  _QWORD *v0;
  void *v1;
  char *v2;
  uint64_t v3;

  v1 = (void *)v0[2];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release(v0[7]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[10]);
  swift_unknownObjectRelease(v0[11]);
  v2 = (char *)v0 + OBJC_IVAR____TtCO9MusicCore12CloudLibrary14StatusObserver__status;
  v3 = sub_10000B4C8((uint64_t *)&unk_100551128);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t CloudLibrary.StatusObserver.__deallocating_deinit()
{
  uint64_t v0;

  CloudLibrary.StatusObserver.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10019C89C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for CloudLibrary.StatusObserver(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t CloudLibrary.Status.message.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
      goto LABEL_3;
    if ((unint64_t)(a1 - 0x80000000) < 3)
      return 0;
    if (a1 != 2147483651)
    {
LABEL_3:
      v12 = 0x800000010044B940;
      v13 = 0x1000000000000017;
    }
    else
    {
      v13 = 0xD00000000000002ALL;
      v12 = 0x800000010044B960;
    }
  }
  else
  {
    v12 = 0x800000010044B920;
    v13 = 0xD00000000000001CLL;
  }
  String.LocalizationValue.init(stringLiteral:)(v13, v12);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v14 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v15 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v14, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v15;
}

uint64_t CloudLibrary.Status.actionTitle.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v17[-v10];
  if (a1 >> 30)
  {
    v12 = 0;
    if (a1 >> 30 == 1)
      return v12;
    if (a1 != 2147483651)
      return 0;
    v13 = 0x6E4F206E727554;
    v14 = 0xE700000000000000;
  }
  else
  {
    v13 = 0x7972746552;
    v14 = 0xE500000000000000;
  }
  String.LocalizationValue.init(stringLiteral:)(v13, v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v15 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v12 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v15, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v12;
}

BOOL static CloudLibrary.PresentationStyle.__derived_enum_equals(_:_:)(void *a1, void *a2)
{
  char v5;

  if (!a1)
    return !a2;
  if (a1 == (void *)1)
    return a2 == (void *)1;
  if ((unint64_t)a2 < 2)
    return 0;
  sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
  sub_10019FB2C(a1);
  sub_10019FB2C(a2);
  v5 = static NSObject.== infix(_:_:)(a1, a2);
  sub_10019FB3C(a2);
  sub_10019FB3C(a1);
  return v5 & 1;
}

BOOL sub_10019CD2C(void **a1, void **a2)
{
  void *v2;
  void *v3;
  char v5;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
    return !v3;
  if (v2 == (void *)1)
    return v3 == (void *)1;
  if ((unint64_t)v3 < 2)
    return 0;
  sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
  sub_10019FB2C(v2);
  sub_10019FB2C(v3);
  v5 = static NSObject.== infix(_:_:)(v2, v3);
  sub_10019FB3C(v3);
  sub_10019FB3C(v2);
  return v5 & 1;
}

void sub_10019CDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10054BC28 != -1)
    swift_once(&qword_10054BC28, sub_100199910);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(a2, a3);
}

double sub_10019CE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10019D070(a1, a2, a3, a4, (uint64_t)&unk_10050A438, (uint64_t)sub_1001A0D78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0);
}

double sub_10019CE5C(uint64_t a1)
{
  uint64_t v1;

  return sub_10019D070(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_10050A438, (uint64_t)sub_1001A0D78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0);
}

uint64_t static CloudLibrary.presentCloudLibraryEnablerIfNeeded(context:presentationSource:style:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  *(_BYTE *)(v3 + 89) = a1;
  v4 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = v6;
  return swift_task_switch(sub_10019CF08, v5, v6);
}

uint64_t sub_10019CF08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 89);
  v5 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 64) = v5;
  v6 = swift_task_alloc(48);
  *(_QWORD *)(v1 + 72) = v6;
  *(_BYTE *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_QWORD *)(v6 + 32) = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 80) = v7;
  *v7 = v1;
  v7[1] = sub_10019CFD4;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 88, v5, &protocol witness table for MainActor, 0xD000000000000045, 0x800000010044B990, sub_1001A0200, v6, &type metadata for Bool);
}

uint64_t sub_10019CFD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10019D03C, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10019D03C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 88));
}

double sub_10019D070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v21 = a7;
  v13 = sub_10000B4C8(&qword_100551610);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(a5, v17 + v15, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v21(a2, a3, a4, a6, v18);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

char *sub_10019D174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)();
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];

  *(_QWORD *)&v6[qword_100551358] = 0;
  v13 = type metadata accessor for EnableCloudLibraryView.Model(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v15 = v6;
  sub_1000DB0D8(a5, a6);
  sub_10019D9B4(a1, a2, a3, a4, a5, a6, 1, 0, 0);
  *(_QWORD *)&v15[qword_100551350] = v14;
  swift_retain_n(v14, 2);

  v16 = sub_10001254C(&qword_100551618, type metadata accessor for EnableCloudLibraryView.Model, (uint64_t)&unk_10042FB84);
  v36[0] = ObservedObject.init(wrappedValue:)(v14, v13, v16);
  v36[1] = v17;
  v18 = (char *)UIHostingController.init(rootView:)(v36);
  v19 = *(_QWORD *)&v18[qword_100551350];
  v20 = swift_allocObject(&unk_10050A1E0, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, v18);
  v21 = (void (**)())(v19 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v22 = *(_QWORD *)(v19 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v23 = (uint64_t)v21[1];
  *v21 = sub_1001A0DC0;
  v21[1] = (void (*)())v20;
  v24 = v18;
  sub_1000DB26C(v22, v23);
  sub_10019D71C();
  v25 = objc_msgSend(v24, "presentingViewController");
  if (v25)
  {
    v26 = v25;
    v27 = sub_10000B4C8((uint64_t *)&unk_100551620);
    v28 = swift_allocObject(v27, 48, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100424BB0;
    *(_QWORD *)(v28 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
    *(_QWORD *)(v28 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
    v29 = UIViewController.registerForTraitChanges(_:action:)(v28, "determineHorizontalSizeClass");
    swift_unknownObjectRelease(v29);

    swift_bridgeObjectRelease(v28);
  }
  v30 = objc_msgSend(v24, "presentationController");
  if (v30)
  {
    v31 = v30;
    v32 = sub_10000B4C8((uint64_t *)&unk_100551620);
    v33 = swift_allocObject(v32, 48, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100424BB0;
    *(_QWORD *)(v33 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
    *(_QWORD *)(v33 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
    v34 = UIPresentationController.registerForTraitChanges(_:action:)(v33, "determineHorizontalSizeClass");
    sub_1000DB26C(a5, a6);
    swift_unknownObjectRelease(v34);

    swift_bridgeObjectRelease(v33);
  }
  else
  {
    sub_1000DB26C(a5, a6);
  }
  swift_release(v14);

  return v24;
}

void sub_10019D410(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

void sub_10019D470(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[qword_100551358] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010044BC20, "MusicCore/CloudLibrary.swift", 28, 2, 499, 0);
  __break(1u);
}

void sub_10019D4E4(void *a1)
{
  id v1;
  id v2;
  objc_class *v3;
  id v4;
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for CloudLibraryViewController(0);
  v1 = v5.receiver;
  objc_msgSendSuper2(&v5, "viewDidLoad");
  v2 = objc_msgSend(v1, "navigationItem", v5.receiver, v5.super_class);
  v3 = sub_10019D5A8();
  objc_msgSend(v2, "setRightBarButtonItem:", v3);

  v4 = objc_msgSend(v1, "navigationItem");
  objc_msgSend(v4, "setLargeTitleDisplayMode:", 2);

}

objc_class *sub_10019D5A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  UIBarButtonItem v6;
  void *v7;
  id v8;
  UIAction_optional v10;
  UIMenu_optional v11;

  v1 = qword_100551358;
  v2 = *(void **)(v0 + qword_100551358);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + qword_100551358);
  }
  else
  {
    v4 = v0;
    sub_1000DD108(0, &qword_1005515C8, UIBarButtonItem_ptr);
    sub_1000DD108(0, &qword_1005515D0, UIAction_ptr);
    v5 = swift_allocObject(&unk_10050A1E0, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v10.value.super.super.isa = (Class)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1001A0D2C, v5);
    v10.is_nil = 0;
    v6.super.super.isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemClose, v10, v11).super.super.isa;
    v7 = *(void **)(v0 + v1);
    *(UIBarButtonItem *)(v4 + v1) = v6;
    v3 = v6.super.super.isa;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void sub_10019D6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

void sub_10019D71C()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;

  v1 = objc_msgSend(v0, "presentingViewController");
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, "traitCollection"), v2, v3)
    || (v4 = objc_msgSend(v0, "presentationController")) != 0
    && (v5 = v4, v3 = objc_msgSend(v4, "traitCollection"), v5, v3))
  {
    v6 = *(_QWORD *)&v0[qword_100551350];
    swift_retain(v6);
    v7 = objc_msgSend(v3, "horizontalSizeClass");
    KeyPath = swift_getKeyPath(&unk_10042FBC0);
    v9 = swift_getKeyPath(&unk_10042FBE8);
    v10 = v7;
    static Published.subscript.setter(&v10, v6, KeyPath, v9);

  }
}

void sub_10019D820(void *a1)
{
  id v1;

  v1 = a1;
  sub_10019D71C();

}

void sub_10019D854()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_100551350));

}

id sub_10019D880()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudLibraryViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10019D8B4(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + qword_100551350));

}

uint64_t sub_10019D8EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10042FBC0);
  v2 = swift_getKeyPath(&unk_10042FBE8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_10019D95C()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCore.CloudLibraryViewController", 36, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_10019D988()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCore.CloudLibraryViewController", 36, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

_QWORD *sub_10019D9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[24];

  v14 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  *v14 = 0;
  v14[1] = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  swift_beginAccess((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model__horizontalSizeClass, v21, 33, 0);
  v20 = a7;
  sub_1000DB0D8(a5, a6);
  type metadata accessor for UIUserInterfaceSizeClass(0);
  Published.init(initialValue:)(&v20, v15);
  swift_endAccess(v21);
  sub_1000DB26C(a5, a6);
  v16 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v17 = *(_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  v18 = *(_QWORD *)((char *)v9 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss + 8);
  *v16 = a8;
  v16[1] = a9;
  sub_1000DB26C(v17, v18);
  return v9;
}

uint64_t sub_10019DA90()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000DB26C(v0[6], v0[7]);
  v1 = (char *)v0 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model__horizontalSizeClass;
  v2 = sub_10000B4C8(&qword_1005515C0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000DB26C(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10019DB10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for EnableCloudLibraryView.Model(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_10019DB4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;

  v45 = a3;
  v5 = sub_10000B4C8(&qword_1005514E8);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_1005514F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000B4C8(&qword_1005514F8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v7 = static Axis.Set.vertical.getter(v12);
  v15 = sub_10000B4C8(&qword_100551500);
  v16 = sub_10019DE14(a1, a2, (uint64_t)&v7[*(int *)(v15 + 44)]);
  v17 = static Edge.Set.horizontal.getter(v16);
  KeyPath = swift_getKeyPath(&unk_10042FBC0);
  v19 = swift_getKeyPath(&unk_10042FBE8);
  v20 = swift_retain(a2);
  static Published.subscript.getter(&v46, v20, KeyPath, v19);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v19);
  v21 = 32.0;
  if (v46 != 2)
    v21 = 24.0;
  v22 = EdgeInsets.init(_all:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100011370((uint64_t)v7, (uint64_t)v10, &qword_1005514E8);
  v29 = &v10[*(int *)(v8 + 36)];
  *v29 = v17;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = sub_100011694((uint64_t)v7, &qword_1005514E8);
  v31 = static Edge.Set.bottom.getter(v30);
  v32 = swift_getKeyPath(&unk_10042FBC0);
  v33 = swift_getKeyPath(&unk_10042FBE8);
  v34 = swift_retain(a2);
  static Published.subscript.getter(&v46, v34, v32, v33);
  swift_release(a2);
  swift_release(v32);
  swift_release(v33);
  v35 = 36.0;
  if (v46 != 2)
    v35 = 8.0;
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_100011370((uint64_t)v10, (uint64_t)v14, &qword_1005514F0);
  v43 = &v14[*(int *)(v11 + 36)];
  *v43 = v31;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  sub_100011694((uint64_t)v10, &qword_1005514F0);
  return sub_100011530((uint64_t)v14, v45, &qword_1005514F8);
}

uint64_t sub_10019DE14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v6 = sub_10000B4C8(&qword_100551508);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = sub_10000B4C8(&qword_100551510);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v32 - v16;
  v18 = sub_10000B4C8(&qword_100551518);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v32 - v23;
  *(_QWORD *)v24 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v25 = sub_10000B4C8(&qword_100551520);
  v26 = sub_10019E0C0(a1, a2, (uint64_t)&v24[*(int *)(v25 + 44)]);
  *(_QWORD *)v17 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v27 = sub_10000B4C8(&qword_100551528);
  v28 = sub_10019E578(a1, a2, (uint64_t)&v17[*(int *)(v27 + 44)]);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v28);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v29 = sub_10000B4C8(&qword_100551530);
  sub_10019EB40(a1, (uint64_t)a2, &v11[*(int *)(v29 + 44)]);
  sub_100011370((uint64_t)v24, (uint64_t)v21, &qword_100551518);
  sub_100011370((uint64_t)v17, (uint64_t)v15, &qword_100551510);
  sub_100011370((uint64_t)v11, (uint64_t)v9, &qword_100551508);
  sub_100011370((uint64_t)v21, a3, &qword_100551518);
  v30 = sub_10000B4C8(&qword_100551538);
  sub_100011370((uint64_t)v15, a3 + *(int *)(v30 + 48), &qword_100551510);
  sub_100011370((uint64_t)v9, a3 + *(int *)(v30 + 64), &qword_100551508);
  sub_100011694((uint64_t)v11, &qword_100551508);
  sub_100011694((uint64_t)v17, &qword_100551510);
  sub_100011694((uint64_t)v24, &qword_100551518);
  sub_100011694((uint64_t)v9, &qword_100551508);
  sub_100011694((uint64_t)v15, &qword_100551510);
  return sub_100011694((uint64_t)v21, &qword_100551518);
}

uint64_t sub_10019E0C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;

  v53 = type metadata accessor for BorderedProminentButtonStyle(0);
  v54 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_100551540);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000B4C8(&qword_100551548);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v56 = (char *)&v41 - v17;
  v51 = static HorizontalAlignment.center.getter(v16);
  sub_10019F0C8(a2, (uint64_t)v63);
  v58 = v63[0];
  v44 = v63[1];
  v57 = v64;
  v59 = v65;
  v61 = v66;
  v50 = v67;
  v47 = v68;
  v46 = v69;
  v45 = v70;
  v60 = v71;
  v48 = v72;
  v49 = v73;
  v62 = Image.init(_:bundle:)(0xD000000000000011, 0x800000010044BBE0, 0);
  v18 = swift_allocObject(&unk_10050A1B8, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  swift_retain(a2);
  v19 = sub_10000B4C8(&qword_100551570);
  v20 = sub_10002F800(&qword_100551578, &qword_100551570, (uint64_t (*)(void))sub_1001A0C58, (uint64_t)&protocol witness table for _FlexFrameLayout);
  v21 = Button.init(action:label:)(sub_1001A0F74, v18, sub_10019F450, 0, v19, v20);
  BorderedProminentButtonStyle.init()(v21);
  v22 = sub_100012324(&qword_100551590, &qword_100551540, (const char *)&protocol conformance descriptor for Button<A>);
  v23 = sub_10001254C(&qword_100551598, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v55 = v15;
  v24 = v53;
  View.buttonStyle<A>(_:)(v7, v8, v53, v22, v23);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v24);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
  v43 = v12;
  v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v26 = v56;
  v42 = v11;
  v25(v56, v15, v11);
  v54 = *(_QWORD *)(v12 + 16);
  ((void (*)(char *, char *, uint64_t))v54)(v15, v26, v11);
  *(_QWORD *)a3 = v51;
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v27 = v58;
  v28 = v59;
  v29 = v44;
  *(_QWORD *)(a3 + 24) = v58;
  *(_QWORD *)(a3 + 32) = v29;
  LOBYTE(v26) = v57;
  *(_BYTE *)(a3 + 40) = v57;
  v31 = v60;
  v30 = v61;
  *(_QWORD *)(a3 + 48) = v28;
  *(_QWORD *)(a3 + 56) = v30;
  *(_BYTE *)(a3 + 64) = v50;
  v32 = v47;
  v33 = v46;
  *(_QWORD *)(a3 + 72) = v47;
  *(_QWORD *)(a3 + 80) = v33;
  LOBYTE(v19) = v45;
  *(_BYTE *)(a3 + 88) = v45;
  v34 = v48;
  *(_QWORD *)(a3 + 96) = v31;
  *(_QWORD *)(a3 + 104) = v34;
  *(_BYTE *)(a3 + 112) = v49;
  *(_QWORD *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 1;
  *(_QWORD *)(a3 + 136) = v62;
  *(_QWORD *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 1;
  v35 = a3 + *(int *)(sub_10000B4C8(&qword_1005515B8) + 96);
  v36 = v42;
  ((void (*)(uint64_t, char *, uint64_t))v54)(v35, v55, v42);
  sub_10002EBA0(v27, v29, (char)v26);
  swift_bridgeObjectRetain();
  v37 = v61;
  swift_retain(v61);
  sub_10002EBA0(v32, v33, v19);
  v38 = *(void (**)(char *, uint64_t))(v43 + 8);
  swift_bridgeObjectRetain();
  swift_retain(v34);
  v39 = v62;
  swift_retain(v62);
  v38(v56, v36);
  v38(v55, v36);
  swift_release(v39);
  sub_10001DA20(v58, v29, v57);
  swift_release(v37);
  swift_bridgeObjectRelease();
  sub_10001DA20(v32, v33, v19);
  swift_release(v34);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10019E578@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD v78[2];
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;

  v58 = type metadata accessor for BorderedProminentButtonStyle(0);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_100551540);
  v57 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10000B4C8(&qword_100551548);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10000B4C8(&qword_100551550);
  v13 = __chkstk_darwin(v70);
  v75 = (uint64_t)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v56 - v16;
  v18 = __chkstk_darwin(v15);
  v73 = (uint64_t)&v56 - v19;
  v69 = static HorizontalAlignment.center.getter(v18);
  sub_10019F0C8(a2, (uint64_t)v78);
  v61 = v78[0];
  v60 = v78[1];
  v76 = v79;
  v62 = v80;
  v77 = v81;
  v68 = v82;
  v65 = v83;
  v64 = v84;
  v63 = v85;
  v74 = v86;
  v66 = v87;
  v67 = v88;
  v20 = swift_allocObject(&unk_10050A190, 32, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  swift_retain(a2);
  v21 = sub_10000B4C8(&qword_100551570);
  v22 = sub_10002F800(&qword_100551578, &qword_100551570, (uint64_t (*)(void))sub_1001A0C58, (uint64_t)&protocol witness table for _FlexFrameLayout);
  v23 = Button.init(action:label:)(sub_1001A0F74, v20, sub_10019F450, 0, v21, v22);
  BorderedProminentButtonStyle.init()(v23);
  v24 = sub_100012324(&qword_100551590, &qword_100551540, (const char *)&protocol conformance descriptor for Button<A>);
  v25 = sub_10001254C(&qword_100551598, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v26 = v58;
  View.buttonStyle<A>(_:)(v7, v8, v58, v24, v25);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v26);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v10, v8);
  v28 = static Edge.Set.top.getter(v27);
  KeyPath = swift_getKeyPath(&unk_10042FBC0);
  v30 = swift_getKeyPath(&unk_10042FBE8);
  v31 = swift_retain(a2);
  static Published.subscript.getter(v78, v31, KeyPath, v30);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v30);
  v32 = 16.0;
  if (v78[0] == 2)
    v32 = 24.0;
  v33 = EdgeInsets.init(_all:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v40 = v71;
  v41 = v72;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v17, v12, v72);
  v42 = &v17[*(int *)(v70 + 36)];
  *v42 = v28;
  *((double *)v42 + 1) = v33;
  *((_QWORD *)v42 + 2) = v35;
  *((_QWORD *)v42 + 3) = v37;
  *((_QWORD *)v42 + 4) = v39;
  v42[40] = 0;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  v43 = v73;
  sub_100011530((uint64_t)v17, v73, &qword_100551550);
  v44 = v43;
  v45 = v75;
  sub_100011370(v44, v75, &qword_100551550);
  *(_QWORD *)a3 = v69;
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v46 = v61;
  v47 = v60;
  *(_QWORD *)(a3 + 24) = v61;
  *(_QWORD *)(a3 + 32) = v47;
  *(_BYTE *)(a3 + 40) = v76;
  v48 = v77;
  *(_QWORD *)(a3 + 48) = v62;
  *(_QWORD *)(a3 + 56) = v48;
  *(_BYTE *)(a3 + 64) = v68;
  v49 = v65;
  v50 = v64;
  *(_QWORD *)(a3 + 72) = v65;
  *(_QWORD *)(a3 + 80) = v50;
  v51 = v63;
  *(_BYTE *)(a3 + 88) = v63;
  v52 = v66;
  *(_QWORD *)(a3 + 96) = v74;
  *(_QWORD *)(a3 + 104) = v52;
  *(_BYTE *)(a3 + 112) = v67;
  *(_QWORD *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 1;
  v53 = sub_10000B4C8(&qword_1005515B0);
  sub_100011370(v45, a3 + *(int *)(v53 + 64), &qword_100551550);
  LOBYTE(v45) = v76;
  sub_10002EBA0(v46, v47, v76);
  swift_bridgeObjectRetain();
  v54 = v77;
  swift_retain(v77);
  sub_10002EBA0(v49, v50, v51);
  swift_bridgeObjectRetain();
  swift_retain(v52);
  sub_100011694(v73, &qword_100551550);
  sub_100011694(v75, &qword_100551550);
  sub_10001DA20(v46, v47, v45);
  swift_release(v54);
  swift_bridgeObjectRelease();
  sub_10001DA20(v49, v50, v51);
  swift_release(v52);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10019EB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79[16];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v78 = a3;
  v5 = type metadata accessor for BorderedProminentButtonStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  v70 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_100551540);
  v10 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  v68 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000B4C8(&qword_100551548);
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  __chkstk_darwin(v13);
  v66 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10000B4C8(&qword_100551550);
  v15 = __chkstk_darwin(v74);
  v77 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v65 - v18;
  __chkstk_darwin(v17);
  v73 = (uint64_t)&v65 - v20;
  v21 = sub_10000B4C8(&qword_100551558);
  v72 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v71 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v65 - v25;
  v27 = static Axis.Set.vertical.getter(v24);
  v80 = a1;
  v81 = a2;
  v28 = sub_10000B4C8(&qword_100551560);
  v29 = sub_100012324(&qword_100551568, &qword_100551560, (const char *)&protocol conformance descriptor for VStack<A>);
  ScrollView.init(_:showsIndicators:content:)(v27, 1, sub_1001A0C24, v79, v28, v29);
  v30 = swift_allocObject(&unk_10050A168, 32, 7);
  *(_QWORD *)(v30 + 16) = a1;
  *(_QWORD *)(v30 + 24) = a2;
  swift_retain(a2);
  v31 = sub_10000B4C8(&qword_100551570);
  v32 = sub_10002F800(&qword_100551578, &qword_100551570, (uint64_t (*)(void))sub_1001A0C58, (uint64_t)&protocol witness table for _FlexFrameLayout);
  v33 = Button.init(action:label:)(sub_1001A0C50, v30, sub_10019F450, 0, v31, v32);
  BorderedProminentButtonStyle.init()(v33);
  v34 = sub_100012324(&qword_100551590, &qword_100551540, (const char *)&protocol conformance descriptor for Button<A>);
  v35 = sub_10001254C(&qword_100551598, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v36 = v66;
  v37 = v67;
  v38 = v69;
  View.buttonStyle<A>(_:)(v8, v67, v69, v34, v35);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v8, v38);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v12, v37);
  v40 = static Edge.Set.top.getter(v39);
  KeyPath = swift_getKeyPath(&unk_10042FBC0);
  v42 = swift_getKeyPath(&unk_10042FBE8);
  v43 = swift_retain(a2);
  static Published.subscript.getter(&v82, v43, KeyPath, v42);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v42);
  v44 = 16.0;
  if (v82 == 2)
    v44 = 24.0;
  v45 = EdgeInsets.init(_all:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v53 = v75;
  v52 = v76;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v19, v36, v76);
  v54 = &v19[*(int *)(v74 + 36)];
  *v54 = v40;
  *((double *)v54 + 1) = v45;
  *((_QWORD *)v54 + 2) = v47;
  *((_QWORD *)v54 + 3) = v49;
  *((_QWORD *)v54 + 4) = v51;
  v54[40] = 0;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v52);
  v55 = v73;
  sub_100011530((uint64_t)v19, v73, &qword_100551550);
  v56 = v71;
  v57 = v72;
  v58 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v58(v71, v26, v21);
  v59 = v77;
  sub_100011370(v55, v77, &qword_100551550);
  v60 = v78;
  v58(v78, v56, v21);
  v61 = sub_10000B4C8((uint64_t *)&unk_1005515A0);
  v62 = &v60[*(int *)(v61 + 48)];
  *(_QWORD *)v62 = 0;
  v62[8] = 1;
  sub_100011370(v59, (uint64_t)&v60[*(int *)(v61 + 64)], &qword_100551550);
  sub_100011694(v55, &qword_100551550);
  v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63(v26, v21);
  sub_100011694(v59, &qword_100551550);
  return ((uint64_t (*)(char *, uint64_t))v63)(v56, v21);
}

__n128 sub_10019F030@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __n128 v16;
  char v17;
  __int128 v18;
  char v19;
  __int128 v20;
  char v21;

  v5 = static HorizontalAlignment.center.getter(a1);
  sub_10019F0C8(a2, (uint64_t)&v14);
  v6 = v15;
  v7 = v17;
  v8 = v19;
  v9 = v21;
  result = v16;
  v11 = v20;
  v12 = v14;
  v13 = v18;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = 0x4020000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = v12;
  *(_BYTE *)(a3 + 40) = v6;
  *(__n128 *)(a3 + 48) = result;
  *(_BYTE *)(a3 + 64) = v7;
  *(_OWORD *)(a3 + 72) = v13;
  *(_BYTE *)(a3 + 88) = v8;
  *(_OWORD *)(a3 + 96) = v11;
  *(_BYTE *)(a3 + 112) = v9;
  return result;
}

uint64_t sub_10019F0C8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t KeyPath;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = a1[3];
  v57 = a1[2];
  v58 = v3;
  v50 = sub_1000AE4D8();
  swift_bridgeObjectRetain();
  v4 = Text.init<A>(_:)(&v57, &type metadata for String, v50);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Font.largeTitle.getter();
  v12 = Text.font(_:)(v11, v4, v6, v10, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release(v11);
  v19 = v16 & 1;
  sub_10001DA20(v4, v6, v10);
  v20 = swift_bridgeObjectRelease();
  v21 = static Font.Weight.bold.getter(v20);
  v22 = Text.fontWeight(_:)(*(_QWORD *)&v21, 0, v12, v14, v19, v18);
  v54 = v23;
  v55 = v22;
  v56 = v24;
  v53 = v25 & 1;
  sub_10001DA20(v12, v14, v19);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10042FC08);
  v26 = a1[5];
  v57 = a1[4];
  v58 = v26;
  swift_bridgeObjectRetain();
  v27 = Text.init<A>(_:)(&v57, &type metadata for String, v50);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.title3.getter();
  v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  v37 = v36;
  LOBYTE(v10) = v38;
  v40 = v39;
  swift_release(v34);
  sub_10001DA20(v27, v29, v33);
  v41 = swift_bridgeObjectRelease();
  LODWORD(v57) = static HierarchicalShapeStyle.primary.getter(v41);
  v42 = Text.foregroundStyle<A>(_:)(&v57, v35, v37, v10 & 1, v40, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v44 = v43;
  v46 = v45;
  LOBYTE(v33) = v47 & 1;
  sub_10001DA20(v35, v37, v10 & 1);
  swift_bridgeObjectRelease();
  v48 = swift_getKeyPath(&unk_10042FC08);
  LOBYTE(v57) = v53;
  *(_QWORD *)a2 = v55;
  *(_QWORD *)(a2 + 8) = v54;
  *(_BYTE *)(a2 + 16) = v53;
  *(_QWORD *)(a2 + 24) = v56;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v42;
  *(_QWORD *)(a2 + 56) = v44;
  *(_BYTE *)(a2 + 64) = v33;
  *(_QWORD *)(a2 + 72) = v46;
  *(_QWORD *)(a2 + 80) = v48;
  *(_BYTE *)(a2 + 88) = 1;
  sub_10002EBA0(v55, v54, v53);
  swift_bridgeObjectRetain();
  swift_retain(KeyPath);
  sub_10002EBA0(v42, v44, v33);
  swift_bridgeObjectRetain();
  swift_retain(v48);
  sub_10001DA20(v42, v44, v33);
  swift_release(v48);
  swift_bridgeObjectRelease();
  sub_10001DA20(v55, v54, v57);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10019F398(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (qword_10054BC28 != -1)
    swift_once(&qword_10054BC28, sub_100199910);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  sub_1000DB0D8(v3, v4);
  CloudLibrary.StatusObserver.enableCloudLibrary(completion:)(v3, v4);
  result = sub_1000DB26C(v3, v4);
  v6 = a2 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss;
  v7 = *(void (**)(uint64_t))(a2 + OBJC_IVAR____TtCV9MusicCore22EnableCloudLibraryView5Model_dismiss);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = swift_retain(v8);
    v7(v9);
    return sub_1000DB26C((uint64_t)v7, v8);
  }
  return result;
}

double sub_10019F450@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double result;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  if (qword_10054BC20 != -1)
    swift_once(&qword_10054BC20, sub_100199744);
  v30[0] = static CloudLibrary.EnablementContext.action;
  v2 = sub_1000AE4D8();
  swift_bridgeObjectRetain();
  v3 = Text.init<A>(_:)(v30, &type metadata for String, v2);
  v5 = v4;
  v7 = v6 & 1;
  v8 = Text.bold()();
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  sub_10001DA20(v3, v5, v7);
  v15 = swift_bridgeObjectRelease();
  LOBYTE(v3) = static Edge.Set.vertical.getter(v15);
  v16 = EdgeInsets.init(_all:)(8.0);
  v41 = v8;
  v42 = v10;
  v43 = v14;
  v44 = v12;
  v45 = v3;
  v46 = v16;
  v47 = v17;
  v48 = v18;
  v49 = v19;
  v50 = 0;
  v21 = static Alignment.center.getter(v20);
  sub_10019F600(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v30, 0.0, 1, 0.0, 1, v21, v22);
  sub_10001DA20(v8, v10, v14);
  swift_bridgeObjectRelease();
  v23 = v38;
  a1[8] = v37;
  a1[9] = v23;
  v24 = v40;
  a1[10] = v39;
  a1[11] = v24;
  v25 = v34;
  a1[4] = v33;
  a1[5] = v25;
  v26 = v36;
  a1[6] = v35;
  a1[7] = v26;
  v27 = v30[1];
  *a1 = v30[0];
  a1[1] = v27;
  result = *(double *)&v31;
  v29 = v32;
  a1[2] = v31;
  a1[3] = v29;
  return result;
}

uint64_t sub_10019F600@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v15 + 57);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v45[5];
  a9[9] = v45[4];
  a9[10] = v36;
  a9[11] = v45[6];
  v37 = v45[1];
  a9[5] = v45[0];
  a9[6] = v37;
  v38 = v45[3];
  a9[7] = v45[2];
  a9[8] = v38;
  return sub_10004FFA4((uint64_t)v15);
}

uint64_t sub_10019F7AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10019DB4C(*(_QWORD *)v1, *(_QWORD **)(v1 + 8), a1);
}

uint64_t sub_10019F7B4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_1005510F0);
  sub_10000D78C(v0, (uint64_t)qword_1005510F0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x62694C64756F6C43, 0xEC00000079726172);
}

uint64_t sub_10019F830@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10042FBC0);
  v5 = swift_getKeyPath(&unk_10042FBE8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10019F8AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10042FBC0);
  v5 = swift_getKeyPath(&unk_10042FBE8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t _s9MusicCore12CloudLibraryO6StatusO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
    {
      if ((a2 & 0xC0000000) == 0x40000000)
        return (((a1 & 1) == 0) ^ a2) & (*((float *)&a1 + 1) == *((float *)&a2 + 1));
      return 0;
    }
    return ((uint64_t (*)(void))((char *)&loc_10019F998 + 4 * byte_10042F71E[a1 - 0x80000000]))();
  }
  else
  {
    if ((a2 & 0xC0000000) != 0)
      return 0;
    return a1 == a2;
  }
}

uint64_t sub_10019F9D0(uint64_t a1, uint64_t a2)
{
  if (a2 != 2147483650)
    JUMPOUT(0x10019F970);
  return 1;
}

uint64_t sub_10019F9E8(uint64_t a1, uint64_t a2)
{
  if (a2 != 2147483651)
    JUMPOUT(0x10019F970);
  return 1;
}

uint64_t sub_10019FA00(uint64_t a1, uint64_t a2)
{
  if (a2 != 2147483652)
    JUMPOUT(0x10019F970);
  return 1;
}

uint64_t _s9MusicCore12CloudLibraryO11FailureTypeO8rawValueAESgSi_tcfC_0(unint64_t a1)
{
  if (a1 > 0xFFFFFFFFFFFFFFF9)
    return ~(_DWORD)a1;
  else
    return 6;
}

uint64_t sub_10019FA30()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019FA54(uint64_t a1)
{
  uint64_t v1;

  return sub_10019ACFC(a1, v1);
}

uint64_t sub_10019FA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019FA6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10019FA74(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_10019FA98(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit(a2, a1);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_10019FAD0(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit(a2, a1);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t sub_10019FB08(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

id sub_10019FB2C(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

void sub_10019FB3C(id a1)
{
  if ((unint64_t)a1 >= 2)

}

void _s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  id v46;
  void **aBlock;
  uint64_t v48;
  void (*v49)(uint64_t, void *);
  void *v50;
  void *v51;
  uint64_t v52;

  CloudLibrary.EnablementContext.title.getter(a1);
  v10 = v9;
  v12 = v11;
  CloudLibrary.EnablementContext.message.getter(a1);
  v14 = v13;
  v16 = v15;
  if (a3)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v19 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v17, v18, 1);

    if (qword_10054C290 != -1)
      swift_once(&qword_10054C290, sub_10028CD9C);
    v20 = qword_100562370;
    v21 = swift_allocObject(&unk_10050A2D0, 32, 7);
    *(_QWORD *)(v21 + 16) = a4;
    *(_QWORD *)(v21 + 24) = a5;
    sub_1000DB0D8(a4, a5);
    swift_bridgeObjectRetain();
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v51 = sub_1001A0D88;
    v52 = v21;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100133CF8;
    v50 = &unk_10050A2E8;
    v23 = _Block_copy(&aBlock);
    swift_release(v52);
    v24 = (void *)objc_opt_self(UIAlertAction);
    v25 = objc_msgSend(v24, "actionWithTitle:style:handler:", v22, 1, v23);
    _Block_release(v23);

    objc_msgSend(v19, "addAction:", v25);
    if (qword_10054BC20 != -1)
      swift_once(&qword_10054BC20, sub_100199744);
    v26 = unk_100561810;
    v27 = swift_allocObject(&unk_10050A320, 32, 7);
    *(_QWORD *)(v27 + 16) = a4;
    *(_QWORD *)(v27 + 24) = a5;
    sub_1000DB0D8(a4, a5);
    swift_bridgeObjectRetain();
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    v51 = sub_1001A0DB8;
    v52 = v27;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100133CF8;
    v50 = &unk_10050A338;
    v29 = _Block_copy(&aBlock);
    v30 = objc_msgSend(v24, "actionWithTitle:style:handler:", v28, 0, v29, swift_release(v52).n128_f64[0]);
    _Block_release(v29);

    objc_msgSend(v19, "addAction:", v30);
    if ((unint64_t)a3 >= 2)
    {
      v31 = a3;
      objc_msgSend(v19, "setPreferredStyle:", 0);
      v32 = v31;
      objc_msgSend(v32, "bounds");
      v34 = v33;
      v36 = v35;
      v38 = v37;
      v40 = v39;
      v41 = objc_msgSend(v19, "popoverPresentationController");
      if (v41)
      {
        v42 = v41;
        v43 = v32;
        objc_msgSend(v42, "setSourceView:", v43);
        objc_msgSend(v42, "setSourceRect:", v34, v36, v38, v40);

        sub_10019FB3C(a3);
        sub_10019FB3C(a3);

      }
      else
      {
        sub_10019FB3C(a3);
        sub_10019FB3C(a3);
      }
    }
    PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v19, 1, (id)0xF, (void **)((unint64_t)a3 > 1), 0, 0);

  }
  else
  {
    v44 = objc_allocWithZone((Class)type metadata accessor for CloudLibraryViewController(0));
    sub_1000DB0D8(a4, a5);
    v45 = sub_10019D174(v10, v12, v14, v16, a4, a5);
    v46 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v45);
    objc_msgSend(v46, "setModalPresentationStyle:", 2);
    objc_msgSend(v46, "setModalPresentationCapturesStatusBarAppearance:", 1);
    PresentationSource.present(_:wantsAutomaticModalPresentationStyle:permittedArrowDirections:animated:completion:)(v46, 1, (id)0xF, (void **)1, 0, 0);

  }
}

void _s9MusicCore12CloudLibraryO07presentcD15EnablerIfNeeded7context18presentationSource5style05cloudD17EnabledCompletionyAC17EnablementContextO_AA012PresentationK0VAC0R5StyleOySbcSgtFZ_0(char a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  if (qword_10054BA98 != -1)
    swift_once(&qword_10054BA98, sub_100154564);
  v7 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_10042FC38);
  v9 = swift_getKeyPath(&unk_10042FC60);
  static Published.subscript.getter(&v21, v7, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  v10 = BYTE2(v21);
  v11 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v10 & 1) != 0)
  {
    if (!a4)
      return;
    v12 = 1;
LABEL_9:
    a4(v12);
    return;
  }
  v13 = static ApplicationCapabilities.Controller.shared;
  v14 = swift_getKeyPath(&unk_10042FC38);
  v15 = swift_getKeyPath(&unk_10042FC60);
  static Published.subscript.getter(&v21, v13, v14, v15);
  swift_release(v14);
  swift_release(v15);
  v16 = v22;
  v17 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v16 & 0x100) == 0)
  {
    if (!a4)
      return;
    v12 = 0;
    goto LABEL_9;
  }
  _s9MusicCore12CloudLibraryO07presentcD7Enabler7context18presentationSource5style10completionyAC17EnablementContextO_AA012PresentationI0VAC0N5StyleOySbcSgtFZ_0(a1, a2, a3, (uint64_t)a4, a5);
}

double sub_1001A0200(uint64_t a1)
{
  uint64_t v1;

  return sub_10019D070(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_10050A2A8, (uint64_t)sub_1001A0D78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_s9MusicCore12CloudLibraryO07presentcD15EnablerIfNeeded7context18presentationSource5style05cloudD17EnabledCompletionyAC17EnablementContextO_AA012PresentationK0VAC0R5StyleOySbcSgtFZ_0);
}

unint64_t sub_1001A0238()
{
  unint64_t result;

  result = qword_100551140;
  if (!qword_100551140)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CloudLibrary.FailureType, &type metadata for CloudLibrary.FailureType);
    atomic_store(result, (unint64_t *)&qword_100551140);
  }
  return result;
}

unint64_t sub_1001A0280()
{
  unint64_t result;

  result = qword_100551148;
  if (!qword_100551148)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CloudLibrary.EnablementContext, &type metadata for CloudLibrary.EnablementContext);
    atomic_store(result, (unint64_t *)&qword_100551148);
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary()
{
  return &type metadata for CloudLibrary;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.UpdateContext(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.UpdateContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.UpdateContext()
{
  return &type metadata for CloudLibrary.UpdateContext;
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.FailureType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001A03CC + 4 * byte_10042F728[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001A0400 + 4 * byte_10042F723[v4]))();
}

uint64_t sub_1001A0400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A0408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A0410);
  return result;
}

uint64_t sub_1001A041C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A0424);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001A0428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A0430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.FailureType()
{
  return &type metadata for CloudLibrary.FailureType;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.Status(uint64_t a1, unsigned int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 > 0x1FFFFFFD && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 536870910);
  if ((((*(_DWORD *)a1 >> 1) & 0x1FFFFFFC | (*(_DWORD *)a1 >> 30)) ^ 0x1FFFFFFFu) >= 0x1FFFFFFD)
    v3 = -1;
  else
    v3 = ((*(_DWORD *)a1 >> 1) & 0x1FFFFFFC | (*(_DWORD *)a1 >> 30)) ^ 0x1FFFFFFF;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.Status(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1FFFFFFD)
  {
    *(_QWORD *)result = a2 - 536870910;
    if (a3 >= 0x1FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x1FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 8 * ((-a2 >> 2) & 0x7FFFFFF) - (a2 << 30);
  }
  return result;
}

uint64_t sub_1001A050C(_QWORD *a1)
{
  if ((int)*a1 >= 0)
    return *a1 >> 30;
  else
    return ((*a1 >> 29) & 0xFFFFFFF8 | *a1 & 7) + 2;
}

_QWORD *sub_1001A052C(_QWORD *result)
{
  *result &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

unint64_t *sub_1001A053C(unint64_t *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 0xFFFFFFFF00000007 | (a2 << 30);
  else
    *result = ((a2 - 2) | ((unint64_t)(a2 - 2) << 29)) & 0xFFFFFFFF00000007 | 0x80000000;
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.Status()
{
  return &type metadata for CloudLibrary.Status;
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.EnablementContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001A05CC + 4 * byte_10042F732[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001A0600 + 4 * byte_10042F72D[v4]))();
}

uint64_t sub_1001A0600(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A0608(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A0610);
  return result;
}

uint64_t sub_1001A061C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A0624);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1001A0628(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A0630(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.EnablementContext()
{
  return &type metadata for CloudLibrary.EnablementContext;
}

uint64_t sub_1001A064C()
{
  return type metadata accessor for CloudLibrary.StatusObserver(0);
}

uint64_t type metadata accessor for CloudLibrary.StatusObserver(uint64_t a1)
{
  return sub_10001133C(a1, (uint64_t *)&unk_100551178, (uint64_t)&nominal type descriptor for CloudLibrary.StatusObserver);
}

void sub_1001A0668(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_10042FA00;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = &unk_10042FA18;
  v4[6] = &unk_10042FA18;
  sub_1001A0714();
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_10042FA30;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

void sub_1001A0714()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100551188)
  {
    v0 = type metadata accessor for Published(0, &type metadata for CloudLibrary.Status);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100551188);
  }
}

_QWORD *_s13InsertCommandV8LocationOwCP(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void _s13InsertCommandV8LocationOwxx(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **_s13InsertCommandV8LocationOwca(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **_s13InsertCommandV8LocationOwta(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.PresentationStyle(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.PresentationStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.PresentationStyle()
{
  return &type metadata for CloudLibrary.PresentationStyle;
}

uint64_t type metadata accessor for CloudLibraryViewController(uint64_t a1)
{
  return sub_10001133C(a1, (uint64_t *)&unk_100551370, (uint64_t)&nominal type descriptor for CloudLibraryViewController);
}

uint64_t sub_1001A096C(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = &unk_10042FA18;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + qword_100551360);
}

uint64_t sub_1001A09C0()
{
  return type metadata accessor for CloudLibraryViewController(0);
}

uint64_t sub_1001A09C8()
{
  return type metadata accessor for EnableCloudLibraryView.Model(0);
}

uint64_t type metadata accessor for EnableCloudLibraryView.Model(uint64_t a1)
{
  return sub_10001133C(a1, (uint64_t *)&unk_1005513F0, (uint64_t)&nominal type descriptor for EnableCloudLibraryView.Model);
}

void sub_1001A09E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10042FAC8;
  v4[1] = &unk_10042FAC8;
  v4[2] = &unk_10042FAE0;
  sub_1001A0A68(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_10042FAE0;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1001A0A68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100551400)
  {
    type metadata accessor for UIUserInterfaceSizeClass(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100551400);
  }
}

ValueMetadata *type metadata accessor for EnableCloudLibraryView()
{
  return &type metadata for EnableCloudLibraryView;
}

uint64_t initializeWithCopy for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit(a1, a2);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit(a1, a2);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for CloudLibrary.StatusObserver.InternalObserver(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudLibrary.StatusObserver.InternalObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudLibrary.StatusObserver.InternalObserver()
{
  return &type metadata for CloudLibrary.StatusObserver.InternalObserver;
}

uint64_t sub_1001A0C0C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100485E98, 1);
}

double sub_1001A0C24@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10019F030(*(_QWORD *)(v1 + 16), (_QWORD *)*(_QWORD *)(v1 + 24), a1).n128_u64[0];
  return result;
}

uint64_t sub_1001A0C2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A0C50()
{
  uint64_t v0;

  return sub_10019F398(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1001A0C58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100551580;
  if (!qword_100551580)
  {
    v1 = sub_100011650(&qword_100551588);
    v2[0] = &protocol witness table for Text;
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100551580);
  }
  return result;
}

uint64_t sub_1001A0CBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001A0CE4(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1001A0D08()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001A0D2C(uint64_t a1)
{
  uint64_t v1;

  sub_10019D6BC(a1, v1);
}

void sub_1001A0D34()
{
  uint64_t v0;

  sub_10019C318(v0);
}

uint64_t sub_1001A0D3C(float a1)
{
  uint64_t v1;

  return sub_10019C3E8(v1, a1);
}

uint64_t sub_1001A0D44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 28, 7);
}

void sub_1001A0D68()
{
  uint64_t v0;

  sub_10019C628(*(_QWORD *)(v0 + 16), *(float *)(v0 + 24));
}

uint64_t sub_1001A0D88()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(0);
  return result;
}

void sub_1001A0DB8(uint64_t a1)
{
  uint64_t v1;

  sub_10019CDDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001A0DC0()
{
  uint64_t v0;

  sub_10019D410(v0);
}

uint64_t sub_1001A0DC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A0DF4()
{
  uint64_t v0;

  return sub_10019B178(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001A0DFC()
{
  uint64_t v0;

  return sub_100199DE4(v0);
}

double sub_1001A0E04(uint64_t a1)
{
  uint64_t v1;

  return sub_10019A60C(a1, v1);
}

uint64_t sub_1001A0E0C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10019A24C(a1, a2, v2);
}

uint64_t sub_1001A0E14()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001A0E48()
{
  uint64_t v0;

  sub_10019A478(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001A0E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000B4C8(&qword_100551610);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001A0EBC()
{
  return sub_10002F800(&qword_100551640, &qword_1005514F8, (uint64_t (*)(void))sub_1001A0EF0, (uint64_t)&protocol witness table for _PaddingLayout);
}

unint64_t sub_1001A0EF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100551648;
  if (!qword_100551648)
  {
    v1 = sub_100011650(&qword_1005514F0);
    v2[0] = sub_100012324((unint64_t *)&unk_100551650, &qword_1005514E8, (const char *)&protocol conformance descriptor for ViewThatFits<A>);
    v2[1] = &protocol witness table for _PaddingLayout;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100551648);
  }
  return result;
}

uint64_t sub_1001A0FCC(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001A10BC, 0, 0);
}

uint64_t sub_1001A10BC()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050ADC0, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001A195C;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A195C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001A19C0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A19C0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050ADE8, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_1005518F8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A1D70(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001A1E60, 0, 0);
}

uint64_t sub_1001A1E60()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050AE38, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001A2700;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A2700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001A2764;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A2764()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050AE60, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_100551918, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A2B14(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001A2C04, 0, 0);
}

uint64_t sub_1001A2C04()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050B018, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001A34A4;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A34A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001A3508;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A3508()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050B040, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_100551998, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A38B8(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v3 + 936) = v2;
  *(_BYTE *)(v3 + 1056) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 960) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 968) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 976) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  v10 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v10;
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_1001A39AC, 0, 0);
}

uint64_t sub_1001A39AC()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  _OWORD v90[4];
  uint64_t v91;
  uint64_t (*v92)(_QWORD);
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1056) & 1) != 0)
    goto LABEL_3;
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_OWORD *)(v2 + 48);
  v90[2] = *(_OWORD *)(v2 + 32);
  v90[3] = v3;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v90[0] = *(_OWORD *)v2;
  v90[1] = v5;
  v96 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t (**)(_QWORD))(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v94 = *(_OWORD *)(v0 + 104);
  v95 = *(_OWORD *)(v0 + 120);
  v91 = v4;
  v92 = v6;
  v93 = v7;
  v8 = v6(v90);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v10 = *(_QWORD *)(v0 + 1000);
    v11 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 960);
    v13 = sub_10000D78C(v12, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 1008) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1016) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 224) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 256) = v16;
    v17 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 144) = *v1;
    *(_OWORD *)(v0 + 160) = v17;
    v18 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 192) = v18;
    v19 = sub_1000F5A04((_QWORD *)(v0 + 144));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    if (v22)
    {
      v87 = *(_QWORD *)(v0 + 1000);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v90[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 208));
      *(_QWORD *)(v26 + 4) = sub_1000BA30C(v28, v29, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000F5624((_QWORD *)(v0 + 144));
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v87, v25);
    }
    else
    {
      sub_1000F5624((_QWORD *)(v0 + 144));

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1024) = v30;
    v31 = *(_QWORD *)(v0 + 952);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 104);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 928) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 920) = v38;
    v39 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 352) = v39;
    v40 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 384) = v40;
    v41 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 272) = *v1;
    *(_OWORD *)(v0 + 288) = v41;
    v42 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 320) = v42;
    v43 = (_OWORD *)swift_allocObject(&unk_10050AFA0, 144, 7);
    v44 = *(_OWORD *)(v0 + 96);
    v43[5] = *(_OWORD *)(v0 + 80);
    v43[6] = v44;
    v45 = *(_OWORD *)(v0 + 128);
    v43[7] = *(_OWORD *)(v0 + 112);
    v43[8] = v45;
    v46 = *(_OWORD *)(v0 + 32);
    v43[1] = *v1;
    v43[2] = v46;
    v47 = *(_OWORD *)(v0 + 64);
    v43[3] = *(_OWORD *)(v0 + 48);
    v43[4] = v47;
    sub_1000F5A04((_QWORD *)(v0 + 272));
    v48 = sub_10000B4C8(&qword_10054D4E0);
    v49 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1032) = Publisher<>.sink(receiveValue:)(sub_1001C6404, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 920));
    v50 = *(int **)(v0 + 112);
    v88 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1040) = v51;
    *v51 = v0;
    v51[1] = sub_1001A40CC;
    return v88();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 976);
    v56 = *(_QWORD *)(v0 + 968);
    v57 = *(_QWORD *)(v0 + 960);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 480) = v59;
    v60 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 512) = v60;
    v61 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 400) = *v1;
    *(_OWORD *)(v0 + 416) = v61;
    v62 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 448) = v62;
    sub_1000F5A04((_QWORD *)(v0 + 400));
    sub_1000CFA98(v53, v54);
    sub_1000F5A04((_QWORD *)(v0 + 400));
    v63 = sub_1000CFA98(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 976);
    v68 = *(_QWORD *)(v0 + 968);
    v69 = *(_QWORD *)(v0 + 960);
    if (v66)
    {
      v89 = *(_QWORD *)(v0 + 960);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v90[0] = v71;
      *(_DWORD *)v70 = 136446466;
      sub_1000F5624((_QWORD *)(v0 + 400));
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
      v86 = v67;
      *(_QWORD *)(v70 + 4) = sub_1000BA30C(v72, v73, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000F5624((_QWORD *)(v0 + 400));
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_1000B5000(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_1000BA30C(v74, v76, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v86, v89);
    }
    else
    {
      sub_1000F5624((_QWORD *)(v0 + 400));
      sub_1000F5624((_QWORD *)(v0 + 400));
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_1000CFAAC();
    v78 = swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v79 = v53;
    v79[1] = v54;
    v80 = *(_QWORD *)(v0 + 1000);
    v81 = *(_QWORD *)(v0 + 992);
    v82 = *(_QWORD *)(v0 + 984);
    v83 = *(_QWORD *)(v0 + 976);
    v84 = *(_QWORD *)(v0 + 952);
    v85 = *(_QWORD *)(v0 + 944);
    swift_willThrow(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A40CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1040);
  *(_QWORD *)(*(_QWORD *)v1 + 1048) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001A4414;
  else
    v3 = sub_1001A4130;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A4130()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 960);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 864) = v6;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 896) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 800) = v8;
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 832) = v9;
  v10 = sub_1000F5A04((_QWORD *)(v0 + 784));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 992);
  v16 = *(_QWORD *)(v0 + 960);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 848));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_1000F5624((_QWORD *)(v0 + 784));
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_1000F5624((_QWORD *)(v0 + 784));

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1000);
  v23 = *(_QWORD *)(v0 + 992);
  v24 = *(_QWORD *)(v0 + 984);
  v25 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 952);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 608) = v28;
  v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 640) = v29;
  v30 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 528) = *v1;
  *(_OWORD *)(v0 + 544) = v30;
  v31 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10050AFC8, 160, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v33;
  v34 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v34;
  v35 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v35;
  v36 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v36;
  sub_1000F5A04((_QWORD *)(v0 + 528));
  v37 = sub_1000CEC3C(v26, (uint64_t)&unk_100551978, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100011694(v26, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A4414()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 960);
  v6 = swift_release(*(_QWORD *)(v0 + 1032));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 736) = v7;
  v8 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 768) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 672) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 704) = v10;
  sub_1000F5A04((_QWORD *)(v0 + 656));
  swift_errorRetain(v1);
  sub_1000F5A04((_QWORD *)(v0 + 656));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1048);
    v35 = *(_QWORD *)(v0 + 984);
    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1024);
    v15 = *(_QWORD *)(v0 + 960);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v37[0] = v17;
    *(_DWORD *)v16 = 136446466;
    sub_1000F5624((_QWORD *)(v0 + 656));
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 720));
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, v37);
    swift_bridgeObjectRelease();
    sub_1000F5624((_QWORD *)(v0 + 656));
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 912) = v14;
    swift_errorRetain(v14);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 912, v20);
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(v21, v22, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v23 = v36(v35, v15);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 1048);
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1024);
    v26 = *(_QWORD *)(v0 + 984);
    v27 = *(_QWORD *)(v0 + 960);
    sub_1000F5624((_QWORD *)(v0 + 656));
    sub_1000F5624((_QWORD *)(v0 + 656));
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v23 = v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 1000);
  v29 = *(_QWORD *)(v0 + 992);
  v30 = *(_QWORD *)(v0 + 984);
  v31 = *(_QWORD *)(v0 + 976);
  v32 = *(_QWORD *)(v0 + 952);
  v33 = *(_QWORD *)(v0 + 944);
  swift_willThrow(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A46C0(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v3 + 936) = v2;
  *(_BYTE *)(v3 + 1056) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 960) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 968) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 976) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  v10 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v10;
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_1001A47B4, 0, 0);
}

uint64_t sub_1001A47B4()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  uint64_t v90;
  _OWORD v91[4];
  uint64_t v92;
  uint64_t (*v93)(_QWORD);
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1056) & 1) != 0)
    goto LABEL_3;
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_OWORD *)(v2 + 48);
  v91[2] = *(_OWORD *)(v2 + 32);
  v91[3] = v3;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v91[0] = *(_OWORD *)v2;
  v91[1] = v5;
  v97 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t (**)(_QWORD))(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v95 = *(_OWORD *)(v0 + 104);
  v96 = *(_OWORD *)(v0 + 120);
  v92 = v4;
  v93 = v6;
  v94 = v7;
  v8 = v6(v91);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v10 = *(_QWORD *)(v0 + 1000);
    v11 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 960);
    v13 = sub_10000D78C(v12, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 1008) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1016) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 224) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 256) = v16;
    v17 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 144) = *v1;
    *(_OWORD *)(v0 + 160) = v17;
    v18 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 192) = v18;
    v19 = sub_1000F57D4((_QWORD *)(v0 + 144));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    if (v22)
    {
      v88 = *(_QWORD *)(v0 + 1000);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v91[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 208));
      *(_QWORD *)(v26 + 4) = sub_1000BA30C(v28, v29, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000F56AC((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v88, v25);
    }
    else
    {
      sub_1000F56AC((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_bridgeObjectRelease);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1024) = v30;
    v31 = *(_QWORD *)(v0 + 952);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 104);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 928) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 920) = v38;
    v39 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 352) = v39;
    v40 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 384) = v40;
    v41 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 272) = *v1;
    *(_OWORD *)(v0 + 288) = v41;
    v42 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 320) = v42;
    v43 = (_OWORD *)swift_allocObject(&unk_10050AF28, 144, 7);
    v44 = *(_OWORD *)(v0 + 96);
    v43[5] = *(_OWORD *)(v0 + 80);
    v43[6] = v44;
    v45 = *(_OWORD *)(v0 + 128);
    v43[7] = *(_OWORD *)(v0 + 112);
    v43[8] = v45;
    v46 = *(_OWORD *)(v0 + 32);
    v43[1] = *v1;
    v43[2] = v46;
    v47 = *(_OWORD *)(v0 + 64);
    v43[3] = *(_OWORD *)(v0 + 48);
    v43[4] = v47;
    sub_1000F57D4((_QWORD *)(v0 + 272));
    v48 = sub_10000B4C8(&qword_10054D4E0);
    v49 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1032) = Publisher<>.sink(receiveValue:)(sub_1001C62B8, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 920));
    v50 = *(int **)(v0 + 112);
    v89 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1040) = v51;
    *v51 = v0;
    v51[1] = sub_1001A4F0C;
    return v89();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 976);
    v56 = *(_QWORD *)(v0 + 968);
    v57 = *(_QWORD *)(v0 + 960);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 480) = v59;
    v60 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 512) = v60;
    v61 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 400) = *v1;
    *(_OWORD *)(v0 + 416) = v61;
    v62 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 448) = v62;
    sub_1000F57D4((_QWORD *)(v0 + 400));
    sub_1000CFA98(v53, v54);
    sub_1000F57D4((_QWORD *)(v0 + 400));
    v63 = sub_1000CFA98(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 976);
    v68 = *(_QWORD *)(v0 + 968);
    v69 = *(_QWORD *)(v0 + 960);
    if (v66)
    {
      v90 = *(_QWORD *)(v0 + 968);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v91[0] = v71;
      *(_DWORD *)v70 = 136446466;
      v87 = v67;
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
      v86 = v69;
      *(_QWORD *)(v70 + 4) = sub_1000BA30C(v72, v73, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_1000B5000(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_1000BA30C(v74, v76, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v87, v86);
    }
    else
    {
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_1000CFAAC();
    v78 = swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v79 = v53;
    v79[1] = v54;
    v80 = *(_QWORD *)(v0 + 1000);
    v81 = *(_QWORD *)(v0 + 992);
    v82 = *(_QWORD *)(v0 + 984);
    v83 = *(_QWORD *)(v0 + 976);
    v84 = *(_QWORD *)(v0 + 952);
    v85 = *(_QWORD *)(v0 + 944);
    swift_willThrow(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A4F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1040);
  *(_QWORD *)(*(_QWORD *)v1 + 1048) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001A5264;
  else
    v3 = sub_1001A4F70;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A4F70()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 960);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 864) = v6;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 896) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 800) = v8;
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 832) = v9;
  v10 = sub_1000F57D4((_QWORD *)(v0 + 784));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 992);
  v16 = *(_QWORD *)(v0 + 960);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 848));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_bridgeObjectRelease);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1000);
  v23 = *(_QWORD *)(v0 + 992);
  v24 = *(_QWORD *)(v0 + 984);
  v25 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 952);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 608) = v28;
  v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 640) = v29;
  v30 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 528) = *v1;
  *(_OWORD *)(v0 + 544) = v30;
  v31 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10050AF50, 160, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v33;
  v34 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v34;
  v35 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v35;
  v36 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v36;
  sub_1000F57D4((_QWORD *)(v0 + 528));
  v37 = sub_1000CEC3C(v26, (uint64_t)&unk_100551958, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100011694(v26, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A5264()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 960);
  v6 = swift_release(*(_QWORD *)(v0 + 1032));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 736) = v7;
  v8 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 768) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 672) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 704) = v10;
  sub_1000F57D4((_QWORD *)(v0 + 656));
  swift_errorRetain(v1);
  sub_1000F57D4((_QWORD *)(v0 + 656));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1048);
    v35 = *(_QWORD *)(v0 + 984);
    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1024);
    v34 = *(_QWORD *)(v0 + 960);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v37[0] = v16;
    *(_DWORD *)v15 = 136446466;
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    v17 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 720));
    *(_QWORD *)(v15 + 4) = sub_1000BA30C(v17, v18, v37);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    *(_WORD *)(v15 + 12) = 2082;
    *(_QWORD *)(v0 + 912) = v14;
    swift_errorRetain(v14);
    v19 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v20 = (char *)String.init<A>(describing:)(v0 + 912, v19);
    *(_QWORD *)(v15 + 14) = sub_1000BA30C(v20, v21, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v22 = v36(v35, v34);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 1048);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1024);
    v25 = *(_QWORD *)(v0 + 984);
    v26 = *(_QWORD *)(v0 + 960);
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v22 = v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 1000);
  v28 = *(_QWORD *)(v0 + 992);
  v29 = *(_QWORD *)(v0 + 984);
  v30 = *(_QWORD *)(v0 + 976);
  v31 = *(_QWORD *)(v0 + 952);
  v32 = *(_QWORD *)(v0 + 944);
  swift_willThrow(v22);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A5534(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v3 + 992) = v2;
  *(_BYTE *)(v3 + 1112) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 1008) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 1016) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 1024) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1032) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1040) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1048) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1056) = swift_task_alloc(v8);
  v9 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v3 + 128) = v9;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v2 + 128);
  v10 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v3 + 64) = v10;
  v11 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v3 + 96) = v11;
  v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v3 + 32) = v12;
  return swift_task_switch(sub_1001A5630, 0, 0);
}

uint64_t sub_1001A5630()
{
  uint64_t v0;
  _OWORD *v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  _OWORD v90[5];
  uint64_t (*v91)(_QWORD);
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1112) & 1) != 0)
    goto LABEL_3;
  v2 = *(_OWORD **)(v0 + 992);
  v3 = v2[3];
  v90[2] = v2[2];
  v90[3] = v3;
  v90[4] = v2[4];
  v4 = v2[1];
  v90[0] = *v2;
  v90[1] = v4;
  v5 = *(uint64_t (**)(_QWORD))(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_OWORD *)(v0 + 128);
  v93 = *(_OWORD *)(v0 + 112);
  v94 = v7;
  v95 = *(_QWORD *)(v0 + 144);
  v91 = v5;
  v92 = v6;
  v8 = v5(v90);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v10 = *(_QWORD *)(v0 + 1056);
    v11 = *(_QWORD *)(v0 + 1024);
    v12 = *(_QWORD *)(v0 + 1016);
    v13 = sub_10000D78C(v12, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 1064) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1072) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 264) = v15;
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 144);
    v16 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 200) = v16;
    v17 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 232) = v17;
    v18 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 152) = *v1;
    *(_OWORD *)(v0 + 168) = v18;
    v19 = sub_1000F3494(v0 + 152);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1056);
    v24 = *(_QWORD *)(v0 + 1024);
    v25 = *(_QWORD *)(v0 + 1016);
    if (v22)
    {
      v87 = *(_QWORD *)(v0 + 1056);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v90[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 224));
      *(_QWORD *)(v26 + 4) = sub_1000BA30C(v28, v29, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000F32D4(v0 + 152);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v87, v25);
    }
    else
    {
      sub_1000F32D4(v0 + 152);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1080) = v30;
    v31 = *(_QWORD *)(v0 + 1008);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 112);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 984) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 976) = v38;
    v39 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 400) = v39;
    *(_QWORD *)(v0 + 416) = *(_QWORD *)(v0 + 144);
    v40 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 336) = v40;
    v41 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 368) = v41;
    v42 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 288) = *v1;
    *(_OWORD *)(v0 + 304) = v42;
    v43 = swift_allocObject(&unk_10050AB68, 152, 7);
    v44 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v43 + 112) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v43 + 128) = v44;
    *(_QWORD *)(v43 + 144) = *(_QWORD *)(v0 + 144);
    v45 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v43 + 48) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v43 + 64) = v45;
    v46 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v43 + 80) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v43 + 96) = v46;
    v47 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v43 + 16) = *v1;
    *(_OWORD *)(v43 + 32) = v47;
    sub_1000F3494(v0 + 288);
    v48 = sub_10000B4C8(&qword_10054D4E0);
    v49 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1088) = Publisher<>.sink(receiveValue:)(sub_1001C5C68, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 976));
    v50 = *(int **)(v0 + 120);
    v88 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1096) = v51;
    *v51 = v0;
    v51[1] = sub_1001A5D68;
    return v88();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 1032);
    v56 = *(_QWORD *)(v0 + 1024);
    v57 = *(_QWORD *)(v0 + 1016);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 536) = v59;
    *(_QWORD *)(v0 + 552) = *(_QWORD *)(v0 + 144);
    v60 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 472) = v60;
    v61 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 504) = v61;
    v62 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 424) = *v1;
    *(_OWORD *)(v0 + 440) = v62;
    sub_1000F3494(v0 + 424);
    sub_1000CFA98(v53, v54);
    sub_1000F3494(v0 + 424);
    v63 = sub_1000CFA98(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 1032);
    v68 = *(_QWORD *)(v0 + 1024);
    v69 = *(_QWORD *)(v0 + 1016);
    if (v66)
    {
      v89 = *(_QWORD *)(v0 + 1016);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v90[0] = v71;
      *(_DWORD *)v70 = 136446466;
      sub_1000F32D4(v0 + 424);
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 496));
      v86 = v67;
      *(_QWORD *)(v70 + 4) = sub_1000BA30C(v72, v73, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000F32D4(v0 + 424);
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_1000B5000(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_1000BA30C(v74, v76, (uint64_t *)v90);
      swift_bridgeObjectRelease();
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v86, v89);
    }
    else
    {
      sub_1000F32D4(v0 + 424);
      sub_1000F32D4(v0 + 424);
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_1000CFAAC();
    v78 = swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v79 = v53;
    v79[1] = v54;
    v80 = *(_QWORD *)(v0 + 1056);
    v81 = *(_QWORD *)(v0 + 1048);
    v82 = *(_QWORD *)(v0 + 1040);
    v83 = *(_QWORD *)(v0 + 1032);
    v84 = *(_QWORD *)(v0 + 1008);
    v85 = *(_QWORD *)(v0 + 1000);
    swift_willThrow(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A5D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1096);
  *(_QWORD *)(*(_QWORD *)v1 + 1104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001A60C8;
  else
    v3 = sub_1001A5DCC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A5DCC()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1048);
  v5 = *(_QWORD *)(v0 + 1016);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 928) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 944) = v6;
  *(_QWORD *)(v0 + 960) = *(_QWORD *)(v0 + 144);
  v7 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 864) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 880) = v7;
  v8 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 896) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 912) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 848) = v9;
  v10 = sub_1000F3494(v0 + 832);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
  v15 = *(_QWORD *)(v0 + 1048);
  v16 = *(_QWORD *)(v0 + 1016);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1080);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 904));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_1000F32D4(v0 + 832);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_1000F32D4(v0 + 832);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1088);
  v22 = *(_QWORD *)(v0 + 1056);
  v23 = *(_QWORD *)(v0 + 1048);
  v24 = *(_QWORD *)(v0 + 1040);
  v25 = *(_QWORD *)(v0 + 1032);
  v40 = *(_QWORD *)(v0 + 1008);
  v26 = *(_QWORD *)(v0 + 1000);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 672) = v28;
  *(_QWORD *)(v0 + 688) = *(_QWORD *)(v0 + 144);
  v29 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 608) = v29;
  v30 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 640) = v30;
  v31 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 560) = *v1;
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10050AB90, 168, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v33;
  *(_QWORD *)(v32 + 160) = *(_QWORD *)(v0 + 144);
  v34 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v34;
  v35 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v35;
  v36 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v36;
  sub_1000F3494(v0 + 560);
  v37 = sub_1000CEC3C(v26, (uint64_t)&unk_100551858, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100011694(v26, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A60C8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1104);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1072);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1040);
  v5 = *(_QWORD *)(v0 + 1016);
  v6 = swift_release(*(_QWORD *)(v0 + 1088));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 792) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 808) = v7;
  *(_QWORD *)(v0 + 824) = *(_QWORD *)(v0 + 144);
  v8 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 744) = v8;
  v9 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 760) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 776) = v9;
  v10 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 696) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 712) = v10;
  sub_1000F3494(v0 + 696);
  swift_errorRetain(v1);
  sub_1000F3494(v0 + 696);
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1104);
    v35 = *(_QWORD *)(v0 + 1040);
    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1080);
    v15 = *(_QWORD *)(v0 + 1016);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v37[0] = v17;
    *(_DWORD *)v16 = 136446466;
    sub_1000F32D4(v0 + 696);
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 768));
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, v37);
    swift_bridgeObjectRelease();
    sub_1000F32D4(v0 + 696);
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 968) = v14;
    swift_errorRetain(v14);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 968, v20);
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(v21, v22, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v23 = v36(v35, v15);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 1104);
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1080);
    v26 = *(_QWORD *)(v0 + 1040);
    v27 = *(_QWORD *)(v0 + 1016);
    sub_1000F32D4(v0 + 696);
    sub_1000F32D4(v0 + 696);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v23 = v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v30 = *(_QWORD *)(v0 + 1040);
  v31 = *(_QWORD *)(v0 + 1032);
  v32 = *(_QWORD *)(v0 + 1008);
  v33 = *(_QWORD *)(v0 + 1000);
  swift_willThrow(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A637C(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001A646C, 0, 0);
}

uint64_t sub_1001A646C()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050AEB0, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001A6D0C;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A6D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001A6D70;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A6D70()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050AED8, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_100551938, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A7120(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001A7210, 0, 0);
}

uint64_t sub_1001A7210()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050ACD0, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001A7AB0;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A7AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001A7B14;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A7B14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050ACF8, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_1005518B8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A7EC4(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001A7FB4, 0, 0);
}

uint64_t sub_1001A7FB4()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050A820, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001A8854;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A8854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001A88B8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A88B8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050A848, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_100551780, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A8C68(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v2 + 1240) = v1;
  *(_BYTE *)(v2 + 1362) = a1;
  v3 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v2 + 1248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v2 + 1256) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v2 + 1264) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 1272) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 1280) = swift_task_alloc(v7);
  *(_QWORD *)(v2 + 1288) = swift_task_alloc(v7);
  *(_QWORD *)(v2 + 1296) = swift_task_alloc(v7);
  *(_QWORD *)(v2 + 1304) = swift_task_alloc(v7);
  return swift_task_switch(sub_1001A8D3C, 0, 0);
}

uint64_t sub_1001A8D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char *v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79[2];

  if ((*(_BYTE *)(v0 + 1362) & 1) != 0 || (v1 = (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1240) + 144))(), v2 == 1))
  {
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v3 = *(_QWORD *)(v0 + 1304);
    v4 = *(_QWORD *)(v0 + 1272);
    v5 = *(_QWORD *)(v0 + 1264);
    v6 = *(_QWORD *)(v0 + 1240);
    v7 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 1312) = v7;
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    *(_QWORD *)(v0 + 1320) = v8;
    v8(v3, v7, v5);
    v9 = sub_100011370(v6, v0 + 16, &qword_10054D130);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 1304);
    v14 = *(_QWORD *)(v0 + 1272);
    v15 = *(_QWORD *)(v0 + 1264);
    if (v12)
    {
      v16 = swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v79[0] = v17;
      *(_DWORD *)v16 = 136446210;
      v18 = *(_BYTE *)(v0 + 153);
      sub_100011694(v0 + 16, &qword_10054D130);
      v19 = (char *)ActionType.rawValue.getter(v18);
      v21 = v20;
      *(_QWORD *)(v16 + 4) = sub_1000BA30C(v19, v20, v79);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: performing…", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_100011694(v0 + 16, &qword_10054D130);
    }

    v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v13, v15);
    *(_QWORD *)(v0 + 1328) = v22;
    v23 = *(_QWORD *)(v0 + 1256);
    v24 = *(_QWORD *)(v0 + 1240);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v25 = *(double *)(v24 + 160);
    v26 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v27 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v23, 1, 1, v27);
    v28 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v26, NSRunLoopCommonModes, v23, v25);

    sub_100011694(v23, &qword_10054D4C8);
    *(_QWORD *)(v0 + 1232) = v28;
    v29 = type metadata accessor for NSTimer.TimerPublisher(0);
    v30 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v31 = ConnectablePublisher.autoconnect()(v29, v30);
    swift_release(v28);
    *(_QWORD *)(v0 + 1224) = v31;
    sub_100011370(v24, v0 + 616, &qword_10054D130);
    v32 = swift_allocObject(&unk_10050A898, 216, 7);
    v33 = *(_OWORD *)(v0 + 792);
    *(_OWORD *)(v32 + 176) = *(_OWORD *)(v0 + 776);
    *(_OWORD *)(v32 + 192) = v33;
    *(_QWORD *)(v32 + 208) = *(_QWORD *)(v0 + 808);
    v34 = *(_OWORD *)(v0 + 728);
    *(_OWORD *)(v32 + 112) = *(_OWORD *)(v0 + 712);
    *(_OWORD *)(v32 + 128) = v34;
    v35 = *(_OWORD *)(v0 + 760);
    *(_OWORD *)(v32 + 144) = *(_OWORD *)(v0 + 744);
    *(_OWORD *)(v32 + 160) = v35;
    v36 = *(_OWORD *)(v0 + 664);
    *(_OWORD *)(v32 + 48) = *(_OWORD *)(v0 + 648);
    *(_OWORD *)(v32 + 64) = v36;
    v37 = *(_OWORD *)(v0 + 696);
    *(_OWORD *)(v32 + 80) = *(_OWORD *)(v0 + 680);
    *(_OWORD *)(v32 + 96) = v37;
    v38 = *(_OWORD *)(v0 + 632);
    *(_OWORD *)(v32 + 16) = *(_OWORD *)(v0 + 616);
    *(_OWORD *)(v32 + 32) = v38;
    v39 = sub_10000B4C8(&qword_10054D4E0);
    v40 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1336) = Publisher<>.sink(receiveValue:)(sub_1001C56A8, v32, v39, v40);
    swift_release(v32);
    swift_release(*(_QWORD *)(v0 + 1224));
    v41 = *(int **)(v24 + 168);
    v77 = (int *)((char *)v41 + *v41);
    v42 = (_QWORD *)swift_task_alloc(v41[1]);
    *(_QWORD *)(v0 + 1344) = v42;
    *v42 = v0;
    v42[1] = sub_1001A9410;
    return ((uint64_t (*)(uint64_t, _QWORD))v77)(v0 + 1360, *(_QWORD *)(v0 + 1240));
  }
  else
  {
    v44 = v1;
    v45 = v2;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v46 = *(_QWORD *)(v0 + 1280);
    v47 = *(_QWORD *)(v0 + 1272);
    v48 = *(_QWORD *)(v0 + 1264);
    v49 = *(_QWORD *)(v0 + 1240);
    v50 = sub_10000D78C(v48, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v50, v48);
    sub_100011370(v49, v0 + 216, &qword_10054D130);
    sub_1000CFA98(v44, v45);
    v51 = swift_bridgeObjectRetain();
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    v54 = os_log_type_enabled(v52, v53);
    v55 = *(_QWORD *)(v0 + 1280);
    v56 = *(_QWORD *)(v0 + 1272);
    v57 = *(_QWORD *)(v0 + 1264);
    if (v54)
    {
      v78 = *(_QWORD *)(v0 + 1264);
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(64, -1);
      v79[0] = v59;
      *(_DWORD *)v58 = 136446466;
      v76 = v55;
      v60 = *(_BYTE *)(v0 + 353);
      sub_100011694(v0 + 216, &qword_10054D130);
      v61 = (char *)ActionType.rawValue.getter(v60);
      v63 = v62;
      *(_QWORD *)(v58 + 4) = sub_1000BA30C(v61, v62, v79);
      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v58 + 12) = 2082;
      swift_bridgeObjectRetain();
      v64 = (char *)Optional<A>.description.getter(v44, v45);
      v66 = v65;
      sub_1000B5000(v44, v45);
      *(_QWORD *)(v58 + 14) = sub_1000BA30C(v64, v66, v79);
      swift_bridgeObjectRelease(v66);
      sub_1000B5000(v44, v45);
      sub_1000B5000(v44, v45);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v76, v78);
    }
    else
    {
      sub_100011694(v0 + 216, &qword_10054D130);
      sub_1000B5000(v44, v45);
      sub_1000B5000(v44, v45);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    }
    v67 = sub_1000CFAAC();
    v68 = swift_allocError(&type metadata for ActionError, v67, 0, 0);
    *v69 = v44;
    v69[1] = v45;
    v70 = *(_QWORD *)(v0 + 1304);
    v71 = *(_QWORD *)(v0 + 1296);
    v72 = *(_QWORD *)(v0 + 1288);
    v73 = *(_QWORD *)(v0 + 1280);
    v74 = *(_QWORD *)(v0 + 1256);
    v75 = *(_QWORD *)(v0 + 1248);
    swift_willThrow(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A9410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1344);
  *(_QWORD *)(*(_QWORD *)v1 + 1352) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001A97E8;
  else
    v3 = sub_1001A9474;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001A9474()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  char *v14;
  char *v15;
  char *v16;
  Swift::String v17;
  void *object;
  char *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  char *v46[2];

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1264);
  v5 = *(_QWORD *)(v0 + 1240);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v6 = sub_100011370(v5, v0 + 816, &qword_10054D130);
  v7 = *(_BYTE *)(v0 + 1360);
  v8 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v0 + 1296);
    v43 = *(_QWORD *)(v0 + 1264);
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 1328);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v45 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = *(_BYTE *)(v0 + 953);
    sub_100011694(v0 + 816, &qword_10054D130);
    v14 = (char *)ActionType.rawValue.getter(v13);
    v16 = v15;
    *(_QWORD *)(v11 + 4) = sub_1000BA30C(v14, v15, &v45);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v11 + 12) = 2082;
    v46[0] = 0;
    v46[1] = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v46[1]);
    strcpy((char *)v46, " with result: ");
    HIBYTE(v46[1]) = -18;
    *(_BYTE *)(v0 + 1361) = v7;
    v17._countAndFlagsBits = String.init<A>(describing:)(v0 + 1361, &type metadata for Actions.DeleteOrRemoveDownload.Choice);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    v19 = v46[1];
    *(_QWORD *)(v11 + 14) = sub_1000BA30C(v46[0], v46[1], &v45);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: perform success%{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v44(v10, v43);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 1328);
    v21 = *(_QWORD *)(v0 + 1296);
    v22 = *(_QWORD *)(v0 + 1264);
    sub_100011694(v0 + 816, &qword_10054D130);

    v20(v21, v22);
  }
  v23 = *(_QWORD *)(v0 + 1336);
  v24 = *(_QWORD *)(v0 + 1304);
  v25 = *(_QWORD *)(v0 + 1296);
  v26 = *(_QWORD *)(v0 + 1288);
  v27 = *(_QWORD *)(v0 + 1280);
  v28 = *(_QWORD *)(v0 + 1256);
  v29 = *(_QWORD *)(v0 + 1248);
  v30 = *(_QWORD *)(v0 + 1240);
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v29, 1, 1, v31);
  sub_100011370(v30, v0 + 416, &qword_10054D130);
  v32 = *(_BYTE *)(v0 + 1360);
  v33 = swift_allocObject(&unk_10050A8C0, 233, 7);
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  v34 = *(_OWORD *)(v0 + 592);
  *(_OWORD *)(v33 + 192) = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v33 + 208) = v34;
  *(_QWORD *)(v33 + 224) = *(_QWORD *)(v0 + 608);
  v35 = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v33 + 128) = *(_OWORD *)(v0 + 512);
  *(_OWORD *)(v33 + 144) = v35;
  v36 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v33 + 160) = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v33 + 176) = v36;
  v37 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v33 + 64) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v33 + 80) = v37;
  v38 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v33 + 96) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v33 + 112) = v38;
  v39 = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(v0 + 416);
  *(_OWORD *)(v33 + 48) = v39;
  *(_BYTE *)(v33 + 232) = v32;
  v40 = sub_1000CEC3C(v29, (uint64_t)&unk_100551798, v33);
  swift_release(v40);
  swift_release(v23);
  sub_100011694(v29, (uint64_t *)&unk_100552B60);
  v41 = *(unsigned __int8 *)(v0 + 1360);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v41);
}

uint64_t sub_1001A97E8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1352);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1320);
  v3 = *(_QWORD *)(v0 + 1312);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1264);
  v6 = *(_QWORD *)(v0 + 1240);
  v7 = swift_release(*(_QWORD *)(v0 + 1336));
  v2(v4, v3, v5, v7);
  sub_100011370(v6, v0 + 1016, &qword_10054D130);
  swift_errorRetain(v1);
  v8 = swift_errorRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 1352);
    v35 = *(_QWORD *)(v0 + 1288);
    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
    v12 = *(_QWORD *)(v0 + 1264);
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v37[0] = v14;
    *(_DWORD *)v13 = 136446466;
    v15 = *(_BYTE *)(v0 + 1153);
    sub_100011694(v0 + 1016, &qword_10054D130);
    v16 = (char *)ActionType.rawValue.getter(v15);
    v18 = v17;
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v16, v17, v37);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v13 + 12) = 2082;
    *(_QWORD *)(v0 + 1216) = v11;
    swift_errorRetain(v11);
    v19 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v20 = (char *)String.init<A>(describing:)(v0 + 1216, v19);
    v22 = v21;
    *(_QWORD *)(v13 + 14) = sub_1000BA30C(v20, v21, v37);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: perform failed: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v23 = v36(v35, v12);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 1352);
    v25 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1328);
    v26 = *(_QWORD *)(v0 + 1288);
    v27 = *(_QWORD *)(v0 + 1264);
    sub_100011694(v0 + 1016, &qword_10054D130);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v23 = v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 1304);
  v29 = *(_QWORD *)(v0 + 1296);
  v30 = *(_QWORD *)(v0 + 1288);
  v31 = *(_QWORD *)(v0 + 1280);
  v32 = *(_QWORD *)(v0 + 1256);
  v33 = *(_QWORD *)(v0 + 1248);
  swift_willThrow(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A9A80(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v3 + 936) = v2;
  *(_BYTE *)(v3 + 1056) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 960) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 968) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 976) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  v10 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v10;
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_1001A9B74, 0, 0);
}

uint64_t sub_1001A9B74()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  uint64_t v90;
  _OWORD v91[4];
  uint64_t v92;
  uint64_t (*v93)(_QWORD);
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1056) & 1) != 0)
    goto LABEL_3;
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_OWORD *)(v2 + 48);
  v91[2] = *(_OWORD *)(v2 + 32);
  v91[3] = v3;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v91[0] = *(_OWORD *)v2;
  v91[1] = v5;
  v97 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t (**)(_QWORD))(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v95 = *(_OWORD *)(v0 + 104);
  v96 = *(_OWORD *)(v0 + 120);
  v92 = v4;
  v93 = v6;
  v94 = v7;
  v8 = v6(v91);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v10 = *(_QWORD *)(v0 + 1000);
    v11 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 960);
    v13 = sub_10000D78C(v12, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 1008) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1016) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 224) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 256) = v16;
    v17 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 144) = *v1;
    *(_OWORD *)(v0 + 160) = v17;
    v18 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 192) = v18;
    v19 = sub_1000F41E8((_QWORD *)(v0 + 144));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    if (v22)
    {
      v88 = *(_QWORD *)(v0 + 1000);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v91[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 208));
      *(_QWORD *)(v26 + 4) = sub_1000BA30C(v28, v29, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000F56AC((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_release);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v88, v25);
    }
    else
    {
      sub_1000F56AC((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_release);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1024) = v30;
    v31 = *(_QWORD *)(v0 + 952);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 104);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 928) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 920) = v38;
    v39 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 352) = v39;
    v40 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 384) = v40;
    v41 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 272) = *v1;
    *(_OWORD *)(v0 + 288) = v41;
    v42 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 320) = v42;
    v43 = (_OWORD *)swift_allocObject(&unk_10050ABE0, 144, 7);
    v44 = *(_OWORD *)(v0 + 96);
    v43[5] = *(_OWORD *)(v0 + 80);
    v43[6] = v44;
    v45 = *(_OWORD *)(v0 + 128);
    v43[7] = *(_OWORD *)(v0 + 112);
    v43[8] = v45;
    v46 = *(_OWORD *)(v0 + 32);
    v43[1] = *v1;
    v43[2] = v46;
    v47 = *(_OWORD *)(v0 + 64);
    v43[3] = *(_OWORD *)(v0 + 48);
    v43[4] = v47;
    sub_1000F41E8((_QWORD *)(v0 + 272));
    v48 = sub_10000B4C8(&qword_10054D4E0);
    v49 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1032) = Publisher<>.sink(receiveValue:)(sub_1001C5E08, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 920));
    v50 = *(int **)(v0 + 112);
    v89 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1040) = v51;
    *v51 = v0;
    v51[1] = sub_1001AA2CC;
    return v89();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 976);
    v56 = *(_QWORD *)(v0 + 968);
    v57 = *(_QWORD *)(v0 + 960);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 480) = v59;
    v60 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 512) = v60;
    v61 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 400) = *v1;
    *(_OWORD *)(v0 + 416) = v61;
    v62 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 448) = v62;
    sub_1000F41E8((_QWORD *)(v0 + 400));
    sub_1000CFA98(v53, v54);
    sub_1000F41E8((_QWORD *)(v0 + 400));
    v63 = sub_1000CFA98(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 976);
    v68 = *(_QWORD *)(v0 + 968);
    v69 = *(_QWORD *)(v0 + 960);
    if (v66)
    {
      v90 = *(_QWORD *)(v0 + 968);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v91[0] = v71;
      *(_DWORD *)v70 = 136446466;
      v87 = v67;
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
      v86 = v69;
      *(_QWORD *)(v70 + 4) = sub_1000BA30C(v72, v73, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_1000B5000(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_1000BA30C(v74, v76, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v87, v86);
    }
    else
    {
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_1000CFAAC();
    v78 = swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v79 = v53;
    v79[1] = v54;
    v80 = *(_QWORD *)(v0 + 1000);
    v81 = *(_QWORD *)(v0 + 992);
    v82 = *(_QWORD *)(v0 + 984);
    v83 = *(_QWORD *)(v0 + 976);
    v84 = *(_QWORD *)(v0 + 952);
    v85 = *(_QWORD *)(v0 + 944);
    swift_willThrow(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001AA2CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1040);
  *(_QWORD *)(*(_QWORD *)v1 + 1048) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001AA624;
  else
    v3 = sub_1001AA330;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001AA330()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 960);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 864) = v6;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 896) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 800) = v8;
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 832) = v9;
  v10 = sub_1000F41E8((_QWORD *)(v0 + 784));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 992);
  v16 = *(_QWORD *)(v0 + 960);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 848));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_release);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_release);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1000);
  v23 = *(_QWORD *)(v0 + 992);
  v24 = *(_QWORD *)(v0 + 984);
  v25 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 952);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 608) = v28;
  v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 640) = v29;
  v30 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 528) = *v1;
  *(_OWORD *)(v0 + 544) = v30;
  v31 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10050AC08, 160, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v33;
  v34 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v34;
  v35 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v35;
  v36 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v36;
  sub_1000F41E8((_QWORD *)(v0 + 528));
  v37 = sub_1000CEC3C(v26, (uint64_t)&unk_100551878, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100011694(v26, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AA624()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 960);
  v6 = swift_release(*(_QWORD *)(v0 + 1032));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 736) = v7;
  v8 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 768) = v8;
  v9 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 672) = v9;
  v10 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 704) = v10;
  sub_1000F41E8((_QWORD *)(v0 + 656));
  swift_errorRetain(v1);
  sub_1000F41E8((_QWORD *)(v0 + 656));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 1048);
    v35 = *(_QWORD *)(v0 + 984);
    v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1024);
    v34 = *(_QWORD *)(v0 + 960);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v37[0] = v16;
    *(_DWORD *)v15 = 136446466;
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_release);
    v17 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 720));
    *(_QWORD *)(v15 + 4) = sub_1000BA30C(v17, v18, v37);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_release);
    *(_WORD *)(v15 + 12) = 2082;
    *(_QWORD *)(v0 + 912) = v14;
    swift_errorRetain(v14);
    v19 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v20 = (char *)String.init<A>(describing:)(v0 + 912, v19);
    *(_QWORD *)(v15 + 14) = sub_1000BA30C(v20, v21, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform failed: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v22 = v36(v35, v34);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 1048);
    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1024);
    v25 = *(_QWORD *)(v0 + 984);
    v26 = *(_QWORD *)(v0 + 960);
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 656), (void (*)(uint64_t))&_swift_release);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v22 = v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 1000);
  v28 = *(_QWORD *)(v0 + 992);
  v29 = *(_QWORD *)(v0 + 984);
  v30 = *(_QWORD *)(v0 + 976);
  v31 = *(_QWORD *)(v0 + 952);
  v32 = *(_QWORD *)(v0 + 944);
  swift_willThrow(v22);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AA8F4(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v3 + 936) = v2;
  *(_BYTE *)(v3 + 1056) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 944) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 952) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 960) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 968) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 976) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1000) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  v10 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v10;
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  v12 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v12;
  return swift_task_switch(sub_1001AA9E8, 0, 0);
}

uint64_t sub_1001AA9E8()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  uint64_t v90;
  _OWORD v91[4];
  uint64_t v92;
  uint64_t (*v93)(_QWORD);
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v1 = (_OWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 1056) & 1) != 0)
    goto LABEL_3;
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_OWORD *)(v2 + 48);
  v91[2] = *(_OWORD *)(v2 + 32);
  v91[3] = v3;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v91[0] = *(_OWORD *)v2;
  v91[1] = v5;
  v97 = *(_QWORD *)(v0 + 136);
  v6 = *(uint64_t (**)(_QWORD))(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v95 = *(_OWORD *)(v0 + 104);
  v96 = *(_OWORD *)(v0 + 120);
  v92 = v4;
  v93 = v6;
  v94 = v7;
  v8 = v6(v91);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v10 = *(_QWORD *)(v0 + 1000);
    v11 = *(_QWORD *)(v0 + 968);
    v12 = *(_QWORD *)(v0 + 960);
    v13 = sub_10000D78C(v12, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 1008) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 1016) = v14;
    v14(v10, v13, v12);
    v15 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 224) = v15;
    v16 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 256) = v16;
    v17 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 144) = *v1;
    *(_OWORD *)(v0 + 160) = v17;
    v18 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 192) = v18;
    v19 = sub_1000F41E8((_QWORD *)(v0 + 144));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    if (v22)
    {
      v88 = *(_QWORD *)(v0 + 1000);
      v26 = swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v91[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 208));
      *(_QWORD *)(v26 + 4) = sub_1000BA30C(v28, v29, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000F56AC((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_release);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: performing…", (uint8_t *)v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v88, v25);
    }
    else
    {
      sub_1000F56AC((_QWORD *)(v0 + 144), (void (*)(uint64_t))&_swift_release);

      v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v30(v23, v25);
    }
    *(_QWORD *)(v0 + 1024) = v30;
    v31 = *(_QWORD *)(v0 + 952);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 104);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 928) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 920) = v38;
    v39 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 352) = v39;
    v40 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 384) = v40;
    v41 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 272) = *v1;
    *(_OWORD *)(v0 + 288) = v41;
    v42 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 320) = v42;
    v43 = (_OWORD *)swift_allocObject(&unk_10050AC58, 144, 7);
    v44 = *(_OWORD *)(v0 + 96);
    v43[5] = *(_OWORD *)(v0 + 80);
    v43[6] = v44;
    v45 = *(_OWORD *)(v0 + 128);
    v43[7] = *(_OWORD *)(v0 + 112);
    v43[8] = v45;
    v46 = *(_OWORD *)(v0 + 32);
    v43[1] = *v1;
    v43[2] = v46;
    v47 = *(_OWORD *)(v0 + 64);
    v43[3] = *(_OWORD *)(v0 + 48);
    v43[4] = v47;
    sub_1000F41E8((_QWORD *)(v0 + 272));
    v48 = sub_10000B4C8(&qword_10054D4E0);
    v49 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 1032) = Publisher<>.sink(receiveValue:)(sub_1001C6654, v43, v48, v49);
    swift_release(v43);
    swift_release(*(_QWORD *)(v0 + 920));
    v50 = *(int **)(v0 + 112);
    v89 = (uint64_t (*)(void))((char *)v50 + *v50);
    v51 = (_QWORD *)swift_task_alloc(v50[1]);
    *(_QWORD *)(v0 + 1040) = v51;
    *v51 = v0;
    v51[1] = sub_1001AB140;
    return v89();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 976);
    v56 = *(_QWORD *)(v0 + 968);
    v57 = *(_QWORD *)(v0 + 960);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 480) = v59;
    v60 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 512) = v60;
    v61 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 400) = *v1;
    *(_OWORD *)(v0 + 416) = v61;
    v62 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 448) = v62;
    sub_1000F41E8((_QWORD *)(v0 + 400));
    sub_1000CFA98(v53, v54);
    sub_1000F41E8((_QWORD *)(v0 + 400));
    v63 = sub_1000CFA98(v53, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 976);
    v68 = *(_QWORD *)(v0 + 968);
    v69 = *(_QWORD *)(v0 + 960);
    if (v66)
    {
      v90 = *(_QWORD *)(v0 + 968);
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v91[0] = v71;
      *(_DWORD *)v70 = 136446466;
      v87 = v67;
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      v72 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
      v86 = v69;
      *(_QWORD *)(v70 + 4) = sub_1000BA30C(v72, v73, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      *(_WORD *)(v70 + 12) = 2082;
      swift_bridgeObjectRetain();
      v74 = (char *)Optional<A>.description.getter(v53, v54);
      v76 = v75;
      sub_1000B5000(v53, v54);
      *(_QWORD *)(v70 + 14) = sub_1000BA30C(v74, v76, (uint64_t *)v91);
      swift_bridgeObjectRelease();
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v87, v86);
    }
    else
    {
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = sub_1000CFAAC();
    v78 = swift_allocError(&type metadata for ActionError, v77, 0, 0);
    *v79 = v53;
    v79[1] = v54;
    v80 = *(_QWORD *)(v0 + 1000);
    v81 = *(_QWORD *)(v0 + 992);
    v82 = *(_QWORD *)(v0 + 984);
    v83 = *(_QWORD *)(v0 + 976);
    v84 = *(_QWORD *)(v0 + 952);
    v85 = *(_QWORD *)(v0 + 944);
    swift_willThrow(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001AB140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1040);
  *(_QWORD *)(*(_QWORD *)v1 + 1048) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C6648;
  else
    v3 = sub_1001AB1A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001AB1A4()
{
  uint64_t v0;
  _OWORD *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v1 = (_OWORD *)(v0 + 16);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 960);
  AnyCancellable.cancel()();
  v2(v4, v3, v5);
  v6 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 848) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 864) = v6;
  v7 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 896) = v7;
  v8 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 784) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 800) = v8;
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 816) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 832) = v9;
  v10 = sub_1000F41E8((_QWORD *)(v0 + 784));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
  v15 = *(_QWORD *)(v0 + 992);
  v16 = *(_QWORD *)(v0 + 960);
  if (v13)
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 1024);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v41 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 848));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v41);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_release);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v41);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v39(v15, v16);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 784), (void (*)(uint64_t))&_swift_release);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1000);
  v23 = *(_QWORD *)(v0 + 992);
  v24 = *(_QWORD *)(v0 + 984);
  v25 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 952);
  v26 = *(_QWORD *)(v0 + 944);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 608) = v28;
  v29 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 640) = v29;
  v30 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 528) = *v1;
  *(_OWORD *)(v0 + 544) = v30;
  v31 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 576) = v31;
  v32 = swift_allocObject(&unk_10050AC80, 160, 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v32 + 112) = v33;
  v34 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v32 + 128) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v32 + 144) = v34;
  v35 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v32 + 32) = *v1;
  *(_OWORD *)(v32 + 48) = v35;
  v36 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v32 + 80) = v36;
  sub_1000F41E8((_QWORD *)(v0 + 528));
  v37 = sub_1000CEC3C(v26, (uint64_t)&unk_100551898, v32);
  swift_release(v37);
  swift_release(v21);
  sub_100011694(v26, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v40);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AB498(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001AB588, 0, 0);
}

uint64_t sub_1001AB588()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050AD48, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001ABE28;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001ABE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001ABE8C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001ABE8C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050AD70, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_1005518D8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AC23C(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001AC32C, 0, 0);
}

uint64_t sub_1001AC32C()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050A988, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001ACBCC;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001ACBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001ACC30;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001ACC30()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050A9B0, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_1005517D8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ACFE0(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001AD0D0, 0, 0);
}

uint64_t sub_1001AD0D0()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050AA00, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C5A34, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001AD970;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001AD970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001ADD84;
  else
    v3 = sub_1001AD9D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001AD9D4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050AA28, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_1005517F8, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ADD84()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t type;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *log;
  uint64_t v42[2];

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 224);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = swift_release(*(_QWORD *)(v0 + 232));
  v2(v4, v3, v5, v6);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_BYTE *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 120);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  swift_errorRetain(v1);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  v14 = swift_errorRetain(v1);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  log = v15;
  if (os_log_type_enabled(v15, v16))
  {
    v17 = *(_QWORD *)(v0 + 248);
    v37 = *(_QWORD *)(v0 + 176);
    v38 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 192);
    type = v16;
    v18 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v42[0] = v36;
    *(_DWORD *)v18 = 136446466;
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v11);
    swift_release(v12);
    swift_release(v13);
    v19 = (char *)ActionType.rawValue.getter(v10);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v19, v20, v42);
    swift_bridgeObjectRelease();
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v11);
    swift_release(v12);
    swift_release(v13);
    *(_WORD *)(v18 + 12) = 2082;
    *(_QWORD *)(v0 + 144) = v17;
    swift_errorRetain(v17);
    v21 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v22 = (char *)String.init<A>(describing:)(v0 + 144, v21);
    *(_QWORD *)(v18 + 14) = sub_1000BA30C(v22, v23, v42);
    swift_bridgeObjectRelease();
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: perform failed: %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 248);
    v40 = *(_QWORD *)(v0 + 192);
    v27 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v11, 2);
    swift_release_n(v12, 2);
    swift_release_n(v13, 2);
    swift_errorRelease(v25);
    swift_errorRelease(v25);

    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v40, v27);
  }
  v29 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 152);
  v32 = *(_QWORD *)(v0 + 160);
  swift_willThrow(v24);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AE10C(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001AE1FC, 0, 0);
}

uint64_t sub_1001AE1FC()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050AA78, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001AEA9C;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001AEA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001AEB00;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001AEB00()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050AAA0, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_100551818, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AEEB0(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 256) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 168) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 176) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v8);
  v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  *(_OWORD *)(v3 + 112) = v2[6];
  v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  v11 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v11;
  return swift_task_switch(sub_1001AEFA0, 0, 0);
}

uint64_t sub_1001AEFA0()
{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[3];
  char v101;
  uint64_t (*v102)(_QWORD);
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;

  if ((*(_BYTE *)(v0 + 256) & 1) != 0)
    goto LABEL_3;
  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(uint64_t (**)(_QWORD))(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_OWORD *)(v0 + 32);
  v100[0] = *(_OWORD *)(v0 + 16);
  v100[1] = v5;
  v100[2] = *(_OWORD *)(v0 + 48);
  v101 = v1;
  v102 = v2;
  v103 = v3;
  v104 = v4;
  v6 = *(_OWORD *)(v0 + 112);
  v105 = *(_OWORD *)(v0 + 96);
  v106 = v6;
  v7 = v2(v100);
  if (v8 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = sub_10000D78C(v10, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 216) = v12;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 224) = v13;
    v13(v9, v12, v10);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 56);
    v91 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 120);
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    v93 = v18;
    swift_retain(v18);
    v96 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(12, -1);
      v87 = v25;
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v100[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v91);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v87);
    }
    else
    {
      swift_release(v14);
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v93);
      swift_release(v96);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 160);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 88);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 128) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 136) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 56);
    v41 = *(_BYTE *)(v0 + 64);
    v43 = *(_QWORD *)(v0 + 72);
    v42 = *(_QWORD *)(v0 + 80);
    v44 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 120);
    v47 = swift_allocObject(&unk_10050AAF0, 128, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    v94 = *(_OWORD *)(v0 + 40);
    *(_OWORD *)(v47 + 40) = v94;
    *(_QWORD *)(v47 + 56) = v40;
    *(_BYTE *)(v47 + 64) = v41;
    *(_QWORD *)(v47 + 72) = v43;
    *(_QWORD *)(v47 + 80) = v42;
    *(_QWORD *)(v47 + 88) = v44;
    *(_QWORD *)(v47 + 96) = v45;
    v97 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v47 + 104) = v97;
    *(_QWORD *)(v47 + 120) = v46;
    swift_retain(v48);
    swift_retain(v94);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v97);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 232) = Publisher<>.sink(receiveValue:)(sub_1001C664C, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 136));
    v51 = *(int **)(v0 + 96);
    *(_QWORD *)&v97 = (char *)v51 + *v51;
    v52 = (_QWORD *)swift_task_alloc(v51[1]);
    *(_QWORD *)(v0 + 240) = v52;
    *v52 = v0;
    v52[1] = sub_1001AF840;
    return ((uint64_t (*)(void))v97)();
  }
  else
  {
    v54 = v8;
    v99 = v7;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v55 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 184);
    v57 = *(_QWORD *)(v0 + 168);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v56, v58, v57);
    v59 = *(_QWORD *)(v0 + 24);
    v60 = *(_QWORD *)(v0 + 40);
    v61 = *(_QWORD *)(v0 + 56);
    v88 = *(_BYTE *)(v0 + 64);
    v62 = *(_QWORD *)(v0 + 80);
    v63 = *(_QWORD *)(v0 + 104);
    v64 = *(_QWORD *)(v0 + 120);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v65 = v99;
    sub_1000CFA98(v99, v54);
    swift_retain(v59);
    swift_retain(v60);
    swift_retain(v61);
    swift_retain(v62);
    swift_retain(v63);
    swift_retain(v64);
    v66 = sub_1000CFA98(v99, v54);
    v67 = Logger.logObject.getter(v66);
    type = static os_log_type_t.error.getter(v67);
    v68 = os_log_type_enabled(v67, type);
    v98 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 176);
    v95 = *(_QWORD *)(v0 + 168);
    if (v68)
    {
      log = v67;
      v69 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v100[0] = v86;
      *(_DWORD *)v69 = 136446466;
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      v70 = (char *)ActionType.rawValue.getter(v88);
      *(_QWORD *)(v69 + 4) = sub_1000BA30C(v70, v71, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v60);
      swift_release(v61);
      swift_release(v62);
      swift_release(v63);
      swift_release(v64);
      *(_WORD *)(v69 + 12) = 2082;
      swift_bridgeObjectRetain();
      v72 = Optional<A>.description.getter(v99, v54);
      v74 = v73;
      sub_1000B5000(v99, v54);
      v75 = (char *)v72;
      v65 = v99;
      *(_QWORD *)(v69 + 14) = sub_1000BA30C(v75, v74, (uint64_t *)v100);
      swift_bridgeObjectRelease();
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v60, 2);
      swift_release_n(v61, 2);
      swift_release_n(v62, 2);
      swift_release_n(v63, 2);
      swift_release_n(v64, 2);
      sub_1000B5000(v99, v54);
      sub_1000B5000(v99, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    v76 = sub_1000CFAAC();
    v77 = swift_allocError(&type metadata for ActionError, v76, 0, 0);
    *v78 = v65;
    v78[1] = v54;
    v80 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 208);
    v82 = *(_QWORD *)(v0 + 184);
    v81 = *(_QWORD *)(v0 + 192);
    v84 = *(_QWORD *)(v0 + 152);
    v83 = *(_QWORD *)(v0 + 160);
    swift_willThrow(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001AF840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C666C;
  else
    v3 = sub_1001AF8A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001AF8A4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v41 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v43 = v10;
  v11 = swift_retain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  if (v14)
  {
    v39 = *(_QWORD *)(v0 + 200);
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v47 = v37;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v41);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v47);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v47);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: perform success%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v39, v16);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v43);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v15, v16);
  }
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 200);
  v42 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 160);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_BYTE *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = swift_allocObject(&unk_10050AB18, 144, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = v22;
  v31 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v30 + 40) = v31;
  v34 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v30 + 56) = v34;
  *(_QWORD *)(v30 + 72) = v23;
  *(_BYTE *)(v30 + 80) = v24;
  *(_QWORD *)(v30 + 88) = v25;
  *(_QWORD *)(v30 + 96) = v26;
  *(_QWORD *)(v30 + 104) = v27;
  *(_QWORD *)(v30 + 112) = v28;
  v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v30 + 120) = v35;
  *(_QWORD *)(v30 + 136) = v29;
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v23);
  swift_retain(v26);
  swift_retain(v35);
  swift_retain(v29);
  v32 = sub_1000CEC3C(v20, (uint64_t)&unk_100551838, v30);
  swift_release(v32);
  swift_release(v36);
  sub_100011694(v20, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AFC54(uint64_t a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_BYTE *)(v3 + 240) = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  *(_QWORD *)(v3 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v3 + 144) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 152) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 160) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v8);
  v9 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v9;
  v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  return swift_task_switch(sub_1001AFD3C, 0, 0);
}

uint64_t sub_1001AFD3C()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  BOOL v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *log;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t typea[8];
  os_log_type_t type;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t (*v96)(_QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  if ((*(_BYTE *)(v0 + 240) & 1) != 0)
    goto LABEL_3;
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_BYTE *)(v0 + 48);
  v3 = *(uint64_t (**)(_QWORD))(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 104);
  v92 = *(_QWORD *)(v0 + 16);
  v93 = *(_OWORD *)(v0 + 24);
  v94 = v1;
  v95 = v2;
  v96 = v3;
  v97 = v4;
  v98 = v5;
  v99 = v6;
  v86 = v93;
  v90 = *(_OWORD *)(v0 + 88);
  v100 = v90;
  v101 = v7;
  v8 = v3(&v92);
  if (v9 == 1)
  {
LABEL_3:
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
    v13 = sub_10000D78C(v11, (uint64_t)qword_10054D498);
    *(_QWORD *)(v0 + 200) = v13;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    *(_QWORD *)(v0 + 208) = v14;
    v14(v10, v13, v11);
    v15 = *(_QWORD *)(v0 + 24);
    v16 = *(_QWORD *)(v0 + 40);
    v84 = *(_BYTE *)(v0 + 48);
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 104);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v17);
    swift_retain(v18);
    v87 = v19;
    v20 = swift_retain(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 192);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 160);
    if (v23)
    {
      *(_QWORD *)typea = *(_QWORD *)(v0 + 192);
      v27 = swift_slowAlloc(12, -1);
      v80 = v25;
      v28 = swift_slowAlloc(32, -1);
      v92 = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = (char *)ActionType.rawValue.getter(v84);
      *(_QWORD *)(v27 + 4) = sub_1000BA30C(v29, v30, &v92);
      swift_bridgeObjectRelease();
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v18);
      swift_release(v87);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: performing…", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(os_log_type_t *, uint64_t))(v26 + 8))(*(os_log_type_t **)typea, v80);
    }
    else
    {
      swift_release(v15);
      swift_release(v16);
      swift_release(v17);
      swift_release(v18);
      swift_release(v87);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    v31 = *(_QWORD *)(v0 + 144);
    sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
    v32 = *(double *)(v0 + 72);
    v33 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v34 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
    v35 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v33, NSRunLoopCommonModes, v31, v32);

    sub_100011694(v31, &qword_10054D4C8);
    *(_QWORD *)(v0 + 112) = v35;
    v36 = type metadata accessor for NSTimer.TimerPublisher(0);
    v37 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v38 = ConnectablePublisher.autoconnect()(v36, v37);
    swift_release(v35);
    *(_QWORD *)(v0 + 120) = v38;
    v39 = *(_QWORD *)(v0 + 16);
    v40 = *(_QWORD *)(v0 + 40);
    v41 = *(_BYTE *)(v0 + 48);
    v43 = *(_QWORD *)(v0 + 56);
    v42 = *(_QWORD *)(v0 + 64);
    v44 = *(_QWORD *)(v0 + 72);
    v45 = *(int **)(v0 + 80);
    v46 = *(_QWORD *)(v0 + 104);
    v47 = swift_allocObject(&unk_10050A910, 112, 7);
    *(_QWORD *)(v47 + 16) = v39;
    v48 = *(_OWORD *)(v0 + 24);
    *(_OWORD *)(v47 + 24) = v48;
    *(_QWORD *)(v47 + 40) = v40;
    *(_BYTE *)(v47 + 48) = v41;
    *(_QWORD *)(v47 + 56) = v43;
    *(_QWORD *)(v47 + 64) = v42;
    *(_QWORD *)(v47 + 72) = v44;
    *(_QWORD *)(v47 + 80) = v45;
    v88 = *(_OWORD *)(v0 + 88);
    *(_OWORD *)(v47 + 88) = v88;
    *(_QWORD *)(v47 + 104) = v46;
    swift_retain(v48);
    swift_retain(v40);
    swift_retain(v42);
    swift_retain(v88);
    swift_retain(v46);
    v49 = sub_10000B4C8(&qword_10054D4E0);
    v50 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C57EC, v47, v49, v50);
    swift_release(v47);
    swift_release(*(_QWORD *)(v0 + 120));
    *(_QWORD *)&v88 = (char *)v45 + *v45;
    v51 = (_QWORD *)swift_task_alloc(v45[1]);
    *(_QWORD *)(v0 + 224) = v51;
    *v51 = v0;
    v51[1] = sub_1001B0584;
    return ((uint64_t (*)(void))v88)();
  }
  else
  {
    v53 = v8;
    v54 = v9;
    if (qword_10054B9B8 != -1)
      swift_once(&qword_10054B9B8, sub_1000CF368);
    v56 = *(_QWORD *)(v0 + 160);
    v55 = *(_QWORD *)(v0 + 168);
    v57 = *(_QWORD *)(v0 + 152);
    v58 = sub_10000D78C(v57, (uint64_t)qword_10054D498);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
    v59 = v86;
    swift_retain(v86);
    swift_retain(v1);
    swift_retain(v4);
    v60 = v90;
    swift_retain(v90);
    swift_retain(v7);
    sub_1000CFA98(v53, v54);
    swift_retain(v86);
    swift_retain(v1);
    swift_retain(v4);
    swift_retain(v90);
    swift_retain(v7);
    v61 = sub_1000CFA98(v53, v54);
    v62 = Logger.logObject.getter(v61);
    type = static os_log_type_t.error.getter(v62);
    v63 = os_log_type_enabled(v62, type);
    v91 = *(_QWORD *)(v0 + 168);
    v85 = *(_QWORD *)(v0 + 160);
    v89 = *(_QWORD *)(v0 + 152);
    if (v63)
    {
      log = v62;
      v64 = swift_slowAlloc(22, -1);
      v81 = swift_slowAlloc(64, -1);
      v92 = v81;
      *(_DWORD *)v64 = 136446466;
      swift_release(v59);
      swift_release(v1);
      swift_release(v4);
      swift_release(v60);
      swift_release(v7);
      v65 = (char *)ActionType.rawValue.getter(v2);
      *(_QWORD *)(v64 + 4) = sub_1000BA30C(v65, v66, &v92);
      swift_bridgeObjectRelease();
      swift_release(v59);
      swift_release(v1);
      swift_release(v4);
      swift_release(v60);
      swift_release(v7);
      *(_WORD *)(v64 + 12) = 2082;
      swift_bridgeObjectRetain();
      v67 = (char *)Optional<A>.description.getter(v53, v54);
      v69 = v68;
      sub_1000B5000(v53, v54);
      *(_QWORD *)(v64 + 14) = sub_1000BA30C(v67, v69, &v92);
      swift_bridgeObjectRelease();
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s: attempted to execute but was unsupported for reason: %{public}s", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {
      swift_release_n(v59, 2);
      swift_release_n(v1, 2);
      swift_release_n(v4, 2);
      swift_release_n(v60, 2);
      swift_release_n(v7, 2);
      sub_1000B5000(v53, v54);
      sub_1000B5000(v53, v54);

    }
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v91, v89);
    v70 = sub_1000CFAAC();
    v71 = swift_allocError(&type metadata for ActionError, v70, 0, 0);
    *v72 = v53;
    v72[1] = v54;
    v74 = *(_QWORD *)(v0 + 184);
    v73 = *(_QWORD *)(v0 + 192);
    v76 = *(_QWORD *)(v0 + 168);
    v75 = *(_QWORD *)(v0 + 176);
    v78 = *(_QWORD *)(v0 + 136);
    v77 = *(_QWORD *)(v0 + 144);
    swift_willThrow(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001B0584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B0960;
  else
    v3 = sub_1001B05E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B05E8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v40 = *(_BYTE *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 104);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v10 = swift_retain(v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 152);
  v42 = *(_QWORD *)(v0 + 160);
  if (v13)
  {
    v38 = *(_QWORD *)(v0 + 184);
    v16 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v44 = v36;
    *(_DWORD *)v16 = 136446466;
    v17 = (char *)ActionType.rawValue.getter(v40);
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v17, v18, &v44);
    swift_bridgeObjectRelease();
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(0, (char *)0xE000000000000000, &v44);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: perform success%{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v15);
  }
  else
  {
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v14, v15);
  }
  v34 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 184);
  v39 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 136);
  v41 = *(_QWORD *)(v0 + 168);
  v43 = *(_QWORD *)(v0 + 144);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = *(_QWORD *)(v0 + 16);
  v22 = *(_QWORD *)(v0 + 40);
  v23 = *(_BYTE *)(v0 + 48);
  v24 = *(_QWORD *)(v0 + 56);
  v25 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 72);
  v27 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 104);
  v29 = swift_allocObject(&unk_10050A938, 128, 7);
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = v21;
  v30 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v29 + 40) = v30;
  *(_QWORD *)(v29 + 56) = v22;
  *(_BYTE *)(v29 + 64) = v23;
  *(_QWORD *)(v29 + 72) = v24;
  *(_QWORD *)(v29 + 80) = v25;
  *(_QWORD *)(v29 + 88) = v26;
  *(_QWORD *)(v29 + 96) = v27;
  v33 = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v29 + 104) = v33;
  *(_QWORD *)(v29 + 120) = v28;
  swift_retain(v30);
  swift_retain(v22);
  swift_retain(v25);
  swift_retain(v33);
  swift_retain(v28);
  v31 = sub_1000CEC3C(v19, (uint64_t)&unk_1005517B8, v29);
  swift_release(v31);
  swift_release(v34);
  sub_100011694(v19, (uint64_t *)&unk_100552B60);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B0960()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *log;
  uint64_t v41[2];

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 208);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = swift_release(*(_QWORD *)(v0 + 216));
  v2(v4, v3, v5, v6);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_BYTE *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 104);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  swift_errorRetain(v1);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  v13 = swift_errorRetain(v1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  log = v14;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = v9;
    v17 = *(_QWORD *)(v0 + 232);
    v37 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 152);
    v39 = *(_QWORD *)(v0 + 176);
    v18 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v41[0] = v36;
    *(_DWORD *)v18 = 136446466;
    swift_release(v7);
    swift_release(v8);
    swift_release(v10);
    swift_release(v11);
    swift_release(v12);
    v19 = (char *)ActionType.rawValue.getter(v16);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v19, v20, v41);
    swift_bridgeObjectRelease();
    swift_release(v7);
    swift_release(v8);
    swift_release(v10);
    swift_release(v11);
    swift_release(v12);
    *(_WORD *)(v18 + 12) = 2082;
    *(_QWORD *)(v0 + 128) = v17;
    swift_errorRetain(v17);
    v21 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v22 = (char *)String.init<A>(describing:)(v0 + 128, v21);
    *(_QWORD *)(v18 + 14) = sub_1000BA30C(v22, v23, v41);
    swift_bridgeObjectRelease();
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, log, v15, "%{public}s: perform failed: %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 176);
    v28 = *(_QWORD *)(v0 + 152);
    v27 = *(_QWORD *)(v0 + 160);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v10, 2);
    swift_release_n(v11, 2);
    swift_release_n(v12, 2);
    swift_errorRelease(v25);
    swift_errorRelease(v25);

    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  }
  v30 = *(_QWORD *)(v0 + 184);
  v29 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 168);
  v31 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v24);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B0CB4(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1000F5CD4((_QWORD *)a2);
  v10 = sub_1000F5CD4((_QWORD *)a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(a2 + 48));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease();
    sub_1001C65C8((_QWORD *)a2);
    sub_1001C65C8((_QWORD *)a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1001C65C8((_QWORD *)a2);
    sub_1001C65C8((_QWORD *)a2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001B0E90(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1000F57D4((_QWORD *)a2);
  v10 = sub_1000F57D4((_QWORD *)a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(a2 + 64));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_bridgeObjectRelease);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001B108C(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1000F41E8((_QWORD *)a2);
  v10 = sub_1000F41E8((_QWORD *)a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(a2 + 64));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_release);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)a2, (void (*)(uint64_t))&_swift_release);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001B1288(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B1348, 0, 0);
}

uint64_t sub_1001B1348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AE10, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B1830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C6670;
  else
    v3 = sub_1001C6664;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B1894(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B1954, 0, 0);
}

uint64_t sub_1001B1954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AE88, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B1E3C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B1EFC, 0, 0);
}

uint64_t sub_1001B1EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050B068, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B23E4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 680) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 688) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 696) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 704) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 712) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 720) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 208) = a4[4];
  *(_OWORD *)(v4 + 224) = v10;
  v11 = a4[7];
  *(_OWORD *)(v4 + 240) = a4[6];
  *(_OWORD *)(v4 + 256) = v11;
  v12 = a4[1];
  *(_OWORD *)(v4 + 144) = *a4;
  *(_OWORD *)(v4 + 160) = v12;
  v13 = a4[3];
  *(_OWORD *)(v4 + 176) = a4[2];
  *(_OWORD *)(v4 + 192) = v13;
  return swift_task_switch(sub_1001B24A4, 0, 0);
}

uint64_t sub_1001B24A4()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t (*v46)(_OWORD *);
  uint64_t v47;

  v1 = (_OWORD *)(v0 + 144);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 696);
  v4 = *(_QWORD *)(v0 + 688);
  v5 = sub_10000D78C(v4, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 728) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 736) = v6;
  v6(v2, v5, v4);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 128) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 64) = v10;
  sub_1000F5A04((_QWORD *)(v0 + 16));
  v11 = sub_1000F5A04((_QWORD *)(v0 + 16));
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 720);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  if (v14)
  {
    v45 = *(_QWORD *)(v0 + 720);
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v47 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 80));
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v47);
    swift_bridgeObjectRelease();
    sub_1000F5624((_QWORD *)(v0 + 16));
    sub_1000F5624((_QWORD *)(v0 + 16));
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v45, v17);
  }
  else
  {
    sub_1000F5624((_QWORD *)(v0 + 16));
    sub_1000F5624((_QWORD *)(v0 + 16));

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v15, v17);
  }
  *(_QWORD *)(v0 + 744) = v22;
  v23 = *(_QWORD *)(v0 + 680);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v24 = *(double *)(v0 + 232);
  v25 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v26 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  v27 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v25, NSRunLoopCommonModes, v23, v24);

  sub_100011694(v23, &qword_10054D4C8);
  *(_QWORD *)(v0 + 656) = v27;
  v28 = type metadata accessor for NSTimer.TimerPublisher(0);
  v29 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v30 = ConnectablePublisher.autoconnect()(v28, v29);
  swift_release(v27);
  *(_QWORD *)(v0 + 672) = v30;
  v31 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 352) = v31;
  v32 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 384) = v32;
  v33 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 272) = *v1;
  *(_OWORD *)(v0 + 288) = v33;
  v34 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 320) = v34;
  v35 = (_OWORD *)swift_allocObject(&unk_10050AFF0, 144, 7);
  v36 = *(_OWORD *)(v0 + 224);
  v35[5] = *(_OWORD *)(v0 + 208);
  v35[6] = v36;
  v37 = *(_OWORD *)(v0 + 256);
  v35[7] = *(_OWORD *)(v0 + 240);
  v35[8] = v37;
  v38 = *(_OWORD *)(v0 + 160);
  v35[1] = *v1;
  v35[2] = v38;
  v39 = *(_OWORD *)(v0 + 192);
  v35[3] = *(_OWORD *)(v0 + 176);
  v35[4] = v39;
  sub_1000F5A04((_QWORD *)(v0 + 272));
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 752) = Publisher<>.sink(receiveValue:)(sub_1001C64F4, v35, v40, v41);
  swift_release(v35);
  swift_release(*(_QWORD *)(v0 + 672));
  v42 = *(int **)(v0 + 256);
  v46 = (uint64_t (*)(_OWORD *))((char *)v42 + *v42);
  v43 = (_QWORD *)swift_task_alloc(v42[1]);
  *(_QWORD *)(v0 + 760) = v43;
  *v43 = v0;
  v43[1] = sub_1001B28A0;
  return v46(v1);
}

uint64_t sub_1001B28A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B2B10;
  else
    v3 = sub_1001B2904;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B2904()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 712);
  v4 = *(_QWORD *)(v0 + 688);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 608) = v5;
  v6 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 640) = v6;
  v7 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 528) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 544) = v7;
  v8 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 576) = v8;
  sub_1000F5A04((_QWORD *)(v0 + 528));
  v9 = sub_1000F5A04((_QWORD *)(v0 + 528));
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 752);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
  v15 = *(_QWORD *)(v0 + 712);
  v16 = *(_QWORD *)(v0 + 688);
  if (v12)
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v26 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 592));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v26);
    swift_bridgeObjectRelease();
    sub_1000F5624((_QWORD *)(v0 + 528));
    sub_1000F5624((_QWORD *)(v0 + 528));
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: finish success", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    swift_release(v13);

    v25(v15, v16);
  }
  else
  {
    sub_1000F5624((_QWORD *)(v0 + 528));
    sub_1000F5624((_QWORD *)(v0 + 528));
    swift_release(v13);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 712);
  v22 = *(_QWORD *)(v0 + 704);
  v23 = *(_QWORD *)(v0 + 680);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B2B10()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 688);
  v6 = swift_release(*(_QWORD *)(v0 + 752));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 480) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 512) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 416) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 448) = v10;
  sub_1000F5A04((_QWORD *)(v0 + 400));
  swift_errorRetain(v1);
  sub_1000F5A04((_QWORD *)(v0 + 400));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 768);
    v31 = *(_QWORD *)(v0 + 704);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v15 = *(_QWORD *)(v0 + 688);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v33 = v17;
    *(_DWORD *)v16 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, &v33);
    swift_bridgeObjectRelease();
    sub_1000F5624((_QWORD *)(v0 + 400));
    sub_1000F5624((_QWORD *)(v0 + 400));
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 664) = v14;
    swift_errorRetain(v14);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 664, v20);
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(v21, v22, &v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finish failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v14);
    v32(v31, v15);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 768);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v25 = *(_QWORD *)(v0 + 704);
    v26 = *(_QWORD *)(v0 + 688);
    swift_errorRelease(v23);
    sub_1000F5624((_QWORD *)(v0 + 400));
    sub_1000F5624((_QWORD *)(v0 + 400));
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 712);
  v28 = *(_QWORD *)(v0 + 704);
  v29 = *(_QWORD *)(v0 + 680);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B2DA4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 680) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 688) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 696) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 704) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 712) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 720) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 208) = a4[4];
  *(_OWORD *)(v4 + 224) = v10;
  v11 = a4[7];
  *(_OWORD *)(v4 + 240) = a4[6];
  *(_OWORD *)(v4 + 256) = v11;
  v12 = a4[1];
  *(_OWORD *)(v4 + 144) = *a4;
  *(_OWORD *)(v4 + 160) = v12;
  v13 = a4[3];
  *(_OWORD *)(v4 + 176) = a4[2];
  *(_OWORD *)(v4 + 192) = v13;
  return swift_task_switch(sub_1001B2E64, 0, 0);
}

uint64_t sub_1001B2E64()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t (*v46)(_OWORD *);
  uint64_t v47;

  v1 = (_OWORD *)(v0 + 144);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 696);
  v4 = *(_QWORD *)(v0 + 688);
  v5 = sub_10000D78C(v4, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 728) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 736) = v6;
  v6(v2, v5, v4);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 128) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 64) = v10;
  sub_1000F57D4((_QWORD *)(v0 + 16));
  v11 = sub_1000F57D4((_QWORD *)(v0 + 16));
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 720);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  if (v14)
  {
    v45 = *(_QWORD *)(v0 + 720);
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v47 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 80));
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v47);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v45, v17);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_bridgeObjectRelease);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v15, v17);
  }
  *(_QWORD *)(v0 + 744) = v22;
  v23 = *(_QWORD *)(v0 + 680);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v24 = *(double *)(v0 + 232);
  v25 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v26 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  v27 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v25, NSRunLoopCommonModes, v23, v24);

  sub_100011694(v23, &qword_10054D4C8);
  *(_QWORD *)(v0 + 656) = v27;
  v28 = type metadata accessor for NSTimer.TimerPublisher(0);
  v29 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v30 = ConnectablePublisher.autoconnect()(v28, v29);
  swift_release(v27);
  *(_QWORD *)(v0 + 672) = v30;
  v31 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 352) = v31;
  v32 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 384) = v32;
  v33 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 272) = *v1;
  *(_OWORD *)(v0 + 288) = v33;
  v34 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 320) = v34;
  v35 = (_OWORD *)swift_allocObject(&unk_10050AF78, 144, 7);
  v36 = *(_OWORD *)(v0 + 224);
  v35[5] = *(_OWORD *)(v0 + 208);
  v35[6] = v36;
  v37 = *(_OWORD *)(v0 + 256);
  v35[7] = *(_OWORD *)(v0 + 240);
  v35[8] = v37;
  v38 = *(_OWORD *)(v0 + 160);
  v35[1] = *v1;
  v35[2] = v38;
  v39 = *(_OWORD *)(v0 + 192);
  v35[3] = *(_OWORD *)(v0 + 176);
  v35[4] = v39;
  sub_1000F57D4((_QWORD *)(v0 + 272));
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 752) = Publisher<>.sink(receiveValue:)(sub_1001C63A8, v35, v40, v41);
  swift_release(v35);
  swift_release(*(_QWORD *)(v0 + 672));
  v42 = *(int **)(v0 + 256);
  v46 = (uint64_t (*)(_OWORD *))((char *)v42 + *v42);
  v43 = (_QWORD *)swift_task_alloc(v42[1]);
  *(_QWORD *)(v0 + 760) = v43;
  *v43 = v0;
  v43[1] = sub_1001B3280;
  return v46(v1);
}

uint64_t sub_1001B3280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B3510;
  else
    v3 = sub_1001B32E4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B32E4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 712);
  v4 = *(_QWORD *)(v0 + 688);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 608) = v5;
  v6 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 640) = v6;
  v7 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 528) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 544) = v7;
  v8 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 576) = v8;
  sub_1000F57D4((_QWORD *)(v0 + 528));
  v9 = sub_1000F57D4((_QWORD *)(v0 + 528));
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 752);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
  v15 = *(_QWORD *)(v0 + 712);
  v16 = *(_QWORD *)(v0 + 688);
  if (v12)
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v26 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 592));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v26);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: finish success", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    swift_release(v13);

    v25(v15, v16);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    swift_release(v13);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 712);
  v22 = *(_QWORD *)(v0 + 704);
  v23 = *(_QWORD *)(v0 + 680);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B3510()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 688);
  v6 = swift_release(*(_QWORD *)(v0 + 752));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 480) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 512) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 416) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 448) = v10;
  sub_1000F57D4((_QWORD *)(v0 + 400));
  swift_errorRetain(v1);
  sub_1000F57D4((_QWORD *)(v0 + 400));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 768);
    v31 = *(_QWORD *)(v0 + 704);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v15 = *(_QWORD *)(v0 + 688);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v33 = v17;
    *(_DWORD *)v16 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, &v33);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 664) = v14;
    swift_errorRetain(v14);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 664, v20);
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(v21, v22, &v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finish failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v14);
    v32(v31, v15);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 768);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v25 = *(_QWORD *)(v0 + 704);
    v26 = *(_QWORD *)(v0 + 688);
    swift_errorRelease(v23);
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_bridgeObjectRelease);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 712);
  v28 = *(_QWORD *)(v0 + 704);
  v29 = *(_QWORD *)(v0 + 680);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B37C4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 720) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 728) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 736) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 744) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 752) = swift_task_alloc(v9);
  v10 = swift_task_alloc(v9);
  v11 = a4[4];
  *(_OWORD *)(v4 + 232) = a4[5];
  v12 = a4[7];
  *(_OWORD *)(v4 + 248) = a4[6];
  *(_OWORD *)(v4 + 264) = v12;
  v13 = *a4;
  *(_OWORD *)(v4 + 168) = a4[1];
  v14 = a4[3];
  *(_OWORD *)(v4 + 184) = a4[2];
  *(_OWORD *)(v4 + 200) = v14;
  *(_OWORD *)(v4 + 216) = v11;
  *(_QWORD *)(v4 + 760) = v10;
  *(_QWORD *)(v4 + 280) = *((_QWORD *)a4 + 16);
  *(_OWORD *)(v4 + 152) = v13;
  return swift_task_switch(sub_1001B38A8, 0, 0);
}

uint64_t sub_1001B38A8()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t (*v46)(_OWORD *);
  uint64_t v47;

  v1 = (_OWORD *)(v0 + 152);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 736);
  v4 = *(_QWORD *)(v0 + 728);
  v5 = sub_10000D78C(v4, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 768) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 776) = v6;
  v6(v2, v5, v4);
  v7 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 128) = v7;
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 280);
  v8 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 64) = v8;
  v9 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 96) = v9;
  v10 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v10;
  sub_1000F3494(v0 + 16);
  v11 = sub_1000F3494(v0 + 16);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 760);
  v16 = *(_QWORD *)(v0 + 736);
  v17 = *(_QWORD *)(v0 + 728);
  if (v14)
  {
    v45 = *(_QWORD *)(v0 + 760);
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v47 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 88));
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v47);
    swift_bridgeObjectRelease();
    sub_1000F32D4(v0 + 16);
    sub_1000F32D4(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v45, v17);
  }
  else
  {
    sub_1000F32D4(v0 + 16);
    sub_1000F32D4(v0 + 16);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v15, v17);
  }
  *(_QWORD *)(v0 + 784) = v22;
  v23 = *(_QWORD *)(v0 + 720);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v24 = *(double *)(v0 + 248);
  v25 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v26 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  v27 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v25, NSRunLoopCommonModes, v23, v24);

  sub_100011694(v23, &qword_10054D4C8);
  *(_QWORD *)(v0 + 696) = v27;
  v28 = type metadata accessor for NSTimer.TimerPublisher(0);
  v29 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v30 = ConnectablePublisher.autoconnect()(v28, v29);
  swift_release(v27);
  *(_QWORD *)(v0 + 712) = v30;
  v31 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 400) = v31;
  *(_QWORD *)(v0 + 416) = *(_QWORD *)(v0 + 280);
  v32 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 336) = v32;
  v33 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 368) = v33;
  v34 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 288) = *v1;
  *(_OWORD *)(v0 + 304) = v34;
  v35 = swift_allocObject(&unk_10050ABB8, 152, 7);
  v36 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v35 + 112) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v35 + 128) = v36;
  *(_QWORD *)(v35 + 144) = *(_QWORD *)(v0 + 280);
  v37 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v35 + 48) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v35 + 64) = v37;
  v38 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v35 + 80) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v35 + 96) = v38;
  v39 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v35 + 16) = *v1;
  *(_OWORD *)(v35 + 32) = v39;
  sub_1000F3494(v0 + 288);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 792) = Publisher<>.sink(receiveValue:)(sub_1001C5DA8, v35, v40, v41);
  swift_release(v35);
  swift_release(*(_QWORD *)(v0 + 712));
  v42 = *(int **)(v0 + 272);
  v46 = (uint64_t (*)(_OWORD *))((char *)v42 + *v42);
  v43 = (_QWORD *)swift_task_alloc(v42[1]);
  *(_QWORD *)(v0 + 800) = v43;
  *v43 = v0;
  v43[1] = sub_1001B3CBC;
  return v46(v1);
}

uint64_t sub_1001B3CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 800);
  *(_QWORD *)(*(_QWORD *)v1 + 808) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B3F48;
  else
    v3 = sub_1001B3D20;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B3D20()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 776);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 728);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_OWORD *)(v0 + 232);
  v6 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 672) = v6;
  *(_QWORD *)(v0 + 688) = *(_QWORD *)(v0 + 280);
  v7 = *(_OWORD *)(v0 + 168);
  v8 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 608) = v8;
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 640) = v5;
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 576) = v7;
  sub_1000F3494(v0 + 560);
  v9 = sub_1000F3494(v0 + 560);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 792);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v15 = *(_QWORD *)(v0 + 752);
  v16 = *(_QWORD *)(v0 + 728);
  if (v12)
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v26 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 632));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v26);
    swift_bridgeObjectRelease();
    sub_1000F32D4(v0 + 560);
    sub_1000F32D4(v0 + 560);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: finish success", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    swift_release(v13);

    v25(v15, v16);
  }
  else
  {
    sub_1000F32D4(v0 + 560);
    sub_1000F32D4(v0 + 560);
    swift_release(v13);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 752);
  v22 = *(_QWORD *)(v0 + 744);
  v23 = *(_QWORD *)(v0 + 720);
  swift_task_dealloc(*(_QWORD *)(v0 + 760));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B3F48()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 808);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 776);
  v3 = *(_QWORD *)(v0 + 768);
  v4 = *(_QWORD *)(v0 + 744);
  v5 = *(_QWORD *)(v0 + 728);
  v6 = swift_release(*(_QWORD *)(v0 + 792));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 232);
  v8 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 536) = v8;
  *(_QWORD *)(v0 + 552) = *(_QWORD *)(v0 + 280);
  v9 = *(_OWORD *)(v0 + 168);
  v10 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 472) = v10;
  *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 504) = v7;
  *(_OWORD *)(v0 + 424) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 440) = v9;
  sub_1000F3494(v0 + 424);
  swift_errorRetain(v1);
  sub_1000F3494(v0 + 424);
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 808);
    v31 = *(_QWORD *)(v0 + 744);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    v15 = *(_QWORD *)(v0 + 728);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v33 = v17;
    *(_DWORD *)v16 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 496));
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, &v33);
    swift_bridgeObjectRelease();
    sub_1000F32D4(v0 + 424);
    sub_1000F32D4(v0 + 424);
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 704) = v14;
    swift_errorRetain(v14);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 704, v20);
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(v21, v22, &v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finish failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v14);
    v32(v31, v15);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 808);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    v25 = *(_QWORD *)(v0 + 744);
    v26 = *(_QWORD *)(v0 + 728);
    swift_errorRelease(v23);
    sub_1000F32D4(v0 + 424);
    sub_1000F32D4(v0 + 424);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 752);
  v28 = *(_QWORD *)(v0 + 744);
  v29 = *(_QWORD *)(v0 + 720);
  swift_task_dealloc(*(_QWORD *)(v0 + 760));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B41F8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B42B8, 0, 0);
}

uint64_t sub_1001B42B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AF00, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B47A0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B4860, 0, 0);
}

uint64_t sub_1001B4860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AD20, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B4D48(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B4E08, 0, 0);
}

uint64_t sub_1001B4E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050A870, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B52F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v5 + 840) = a4;
  v7 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v5 + 848) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 856) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 864) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 872) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 880) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 888) = swift_task_alloc(v10);
  *(_BYTE *)(v5 + 944) = a5;
  return swift_task_switch(sub_1001B5398, 0, 0);
}

uint64_t sub_1001B5398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _QWORD *v38;
  int *v40;
  uint64_t v41;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 888);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 856);
  v4 = *(_QWORD *)(v0 + 840);
  v5 = sub_10000D78C(v3, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 896) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 904) = v6;
  v6(v1, v5, v3);
  v7 = sub_100011370(v4, v0 + 216, &qword_10054D130);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 888);
  v12 = *(_QWORD *)(v0 + 864);
  v13 = *(_QWORD *)(v0 + 856);
  if (v10)
  {
    v14 = swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v41 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 353));
    *(_QWORD *)(v14 + 4) = sub_1000BA30C(v16, v17, &v41);
    swift_bridgeObjectRelease();
    sub_100011694(v0 + 216, &qword_10054D130);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: finishing…", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_100011694(v0 + 216, &qword_10054D130);
  }

  v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v18(v11, v13);
  *(_QWORD *)(v0 + 912) = v18;
  v19 = *(_QWORD *)(v0 + 848);
  v20 = *(_QWORD *)(v0 + 840);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v21 = *(double *)(v20 + 160);
  v22 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v23 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v19, 1, 1, v23);
  v24 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v22, NSRunLoopCommonModes, v19, v21);

  sub_100011694(v19, &qword_10054D4C8);
  *(_QWORD *)(v0 + 824) = v24;
  v25 = type metadata accessor for NSTimer.TimerPublisher(0);
  v26 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v27 = ConnectablePublisher.autoconnect()(v25, v26);
  swift_release(v24);
  *(_QWORD *)(v0 + 816) = v27;
  sub_100011370(v20, v0 + 16, &qword_10054D130);
  v28 = swift_allocObject(&unk_10050A8E8, 216, 7);
  v29 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v28 + 176) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v28 + 192) = v29;
  *(_QWORD *)(v28 + 208) = *(_QWORD *)(v0 + 208);
  v30 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v28 + 112) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v28 + 128) = v30;
  v31 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v28 + 144) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v28 + 160) = v31;
  v32 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v28 + 64) = v32;
  v33 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v28 + 80) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v28 + 96) = v33;
  v34 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v28 + 32) = v34;
  v35 = sub_10000B4C8(&qword_10054D4E0);
  v36 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 920) = Publisher<>.sink(receiveValue:)(sub_1001C57C8, v28, v35, v36);
  swift_release(v28);
  swift_release(*(_QWORD *)(v0 + 816));
  v37 = *(int **)(v20 + 184);
  v40 = (int *)((char *)v37 + *v37);
  v38 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 928) = v38;
  *v38 = v0;
  v38[1] = sub_1001B577C;
  return ((uint64_t (*)(_QWORD, uint64_t))v40)(*(_QWORD *)(v0 + 840), v0 + 944);
}

uint64_t sub_1001B577C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 928);
  *(_QWORD *)(*(_QWORD *)v1 + 936) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B59D4;
  else
    v3 = sub_1001B57E0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B57E0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 880);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 840);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v6 = sub_100011370(v5, v0 + 616, &qword_10054D130);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 920);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v12 = *(_QWORD *)(v0 + 880);
  v13 = *(_QWORD *)(v0 + 856);
  if (v9)
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
    v14 = swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v23 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 753));
    *(_QWORD *)(v14 + 4) = sub_1000BA30C(v16, v17, &v23);
    swift_bridgeObjectRelease();
    sub_100011694(v0 + 616, &qword_10054D130);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s: finish success", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
    swift_release(v10);

    v22(v12, v13);
  }
  else
  {
    sub_100011694(v0 + 616, &qword_10054D130);
    swift_release(v10);

    v11(v12, v13);
  }
  v18 = *(_QWORD *)(v0 + 880);
  v19 = *(_QWORD *)(v0 + 872);
  v20 = *(_QWORD *)(v0 + 848);
  swift_task_dealloc(*(_QWORD *)(v0 + 888));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B59D4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 936);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 872);
  v5 = *(_QWORD *)(v0 + 856);
  v6 = *(_QWORD *)(v0 + 840);
  v7 = swift_release(*(_QWORD *)(v0 + 920));
  v2(v4, v3, v5, v7);
  sub_100011370(v6, v0 + 416, &qword_10054D130);
  swift_errorRetain(v1);
  v8 = swift_errorRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 936);
    v28 = *(_QWORD *)(v0 + 872);
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
    v12 = *(_QWORD *)(v0 + 856);
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v30 = v14;
    *(_DWORD *)v13 = 136446466;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 553));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v30);
    swift_bridgeObjectRelease();
    sub_100011694(v0 + 416, &qword_10054D130);
    *(_WORD *)(v13 + 12) = 2082;
    *(_QWORD *)(v0 + 832) = v11;
    swift_errorRetain(v11);
    v17 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v18 = (char *)String.init<A>(describing:)(v0 + 832, v17);
    *(_QWORD *)(v13 + 14) = sub_1000BA30C(v18, v19, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: finish failed: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v11);
    v29(v28, v12);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 936);
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
    v22 = *(_QWORD *)(v0 + 872);
    v23 = *(_QWORD *)(v0 + 856);
    swift_errorRelease(v20);
    sub_100011694(v0 + 416, &qword_10054D130);
    swift_errorRelease(v20);
    swift_errorRelease(v20);

    v21(v22, v23);
  }
  v24 = *(_QWORD *)(v0 + 880);
  v25 = *(_QWORD *)(v0 + 872);
  v26 = *(_QWORD *)(v0 + 848);
  swift_task_dealloc(*(_QWORD *)(v0 + 888));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B5C50(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 680) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 688) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 696) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 704) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 712) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 720) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 208) = a4[4];
  *(_OWORD *)(v4 + 224) = v10;
  v11 = a4[7];
  *(_OWORD *)(v4 + 240) = a4[6];
  *(_OWORD *)(v4 + 256) = v11;
  v12 = a4[1];
  *(_OWORD *)(v4 + 144) = *a4;
  *(_OWORD *)(v4 + 160) = v12;
  v13 = a4[3];
  *(_OWORD *)(v4 + 176) = a4[2];
  *(_OWORD *)(v4 + 192) = v13;
  return swift_task_switch(sub_1001B5D10, 0, 0);
}

uint64_t sub_1001B5D10()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t (*v46)(_OWORD *);
  uint64_t v47;

  v1 = (_OWORD *)(v0 + 144);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 696);
  v4 = *(_QWORD *)(v0 + 688);
  v5 = sub_10000D78C(v4, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 728) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 736) = v6;
  v6(v2, v5, v4);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 128) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 64) = v10;
  sub_1000F41E8((_QWORD *)(v0 + 16));
  v11 = sub_1000F41E8((_QWORD *)(v0 + 16));
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 720);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  if (v14)
  {
    v45 = *(_QWORD *)(v0 + 720);
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v47 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 80));
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v47);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v45, v17);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v15, v17);
  }
  *(_QWORD *)(v0 + 744) = v22;
  v23 = *(_QWORD *)(v0 + 680);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v24 = *(double *)(v0 + 232);
  v25 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v26 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  v27 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v25, NSRunLoopCommonModes, v23, v24);

  sub_100011694(v23, &qword_10054D4C8);
  *(_QWORD *)(v0 + 656) = v27;
  v28 = type metadata accessor for NSTimer.TimerPublisher(0);
  v29 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v30 = ConnectablePublisher.autoconnect()(v28, v29);
  swift_release(v27);
  *(_QWORD *)(v0 + 672) = v30;
  v31 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 352) = v31;
  v32 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 384) = v32;
  v33 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 272) = *v1;
  *(_OWORD *)(v0 + 288) = v33;
  v34 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 320) = v34;
  v35 = (_OWORD *)swift_allocObject(&unk_10050AC30, 144, 7);
  v36 = *(_OWORD *)(v0 + 224);
  v35[5] = *(_OWORD *)(v0 + 208);
  v35[6] = v36;
  v37 = *(_OWORD *)(v0 + 256);
  v35[7] = *(_OWORD *)(v0 + 240);
  v35[8] = v37;
  v38 = *(_OWORD *)(v0 + 160);
  v35[1] = *v1;
  v35[2] = v38;
  v39 = *(_OWORD *)(v0 + 192);
  v35[3] = *(_OWORD *)(v0 + 176);
  v35[4] = v39;
  sub_1000F41E8((_QWORD *)(v0 + 272));
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 752) = Publisher<>.sink(receiveValue:)(sub_1001C5EF0, v35, v40, v41);
  swift_release(v35);
  swift_release(*(_QWORD *)(v0 + 672));
  v42 = *(int **)(v0 + 256);
  v46 = (uint64_t (*)(_OWORD *))((char *)v42 + *v42);
  v43 = (_QWORD *)swift_task_alloc(v42[1]);
  *(_QWORD *)(v0 + 760) = v43;
  *v43 = v0;
  v43[1] = sub_1001B612C;
  return v46(v1);
}

uint64_t sub_1001B612C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B63BC;
  else
    v3 = sub_1001B6190;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B6190()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 712);
  v4 = *(_QWORD *)(v0 + 688);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 608) = v5;
  v6 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 624) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 640) = v6;
  v7 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 528) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 544) = v7;
  v8 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 576) = v8;
  sub_1000F41E8((_QWORD *)(v0 + 528));
  v9 = sub_1000F41E8((_QWORD *)(v0 + 528));
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 752);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
  v15 = *(_QWORD *)(v0 + 712);
  v16 = *(_QWORD *)(v0 + 688);
  if (v12)
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v26 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 592));
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v26);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_release);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: finish success", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    swift_release(v13);

    v25(v15, v16);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 528), (void (*)(uint64_t))&_swift_release);
    swift_release(v13);

    v14(v15, v16);
  }
  v21 = *(_QWORD *)(v0 + 712);
  v22 = *(_QWORD *)(v0 + 704);
  v23 = *(_QWORD *)(v0 + 680);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B63BC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 736);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 688);
  v6 = swift_release(*(_QWORD *)(v0 + 752));
  v2(v4, v3, v5, v6);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 480) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 512) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 416) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 448) = v10;
  sub_1000F41E8((_QWORD *)(v0 + 400));
  swift_errorRetain(v1);
  sub_1000F41E8((_QWORD *)(v0 + 400));
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 768);
    v31 = *(_QWORD *)(v0 + 704);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v15 = *(_QWORD *)(v0 + 688);
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v33 = v17;
    *(_DWORD *)v16 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 464));
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, &v33);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
    *(_WORD *)(v16 + 12) = 2082;
    *(_QWORD *)(v0 + 664) = v14;
    swift_errorRetain(v14);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 664, v20);
    *(_QWORD *)(v16 + 14) = sub_1000BA30C(v21, v22, &v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finish failed: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v14);
    v32(v31, v15);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 768);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
    v25 = *(_QWORD *)(v0 + 704);
    v26 = *(_QWORD *)(v0 + 688);
    swift_errorRelease(v23);
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 400), (void (*)(uint64_t))&_swift_release);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v24(v25, v26);
  }
  v27 = *(_QWORD *)(v0 + 712);
  v28 = *(_QWORD *)(v0 + 704);
  v29 = *(_QWORD *)(v0 + 680);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6670(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 680) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 688) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 696) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 704) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 712) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 720) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 208) = a4[4];
  *(_OWORD *)(v4 + 224) = v10;
  v11 = a4[7];
  *(_OWORD *)(v4 + 240) = a4[6];
  *(_OWORD *)(v4 + 256) = v11;
  v12 = a4[1];
  *(_OWORD *)(v4 + 144) = *a4;
  *(_OWORD *)(v4 + 160) = v12;
  v13 = a4[3];
  *(_OWORD *)(v4 + 176) = a4[2];
  *(_OWORD *)(v4 + 192) = v13;
  return swift_task_switch(sub_1001B6730, 0, 0);
}

uint64_t sub_1001B6730()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t (*v46)(_OWORD *);
  uint64_t v47;

  v1 = (_OWORD *)(v0 + 144);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 696);
  v4 = *(_QWORD *)(v0 + 688);
  v5 = sub_10000D78C(v4, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 728) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 736) = v6;
  v6(v2, v5, v4);
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 128) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 64) = v10;
  sub_1000F41E8((_QWORD *)(v0 + 16));
  v11 = sub_1000F41E8((_QWORD *)(v0 + 16));
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 720);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  if (v14)
  {
    v45 = *(_QWORD *)(v0 + 720);
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v47 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(*(_BYTE *)(v0 + 80));
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v47);
    swift_bridgeObjectRelease();
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v45, v17);
  }
  else
  {
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);
    sub_1000F56AC((_QWORD *)(v0 + 16), (void (*)(uint64_t))&_swift_release);

    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v15, v17);
  }
  *(_QWORD *)(v0 + 744) = v22;
  v23 = *(_QWORD *)(v0 + 680);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v24 = *(double *)(v0 + 232);
  v25 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v26 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  v27 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v25, NSRunLoopCommonModes, v23, v24);

  sub_100011694(v23, &qword_10054D4C8);
  *(_QWORD *)(v0 + 656) = v27;
  v28 = type metadata accessor for NSTimer.TimerPublisher(0);
  v29 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v30 = ConnectablePublisher.autoconnect()(v28, v29);
  swift_release(v27);
  *(_QWORD *)(v0 + 672) = v30;
  v31 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 352) = v31;
  v32 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 384) = v32;
  v33 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 272) = *v1;
  *(_OWORD *)(v0 + 288) = v33;
  v34 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 320) = v34;
  v35 = (_OWORD *)swift_allocObject(&unk_10050ACA8, 144, 7);
  v36 = *(_OWORD *)(v0 + 224);
  v35[5] = *(_OWORD *)(v0 + 208);
  v35[6] = v36;
  v37 = *(_OWORD *)(v0 + 256);
  v35[7] = *(_OWORD *)(v0 + 240);
  v35[8] = v37;
  v38 = *(_OWORD *)(v0 + 160);
  v35[1] = *v1;
  v35[2] = v38;
  v39 = *(_OWORD *)(v0 + 192);
  v35[3] = *(_OWORD *)(v0 + 176);
  v35[4] = v39;
  sub_1000F41E8((_QWORD *)(v0 + 272));
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 752) = Publisher<>.sink(receiveValue:)(sub_1001C6658, v35, v40, v41);
  swift_release(v35);
  swift_release(*(_QWORD *)(v0 + 672));
  v42 = *(int **)(v0 + 256);
  v46 = (uint64_t (*)(_OWORD *))((char *)v42 + *v42);
  v43 = (_QWORD *)swift_task_alloc(v42[1]);
  *(_QWORD *)(v0 + 760) = v43;
  *v43 = v0;
  v43[1] = sub_1001B6B4C;
  return v46(v1);
}

uint64_t sub_1001B6B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001C6640;
  else
    v3 = sub_1001C6644;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B6BB0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B6C70, 0, 0);
}

uint64_t sub_1001B6C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AD98, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B7158(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B7218, 0, 0);
}

uint64_t sub_1001B7218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050A9D8, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B7700(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B77C0, 0, 0);
}

uint64_t sub_1001B77C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AA50, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C5B04, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B7CA8;
  return v51(v0 + 16);
}

uint64_t sub_1001B7CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B7FC4;
  else
    v3 = sub_1001B7D0C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B7D0C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 56);
  v28 = *(_BYTE *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v5, 2);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  v29 = v9;
  swift_retain_n(v9, 2);
  v31 = v10;
  v11 = swift_retain_n(v10, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v30 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 168);
  if (v14)
  {
    v27 = *(_QWORD *)(v0 + 160);
    v18 = swift_slowAlloc(12, -1);
    v26 = v15;
    v19 = swift_slowAlloc(32, -1);
    v32 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v28);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v32);
    swift_bridgeObjectRelease();
    swift_release_n(v5, 2);
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v29, 2);
    swift_release_n(v31, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finish success", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
    swift_release(v30);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v27);
  }
  else
  {
    swift_release_n(v5, 2);
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v29, 2);
    swift_release_n(v31, 2);
    swift_release(v30);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B7FC4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *log;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 208);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = swift_release(*(_QWORD *)(v0 + 216));
  v2(v4, v3, v5, v6);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_BYTE *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 120);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  swift_errorRetain(v1);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  v14 = swift_errorRetain(v1);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  log = v15;
  if (os_log_type_enabled(v15, v16))
  {
    v30 = *(_QWORD *)(v0 + 232);
    v32 = *(_QWORD *)(v0 + 168);
    v33 = *(_QWORD *)(v0 + 160);
    v34 = *(_QWORD *)(v0 + 176);
    v17 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v37 = v31;
    *(_DWORD *)v17 = 136446466;
    v18 = (char *)ActionType.rawValue.getter(v10);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, &v37);
    swift_bridgeObjectRelease();
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v11, 2);
    swift_release_n(v12, 2);
    swift_release_n(v13, 2);
    *(_WORD *)(v17 + 12) = 2082;
    *(_QWORD *)(v0 + 144) = v30;
    swift_errorRetain(v30);
    v20 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v21 = (char *)String.init<A>(describing:)(v0 + 144, v20);
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(v21, v22, &v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v30);
    swift_errorRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, log, v16, "%{public}s: finish failed: %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 168);
    v35 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 160);
    swift_errorRelease(v23);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v11, 2);
    swift_release_n(v12, 2);
    swift_release_n(v13, 2);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v35, v25);
  }
  v26 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 176);
  v28 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B832C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B83EC, 0, 0);
}

uint64_t sub_1001B83EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AAC8, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B88D4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 160) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 192) = swift_task_alloc(v9);
  v10 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = a4[6];
  v11 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v12;
  return swift_task_switch(sub_1001B8994, 0, 0);
}

uint64_t sub_1001B8994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 200) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 208) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 56);
  v47 = *(_BYTE *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 120);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  swift_retain_n(v10, 2);
  v12 = swift_retain_n(v11, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 160);
  v52 = *(_QWORD *)(v0 + 168);
  if (v15)
  {
    v45 = *(_QWORD *)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v44 = v17;
    v19 = swift_slowAlloc(32, -1);
    v53 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v53);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v44);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    swift_release_n(v11, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v16, v17);
  }
  v22 = *(_QWORD *)(v0 + 152);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 88);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 128) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 136) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 56);
  v50 = *(_BYTE *)(v0 + 64);
  v32 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 96);
  v37 = *(int **)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v38 = swift_allocObject(&unk_10050AB40, 128, 7);
  *(_QWORD *)(v38 + 16) = v30;
  v39 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v38 + 24) = v39;
  v46 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v38 + 40) = v46;
  *(_QWORD *)(v38 + 56) = v31;
  *(_BYTE *)(v38 + 64) = v50;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v33;
  *(_QWORD *)(v38 + 88) = v34;
  *(_QWORD *)(v38 + 96) = v48;
  *(_QWORD *)(v38 + 104) = v35;
  *(_QWORD *)(v38 + 112) = v37;
  *(_QWORD *)(v38 + 120) = v36;
  swift_retain(v39);
  swift_retain(v46);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v36);
  v40 = sub_10000B4C8(&qword_10054D4E0);
  v41 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 216) = Publisher<>.sink(receiveValue:)(sub_1001C6650, v38, v40, v41);
  swift_release(v38);
  swift_release(*(_QWORD *)(v0 + 136));
  v51 = (uint64_t (*)(uint64_t))((char *)v37 + *v37);
  v42 = (_QWORD *)swift_task_alloc(v37[1]);
  *(_QWORD *)(v0 + 224) = v42;
  *v42 = v0;
  v42[1] = sub_1001B1830;
  return v51(v0 + 16);
}

uint64_t sub_1001B8E7C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = sub_10000B4C8(&qword_10054D4C8);
  *(_QWORD *)(v4 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v4 + 144) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 152) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 160) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 168) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v9);
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v11;
  v12 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v12;
  return swift_task_switch(sub_1001B8F34, 0, 0);
}

uint64_t sub_1001B8F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = sub_10000D78C(v2, (uint64_t)qword_10054D498);
  *(_QWORD *)(v0 + 184) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 192) = v5;
  v5(v1, v4, v2);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 40);
  v47 = *(_BYTE *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 104);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  swift_retain_n(v9, 2);
  v49 = v10;
  v11 = swift_retain_n(v10, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 152);
  if (v14)
  {
    v44 = *(_QWORD *)(v0 + 176);
    v18 = swift_slowAlloc(12, -1);
    v43 = v16;
    v19 = swift_slowAlloc(32, -1);
    v50 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = (char *)ActionType.rawValue.getter(v47);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v20, v21, &v50);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: finishing…", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v44, v43);
  }
  else
  {
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v9, 2);
    swift_release_n(v49, 2);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  v22 = *(_QWORD *)(v0 + 136);
  sub_1000DD108(0, (unint64_t *)&qword_10054D4D0, NSTimer_ptr);
  v23 = *(double *)(v0 + 72);
  v24 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v25 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  v26 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v24, NSRunLoopCommonModes, v22, v23);

  sub_100011694(v22, &qword_10054D4C8);
  *(_QWORD *)(v0 + 112) = v26;
  v27 = type metadata accessor for NSTimer.TimerPublisher(0);
  v28 = sub_10001254C((unint64_t *)&qword_10054D4D8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v29 = ConnectablePublisher.autoconnect()(v27, v28);
  swift_release(v26);
  *(_QWORD *)(v0 + 120) = v29;
  v30 = *(_QWORD *)(v0 + 16);
  v31 = *(_QWORD *)(v0 + 40);
  LOBYTE(v29) = *(_BYTE *)(v0 + 48);
  v32 = *(_QWORD *)(v0 + 56);
  v33 = *(_QWORD *)(v0 + 64);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = *(_QWORD *)(v0 + 88);
  v36 = *(int **)(v0 + 96);
  v45 = *(_QWORD *)(v0 + 80);
  v48 = *(_QWORD *)(v0 + 104);
  v37 = swift_allocObject(&unk_10050A960, 112, 7);
  *(_QWORD *)(v37 + 16) = v30;
  v38 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v37 + 24) = v38;
  *(_QWORD *)(v37 + 40) = v31;
  *(_BYTE *)(v37 + 48) = v29;
  *(_QWORD *)(v37 + 56) = v32;
  *(_QWORD *)(v37 + 64) = v33;
  *(_QWORD *)(v37 + 72) = v34;
  *(_QWORD *)(v37 + 80) = v45;
  *(_QWORD *)(v37 + 88) = v35;
  *(_QWORD *)(v37 + 96) = v36;
  *(_QWORD *)(v37 + 104) = v48;
  swift_retain(v38);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_retain(v48);
  v39 = sub_10000B4C8(&qword_10054D4E0);
  v40 = sub_100012324(&qword_10054D4E8, &qword_10054D4E0, (const char *)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  *(_QWORD *)(v0 + 200) = Publisher<>.sink(receiveValue:)(sub_1001C58FC, v37, v39, v40);
  swift_release(v37);
  swift_release(*(_QWORD *)(v0 + 120));
  v46 = (uint64_t (*)(uint64_t))((char *)v36 + *v36);
  v41 = (_QWORD *)swift_task_alloc(v36[1]);
  *(_QWORD *)(v0 + 208) = v41;
  *v41 = v0;
  v41[1] = sub_1001B93D0;
  return v46(v0 + 16);
}

uint64_t sub_1001B93D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001B96C0;
  else
    v3 = sub_1001B9434;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001B9434()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  AnyCancellable.cancel()();
  v1(v3, v2, v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 40);
  v27 = *(_BYTE *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 104);
  swift_retain_n(v5, 2);
  swift_retain_n(v6, 2);
  swift_retain_n(v7, 2);
  swift_retain_n(v8, 2);
  v29 = v9;
  v10 = swift_retain_n(v9, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v28 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 152);
  if (v13)
  {
    v26 = *(_QWORD *)(v0 + 168);
    v17 = swift_slowAlloc(12, -1);
    v25 = v16;
    v18 = swift_slowAlloc(32, -1);
    v30 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = (char *)ActionType.rawValue.getter(v27);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v19, v20, &v30);
    swift_bridgeObjectRelease();
    swift_release_n(v5, 2);
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v29, 2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s: finish success", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    swift_release(v28);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v15);
  }
  else
  {
    swift_release_n(v5, 2);
    swift_release_n(v6, 2);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v29, 2);
    swift_release(v28);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  v21 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B96C0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *log;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 192);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = swift_release(*(_QWORD *)(v0 + 200));
  v2(v4, v3, v5, v6);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_BYTE *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 104);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  swift_errorRetain(v1);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  v13 = swift_errorRetain(v1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  log = v14;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = *(_QWORD *)(v0 + 216);
    v33 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 144);
    v35 = *(_QWORD *)(v0 + 160);
    v17 = v9;
    v18 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v37 = v32;
    *(_DWORD *)v18 = 136446466;
    v19 = (char *)ActionType.rawValue.getter(v17);
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v19, v20, &v37);
    swift_bridgeObjectRelease();
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v10, 2);
    swift_release_n(v11, 2);
    swift_release_n(v12, 2);
    *(_WORD *)(v18 + 12) = 2082;
    *(_QWORD *)(v0 + 128) = v16;
    swift_errorRetain(v16);
    v21 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v22 = (char *)String.init<A>(describing:)(v0 + 128, v21);
    *(_QWORD *)(v18 + 14) = sub_1000BA30C(v22, v23, &v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, log, v15, "%{public}s: finish failed: %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 144);
    swift_errorRelease(v24);
    swift_release_n(v7, 2);
    swift_release_n(v8, 2);
    swift_release_n(v10, 2);
    swift_release_n(v11, 2);
    swift_release_n(v12, 2);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B99F0(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1000F5A04((_QWORD *)a2);
  v10 = sub_1000F5A04((_QWORD *)a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(a2 + 64));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease();
    sub_1000F5624((_QWORD *)a2);
    sub_1000F5624((_QWORD *)a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000F5624((_QWORD *)a2);
    sub_1000F5624((_QWORD *)a2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001B9BCC(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1000F3494(a2);
  v10 = sub_1000F3494(a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(a2 + 72));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease();
    sub_1000F32D4(a2);
    sub_1000F32D4(a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000F32D4(a2);
    sub_1000F32D4(a2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001B9DA8(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v19;
  _BYTE v20[200];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = sub_100011370(a2, (uint64_t)v20, &qword_10054D130);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(v20[137]);
    v17 = v16;
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease(v17);
    sub_100011694((uint64_t)v20, &qword_10054D130);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_100011694((uint64_t)v20, &qword_10054D130);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001B9F8C(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054B9B8 != -1)
    swift_once(&qword_10054B9B8, sub_1000CF368);
  v9 = sub_10000D78C(v5, (uint64_t)qword_10054D498);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1000F2C78((_QWORD *)a2);
  v10 = sub_1000F2C78((_QWORD *)a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = (char *)ActionType.rawValue.getter(*(_BYTE *)(a2 + 32));
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v15, v16, &v19);
    swift_bridgeObjectRelease();
    sub_1001C593C((_QWORD *)a2);
    sub_1001C593C((_QWORD *)a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a3, (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1001C593C((_QWORD *)a2);
    sub_1001C593C((_QWORD *)a2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NSFileManager.Failure.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void NSFileManager.Failure.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1001BA1CC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t MusicLibrary.ActionableState.description.getter(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  _QWORD v16[2];
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000B4C8(&qword_100551660);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = 1701736270;
  switch(HIBYTE(a2))
  {
    case 2:
      return result;
    case 3:
      result = 0x6164644120959EE2;
      break;
    case 4:
      result = 0x1000000000000013;
      break;
    case 5:
      result = 0x1000000000000014;
      break;
    default:
      if ((a2 & 0x100) != 0)
      {
        result = 0x100000000000001DLL;
      }
      else if ((a2 & 1) != 0)
      {
        result = 0x100000000000001ELL;
      }
      else
      {
        v18 = 0;
        v19 = 0xE000000000000000;
        _StringGuts.grow(_:)(24);
        v12 = swift_bridgeObjectRelease();
        v18 = 0x1000000000000014;
        v19 = 0x800000010044BD20;
        v16[1] = a1;
        static Locale.autoupdatingCurrent.getter(v12);
        v13 = sub_1001BA454();
        FloatingPointFormatStyle.Percent.init(locale:)(v6, &type metadata for Double, v13);
        v14 = sub_100012324(&qword_100551670, &qword_100551660, (const char *)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
        BinaryFloatingPoint.formatted<A>(_:)(&v17, v10, &type metadata for Double, v7, v13, v14);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 8233;
        v15._object = (void *)0xE200000000000000;
        String.append(_:)(v15);
        result = v18;
      }
      break;
  }
  return result;
}

unint64_t sub_1001BA454()
{
  unint64_t result;

  result = qword_100551668;
  if (!qword_100551668)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100551668);
  }
  return result;
}

uint64_t sub_1001BA49C(uint64_t a1, uint64_t a2)
{
  return _s8MusicKit0A7LibraryC0A4CoreE15ActionableStateO21__derived_enum_equalsySbAF_AFtFZ_0(*(_QWORD *)a1, *(_WORD *)(a1 + 8), *(_QWORD *)a2, *(_WORD *)(a2 + 8));
}

uint64_t sub_1001BA4B4()
{
  uint64_t v0;

  return MusicLibrary.ActionableState.description.getter(*(_QWORD *)v0, *(_WORD *)(v0 + 8));
}

uint64_t MusicLibrary.performAction<A>(for:on:itemState:alertPresenter:noticePresenter:presentationSource:actionsObserver:metricsReportingContext:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  uint64_t v36;

  *(_QWORD *)(v9 + 1176) = v8;
  *(_QWORD *)(v9 + 1168) = v36;
  *(_OWORD *)(v9 + 1152) = v35;
  *(_QWORD *)(v9 + 1144) = a8;
  *(_QWORD *)(v9 + 1136) = a7;
  *(_QWORD *)(v9 + 1128) = a6;
  *(_QWORD *)(v9 + 1120) = a5;
  *(_QWORD *)(v9 + 1112) = a4;
  *(_QWORD *)(v9 + 1104) = a3;
  *(_WORD *)(v9 + 354) = a2;
  *(_QWORD *)(v9 + 1096) = a1;
  v10 = *a4;
  *(_QWORD *)(v9 + 1184) = *a4;
  v11 = type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons(0);
  *(_QWORD *)(v9 + 1192) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 1200) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1208) = swift_task_alloc(v13);
  *(_QWORD *)(v9 + 1216) = swift_task_alloc(v13);
  *(_QWORD *)(v9 + 1224) = swift_task_alloc(v13);
  v14 = sub_10000B4C8(&qword_10054C950);
  *(_QWORD *)(v9 + 1232) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_10000B4C8(&qword_10054CD28) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1240) = swift_task_alloc(v15);
  *(_QWORD *)(v9 + 1248) = swift_task_alloc(v15);
  v16 = type metadata accessor for Actions.MetricsReportingContext(0);
  *(_QWORD *)(v9 + 1256) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 1264) = v17;
  *(_QWORD *)(v9 + 1272) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Notice.Variant(0);
  *(_QWORD *)(v9 + 1280) = v18;
  *(_QWORD *)(v9 + 1288) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MusicLibrary.AddStatus.UnaddableReason(0);
  *(_QWORD *)(v9 + 1296) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v9 + 1304) = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1312) = swift_task_alloc(v21);
  *(_QWORD *)(v9 + 1320) = swift_task_alloc(v21);
  *(_QWORD *)(v9 + 1328) = swift_task_alloc(v21);
  v22 = type metadata accessor for MusicLibrary.DownloadStatus(0);
  *(_QWORD *)(v9 + 1336) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v9 + 1344) = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1352) = swift_task_alloc(v24);
  *(_QWORD *)(v9 + 1360) = swift_task_alloc(v24);
  v25 = type metadata accessor for MusicLibrary.AddStatus(0);
  *(_QWORD *)(v9 + 1368) = v25;
  v26 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v9 + 1376) = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1384) = swift_task_alloc(v27);
  *(_QWORD *)(v9 + 1392) = swift_task_alloc(v27);
  v28 = *(_QWORD *)(v10 + class metadata base offset for MusicLibrary.ItemState);
  *(_QWORD *)(v9 + 1400) = v28;
  v29 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v9 + 1408) = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1416) = swift_task_alloc(v30);
  *(_QWORD *)(v9 + 1424) = swift_task_alloc(v30);
  *(_QWORD *)(v9 + 1432) = swift_task_alloc(v30);
  *(_QWORD *)(v9 + 1440) = swift_task_alloc(v30);
  v31 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v9 + 1448) = v31;
  *(_QWORD *)(v9 + 1456) = static MainActor.shared.getter(v31);
  v32 = dispatch thunk of Actor.unownedExecutor.getter(v31, &protocol witness table for MainActor);
  *(_QWORD *)(v9 + 1464) = v32;
  *(_QWORD *)(v9 + 1472) = v33;
  return swift_task_switch(sub_1001BA764, v32, v33);
}

uint64_t sub_1001BA764()
{
  NSObject *v0;
  os_log_t v1;
  Class isa;
  Class v3;
  Class v4;
  Class v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  Class v12;
  Class v13;
  Class v14;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  objc_class *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  Class v33;
  Class v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  Class v45;
  Class v46;
  Class v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  Class v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  void (*v76)(Class, Class, Class);
  Class v77;
  Class v78;
  Class v79;
  Class v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  void (*v85)(Class, Class);
  Class v86;
  Class v87;
  Class v88;
  os_log_t v89;
  Class v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  Class v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  uint8_t *v115;
  objc_class *v116;
  Class v118;
  Class v119;
  Class v120;
  uint64_t v121;
  Class v122;
  Class v123;
  Class v124;
  Class v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  Class v130;
  Class v131;
  Class v132;
  Class v133;
  NSObject *v134;
  uint64_t (*v135)(Class, Class, Class);
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  _BOOL4 v139;
  Class v140;
  Class v141;
  Class v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  objc_class *v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  Class v158;
  uint64_t v159;
  objc_class *v160;
  objc_class *v161;
  int64x2_t v162;
  int64x2_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  objc_class *v167;
  NSObject *v168;
  os_log_type_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  Class v173;
  Class v174;
  uint64_t v175;
  _QWORD *v176;
  Class v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (*v182)();
  uint64_t v183;
  objc_class *v184;
  Class v185;
  uint64_t v186;
  NSObject *v187;
  os_log_type_t v188;
  _BOOL4 v189;
  void (*v190)(Class, Class);
  Class v191;
  Class v192;
  Class v193;
  os_log_t v194;
  Class v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  Class v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint8_t *v216;
  Class v217;
  Class v218;
  Class v219;
  uint64_t v220;
  Class v221;
  Class v222;
  Class v223;
  Class v224;
  NSObject *v225;
  Class v226;
  Class v227;
  Class v228;
  __int128 v229;
  uint64_t v230;
  NSObject *v231;
  os_log_type_t v232;
  _BOOL4 v233;
  Class v234;
  _QWORD *p_isa;
  Class v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  void (*v244)(Class, uint64_t);
  NSObject *v245;
  os_log_type_t v246;
  uint8_t *v247;
  Class v248;
  Class v249;
  uint64_t ObjectType;
  void (*v251)(char *, ValueMetadata *, unint64_t, uint64_t, Class);
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  Class v255;
  uint64_t v256;
  Class v257;
  Class v258;
  unint64_t v259;
  uint64_t v260;
  objc_class *v261;
  Class v262;
  Class v263;
  objc_class *v264;
  Class v265;
  Class v266;
  Class v267;
  uint64_t v268;
  uint64_t v269;
  NSObject *v270;
  os_log_type_t v271;
  uint8_t *v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  objc_class *v277;
  Class v278;
  Class v279;
  Class v280;
  Class v281;
  __n128 v282;
  void (*v283)(Class, Class, __n128);
  uint64_t v284;
  NSObject *v285;
  os_log_type_t v286;
  Class v287;
  Class v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  NSObject *v293;
  char *v294;
  char *v295;
  uint64_t v296;
  NSObject *v297;
  os_log_type_t v298;
  uint8_t *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  int *v304;
  objc_class *v305;
  os_log_t v306;
  uint64_t v307;
  Class v308;
  Class v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  NSObject *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  Class v329;
  uint64_t v330;
  Class v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  objc_class *v337;
  uint64_t v338;
  uint64_t WitnessTable;
  uint64_t v340;
  uint64_t v341;
  NSObject *v342;
  os_log_type_t v343;
  uint8_t *v344;
  Class v345;
  Class v346;
  Class v347;
  Class v348;
  Class v349;
  __n128 v350;
  uint64_t v351;
  NSObject *v352;
  os_log_type_t v353;
  _BOOL4 v354;
  Class v355;
  Class v356;
  NSObject *v357;
  Class v358;
  Class v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  char *v364;
  void (*v365)(Class, Class);
  _QWORD *v366;
  uint64_t v367;
  int *v368;
  _QWORD *v369;
  Class v370;
  uint64_t v371;
  uint64_t v372;
  objc_class *v373;
  NSObject *v374;
  os_log_type_t v375;
  uint8_t *v376;
  Class v377;
  Class v378;
  Class v379;
  unint64_t v380;
  NSObject *v381;
  os_log_type_t v382;
  uint8_t *v383;
  os_log_t v384;
  Class v385;
  Class v386;
  Class v387;
  Class v388;
  Class v389;
  Class v390;
  Class v391;
  Class v392;
  Class v393;
  Class v394;
  Class v395;
  Class v396;
  Class v397;
  Class v398;
  Class v399;
  Class v400;
  Class v401;
  Class v402;
  Class v403;
  Class v404;
  Class v405;
  Class v406;
  Class v407;
  Class v408;
  uint64_t v409;
  void (*v410)(Class, Class, Class);
  Class v411;
  Class v412;
  uint64_t v413;
  Class v414;
  void (*v415)(Class, Class);
  Class v416;
  Class v417;
  os_log_t v418;
  Class v419;
  Class v420;
  Class v421;
  void (*v422)(Class, Class, Class);
  int64x2_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  Class v427;
  os_log_t log;
  os_log_t logc;
  os_log_t loga;
  uint64_t (*logd)(uint64_t, char);
  uint64_t (*loge)(char);
  NSObject *logf;
  os_log_t logb;
  os_log_t logg;
  uint64_t v436;
  os_log_type_t v437;
  uint64_t (*v438)(uint64_t, uint64_t, uint64_t);
  Class v439;
  uint64_t (*v440)(os_log_t, uint64_t, uint64_t);
  uint64_t v441;
  Class v442;
  uint64_t v443[2];

  v1 = v0;
  if (qword_10054BC38 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  isa = v0[180].isa;
  v3 = v0[176].isa;
  v4 = v0[175].isa;
  v5 = v0[138].isa;
  v6 = type metadata accessor for Logger(0);
  v0[185].isa = (Class)sub_10000D78C(v6, (uint64_t)static Logger.libraryActionableState);
  v7 = *((_QWORD *)v3 + 2);
  v1[186].isa = (Class)v7;
  v8 = ((uint64_t (*)(Class, Class, Class))v7)(isa, v5, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v1[180].isa;
  if (v11)
  {
    v13 = v1[179].isa;
    v14 = v1[176].isa;
    v15 = v1[175].isa;
    v16 = swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v443[0] = v17;
    *(_DWORD *)v16 = 136446210;
    ((void (*)(Class, Class, Class))v7)(v13, v12, v15);
    v18 = (char *)String.init<A>(describing:)(v13, v15);
    *(_QWORD *)(v16 + 4) = sub_1000BA30C(v18, v19, v443);
    swift_bridgeObjectRelease();
    v20 = (objc_class *)*((_QWORD *)v14 + 1);
    ((void (*)(Class, Class))v20)(v12, v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "╭ Performing action for item: %{public}s", (uint8_t *)v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    v20 = (objc_class *)*((_QWORD *)v1[176].isa + 1);
    ((void (*)(Class, Class))v20)(v12, v1[175].isa);
  }

  v1[187].isa = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint64_t)v1[137].isa;
    v25 = WORD1(v1[44].isa);
    v26 = swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v443[0] = v27;
    *(_DWORD *)v26 = 136446210;
    v28 = (char *)MusicLibrary.ActionableState.description.getter(v24, v25);
    *(_QWORD *)(v26 + 4) = sub_1000BA30C(v28, v29, v443);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "| Actionable state: %{public}s", (uint8_t *)v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }

  v30 = swift_retain_n(v1[139].isa, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  log = v7;
  if (os_log_type_enabled(v31, v32))
  {
    v33 = v1[174].isa;
    v420 = v1[172].isa;
    v34 = v1[171].isa;
    v35 = v1[139].isa;
    v36 = swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v443[0] = v37;
    *(_DWORD *)v36 = 136446210;
    dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v37);
    v38 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
    v39 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v34, v38);
    v41 = v40;
    (*((void (**)(Class, Class))v420 + 1))(v33, v34);
    *(_QWORD *)(v36 + 4) = sub_1000BA30C(v39, v41, v443);
    swift_bridgeObjectRelease();
    swift_release_n(v35, 2);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "| Add status: %{public}s", (uint8_t *)v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    swift_release_n(v1[139].isa, 2);
  }

  v42 = swift_retain_n(v1[139].isa, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = v1[170].isa;
    v421 = v1[168].isa;
    v46 = v1[167].isa;
    v47 = v1[139].isa;
    v48 = swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v443[0] = v49;
    *(_DWORD *)v48 = 136446210;
    dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v49);
    v50 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
    v51 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v46, v50);
    v52 = v1;
    v54 = v53;
    (*((void (**)(Class, Class))v421 + 1))(v45, v46);
    *(_QWORD *)(v48 + 4) = sub_1000BA30C(v51, v54, v443);
    v1 = v52;
    swift_bridgeObjectRelease();
    swift_release_n(v47, 2);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "| Download status: %{public}s", (uint8_t *)v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    swift_release_n(v1[139].isa, 2);
  }

  v55 = swift_retain_n(v1[147].isa, 4);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter();
  v58 = os_log_type_enabled(v56, v57);
  v59 = v1[147].isa;
  if (v58)
  {
    v60 = swift_slowAlloc(22, -1);
    v61 = swift_slowAlloc(64, -1);
    v443[0] = v61;
    *(_DWORD *)v60 = 136446466;
    v62 = (char *)MusicLibrary.name.getter();
    *(_QWORD *)(v60 + 4) = sub_1000BA30C(v62, v63, v443);
    swift_bridgeObjectRelease();
    v64 = swift_release_n(v59, 2);
    *(_WORD *)(v60 + 12) = 2082;
    v65 = (char *)MusicLibrary.id.getter(v64);
    *(_QWORD *)(v60 + 14) = sub_1000BA30C(v65, v66, v443);
    swift_bridgeObjectRelease();
    swift_release_n(v59, 2);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "| Library: %{public}s (%{public}s)", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    swift_release_n(v1[147].isa, 4);
  }

  v68 = WORD1(v1[44].isa);
  switch(v68 >> 8)
  {
    case 2u:
      v69 = Logger.logObject.getter(v67);
      v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "|—● Nothing to Perform: Actionable State is unknown", v71, 2u);
        swift_slowDealloc(v71, -1, -1);
      }

      v72 = sub_1001C4BFC();
      v73 = swift_allocError(&_s15ActionableStateO5ErrorON, v72, 0, 0);
      swift_willThrow(v73);
      goto LABEL_21;
    case 3u:
      v118 = v1[173].isa;
      v119 = v1[172].isa;
      v120 = v1[171].isa;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v67);
      v121 = (*((uint64_t (**)(Class, Class))v119 + 11))(v118, v120);
      if ((_DWORD)v121 == enum case for MusicLibrary.AddStatus.unaddable(_:))
      {
        v122 = v1[173].isa;
        v123 = v1[166].isa;
        v124 = v1[163].isa;
        v125 = v1[162].isa;
        (*((void (**)(Class, Class))v1[172].isa + 12))(v122, v1[171].isa);
        v126 = (*((uint64_t (**)(Class, Class, Class))v124 + 4))(v123, v122, v125);
        v127 = Logger.logObject.getter(v126);
        v128 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v127, v128))
        {
          v129 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v129 = 0;
          _os_log_impl((void *)&_mh_execute_header, v127, v128, "|—● Unaddable", v129, 2u);
          swift_slowDealloc(v129, -1, -1);
        }
        v130 = v1[166].isa;
        v131 = v1[165].isa;
        v132 = v1[163].isa;
        v133 = v1[162].isa;

        v134 = v1;
        v135 = (uint64_t (*)(Class, Class, Class))*((_QWORD *)v132 + 2);
        v136 = v135(v131, v130, v133);
        v137 = Logger.logObject.getter(v136);
        v138 = static os_log_type_t.default.getter();
        v139 = os_log_type_enabled(v137, v138);
        v140 = v134[165].isa;
        v141 = v134[163].isa;
        loga = v134;
        v142 = v134[162].isa;
        if (v139)
        {
          v143 = swift_slowAlloc(12, -1);
          v144 = swift_slowAlloc(32, -1);
          v443[0] = v144;
          *(_DWORD *)v143 = 136446210;
          v145 = sub_10001254C(&qword_10054CE28, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus.UnaddableReason, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus.UnaddableReason);
          v146 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v142, v145);
          *(_QWORD *)(v143 + 4) = sub_1000BA30C(v146, v147, v443);
          swift_bridgeObjectRelease();
          v148 = (objc_class *)*((_QWORD *)v141 + 1);
          ((void (*)(Class, Class))v148)(v140, v142);
          _os_log_impl((void *)&_mh_execute_header, v137, v138, "|—| Reason: %{public}s", (uint8_t *)v143, 0xCu);
          swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1, -1);
          swift_slowDealloc(v143, -1, -1);
        }
        else
        {
          v148 = (objc_class *)*((_QWORD *)v141 + 1);
          ((void (*)(Class, Class))v148)(v140, v134[162].isa);
        }

        loga[188].isa = v148;
        v265 = loga[164].isa;
        v266 = loga[163].isa;
        v267 = loga[162].isa;
        v135(v265, loga[166].isa, v267);
        v268 = (*((uint64_t (**)(Class, Class))v266 + 11))(v265, v267);
        if ((_DWORD)v268 == enum case for MusicLibrary.AddStatus.UnaddableReason.allExplicitContentRestricted(_:))
        {
          v269 = (uint64_t)&loga[84];
          v270 = Logger.logObject.getter(v268);
          v271 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v270, v271))
          {
            v272 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v272 = 0;
            _os_log_impl((void *)&_mh_execute_header, v270, v271, "|—| Presenting Explicit Restriction alert", v272, 2u);
            swift_slowDealloc(v272, -1, -1);
          }
          v273 = loga[140].isa;

          v274 = v273[3];
          v275 = v273[4];
          sub_10000D900(v273, v274);
          sub_10017E3C8(0, v269);
          v276 = *(int **)(v275 + 8);
          v438 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v276 + *v276);
          v277 = (objc_class *)swift_task_alloc(v276[1]);
          loga[189].isa = v277;
          *(_QWORD *)v277 = loga;
          *((_QWORD *)v277 + 1) = sub_1001BCCE8;
          return v438(v269, v274, v275);
        }
        if ((_DWORD)v268 == enum case for MusicLibrary.AddStatus.UnaddableReason.cloudLibraryRequired(_:))
        {
          v296 = (uint64_t)&loga[59];
          v297 = Logger.logObject.getter(v268);
          v298 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v297, v298))
          {
            v299 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v299 = 0;
            _os_log_impl((void *)&_mh_execute_header, v297, v298, "|—| Presenting Cloud Library Requirement alert", v299, 2u);
            swift_slowDealloc(v299, -1, -1);
          }
          v300 = (uint64_t)loga[142].isa;

          sub_100011370(v300, v296, &qword_10054CD90);
          if (loga[66].isa == (Class)1)
          {
            v301 = loga[140].isa;
            sub_100011694(v296, &qword_10054CD90);
            v302 = v301[3];
            v303 = v301[4];
            sub_10000D900(v301, v302);
            sub_10017E1D4(1, (uint64_t)&loga[77]);
            v304 = *(int **)(v303 + 8);
            v440 = (uint64_t (*)(os_log_t, uint64_t, uint64_t))((char *)v304 + *v304);
            v305 = (objc_class *)swift_task_alloc(v304[1]);
            loga[196].isa = v305;
            *(_QWORD *)v305 = loga;
            *((_QWORD *)v305 + 1) = sub_1001BD270;
            v306 = loga + 77;
            v307 = v302;
            return v440(v306, v307, v303);
          }
          v370 = loga[181].isa;
          v371 = sub_1000B59CC(v296, (uint64_t)&loga[68]);
          loga[190].isa = (Class)static MainActor.shared.getter(v371);
          v372 = dispatch thunk of Actor.unownedExecutor.getter(v370, &protocol witness table for MainActor);
          loga[191].isa = (Class)v372;
          loga[192].isa = v373;
          return swift_task_switch(sub_1001BCF1C, v372, v373);
        }
        else
        {
          v1 = loga;
          if ((_DWORD)v268 == enum case for MusicLibrary.AddStatus.UnaddableReason.subscriptionRequired(_:))
          {
            swift_release(loga[182].isa);
            v342 = Logger.logObject.getter(v341);
            v343 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v342, v343))
            {
              v344 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v344 = 0;
              _os_log_impl((void *)&_mh_execute_header, v342, v343, "|—| Presenting upsell", v344, 2u);
              swift_slowDealloc(v344, -1, -1);
            }
            v345 = loga[166].isa;
            v346 = loga[162].isa;

            loga[122].isa = 0;
            *(_OWORD *)&loga[118].isa = 0u;
            *(_OWORD *)&loga[120].isa = 0u;
            LOBYTE(loga[123].isa) = -1;
            _s9MusicCore27SubscriptionUpsellPresenterV7present3foryAC9PlacementO_tFZ_0((uint64_t)&loga[118]);
            sub_1000B5908((uint64_t)&loga[118]);
            v340 = ((uint64_t (*)(Class, Class))v148)(v345, v346);
            goto LABEL_91;
          }
          v374 = Logger.logObject.getter(v268);
          v375 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v374, v375))
          {
            v376 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v376 = 0;
            _os_log_impl((void *)&_mh_execute_header, v374, v375, "|—| Unaddable reason is not supported by the UI", v376, 2u);
            swift_slowDealloc(v376, -1, -1);
          }
          v377 = loga[166].isa;
          v378 = loga[164].isa;
          v379 = loga[162].isa;

          v380 = sub_1001C4BFC();
          v73 = swift_allocError(&_s15ActionableStateO5ErrorON, v380, 0, 0);
          swift_willThrow(v73);
          ((void (*)(Class, Class))v148)(v377, v379);
          ((void (*)(Class, Class))v148)(v378, v379);
LABEL_21:
          v1[211].isa = (Class)v73;
          v1[136].isa = (Class)v73;
          swift_errorRetain(v73);
          v74 = sub_10000B4C8((uint64_t *)&unk_100550630);
          v75 = swift_dynamicCast(v74, &v1[136], v74, &_s15ActionableStateO5ErrorON, 0);
          v76 = (void (*)(Class, Class, Class))v1[186].isa;
          v77 = v1[175].isa;
          v78 = v1[139].isa;
          v79 = v1[138].isa;
          if (v75)
          {
            v80 = v1[178].isa;
            swift_errorRelease(v73);
            v76(v80, v79, v77);
            v81 = swift_retain_n(v78, 4);
            v82 = Logger.logObject.getter(v81);
            v83 = static os_log_type_t.error.getter(v82);
            v84 = os_log_type_enabled(v82, v83);
            v85 = (void (*)(Class, Class))v1[187].isa;
            if (v84)
            {
              v417 = v1[178].isa;
              v422 = (void (*)(Class, Class, Class))v1[186].isa;
              v407 = v1[179].isa;
              v412 = v1[175].isa;
              v86 = v1[174].isa;
              v87 = v1[171].isa;
              v88 = v1[170].isa;
              v404 = v1[168].isa;
              v398 = v1[172].isa;
              v401 = v1[167].isa;
              logc = (os_log_t)v1[187].isa;
              v89 = v1;
              v90 = v1[139].isa;
              v91 = (uint64_t)v89[137].isa;
              v92 = WORD1(v89[44].isa);
              v93 = swift_slowAlloc(52, -1);
              v436 = swift_slowAlloc(160, -1);
              v443[0] = v436;
              *(_DWORD *)v93 = 136447234;
              v94 = (char *)MusicLibrary.ActionableState.description.getter(v91, v92);
              *(_QWORD *)(v93 + 4) = sub_1000BA30C(v94, v95, v443);
              v96 = swift_bridgeObjectRelease();
              *(_WORD *)(v93 + 12) = 2082;
              dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v96);
              v97 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
              v98 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v87, v97);
              v100 = v99;
              (*((void (**)(Class, Class))v398 + 1))(v86, v87);
              *(_QWORD *)(v93 + 14) = sub_1000BA30C(v98, v100, v443);
              swift_bridgeObjectRelease();
              v101 = swift_release_n(v90, 2);
              *(_WORD *)(v93 + 22) = 2082;
              dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v101);
              v102 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
              v103 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v401, v102);
              v105 = v104;
              (*((void (**)(Class, Class))v404 + 1))(v88, v401);
              *(_QWORD *)(v93 + 24) = sub_1000BA30C(v103, v105, v443);
              swift_bridgeObjectRelease();
              v106 = v90;
              v1 = v89;
              swift_release_n(v106, 2);
              *(_WORD *)(v93 + 32) = 2082;
              v422(v407, v417, v412);
              v107 = (char *)String.init<A>(describing:)(v407, v412);
              *(_QWORD *)(v93 + 34) = sub_1000BA30C(v107, v108, v443);
              swift_bridgeObjectRelease();
              v109 = ((uint64_t (*)(Class, Class))logc)(v417, v412);
              *(_WORD *)(v93 + 42) = 2082;
              v110 = (char *)String.init<A>(describing:)(v109, &_s15ActionableStateO5ErrorON);
              *(_QWORD *)(v93 + 44) = sub_1000BA30C(v110, v111, v443);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v82, v83, "Attempted to perform unsupported action for state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
                "\n"
                "Error: %{public}s",
                (uint8_t *)v93,
                0x34u);
              swift_arrayDestroy(v436, 5, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v436, -1, -1);
              swift_slowDealloc(v93, -1, -1);
            }
            else
            {
              v257 = v1[178].isa;
              v258 = v1[175].isa;
              swift_release_n(v1[139].isa, 4);
              v85(v257, v258);
            }

            v259 = sub_1001C4BFC();
            v1[212].isa = (Class)v259;
            v260 = swift_allocError(&_s15ActionableStateO5ErrorON, v259, 0, 0);
            v1[213].isa = (Class)v260;
            v261 = (objc_class *)swift_task_alloc(dword_10055168C);
            v1[214].isa = v261;
            *(_QWORD *)v261 = v1;
            *((_QWORD *)v261 + 1) = sub_1001BDCD0;
            return sub_1001BFFC8(v260, (uint64_t)v1[137].isa, WORD1(v1[44].isa), (_QWORD *)v1[139].isa, (uint64_t)v1[140].isa);
          }
          else
          {
            v185 = v1[177].isa;
            swift_errorRelease(v1[136].isa);
            v76(v185, v79, v77);
            swift_retain_n(v78, 3);
            swift_errorRetain(v73);
            swift_retain(v78);
            v186 = swift_errorRetain(v73);
            v187 = Logger.logObject.getter(v186);
            v188 = static os_log_type_t.error.getter(v187);
            v189 = os_log_type_enabled(v187, v188);
            v190 = (void (*)(Class, Class))v1[187].isa;
            if (v189)
            {
              v415 = (void (*)(Class, Class))v1[187].isa;
              v418 = v1 + 135;
              v405 = v1[177].isa;
              v410 = (void (*)(Class, Class, Class))v1[186].isa;
              v399 = v1[179].isa;
              v402 = v1[175].isa;
              v191 = v1[174].isa;
              v192 = v1[171].isa;
              v193 = v1[170].isa;
              v396 = v1[168].isa;
              v393 = v1[172].isa;
              v394 = v1[167].isa;
              logf = v187;
              v194 = v1;
              v195 = v1[139].isa;
              v437 = v188;
              v196 = (uint64_t)v194[137].isa;
              v197 = WORD1(v194[44].isa);
              v198 = swift_slowAlloc(52, -1);
              v425 = swift_slowAlloc(160, -1);
              v443[0] = v425;
              *(_DWORD *)v198 = 136447234;
              v199 = (char *)MusicLibrary.ActionableState.description.getter(v196, v197);
              *(_QWORD *)(v198 + 4) = sub_1000BA30C(v199, v200, v443);
              v201 = swift_bridgeObjectRelease();
              *(_WORD *)(v198 + 12) = 2082;
              dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v201);
              v202 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
              v203 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v192, v202);
              v205 = v204;
              (*((void (**)(Class, Class))v393 + 1))(v191, v192);
              *(_QWORD *)(v198 + 14) = sub_1000BA30C(v203, v205, v443);
              swift_bridgeObjectRelease();
              v206 = swift_release_n(v195, 2);
              *(_WORD *)(v198 + 22) = 2082;
              dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v206);
              v207 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
              v208 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v394, v207);
              v210 = v209;
              (*((void (**)(Class, Class))v396 + 1))(v193, v394);
              *(_QWORD *)(v198 + 24) = sub_1000BA30C(v208, v210, v443);
              swift_bridgeObjectRelease();
              v211 = v195;
              v1 = v194;
              swift_release_n(v211, 2);
              *(_WORD *)(v198 + 32) = 2082;
              v410(v399, v405, v402);
              v212 = (char *)String.init<A>(describing:)(v399, v402);
              *(_QWORD *)(v198 + 34) = sub_1000BA30C(v212, v213, v443);
              swift_bridgeObjectRelease();
              v415(v405, v402);
              *(_WORD *)(v198 + 42) = 2082;
              v194[135].isa = (Class)v73;
              swift_errorRetain(v73);
              v214 = (char *)String.init<A>(describing:)(v418, v74);
              *(_QWORD *)(v198 + 44) = sub_1000BA30C(v214, v215, v443);
              swift_bridgeObjectRelease();
              swift_errorRelease(v73);
              swift_errorRelease(v73);
              _os_log_impl((void *)&_mh_execute_header, logf, v437, "Action failed for button state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
                "\n"
                "Error: %{public}s",
                (uint8_t *)v198,
                0x34u);
              swift_arrayDestroy(v425, 5, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v425, -1, -1);
              swift_slowDealloc(v198, -1, -1);

            }
            else
            {
              v262 = v1[177].isa;
              v263 = v1[175].isa;
              swift_release_n(v1[139].isa, 4);
              v190(v262, v263);
              swift_errorRelease(v73);
              swift_errorRelease(v73);

            }
            v264 = (objc_class *)swift_task_alloc(dword_10055168C);
            v1[215].isa = v264;
            *(_QWORD *)v264 = v1;
            *((_QWORD *)v264 + 1) = sub_1001BDF14;
            return sub_1001BFFC8(v73, (uint64_t)v1[137].isa, WORD1(v1[44].isa), (_QWORD *)v1[139].isa, (uint64_t)v1[140].isa);
          }
        }
      }
      else
      {
        v245 = Logger.logObject.getter(v121);
        v246 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v245, v246))
        {
          v247 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v247 = 0;
          _os_log_impl((void *)&_mh_execute_header, v245, v246, "|—● Adding to library", v247, 2u);
          swift_slowDealloc(v247, -1, -1);
        }
        v248 = v1[143].isa;

        if (v248)
        {
          v249 = v1[144].isa;
          ObjectType = swift_getObjectType();
          BYTE1(v1[44].isa) = 0;
          v251 = (void (*)(char *, ValueMetadata *, unint64_t, uint64_t, Class))*((_QWORD *)v249 + 1);
          v252 = sub_1000B04CC();
          v251((char *)&v1[44].isa + 1, &type metadata for ActionType, v252, ObjectType, v249);
        }
        sub_100011370((uint64_t)v1[141].isa, (uint64_t)&v1[124], &qword_10054CD98);
        v253 = (uint64_t)v1[127].isa;
        if (v253)
        {
          v254 = (uint64_t)v1[161].isa;
          v255 = v1[160].isa;
          v256 = (uint64_t)v1[128].isa;
          sub_10000D900(&v1[124].isa, (uint64_t)v1[127].isa);
          swift_storeEnumTagMultiPayload(v254, v255, 7);
          sub_10012501C(v254, 0, v253, v256);
          sub_10000E750(v254, type metadata accessor for Notice.Variant);
          sub_100011758(&v1[124].isa);
        }
        else
        {
          sub_100011694((uint64_t)&v1[124], &qword_10054CD98);
        }
        v308 = v1[158].isa;
        v309 = v1[157].isa;
        v310 = (uint64_t)v1[156].isa;
        sub_100011370((uint64_t)v1[145].isa, v310, &qword_10054CD28);
        if ((*((unsigned int (**)(uint64_t, uint64_t, Class))v308 + 6))(v310, 1, v309) == 1)
        {
          sub_100011694((uint64_t)v1[156].isa, &qword_10054CD28);
        }
        else
        {
          v311 = (uint64_t)v1[175].isa;
          v312 = (uint64_t *)v1[159].isa;
          v313 = (uint64_t)v1[154].isa;
          sub_1000B0798((uint64_t)v1[156].isa, (uint64_t)v312);
          v441 = MusicItem.metricsTargetIdentifier.getter(v311);
          v426 = v314;
          v315 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v315 - 8) + 56))(v313, 1, 1, v315);
          v316 = sub_10000B4C8(&qword_10054CD70);
          v317 = swift_allocObject(v316, 80, 7);
          *(_OWORD *)(v317 + 16) = xmmword_100424BA0;
          *(_QWORD *)(v317 + 32) = MusicItem.metricsContentType.getter(v311);
          *(_QWORD *)(v317 + 40) = v318;
          *(_BYTE *)(v317 + 48) = 0;
          *(_QWORD *)(v317 + 56) = 0;
          *(_QWORD *)(v317 + 64) = 0;
          *(_BYTE *)(v317 + 72) = 1;
          v319 = sub_1000D40CC(v317);
          v321 = v320;
          v322 = v1;
          v324 = v323;
          v326 = v325;
          v327 = BYTE1(v325);
          swift_setDeallocating(v317);
          swift_arrayDestroy(v317 + 32, *(_QWORD *)(v317 + 16), &type metadata for MetricsEvent.Click.ActionDetails.Key);
          swift_deallocClassInstance(v317, 32, 7);
          sub_1000D44DC(v441, v426, 5, 2, v313, v319, v321, v324, v326, v312);
          v328 = v324;
          v1 = v322;
          sub_1000B07DC(v319, v321, v328, v326, v327);
          swift_bridgeObjectRelease();
          sub_100011694(v313, &qword_10054C950);
          sub_10000E750((uint64_t)v312, type metadata accessor for Actions.MetricsReportingContext);
        }
        v329 = v1[176].isa;
        v330 = (uint64_t)v1[175].isa;
        v331 = v1[138].isa;
        v332 = sub_1001C40D8(v330, v330);
        v333 = swift_allocObject(v332, ((*((unsigned __int8 *)v329 + 80) + (unint64_t)*(unsigned int *)(v332 + 48)) & ~(unint64_t)*((unsigned __int8 *)v329 + 80))+ *((_QWORD *)v329 + 9), *((unsigned __int8 *)v329 + 80) | (unint64_t)*(unsigned __int16 *)(v332 + 52));
        v334 = static Array._adoptStorage(_:count:)(v333, 1);
        ((void (*)(uint64_t, Class, uint64_t))log)(v335, v331, v330);
        v336 = sub_1000D0CFC(v334);
        v1[197].isa = (Class)v336;
        v1[134].isa = (Class)v336;
        v337 = (objc_class *)swift_task_alloc(async function pointer to MusicLibrary.add<A, B>(_:)[1]);
        v1[198].isa = v337;
        v338 = type metadata accessor for Array(0);
        WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v338);
        *(_QWORD *)v337 = v1;
        *((_QWORD *)v337 + 1) = sub_1001BD2CC;
        return MusicLibrary.add<A, B>(_:)(&v1[134], v338, v1[175].isa, WitnessTable, v1[146].isa);
      }
    case 4u:
      v423 = (int64x2_t *)&v1[113];
      v149 = Logger.logObject.getter(v67);
      v150 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v149, v150))
      {
        v151 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v151 = 0;
        _os_log_impl((void *)&_mh_execute_header, v149, v150, "|—● Triggering download", v151, 2u);
        swift_slowDealloc(v151, -1, -1);
      }
      v152 = (uint64_t)v1[179].isa;
      v153 = (uint64_t)v1[175].isa;
      v154 = (uint64_t)v1[155].isa;
      v155 = (uint64_t)v1[147].isa;
      v408 = v1[148].isa;
      v413 = (uint64_t)v1[146].isa;
      v156 = (uint64_t)v1[145].isa;
      v157 = (uint64_t)v1[140].isa;
      v158 = v1[138].isa;

      ((void (*)(uint64_t, Class, uint64_t))log)(v152, v158, v153);
      sub_1000C53BC(v157, (uint64_t)&v1[129]);
      sub_100011370(v156, v154, &qword_10054CD28);
      v159 = *(_QWORD *)((char *)v408 + class metadata base offset for MusicLibrary.ItemState + 8);
      swift_retain(v155);
      Actions.Download.Context.init<A>(item:library:alertPresenter:metricsReportingContext:)(v152, v155, (__int128 *)&v1[129], v154, v153, v413, v159, (unint64_t (**)())&v1[112]);
      v160 = v1[112].isa;
      v161 = v1[117].isa;
      v1[202].isa = v161;
      v1[45].isa = v160;
      v162 = *v423;
      v163 = *(int64x2_t *)&v1[115].isa;
      v164 = v423->i64[0];
      *(int64x2_t *)&v1[200].isa = vzip1q_s64(*v423, v163);
      *(int64x2_t *)&v1[46].isa = v162;
      *(int64x2_t *)&v1[48].isa = v163;
      v165 = v163.i64[0];
      v1[50].isa = v161;
      LOBYTE(v1[51].isa) = 9;
      v1[54].isa = (Class)0x4014000000000000;
      v1[55].isa = (Class)&unk_10054D170;
      v1[56].isa = 0;
      v1[57].isa = (Class)&unk_10054D178;
      v166 = unk_1005516B4;
      logd = (uint64_t (*)(uint64_t, char))((char *)&dword_1005516B0 + dword_1005516B0);
      v1[52].isa = (Class)sub_1000B0910;
      v1[53].isa = 0;
      v1[58].isa = 0;
      swift_retain(v164);
      swift_retain(v165);
      swift_retain(v161);
      v167 = (objc_class *)swift_task_alloc(v166);
      v1[203].isa = v167;
      *(_QWORD *)v167 = v1;
      *((_QWORD *)v167 + 1) = sub_1001BD580;
      return logd((uint64_t)logd, 1);
    case 5u:
      v168 = Logger.logObject.getter(v67);
      v169 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v168, v169))
      {
        v170 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v170 = 0;
        _os_log_impl((void *)&_mh_execute_header, v168, v169, "|—● Is Downloaded: Prompting for delete/remove alert", v170, 2u);
        swift_slowDealloc(v170, -1, -1);
      }
      v171 = (uint64_t)v1[179].isa;
      v172 = (uint64_t)v1[175].isa;
      v173 = v1[158].isa;
      v174 = v1[157].isa;
      v175 = (uint64_t)v1[155].isa;
      v414 = v1[148].isa;
      v424 = (uint64_t)v1[146].isa;
      v176 = v1[140].isa;
      v177 = v1[138].isa;

      v178 = v176[3];
      v409 = v176[4];
      v179 = sub_10000D900(v176, v178);
      ((void (*)(uint64_t, Class, uint64_t))log)(v171, v177, v172);
      v180 = *(_QWORD *)(v178 - 8);
      v181 = swift_task_alloc((*(_QWORD *)(v180 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v180 + 16))(v181, v179, v178);
      (*((void (**)(uint64_t, uint64_t, uint64_t, Class))v173 + 7))(v175, 1, 1, v174);
      type metadata accessor for MusicLibrary(0);
      v182 = (uint64_t (*)())static MusicLibrary.shared.getter();
      Actions.DeleteOrRemoveDownload.Context.init<A, B>(item:alertPresenter:library:metricsReportingContext:)(v171, v181, v182, v175, v172, v178, v424, *(_QWORD *)((char *)v414 + class metadata base offset for MusicLibrary.ItemState + 8), (uint64_t (**)())&v1[27], v409);
      swift_task_dealloc(v181);
      sub_1000C117C((uint64_t)&v1[27], (uint64_t)&v1[2]);
      v183 = swift_allocObject(&unk_10050A538, 32, 7);
      *(_QWORD *)(v183 + 16) = &unk_10054D080;
      *(_QWORD *)(v183 + 24) = 0;
      BYTE1(v1[19].isa) = 39;
      v1[20].isa = (Class)sub_1000BE1B4;
      v1[21].isa = 0;
      v1[22].isa = (Class)0x403E000000000000;
      v1[23].isa = (Class)&unk_10054D098;
      v1[24].isa = (Class)v183;
      v1[25].isa = (Class)&unk_10054D088;
      v1[26].isa = 0;
      sub_1000C1FF8(&v1[27].isa);
      loge = (uint64_t (*)(char))((char *)&dword_1005516A0 + dword_1005516A0);
      v184 = (objc_class *)swift_task_alloc(unk_1005516A4);
      v1[209].isa = v184;
      *(_QWORD *)v184 = v1;
      *((_QWORD *)v184 + 1) = sub_1001BDC48;
      return loge(1);
    default:
      v112 = Logger.logObject.getter(v67);
      v113 = static os_log_type_t.default.getter();
      v114 = os_log_type_enabled(v112, v113);
      if ((v68 & 0x100) == 0)
      {
        if (v114)
        {
          v115 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v115 = 0;
          _os_log_impl((void *)&_mh_execute_header, v112, v113, "|—● Cancelling download", v115, 2u);
          swift_slowDealloc(v115, -1, -1);
        }

        v116 = (objc_class *)swift_task_alloc(async function pointer to MusicLibrary.cancelDownload<A>(_:)[1]);
        v1[205].isa = v116;
        *(_QWORD *)v116 = v1;
        *((_QWORD *)v116 + 1) = sub_1001BD7F0;
        return MusicLibrary.cancelDownload<A>(_:)(v1[138].isa, v1[175].isa, v1[146].isa);
      }
      if (v114)
      {
        v216 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v216 = 0;
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "|—● Download is paused: Checking for reasons…", v216, 2u);
        swift_slowDealloc(v216, -1, -1);
      }
      v217 = v1[169].isa;
      v218 = v1[168].isa;
      v219 = v1[167].isa;

      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v220);
      if ((*((unsigned int (**)(Class, Class))v218 + 11))(v217, v219) != enum case for MusicLibrary.DownloadStatus.paused(_:))
      {
        v278 = v1[169].isa;
        v279 = v1[168].isa;
        v280 = v1[167].isa;
        v281 = v1[139].isa;
        v282 = swift_release(v1[182].isa);
        v283 = (void (*)(Class, Class, __n128))*((_QWORD *)v279 + 1);
        v283(v278, v280, v282);
        v284 = swift_retain_n(v281, 2);
        v285 = Logger.logObject.getter(v284);
        v286 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v285, v286))
        {
          v287 = v1[170].isa;
          v288 = v1[167].isa;
          v439 = v1[139].isa;
          v289 = swift_slowAlloc(12, -1);
          v290 = swift_slowAlloc(32, -1);
          v443[0] = v290;
          *(_DWORD *)v289 = 136446210;
          dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v290);
          v291 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
          v292 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v288, v291);
          v293 = v1;
          v295 = v294;
          ((void (*)(Class, Class))v283)(v287, v288);
          *(_QWORD *)(v289 + 4) = sub_1000BA30C(v292, v295, v443);
          v1 = v293;
          swift_bridgeObjectRelease();
          swift_release_n(v439, 2);
          _os_log_impl((void *)&_mh_execute_header, v285, v286, "|—| No reasons found, download status does not match UI state %{public}s", (uint8_t *)v289, 0xCu);
          swift_arrayDestroy(v290, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v290, -1, -1);
          swift_slowDealloc(v289, -1, -1);
        }
        else
        {
          swift_release_n(v1[139].isa, 2);
        }

        goto LABEL_91;
      }
      v221 = v1[169].isa;
      v222 = v1[153].isa;
      v223 = v1[150].isa;
      v224 = v1[149].isa;
      (*((void (**)(Class, Class))v1[168].isa + 12))(v221, v1[167].isa);
      (*((void (**)(Class, Class, Class))v223 + 4))(v222, v221, v224);
      MusicLibrary.DownloadStatus.DownloadPauseReasons.alert.getter((uint64_t *)&v1[91]);
      sub_100011530((uint64_t)&v1[91], (uint64_t)&v1[105], &qword_1005556A0);
      if (!v1[110].isa)
      {
        v347 = v1[153].isa;
        v348 = v1[151].isa;
        v349 = v1[149].isa;
        v350 = swift_release(v1[182].isa);
        v351 = (*((uint64_t (**)(Class, Class, Class, __n128))v223 + 2))(v348, v347, v349, v350);
        v352 = Logger.logObject.getter(v351);
        v353 = static os_log_type_t.error.getter(v352);
        v354 = os_log_type_enabled(v352, v353);
        v355 = v1[153].isa;
        v356 = v1[151].isa;
        v357 = v1;
        v358 = v1[150].isa;
        logb = v357;
        v359 = v357[149].isa;
        if (v354)
        {
          v360 = swift_slowAlloc(12, -1);
          v361 = swift_slowAlloc(32, -1);
          v443[0] = v361;
          *(_DWORD *)v360 = 136446210;
          v362 = sub_10001254C(&qword_1005516A8, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus.DownloadPauseReasons);
          v363 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v359, v362);
          *(_QWORD *)(v360 + 4) = sub_1000BA30C(v363, v364, v443);
          swift_bridgeObjectRelease();
          v365 = (void (*)(Class, Class))*((_QWORD *)v358 + 1);
          v365(v356, v359);
          _os_log_impl((void *)&_mh_execute_header, v352, v353, "|—| Unhandled alert for reason: %{public}s", (uint8_t *)v360, 0xCu);
          swift_arrayDestroy(v361, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v361, -1, -1);
          swift_slowDealloc(v360, -1, -1);

        }
        else
        {

          v365 = (void (*)(Class, Class))*((_QWORD *)v358 + 1);
          v365(v356, v359);
        }
        v340 = ((uint64_t (*)(Class, Class))v365)(v355, v359);
        v1 = logb;
LABEL_91:
        v381 = Logger.logObject.getter(v340);
        v382 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v381, v382))
        {
          v383 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v383 = 0;
          _os_log_impl((void *)&_mh_execute_header, v381, v382, "╰ ✅ Succeeded", v383, 2u);
          swift_slowDealloc(v383, -1, -1);
        }
        v384 = v1;
        v385 = v1[180].isa;
        v386 = v384[179].isa;
        v387 = v384[178].isa;
        v388 = v384[177].isa;
        v389 = v384[174].isa;
        v390 = v384[173].isa;
        v391 = v384[170].isa;
        v392 = v384[169].isa;
        v395 = v384[166].isa;
        v397 = v384[165].isa;
        v400 = v384[164].isa;
        v403 = v384[161].isa;
        v406 = v384[159].isa;
        v411 = v384[156].isa;
        v416 = v384[155].isa;
        v419 = v384[154].isa;
        v427 = v384[153].isa;
        logg = (os_log_t)v384[152].isa;
        v442 = v384[151].isa;

        swift_task_dealloc(v385);
        swift_task_dealloc(v386);
        swift_task_dealloc(v387);
        swift_task_dealloc(v388);
        swift_task_dealloc(v389);
        swift_task_dealloc(v390);
        swift_task_dealloc(v391);
        swift_task_dealloc(v392);
        swift_task_dealloc(v395);
        swift_task_dealloc(v397);
        swift_task_dealloc(v400);
        swift_task_dealloc(v403);
        swift_task_dealloc(v406);
        swift_task_dealloc(v411);
        swift_task_dealloc(v416);
        swift_task_dealloc(v419);
        swift_task_dealloc(v427);
        swift_task_dealloc(logg);
        swift_task_dealloc(v442);
        return ((uint64_t (*)(void))v384[1].isa)();
      }
      v225 = v1 + 98;
      v226 = v1[153].isa;
      v227 = v1[152].isa;
      v228 = v1[149].isa;
      v229 = *(_OWORD *)&v1[107].isa;
      *(_OWORD *)&v1[98].isa = *(_OWORD *)&v1[105].isa;
      *(_OWORD *)&v1[100].isa = v229;
      *(_OWORD *)&v1[102].isa = *(_OWORD *)&v1[109].isa;
      v1[104].isa = v1[111].isa;
      v230 = (*((uint64_t (**)(Class, Class, Class))v223 + 2))(v227, v226, v228);
      v231 = Logger.logObject.getter(v230);
      v232 = static os_log_type_t.default.getter();
      v233 = os_log_type_enabled(v231, v232);
      v234 = v1[152].isa;
      p_isa = &v1->isa;
      v236 = v1[150].isa;
      v237 = p_isa;
      v238 = p_isa[149];
      if (v233)
      {
        v239 = swift_slowAlloc(12, -1);
        v240 = swift_slowAlloc(32, -1);
        v443[0] = v240;
        *(_DWORD *)v239 = 136446210;
        v241 = sub_10001254C(&qword_1005516A8, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus.DownloadPauseReasons);
        v242 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v238, v241);
        *(_QWORD *)(v239 + 4) = sub_1000BA30C(v242, v243, v443);
        swift_bridgeObjectRelease();
        v244 = (void (*)(Class, uint64_t))*((_QWORD *)v236 + 1);
        v244(v234, v238);
        _os_log_impl((void *)&_mh_execute_header, v231, v232, "|—| Showing alert for reason: %{public}s", (uint8_t *)v239, 0xCu);
        swift_arrayDestroy(v240, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v240, -1, -1);
        swift_slowDealloc(v239, -1, -1);
      }
      else
      {
        v244 = (void (*)(Class, uint64_t))*((_QWORD *)v236 + 1);
        v244(v234, p_isa[149]);
      }

      v237[207] = v244;
      v366 = (_QWORD *)v237[140];
      v367 = v366[3];
      v303 = v366[4];
      sub_10000D900(v366, v367);
      v368 = *(int **)(v303 + 8);
      v440 = (uint64_t (*)(os_log_t, uint64_t, uint64_t))((char *)v368 + *v368);
      v369 = (_QWORD *)swift_task_alloc(v368[1]);
      v237[208] = v369;
      *v369 = v237;
      v369[1] = sub_1001BDA14;
      v306 = v225;
      v307 = v367;
      return v440(v306, v307, v303);
  }
}

uint64_t sub_1001BCCE8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1512));
  sub_1000B593C(v1 + 84);
  return swift_task_switch(sub_1001BCD44, v1[183], v1[184]);
}

uint64_t sub_1001BCD44()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1504);
  v2 = *(_QWORD *)(v0 + 1328);
  v3 = *(_QWORD *)(v0 + 1296);
  swift_release(*(_QWORD *)(v0 + 1456));
  v4 = v1(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "╰ ✅ Succeeded", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 1440);
  v9 = *(_QWORD *)(v0 + 1432);
  v10 = *(_QWORD *)(v0 + 1424);
  v11 = *(_QWORD *)(v0 + 1416);
  v12 = *(_QWORD *)(v0 + 1392);
  v13 = *(_QWORD *)(v0 + 1384);
  v14 = *(_QWORD *)(v0 + 1360);
  v15 = *(_QWORD *)(v0 + 1352);
  v17 = *(_QWORD *)(v0 + 1328);
  v18 = *(_QWORD *)(v0 + 1320);
  v19 = *(_QWORD *)(v0 + 1312);
  v20 = *(_QWORD *)(v0 + 1288);
  v21 = *(_QWORD *)(v0 + 1272);
  v22 = *(_QWORD *)(v0 + 1248);
  v23 = *(_QWORD *)(v0 + 1240);
  v24 = *(_QWORD *)(v0 + 1232);
  v25 = *(_QWORD *)(v0 + 1224);
  v26 = *(_QWORD *)(v0 + 1216);
  v27 = *(_QWORD *)(v0 + 1208);

  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BCF1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = static MainActor.shared.getter(a1);
  v1[193] = v2;
  v3 = swift_task_alloc(48);
  v1[194] = v3;
  *(_BYTE *)(v3 + 16) = 1;
  *(_QWORD *)(v3 + 24) = v1 + 68;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[195] = v4;
  *v4 = v1;
  v4[1] = sub_1001BCFE0;
  return withCheckedContinuation<A>(isolation:function:_:)((char *)v1 + 357, v2, &protocol witness table for MainActor, 0xD00000000000003DLL, 0x80000001004468B0, sub_1000B5A08, v3, &type metadata for Bool);
}

uint64_t sub_1001BCFE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1552);
  v3 = *(_QWORD *)(*v0 + 1544);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1560));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001BD050, *(_QWORD *)(v1 + 1528), *(_QWORD *)(v1 + 1536));
}

uint64_t sub_1001BD050()
{
  _QWORD *v0;

  swift_release(v0[190]);
  return swift_task_switch(sub_1001BD08C, v0[183], v0[184]);
}

uint64_t sub_1001BD08C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1504);
  v2 = *(_QWORD *)(v0 + 1328);
  v3 = *(_QWORD *)(v0 + 1296);
  swift_release(*(_QWORD *)(v0 + 1456));
  sub_1000B5A14(v0 + 544);
  v4 = v1(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "╰ ✅ Succeeded", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 1440);
  v9 = *(_QWORD *)(v0 + 1432);
  v10 = *(_QWORD *)(v0 + 1424);
  v11 = *(_QWORD *)(v0 + 1416);
  v12 = *(_QWORD *)(v0 + 1392);
  v13 = *(_QWORD *)(v0 + 1384);
  v14 = *(_QWORD *)(v0 + 1360);
  v15 = *(_QWORD *)(v0 + 1352);
  v17 = *(_QWORD *)(v0 + 1328);
  v18 = *(_QWORD *)(v0 + 1320);
  v19 = *(_QWORD *)(v0 + 1312);
  v20 = *(_QWORD *)(v0 + 1288);
  v21 = *(_QWORD *)(v0 + 1272);
  v22 = *(_QWORD *)(v0 + 1248);
  v23 = *(_QWORD *)(v0 + 1240);
  v24 = *(_QWORD *)(v0 + 1232);
  v25 = *(_QWORD *)(v0 + 1224);
  v26 = *(_QWORD *)(v0 + 1216);
  v27 = *(_QWORD *)(v0 + 1208);

  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BD270()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1568));
  sub_1000B593C(v1 + 77);
  return swift_task_switch(sub_1001C663C, v1[183], v1[184]);
}

uint64_t sub_1001BD2CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1584);
  *(_QWORD *)(*v1 + 1592) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 1472);
    v5 = *(_QWORD *)(v2 + 1464);
    v6 = sub_1001BE12C;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v2 + 1472);
    v5 = *(_QWORD *)(v2 + 1464);
    v6 = sub_1001BD360;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1001BD360()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 1144);
  v2 = swift_release(*(_QWORD *)(v0 + 1456));
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 1152);
    ObjectType = swift_getObjectType();
    *(_BYTE *)(v0 + 356) = 0;
    v5 = *(void (**)(uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v3 + 16);
    v6 = sub_1000B04CC();
    v5(v0 + 356, &type metadata for ActionType, v6, ObjectType, v3);
  }
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 1376) + 8))(*(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1368), v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "╰ ✅ Succeeded", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(_QWORD *)(v0 + 1440);
  v12 = *(_QWORD *)(v0 + 1432);
  v13 = *(_QWORD *)(v0 + 1424);
  v14 = *(_QWORD *)(v0 + 1416);
  v15 = *(_QWORD *)(v0 + 1392);
  v16 = *(_QWORD *)(v0 + 1384);
  v17 = *(_QWORD *)(v0 + 1360);
  v18 = *(_QWORD *)(v0 + 1352);
  v20 = *(_QWORD *)(v0 + 1328);
  v21 = *(_QWORD *)(v0 + 1320);
  v22 = *(_QWORD *)(v0 + 1312);
  v23 = *(_QWORD *)(v0 + 1288);
  v24 = *(_QWORD *)(v0 + 1272);
  v25 = *(_QWORD *)(v0 + 1248);
  v26 = *(_QWORD *)(v0 + 1240);
  v27 = *(_QWORD *)(v0 + 1232);
  v28 = *(_QWORD *)(v0 + 1224);
  v29 = *(_QWORD *)(v0 + 1216);
  v30 = *(_QWORD *)(v0 + 1208);

  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BD580()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1624);
  *(_QWORD *)(*(_QWORD *)v1 + 1632) = v0;
  swift_task_dealloc(v3);
  v4 = v2[202];
  v5 = v2[201];
  swift_release(v2[200]);
  swift_release(v5);
  swift_release(v4);
  if (v0)
    v6 = sub_1001BE8C8;
  else
    v6 = sub_1001BD60C;
  return swift_task_switch(v6, v2[183], v2[184]);
}

uint64_t sub_1001BD60C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 1616);
  v2 = *(_QWORD *)(v0 + 1608);
  v3 = *(_QWORD *)(v0 + 1456);
  swift_release(*(_QWORD *)(v0 + 1600));
  swift_release(v2);
  swift_release(v1);
  v4 = swift_release(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "╰ ✅ Succeeded", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 1440);
  v9 = *(_QWORD *)(v0 + 1432);
  v10 = *(_QWORD *)(v0 + 1424);
  v11 = *(_QWORD *)(v0 + 1416);
  v12 = *(_QWORD *)(v0 + 1392);
  v13 = *(_QWORD *)(v0 + 1384);
  v14 = *(_QWORD *)(v0 + 1360);
  v15 = *(_QWORD *)(v0 + 1352);
  v17 = *(_QWORD *)(v0 + 1328);
  v18 = *(_QWORD *)(v0 + 1320);
  v19 = *(_QWORD *)(v0 + 1312);
  v20 = *(_QWORD *)(v0 + 1288);
  v21 = *(_QWORD *)(v0 + 1272);
  v22 = *(_QWORD *)(v0 + 1248);
  v23 = *(_QWORD *)(v0 + 1240);
  v24 = *(_QWORD *)(v0 + 1232);
  v25 = *(_QWORD *)(v0 + 1224);
  v26 = *(_QWORD *)(v0 + 1216);
  v27 = *(_QWORD *)(v0 + 1208);

  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BD7F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1640);
  *(_QWORD *)(*v1 + 1648) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001BF070;
  else
    v4 = sub_1001BD854;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1464), *(_QWORD *)(v2 + 1472));
}

uint64_t sub_1001BD854()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = swift_release(*(_QWORD *)(v0 + 1456));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "╰ ✅ Succeeded", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 1440);
  v6 = *(_QWORD *)(v0 + 1432);
  v7 = *(_QWORD *)(v0 + 1424);
  v8 = *(_QWORD *)(v0 + 1416);
  v9 = *(_QWORD *)(v0 + 1392);
  v10 = *(_QWORD *)(v0 + 1384);
  v11 = *(_QWORD *)(v0 + 1360);
  v12 = *(_QWORD *)(v0 + 1352);
  v14 = *(_QWORD *)(v0 + 1328);
  v15 = *(_QWORD *)(v0 + 1320);
  v16 = *(_QWORD *)(v0 + 1312);
  v17 = *(_QWORD *)(v0 + 1288);
  v18 = *(_QWORD *)(v0 + 1272);
  v19 = *(_QWORD *)(v0 + 1248);
  v20 = *(_QWORD *)(v0 + 1240);
  v21 = *(_QWORD *)(v0 + 1232);
  v22 = *(_QWORD *)(v0 + 1224);
  v23 = *(_QWORD *)(v0 + 1216);
  v24 = *(_QWORD *)(v0 + 1208);

  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDA14()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1664));
  return swift_task_switch(sub_1001BDA64, *(_QWORD *)(v1 + 1464), *(_QWORD *)(v1 + 1472));
}

uint64_t sub_1001BDA64()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1656);
  v2 = *(_QWORD *)(v0 + 1224);
  v3 = *(_QWORD *)(v0 + 1192);
  swift_release(*(_QWORD *)(v0 + 1456));
  sub_1001C4C64(v0 + 728);
  v4 = v1(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "╰ ✅ Succeeded", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 1440);
  v9 = *(_QWORD *)(v0 + 1432);
  v10 = *(_QWORD *)(v0 + 1424);
  v11 = *(_QWORD *)(v0 + 1416);
  v12 = *(_QWORD *)(v0 + 1392);
  v13 = *(_QWORD *)(v0 + 1384);
  v14 = *(_QWORD *)(v0 + 1360);
  v15 = *(_QWORD *)(v0 + 1352);
  v17 = *(_QWORD *)(v0 + 1328);
  v18 = *(_QWORD *)(v0 + 1320);
  v19 = *(_QWORD *)(v0 + 1312);
  v20 = *(_QWORD *)(v0 + 1288);
  v21 = *(_QWORD *)(v0 + 1272);
  v22 = *(_QWORD *)(v0 + 1248);
  v23 = *(_QWORD *)(v0 + 1240);
  v24 = *(_QWORD *)(v0 + 1232);
  v25 = *(_QWORD *)(v0 + 1224);
  v26 = *(_QWORD *)(v0 + 1216);
  v27 = *(_QWORD *)(v0 + 1208);

  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDC48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1672);
  *(_QWORD *)(*v1 + 1680) = v0;
  swift_task_dealloc(v3);
  sub_100011694(v2 + 16, &qword_10054D130);
  if (v0)
    v4 = sub_1001BF7F8;
  else
    v4 = sub_1001C6668;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1464), *(_QWORD *)(v2 + 1472));
}

uint64_t sub_1001BDCD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1704);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1712));
  swift_errorRelease(v2);
  return swift_task_switch(sub_1001BDD2C, *(_QWORD *)(v1 + 1464), *(_QWORD *)(v1 + 1472));
}

uint64_t sub_1001BDD2C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = swift_release(*(_QWORD *)(v0 + 1456));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "╰ ❌ Failed", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 1696);

  v25 = swift_allocError(&_s15ActionableStateO5ErrorON, v5, 0, 0);
  swift_willThrow(v25);
  swift_errorRelease(*(_QWORD *)(v0 + 1088));
  v6 = *(_QWORD *)(v0 + 1432);
  v7 = *(_QWORD *)(v0 + 1424);
  v8 = *(_QWORD *)(v0 + 1416);
  v9 = *(_QWORD *)(v0 + 1392);
  v10 = *(_QWORD *)(v0 + 1384);
  v11 = *(_QWORD *)(v0 + 1360);
  v12 = *(_QWORD *)(v0 + 1352);
  v13 = *(_QWORD *)(v0 + 1328);
  v14 = *(_QWORD *)(v0 + 1320);
  v16 = *(_QWORD *)(v0 + 1312);
  v17 = *(_QWORD *)(v0 + 1288);
  v18 = *(_QWORD *)(v0 + 1272);
  v19 = *(_QWORD *)(v0 + 1248);
  v20 = *(_QWORD *)(v0 + 1240);
  v21 = *(_QWORD *)(v0 + 1232);
  v22 = *(_QWORD *)(v0 + 1224);
  v23 = *(_QWORD *)(v0 + 1216);
  v24 = *(_QWORD *)(v0 + 1208);
  swift_task_dealloc(*(_QWORD *)(v0 + 1440));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDF14()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1720));
  return swift_task_switch(sub_1001BDF64, *(_QWORD *)(v1 + 1464), *(_QWORD *)(v1 + 1472));
}

uint64_t sub_1001BDF64()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = swift_release(*(_QWORD *)(v0 + 1456));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "╰ ❌ Failed", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_willThrow(v5);
  v6 = *(_QWORD *)(v0 + 1432);
  v7 = *(_QWORD *)(v0 + 1424);
  v8 = *(_QWORD *)(v0 + 1416);
  v9 = *(_QWORD *)(v0 + 1392);
  v10 = *(_QWORD *)(v0 + 1384);
  v11 = *(_QWORD *)(v0 + 1360);
  v12 = *(_QWORD *)(v0 + 1352);
  v13 = *(_QWORD *)(v0 + 1328);
  v14 = *(_QWORD *)(v0 + 1320);
  v16 = *(_QWORD *)(v0 + 1312);
  v17 = *(_QWORD *)(v0 + 1288);
  v18 = *(_QWORD *)(v0 + 1272);
  v19 = *(_QWORD *)(v0 + 1248);
  v20 = *(_QWORD *)(v0 + 1240);
  v21 = *(_QWORD *)(v0 + 1232);
  v22 = *(_QWORD *)(v0 + 1224);
  v23 = *(_QWORD *)(v0 + 1216);
  v24 = *(_QWORD *)(v0 + 1208);
  swift_task_dealloc(*(_QWORD *)(v0 + 1440));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BE12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t (*type)(uint64_t, uint64_t);
  os_log_type_t typea;
  os_log_t log;
  NSObject *loga;
  uint64_t v96;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1376) + 8))(*(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1368));
  v1 = *(_QWORD *)(v0 + 1592);
  *(_QWORD *)(v0 + 1688) = v1;
  *(_QWORD *)(v0 + 1088) = v1;
  swift_errorRetain(v1);
  v2 = sub_10000B4C8((uint64_t *)&unk_100550630);
  v3 = swift_dynamicCast(v2, v0 + 1088, v2, &_s15ActionableStateO5ErrorON, 0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
  v5 = *(_QWORD *)(v0 + 1400);
  v6 = *(_QWORD *)(v0 + 1112);
  v7 = *(_QWORD *)(v0 + 1104);
  if (v3)
  {
    v8 = *(_QWORD *)(v0 + 1424);
    swift_errorRelease(v1);
    v4(v8, v7, v5);
    v9 = swift_retain_n(v6, 4);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v12)
    {
      v89 = *(_QWORD *)(v0 + 1424);
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v85 = *(_QWORD *)(v0 + 1432);
      v87 = *(_QWORD *)(v0 + 1400);
      v14 = *(_QWORD *)(v0 + 1392);
      v15 = *(_QWORD *)(v0 + 1368);
      v16 = *(_QWORD *)(v0 + 1360);
      v83 = *(_QWORD *)(v0 + 1344);
      v79 = *(_QWORD *)(v0 + 1376);
      v81 = *(_QWORD *)(v0 + 1336);
      v17 = *(_QWORD *)(v0 + 1112);
      v18 = *(_QWORD *)(v0 + 1096);
      v19 = *(_WORD *)(v0 + 354);
      type = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1496);
      v20 = swift_slowAlloc(52, -1);
      log = (os_log_t)swift_slowAlloc(160, -1);
      v96 = (uint64_t)log;
      *(_DWORD *)v20 = 136447234;
      v21 = (char *)MusicLibrary.ActionableState.description.getter(v18, v19);
      *(_QWORD *)(v20 + 4) = sub_1000BA30C(v21, v22, &v96);
      v23 = swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v23);
      v24 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v25 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v15, v24);
      v27 = v26;
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v14, v15);
      *(_QWORD *)(v20 + 14) = sub_1000BA30C(v25, v27, &v96);
      swift_release_n(v17, 2);
      v28 = swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v28);
      v29 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v30 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v81, v29);
      v32 = v31;
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v16, v81);
      *(_QWORD *)(v20 + 24) = sub_1000BA30C(v30, v32, &v96);
      swift_release_n(v17, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 32) = 2082;
      v90(v85, v89, v87);
      v33 = (char *)String.init<A>(describing:)(v85, v87);
      *(_QWORD *)(v20 + 34) = sub_1000BA30C(v33, v34, &v96);
      swift_bridgeObjectRelease();
      v35 = type(v89, v87);
      *(_WORD *)(v20 + 42) = 2082;
      v36 = (char *)String.init<A>(describing:)(v35, &_s15ActionableStateO5ErrorON);
      *(_QWORD *)(v20 + 44) = sub_1000BA30C(v36, v37, &v96);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempted to perform unsupported action for state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v20,
        0x34u);
      swift_arrayDestroy(log, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      v67 = *(_QWORD *)(v0 + 1424);
      v68 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v13(v67, v68);
    }

    v69 = sub_1001C4BFC();
    *(_QWORD *)(v0 + 1696) = v69;
    v70 = swift_allocError(&_s15ActionableStateO5ErrorON, v69, 0, 0);
    *(_QWORD *)(v0 + 1704) = v70;
    v71 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1712) = v71;
    *v71 = v0;
    v71[1] = sub_1001BDCD0;
    return sub_1001BFFC8(v70, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1416);
    swift_errorRelease(*(_QWORD *)(v0 + 1088));
    v4(v38, v7, v5);
    swift_retain_n(v6, 3);
    swift_errorRetain(v1);
    swift_retain(v6);
    v39 = swift_errorRetain(v1);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v42)
    {
      v84 = *(_QWORD *)(v0 + 1416);
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v80 = *(_QWORD *)(v0 + 1432);
      v82 = *(_QWORD *)(v0 + 1400);
      v44 = *(_QWORD *)(v0 + 1392);
      loga = v40;
      v45 = *(_QWORD *)(v0 + 1368);
      v46 = *(_QWORD *)(v0 + 1360);
      v78 = *(_QWORD *)(v0 + 1344);
      v76 = *(_QWORD *)(v0 + 1376);
      v77 = *(_QWORD *)(v0 + 1336);
      v47 = *(_QWORD *)(v0 + 1112);
      typea = v41;
      v48 = *(_QWORD *)(v0 + 1096);
      v49 = *(_WORD *)(v0 + 354);
      v88 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
      v50 = swift_slowAlloc(52, -1);
      v91 = swift_slowAlloc(160, -1);
      v96 = v91;
      *(_DWORD *)v50 = 136447234;
      v51 = (char *)MusicLibrary.ActionableState.description.getter(v48, v49);
      *(_QWORD *)(v50 + 4) = sub_1000BA30C(v51, v52, &v96);
      v53 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v53);
      v54 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v55 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v45, v54);
      v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v44, v45);
      *(_QWORD *)(v50 + 14) = sub_1000BA30C(v55, v57, &v96);
      swift_release_n(v47, 2);
      v58 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v58);
      v59 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v60 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v77, v59);
      v62 = v61;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v46, v77);
      *(_QWORD *)(v50 + 24) = sub_1000BA30C(v60, v62, &v96);
      swift_release_n(v47, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 32) = 2082;
      v86(v80, v84, v82);
      v63 = (char *)String.init<A>(describing:)(v80, v82);
      *(_QWORD *)(v50 + 34) = sub_1000BA30C(v63, v64, &v96);
      swift_bridgeObjectRelease();
      v88(v84, v82);
      *(_WORD *)(v50 + 42) = 2082;
      *(_QWORD *)(v0 + 1080) = v1;
      swift_errorRetain(v1);
      v65 = (char *)String.init<A>(describing:)(v0 + 1080, v2);
      *(_QWORD *)(v50 + 44) = sub_1000BA30C(v65, v66, &v96);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Action failed for button state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v50,
        0x34u);
      swift_arrayDestroy(v91, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {
      v73 = *(_QWORD *)(v0 + 1416);
      v74 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v43(v73, v74);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
    v75 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1720) = v75;
    *v75 = v0;
    v75[1] = sub_1001BDF14;
    return sub_1001BFFC8(v1, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
}

uint64_t sub_1001BE8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t (*type)(uint64_t, uint64_t);
  os_log_type_t typea;
  os_log_t log;
  NSObject *loga;
  uint64_t v98;

  v1 = *(_QWORD *)(v0 + 1608);
  v2 = *(_QWORD *)(v0 + 1600);
  swift_release(*(_QWORD *)(v0 + 1616));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 1632);
  *(_QWORD *)(v0 + 1688) = v3;
  *(_QWORD *)(v0 + 1088) = v3;
  swift_errorRetain(v3);
  v4 = sub_10000B4C8((uint64_t *)&unk_100550630);
  v5 = swift_dynamicCast(v4, v0 + 1088, v4, &_s15ActionableStateO5ErrorON, 0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
  v7 = *(_QWORD *)(v0 + 1400);
  v8 = *(_QWORD *)(v0 + 1112);
  v9 = *(_QWORD *)(v0 + 1104);
  if (v5)
  {
    v10 = *(_QWORD *)(v0 + 1424);
    swift_errorRelease(v3);
    v6(v10, v9, v7);
    v11 = swift_retain_n(v8, 4);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v14)
    {
      v91 = *(_QWORD *)(v0 + 1424);
      v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v87 = *(_QWORD *)(v0 + 1432);
      v89 = *(_QWORD *)(v0 + 1400);
      v16 = *(_QWORD *)(v0 + 1392);
      v17 = *(_QWORD *)(v0 + 1368);
      v18 = *(_QWORD *)(v0 + 1360);
      v85 = *(_QWORD *)(v0 + 1344);
      v81 = *(_QWORD *)(v0 + 1376);
      v83 = *(_QWORD *)(v0 + 1336);
      v19 = *(_QWORD *)(v0 + 1112);
      v20 = *(_QWORD *)(v0 + 1096);
      v21 = *(_WORD *)(v0 + 354);
      type = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1496);
      v22 = swift_slowAlloc(52, -1);
      log = (os_log_t)swift_slowAlloc(160, -1);
      v98 = (uint64_t)log;
      *(_DWORD *)v22 = 136447234;
      v23 = (char *)MusicLibrary.ActionableState.description.getter(v20, v21);
      *(_QWORD *)(v22 + 4) = sub_1000BA30C(v23, v24, &v98);
      v25 = swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v25);
      v26 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v27 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v17, v26);
      v29 = v28;
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v16, v17);
      *(_QWORD *)(v22 + 14) = sub_1000BA30C(v27, v29, &v98);
      swift_release_n(v19, 2);
      v30 = swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v30);
      v31 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v32 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v83, v31);
      v34 = v33;
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v18, v83);
      *(_QWORD *)(v22 + 24) = sub_1000BA30C(v32, v34, &v98);
      swift_release_n(v19, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 32) = 2082;
      v92(v87, v91, v89);
      v35 = (char *)String.init<A>(describing:)(v87, v89);
      *(_QWORD *)(v22 + 34) = sub_1000BA30C(v35, v36, &v98);
      swift_bridgeObjectRelease();
      v37 = type(v91, v89);
      *(_WORD *)(v22 + 42) = 2082;
      v38 = (char *)String.init<A>(describing:)(v37, &_s15ActionableStateO5ErrorON);
      *(_QWORD *)(v22 + 44) = sub_1000BA30C(v38, v39, &v98);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempted to perform unsupported action for state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v22,
        0x34u);
      swift_arrayDestroy(log, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      v69 = *(_QWORD *)(v0 + 1424);
      v70 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v15(v69, v70);
    }

    v71 = sub_1001C4BFC();
    *(_QWORD *)(v0 + 1696) = v71;
    v72 = swift_allocError(&_s15ActionableStateO5ErrorON, v71, 0, 0);
    *(_QWORD *)(v0 + 1704) = v72;
    v73 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1712) = v73;
    *v73 = v0;
    v73[1] = sub_1001BDCD0;
    return sub_1001BFFC8(v72, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
  else
  {
    v40 = *(_QWORD *)(v0 + 1416);
    swift_errorRelease(*(_QWORD *)(v0 + 1088));
    v6(v40, v9, v7);
    swift_retain_n(v8, 3);
    swift_errorRetain(v3);
    swift_retain(v8);
    v41 = swift_errorRetain(v3);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v44)
    {
      v86 = *(_QWORD *)(v0 + 1416);
      v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v82 = *(_QWORD *)(v0 + 1432);
      v84 = *(_QWORD *)(v0 + 1400);
      v46 = *(_QWORD *)(v0 + 1392);
      loga = v42;
      v47 = *(_QWORD *)(v0 + 1368);
      v48 = *(_QWORD *)(v0 + 1360);
      v80 = *(_QWORD *)(v0 + 1344);
      v78 = *(_QWORD *)(v0 + 1376);
      v79 = *(_QWORD *)(v0 + 1336);
      v49 = *(_QWORD *)(v0 + 1112);
      typea = v43;
      v50 = *(_QWORD *)(v0 + 1096);
      v51 = *(_WORD *)(v0 + 354);
      v90 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
      v52 = swift_slowAlloc(52, -1);
      v93 = swift_slowAlloc(160, -1);
      v98 = v93;
      *(_DWORD *)v52 = 136447234;
      v53 = (char *)MusicLibrary.ActionableState.description.getter(v50, v51);
      *(_QWORD *)(v52 + 4) = sub_1000BA30C(v53, v54, &v98);
      v55 = swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v55);
      v56 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v57 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v47, v56);
      v59 = v58;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v46, v47);
      *(_QWORD *)(v52 + 14) = sub_1000BA30C(v57, v59, &v98);
      swift_release_n(v49, 2);
      v60 = swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v60);
      v61 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v62 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v79, v61);
      v64 = v63;
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v48, v79);
      *(_QWORD *)(v52 + 24) = sub_1000BA30C(v62, v64, &v98);
      swift_release_n(v49, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 32) = 2082;
      v88(v82, v86, v84);
      v65 = (char *)String.init<A>(describing:)(v82, v84);
      *(_QWORD *)(v52 + 34) = sub_1000BA30C(v65, v66, &v98);
      swift_bridgeObjectRelease();
      v90(v86, v84);
      *(_WORD *)(v52 + 42) = 2082;
      *(_QWORD *)(v0 + 1080) = v3;
      swift_errorRetain(v3);
      v67 = (char *)String.init<A>(describing:)(v0 + 1080, v4);
      *(_QWORD *)(v52 + 44) = sub_1000BA30C(v67, v68, &v98);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Action failed for button state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v52,
        0x34u);
      swift_arrayDestroy(v93, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {
      v75 = *(_QWORD *)(v0 + 1416);
      v76 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v45(v75, v76);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
    v77 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1720) = v77;
    *v77 = v0;
    v77[1] = sub_1001BDF14;
    return sub_1001BFFC8(v3, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
}

uint64_t sub_1001BF070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t (*type)(uint64_t, uint64_t);
  os_log_type_t typea;
  os_log_t log;
  NSObject *loga;
  uint64_t v96;

  v1 = *(_QWORD *)(v0 + 1648);
  *(_QWORD *)(v0 + 1688) = v1;
  *(_QWORD *)(v0 + 1088) = v1;
  swift_errorRetain(v1);
  v2 = sub_10000B4C8((uint64_t *)&unk_100550630);
  v3 = swift_dynamicCast(v2, v0 + 1088, v2, &_s15ActionableStateO5ErrorON, 0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
  v5 = *(_QWORD *)(v0 + 1400);
  v6 = *(_QWORD *)(v0 + 1112);
  v7 = *(_QWORD *)(v0 + 1104);
  if (v3)
  {
    v8 = *(_QWORD *)(v0 + 1424);
    swift_errorRelease(v1);
    v4(v8, v7, v5);
    v9 = swift_retain_n(v6, 4);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v12)
    {
      v89 = *(_QWORD *)(v0 + 1424);
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v85 = *(_QWORD *)(v0 + 1432);
      v87 = *(_QWORD *)(v0 + 1400);
      v14 = *(_QWORD *)(v0 + 1392);
      v15 = *(_QWORD *)(v0 + 1368);
      v16 = *(_QWORD *)(v0 + 1360);
      v83 = *(_QWORD *)(v0 + 1344);
      v79 = *(_QWORD *)(v0 + 1376);
      v81 = *(_QWORD *)(v0 + 1336);
      v17 = *(_QWORD *)(v0 + 1112);
      v18 = *(_QWORD *)(v0 + 1096);
      v19 = *(_WORD *)(v0 + 354);
      type = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1496);
      v20 = swift_slowAlloc(52, -1);
      log = (os_log_t)swift_slowAlloc(160, -1);
      v96 = (uint64_t)log;
      *(_DWORD *)v20 = 136447234;
      v21 = (char *)MusicLibrary.ActionableState.description.getter(v18, v19);
      *(_QWORD *)(v20 + 4) = sub_1000BA30C(v21, v22, &v96);
      v23 = swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v23);
      v24 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v25 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v15, v24);
      v27 = v26;
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v14, v15);
      *(_QWORD *)(v20 + 14) = sub_1000BA30C(v25, v27, &v96);
      swift_release_n(v17, 2);
      v28 = swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v28);
      v29 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v30 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v81, v29);
      v32 = v31;
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v16, v81);
      *(_QWORD *)(v20 + 24) = sub_1000BA30C(v30, v32, &v96);
      swift_release_n(v17, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 32) = 2082;
      v90(v85, v89, v87);
      v33 = (char *)String.init<A>(describing:)(v85, v87);
      *(_QWORD *)(v20 + 34) = sub_1000BA30C(v33, v34, &v96);
      swift_bridgeObjectRelease();
      v35 = type(v89, v87);
      *(_WORD *)(v20 + 42) = 2082;
      v36 = (char *)String.init<A>(describing:)(v35, &_s15ActionableStateO5ErrorON);
      *(_QWORD *)(v20 + 44) = sub_1000BA30C(v36, v37, &v96);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempted to perform unsupported action for state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v20,
        0x34u);
      swift_arrayDestroy(log, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      v67 = *(_QWORD *)(v0 + 1424);
      v68 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v13(v67, v68);
    }

    v69 = sub_1001C4BFC();
    *(_QWORD *)(v0 + 1696) = v69;
    v70 = swift_allocError(&_s15ActionableStateO5ErrorON, v69, 0, 0);
    *(_QWORD *)(v0 + 1704) = v70;
    v71 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1712) = v71;
    *v71 = v0;
    v71[1] = sub_1001BDCD0;
    return sub_1001BFFC8(v70, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1416);
    swift_errorRelease(*(_QWORD *)(v0 + 1088));
    v4(v38, v7, v5);
    swift_retain_n(v6, 3);
    swift_errorRetain(v1);
    swift_retain(v6);
    v39 = swift_errorRetain(v1);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v42)
    {
      v84 = *(_QWORD *)(v0 + 1416);
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v80 = *(_QWORD *)(v0 + 1432);
      v82 = *(_QWORD *)(v0 + 1400);
      v44 = *(_QWORD *)(v0 + 1392);
      loga = v40;
      v45 = *(_QWORD *)(v0 + 1368);
      v46 = *(_QWORD *)(v0 + 1360);
      v78 = *(_QWORD *)(v0 + 1344);
      v76 = *(_QWORD *)(v0 + 1376);
      v77 = *(_QWORD *)(v0 + 1336);
      v47 = *(_QWORD *)(v0 + 1112);
      typea = v41;
      v48 = *(_QWORD *)(v0 + 1096);
      v49 = *(_WORD *)(v0 + 354);
      v88 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
      v50 = swift_slowAlloc(52, -1);
      v91 = swift_slowAlloc(160, -1);
      v96 = v91;
      *(_DWORD *)v50 = 136447234;
      v51 = (char *)MusicLibrary.ActionableState.description.getter(v48, v49);
      *(_QWORD *)(v50 + 4) = sub_1000BA30C(v51, v52, &v96);
      v53 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v53);
      v54 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v55 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v45, v54);
      v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v44, v45);
      *(_QWORD *)(v50 + 14) = sub_1000BA30C(v55, v57, &v96);
      swift_release_n(v47, 2);
      v58 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v58);
      v59 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v60 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v77, v59);
      v62 = v61;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v46, v77);
      *(_QWORD *)(v50 + 24) = sub_1000BA30C(v60, v62, &v96);
      swift_release_n(v47, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 32) = 2082;
      v86(v80, v84, v82);
      v63 = (char *)String.init<A>(describing:)(v80, v82);
      *(_QWORD *)(v50 + 34) = sub_1000BA30C(v63, v64, &v96);
      swift_bridgeObjectRelease();
      v88(v84, v82);
      *(_WORD *)(v50 + 42) = 2082;
      *(_QWORD *)(v0 + 1080) = v1;
      swift_errorRetain(v1);
      v65 = (char *)String.init<A>(describing:)(v0 + 1080, v2);
      *(_QWORD *)(v50 + 44) = sub_1000BA30C(v65, v66, &v96);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Action failed for button state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v50,
        0x34u);
      swift_arrayDestroy(v91, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {
      v73 = *(_QWORD *)(v0 + 1416);
      v74 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v43(v73, v74);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
    v75 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1720) = v75;
    *v75 = v0;
    v75[1] = sub_1001BDF14;
    return sub_1001BFFC8(v1, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
}

uint64_t sub_1001BF7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t (*type)(uint64_t, uint64_t);
  os_log_type_t typea;
  os_log_t log;
  NSObject *loga;
  uint64_t v96;

  v1 = *(_QWORD *)(v0 + 1680);
  *(_QWORD *)(v0 + 1688) = v1;
  *(_QWORD *)(v0 + 1088) = v1;
  swift_errorRetain(v1);
  v2 = sub_10000B4C8((uint64_t *)&unk_100550630);
  v3 = swift_dynamicCast(v2, v0 + 1088, v2, &_s15ActionableStateO5ErrorON, 0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
  v5 = *(_QWORD *)(v0 + 1400);
  v6 = *(_QWORD *)(v0 + 1112);
  v7 = *(_QWORD *)(v0 + 1104);
  if (v3)
  {
    v8 = *(_QWORD *)(v0 + 1424);
    swift_errorRelease(v1);
    v4(v8, v7, v5);
    v9 = swift_retain_n(v6, 4);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v12)
    {
      v89 = *(_QWORD *)(v0 + 1424);
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v85 = *(_QWORD *)(v0 + 1432);
      v87 = *(_QWORD *)(v0 + 1400);
      v14 = *(_QWORD *)(v0 + 1392);
      v15 = *(_QWORD *)(v0 + 1368);
      v16 = *(_QWORD *)(v0 + 1360);
      v83 = *(_QWORD *)(v0 + 1344);
      v79 = *(_QWORD *)(v0 + 1376);
      v81 = *(_QWORD *)(v0 + 1336);
      v17 = *(_QWORD *)(v0 + 1112);
      v18 = *(_QWORD *)(v0 + 1096);
      v19 = *(_WORD *)(v0 + 354);
      type = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1496);
      v20 = swift_slowAlloc(52, -1);
      log = (os_log_t)swift_slowAlloc(160, -1);
      v96 = (uint64_t)log;
      *(_DWORD *)v20 = 136447234;
      v21 = (char *)MusicLibrary.ActionableState.description.getter(v18, v19);
      *(_QWORD *)(v20 + 4) = sub_1000BA30C(v21, v22, &v96);
      v23 = swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v23);
      v24 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v25 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v15, v24);
      v27 = v26;
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v14, v15);
      *(_QWORD *)(v20 + 14) = sub_1000BA30C(v25, v27, &v96);
      swift_release_n(v17, 2);
      v28 = swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v28);
      v29 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v30 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v81, v29);
      v32 = v31;
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v16, v81);
      *(_QWORD *)(v20 + 24) = sub_1000BA30C(v30, v32, &v96);
      swift_release_n(v17, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 32) = 2082;
      v90(v85, v89, v87);
      v33 = (char *)String.init<A>(describing:)(v85, v87);
      *(_QWORD *)(v20 + 34) = sub_1000BA30C(v33, v34, &v96);
      swift_bridgeObjectRelease();
      v35 = type(v89, v87);
      *(_WORD *)(v20 + 42) = 2082;
      v36 = (char *)String.init<A>(describing:)(v35, &_s15ActionableStateO5ErrorON);
      *(_QWORD *)(v20 + 44) = sub_1000BA30C(v36, v37, &v96);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Attempted to perform unsupported action for state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v20,
        0x34u);
      swift_arrayDestroy(log, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      v67 = *(_QWORD *)(v0 + 1424);
      v68 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v13(v67, v68);
    }

    v69 = sub_1001C4BFC();
    *(_QWORD *)(v0 + 1696) = v69;
    v70 = swift_allocError(&_s15ActionableStateO5ErrorON, v69, 0, 0);
    *(_QWORD *)(v0 + 1704) = v70;
    v71 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1712) = v71;
    *v71 = v0;
    v71[1] = sub_1001BDCD0;
    return sub_1001BFFC8(v70, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1416);
    swift_errorRelease(*(_QWORD *)(v0 + 1088));
    v4(v38, v7, v5);
    swift_retain_n(v6, 3);
    swift_errorRetain(v1);
    swift_retain(v6);
    v39 = swift_errorRetain(v1);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
    if (v42)
    {
      v84 = *(_QWORD *)(v0 + 1416);
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1488);
      v80 = *(_QWORD *)(v0 + 1432);
      v82 = *(_QWORD *)(v0 + 1400);
      v44 = *(_QWORD *)(v0 + 1392);
      loga = v40;
      v45 = *(_QWORD *)(v0 + 1368);
      v46 = *(_QWORD *)(v0 + 1360);
      v78 = *(_QWORD *)(v0 + 1344);
      v76 = *(_QWORD *)(v0 + 1376);
      v77 = *(_QWORD *)(v0 + 1336);
      v47 = *(_QWORD *)(v0 + 1112);
      typea = v41;
      v48 = *(_QWORD *)(v0 + 1096);
      v49 = *(_WORD *)(v0 + 354);
      v88 = *(void (**)(uint64_t, uint64_t))(v0 + 1496);
      v50 = swift_slowAlloc(52, -1);
      v91 = swift_slowAlloc(160, -1);
      v96 = v91;
      *(_DWORD *)v50 = 136447234;
      v51 = (char *)MusicLibrary.ActionableState.description.getter(v48, v49);
      *(_QWORD *)(v50 + 4) = sub_1000BA30C(v51, v52, &v96);
      v53 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2082;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter(v53);
      v54 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v55 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v45, v54);
      v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v44, v45);
      *(_QWORD *)(v50 + 14) = sub_1000BA30C(v55, v57, &v96);
      swift_release_n(v47, 2);
      v58 = swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2082;
      dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter(v58);
      v59 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
      v60 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v77, v59);
      v62 = v61;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v46, v77);
      *(_QWORD *)(v50 + 24) = sub_1000BA30C(v60, v62, &v96);
      swift_release_n(v47, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 32) = 2082;
      v86(v80, v84, v82);
      v63 = (char *)String.init<A>(describing:)(v80, v82);
      *(_QWORD *)(v50 + 34) = sub_1000BA30C(v63, v64, &v96);
      swift_bridgeObjectRelease();
      v88(v84, v82);
      *(_WORD *)(v50 + 42) = 2082;
      *(_QWORD *)(v0 + 1080) = v1;
      swift_errorRetain(v1);
      v65 = (char *)String.init<A>(describing:)(v0 + 1080, v2);
      *(_QWORD *)(v50 + 44) = sub_1000BA30C(v65, v66, &v96);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Action failed for button state: %{public}s,\n\nbased on addStatus: %{public}s,\n\ndownloadStatus: %{public}s,\n\nand item: %{public}s;\n"
        "\n"
        "Error: %{public}s",
        (uint8_t *)v50,
        0x34u);
      swift_arrayDestroy(v91, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {
      v73 = *(_QWORD *)(v0 + 1416);
      v74 = *(_QWORD *)(v0 + 1400);
      swift_release_n(*(_QWORD *)(v0 + 1112), 4);
      v43(v73, v74);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
    v75 = (_QWORD *)swift_task_alloc(dword_10055168C);
    *(_QWORD *)(v0 + 1720) = v75;
    *v75 = v0;
    v75[1] = sub_1001BDF14;
    return sub_1001BFFC8(v1, *(_QWORD *)(v0 + 1096), *(_WORD *)(v0 + 354), *(_QWORD **)(v0 + 1112), *(_QWORD *)(v0 + 1120));
  }
}

uint64_t Logger.libraryActionableState.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10054BC38 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  v0 = type metadata accessor for Logger(0);
  return sub_10000D78C(v0, (uint64_t)static Logger.libraryActionableState);
}

uint64_t sub_1001BFFC8(uint64_t a1, uint64_t a2, __int16 a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 296) = a4;
  *(_QWORD *)(v5 + 304) = a5;
  *(_WORD *)(v5 + 408) = a3;
  *(_QWORD *)(v5 + 280) = a1;
  *(_QWORD *)(v5 + 288) = a2;
  *(_QWORD *)(v5 + 312) = *a4;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 320) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 328) = v7;
  *(_QWORD *)(v5 + 336) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 344) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 352) = v9;
  *(_QWORD *)(v5 + 360) = v10;
  return swift_task_switch(sub_1001C006C, v9, v10);
}

uint64_t sub_1001C006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_WORD *)(v0 + 408);
  _StringGuts.grow(_:)(91);
  v6._countAndFlagsBits = 0xD000000000000032;
  v6._object = (void *)0x800000010044BE50;
  String.append(_:)(v6);
  *(_QWORD *)(v0 + 256) = v4;
  swift_errorRetain(v4);
  v7 = sub_10000B4C8((uint64_t *)&unk_100550630);
  v8._countAndFlagsBits = String.init<A>(describing:)(v0 + 256, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x800000010044BE90;
  v9._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v9);
  v10._countAndFlagsBits = MusicLibrary.ActionableState.description.getter(v3, v5);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x53206D6574490A0ALL;
  v11._object = (void *)0xEE00203A65746174;
  String.append(_:)(v11);
  *(_QWORD *)(v0 + 264) = v2;
  v12 = type metadata accessor for MusicLibrary.ItemState(0, *(_QWORD *)(v1 + class metadata base offset for MusicLibrary.ItemState), *(_QWORD *)(v1 + class metadata base offset for MusicLibrary.ItemState + 8));
  swift_retain(v2);
  v13._countAndFlagsBits = String.init<A>(describing:)(v0 + 264, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 10;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = sub_100139994((uint64_t)_swiftEmptyArrayStorage);
  sub_10017F4F4(0xD00000000000001DLL, 0x800000010044BE30, 0, 0xE000000000000000, (uint64_t)_swiftEmptyArrayStorage, v15, (uint64_t)_swiftEmptyArrayStorage, 1, v0 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100011530(v0 + 72, v0 + 128, &qword_100550648);
  if (*(_QWORD *)(v0 + 136))
  {
    v16 = (__int128 *)(v0 + 184);
    v17 = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 200) = v17;
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 368) = v18;
    *(_QWORD *)(v0 + 376) = v19;
    if (qword_10054BC38 != -1)
      swift_once(&qword_10054BC38, sub_1001C3FC8);
    v48 = v7;
    v46 = (__int128 *)(v0 + 224);
    v47 = (_OWORD *)(v0 + 240);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000D78C(v20, (uint64_t)static Logger.libraryActionableState);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "|—● Presenting Tap-To-Radar alert", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }
    v25 = *(_QWORD *)(v0 + 336);
    v43 = *(_QWORD *)(v0 + 328);
    v44 = *(_QWORD *)(v0 + 320);
    v26 = *(_QWORD **)(v0 + 304);
    v27 = *(_QWORD *)(v0 + 280);

    v28 = v26[4];
    v45 = v26[3];
    sub_10000D900(v26, v45);
    *(_QWORD *)(v0 + 272) = v27;
    swift_errorRetain(v27);
    v29 = String.init<A>(describing:)(v0 + 272, v48);
    v31 = v30;
    *(_QWORD *)(v0 + 384) = v30;
    v32 = sub_10000B4C8(&qword_100552680);
    v33 = swift_allocObject(v32, 144, 7);
    *(_QWORD *)(v0 + 392) = v33;
    *v47 = *(_OWORD *)(v0 + 200);
    v34 = *v16;
    v35 = *(_OWORD *)(v0 + 200);
    *v46 = *v16;
    *(_OWORD *)(v33 + 16) = xmmword_100424BA0;
    *(_OWORD *)(v33 + 32) = v34;
    *(_OWORD *)(v33 + 48) = v35;
    *(_QWORD *)(v33 + 64) = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v33 + 72) = v18;
    *(_QWORD *)(v33 + 80) = v19;
    sub_10005001C((uint64_t)v46);
    sub_10005001C((uint64_t)v47);
    sub_1000DB0D8(v18, v19);
    v36 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v37 = UUID.uuidString.getter(v36);
    v39 = v38;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v25, v44);
    *(_QWORD *)(v33 + 88) = v37;
    *(_QWORD *)(v33 + 96) = v39;
    *(_QWORD *)(v33 + 104) = 19279;
    *(_QWORD *)(v33 + 112) = 0xE200000000000000;
    *(_BYTE *)(v33 + 120) = 2;
    *(_QWORD *)(v33 + 128) = 0;
    *(_QWORD *)(v33 + 136) = 0;
    *(_OWORD *)(v0 + 16) = xmmword_100428060;
    *(_QWORD *)(v0 + 32) = v29;
    *(_QWORD *)(v0 + 40) = v31;
    *(_BYTE *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = v33;
    *(_QWORD *)(v0 + 64) = 0;
    v40 = *(int **)(v28 + 8);
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v40 + *v40);
    v41 = (_QWORD *)swift_task_alloc(v40[1]);
    *(_QWORD *)(v0 + 400) = v41;
    *v41 = v0;
    v41[1] = sub_1001C04F4;
    return v49(v0 + 16, v45, v28);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001C04F4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 400));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1001C0570, *(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360));
}

uint64_t sub_1001C0570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 344));
  sub_1000117BC(v0 + 224);
  sub_1000117BC(v0 + 240);
  sub_1000DB26C(v2, v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *MusicLibrary.ActionableStateController.__allocating_init(item:library:actionsObserver:onStateUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v14;

  v7 = v6;
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v14 = sub_1001C4C98(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 80) - 8) + 8))(a1);
  return v14;
}

char *MusicLibrary.ActionableStateController.init(item:library:actionsObserver:onStateUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;

  v8 = *v6;
  v9 = sub_1001C4C98(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 80) - 8) + 8))(a1);
  return v9;
}

uint64_t sub_1001C06BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v3 = sub_10000B4C8(&qword_100551768);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_10000B4C8(&qword_100551770);
  __chkstk_darwin(v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v10 = result;
    v11 = type metadata accessor for MusicLibrary.AddStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = type metadata accessor for MusicLibrary.DownloadStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
    sub_1001C1CD4((uint64_t)v8, (uint64_t)v5);
    swift_release(v10);
    sub_100011694((uint64_t)v5, &qword_100551768);
    return sub_100011694((uint64_t)v8, &qword_100551770);
  }
  return result;
}

uint64_t MusicLibrary.ActionableStateController.library.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001C0804(char *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  __n128 v48;
  void (*v49)(char *, char *, uint64_t, __n128);
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  _BOOL4 v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t result;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char v128[8];
  char v129[8];
  char v130[32];

  v116 = a1;
  v2 = *v1;
  v126 = type metadata accessor for Album(0);
  v118 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v125 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000B4C8(&qword_100551768);
  __chkstk_darwin(v4);
  v121 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000B4C8(&qword_100551770);
  __chkstk_darwin(v6);
  v120 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_10054D208);
  v9 = __chkstk_darwin(v8);
  v110 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v127 = (uint64_t)&v102 - v11;
  v123 = sub_10000B4C8(&qword_100550690);
  v119 = *(_QWORD *)(v123 - 8);
  v12 = __chkstk_darwin(v123);
  v106 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v109 = (char *)&v102 - v15;
  v16 = __chkstk_darwin(v14);
  v107 = (char *)&v102 - v17;
  v18 = __chkstk_darwin(v16);
  v108 = (char *)&v102 - v19;
  v20 = __chkstk_darwin(v18);
  v112 = (char *)&v102 - v21;
  __chkstk_darwin(v20);
  v117 = (char *)&v102 - v22;
  v23 = sub_10000B4C8(&qword_1005506A0);
  v24 = __chkstk_darwin(v23);
  v115 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v102 - v26;
  v28 = type metadata accessor for Playlist(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v111 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v102 - v33;
  v35 = *(_QWORD *)(v2 + 80);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = __chkstk_darwin(v32);
  v124 = (char *)&v102 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v114 = (char *)&v102 - v40;
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v102 - v42;
  __chkstk_darwin(v41);
  v45 = (char *)&v102 - v44;
  v46 = *(_QWORD *)(v2 + 128);
  v122 = v1;
  v47 = (char *)v1 + v46;
  v48 = swift_beginAccess(v47, v130, 0, 0);
  v49 = *(void (**)(char *, char *, uint64_t, __n128))(v36 + 16);
  v49(v45, v47, v35, v48);
  v50 = v45;
  v51 = v28;
  v52 = v47;
  dispatch thunk of MusicLibrary.ItemState.item.setter(v50);
  ((void (*)(char *, char *, uint64_t))v49)(v43, v47, v35);
  v53 = swift_dynamicCast(v27, v43, v35, v51, 6);
  v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  if ((v53 & 1) == 0)
  {
    v54(v27, 1, 1, v51);
    sub_100011694((uint64_t)v27, &qword_1005506A0);
    v63 = v125;
    v62 = v126;
    v64 = v124;
    goto LABEL_22;
  }
  v113 = (void (*)(char *, char *, uint64_t))v49;
  v54(v27, 0, 1, v51);
  v55 = *(uint64_t (**)(char *, char *, uint64_t))(v29 + 32);
  v56 = v55(v34, v27, v51);
  v57 = v127;
  Playlist.entries.getter(v56);
  v58 = v119;
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  v60 = v57;
  v61 = v123;
  if (v59(v60, 1, v123) != 1)
  {
    v104 = v29;
    v105 = v34;
    v65 = v35;
    v66 = v61;
    v67 = v117;
    v103 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    v103(v117, v127, v66);
    v68 = v114;
    v113(v114, v116, v65);
    v69 = (uint64_t)v115;
    v127 = v65;
    if ((swift_dynamicCast(v115, v68, v65, v51, 6) & 1) == 0)
    {
      v54((char *)v69, 1, 1, v51);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v67, v123);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v51);
      sub_100011694(v69, &qword_1005506A0);
      v63 = v125;
      v62 = v126;
      v64 = v124;
      v35 = v127;
      goto LABEL_21;
    }
    v70 = v67;
    v71 = v69;
    v72 = v58;
    v116 = v52;
    v54((char *)v71, 0, 1, v51);
    v73 = v111;
    v74 = v55(v111, (char *)v71, v51);
    v75 = (uint64_t)v110;
    Playlist.entries.getter(v74);
    v76 = v123;
    if (v59(v75, 1, v123) == 1)
    {
      v77 = *(void (**)(char *, uint64_t))(v104 + 8);
      v77(v73, v51);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v70, v76);
      v77(v105, v51);
      sub_100011694(v75, &qword_10054D208);
LABEL_20:
      v63 = v125;
      v62 = v126;
      v64 = v124;
      v35 = v127;
      v52 = v116;
      goto LABEL_21;
    }
    v103(v112, v75, v76);
    v78 = sub_100012324((unint64_t *)&qword_1005506C0, &qword_100550690, (const char *)&protocol conformance descriptor for MusicItemCollection<A>);
    dispatch thunk of Collection.startIndex.getter(v76);
    dispatch thunk of Collection.endIndex.getter(v76, v78);
    v79 = dispatch thunk of Collection.distance(from:to:)(v129, v128, v76, v78);
    v80 = v70;
    v81 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
    v82 = v108;
    v81(v108, v80, v76);
    if (v79)
    {
      v83 = 0;
    }
    else
    {
      dispatch thunk of Collection.startIndex.getter(v76);
      dispatch thunk of Collection.endIndex.getter(v76, v78);
      v83 = dispatch thunk of Collection.distance(from:to:)(v129, v128, v76, v78) > 0;
    }
    v84 = v107;
    v85 = *(void (**)(char *, uint64_t))(v72 + 8);
    v85(v82, v76);
    v81(v84, v112, v76);
    v86 = v109;
    v81(v109, v117, v76);
    if (v83)
    {
      v85(v86, v76);
      v85(v84, v76);
      v87 = v117;
LABEL_14:
      v88 = type metadata accessor for MusicLibrary.AddStatus(0);
      v89 = (uint64_t)v120;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v120, 1, 1, v88);
      v90 = type metadata accessor for MusicLibrary.DownloadStatus(0);
      v91 = (uint64_t)v121;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v121, 1, 1, v90);
      sub_1001C1CD4(v89, v91);
      sub_100011694(v91, &qword_100551768);
      sub_100011694(v89, &qword_100551770);
      v85(v112, v76);
      v92 = *(void (**)(char *, uint64_t))(v104 + 8);
      v92(v73, v51);
      v85(v87, v76);
      return ((uint64_t (*)(char *, uint64_t))v92)(v105, v51);
    }
    dispatch thunk of Collection.startIndex.getter(v76);
    dispatch thunk of Collection.endIndex.getter(v76, v78);
    v94 = dispatch thunk of Collection.distance(from:to:)(v129, v128, v76, v78);
    v95 = v106;
    v81(v106, v86, v76);
    if (v94 < 1)
    {
      v85(v95, v76);
      v85(v86, v76);
      v85(v84, v76);
      v87 = v117;
    }
    else
    {
      dispatch thunk of Collection.startIndex.getter(v76);
      dispatch thunk of Collection.endIndex.getter(v76, v78);
      v96 = dispatch thunk of Collection.distance(from:to:)(v129, v128, v76, v78);
      v85(v95, v76);
      v85(v86, v76);
      v85(v84, v76);
      v87 = v117;
      if (!v96)
        goto LABEL_14;
    }
    v85(v112, v76);
    v97 = *(void (**)(char *, uint64_t))(v104 + 8);
    v97(v73, v51);
    v85(v87, v76);
    v97(v105, v51);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v51);
  sub_100011694(v127, &qword_10054D208);
  v63 = v125;
  v62 = v126;
  v64 = v124;
LABEL_21:
  v49 = (void (*)(char *, char *, uint64_t, __n128))v113;
LABEL_22:
  ((void (*)(char *, char *, uint64_t))v49)(v64, v52, v35);
  result = swift_dynamicCast(v63, v64, v35, v62, 6);
  if ((_DWORD)result)
  {
    (*(void (**)(char *, uint64_t))(v118 + 8))(v63, v62);
    v98 = type metadata accessor for MusicLibrary.AddStatus(0);
    v99 = (uint64_t)v120;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v120, 1, 1, v98);
    v100 = type metadata accessor for MusicLibrary.DownloadStatus(0);
    v101 = (uint64_t)v121;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v121, 1, 1, v100);
    sub_1001C1CD4(v99, v101);
    sub_100011694(v101, &qword_100551768);
    return sub_100011694(v99, &qword_100551770);
  }
  return result;
}

uint64_t MusicLibrary.ActionableStateController.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
  swift_beginAccess(v4, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t MusicLibrary.ActionableStateController.item.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_1001C517C(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*MusicLibrary.ActionableStateController.item.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  __n128 v10;
  void (*v11)(void *, uint64_t, uint64_t, __n128);

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[6] = malloc(v7);
  v8 = malloc(v7);
  v3[7] = v8;
  v9 = (uint64_t)v1 + *(_QWORD *)(v4 + 128);
  v10 = swift_beginAccess(v9, v3, 0, 0);
  v11 = *(void (**)(void *, uint64_t, uint64_t, __n128))(v6 + 16);
  v3[8] = v11;
  v11(v8, v9, v5, v10);
  return sub_1001C13A8;
}

void sub_1001C13A8(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 56);
    v5 = *(_QWORD *)(v2 + 40);
    v4 = *(void **)(v2 + 48);
    v6 = *(_QWORD *)(v2 + 32);
    (*(void (**)(void *, void *, uint64_t))(v2 + 64))(v4, v3, v6);
    sub_1001C517C((uint64_t)v4);
    v7 = *(void (**)(void *, uint64_t))(v5 + 8);
    v7(v4, v6);
    v7(v3, v6);
  }
  else
  {
    v4 = *(void **)(v2 + 48);
    v3 = *(void **)(v2 + 56);
    v8 = *(_QWORD *)(v2 + 32);
    v9 = *(_QWORD *)(v2 + 40);
    sub_1001C517C((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v3, v8);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t MusicLibrary.ActionableStateController.onStateUpdate.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_beginAccess(v1, v4, 0, 0);
  v2 = *v1;
  swift_retain(v1[1]);
  return v2;
}

uint64_t MusicLibrary.ActionableStateController.onStateUpdate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 144));
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_release(v6);
}

uint64_t (*MusicLibrary.ActionableStateController.onStateUpdate.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144), a1, 33, 0);
  return j__swift_endAccess;
}

void sub_1001C1548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  char *v24;
  char *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE v40[24];
  uint64_t v41[3];
  _BYTE v42[24];

  v3 = v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2 + *(_QWORD *)(v10 + 152);
  swift_beginAccess(v11, v42, 0, 0);
  v12 = *(unsigned __int16 *)(v11 + 8);
  switch(v12 >> 8)
  {
    case 2u:
      if ((a2 & 0xFF00) != 0x200)
        goto LABEL_15;
      break;
    case 3u:
      if ((a2 & 0xFF00) != 0x300)
        goto LABEL_15;
      break;
    case 4u:
      if ((a2 & 0xFF00) != 0x400)
        goto LABEL_15;
      break;
    case 5u:
      if ((a2 & 0xFF00) != 0x500)
        goto LABEL_15;
      break;
    default:
      if (BYTE1(a2) - 2 >= 4)
      {
        if ((v12 & 1) != 0)
        {
          if ((a2 & 1) != 0 && (((a2 ^ v12) >> 8) & 1) == 0)
            return;
        }
        else if ((a2 & 1) == 0 && *(double *)v11 == *(double *)&a1 && (((a2 ^ v12) >> 8) & 1) == 0)
        {
          return;
        }
      }
LABEL_15:
      if (qword_10054BC38 != -1)
        swift_once(&qword_10054BC38, sub_1001C3FC8);
      v13 = type metadata accessor for Logger(0);
      sub_10000D78C(v13, (uint64_t)static Logger.libraryActionableState);
      v14 = swift_retain_n(v2, 4);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(32, -1);
        v38 = swift_slowAlloc(96, -1);
        v41[0] = v38;
        *(_DWORD *)v17 = 136446722;
        v18 = (char *)MusicLibrary.ActionableState.description.getter(a1, a2);
        v37 = a1;
        *(_QWORD *)(v17 + 4) = sub_1000BA30C(v18, v19, v41);
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        v20 = (char *)MusicLibrary.ActionableState.description.getter(*(_QWORD *)v11, *(_WORD *)(v11 + 8));
        *(_QWORD *)(v17 + 14) = sub_1000BA30C(v20, v21, v41);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 22) = 2082;
        v22 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 128);
        v23 = swift_beginAccess(v22, v39, 0, 0);
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, v22, v6, v23);
        v24 = (char *)String.init<A>(describing:)(v9, v6);
        *(_QWORD *)(v17 + 24) = sub_1000BA30C(v24, v25, v41);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease();
        v26 = v16;
        v27 = v37;
        _os_log_impl((void *)&_mh_execute_header, v15, v26, "State updated from: %{public}s to: %{public}s for item: %{public}s)", (uint8_t *)v17, 0x20u);
        v28 = v38;
        swift_arrayDestroy(v38, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

        swift_release_n(v3, 4);
        v27 = a1;
      }
      v29 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 144);
      swift_beginAccess(v29, v41, 0, 0);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))v29;
      v30 = *(_QWORD *)(v29 + 8);
      v32 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 128);
      v33 = swift_beginAccess(v32, v40, 0, 0);
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, v32, v6, v33);
      v34 = *(_QWORD *)v11;
      v35 = *(unsigned __int16 *)(v11 + 8);
      swift_retain(v30);
      v31(v9, v27, a2, v34, v35);
      v36 = swift_release(v30);
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v36);
      break;
  }
}

uint64_t MusicLibrary.ActionableStateController.currentState.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_beginAccess(v1, v3, 0, 0);
  return *(_QWORD *)v1;
}

void sub_1001C1960(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 152);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = *(_QWORD *)v5;
  *(_QWORD *)v5 = a1;
  v7 = *(unsigned __int16 *)(v5 + 8);
  *(_WORD *)(v5 + 8) = a2;
  sub_1001C1548(v6, v7);
}

uint64_t MusicLibrary.ActionableStateController.performAction(alertPresenter:noticePresenter:presentationSource:metricsReportingContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  v6 = *v4;
  v5[22] = *v4;
  v7 = *(_QWORD *)(v6 + 80);
  v5[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[24] = v8;
  v5[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v5[26] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v5[27] = v10;
  v5[28] = v11;
  return swift_task_switch(sub_1001C1A64, v10, v11);
}

uint64_t sub_1001C1A64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t *v9;
  uint64_t Strong;
  uint64_t **v11;
  uint64_t v13;

  v1 = v0[24];
  v2 = v0[25];
  v3 = v0[23];
  v4 = v0[21];
  v5 = v0[19];
  v6 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 152);
  swift_beginAccess(v6, v0 + 11, 0, 0);
  v13 = *(_QWORD *)v6;
  v7 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 128);
  LOWORD(v6) = *(_WORD *)(v6 + 8);
  v8 = swift_beginAccess(v7, v0 + 14, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 16))(v2, v7, v3, v8);
  v9 = *(uint64_t **)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 136));
  sub_1000F23A8(v5, (uint64_t)(v0 + 2));
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 24);
  v0[29] = Strong;
  v11 = (uint64_t **)swift_task_alloc(dword_10055167C);
  v0[30] = (uint64_t)v11;
  *v11 = v0;
  v11[1] = (uint64_t *)sub_1001C1BAC;
  return MusicLibrary.performAction<A>(for:on:itemState:alertPresenter:noticePresenter:presentationSource:actionsObserver:metricsReportingContext:)(v13, v6, v0[25], v9, v0[17], v0[18], (uint64_t)(v0 + 2), Strong);
}

uint64_t sub_1001C1BAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 232);
  v3 = *(_QWORD *)(*v1 + 240);
  v6 = *(_QWORD *)(*v1 + 192);
  v5 = *(_QWORD *)(*v1 + 200);
  v7 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  swift_unknownObjectRelease(v4);
  sub_100011694(v2 + 16, &qword_10054CD90);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v0)
    v8 = sub_1001C1C98;
  else
    v8 = sub_1001C1C5C;
  return swift_task_switch(v8, *(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 224));
}

uint64_t sub_1001C1C5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C1C98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1001C1CD4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  char *v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __n128 v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t, __n128);
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint8_t *v127;
  __int16 v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  _BOOL4 v135;
  uint8_t *v136;
  uint64_t *v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  char *v156;
  os_log_type_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  NSObject *v169;
  os_log_type_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  id result;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  os_log_type_t v188;
  uint8_t *v189;
  NSObject *v190;
  os_log_type_t v191;
  uint8_t *v192;
  void *v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  uint8_t *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  NSObject *v206;
  os_log_type_t v207;
  _BOOL4 v208;
  uint8_t *v209;
  uint64_t v210;
  NSObject *v211;
  os_log_type_t v212;
  _BOOL4 v213;
  uint8_t *v214;
  uint8_t *v215;
  uint8_t *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  _QWORD *v239;
  char *v240;
  char *v241;
  uint64_t TupleTypeMetadata2;
  char *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t *v252;
  char v253[8];
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int16 v258;
  char v259[8];

  v3 = v2;
  v6 = *v2;
  v238 = type metadata accessor for MusicLibrary.AddStatus.UnaddableReason(0);
  v233 = *(_QWORD *)(v238 - 8);
  v7 = __chkstk_darwin(v238);
  v234 = (char *)&v217 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v235 = (char *)&v217 - v10;
  v11 = __chkstk_darwin(v9);
  v240 = (char *)&v217 - v12;
  __chkstk_darwin(v11);
  v236 = (char *)&v217 - v13;
  v14 = sub_10000B4C8(&qword_10054D208);
  __chkstk_darwin(v14);
  v222 = (char *)&v217 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for Playlist(0);
  v228 = *(_QWORD *)(v232 - 8);
  v16 = __chkstk_darwin(v232);
  v227 = (char *)&v217 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v226 = (char *)&v217 - v18;
  v230 = type metadata accessor for Album(0);
  v224 = *(_QWORD *)(v230 - 8);
  v19 = __chkstk_darwin(v230);
  v225 = (char *)&v217 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v229 = (char *)&v217 - v21;
  v22 = *(_QWORD *)(v6 + 80);
  v23 = type metadata accessor for MusicLibrary.AddStatus(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v22, v23, 0, 0);
  v231 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  v243 = (char *)&v217 - v24;
  v25 = sub_10000B4C8(&qword_100551768);
  __chkstk_darwin(v25);
  v27 = (char *)&v217 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = (_QWORD *)type metadata accessor for MusicLibrary.DownloadStatus(0);
  v246 = *(v244 - 1);
  v28 = __chkstk_darwin(v244);
  v221 = (uint64_t *)((char *)&v217 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v217 - v31;
  __chkstk_darwin(v30);
  v249 = (char *)&v217 - v33;
  v34 = sub_10000B4C8(&qword_100551770);
  v35 = __chkstk_darwin(v34);
  v239 = (uint64_t *)((char *)&v217 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = *(_QWORD *)(v23 - 8);
  v38 = __chkstk_darwin(v35);
  v223 = (char *)&v217 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v241 = (char *)&v217 - v41;
  v42 = __chkstk_darwin(v40);
  v251 = (char *)&v217 - v43;
  v245 = v22;
  v247 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v42);
  v237 = (char *)&v217 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (char *)v3 + *(_QWORD *)(v6 + 152);
  swift_beginAccess(v45, v259, 0, 0);
  v220 = *(_QWORD *)v45;
  v219 = *((unsigned __int16 *)v45 + 4);
  v257 = 0;
  v258 = 512;
  if (qword_10054BC38 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  v46 = type metadata accessor for Logger(0);
  v47 = sub_10000D78C(v46, (uint64_t)static Logger.libraryActionableState);
  v48 = swift_retain_n(v3, 2);
  v250 = v47;
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter();
  v51 = os_log_type_enabled(v49, v50);
  v252 = v3;
  v248 = v23;
  if (v51)
  {
    v52 = swift_slowAlloc(12, -1);
    v218 = swift_slowAlloc(32, -1);
    v256 = v218;
    *(_DWORD *)v52 = 136446210;
    v53 = (char *)v252 + *(_QWORD *)(*v252 + 128);
    v54 = swift_beginAccess(v53, v253, 0, 0);
    v55 = v27;
    v56 = a1;
    v57 = a2;
    v58 = v37;
    v59 = v32;
    v60 = v237;
    v61 = v53;
    v62 = v245;
    (*(void (**)(char *, char *, uint64_t, __n128))(v247 + 16))(v237, v61, v245, v54);
    v63 = v60;
    v32 = v59;
    v37 = v58;
    a2 = v57;
    a1 = v56;
    v27 = v55;
    v64 = (char *)String.init<A>(describing:)(v63, v62);
    *(_QWORD *)(v52 + 4) = sub_1000BA30C(v64, v65, &v256);
    swift_release_n(v252, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "╭ Updating state for item: %{public}s", (uint8_t *)v52, 0xCu);
    v66 = v218;
    swift_arrayDestroy(v218, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    v67 = v52;
    v23 = v248;
    swift_slowDealloc(v67, -1, -1);

  }
  else
  {

    swift_release_n(v3, 2);
  }
  v68 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v239;
  sub_100011370(a1, (uint64_t)v239, &qword_100551770);
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v37 + 48))(v68, 1, v23) == 1)
  {
    dispatch thunk of MusicLibrary.ItemState.addStatus.getter();
    sub_100011694((uint64_t)v68, &qword_100551770);
  }
  else
  {
    (*(void (**)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v37 + 32))(v251, v68, v23);
  }
  sub_100011370(a2, (uint64_t)v27, &qword_100551768);
  v69 = v246;
  v70 = v244;
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v246 + 48))(v27, 1, v244) == 1)
  {
    dispatch thunk of MusicLibrary.ItemState.downloadStatus.getter();
    sub_100011694((uint64_t)v27, &qword_100551768);
  }
  else
  {
    (*(void (**)(char *, char *, _QWORD *))(v69 + 32))(v249, v27, v70);
  }
  v71 = v241;
  v72 = *(uint64_t (**)(char *, char *, uint64_t))(v37 + 16);
  v73 = v72(v241, v251, v23);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = swift_slowAlloc(12, -1);
    v77 = swift_slowAlloc(32, -1);
    v256 = v77;
    *(_DWORD *)v76 = 136446210;
    v78 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
    v79 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v23, v78);
    *(_QWORD *)(v76 + 4) = sub_1000BA30C(v79, v80, &v256);
    swift_bridgeObjectRelease();
    v241 = *(char **)(v37 + 8);
    ((void (*)(char *, uint64_t))v241)(v71, v23);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "| Add Status: %{public}s", (uint8_t *)v76, 0xCu);
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    v81 = v77;
    v70 = v244;
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v76, -1, -1);
  }
  else
  {
    v241 = *(char **)(v37 + 8);
    ((void (*)(char *, uint64_t))v241)(v71, v23);
  }

  v82 = v246;
  v239 = *(_QWORD **)(v246 + 16);
  v83 = ((uint64_t (*)(char *, char *, _QWORD *))v239)(v32, v249, v70);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    v86 = swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    v256 = v87;
    *(_DWORD *)v86 = 136446210;
    v88 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
    v89 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v70, v88);
    *(_QWORD *)(v86 + 4) = sub_1000BA30C(v89, v90, &v256);
    swift_bridgeObjectRelease();
    v244 = *(_QWORD **)(v82 + 8);
    ((void (*)(char *, _QWORD *))v244)(v32, v70);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "| Download Status: %{public}s", (uint8_t *)v86, 0xCu);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);
  }
  else
  {
    v244 = *(_QWORD **)(v82 + 8);
    ((void (*)(char *, _QWORD *))v244)(v32, v70);
  }

  v91 = v243;
  v92 = v240;
  v93 = (char *)v252 + *(_QWORD *)(*v252 + 128);
  v94 = swift_beginAccess(v93, &v256, 0, 0);
  v95 = &v91[*(int *)(TupleTypeMetadata2 + 48)];
  v96 = *(void (**)(char *, char *, uint64_t, __n128))(v247 + 16);
  v97 = v245;
  v96(v91, v93, v245, v94);
  v98 = v248;
  v72(v95, v251, v248);
  v99 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v95, v98);
  if (v99 == enum case for MusicLibrary.AddStatus.addable(_:))
  {
    v257 = 0;
    v258 = 768;
    v100 = (uint64_t (*)(char *, uint64_t))v241;
    ((void (*)(char *, uint64_t))v241)(v95, v98);
    goto LABEL_45;
  }
  if (v99 == enum case for MusicLibrary.AddStatus.unaddable(_:))
  {
    (*(void (**)(char *, uint64_t))(v37 + 96))(v95, v248);
    v101 = v233;
    v102 = v236;
    v103 = v238;
    (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v236, v95, v238);
    v104 = *(uint64_t (**)(char *, char *, uint64_t))(v101 + 16);
    v105 = v104(v92, v102, v103);
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      v255 = v109;
      *(_DWORD *)v108 = 136446210;
      v110 = sub_10001254C(&qword_10054CE28, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus.UnaddableReason, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus.UnaddableReason);
      v111 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v238, v110);
      *(_QWORD *)(v108 + 4) = sub_1000BA30C(v111, v112, &v255);
      swift_bridgeObjectRelease();
      v113 = v92;
      v114 = *(void (**)(char *, uint64_t))(v101 + 8);
      v114(v113, v238);
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "|—● Item is unaddable: %{public}s", (uint8_t *)v108, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      v115 = v109;
      v102 = v236;
      swift_slowDealloc(v115, -1, -1);
      v116 = v108;
      v103 = v238;
      swift_slowDealloc(v116, -1, -1);
    }
    else
    {
      v129 = v92;
      v114 = *(void (**)(char *, uint64_t))(v101 + 8);
      v114(v129, v103);
    }

    v130 = v234;
    v131 = v235;
    v104(v235, v102, v103);
    v132 = (*(uint64_t (**)(char *, uint64_t))(v101 + 88))(v131, v103);
    if ((_DWORD)v132 == enum case for MusicLibrary.AddStatus.UnaddableReason.allExplicitContentRestricted(_:)
      || (_DWORD)v132 == enum case for MusicLibrary.AddStatus.UnaddableReason.cloudLibraryRequired(_:)
      || (_DWORD)v132 == enum case for MusicLibrary.AddStatus.UnaddableReason.subscriptionRequired(_:))
    {
      v154 = v104(v130, v102, v103);
      v155 = Logger.logObject.getter(v154);
      v156 = v130;
      v157 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v155, v157))
      {
        v158 = v103;
        v159 = swift_slowAlloc(12, -1);
        v160 = swift_slowAlloc(32, -1);
        v255 = v160;
        *(_DWORD *)v159 = 136315138;
        v161 = sub_10001254C(&qword_10054CE28, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus.UnaddableReason, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus.UnaddableReason);
        v162 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v158, v161);
        *(_QWORD *)(v159 + 4) = sub_1000BA30C(v162, v163, &v255);
        swift_bridgeObjectRelease();
        v114(v156, v158);
        swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v160, -1, -1);
        swift_slowDealloc(v159, -1, -1);

        v164 = v236;
        v165 = v158;
      }
      else
      {

        v114(v156, v103);
        v164 = v102;
        v165 = v103;
      }
      v114(v164, v165);
      v97 = v245;
      v257 = 0;
      v258 = 768;
    }
    else
    {
      v133 = Logger.logObject.getter(v132);
      v134 = static os_log_type_t.default.getter();
      v135 = os_log_type_enabled(v133, v134);
      v97 = v245;
      if (v135)
      {
        v136 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v136 = 0;
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "|—| Reason is not actionable by the user", v136, 2u);
        swift_slowDealloc(v136, -1, -1);
      }

      v114(v102, v103);
      v257 = 0;
      v258 = 512;
      v114(v235, v103);
    }
    v100 = (uint64_t (*)(char *, uint64_t))v241;
    goto LABEL_45;
  }
  if (v99 != enum case for MusicLibrary.AddStatus.added(_:))
  {
    v137 = v252;
    v138 = swift_retain_n(v252, 4);
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.error.getter(v139);
    if (os_log_type_enabled(v139, v140))
    {
      v141 = swift_slowAlloc(22, -1);
      v247 = swift_slowAlloc(64, -1);
      v255 = v247;
      *(_DWORD *)v141 = 136446466;
      v142 = v223;
      dispatch thunk of MusicLibrary.ItemState.addStatus.getter();
      v143 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
      v144 = v248;
      v145 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v248, v143);
      v147 = v146;
      v148 = v144;
      v100 = (uint64_t (*)(char *, uint64_t))v241;
      ((void (*)(char *, uint64_t))v241)(v142, v148);
      *(_QWORD *)(v141 + 4) = sub_1000BA30C(v145, v147, &v255);
      swift_release_n(v252, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v141 + 12) = 2082;
      v149 = v237;
      v150 = v245;
      ((void (*)(char *, char *, uint64_t))v96)(v237, v93, v245);
      v151 = (char *)String.init<A>(describing:)(v149, v150);
      *(_QWORD *)(v141 + 14) = sub_1000BA30C(v151, v152, &v255);
      swift_release_n(v252, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "| Unhandled add status (%{public}s) for item: %{public}s", (uint8_t *)v141, 0x16u);
      v153 = v247;
      swift_arrayDestroy(v247, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v153, -1, -1);
      swift_slowDealloc(v141, -1, -1);

    }
    else
    {

      swift_release_n(v137, 4);
      v100 = (uint64_t (*)(char *, uint64_t))v241;
    }
    v257 = 0;
    v258 = 512;
    v247 = v231;
    v97 = TupleTypeMetadata2;
    v91 = v243;
    goto LABEL_45;
  }
  v117 = v229;
  v118 = v230;
  v119 = swift_dynamicCast(v229, v91, v97, v230, 0);
  v100 = (uint64_t (*)(char *, uint64_t))v241;
  v120 = v232;
  if (v119)
  {
    v121 = v224;
    v122 = v225;
    (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v225, v117, v118);
    v123 = Album.childrenAddStatus(_:)(v252[2]);
    if (v123 == 1)
    {
      v124 = Logger.logObject.getter(v123);
      v125 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v126 = 0;
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "| Album is already added but has at least 1 addable track", v126, 2u);
        v127 = v126;
        v122 = v225;
        swift_slowDealloc(v127, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v118);
      v257 = 0;
      v128 = 768;
LABEL_56:
      v258 = v128;
      goto LABEL_45;
    }
    (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v118);
  }
  v176 = v226;
  v177 = swift_dynamicCast(v226, v91, v97, v120, 0);
  if ((_DWORD)v177)
  {
    v178 = (*(uint64_t (**)(char *, char *, uint64_t))(v228 + 32))(v227, v176, v120);
    v179 = v222;
    Playlist.entries.getter(v178);
    v180 = (uint64_t)v179;
    v181 = sub_10000B4C8(&qword_100550690);
    v182 = *(_QWORD *)(v181 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v180, 1, v181) == 1)
    {
      sub_100011694(v180, &qword_10054D208);
      v100 = (uint64_t (*)(char *, uint64_t))v241;
    }
    else
    {
      v183 = sub_100012324((unint64_t *)&qword_1005506C0, &qword_100550690, (const char *)&protocol conformance descriptor for MusicItemCollection<A>);
      dispatch thunk of Collection.startIndex.getter(v181);
      dispatch thunk of Collection.endIndex.getter(v181, v183);
      v184 = v254;
      v185 = v255;
      v186 = (*(uint64_t (**)(uint64_t, uint64_t))(v182 + 8))(v180, v181);
      v100 = (uint64_t (*)(char *, uint64_t))v241;
      if (v185 == v184)
      {
        v187 = Logger.logObject.getter(v186);
        v188 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v187, v188))
        {
          v189 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v189 = 0;
          _os_log_impl((void *)&_mh_execute_header, v187, v188, "| Playlist is already added but does not have any tracks", v189, 2u);
          swift_slowDealloc(v189, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v228 + 8))(v227, v120);
        v257 = 0;
        v128 = 512;
        goto LABEL_56;
      }
    }
    v177 = (*(uint64_t (**)(char *, uint64_t))(v228 + 8))(v227, v120);
  }
  v190 = Logger.logObject.getter(v177);
  v191 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v190, v191))
  {
    v192 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v192 = 0;
    _os_log_impl((void *)&_mh_execute_header, v190, v191, "|—● Item is added", v192, 2u);
    swift_slowDealloc(v192, -1, -1);
  }

  result = objc_msgSend((id)objc_opt_self(MPCloudController), "sharedCloudController");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v193 = result;
  v194 = objc_msgSend(result, "canShowCloudDownloadButtons");

  if (!v194)
  {
    v199 = Logger.logObject.getter(v195);
    v200 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v199, v200))
    {
      v201 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v201 = 0;
      _os_log_impl((void *)&_mh_execute_header, v199, v200, "|—| MPCloudController -canShowCloudDownloadButton: NO", v201, 2u);
      swift_slowDealloc(v201, -1, -1);
    }

    goto LABEL_67;
  }
  v196 = v221;
  ((void (*)(uint64_t *, char *, _QWORD *))v239)(v221, v249, v70);
  v197 = v246;
  v198 = (*(uint64_t (**)(uint64_t *, _QWORD *))(v246 + 88))(v196, v70);
  if ((_DWORD)v198 == enum case for MusicLibrary.DownloadStatus.downloading(_:))
  {
    (*(void (**)(uint64_t *, _QWORD *))(v197 + 96))(v196, v70);
    v257 = *v196;
    v258 = 0;
    goto LABEL_45;
  }
  v202 = v198;
  if ((_DWORD)v198 == enum case for MusicLibrary.DownloadStatus.paused(_:))
  {
    (*(void (**)(uint64_t *, _QWORD *))(v246 + 96))(v196, v70);
    v203 = v220;
    if (((v219 >> 8) - 2 < 4) | v219 & 1)
      v203 = 0;
    v257 = v203;
    v258 = ((v219 >> 8) - 2 < 4) | v219 & 1 | 0x100;
    v204 = type metadata accessor for MusicLibrary.DownloadStatus.DownloadPauseReasons(0);
    (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v204 - 8) + 8))(v196, v204);
    goto LABEL_45;
  }
  if ((_DWORD)v198 == enum case for MusicLibrary.DownloadStatus.notDownloadable(_:))
  {
LABEL_67:
    v257 = 0;
    v258 = 512;
    goto LABEL_45;
  }
  if ((_DWORD)v198 != enum case for MusicLibrary.DownloadStatus.downloadable(_:))
  {
    if ((_DWORD)v198 == enum case for MusicLibrary.DownloadStatus.downloadWaiting(_:))
    {
      v257 = 0;
      v258 = 1;
      goto LABEL_45;
    }
    if ((_DWORD)v198 == enum case for MusicLibrary.DownloadStatus.downloaded(_:))
    {
      v257 = 0;
      v258 = 1280;
      goto LABEL_45;
    }
    v205 = enum case for MusicLibrary.DownloadStatus.cancelled(_:);
    v206 = Logger.logObject.getter(v198);
    v207 = static os_log_type_t.default.getter();
    v208 = os_log_type_enabled(v206, v207);
    if (v202 != v205)
    {
      v100 = (uint64_t (*)(char *, uint64_t))v241;
      if (v208)
      {
        v215 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v215 = 0;
        _os_log_impl((void *)&_mh_execute_header, v206, v207, "|—| Unhandled case", v215, 2u);
        v216 = v215;
        v196 = v221;
        swift_slowDealloc(v216, -1, -1);
      }

      v257 = 0;
      v258 = 512;
      ((void (*)(uint64_t *, _QWORD *))v244)(v196, v70);
      goto LABEL_45;
    }
    if (v208)
    {
      v209 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v209 = 0;
      swift_slowDealloc(v209, -1, -1);
    }

    v211 = Logger.logObject.getter(v210);
    v212 = static os_log_type_t.default.getter();
    v213 = os_log_type_enabled(v211, v212);
    v100 = (uint64_t (*)(char *, uint64_t))v241;
    if (v213)
    {
      v214 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v214 = 0;
      _os_log_impl((void *)&_mh_execute_header, v211, v212, "|—| 🌚 though we're not sure this is the right thing to do", v214, 2u);
      swift_slowDealloc(v214, -1, -1);
    }

  }
  v257 = 0;
  v258 = 1024;
LABEL_45:
  v166 = (*(uint64_t (**)(char *, uint64_t))(v247 + 8))(v91, v97);
  v167 = v257;
  v168 = v258;
  v169 = Logger.logObject.getter(v166);
  v170 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v169, v170))
  {
    v171 = swift_slowAlloc(12, -1);
    v172 = swift_slowAlloc(32, -1);
    v255 = v172;
    *(_DWORD *)v171 = 136446210;
    v173 = (char *)MusicLibrary.ActionableState.description.getter(v167, v168);
    *(_QWORD *)(v171 + 4) = sub_1000BA30C(v173, v174, &v255);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v169, v170, "╰ Item state resolved to %{public}s", (uint8_t *)v171, 0xCu);
    swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v172, -1, -1);
    swift_slowDealloc(v171, -1, -1);
  }

  swift_beginAccess(&v257, &v255, 0, 0);
  sub_1001C1960(v257, v258);
  ((void (*)(char *, _QWORD *))v244)(v249, v70);
  return (id)v100(v251, v248);
}

double sub_1001C35FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35;
  char v36[24];

  v1 = v0;
  v2 = *(_QWORD **)v0;
  v3 = sub_10000B4C8(&qword_100551748);
  v4 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  v33 = v4;
  __chkstk_darwin(v3);
  v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000B4C8(&qword_100551750);
  v30 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)(v0 + v2[21]);
  swift_beginAccess(v9, v36, 1, 0);
  *v9 = &_swiftEmptySetSingleton;
  v10 = swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  dispatch thunk of MusicLibrary.ItemState.$addStatus.getter(v10);
  v11 = swift_allocObject(&unk_10050A780, 24, 7);
  swift_weakInit(v11 + 16, v1);
  v12 = (_QWORD *)swift_allocObject(&unk_10050A7A8, 56, 7);
  v13 = v2[10];
  v12[2] = v13;
  v14 = v2[11];
  v12[3] = v14;
  v15 = v2[12];
  v12[4] = v15;
  v16 = v2[13];
  v12[5] = v16;
  v12[6] = v11;
  v17 = sub_100012324(&qword_100551758, &qword_100551750, (const char *)&protocol conformance descriptor for Published<A>.Publisher);
  v18 = Publisher<>.sink(receiveValue:)(sub_1001C55E0, v12, v6, v17);
  v19 = swift_release(v12);
  (*(void (**)(char *, uint64_t, __n128))(v30 + 8))(v8, v6, v19);
  swift_beginAccess(v9, v34, 33, 0);
  sub_1001D35A4(&v35, v18);
  swift_endAccess(v34);
  v20 = swift_release(v35);
  v21 = v31;
  dispatch thunk of MusicLibrary.ItemState.$downloadStatus.getter(v20);
  v22 = swift_allocObject(&unk_10050A780, 24, 7);
  swift_weakInit(v22 + 16, v1);
  v23 = (_QWORD *)swift_allocObject(&unk_10050A7D0, 56, 7);
  v23[2] = v13;
  v23[3] = v14;
  v23[4] = v15;
  v23[5] = v16;
  v23[6] = v22;
  v24 = sub_100012324(&qword_100551760, &qword_100551748, (const char *)&protocol conformance descriptor for Published<A>.Publisher);
  v25 = v32;
  v26 = Publisher<>.sink(receiveValue:)(sub_1001C55EC, v23, v32, v24);
  v27 = swift_release(v23);
  (*(void (**)(char *, uint64_t, __n128))(v33 + 8))(v21, v25, v27);
  swift_beginAccess(v9, v34, 33, 0);
  sub_1001D35A4(&v35, v26);
  swift_endAccess(v34);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

uint64_t sub_1001C38DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34[3];

  v4 = sub_10000B4C8(&qword_100551768);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000B4C8(&qword_100551770);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicLibrary.AddStatus(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + 16;
  if (qword_10054BC38 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  v15 = type metadata accessor for Logger(0);
  sub_10000D78C(v15, (uint64_t)static Logger.libraryActionableState);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16 = v33(v13, a1, v10);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v31 = a1;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v32 = v6;
    v22 = v21;
    v34[0] = v21;
    *(_DWORD *)v20 = 136446210;
    v23 = sub_10001254C(&qword_100551690, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.AddStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.AddStatus);
    v24 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v10, v23);
    *(_QWORD *)(v20 + 4) = sub_1000BA30C(v24, v25, v34);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Add status has updated to %{public}s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    v6 = v32;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a1 = v31;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  swift_beginAccess(v14, v34, 0, 0);
  result = swift_weakLoadStrong(v14);
  if (result)
  {
    v29 = result;
    v33(v9, a1, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    v30 = type metadata accessor for MusicLibrary.DownloadStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
    sub_1001C1CD4((uint64_t)v9, (uint64_t)v6);
    swift_release(v29);
    sub_100011694((uint64_t)v6, &qword_100551768);
    return sub_100011694((uint64_t)v9, &qword_100551770);
  }
  return result;
}

uint64_t sub_1001C3BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34[3];

  v4 = sub_10000B4C8(&qword_100551768);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000B4C8(&qword_100551770);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicLibrary.DownloadStatus(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + 16;
  if (qword_10054BC38 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  v15 = type metadata accessor for Logger(0);
  sub_10000D78C(v15, (uint64_t)static Logger.libraryActionableState);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16 = v33(v13, a1, v10);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v31 = v9;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v32 = a1;
    v22 = v21;
    v34[0] = v21;
    *(_DWORD *)v20 = 136446210;
    v23 = sub_10001254C(&qword_100551698, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary.DownloadStatus, (uint64_t)&protocol conformance descriptor for MusicLibrary.DownloadStatus);
    v24 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v10, v23);
    *(_QWORD *)(v20 + 4) = sub_1000BA30C(v24, v25, v34);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Download status has updated to %{public}s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    a1 = v32;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    v9 = v31;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  swift_beginAccess(v14, v34, 0, 0);
  result = swift_weakLoadStrong(v14);
  if (result)
  {
    v29 = result;
    v30 = type metadata accessor for MusicLibrary.AddStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    v33(v6, a1, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    sub_1001C1CD4((uint64_t)v9, (uint64_t)v6);
    swift_release(v29);
    sub_100011694((uint64_t)v6, &qword_100551768);
    return sub_100011694((uint64_t)v9, &qword_100551770);
  }
  return result;
}

char *MusicLibrary.ActionableStateController.deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_release(*((_QWORD *)v0 + 2));
  sub_10019FB08((uint64_t)(v0 + 24));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 128)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 136)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 144) + 8]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 160)]);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MusicLibrary.ActionableStateController.__deallocating_deinit()
{
  uint64_t v0;

  MusicLibrary.ActionableStateController.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001C3FC8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.libraryActionableState);
  sub_10000D78C(v0, (uint64_t)static Logger.libraryActionableState);
  sub_1000DD108(0, (unint64_t *)&qword_10054F900, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0xD000000000000018, 0x800000010044BEB0);
  return Logger.init(_:)(v1);
}

uint64_t static Logger.libraryActionableState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10054BC38 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Logger.libraryActionableState);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1001C40D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType(a2))
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_10000B4C8((uint64_t *)&unk_100550D50);
  else
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
}

uint64_t sub_1001C4124(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100551904);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B1288(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C41B4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100551924);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B1894(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C4244(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_1005519A4);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B1E3C(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C42D4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  v9 = a4[7];
  *(_OWORD *)(v4 + 112) = a4[6];
  *(_OWORD *)(v4 + 128) = v9;
  v10 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v10;
  v11 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_100551984);
  *(_QWORD *)(v4 + 144) = v12;
  *v12 = v4;
  v12[1] = sub_1000F6310;
  return sub_1001B23E4(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C4364(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  v9 = a4[7];
  *(_OWORD *)(v4 + 112) = a4[6];
  *(_OWORD *)(v4 + 128) = v9;
  v10 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v10;
  v11 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_100551964);
  *(_QWORD *)(v4 + 144) = v12;
  *v12 = v4;
  v12[1] = sub_1000F6310;
  return sub_1001B2DA4(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C43F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v4 + 128) = v8;
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a4 + 128);
  v9 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v4 + 64) = v9;
  v10 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v4 + 96) = v10;
  v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v4 + 32) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_100551864);
  *(_QWORD *)(v4 + 152) = v12;
  *v12 = v4;
  v12[1] = sub_1000EFA1C;
  return sub_1001B37C4(a1, a2, a3, (__int128 *)(v4 + 16));
}

uint64_t sub_1001C448C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100551944);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B41F8(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C451C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_1005518C4);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B47A0(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C45AC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_10055178C);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B4D48(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C463C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v5;
  char v10;
  _QWORD *v11;

  v10 = *a5;
  v11 = (_QWORD *)swift_task_alloc(dword_1005517A4);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_100012D1C;
  return sub_1001B52F0(a1, a2, a3, a4, v10);
}

uint64_t sub_1001C46BC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  v9 = a4[7];
  *(_OWORD *)(v4 + 112) = a4[6];
  *(_OWORD *)(v4 + 128) = v9;
  v10 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v10;
  v11 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_100551884);
  *(_QWORD *)(v4 + 144) = v12;
  *v12 = v4;
  v12[1] = sub_1000F0438;
  return sub_1001B5C50(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C474C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  v9 = a4[7];
  *(_OWORD *)(v4 + 112) = a4[6];
  *(_OWORD *)(v4 + 128) = v9;
  v10 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v10;
  v11 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_1005518A4);
  *(_QWORD *)(v4 + 144) = v12;
  *v12 = v4;
  v12[1] = sub_1000F6310;
  return sub_1001B6670(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C47DC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_1005518E4);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B6BB0(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C486C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_1005517E4);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B7158(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C48FC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100551804);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F0E30;
  return sub_1001B7700(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C498C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100551824);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B832C(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C4A1C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v8;
  *(_OWORD *)(v4 + 112) = a4[6];
  v9 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v9;
  v10 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_100551844);
  *(_QWORD *)(v4 + 128) = v11;
  *v11 = v4;
  v11[1] = sub_1000F630C;
  return sub_1001B88D4(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t sub_1001C4AAC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;

  v8 = a4[3];
  *(_OWORD *)(v4 + 48) = a4[2];
  *(_OWORD *)(v4 + 64) = v8;
  v9 = a4[5];
  *(_OWORD *)(v4 + 80) = a4[4];
  *(_OWORD *)(v4 + 96) = v9;
  v10 = a4[1];
  *(_OWORD *)(v4 + 16) = *a4;
  *(_OWORD *)(v4 + 32) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_1005517C4);
  *(_QWORD *)(v4 + 112) = v11;
  *v11 = v4;
  v11[1] = sub_1000F1734;
  return sub_1001B8E7C(a1, a2, a3, (_OWORD *)(v4 + 16));
}

uint64_t _s8MusicKit0A7LibraryC0A4CoreE15ActionableStateO21__derived_enum_equalsySbAF_AFtFZ_0(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  switch(HIBYTE(a2))
  {
    case 2:
      return (a4 & 0xFF00) == 0x200;
    case 3:
      return (a4 & 0xFF00) == 0x300;
    case 4:
      return (a4 & 0xFF00) == 0x400;
    case 5:
      return (a4 & 0xFF00) == 0x500;
    default:
      if (HIBYTE(a4) - 2 < 4)
        return 0;
      if ((a2 & 1) != 0)
      {
        if ((a4 & 1) == 0)
          return 0;
      }
      else if ((a4 & 1) != 0 || *(double *)&a1 != *(double *)&a3)
      {
        return 0;
      }
      return ((a2 & 0x100) == 0) ^ ((unsigned __int16)(a4 & 0x100) >> 8);
  }
}

unint64_t sub_1001C4BFC()
{
  unint64_t result;

  result = qword_100551680;
  if (!qword_100551680)
  {
    result = swift_getWitnessTable(byte_10042FDF8, &_s15ActionableStateO5ErrorON);
    atomic_store(result, &qword_100551680);
  }
  return result;
}

uint64_t sub_1001C4C40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C4C64(uint64_t a1)
{
  sub_100125320(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(void **)(a1 + 48));
  return a1;
}

char *sub_1001C4C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v7 = v6;
  v67 = a1;
  v13 = *(_QWORD *)v7;
  v14 = sub_10000B4C8(&qword_100551768);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000B4C8(&qword_100551770);
  __chkstk_darwin(v17);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v7 + 4) = 0;
  swift_unknownObjectWeakInit(v7 + 24, 0);
  v20 = &v7[*(_QWORD *)(*(_QWORD *)v7 + 152)];
  *(_QWORD *)v20 = 0;
  *((_WORD *)v20 + 4) = 512;
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 160)] = 0;
  v66 = a3;
  v64 = v16;
  v62 = v7 + 24;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100174580((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v21 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 168)] = v21;
  v22 = *(_QWORD *)(v13 + 80);
  v65 = v13;
  v63 = *(_QWORD *)(v13 + 96);
  v23 = MusicLibrary.state<A>(for:)(v67, v22);
  *(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 + 136)] = v23;
  v24 = qword_10054BC38;
  swift_retain(v23);
  if (v24 != -1)
    swift_once(&qword_10054BC38, sub_1001C3FC8);
  v25 = type metadata accessor for Logger(0);
  sub_10000D78C(v25, (uint64_t)static Logger.libraryActionableState);
  v26 = swift_retain_n(v23, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(12, -1);
    v61 = a6;
    v59 = a4;
    v30 = v29;
    v31 = swift_slowAlloc(32, -1);
    v60 = a5;
    v32 = a2;
    v33 = v31;
    v68 = v23;
    v69 = v31;
    *(_DWORD *)v30 = 136446210;
    v34 = (char *)String.init<A>(describing:)(&v68, &type metadata for UnsafeRawPointer);
    *(_QWORD *)(v30 + 4) = sub_1000BA30C(v34, v35, &v69);
    swift_release_n(v23, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Initializing item state: %{public}s", (uint8_t *)v30, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v36 = v33;
    a2 = v32;
    a5 = v60;
    swift_slowDealloc(v36, -1, -1);
    v37 = v30;
    a4 = v59;
    a6 = v61;
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_release_n(v23, 2);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(&v7[*(_QWORD *)(*(_QWORD *)v7 + 128)], v67, v22);
  *((_QWORD *)v7 + 2) = a2;
  *((_QWORD *)v7 + 4) = a4;
  v38 = v66;
  swift_unknownObjectWeakAssign(v62, v66);
  v39 = &v7[*(_QWORD *)(*(_QWORD *)v7 + 144)];
  *(_QWORD *)v39 = a5;
  *((_QWORD *)v39 + 1) = a6;
  v40 = a6;
  v41 = type metadata accessor for MusicLibrary.AddStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v19, 1, 1, v41);
  v42 = type metadata accessor for MusicLibrary.DownloadStatus(0);
  v43 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v64, 1, 1, v42);
  swift_retain(a2);
  swift_retain(v40);
  sub_1001C1CD4((uint64_t)v19, v43);
  sub_100011694(v43, &qword_100551768);
  sub_100011694((uint64_t)v19, &qword_100551770);
  v44 = (void *)MPCloudControllerCanShowCloudDownloadButtonsDidChangeNotification;
  v45 = (void *)objc_opt_self(MPCloudController);
  v46 = v44;
  v47 = objc_msgSend(v45, "sharedCloudController");
  v48 = swift_allocObject(&unk_10050A780, 24, 7);
  swift_weakInit(v48 + 16, v7);
  v49 = a2;
  v50 = (_QWORD *)swift_allocObject(&unk_10050A7F8, 56, 7);
  v50[2] = v22;
  v51 = v65;
  v52 = v63;
  v50[3] = *(_QWORD *)(v65 + 88);
  v50[4] = v52;
  v50[5] = *(_QWORD *)(v51 + 104);
  v50[6] = v48;
  v53 = type metadata accessor for NotificationObserver();
  swift_allocObject(v53, 64, 7);
  v54 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v46, (uint64_t)v47, 1, 1, (uint64_t)sub_1001C55F8, (uint64_t)v50);
  v55 = *(_QWORD *)(*(_QWORD *)v7 + 160);
  v56 = *(_QWORD *)&v7[v55];
  *(_QWORD *)&v7[v55] = v54;
  swift_release(v56);
  sub_1001C35FC();
  swift_release(v23);
  swift_release(v49);
  swift_unknownObjectRelease(v38);
  swift_release(v40);
  return v7;
}

uint64_t sub_1001C517C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = v1 + *(_QWORD *)(v7 + 128);
  v9 = swift_beginAccess(v8, v13, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v6, v8, v3, v9);
  v10 = swift_beginAccess(v8, v12, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 24))(v8, a1, v3, v10);
  swift_endAccess(v12);
  sub_1001C0804(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001C525C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int16 v5;
  _BYTE v6[24];

  v3 = *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 152);
  result = swift_beginAccess(v3, v6, 0, 0);
  v5 = *(_WORD *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_WORD *)(a2 + 8) = v5;
  return result;
}

void sub_1001C52B4(uint64_t a1)
{
  sub_1001C1960(*(_QWORD *)a1, *(_WORD *)(a1 + 8));
}

uint64_t sub_1001C52E0()
{
  return 32;
}

__n128 sub_1001C52EC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t _s15ActionableStateOwCP(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t _s15ActionableStateOwet(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 < 2)
    return 0;
  v4 = (v3 + 2147483646) & 0x7FFFFFFF;
  result = v4 - 3;
  if (v4 <= 3)
    return 0;
  return result;
}

uint64_t _s15ActionableStateOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 5;
  }
  return result;
}

uint64_t sub_1001C539C(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 9);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_1001C53B8(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicLibrary.ActionableState()
{
  return &type metadata for MusicLibrary.ActionableState;
}

uint64_t sub_1001C53F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_10042FD40;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for () + 64;
    v4[5] = &unk_10042FD58;
    v4[6] = &unk_10042FD70;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 8, v4, a1 + 112);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for MusicLibrary.ActionableStateController(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for MusicLibrary.ActionableStateController);
}

uint64_t _s15ActionableStateO5ErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001C54F4 + 4 * byte_10042FC94[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001C5514 + 4 * byte_10042FC99[v4]))();
}

_BYTE *sub_1001C54F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001C5514(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C551C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C5524(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C552C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C5534(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s15ActionableStateO5ErrorOMa()
{
  return &_s15ActionableStateO5ErrorON;
}

unint64_t sub_1001C5554()
{
  unint64_t result;

  result = qword_100551740;
  if (!qword_100551740)
  {
    result = swift_getWitnessTable(byte_10042FDD0, &_s15ActionableStateO5ErrorON);
    atomic_store(result, (unint64_t *)&qword_100551740);
  }
  return result;
}

uint64_t sub_1001C5598()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C55BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001C55E0(uint64_t a1)
{
  return sub_1001C5604(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001C38DC);
}

uint64_t sub_1001C55EC(uint64_t a1)
{
  return sub_1001C5604(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001C3BF8);
}

uint64_t sub_1001C55F8(uint64_t a1)
{
  return sub_1001C5604(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001C06BC);
}

uint64_t sub_1001C5604(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1001C5620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10055177C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551778 + dword_100551778))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C56A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001B9DA8(a1, v1 + 16, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C56C8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  sub_100011758(v0 + 14);
  swift_bridgeObjectRelease();
  swift_release(v0[23]);
  swift_release(v0[26]);
  swift_release(v0[28]);
  return swift_deallocObject(v0, 233, 7);
}

uint64_t sub_1001C573C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551794);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))((char *)&dword_100551790 + dword_100551790))(a1, v4, v5, v1 + 32, (char *)(v1 + 232));
}

uint64_t sub_1001C57C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001B9DA8(a1, v1 + 16, "%{public}s: waiting for finish to return…");
}

uint64_t sub_1001C57EC(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[6];

  v2 = v1[4];
  v6[2] = v1[3];
  v6[3] = v2;
  v3 = v1[6];
  v6[4] = v1[5];
  v6[5] = v3;
  v4 = v1[2];
  v6[0] = v1[1];
  v6[1] = v4;
  return sub_1001B9F8C(a1, (uint64_t)v6, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C582C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[10]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_1001C5878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005517B4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1005517B0 + dword_1005517B0))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C58FC(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[6];

  v2 = v1[4];
  v6[2] = v1[3];
  v6[3] = v2;
  v3 = v1[6];
  v6[4] = v1[5];
  v6[5] = v3;
  v4 = v1[2];
  v6[0] = v1[1];
  v6[1] = v4;
  return sub_1001B9F8C(a1, (uint64_t)v6, "%{public}s: waiting for finish to return…");
}

_QWORD *sub_1001C593C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[9];
  swift_release(a1[11]);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_1001C59AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005517D4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1005517D0 + dword_1005517D0))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C5A34(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[7];

  v2 = v1[6];
  v6[4] = v1[5];
  v6[5] = v2;
  v6[6] = v1[7];
  v3 = v1[2];
  v6[0] = v1[1];
  v6[1] = v3;
  v4 = v1[4];
  v6[2] = v1[3];
  v6[3] = v4;
  return sub_1001B0CB4(a1, (uint64_t)v6, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C5A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005517F4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000DC64;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1005517F0 + dword_1005517F0))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C5B04(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[7];

  v2 = v1[6];
  v6[4] = v1[5];
  v6[5] = v2;
  v6[6] = v1[7];
  v3 = v1[2];
  v6[0] = v1[1];
  v6[1] = v3;
  v4 = v1[4];
  v6[2] = v1[3];
  v6[3] = v4;
  return sub_1001B0CB4(a1, (uint64_t)v6, "%{public}s: waiting for finish to return…");
}

uint64_t sub_1001C5B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551814);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551810 + dword_100551810))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C5BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551834);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551830 + dword_100551830))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C5C68(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(v1 + 128);
  v7[6] = *(_OWORD *)(v1 + 112);
  v7[7] = v2;
  v8 = *(_QWORD *)(v1 + 144);
  v3 = *(_OWORD *)(v1 + 64);
  v7[2] = *(_OWORD *)(v1 + 48);
  v7[3] = v3;
  v4 = *(_OWORD *)(v1 + 96);
  v7[4] = *(_OWORD *)(v1 + 80);
  v7[5] = v4;
  v5 = *(_OWORD *)(v1 + 32);
  v7[0] = *(_OWORD *)(v1 + 16);
  v7[1] = v5;
  return sub_1001B9BCC(a1, (uint64_t)v7, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C5CB8()
{
  _QWORD *v0;
  void *v1;

  swift_unknownObjectRelease(v0[2]);
  v1 = (void *)v0[4];
  if ((unint64_t)v1 >= 4)

  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[15]);
  swift_release(v0[18]);
  swift_release(v0[20]);
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1001C5D24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551854);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100551850 + dword_100551850))(a1, v4, v5, v1 + 32);
}

uint64_t sub_1001C5DA8(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;

  v2 = *(_OWORD *)(v1 + 128);
  v7[6] = *(_OWORD *)(v1 + 112);
  v7[7] = v2;
  v8 = *(_QWORD *)(v1 + 144);
  v3 = *(_OWORD *)(v1 + 64);
  v7[2] = *(_OWORD *)(v1 + 48);
  v7[3] = v3;
  v4 = *(_OWORD *)(v1 + 96);
  v7[4] = *(_OWORD *)(v1 + 80);
  v7[5] = v4;
  v5 = *(_OWORD *)(v1 + 32);
  v7[0] = *(_OWORD *)(v1 + 16);
  v7[1] = v5;
  return sub_1001B9BCC(a1, (uint64_t)v7, "%{public}s: waiting for finish to return…");
}

uint64_t sub_1001C5DF8()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C5E08(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = v1[6];
  v7[4] = v1[5];
  v7[5] = v2;
  v3 = v1[8];
  v7[6] = v1[7];
  v7[7] = v3;
  v4 = v1[2];
  v7[0] = v1[1];
  v7[1] = v4;
  v5 = v1[4];
  v7[2] = v1[3];
  v7[3] = v5;
  return sub_1001B108C(a1, (uint64_t)v7, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C5E50()
{
  return sub_1000F5AA0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C5E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551874);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551870 + dword_100551870))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C5EE0()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C5EF0(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = v1[6];
  v7[4] = v1[5];
  v7[5] = v2;
  v3 = v1[8];
  v7[6] = v1[7];
  v7[7] = v3;
  v4 = v1[2];
  v7[0] = v1[1];
  v7[1] = v4;
  v5 = v1[4];
  v7[2] = v1[3];
  v7[3] = v5;
  return sub_1001B108C(a1, (uint64_t)v7, "%{public}s: waiting for finish to return…");
}

uint64_t sub_1001C5F38()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C5F48()
{
  return sub_1000F5AA0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C5F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551894);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551890 + dword_100551890))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C5FD8()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C5FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005518B4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1005518B0 + dword_1005518B0))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C607C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005518D4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1005518D0 + dword_1005518D0))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C6108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005518F4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_1005518F0 + dword_1005518F0))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C6194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551914);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551910 + dword_100551910))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C6220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551934);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551930 + dword_100551930))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C62A4()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001C62B8(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = v1[6];
  v7[4] = v1[5];
  v7[5] = v2;
  v3 = v1[8];
  v7[6] = v1[7];
  v7[7] = v3;
  v4 = v1[2];
  v7[0] = v1[1];
  v7[1] = v4;
  v5 = v1[4];
  v7[2] = v1[3];
  v7[3] = v5;
  return sub_1001B0E90(a1, (uint64_t)v7, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C6300()
{
  return sub_1000F5AA0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001C6314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551954);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551950 + dword_100551950))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C6394()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001C63A8(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = v1[6];
  v7[4] = v1[5];
  v7[5] = v2;
  v3 = v1[8];
  v7[6] = v1[7];
  v7[7] = v3;
  v4 = v1[2];
  v7[0] = v1[1];
  v7[1] = v4;
  v5 = v1[4];
  v7[2] = v1[3];
  v7[3] = v5;
  return sub_1001B0E90(a1, (uint64_t)v7, "%{public}s: waiting for finish to return…");
}

uint64_t sub_1001C63F0()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C6404(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = v1[6];
  v7[4] = v1[5];
  v7[5] = v2;
  v3 = v1[8];
  v7[6] = v1[7];
  v7[7] = v3;
  v4 = v1[2];
  v7[0] = v1[1];
  v7[1] = v4;
  v5 = v1[4];
  v7[2] = v1[3];
  v7[3] = v5;
  return sub_1001B99F0(a1, (uint64_t)v7, "%{public}s: waiting for perform to return…");
}

uint64_t sub_1001C644C()
{
  return sub_1000F5AA0((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C6460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551974);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551970 + dword_100551970))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

uint64_t sub_1001C64E0()
{
  return sub_1000F5948((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001C64F4(uint64_t a1)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];

  v2 = v1[6];
  v7[4] = v1[5];
  v7[5] = v2;
  v3 = v1[8];
  v7[6] = v1[7];
  v7[7] = v3;
  v4 = v1[2];
  v7[0] = v1[1];
  v7[1] = v4;
  v5 = v1[4];
  v7[2] = v1[3];
  v7[3] = v5;
  return sub_1001B99F0(a1, (uint64_t)v7, "%{public}s: waiting for finish to return…");
}

uint64_t sub_1001C6544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_100551994);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&dword_100551990 + dword_100551990))(a1, v4, v5, (_OWORD *)(v1 + 32));
}

_QWORD *sub_1001C65C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  v6 = a1[11];
  swift_release(a1[13]);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t Library.ContentFilterOption.id.getter(char a1)
{
  if (!a1)
    return 7105633;
  if (a1 == 1)
    return 0x657469726F766166;
  return 0x64616F6C6E776F64;
}

uint64_t sub_1001C66D0(char *a1, unsigned __int8 *a2)
{
  return sub_1000C884C(*a1, *a2);
}

unint64_t sub_1001C66DC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore7LibraryO19ContentFilterOptionO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001C6708(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0x657469726F766166;
  if (v2 != 1)
    v4 = 0x64616F6C6E776F64;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 7105633;
  if (!v5)
    v3 = 0xE900000000000073;
  *a1 = v6;
  a1[1] = v3;
}

Swift::Int sub_1001C6768()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 0x657469726F766166;
  if (v1 != 1)
    v2 = 0x64616F6C6E776F64;
  if (v1)
    v3 = v2;
  else
    v3 = 7105633;
  if (v1)
    v4 = 0xE900000000000073;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C6808(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x657469726F766166;
  if (*v1 != 1)
    v2 = 0x64616F6C6E776F64;
  if (*v1)
    v3 = v2;
  else
    v3 = 7105633;
  if (*v1)
    v4 = 0xE900000000000073;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1001C6884()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 0x657469726F766166;
  if (v1 != 1)
    v2 = 0x64616F6C6E776F64;
  if (v1)
    v3 = v2;
  else
    v3 = 7105633;
  if (v1)
    v4 = 0xE900000000000073;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C6920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001CCB50();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001C697C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001CCB50();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void Optional<A>.convertToSet.getter(char a1)
{
  __asm { BR              X10 }
}

void *sub_1001C6A10()
{
  swift_bridgeObjectRelease();
  return &_swiftEmptySetSingleton;
}

uint64_t Library.Context.musicLibrary.getter()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t Library.Context.musicLibrary.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t Library.Context.album.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 20), a1, &qword_10054CE38);
}

uint64_t Library.Context.album.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 20), &qword_10054CE38);
}

CFRange (__swiftcall *Library.Context.album.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.artist.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 24), a1, &qword_10054E650);
}

uint64_t Library.Context.artist.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 24), &qword_10054E650);
}

CFRange (__swiftcall *Library.Context.artist.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.composer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 28), a1, &qword_1005519C8);
}

uint64_t Library.Context.composer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 28), &qword_1005519C8);
}

CFRange (__swiftcall *Library.Context.composer.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.genre.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 32), a1, &qword_1005519D0);
}

uint64_t Library.Context.genre.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 32), &qword_1005519D0);
}

CFRange (__swiftcall *Library.Context.genre.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.playlist.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 36), a1, &qword_1005506A0);
}

uint64_t Library.Context.playlist.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 36), &qword_1005506A0);
}

CFRange (__swiftcall *Library.Context.playlist.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.tvShow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 40), a1, &qword_10054E7C8);
}

uint64_t Library.Context.tvShow.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 40), &qword_10054E7C8);
}

CFRange (__swiftcall *Library.Context.tvShow.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.tvSeason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_100011370(v1 + *(int *)(v3 + 44), a1, &qword_10054E798);
}

uint64_t Library.Context.tvSeason.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Library.Context(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 44), &qword_10054E798);
}

CFRange (__swiftcall *Library.Context.tvSeason.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.useDownloadedContentOnly.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Library.Context(0) + 48));
}

uint64_t Library.Context.useDownloadedContentOnly.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

CFRange (__swiftcall *Library.Context.useDownloadedContentOnly.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.sortOption.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Library.Context(0) + 52));
}

uint64_t Library.Context.sortOption.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

CFRange (__swiftcall *Library.Context.sortOption.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.filterOption.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Library.Context(0) + 56));
}

uint64_t Library.Context.filterOption.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

CFRange (__swiftcall *Library.Context.filterOption.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Library.Context(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Library.Context.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Library.Context(0) + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

CFRange (__swiftcall *Library.Context.text.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.playlistVariants.getter()
{
  type metadata accessor for Library.Context(0);
  return swift_bridgeObjectRetain();
}

uint64_t Library.Context.playlistVariants.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Library.Context(0) + 64);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

CFRange (__swiftcall *Library.Context.playlistVariants.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.isCompilation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Library.Context(0) + 68));
}

uint64_t Library.Context.isCompilation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

CFRange (__swiftcall *Library.Context.isCompilation.modify())(__C::_NSRange)
{
  type metadata accessor for Library.Context(0);
  return CFRange.init(_:);
}

uint64_t Library.Context.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;

  type metadata accessor for MusicLibrary(0);
  *a1 = static MusicLibrary.shared.getter();
  v2 = (int *)type metadata accessor for Library.Context(0);
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for Album(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + v2[6];
  v6 = type metadata accessor for Artist(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (char *)a1 + v2[7];
  v8 = type metadata accessor for Composer(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (char *)a1 + v2[8];
  v10 = type metadata accessor for Genre(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (char *)a1 + v2[9];
  v12 = type metadata accessor for Playlist(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (char *)a1 + v2[10];
  v14 = type metadata accessor for TVShow(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (char *)a1 + v2[11];
  v16 = type metadata accessor for TVSeason(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *((_BYTE *)a1 + v2[12]) = 0;
  *((_BYTE *)a1 + v2[13]) = 2;
  *((_BYTE *)a1 + v2[14]) = 3;
  v18 = (_QWORD *)((char *)a1 + v2[15]);
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)((char *)a1 + v2[16]) = _swiftEmptyArrayStorage;
  *((_BYTE *)a1 + v2[17]) = 2;
  return result;
}

uint64_t Library.Context.with<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v56 = a1;
  v41 = type metadata accessor for TVSeason(0);
  v38 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for TVShow(0);
  v39 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Playlist(0);
  v42 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Genre(0);
  v45 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Composer(0);
  v48 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v52 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Artist(0);
  v51 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Album(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Optional(0, a2);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v35 - v21;
  v55 = a3;
  sub_1001CA718(v57, a3);
  v57 = v17;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v23(v22, v56, v16);
  v56 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v22, 1, a2) != 1)
  {
    v36 = v22;
    v37 = v16;
    v23(v20, (uint64_t)v22, v16);
    v24 = v20;
    if (swift_dynamicCast(v15, v20, a2, v12, 0))
    {
      v25 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 20);
      sub_100011694(v25, &qword_10054CE38);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25, v15, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v25, 0, 1, v12);
    }
    else
    {
      v26 = v20;
      v27 = v54;
      if (!swift_dynamicCast(v11, v26, a2, v54, 0))
      {
        v31 = v52;
        v30 = v53;
        if (swift_dynamicCast(v52, v24, a2, v53, 0))
        {
          v32 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 28);
          sub_100011694(v32, &qword_1005519C8);
          v33 = v48;
        }
        else
        {
          v31 = v49;
          v30 = v50;
          if (swift_dynamicCast(v49, v24, a2, v50, 0))
          {
            v32 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 32);
            sub_100011694(v32, &qword_1005519D0);
            v33 = v45;
          }
          else
          {
            v31 = v46;
            v30 = v47;
            if (swift_dynamicCast(v46, v24, a2, v47, 0))
            {
              v32 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 36);
              sub_100011694(v32, &qword_1005506A0);
              v33 = v42;
            }
            else
            {
              v31 = v43;
              v30 = v44;
              if (swift_dynamicCast(v43, v24, a2, v44, 0))
              {
                v32 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 40);
                sub_100011694(v32, &qword_10054E7C8);
                v33 = v39;
              }
              else
              {
                v31 = v40;
                v30 = v41;
                if (!swift_dynamicCast(v40, v24, a2, v41, 0))
                  goto LABEL_17;
                v32 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 44);
                sub_100011694(v32, &qword_10054E798);
                v33 = v38;
              }
            }
          }
        }
        (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v32, v31, v30);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v32, 0, 1, v30);
        goto LABEL_17;
      }
      v28 = v55 + *(int *)(type metadata accessor for Library.Context(0) + 24);
      sub_100011694(v28, &qword_10054E650);
      v29 = v51;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v28, v11, v27);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v28, 0, 1, v27);
    }
LABEL_17:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v24, a2);
    v16 = v37;
    v22 = v36;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v22, v16);
}

uint64_t Library.Context.with(compilation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  sub_1001CA718(v1, a1);
  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(a1 + *(int *)(result + 68)) = 1;
  return result;
}

uint64_t Library.Context.with(sortOption:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1001CA718(v2, a2);
  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(a2 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t Library.Context.with(filterOption:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1001CA718(v2, a2);
  result = type metadata accessor for Library.Context(0);
  *(_BYTE *)(a2 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t Library.Context.with(filterText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t result;

  sub_1001CA718(v3, a3);
  v7 = (_QWORD *)(a3 + *(int *)(type metadata accessor for Library.Context(0) + 60));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v7 = a1;
  v7[1] = a2;
  return result;
}

void Library.Context.SortOption.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(a2 & 1);
}

BOOL static Library.Context.SortOption.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

Swift::Int Library.Context.SortOption.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1001C7B30()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001C7B80()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001C7BBC()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Library.Context.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  Swift::UInt8 v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::UInt v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  Swift::UInt8 v90;
  int *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v3 = type metadata accessor for TVSeason(0);
  v113 = *(_QWORD *)(v3 - 8);
  v114 = v3;
  __chkstk_darwin(v3);
  v97 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_10054E798);
  __chkstk_darwin(v5);
  v112 = (uint64_t)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TVShow(0);
  v110 = *(_QWORD *)(v7 - 8);
  v111 = v7;
  __chkstk_darwin(v7);
  v96 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_10054E7C8);
  __chkstk_darwin(v9);
  v109 = (uint64_t)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Playlist(0);
  v107 = *(_QWORD *)(v11 - 8);
  v108 = v11;
  __chkstk_darwin(v11);
  v95 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000B4C8(&qword_1005506A0);
  __chkstk_darwin(v13);
  v106 = (uint64_t)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Genre(0);
  v104 = *(_QWORD *)(v15 - 8);
  v105 = v15;
  __chkstk_darwin(v15);
  v94 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000B4C8(&qword_1005519D0);
  __chkstk_darwin(v17);
  v103 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Composer(0);
  v101 = *(_QWORD *)(v19 - 8);
  v102 = v19;
  __chkstk_darwin(v19);
  v93 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000B4C8(&qword_1005519C8);
  __chkstk_darwin(v21);
  v100 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Artist(0);
  v98 = *(_QWORD *)(v23 - 8);
  v99 = v23;
  __chkstk_darwin(v23);
  v92 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10000B4C8(&qword_10054E650);
  __chkstk_darwin(v25);
  v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Album(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10000B4C8(&qword_10054CE38);
  __chkstk_darwin(v32);
  v34 = (char *)&v91 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = *v1;
  v35 = type metadata accessor for MusicLibrary(0);
  v36 = sub_10001254C(&qword_1005519D8, (uint64_t (*)(uint64_t))&type metadata accessor for MusicLibrary, (uint64_t)&protocol conformance descriptor for MusicLibrary);
  dispatch thunk of Hashable.hash(into:)(a1, v35, v36);
  v37 = (int *)type metadata accessor for Library.Context(0);
  sub_100011370((uint64_t)v1 + v37[5], (uint64_t)v34, &qword_10054CE38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v34, 1, v28) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v34, v28);
    Hasher._combine(_:)(1u);
    v38 = sub_10001254C(&qword_1005519E0, (uint64_t (*)(uint64_t))&type metadata accessor for Album, (uint64_t)&protocol conformance descriptor for Album);
    dispatch thunk of Hashable.hash(into:)(a1, v28, v38);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  v39 = v1;
  sub_100011370((uint64_t)v1 + v37[6], (uint64_t)v27, &qword_10054E650);
  v40 = v98;
  v41 = v99;
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48))(v27, 1, v99);
  v43 = v111;
  v45 = v102;
  v44 = (uint64_t)v103;
  v46 = (uint64_t)v100;
  if (v42 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v91 = v37;
    v48 = v92;
    v47(v92, v27, v41);
    Hasher._combine(_:)(1u);
    v49 = sub_10001254C(&qword_1005519E8, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
    dispatch thunk of Hashable.hash(into:)(a1, v41, v49);
    v50 = v48;
    v37 = v91;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v50, v41);
  }
  v51 = v105;
  sub_100011370((uint64_t)v39 + v37[7], v46, &qword_1005519C8);
  v52 = v101;
  v53 = v43;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v46, 1, v45) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v54 = v46;
    v55 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v93, v54, v45);
    Hasher._combine(_:)(1u);
    v56 = sub_10001254C(&qword_1005519F0, (uint64_t (*)(uint64_t))&type metadata accessor for Composer, (uint64_t)&protocol conformance descriptor for Composer);
    dispatch thunk of Hashable.hash(into:)(a1, v45, v56);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v45);
  }
  sub_100011370((uint64_t)v39 + v37[8], v44, &qword_1005519D0);
  v57 = v104;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v44, 1, v51) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v58 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v94, v44, v51);
    Hasher._combine(_:)(1u);
    v59 = sub_10001254C(&qword_1005519F8, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
    dispatch thunk of Hashable.hash(into:)(a1, v51, v59);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v51);
  }
  v60 = v106;
  v61 = v107;
  sub_100011370((uint64_t)v39 + v37[9], v106, &qword_1005506A0);
  v62 = v108;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v60, 1, v108) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v63 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v95, v60, v62);
    Hasher._combine(_:)(1u);
    v64 = sub_10001254C(&qword_100551A00, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    dispatch thunk of Hashable.hash(into:)(a1, v62, v64);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v62);
  }
  v65 = v109;
  v66 = v110;
  sub_100011370((uint64_t)v39 + v37[10], v109, &qword_10054E7C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v65, 1, v53) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v67 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v96, v65, v53);
    Hasher._combine(_:)(1u);
    v68 = sub_10001254C(&qword_100551A08, (uint64_t (*)(uint64_t))&type metadata accessor for TVShow, (uint64_t)&protocol conformance descriptor for TVShow);
    dispatch thunk of Hashable.hash(into:)(a1, v53, v68);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v53);
  }
  v69 = v112;
  sub_100011370((uint64_t)v39 + v37[11], v112, &qword_10054E798);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v69, 1, v114) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v71 = v113;
    v70 = v114;
    v72 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v97, v69, v114);
    Hasher._combine(_:)(1u);
    v73 = sub_10001254C(&qword_100551A10, (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason, (uint64_t)&protocol conformance descriptor for TVSeason);
    dispatch thunk of Hashable.hash(into:)(a1, v70, v73);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v70);
  }
  Hasher._combine(_:)(*((_BYTE *)v39 + v37[12]));
  v74 = *((unsigned __int8 *)v39 + v37[13]);
  if (v74 == 2)
  {
    v75 = 0;
  }
  else
  {
    v75 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v75);
  v76 = *((unsigned __int8 *)v39 + v37[14]);
  if (v76 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v76)
    {
      if (v76 == 1)
        v77 = 0x657469726F766166;
      else
        v77 = 0x64616F6C6E776F64;
      v78 = 0xE900000000000073;
    }
    else
    {
      v78 = 0xE300000000000000;
      v77 = 7105633;
    }
    String.hash(into:)(a1, v77, v78);
    swift_bridgeObjectRelease();
  }
  v79 = (_QWORD *)((char *)v39 + v37[15]);
  v80 = v79[1];
  if (v80)
  {
    v81 = *v79;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v81, v80);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v82 = *(_QWORD *)((char *)v39 + v37[16]);
  v83 = *(_QWORD *)(v82 + 16);
  Hasher._combine(_:)(v83);
  if (v83)
  {
    v84 = type metadata accessor for Playlist.Variant(0);
    v85 = *(_QWORD *)(v84 - 8);
    v86 = v82 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
    v87 = *(_QWORD *)(v85 + 72);
    v88 = sub_10001254C(&qword_100551A18, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)(a1, v84, v88);
      v86 += v87;
      --v83;
    }
    while (v83);
    swift_bridgeObjectRelease();
  }
  v89 = *((unsigned __int8 *)v39 + v37[17]);
  if (v89 == 2)
  {
    v90 = 0;
  }
  else
  {
    v90 = v89 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v90);
}

Swift::Int Library.Context.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Library.Context.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001C8700()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Library.Context.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1001C8738()
{
  int *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;

  v0 = (int *)type metadata accessor for Library.Context(0);
  sub_10000D924((uint64_t)v0, qword_1005519A8);
  v1 = (_QWORD *)sub_10000D78C((uint64_t)v0, (uint64_t)qword_1005519A8);
  type metadata accessor for MusicLibrary(0);
  *v1 = static MusicLibrary.shared.getter();
  v2 = (char *)v1 + v0[5];
  v3 = type metadata accessor for Album(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = (char *)v1 + v0[6];
  v5 = type metadata accessor for Artist(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)v1 + v0[7];
  v7 = type metadata accessor for Composer(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (char *)v1 + v0[8];
  v9 = type metadata accessor for Genre(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (char *)v1 + v0[9];
  v11 = type metadata accessor for Playlist(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (char *)v1 + v0[10];
  v13 = type metadata accessor for TVShow(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (char *)v1 + v0[11];
  v15 = type metadata accessor for TVSeason(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *((_BYTE *)v1 + v0[12]) = 0;
  *((_BYTE *)v1 + v0[13]) = 2;
  *((_BYTE *)v1 + v0[14]) = 3;
  v17 = (_QWORD *)((char *)v1 + v0[15]);
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)((char *)v1 + v0[16]) = _swiftEmptyArrayStorage;
  *((_BYTE *)v1 + v0[17]) = 2;
  return result;
}

uint64_t sub_1001C8910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10054BC40 != -1)
    swift_once(&qword_10054BC40, sub_1001C8738);
  v2 = type metadata accessor for Library.Context(0);
  v3 = sub_10000D78C(v2, (uint64_t)qword_1005519A8);
  return sub_1001CA718(v3, a1);
}

uint64_t sub_1001C896C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_10001254C(&qword_100551A38, type metadata accessor for Library.Context, (uint64_t)&protocol conformance descriptor for Library.Context);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.libraryContext.getter()
{
  unint64_t v0;

  v0 = sub_1001CA75C();
  return EnvironmentValues.subscript.getter(&_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v0);
}

uint64_t EnvironmentValues.libraryContext.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Library.Context(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001CA718(a1, (uint64_t)v4);
  v5 = sub_1001CA75C();
  EnvironmentValues.subscript.setter(v4, &_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v5);
  return sub_1001CA7A0(a1);
}

void (*EnvironmentValues.libraryContext.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  unint64_t v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Library.Context(0) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  v5 = sub_1001CA75C();
  v3[4] = v5;
  EnvironmentValues.subscript.getter(&_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v5);
  return sub_1001C8B30;
}

void sub_1001C8B30(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = *a1;
  sub_1001CA718((*a1)[3], (*a1)[2]);
  v4 = (void *)v3[3];
  v5 = v3[4];
  v6 = (void *)v3[1];
  v7 = (void *)v3[2];
  if ((a2 & 1) != 0)
  {
    sub_1001CA718(v3[2], v3[1]);
    EnvironmentValues.subscript.setter(v6, &_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v5);
    sub_1001CA7A0((uint64_t)v7);
  }
  else
  {
    EnvironmentValues.subscript.setter(v3[2], &_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v3[4]);
  }
  sub_1001CA7A0((uint64_t)v4);
  free(v4);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t View.libraryContext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10042FE58);
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release(KeyPath);
}

uint64_t sub_1001C8C4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for Library.Context(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v10 - v6;
  sub_1001CA718(a1, (uint64_t)&v10 - v6);
  sub_1001CA718((uint64_t)v7, (uint64_t)v5);
  v8 = sub_1001CA75C();
  EnvironmentValues.subscript.setter(v5, &_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v8);
  return sub_1001CA7A0((uint64_t)v7);
}

uint64_t MusicLibraryRequest.apply(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_retain(*a1);
  MusicLibraryRequest.library.setter(v4, a2);
  v5 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for Library.Context(0) + 48));
  return MusicLibraryRequest.includeOnlyDownloadedContent.setter(v5, a2);
}

uint64_t _s9MusicCore7LibraryO7ContextV23__derived_struct_equalsySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  void (*v81)(char *, uint64_t);
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char v100;
  void (*v101)(char *, uint64_t);
  int *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char v110;
  void (*v111)(char *, uint64_t);
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char v125;
  void (*v126)(char *, uint64_t);
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char v139;
  void (*v140)(char *, uint64_t);
  int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  void (*v156)(char *, uint64_t);
  int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t result;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char v168;
  void (*v169)(char *, uint64_t);
  int *v170;
  uint64_t v171;
  int v172;
  int v173;
  _BOOL4 v174;
  uint64_t v175;
  int v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  int *v190;
  char v191;
  uint64_t v192;
  int v193;
  int v194;
  _BOOL4 v195;
  int *v196;
  _QWORD *v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;

  v204 = type metadata accessor for TVSeason(0);
  v207 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v199 = (char *)&v196 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_10000B4C8(&qword_100551B50);
  __chkstk_darwin(v202);
  v217 = (char *)&v196 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000B4C8(&qword_10054E798);
  v7 = __chkstk_darwin(v6);
  v200 = (uint64_t)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v203 = (uint64_t)&v196 - v10;
  __chkstk_darwin(v9);
  v206 = (uint64_t)&v196 - v11;
  v210 = type metadata accessor for TVShow(0);
  v215 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v201 = (char *)&v196 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_10000B4C8(&qword_100551B58);
  __chkstk_darwin(v209);
  v212 = (uint64_t)&v196 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000B4C8(&qword_10054E7C8);
  v15 = __chkstk_darwin(v14);
  v205 = (uint64_t)&v196 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v213 = (uint64_t)&v196 - v18;
  __chkstk_darwin(v17);
  v214 = (uint64_t)&v196 - v19;
  v219 = type metadata accessor for Playlist(0);
  v223 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v208 = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_10000B4C8(&qword_100551B60);
  __chkstk_darwin(v218);
  v227 = (char *)&v196 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10000B4C8(&qword_1005506A0);
  v23 = __chkstk_darwin(v22);
  v211 = (uint64_t)&v196 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v221 = (uint64_t)&v196 - v26;
  __chkstk_darwin(v25);
  v222 = (uint64_t)&v196 - v27;
  v226 = type metadata accessor for Genre(0);
  v230 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v216 = (char *)&v196 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_10000B4C8(&qword_100551B68);
  __chkstk_darwin(v225);
  v238 = (char *)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10000B4C8(&qword_1005519D0);
  v31 = __chkstk_darwin(v30);
  v220 = (uint64_t)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v228 = (uint64_t)&v196 - v34;
  __chkstk_darwin(v33);
  v229 = (uint64_t)&v196 - v35;
  v233 = type metadata accessor for Composer(0);
  v235 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v224 = (char *)&v196 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_10000B4C8(&qword_100551B70);
  __chkstk_darwin(v232);
  v244 = (char *)&v196 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_10000B4C8(&qword_1005519C8);
  v39 = __chkstk_darwin(v38);
  v237 = (char *)&v196 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v234 = (uint64_t)&v196 - v42;
  __chkstk_darwin(v41);
  v243 = (char *)&v196 - v43;
  v242 = type metadata accessor for Artist(0);
  v247 = *(_QWORD *)(v242 - 8);
  __chkstk_darwin(v242);
  v231 = (char *)&v196 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_10000B4C8(&qword_100551B78);
  __chkstk_darwin(v239);
  v241 = (uint64_t)&v196 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10000B4C8(&qword_10054E650);
  v47 = __chkstk_darwin(v46);
  v248 = (char *)&v196 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v246 = (uint64_t)&v196 - v50;
  __chkstk_darwin(v49);
  v240 = (uint64_t)&v196 - v51;
  v52 = type metadata accessor for Album(0);
  v53 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v236 = (char *)&v196 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_10000B4C8(&qword_100551B80);
  __chkstk_darwin(v55);
  v57 = (char *)&v196 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_10000B4C8(&qword_10054CE38);
  v59 = __chkstk_darwin(v58);
  v245 = (uint64_t)&v196 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __chkstk_darwin(v59);
  v63 = (char *)&v196 - v62;
  __chkstk_darwin(v61);
  v65 = (char *)&v196 - v64;
  type metadata accessor for MusicLibrary(0);
  v66 = a1;
  if ((static MusicLibrary.== infix(_:_:)(*a1, *a2) & 1) == 0)
    return 0;
  v67 = type metadata accessor for Library.Context(0);
  v68 = *(int *)(v67 + 20);
  v197 = v66;
  sub_100011370((uint64_t)v66 + v68, (uint64_t)v65, &qword_10054CE38);
  v196 = (int *)v67;
  v69 = *(int *)(v67 + 20);
  v198 = a2;
  sub_100011370((uint64_t)a2 + v69, (uint64_t)v63, &qword_10054CE38);
  v70 = (uint64_t)&v57[*(int *)(v55 + 48)];
  sub_100011370((uint64_t)v65, (uint64_t)v57, &qword_10054CE38);
  sub_100011370((uint64_t)v63, v70, &qword_10054CE38);
  v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v71((uint64_t)v57, 1, v52) == 1)
  {
    sub_100011694((uint64_t)v63, &qword_10054CE38);
    sub_100011694((uint64_t)v65, &qword_10054CE38);
    v72 = v71(v70, 1, v52);
    v73 = (uint64_t)v248;
    if (v72 == 1)
    {
      sub_100011694((uint64_t)v57, &qword_10054CE38);
      goto LABEL_9;
    }
LABEL_7:
    v76 = &qword_100551B80;
    v77 = (uint64_t)v57;
LABEL_50:
    sub_100011694(v77, v76);
    return 0;
  }
  v74 = v245;
  sub_100011370((uint64_t)v57, v245, &qword_10054CE38);
  v75 = v71(v70, 1, v52);
  v73 = (uint64_t)v248;
  if (v75 == 1)
  {
    sub_100011694((uint64_t)v63, &qword_10054CE38);
    sub_100011694((uint64_t)v65, &qword_10054CE38);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v74, v52);
    goto LABEL_7;
  }
  v78 = v236;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v236, v70, v52);
  v79 = sub_10001254C(&qword_100551BB8, (uint64_t (*)(uint64_t))&type metadata accessor for Album, (uint64_t)&protocol conformance descriptor for Album);
  v80 = dispatch thunk of static Equatable.== infix(_:_:)(v74, v78, v52, v79);
  v81 = *(void (**)(char *, uint64_t))(v53 + 8);
  v81(v78, v52);
  sub_100011694((uint64_t)v63, &qword_10054CE38);
  sub_100011694((uint64_t)v65, &qword_10054CE38);
  v81((char *)v74, v52);
  sub_100011694((uint64_t)v57, &qword_10054CE38);
  if ((v80 & 1) == 0)
    return 0;
LABEL_9:
  v82 = v196;
  v83 = v240;
  sub_100011370((uint64_t)v197 + v196[6], v240, &qword_10054E650);
  v84 = v246;
  sub_100011370((uint64_t)v198 + v82[6], v246, &qword_10054E650);
  v85 = v241;
  v86 = v241 + *(int *)(v239 + 48);
  sub_100011370(v83, v241, &qword_10054E650);
  sub_100011370(v84, v86, &qword_10054E650);
  v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
  v88 = v242;
  if (v87(v85, 1, v242) == 1)
  {
    sub_100011694(v84, &qword_10054E650);
    sub_100011694(v83, &qword_10054E650);
    v89 = v87(v86, 1, v88);
    v90 = (uint64_t)v237;
    v91 = (uint64_t)v238;
    v93 = (uint64_t)v243;
    v92 = (uint64_t)v244;
    if (v89 == 1)
    {
      sub_100011694(v85, &qword_10054E650);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  sub_100011370(v85, v73, &qword_10054E650);
  v94 = v87(v86, 1, v88);
  v93 = (uint64_t)v243;
  v92 = (uint64_t)v244;
  if (v94 == 1)
  {
    sub_100011694(v246, &qword_10054E650);
    sub_100011694(v83, &qword_10054E650);
    (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v73, v88);
LABEL_14:
    v76 = &qword_100551B78;
    v77 = v85;
    goto LABEL_50;
  }
  v95 = v247;
  v96 = v83;
  v97 = v73;
  v98 = v231;
  (*(void (**)(char *, uint64_t, uint64_t))(v247 + 32))(v231, v86, v88);
  v99 = sub_10001254C(&qword_100551BB0, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
  v100 = dispatch thunk of static Equatable.== infix(_:_:)(v97, v98, v88, v99);
  v101 = *(void (**)(char *, uint64_t))(v95 + 8);
  v101(v98, v88);
  sub_100011694(v246, &qword_10054E650);
  sub_100011694(v96, &qword_10054E650);
  v101((char *)v97, v88);
  v91 = (uint64_t)v238;
  sub_100011694(v85, &qword_10054E650);
  v90 = (uint64_t)v237;
  if ((v100 & 1) == 0)
    return 0;
LABEL_16:
  v102 = v196;
  sub_100011370((uint64_t)v197 + v196[7], v93, &qword_1005519C8);
  v103 = v234;
  sub_100011370((uint64_t)v198 + v102[7], v234, &qword_1005519C8);
  v104 = v92 + *(int *)(v232 + 48);
  sub_100011370(v93, v92, &qword_1005519C8);
  sub_100011370(v103, v104, &qword_1005519C8);
  v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v235 + 48);
  v106 = v233;
  if (v105(v92, 1, v233) == 1)
  {
    sub_100011694(v103, &qword_1005519C8);
    sub_100011694(v93, &qword_1005519C8);
    v92 = (uint64_t)v244;
    if (v105(v104, 1, v106) == 1)
    {
      sub_100011694(v92, &qword_1005519C8);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  sub_100011370(v92, v90, &qword_1005519C8);
  if (v105(v104, 1, v106) == 1)
  {
    sub_100011694(v234, &qword_1005519C8);
    sub_100011694(v93, &qword_1005519C8);
    (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v90, v106);
LABEL_21:
    v76 = &qword_100551B70;
    v77 = v92;
    goto LABEL_50;
  }
  v107 = v235;
  v108 = v224;
  (*(void (**)(char *, uint64_t, uint64_t))(v235 + 32))(v224, v104, v106);
  v109 = sub_10001254C(&qword_100551BA8, (uint64_t (*)(uint64_t))&type metadata accessor for Composer, (uint64_t)&protocol conformance descriptor for Composer);
  v110 = dispatch thunk of static Equatable.== infix(_:_:)(v90, v108, v106, v109);
  v111 = *(void (**)(char *, uint64_t))(v107 + 8);
  v111(v108, v106);
  sub_100011694(v234, &qword_1005519C8);
  sub_100011694(v93, &qword_1005519C8);
  v111((char *)v90, v106);
  sub_100011694(v92, &qword_1005519C8);
  if ((v110 & 1) == 0)
    return 0;
LABEL_23:
  v112 = v196;
  v113 = v229;
  sub_100011370((uint64_t)v197 + v196[8], v229, &qword_1005519D0);
  v114 = v228;
  sub_100011370((uint64_t)v198 + v112[8], v228, &qword_1005519D0);
  v115 = v91 + *(int *)(v225 + 48);
  sub_100011370(v113, v91, &qword_1005519D0);
  sub_100011370(v114, v115, &qword_1005519D0);
  v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v230 + 48);
  v117 = v226;
  if (v116(v91, 1, v226) == 1)
  {
    sub_100011694(v114, &qword_1005519D0);
    sub_100011694(v113, &qword_1005519D0);
    v118 = v116(v115, 1, v117);
    v119 = (uint64_t)v227;
    if (v118 == 1)
    {
      sub_100011694(v91, &qword_1005519D0);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v120 = v220;
  sub_100011370(v91, v220, &qword_1005519D0);
  v121 = v116(v115, 1, v117);
  v119 = (uint64_t)v227;
  if (v121 == 1)
  {
    sub_100011694(v228, &qword_1005519D0);
    sub_100011694(v229, &qword_1005519D0);
    (*(void (**)(uint64_t, uint64_t))(v230 + 8))(v120, v117);
LABEL_28:
    v76 = &qword_100551B68;
    v77 = v91;
    goto LABEL_50;
  }
  v122 = v230;
  v123 = v216;
  (*(void (**)(char *, uint64_t, uint64_t))(v230 + 32))(v216, v115, v117);
  v124 = sub_10001254C(&qword_100551BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
  v125 = dispatch thunk of static Equatable.== infix(_:_:)(v120, v123, v117, v124);
  v126 = *(void (**)(char *, uint64_t))(v122 + 8);
  v126(v123, v117);
  sub_100011694(v228, &qword_1005519D0);
  sub_100011694(v229, &qword_1005519D0);
  v126((char *)v120, v117);
  sub_100011694(v91, &qword_1005519D0);
  if ((v125 & 1) == 0)
    return 0;
LABEL_30:
  v127 = v196;
  v128 = v222;
  sub_100011370((uint64_t)v197 + v196[9], v222, &qword_1005506A0);
  v129 = v221;
  sub_100011370((uint64_t)v198 + v127[9], v221, &qword_1005506A0);
  v130 = v119 + *(int *)(v218 + 48);
  sub_100011370(v128, v119, &qword_1005506A0);
  sub_100011370(v129, v130, &qword_1005506A0);
  v131 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48);
  v132 = v219;
  if (v131(v119, 1, v219) == 1)
  {
    sub_100011694(v129, &qword_1005506A0);
    v119 = (uint64_t)v227;
    sub_100011694(v128, &qword_1005506A0);
    if (v131(v130, 1, v132) == 1)
    {
      sub_100011694(v119, &qword_1005506A0);
      v133 = (uint64_t)v217;
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  v134 = v211;
  sub_100011370(v119, v211, &qword_1005506A0);
  v135 = v131(v130, 1, v132);
  v133 = (uint64_t)v217;
  if (v135 == 1)
  {
    sub_100011694(v221, &qword_1005506A0);
    sub_100011694(v222, &qword_1005506A0);
    (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v134, v132);
LABEL_35:
    v76 = &qword_100551B60;
    v77 = v119;
    goto LABEL_50;
  }
  v136 = v223;
  v137 = v208;
  (*(void (**)(char *, uint64_t, uint64_t))(v223 + 32))(v208, v130, v132);
  v138 = sub_10001254C(&qword_100551B98, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
  v139 = dispatch thunk of static Equatable.== infix(_:_:)(v134, v137, v132, v138);
  v140 = *(void (**)(char *, uint64_t))(v136 + 8);
  v140(v137, v132);
  sub_100011694(v221, &qword_1005506A0);
  sub_100011694(v222, &qword_1005506A0);
  v140((char *)v134, v132);
  sub_100011694(v119, &qword_1005506A0);
  if ((v139 & 1) == 0)
    return 0;
LABEL_37:
  v141 = v196;
  v142 = v214;
  sub_100011370((uint64_t)v197 + v196[10], v214, &qword_10054E7C8);
  v143 = (uint64_t)v198 + v141[10];
  v144 = v213;
  sub_100011370(v143, v213, &qword_10054E7C8);
  v145 = v212;
  v146 = v212 + *(int *)(v209 + 48);
  sub_100011370(v142, v212, &qword_10054E7C8);
  sub_100011370(v144, v146, &qword_10054E7C8);
  v147 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v215 + 48);
  v148 = v210;
  if (v147(v145, 1, v210) == 1)
  {
    sub_100011694(v144, &qword_10054E7C8);
    sub_100011694(v142, &qword_10054E7C8);
    v145 = v212;
    if (v147(v146, 1, v148) == 1)
    {
      sub_100011694(v145, &qword_10054E7C8);
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  v149 = v205;
  sub_100011370(v145, v205, &qword_10054E7C8);
  if (v147(v146, 1, v148) == 1)
  {
    sub_100011694(v213, &qword_10054E7C8);
    sub_100011694(v214, &qword_10054E7C8);
    (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v149, v148);
LABEL_42:
    v76 = &qword_100551B58;
    v77 = v145;
    goto LABEL_50;
  }
  v150 = v215;
  v151 = v201;
  (*(void (**)(char *, uint64_t, uint64_t))(v215 + 32))(v201, v146, v148);
  v152 = sub_10001254C(&qword_100551B90, (uint64_t (*)(uint64_t))&type metadata accessor for TVShow, (uint64_t)&protocol conformance descriptor for TVShow);
  v153 = v145;
  v154 = v148;
  v155 = dispatch thunk of static Equatable.== infix(_:_:)(v149, v151, v148, v152);
  v156 = *(void (**)(char *, uint64_t))(v150 + 8);
  v156(v151, v154);
  sub_100011694(v213, &qword_10054E7C8);
  sub_100011694(v214, &qword_10054E7C8);
  v156((char *)v149, v154);
  sub_100011694(v153, &qword_10054E7C8);
  if ((v155 & 1) == 0)
    return 0;
LABEL_44:
  v157 = v196;
  v158 = v206;
  sub_100011370((uint64_t)v197 + v196[11], v206, &qword_10054E798);
  v159 = v203;
  sub_100011370((uint64_t)v198 + v157[11], v203, &qword_10054E798);
  v160 = v133 + *(int *)(v202 + 48);
  sub_100011370(v158, v133, &qword_10054E798);
  sub_100011370(v159, v160, &qword_10054E798);
  v161 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48);
  v162 = v204;
  if (v161(v133, 1, v204) == 1)
  {
    sub_100011694(v159, &qword_10054E798);
    sub_100011694(v158, &qword_10054E798);
    if (v161(v160, 1, v162) == 1)
    {
      sub_100011694(v133, &qword_10054E798);
      goto LABEL_54;
    }
    goto LABEL_49;
  }
  v163 = v200;
  sub_100011370(v133, v200, &qword_10054E798);
  if (v161(v160, 1, v162) == 1)
  {
    sub_100011694(v159, &qword_10054E798);
    sub_100011694(v206, &qword_10054E798);
    (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v163, v162);
LABEL_49:
    v76 = &qword_100551B50;
    v77 = v133;
    goto LABEL_50;
  }
  v165 = v207;
  v166 = v199;
  (*(void (**)(char *, uint64_t, uint64_t))(v207 + 32))(v199, v160, v162);
  v167 = sub_10001254C(&qword_100551B88, (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason, (uint64_t)&protocol conformance descriptor for TVSeason);
  v168 = dispatch thunk of static Equatable.== infix(_:_:)(v163, v166, v162, v167);
  v169 = *(void (**)(char *, uint64_t))(v165 + 8);
  v169(v166, v162);
  sub_100011694(v159, &qword_10054E798);
  sub_100011694(v206, &qword_10054E798);
  v169((char *)v163, v162);
  sub_100011694(v133, &qword_10054E798);
  if ((v168 & 1) == 0)
    return 0;
LABEL_54:
  v170 = v196;
  if (*((unsigned __int8 *)v197 + v196[12]) != *((unsigned __int8 *)v198 + v196[12]))
    return 0;
  v171 = v196[13];
  v172 = *((unsigned __int8 *)v197 + v171);
  v173 = *((unsigned __int8 *)v198 + v171);
  if (v172 == 2)
  {
    if (v173 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v174 = (v172 & 1) == 0;
    if (v173 == 2 || ((v174 ^ v173) & 1) == 0)
      return result;
  }
  v175 = v196[14];
  v176 = *((unsigned __int8 *)v197 + v175);
  v177 = *((unsigned __int8 *)v198 + v175);
  if (v176 == 3)
  {
    if (v177 != 3)
      return 0;
  }
  else
  {
    if (v177 == 3)
      return 0;
    v178 = 0xE900000000000073;
    v179 = 7105633;
    if (v176)
    {
      if (v176 == 1)
        v180 = 0x657469726F766166;
      else
        v180 = 0x64616F6C6E776F64;
      v181 = 0xE900000000000073;
    }
    else
    {
      v181 = 0xE300000000000000;
      v180 = 7105633;
    }
    if (v177)
    {
      if (v177 == 1)
        v179 = 0x657469726F766166;
      else
        v179 = 0x64616F6C6E776F64;
    }
    else
    {
      v178 = 0xE300000000000000;
    }
    if (v180 == v179 && v181 == v178)
    {
      swift_bridgeObjectRelease_n(v181, 2);
      v170 = v196;
    }
    else
    {
      v182 = _stringCompareWithSmolCheck(_:_:expecting:)(v180, v181, v179, v178, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      v170 = v196;
      if ((v182 & 1) == 0)
        return result;
    }
  }
  v183 = v170[15];
  v184 = (_QWORD *)((char *)v197 + v183);
  v185 = *(_QWORD *)((char *)v197 + v183 + 8);
  v186 = (_QWORD *)((char *)v198 + v183);
  v187 = v186[1];
  if (!v185)
  {
    v188 = v198;
    v189 = v197;
    v190 = v196;
    if (!v187)
      goto LABEL_86;
    return 0;
  }
  if (!v187)
    return 0;
  v188 = v198;
  v189 = v197;
  v190 = v196;
  if (*v184 == *v186 && v185 == v187
    || (v191 = _stringCompareWithSmolCheck(_:_:expecting:)(*v184, v185, *v186, v187, 0), result = 0, (v191 & 1) != 0))
  {
LABEL_86:
    if ((sub_100153228(*(_QWORD *)((char *)v189 + v190[16]), *(_QWORD *)((char *)v188 + v190[16])) & 1) != 0)
    {
      v192 = v196[17];
      v193 = *((unsigned __int8 *)v197 + v192);
      v194 = *((unsigned __int8 *)v198 + v192);
      if (v193 == 2)
      {
        if (v194 == 2)
          return 1;
      }
      else
      {
        v195 = (v193 & 1) == 0;
        if (v194 != 2 && ((v195 ^ v194) & 1) != 0)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t _s9MusicCore7LibraryO19ContentFilterOptionO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD6C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t type metadata accessor for Library.Context(uint64_t a1)
{
  uint64_t result;

  result = qword_100551A98;
  if (!qword_100551A98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Library.Context);
  return result;
}

uint64_t sub_1001CA718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Library.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001CA75C()
{
  unint64_t result;

  result = qword_100551A20;
  if (!qword_100551A20)
  {
    result = swift_getWitnessTable("ݱ\r", &_s17LibraryContextKeyVN);
    atomic_store(result, (unint64_t *)&qword_100551A20);
  }
  return result;
}

uint64_t sub_1001CA7A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Library.Context(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001CA7DC()
{
  unint64_t v0;

  v0 = sub_1001CA75C();
  return EnvironmentValues.subscript.getter(&_s17LibraryContextKeyVN, &_s17LibraryContextKeyVN, v0);
}

unint64_t sub_1001CA820()
{
  unint64_t result;

  result = qword_100551A28;
  if (!qword_100551A28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.ContentFilterOption, &type metadata for Library.ContentFilterOption);
    atomic_store(result, (unint64_t *)&qword_100551A28);
  }
  return result;
}

unint64_t sub_1001CA868()
{
  unint64_t result;

  result = qword_100551A30;
  if (!qword_100551A30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Context.SortOption, &type metadata for Library.Context.SortOption);
    atomic_store(result, (unint64_t *)&qword_100551A30);
  }
  return result;
}

uint64_t sub_1001CA8AC()
{
  return sub_10001254C(&qword_100551A38, type metadata accessor for Library.Context, (uint64_t)&protocol conformance descriptor for Library.Context);
}

ValueMetadata *type metadata accessor for Library()
{
  return &type metadata for Library;
}

uint64_t storeEnumTagSinglePayload for Library.ContentFilterOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001CA934 + 4 * byte_10042FE49[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001CA968 + 4 * byte_10042FE44[v4]))();
}

uint64_t sub_1001CA968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CA970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CA978);
  return result;
}

uint64_t sub_1001CA984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CA98CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001CA990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CA998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Library.ContentFilterOption()
{
  return &type metadata for Library.ContentFilterOption;
}

_QWORD *initializeBufferWithCopyOfBuffer for Library.Context(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Album(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain(v4);
    if (v13(v10, 1, v11))
    {
      v14 = sub_10000B4C8(&qword_10054CE38);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[6];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Artist(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_10000B4C8(&qword_10054E650);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = a3[7];
    v22 = (char *)v7 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for Composer(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_10000B4C8(&qword_1005519C8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = a3[8];
    v28 = (char *)v7 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for Genre(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_10000B4C8(&qword_1005519D0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v33 = a3[9];
    v34 = (char *)v7 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for Playlist(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      v38 = sub_10000B4C8(&qword_1005506A0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    v39 = a3[10];
    v40 = (char *)v7 + v39;
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for TVShow(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = sub_10000B4C8(&qword_10054E7C8);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = a3[11];
    v46 = (char *)v7 + v45;
    v47 = (char *)a2 + v45;
    v48 = type metadata accessor for TVSeason(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_10000B4C8(&qword_10054E798);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v51 = a3[13];
    *((_BYTE *)v7 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v7 + v51) = *((_BYTE *)a2 + v51);
    v52 = a3[15];
    *((_BYTE *)v7 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    v53 = (_QWORD *)((char *)v7 + v52);
    v54 = (_QWORD *)((char *)a2 + v52);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = a3[17];
    *(_QWORD *)((char *)v7 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
    *((_BYTE *)v7 + v56) = *((_BYTE *)a2 + v56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Library.Context(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  swift_release(*a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for Album(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + a2[6];
  v8 = type metadata accessor for Artist(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v10 = (char *)a1 + a2[7];
  v11 = type metadata accessor for Composer(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  v13 = (char *)a1 + a2[8];
  v14 = type metadata accessor for Genre(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  v16 = (char *)a1 + a2[9];
  v17 = type metadata accessor for Playlist(0);
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  v19 = (char *)a1 + a2[10];
  v20 = type metadata accessor for TVShow(0);
  v21 = *(_QWORD *)(v20 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  v22 = (char *)a1 + a2[11];
  v23 = type metadata accessor for TVSeason(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16]));
}

_QWORD *initializeWithCopy for Library.Context(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Album(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_10000B4C8(&qword_10054CE38);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Artist(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_10000B4C8(&qword_10054E650);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for Composer(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_10000B4C8(&qword_1005519C8);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = a3[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Genre(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_10000B4C8(&qword_1005519D0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for Playlist(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = sub_10000B4C8(&qword_1005506A0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = a3[10];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for TVShow(0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = sub_10000B4C8(&qword_10054E7C8);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = a3[11];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for TVSeason(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = sub_10000B4C8(&qword_10054E798);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  v50 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + v50) = *((_BYTE *)a2 + v50);
  v51 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *((_BYTE *)a1 + v55) = *((_BYTE *)a2 + v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Library.Context(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Album(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_10000B4C8(&qword_10054CE38);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for Artist(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
LABEL_12:
    v25 = sub_10000B4C8(&qword_10054E650);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_13:
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Composer(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_18:
    v34 = sub_10000B4C8(&qword_1005519C8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_19:
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for Genre(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
LABEL_24:
    v43 = sub_10000B4C8(&qword_1005519D0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v36, v37, v38);
LABEL_25:
  v44 = a3[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for Playlist(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v47);
LABEL_30:
    v52 = sub_10000B4C8(&qword_1005506A0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_31:
  v53 = a3[10];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = type metadata accessor for TVShow(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v56);
LABEL_36:
    v61 = sub_10000B4C8(&qword_10054E7C8);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 24))(v54, v55, v56);
LABEL_37:
  v62 = a3[11];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v65 = type metadata accessor for TVSeason(0);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
      goto LABEL_43;
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v65);
    goto LABEL_42;
  }
  if (v69)
  {
LABEL_42:
    v70 = sub_10000B4C8(&qword_10054E798);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
LABEL_43:
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v71 = a3[15];
  v72 = (_QWORD *)((char *)a1 + v71);
  v73 = (_QWORD *)((char *)a2 + v71);
  *v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  return a1;
}

_QWORD *initializeWithTake for Library.Context(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Album(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10000B4C8(&qword_10054CE38);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Artist(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_10000B4C8(&qword_10054E650);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Composer(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_10000B4C8(&qword_1005519C8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[8];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for Genre(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_10000B4C8(&qword_1005519D0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[9];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for Playlist(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_10000B4C8(&qword_1005506A0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v36 = a3[10];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for TVShow(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = sub_10000B4C8(&qword_10054E7C8);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v42 = a3[11];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for TVSeason(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_10000B4C8(&qword_10054E798);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + v48) = *((_BYTE *)a2 + v48);
  v49 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v49) = *(_OWORD *)((char *)a2 + v49);
  v50 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *((_BYTE *)a1 + v50) = *((_BYTE *)a2 + v50);
  return a1;
}

_QWORD *assignWithTake for Library.Context(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Album(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_10000B4C8(&qword_10054CE38);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Artist(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    v24 = sub_10000B4C8(&qword_10054E650);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  v25 = a3[7];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for Composer(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_18:
    v33 = sub_10000B4C8(&qword_1005519C8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
LABEL_19:
  v34 = a3[8];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for Genre(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_24:
    v42 = sub_10000B4C8(&qword_1005519D0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
LABEL_25:
  v43 = a3[9];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for Playlist(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
LABEL_30:
    v51 = sub_10000B4C8(&qword_1005506A0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 40))(v44, v45, v46);
LABEL_31:
  v52 = a3[10];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = type metadata accessor for TVShow(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v55);
LABEL_36:
    v60 = sub_10000B4C8(&qword_10054E7C8);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 40))(v53, v54, v55);
LABEL_37:
  v61 = a3[11];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  v64 = type metadata accessor for TVSeason(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v62, 1, v64);
  v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v62, v63, v64);
      goto LABEL_43;
    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v64);
    goto LABEL_42;
  }
  if (v68)
  {
LABEL_42:
    v69 = sub_10000B4C8(&qword_10054E798);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
LABEL_43:
  v70 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + v70) = *((_BYTE *)a2 + v70);
  v71 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  v72 = (_QWORD *)((char *)a1 + v71);
  v73 = (_QWORD *)((char *)a2 + v71);
  v75 = *v73;
  v74 = v73[1];
  *v72 = v75;
  v72[1] = v74;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Library.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CC518);
}

uint64_t sub_1001CC518(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000B4C8(&qword_10054CE38);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_10000B4C8(&qword_10054E650);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = sub_10000B4C8(&qword_1005519C8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v14 = sub_10000B4C8(&qword_1005519D0);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[8];
          }
          else
          {
            v15 = sub_10000B4C8(&qword_1005506A0);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              v10 = v15;
              v11 = a3[9];
            }
            else
            {
              v16 = sub_10000B4C8(&qword_10054E7C8);
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
              {
                v10 = v16;
                v11 = a3[10];
              }
              else
              {
                v10 = sub_10000B4C8(&qword_10054E798);
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a3[11];
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Library.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CC694);
}

char *sub_1001CC694(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_10000B4C8(&qword_10054CE38);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_10000B4C8(&qword_10054E650);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = sub_10000B4C8(&qword_1005519C8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v14 = sub_10000B4C8(&qword_1005519D0);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[8];
          }
          else
          {
            v15 = sub_10000B4C8(&qword_1005506A0);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v15;
              v11 = a4[9];
            }
            else
            {
              v16 = sub_10000B4C8(&qword_10054E7C8);
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == a3)
              {
                v10 = v16;
                v11 = a4[10];
              }
              else
              {
                v10 = sub_10000B4C8(&qword_10054E798);
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a4[11];
              }
            }
          }
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_1001CC800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[14];

  v16[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100019B6C(319, &qword_100551AA8, (uint64_t (*)(uint64_t))&type metadata accessor for Album);
  if (v3 <= 0x3F)
  {
    v16[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100019B6C(319, &qword_100551AB0, (uint64_t (*)(uint64_t))&type metadata accessor for Artist);
    if (v5 <= 0x3F)
    {
      v16[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100019B6C(319, &qword_100551AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Composer);
      if (v7 <= 0x3F)
      {
        v16[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_100019B6C(319, &qword_100551AC0, (uint64_t (*)(uint64_t))&type metadata accessor for Genre);
        if (v9 <= 0x3F)
        {
          v16[4] = *(_QWORD *)(v8 - 8) + 64;
          sub_100019B6C(319, &qword_100551AC8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist);
          if (v11 <= 0x3F)
          {
            v16[5] = *(_QWORD *)(v10 - 8) + 64;
            sub_100019B6C(319, &qword_100551AD0, (uint64_t (*)(uint64_t))&type metadata accessor for TVShow);
            if (v13 <= 0x3F)
            {
              v16[6] = *(_QWORD *)(v12 - 8) + 64;
              sub_100019B6C(319, (unint64_t *)&unk_100551AD8, (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason);
              if (v15 <= 0x3F)
              {
                v16[7] = *(_QWORD *)(v14 - 8) + 64;
                v16[8] = &unk_100430080;
                v16[9] = &unk_100430098;
                v16[10] = &unk_1004300B0;
                v16[11] = &unk_1004300C8;
                v16[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
                v16[13] = &unk_100430098;
                swift_initStructMetadata(a1, 256, 14, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for Library.Context.SortOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001CCA14 + 4 * byte_10042FE53[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001CCA48 + 4 * byte_10042FE4E[v4]))();
}

uint64_t sub_1001CCA48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CCA50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CCA58);
  return result;
}

uint64_t sub_1001CCA64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CCA6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001CCA70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CCA78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Library.Context.SortOption()
{
  return &type metadata for Library.Context.SortOption;
}

uint64_t sub_1001CCA94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100011650(&qword_100551B38);
  v4 = type metadata accessor for ModifiedContent(255, v1, v3);
  v6[0] = v2;
  v6[1] = sub_1001CCAF4();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v4, v6);
}

unint64_t sub_1001CCAF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100551B40;
  if (!qword_100551B40)
  {
    v1 = sub_100011650(&qword_100551B38);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100551B40);
  }
  return result;
}

ValueMetadata *_s17LibraryContextKeyVMa()
{
  return &_s17LibraryContextKeyVN;
}

unint64_t sub_1001CCB50()
{
  unint64_t result;

  result = qword_100551B48;
  if (!qword_100551B48)
  {
    result = swift_getWitnessTable("ɳ\r", &type metadata for Library.ContentFilterOption);
    atomic_store(result, (unint64_t *)&qword_100551B48);
  }
  return result;
}

uint64_t sub_1001CCB98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (char *)_swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v18)) + (v8 << 6))
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v13 = *v12;
    v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FB880, v15);
    result = swift_bridgeObjectRelease();
    if (v16 <= 0xC)
    {
      result = swift_isUniquelyReferenced_nonNull_native(v9);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1000DF544(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v9 = (char *)result;
      }
      v20 = v9;
      v21 = *((_QWORD *)v9 + 2);
      v22 = (uint64_t)v20;
      v23 = *((_QWORD *)v20 + 3);
      if (v21 >= v23 >> 1)
      {
        result = (uint64_t)sub_1000DF544((char *)(v23 > 1), v21 + 1, 1, (char *)v22);
        v22 = result;
      }
      *(_QWORD *)(v22 + 16) = v21 + 1;
      v24 = v22 + v21;
      v9 = (char *)v22;
      *(_BYTE *)(v24 + 32) = v16;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v17 >= v6)
      goto LABEL_29;
    v18 = *(_QWORD *)(v2 + 8 * v17);
    ++v8;
    if (!v18)
    {
      v8 = v17 + 1;
      if (v17 + 1 >= v6)
        goto LABEL_29;
      v18 = *(_QWORD *)(v2 + 8 * v8);
      if (!v18)
      {
        v8 = v17 + 2;
        if (v17 + 2 >= v6)
          goto LABEL_29;
        v18 = *(_QWORD *)(v2 + 8 * v8);
        if (!v18)
        {
          v8 = v17 + 3;
          if (v17 + 3 >= v6)
            goto LABEL_29;
          v18 = *(_QWORD *)(v2 + 8 * v8);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v18 - 1) & v18;
  }
  v19 = v17 + 4;
  if (v19 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v9;
  }
  v18 = *(_QWORD *)(v2 + 8 * v19);
  if (v18)
  {
    v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v18 = *(_QWORD *)(v2 + 8 * v8);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_1001CCDB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  char v17;

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v10 << 6);
LABEL_5:
    v17 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v12);
    sub_1001D1D30((uint64_t)&v17, a2);
    if (v2)
      goto LABEL_24;
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v10 >= v9)
    goto LABEL_24;
  v14 = *(_QWORD *)(v5 + 8 * v10);
  if (v14)
  {
LABEL_17:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_5;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v9)
    goto LABEL_24;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 2;
  if (v10 + 2 >= v9)
    goto LABEL_24;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 3;
  if (v10 + 3 >= v9)
    goto LABEL_24;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  v16 = v10 + 4;
  if (v10 + 4 >= v9)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v5 + 8 * v16);
  v10 += 4;
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v9)
      goto LABEL_24;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v16;
    if (v14)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
}

Swift::Int sub_1001CCF20(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_33;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    Hasher.init(_seed:)(v21);
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16)
      goto LABEL_7;
  }
}

uint64_t sub_1001CD100(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v15;
  _QWORD v16[10];

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v5 = v4 & *(_QWORD *)(a1 + 56);
    v15 = (unint64_t)(v3 + 63) >> 6;
    if (v5)
    {
      v6 = __clz(__rbit64(v5));
      goto LABEL_21;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_20;
      v8 = 2;
      if ((unint64_t)(v3 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_20;
      v8 = 3;
      if ((unint64_t)(v3 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
      {
LABEL_20:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_21:
        v10 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v6);
        Hasher.init(_seed:)(v16);
        v11 = Library.Menu.Identifier.rawValue.getter(v10);
        String.hash(into:)(v16, v11, v12);
        swift_bridgeObjectRelease();
        v13 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
          __asm { BR              X9 }
        return 0;
      }
      v9 = 4;
      if (v15 > 4)
      {
        v7 = *(_QWORD *)(a1 + 88);
        if (v7)
        {
          v8 = 4;
          goto LABEL_20;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x1001CD5A8);
          }
          if (v8 >= v15)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_20;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1001CD610(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  _QWORD v17[9];

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v3 = *(_QWORD *)(a1 + 56);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v16 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
      goto LABEL_23;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_22;
      v8 = 2;
      if (v16 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_22;
      v8 = 3;
      if (v16 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_22;
      v8 = 4;
      if (v16 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_22:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_23:
        v10 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v6);
        Hasher.init(_seed:)(v17);
        v11 = ApplicationCapabilities.Service.rawValue.getter(v10);
        v13 = v12;
        String.hash(into:)(v17, v11, v12);
        swift_bridgeObjectRelease(v13);
        v14 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
          __asm { BR              X9 }
        return 0;
      }
      v9 = 5;
      if (v16 > 5)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 5;
          goto LABEL_22;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x1001CDB34);
          }
          if (v8 >= v16)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_22;
        }
      }
    }
  }
  return 1;
}

uint64_t Library.Menu.identifiers.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL Library.Menu.selectionState(for:)(unsigned __int8 a1)
{
  uint64_t v1;

  return (sub_1001679D0(a1, *(_QWORD *)(v1 + 40)) & 1) == 0;
}

uint64_t Library.Menu.setSelectionState(_:for:)(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unsigned __int8 v4;

  v2 = a1 & 1;
  if ((a1 & 1) != 0)
    sub_10018FAC4(a2);
  else
    sub_1001D386C(&v4, a2);
  return v2;
}

char *Library.Menu.move(_:to:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  char *result;
  int64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain();
  v7 = sub_100192EEC(a1, v6);
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    v17 = v3[2];
    v18 = v3[3];
    v10 = v3[4];
    v19 = v3[5];
    v20 = sub_1001D9AF4();
    swift_allocError(&_s4MenuV9MoveErrorVN, v20, 0, 0);
    *(_QWORD *)v21 = v17;
LABEL_14:
    *(_QWORD *)(v21 + 8) = v18;
    *(_QWORD *)(v21 + 16) = v10;
    *(_QWORD *)(v21 + 24) = v19;
    *(_BYTE *)(v21 + 32) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = swift_bridgeObjectRetain();
    return (char *)swift_willThrow(v24);
  }
  v10 = v3[4];
  swift_bridgeObjectRetain();
  v25 = sub_100192EEC(a1, v10);
  v12 = v11;
  result = (char *)swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
    v22 = v3[2];
    v18 = v3[3];
LABEL_13:
    v19 = v3[5];
    v23 = sub_1001D9AF4();
    swift_allocError(&_s4MenuV9MoveErrorVN, v23, 0, 0);
    *(_QWORD *)v21 = v22;
    goto LABEL_14;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  a1 = *(unsigned __int8 *)(v6 + a2 + 32);
  swift_bridgeObjectRetain();
  v14 = sub_100192EEC(a1, v10);
  v16 = v15;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    v22 = v3[2];
    v18 = v3[3];
    LOBYTE(a1) = a1 | 0x80;
    goto LABEL_13;
  }
  result = sub_10019B550(v7);
  if (*(_QWORD *)(*v3 + 16) < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1000E0C0C((char *)a2, a2, (char)result);
  result = sub_10019B550(v25);
  if (*(_QWORD *)(v3[4] + 16) >= v14)
  {
    if ((v14 & 0x8000000000000000) == 0)
      return sub_1000E0C0C((char *)v14, v14, (char)result);
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Library.Menu.persist()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = (void *)v0[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSUserDefaults.libraryMenuRevision.setter(v1, v2, v3, v4);
}

uint64_t NSUserDefaults.libraryMenuRevision.setter(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;

  v8 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONEncoder.init()();
  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v10 = sub_1001D9B38();
  v11 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v17, &type metadata for Library.Menu.Revision, v10);
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v9);
  v20 = &type metadata for Data;
  v17 = v11;
  v18 = v13;
  v16[0] = 0x4D7972617262694CLL;
  v16[1] = 0xEB00000000756E65;
  sub_10003A5E4(v11, v13);
  v14 = sub_1000AE4D8();
  NSUserDefaults.subscript.setter((uint64_t)&v17, (uint64_t)v16, (uint64_t)&type metadata for String, v14);
  return sub_10003A628(v11, v13);
}

char *Library.Menu.Request.label.unsafeMutableAddressor()
{
  return static Library.Menu.Request.label;
}

uint64_t static Library.Menu.Request.label.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(static Library.Menu.Request.label, v2, 0, 0);
  v0 = *(_QWORD *)static Library.Menu.Request.label;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Library.Menu.Request.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(static Library.Menu.Request.label, v6, 1, 0);
  v4 = *(_QWORD *)&static Library.Menu.Request.label[8];
  *(_QWORD *)static Library.Menu.Request.label = a1;
  *(_QWORD *)&static Library.Menu.Request.label[8] = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*static Library.Menu.Request.label.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static Library.Menu.Request.label, a1, 33, 0);
  return j__swift_endAccess;
}

id Library.Menu.Request.init()@<X0>(uint64_t a1@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (result)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = &_swiftEmptySetSingleton;
    *(_WORD *)(a1 + 40) = 257;
    *(_BYTE *)(a1 + 42) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static Library.Menu.Request.with(_:)@<X0>(uint64_t (*a1)(id *)@<X0>, uint64_t a2@<X8>)
{
  id result;
  char v5;
  void *v6;
  char v7;
  char v8;
  char v9;
  __int128 v10;
  id v11;
  char v12;
  __int128 v13;
  void *v14;
  __int16 v15;
  char v16;

  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (result)
  {
    v11 = result;
    v12 = 0;
    v13 = 0uLL;
    v14 = &_swiftEmptySetSingleton;
    v15 = 257;
    v16 = 1;
    result = (id)a1(&v11);
    v5 = v12;
    v6 = v14;
    v7 = v15;
    v8 = HIBYTE(v15);
    v9 = v16;
    v10 = v13;
    *(_QWORD *)a2 = v11;
    *(_BYTE *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 40) = v7;
    *(_BYTE *)(a2 + 41) = v8;
    *(_BYTE *)(a2 + 42) = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static Library.Menu.Request.MediaLibrarySource.__derived_enum_equals(_:_:)(void *a1, char a2, void *a3, char a4)
{
  return sub_1001DAB6C(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_1001CE38C(uint64_t a1, uint64_t a2)
{
  return sub_1001DAB6C(*(void **)a1, *(_BYTE *)(a1 + 8), *(void **)a2, *(_BYTE *)(a2 + 8));
}

void *Library.Menu.Request.librarySource.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)v0;
  sub_1001DAC44(*(void **)v0, *(_BYTE *)(v0 + 8));
  return v1;
}

void Library.Menu.Request.librarySource.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1001DAC50(*(void **)v2, *(_BYTE *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_BYTE *)(v2 + 8) = a2 & 1;
}

uint64_t Library.Menu.Request.filteringOptions.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t Library.Menu.Request.excludedIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t Library.Menu.Request.filtersToAvailableContentGroups.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Library.Menu.Request.filtersToAvailableContentGroups.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t Library.Menu.Request.filtersToSelectedIdentifiers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t Library.Menu.Request.filtersToSelectedIdentifiers.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

CFRange (__swiftcall *Library.Menu.Request.filtersToSelectedIdentifiers.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t Library.Menu.Request.sortedByUserOrderedIdentifiers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t Library.Menu.Request.sortedByUserOrderedIdentifiers.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 42) = result;
  return result;
}

CFRange (__swiftcall *Library.Menu.Request.sortedByUserOrderedIdentifiers.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

double Library.Menu.Request.perform(_:_:)@<D0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  void **v3;
  void **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t *v47;
  double result;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  _QWORD aBlock[5];
  uint64_t v61;

  v4 = v3;
  v51 = a1;
  v52 = a2;
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v3;
  LOBYTE(v12) = *((_BYTE *)v4 + 8);
  v57 = v6;
  v58 = a3;
  v55 = v9;
  v56 = v7;
  v53 = v11;
  v54 = v13;
  if ((v12 & 1) != 0)
  {
    v15 = swift_retain(v14);
    v16 = (id)MusicLibrary.mediaLibrary.getter(v15);
    sub_1001DAC50(v14, 1);
  }
  else
  {
    v16 = v14;
  }
  v17 = v4[2];
  v18 = swift_allocObject(&unk_10050B310, 17, 7);
  v20 = v4[3];
  v19 = v4[4];
  *(_BYTE *)(v18 + 16) = v20 != 0;
  v21 = *((_BYTE *)v4 + 40);
  v22 = *((_BYTE *)v4 + 41);
  v23 = (void *)objc_opt_self(NSUserDefaults);
  v50 = v20;
  swift_bridgeObjectRetain();
  v24 = objc_msgSend(v23, "standardUserDefaults");
  v25 = (_QWORD *)swift_allocObject(&unk_10050B338, 48, 7);
  v26 = NSUserDefaults.libraryMenuRevision.getter();
  v25[2] = v26;
  v25[3] = v28;
  v25[4] = v27;
  v25[5] = v29;
  if ((*((_BYTE *)v4 + 42) & 1) != 0)
    v30 = v27;
  else
    v30 = v26;
  swift_bridgeObjectRetain();
  v31 = swift_allocObject(&unk_10050B360, 104, 7);
  *(_QWORD *)(v31 + 16) = v25;
  *(_QWORD *)(v31 + 24) = v24;
  *(_QWORD *)(v31 + 32) = v20;
  *(_QWORD *)(v31 + 40) = v30;
  *(_QWORD *)(v31 + 48) = v16;
  *(_QWORD *)(v31 + 56) = v17;
  *(_QWORD *)(v31 + 64) = v19;
  *(_BYTE *)(v31 + 72) = v22;
  *(_BYTE *)(v31 + 73) = v21;
  v32 = v51;
  v33 = v52;
  *(_QWORD *)(v31 + 80) = v18;
  *(_QWORD *)(v31 + 88) = v32;
  *(_QWORD *)(v31 + 96) = v33;
  aBlock[4] = sub_1001DAD04;
  v61 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015F6F8;
  aBlock[3] = &unk_10050B378;
  v34 = _Block_copy(aBlock);
  v59 = _swiftEmptyArrayStorage;
  v35 = sub_10001254C((unint64_t *)&qword_1005515F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v51 = v50;
  swift_retain(v25);
  v36 = v24;
  v37 = v16;
  swift_retain(v18);
  swift_retain(v33);
  v38 = sub_10000B4C8(&qword_10054FC78);
  v39 = sub_100012324((unint64_t *)&qword_100551600, &qword_10054FC78, (const char *)&protocol conformance descriptor for [A]);
  v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v38, v39, v53, v35);
  v41 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v42 = DispatchWorkItem.init(flags:block:)(v40, v34);
  swift_release(v61);
  sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
  v44 = v55;
  v43 = v56;
  v45 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for DispatchQoS.QoSClass.userInteractive(_:), v57);
  v46 = (void *)static OS_dispatch_queue.global(qos:)(v44);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  OS_dispatch_queue.async(execute:)(v42);

  v47 = v58;
  v58[3] = v41;
  v47[4] = (uint64_t)&protocol witness table for DispatchWorkItem;

  *v47 = v42;
  swift_release(v18);
  *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  return result;
}

uint64_t NSUserDefaults.libraryMenuRevision.getter()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;

  sub_1001D25F4();
  v14 = 0x4D7972617262694CLL;
  v15 = 0xEB00000000756E65;
  v0 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)&v14, (uint64_t)&type metadata for String, v0, &v16);
  if (v17)
  {
    if ((swift_dynamicCast(&v14, &v16, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v1 = v14;
      v2 = v15;
      v3 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
      v4 = JSONDecoder.init()();
      v5 = sub_1001DAD64();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Library.Menu.Revision, v1, v2, &type metadata for Library.Menu.Revision, v5);
      sub_10003A628(v1, v2);
      swift_release(v4);
      return v16;
    }
  }
  else
  {
    sub_100139528((uint64_t)&v16);
  }
  if (qword_10054BC50 != -1)
    swift_once(&qword_10054BC50, sub_1001D2BEC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D78C(v6, (uint64_t)static Logger.libraryMenu);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "No edits found — Returning stock menu revision", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  if (qword_10054BC48 != -1)
    swift_once(&qword_10054BC48, sub_1001D25C4);
  v11 = qword_100551BD0;
  v12 = *(_QWORD *)algn_100551BD8;
  swift_bridgeObjectRetain_n(qword_100551BD0, 2);
  swift_bridgeObjectRetain_n(v12, 2);
  return v11;
}

void sub_1001CEC64(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  id v40;
  _BYTE v44[24];
  uint64_t v45;

  v8 = (uint64_t)(a1 + 2);
  if (qword_10054BC48 != -1)
    goto LABEL_69;
  while (1)
  {
    v10 = qword_100551BD0;
    v9 = *(_QWORD *)algn_100551BD8;
    swift_beginAccess(v8, &v45, 33, 0);
    v11 = a1[3];
    if ((sub_100153244(a1[2], v10) & 1) != 0 && (sub_1001CD100(v11, v9) & 1) != 0)
    {
      swift_endAccess(&v45);
    }
    else
    {
      sub_1001D0D54(v10, v9);
      swift_endAccess(&v45);
      swift_beginAccess(v8, v44, 0, 0);
      v12 = a1[2];
      v13 = a1[3];
      v8 = a1[4];
      v14 = (void *)a1[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NSUserDefaults.libraryMenuRevision.setter(v12, v13, v8, v14);
    }
    if (a3)
      break;
    v27 = *(_QWORD *)(a4 + 16);
    if (!v27)
    {
      v29 = 0;
      goto LABEL_65;
    }
    v28 = 0;
    v29 = 0;
    v30 = v27 - 1;
    while (2)
    {
      switch(*(_BYTE *)(a4 + 32 + v28))
      {
        case 0:
          v29 |= 0x41uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 1:
          v29 |= 0xC0uLL;
          goto LABEL_13;
        case 2:
          v29 |= 2uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 3:
          v29 |= 1uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 4:
          v29 |= 0x80uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 5:
          v29 |= 0x400uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 6:
          v29 |= 0x20uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 7:
          v29 |= 0x10uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 8:
          v29 |= 4uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 9:
          v29 |= 8uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        case 0xA:
          v29 |= 0x300uLL;
          if (v30 == v28)
            goto LABEL_65;
          goto LABEL_14;
        default:
LABEL_13:
          if (v30 == v28)
            goto LABEL_65;
LABEL_14:
          if (!__OFADD__(++v28, 1))
            continue;
          __break(1u);
          break;
      }
      break;
    }
LABEL_69:
    swift_once(&qword_10054BC48, sub_1001D25C4);
  }
  v15 = (void *)objc_opt_self(NSBundle);
  v16 = a3;
  v17 = objc_msgSend(v15, "mainBundle");
  v18 = NSBundle.exportedTypeDeclarations.getter();

  if (v18)
  {
    v19 = objc_msgSend(v16, "typeIdentifiers");
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);

    v21 = *(_QWORD *)(v20 + 16);
    swift_bridgeObjectRelease();
    if (v21)
    {
      v22 = objc_msgSend(v16, "typeIdentifiers");
      v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, &type metadata for String);

      swift_bridgeObjectRetain();
      v24 = sub_10018C228(v23, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v18, 2);
      sub_10018BDC4((uint64_t)v24);
      v26 = v25;
      swift_bridgeObjectRelease();
LABEL_39:
      v40 = v16;
      v31 = *((_QWORD *)v26 + 2);
      v29 = 0;
      if (!v31)
      {
LABEL_60:
        swift_bridgeObjectRelease();
        if (objc_msgSend(v40, "selectionMode") == (id)2)
        {

        }
        else
        {
          v36 = objc_msgSend(v40, "selectionMode");

          if (v36 != (id)3)
            goto LABEL_65;
        }
        v29 &= 0xFFFFFFFFFFFFFC5FLL;
LABEL_65:
        objc_msgSend(a5, "filterAvailableContentGroups:withOptions:", v29, a6);
        if (qword_10054BA98 != -1)
          swift_once(&qword_10054BA98, sub_100154564);
        v37 = static ApplicationCapabilities.Controller.shared;
        KeyPath = swift_getKeyPath(&unk_1004306B8);
        v39 = swift_getKeyPath(&unk_1004306E0);
        static Published.subscript.getter(&v45, v37, KeyPath, v39);
        swift_release(KeyPath);
        swift_release(v39);
        __asm { BR              X10 }
      }
      v32 = v26 + 40;
      while (1)
      {
        v33 = *(v32 - 1);
        v34 = *v32;
        if (v33 == 0xD000000000000014 && v34 == 0x800000010044AFF0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010044AFF0, *(v32 - 1), *v32, 0) & 1) != 0)
        {
          v35 = 1247;
        }
        else if (v33 == 0xD00000000000001BLL && v34 == 0x800000010044AFD0
               || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010044AFD0, v33, v34, 0) & 1) != 0)
        {
          v35 = 32;
        }
        else if (v33 == 0xD00000000000001ALL && v34 == 0x800000010044BF80
               || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010044BF80, v33, v34, 0) & 1) != 0)
        {
          v35 = 256;
        }
        else
        {
          if ((v33 != 0xD000000000000015 || v34 != 0x800000010044BFA0)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010044BFA0, v33, v34, 0) & 1) == 0)
          {
            goto LABEL_46;
          }
          v35 = 512;
        }
        v29 |= v35;
LABEL_46:
        v32 += 2;
        if (!--v31)
          goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
    if (objc_msgSend(v16, "mediaTypes"))
    {
      v26 = sub_100186C64((__int16)objc_msgSend(v16, "mediaTypes"));
      goto LABEL_39;
    }
  }
  v26 = (char *)_swiftEmptyArrayStorage;
  goto LABEL_39;
}

uint64_t Logger.libraryMenu.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10054BC50 != -1)
    swift_once(&qword_10054BC50, sub_1001D2BEC);
  v0 = type metadata accessor for Logger(0);
  return sub_10000D78C(v0, (uint64_t)static Logger.libraryMenu);
}

uint64_t Library.Menu.Identifier.contentGroups.getter(unsigned __int8 a1)
{
  if (a1 > 0xAu)
    return 0;
  else
    return qword_100430920[(char)a1];
}

double sub_1001CFAC8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject(&unk_10050B928, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain(a2);
  Library.Menu.Request.perform(_:_:)(sub_1001DDD60, v6, a3);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_1001CFB38(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 11) = *(__int128 *)((char *)a1 + 27);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 11) = *(__int128 *)((char *)a2 + 27);
  return _s9MusicCore7LibraryO4MenuV7RequestV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t Library.Menu.Identifier.symbolName(for:)(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001CFBC0 + 4 * byte_100430140[a2]))(0x732E657261757173, 0xEC0000006B636174);
}

uint64_t sub_1001CFBC0()
{
  return 0x6B636F6C63;
}

uint64_t sub_1001CFBD4@<X0>(char a1@<W8>)
{
  if (a1 == 2)
    return 0x6F6E2E636973756DLL;
  else
    return 0x672E657261757173;
}

uint64_t sub_1001CFC28()
{
  return 0x696D2E636973756DLL;
}

uint64_t sub_1001CFC44()
{
  return 0x6F6E2E636973756DLL;
}

uint64_t sub_1001CFC8C()
{
  return 0x73726174697567;
}

unint64_t sub_1001CFCA4()
{
  return 0xD00000000000001ALL;
}

void sub_1001CFCBC()
{
  JUMPOUT(0x1001CFCD0);
}

uint64_t sub_1001CFCDC()
{
  return 30324;
}

unint64_t sub_1001CFCE8()
{
  return 0xD000000000000011;
}

unint64_t sub_1001CFD04()
{
  unint64_t v0;

  v0 = sub_100129D6C();
  if ((FeatureFlagsKey.isEnabled.getter((uint64_t)&type metadata for Feature.Music, v0) & 1) != 0)
    return 0xD000000000000011;
  else
    return 0xD000000000000016;
}

void Library.Menu.Identifier.name(for:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for String.LocalizationValue(0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  __asm { BR              X10 }
}

uint64_t sub_1001CFE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (v5 != 2 && (v5 & 1) != 0)
  {
    v7 = 0x800000010044BF60;
    v6 = 0xD000000000000013;
  }
  else
  {
    v6 = 0x796C746E65636552;
    v7 = 0xEE00646564644120;
  }
  String.LocalizationValue.init(stringLiteral:)(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v0);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v8 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v9 = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, v8, v2, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  return v9;
}

uint64_t Library.Menu.Identifier.description.getter(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v1 = Library.Menu.Identifier.rawValue.getter(a1);
  v7[2] = v1;
  v7[3] = v2;
  v7[0] = 46;
  v7[1] = 0xE100000000000000;
  v3 = sub_1000AE4D8();
  v4 = StringProtocol.components<A>(separatedBy:)(v7, &type metadata for String, &type metadata for String, v3, v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v1 = *(_QWORD *)(v4 + 16 * v5 + 16);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Library.Menu.Identifier.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001D01BC + 4 * byte_10043015A[a1]))(0xD000000000000029, 0x8000000100445640);
}

uint64_t sub_1001D01BC()
{
  uint64_t v0;

  return v0 + 4;
}

_UNKNOWN **static Library.Menu.Identifier.allCases.getter()
{
  return &off_1004FD728;
}

uint64_t sub_1001D029C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = Library.Menu.Identifier.rawValue.getter(*a1);
  v5 = v4;
  v6 = Library.Menu.Identifier.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1001D0324()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = Library.Menu.Identifier.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001D0384(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = Library.Menu.Identifier.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001D03C4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = Library.Menu.Identifier.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001D0420@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore7LibraryO4MenuV10IdentifierO8rawValueAGSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001D044C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = Library.Menu.Identifier.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1001D0474(_QWORD *a1@<X8>)
{
  *a1 = &off_1004FD728;
}

uint64_t sub_1001D0484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDCF8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001D04E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDCF8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001D052C()
{
  unsigned __int8 *v0;

  return Library.Menu.Identifier.description.getter(*v0);
}

char *Library.Menu.Revision.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  char *result;
  uint64_t v3;

  result = sub_1001DC36C(a1);
  if (v1)
    return (char *)v3;
  return result;
}

uint64_t Library.Menu.Revision.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;

  v24 = a3;
  v25 = a5;
  v9 = sub_10000B4C8(&qword_100551BF8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10000D900(a1, v14);
  v15 = sub_1001DC890();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s4MenuV8RevisionV10CodingKeysON, &_s4MenuV8RevisionV10CodingKeysON, v15, v14, v13);
  v26[0] = a4;
  v27 = 1;
  v16 = sub_10000B4C8(&qword_100551C08);
  v17 = sub_100038110(&qword_100551C10, &qword_100551C08, (uint64_t (*)(void))sub_1001DC8D4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v9, v16, v17);
  if (!v5)
  {
    v18 = a2;
    v19 = v24;
    v26[0] = v25;
    v27 = 0;
    v20 = sub_10000B4C8(&qword_100551C20);
    v21 = sub_100038110(&qword_100551C28, &qword_100551C20, (uint64_t (*)(void))sub_1001DC8D4, (const char *)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v9, v20, v21);
    v26[0] = v18;
    v26[1] = v19;
    v27 = 2;
    v22 = sub_1001DC918();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v9, &_s4MenuV8RevisionV7VersionVN, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1001D0744(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = sub_10000B4C8(&qword_100551CA0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10000D900(a1, v11);
  v13 = sub_1001DD954();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s4MenuV8RevisionV7VersionV10CodingKeysON, &_s4MenuV8RevisionV7VersionV10CodingKeysON, v13, v11, v12);
  v21 = a2;
  v20 = 0;
  v14 = sub_10000B4C8(&qword_100551C08);
  v15 = sub_100038110(&qword_100551C10, &qword_100551C08, (uint64_t (*)(void))sub_1001DC8D4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v7, v14, v15);
  if (!v3)
  {
    v21 = a3;
    v20 = 1;
    v16 = sub_10000B4C8(&qword_100551C20);
    v17 = sub_100038110(&qword_100551C28, &qword_100551C20, (uint64_t (*)(void))sub_1001DC8D4, (const char *)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v7, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1001D08E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000C894C(*a1, *a2);
}

Swift::Int sub_1001D08F0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE300000000000000;
  v3 = 7105633;
  if (v1 != 1)
  {
    v3 = 0x6E6F6973726576;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64657463656C6573;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001D0988(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE300000000000000;
  v3 = 7105633;
  if (*v1 != 1)
  {
    v3 = 0x6E6F6973726576;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x64657463656C6573;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001D09FC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE300000000000000;
  v3 = 7105633;
  if (v1 != 1)
  {
    v3 = 0x6E6F6973726576;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64657463656C6573;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1001D0A90@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001DD90C(*a1);
  *a2 = result;
  return result;
}

void sub_1001D0ABC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE300000000000000;
  v5 = 7105633;
  if (v2 != 1)
  {
    v5 = 0x6E6F6973726576;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64657463656C6573;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1001D0B14()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7105633;
  if (*v0 != 1)
    v1 = 0x6E6F6973726576;
  if (*v0)
    return v1;
  else
    return 0x64657463656C6573;
}

unint64_t sub_1001D0B68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001DD90C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001D0B8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D0BB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC890();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D0BDC()
{
  _BYTE *v0;

  if (*v0)
    return 0x64657463656C6573;
  else
    return 0x696669746E656469;
}

uint64_t sub_1001D0C20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001DD998(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001D0C44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DD954();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D0C6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DD954();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D0C94@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001DDAA0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1001D0CBC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001D0744(a1, *v1, v1[1]);
}

uint64_t sub_1001D0CD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_100153244(*a1, *a2) & 1) != 0)
    return sub_1001CD100(v2, v3);
  else
    return 0;
}

uint64_t MPCPlaybackEngine.Configuration.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MPCPlaybackEngine.Configuration.options.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t Library.Menu.Revision.selected.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_1001D0D54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v5 = (_QWORD *)*v2;
  v6 = v2[1];
  v7 = qword_10054BC50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once(&qword_10054BC50, sub_1001D2BEC);
  v8 = type metadata accessor for Logger(0);
  v57 = sub_10000D78C(v8, (uint64_t)static Logger.libraryMenu);
  v9 = Logger.logObject.getter(v57);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "╭ ⏩ Begin Migration", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v56 = v2;
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v62 = v16;
    *(_DWORD *)v15 = 136315138;
    v60 = v5;
    v61 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = (char *)String.init<A>(describing:)(&v60, &_s4MenuV8RevisionV7VersionVN);
    *(_QWORD *)(v15 + 4) = sub_1000BA30C(v17, v18, &v62);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "╞< %s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v19 = v15;
    v3 = v2;
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v5, 2);
  }
  swift_bridgeObjectRetain_n(a1, 2);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v62 = v24;
    *(_DWORD *)v23 = 136315138;
    v60 = (_QWORD *)a1;
    v61 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = (char *)String.init<A>(describing:)(&v60, &_s4MenuV8RevisionV7VersionVN);
    *(_QWORD *)(v23 + 4) = sub_1000BA30C(v25, v26, &v62);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "╞> %s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  v27 = v3[2];
  v28 = swift_bridgeObjectRetain();
  v29 = sub_100190A34(v28);
  swift_bridgeObjectRelease();
  v30 = swift_bridgeObjectRetain();
  v31 = sub_100190A34(v30);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16) <= *(_QWORD *)(v29 + 16) >> 3)
  {
    v60 = (_QWORD *)v29;
    swift_bridgeObjectRetain();
    sub_1001D9B7C(v31);
    v32 = v60;
  }
  else
  {
    swift_bridgeObjectRetain();
    v32 = sub_1001D9CDC(v31, v29);
  }
  if (*(_QWORD *)(v29 + 16) <= *(_QWORD *)(v31 + 16) >> 3)
  {
    v60 = (_QWORD *)v31;
    sub_1001D9B7C(v29);
    v33 = v60;
  }
  else
  {
    v33 = sub_1001D9CDC(v29, v31);
  }
  v62 = v27;
  v34 = *(_QWORD *)(v27 + 16);
  v35 = *(_QWORD *)(v29 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v34 != v35)
  {
    v36 = *(_QWORD *)(v27 + 16);
    if (v36)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v36; ++i)
      {
        v38 = *(_BYTE *)(v27 + i + 32);
        LOBYTE(v60) = v38;
        sub_1001D177C((unsigned __int8 *)&v60, &v62);
      }
      swift_bridgeObjectRelease();
    }
  }
  sub_1001CCDB0((uint64_t)v32, &v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001DB954((uint64_t)v33, a1, &v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(a1 + 16);
  swift_beginAccess(&v62, &v60, 0, 0);
  v40 = v62;
  if (v39 == *(_QWORD *)(v62 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56[2] = v40;
    v41 = v56[3];
    if (v32[2] <= *(_QWORD *)(v41 + 16) >> 3)
    {
      v59 = (void *)v56[3];
      swift_bridgeObjectRetain();
      sub_1001D9B7C((uint64_t)v32);
      swift_bridgeObjectRelease();
      v42 = v59;
    }
    else
    {
      swift_bridgeObjectRetain();
      v42 = sub_1001D9CDC((uint64_t)v32, v41);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = a2;
    v54 = sub_1001DBC6C((uint64_t)v33, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = sub_1001D2424(v54, (uint64_t)v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56[3] = v55;
    v50 = v56;
    v51 = a1;
    v52 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = a2;
    v44 = *v56;
    v45 = v56[1];
    v46 = v56[3];
    v47 = sub_1001DDF44();
    swift_allocError(&_s4MenuV8RevisionV16MigrationFailureON, v47, 0, 0);
    *v48 = v44;
    v48[1] = v45;
    v48[2] = v27;
    v48[3] = v46;
    v48[4] = a1;
    v48[5] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49 = swift_bridgeObjectRetain();
    swift_willThrow(v49);
    swift_bridgeObjectRelease();
    v50 = v56;
    v51 = a1;
    v52 = v43;
  }
  sub_1001D1418(v50, v51, v52);
}

void sub_1001D1418(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  *a1 = a2;
  a1[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v4 = a1[3];
  v6 = qword_10054BC50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once(&qword_10054BC50, sub_1001D2BEC);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D78C(v7, (uint64_t)static Logger.libraryMenu);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "╞ ✅ Migration ended with", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = swift_bridgeObjectRetain();
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v31 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = swift_bridgeObjectRetain();
    v18 = (char *)Array.description.getter(v17, &type metadata for Library.Menu.Identifier);
    v20 = v19;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v15 + 4) = sub_1000BA30C(v18, v20, &v31);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "╞  - Ordered: %{public}s)", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  v21 = swift_bridgeObjectRetain();
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v31 = v25;
    *(_DWORD *)v24 = 136446210;
    v26 = sub_100190AA4();
    v27 = swift_bridgeObjectRetain();
    v28 = (char *)Set.description.getter(v27, &type metadata for Library.Menu.Identifier, v26);
    v30 = v29;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v24 + 4) = sub_1000BA30C(v28, v30, &v31);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "╞  - Selected: %{public}s)", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
}

uint64_t sub_1001D177C(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[32];

  v3 = *a1;
  swift_beginAccess(a2, v13, 0, 0);
  swift_beginAccess(a2, v12, 0, 0);
  swift_beginAccess(a2, v11, 0, 0);
  swift_beginAccess(a2, v10, 1, 0);
  v4 = *a2;
  swift_bridgeObjectRetain();
  sub_100192EEC(v3, v4);
  v6 = v5;
  result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    v8 = *a2;
    v9 = *(_QWORD *)(*a2 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain();
      if (v9 <= *(_QWORD *)(v8 + 16))
        __asm { BR              X9 }
      __break(1u);
      JUMPOUT(0x1001D1CC4);
    }
  }
  return result;
}

uint64_t sub_1001D1D30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE v5[24];
  uint64_t *v6;

  swift_beginAccess(a2, v5, 33, 0);
  v6 = a2;
  v3 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  sub_1000E0D1C(0, 0);
  return swift_endAccess(v5);
}

uint64_t sub_1001D2424(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_1001D386C(&v14, *(_BYTE *)(*(_QWORD *)(v2 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

char *sub_1001D257C@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  char *result;
  char *v5;
  char *v6;
  char *v7;

  result = sub_1001DC36C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1001D25A8(_QWORD *a1)
{
  uint64_t *v1;

  return Library.Menu.Revision.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void *sub_1001D25C4()
{
  void *result;

  result = sub_100174A74((uint64_t)&off_1004FD758);
  qword_100551BD0 = (uint64_t)&off_1004FD728;
  *(_QWORD *)algn_100551BD8 = result;
  return result;
}

void sub_1001D25F4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;

  LOBYTE(v23[0]) = 0;
  v1 = sub_1001DDF00();
  v2 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)&_s9LegacyKeyON, v1, v2, &v24);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_8;
  v3 = sub_10000B4C8(&qword_10054D598);
  if ((swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return;
  v4 = v23[0];
  LOBYTE(v23[0]) = 1;
  NSUserDefaults.subscript.getter((uint64_t)&_s9LegacyKeyON, v1, v2, &v24);
  if (!*((_QWORD *)&v25 + 1))
  {
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    sub_100139528((uint64_t)&v24);
    return;
  }
  if ((swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v5 = v23[0];
  v23[0] = 0x4D7972617262694CLL;
  v23[1] = 0xEB00000000756E65;
  NSUserDefaults.subscript.getter((uint64_t)v23, (uint64_t)&type metadata for String, v2, &v24);
  if (*((_QWORD *)&v25 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_100139528((uint64_t)&v24);
  if (qword_10054BC48 != -1)
    swift_once(&qword_10054BC48, sub_1001D25C4);
  v6 = sub_1001DBE90(v4, v5, qword_100551BD0, *(uint64_t *)algn_100551BD8);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10054BC50 != -1)
      swift_once(&qword_10054BC50, sub_1001D2BEC);
    v10 = type metadata accessor for Logger(0);
    sub_10000D78C(v10, (uint64_t)static Logger.libraryMenu);
    swift_errorRetain(v0);
    v11 = swift_errorRetain(v0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      *(_QWORD *)&v24 = v0;
      swift_errorRetain(v0);
      v16 = sub_10000B4C8((uint64_t *)&unk_100550630);
      String.init<A>(describing:)(&v24, v16);
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 4) = v17;
      *v15 = v17;
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to migrate legacy library menu: %@", (uint8_t *)v14, 0xCu);
      v18 = sub_10000B4C8(&qword_100553D50);
      swift_arrayDestroy(v15, 1, v18);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v0);
    }
    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      swift_errorRelease(v0);

    }
  }
  else
  {
    v19 = v6;
    v20 = v7;
    v21 = v8;
    v22 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSUserDefaults.libraryMenuRevision.setter(v19, v20, v21, v22);
    v24 = 0u;
    v25 = 0u;
    LOBYTE(v23[0]) = 0;
    NSUserDefaults.subscript.setter((uint64_t)&v24, (uint64_t)v23, (uint64_t)&_s9LegacyKeyON, v1, v2);
    v24 = 0u;
    v25 = 0u;
    LOBYTE(v23[0]) = 1;
    NSUserDefaults.subscript.setter((uint64_t)&v24, (uint64_t)v23, (uint64_t)&_s9LegacyKeyON, v1, v2);
  }
}

void (*NSUserDefaults.libraryMenuRevision.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *v3 = NSUserDefaults.libraryMenuRevision.getter();
  v3[1] = v4;
  v3[2] = v5;
  v3[3] = v6;
  return sub_1001D2A20;
}

void sub_1001D2A20(uint64_t **a1, char a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[2];
  v6 = (void *)(*a1)[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSUserDefaults.libraryMenuRevision.setter(v4, v3, v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSUserDefaults.libraryMenuRevision.setter(**a1, v3, v5, v6);
  }
  free(v2);
}

uint64_t sub_1001D2AD0(char *a1, char *a2)
{
  return sub_1000C84E0(*a1, *a2);
}

Swift::Int sub_1001D2ADC()
{
  char *v0;

  return sub_10015EE30(*v0);
}

uint64_t sub_1001D2AE4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD00000000000001CLL;
  else
    v2 = 0xD00000000000001DLL;
  if (*v1)
    v3 = 0x8000000100446440;
  else
    v3 = 0x8000000100446420;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001D2B44(uint64_t a1)
{
  char *v1;

  return sub_10015F678(a1, *v1);
}

uint64_t sub_1001D2B4C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD7E8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001D2BA8(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD00000000000001CLL;
  else
    v2 = 0xD00000000000001DLL;
  v3 = 0x8000000100446420;
  if (*v1)
    v3 = 0x8000000100446440;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1001D2BEC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.libraryMenu);
  sub_10000D78C(v0, (uint64_t)static Logger.libraryMenu);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x4D7972617262694CLL, 0xEB00000000756E65);
}

uint64_t static Logger.libraryMenu.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10054BC50 != -1)
    swift_once(&qword_10054BC50, sub_1001D2BEC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Logger.libraryMenu);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1001D2CD8(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD v14[9];

  v4 = *v2;
  Hasher.init(_seed:)(v14);
  v5 = ApplicationCapabilities.Service.rawValue.getter(a2);
  v7 = v6;
  swift_bridgeObjectRetain();
  String.hash(into:)(v14, v5, v7);
  swift_bridgeObjectRelease(v7);
  v8 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  v14[0] = *v12;
  *v12 = 0x8000000000000000;
  sub_1001D64E4(a2, v8, isUniquelyReferenced_nonNull_native);
  v10 = *v12;
  *v12 = v14[0];
  swift_bridgeObjectRelease(v10);
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_1001D3120(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for AudioVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10001254C(&qword_100550A58, v12, (uint64_t)&protocol conformance descriptor for AudioVariant);
  swift_bridgeObjectRetain();
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10001254C(&qword_100550A60, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001D698C((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1001D337C(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  id v30;
  uint64_t v31;
  void *v33;
  id v34;
  _QWORD v35[9];

  v3 = v2;
  v6 = *v2;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v9 = v8;
  Hasher.init(_seed:)(v35);
  swift_bridgeObjectRetain();
  String.hash(into:)(v35, v7, v9);
  v10 = Hasher._finalize()();
  swift_bridgeObjectRelease(v9);
  v11 = -1 << *(_BYTE *)(v6 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v35[0] = *v3;
    *v3 = 0x8000000000000000;
    v30 = a2;
    sub_1001D6B90((uint64_t)v30, v12, isUniquelyReferenced_nonNull_native);
    v31 = *v3;
    *v3 = v35[0];
    swift_bridgeObjectRelease(v31);
    *a1 = v30;
    return 1;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12));
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v13 == v16 && v15 == v17)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v15, 2);
  }
  else
  {
    v19 = v17;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {
      v21 = ~v11;
      do
      {
        v12 = (v12 + 1) & v21;
        if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          goto LABEL_15;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12));
        v15 = v23;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v22 == v24 && v15 == v25)
          goto LABEL_16;
        v27 = v25;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v15, v24, v25, 0);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v27);
      }
      while ((v28 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  v33 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v12);
  *a1 = v33;
  v34 = v33;
  return 0;
}

uint64_t sub_1001D35A4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v31 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    v10 = swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release(a2);
      v29 = v9;
      v11 = type metadata accessor for AnyCancellable(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
      *a1 = v30;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7, v10);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_1001D4018(v7, result + 1);
    v30 = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v28 = v25 + 1;
      swift_retain(a2);
      sub_1001D4CE0(v28);
      v26 = v30;
    }
    else
    {
      v26 = v24;
      swift_retain(a2);
    }
    sub_1001D5C9C(a2, v26);
    *v3 = v26;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v13 = *(_QWORD *)(v6 + 40);
  v14 = type metadata accessor for AnyCancellable(0);
  v15 = sub_10001254C(&qword_100550A48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  swift_bridgeObjectRetain();
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v14, v15);
  v17 = -1 << *(_BYTE *)(v6 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v6 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v22 = v31;
    v30 = *v2;
    *v2 = 0x8000000000000000;
    v23 = swift_retain(v22);
    sub_1001D6DBC(v23, v18, isUniquelyReferenced_nonNull_native);
    *v2 = v30;
    swift_bridgeObjectRelease();
    *a1 = v22;
    return 1;
  }
  v19 = ~v17;
  v20 = sub_10001254C(&qword_100550A50, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  while (1)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v30, &v31, v14, v20) & 1) != 0)
      break;
    v18 = (v18 + 1) & v19;
    if (((*(_QWORD *)(v6 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v18);
  *a1 = v27;
  swift_retain(v27);
  return 0;
}

uint64_t sub_1001D386C(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v11;
  _QWORD v13[10];

  v4 = *v2;
  Hasher.init(_seed:)(v13);
  v5 = Library.Menu.Identifier.rawValue.getter(a2);
  v7 = v6;
  swift_bridgeObjectRetain();
  String.hash(into:)(v13, v5, v7);
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  v13[0] = *v11;
  *v11 = 0x8000000000000000;
  sub_1001D6F64(a2, v8, isUniquelyReferenced_nonNull_native);
  *v11 = v13[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_1001D3C48(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[9];

  v5 = *v2;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_1001D73B4(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13[0];
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  a2 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1001D3D64(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001D7510(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1001D3E5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v23[9];

  v7 = *v3;
  Hasher.init(_seed:)(v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)(v23, a2, a3);
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1001D7630(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1001D4018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_10000B4C8(&qword_100550A40);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for AnyCancellable(0);
      do
      {
        v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_1001D4CE0(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        v23 = v24;
        v10 = *(_QWORD *)(v4 + 40);
        v11 = sub_10001254C(&qword_100550A48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
        result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v4;
}

void sub_1001D4238(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x1001D4638);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_1001D4664(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for AudioVariant(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100551D38);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_26;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v19 >= v38)
      goto LABEL_35;
    v20 = v39[v19];
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v38)
        goto LABEL_35;
      v20 = v39[v15];
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v38)
          goto LABEL_35;
        v20 = v39[v15];
        if (!v20)
          break;
      }
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_26:
    v22 = v7;
    v23 = *(_QWORD *)(v7 + 48);
    v24 = *(_QWORD *)(v40 + 72);
    v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v25(v6, v23 + v24 * v18, v4);
    v26 = *(_QWORD *)(v9 + 40);
    v27 = sub_10001254C(&qword_100550A58, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
    v28 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v25((char *)(*(_QWORD *)(v9 + 48) + v16 * v24), (unint64_t)v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v22;
  }
  v21 = v19 + 3;
  if (v21 < v38)
  {
    v20 = v39[v21];
    if (!v20)
    {
      while (1)
      {
        v15 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v15 >= v38)
          goto LABEL_35;
        v20 = v39[v15];
        ++v21;
        if (v20)
          goto LABEL_25;
      }
    }
    v15 = v21;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

void sub_1001D49D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CD8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v32 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v15 >= v32)
          goto LABEL_36;
        v16 = v33[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_36;
          v16 = v33[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_36;
            v16 = v33[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v11 >= v32)
                    goto LABEL_36;
                  v16 = v33[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v19, v21);
      v22 = Hasher._finalize()();
      swift_bridgeObjectRelease(v21);
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1001D4CE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100550A40);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v15 >= v31)
          goto LABEL_36;
        v16 = v32[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_36;
          v16 = v32[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v31)
              goto LABEL_36;
            v16 = v32[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_36:
                swift_release(v3);
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v11 >= v31)
                    goto LABEL_36;
                  v16 = v32[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
      v19 = *(_QWORD *)(v6 + 40);
      v20 = type metadata accessor for AnyCancellable(0);
      v21 = sub_10001254C(&qword_100550A48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v20, v21);
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1001D4FF0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100550A30);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v16 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v15 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v15 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_22;
    v11 = 2;
    if (v15 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_22;
      v11 = 3;
      if (v15 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v15 > 4)
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1001D5454);
              }
              if (v11 >= v15)
                break;
              v10 = v16[v11];
              ++v12;
              if (v10)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v9);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v14 = 1 << *(_BYTE *)(v3 + 32);
  if (v14 > 63)
    bzero(v16, ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v16 = -1 << v14;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_1001D5488(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100550A18);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v31);
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1001D5730(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CF8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v29 = -1 << v9;
    v30 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v31 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v31 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      v21 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1001D59B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CD0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34);
      swift_bridgeObjectRetain();
      String.hash(into:)(v34, v21, v22);
      swift_bridgeObjectRelease();
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

unint64_t sub_1001D5C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = type metadata accessor for AnyCancellable(0);
  v6 = sub_10001254C(&qword_100550A48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1001D5D68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for AudioVariant(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_10000B4C8(&qword_100551D38);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_37;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_37;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_37;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_37;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    v27 = sub_10001254C(&qword_100550A58, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v17 = v40;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1001D6068(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v17[10];

  v4 = a4;
  if (!a3)
  {
    v7 = &_swiftEmptySetSingleton;
    goto LABEL_23;
  }
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    sub_10000B4C8(&qword_100550A30);
    v7 = (void *)static _SetStorage.allocate(capacity:)(a3);
    v15 = a2;
    if (a2 < 1)
      v8 = 0;
    else
      v8 = *a1;
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      goto LABEL_22;
    }
    if (v15 > 1)
    {
      v10 = a1[1];
      v11 = 1;
      if (v10)
        goto LABEL_21;
      v11 = 2;
      if (v15 > 2)
      {
        v10 = a1[2];
        if (v10)
          goto LABEL_21;
        v11 = 3;
        if (v15 > 3)
        {
          v10 = a1[3];
          if (!v10)
          {
            v12 = 4;
            if (v15 > 4)
            {
              v10 = a1[4];
              if (v10)
              {
                v11 = 4;
                goto LABEL_21;
              }
              while (1)
              {
                v11 = v12 + 1;
                if (__OFADD__(v12, 1))
                {
                  __break(1u);
                  JUMPOUT(0x1001D64B0);
                }
                if (v11 >= v15)
                  break;
                v10 = a1[v11];
                ++v12;
                if (v10)
                  goto LABEL_21;
              }
            }
            goto LABEL_23;
          }
LABEL_21:
          v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_22:
          v13 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v9);
          Hasher.init(_seed:)(v17);
          __asm { BR              X8 }
        }
      }
    }
LABEL_23:
    swift_release(v4);
    return v7;
  }
  return (void *)v4;
}

void sub_1001D64E4(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  _QWORD v19[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1001D4238(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_1001D7D58(&qword_100551CE0);
        goto LABEL_10;
      }
      sub_1001D8224(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v19);
    v10 = ApplicationCapabilities.Service.rawValue.getter(a1);
    v12 = v11;
    String.hash(into:)(v19, v10, v11);
    swift_bridgeObjectRelease(v12);
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v13 = *v17;
  *(_QWORD *)(*v17 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = v18;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1001D6918);
  }
  *(_QWORD *)(v13 + 16) = v16;
}

uint64_t sub_1001D698C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for AudioVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001D4664(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1001D77D8();
      goto LABEL_12;
    }
    sub_1001D861C(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_10001254C(&qword_100550A58, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_10001254C(&qword_100550A60, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1001D6B90(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD v34[9];

  v4 = (uint64_t *)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001D49D0(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1001D79FC();
LABEL_22:
      v30 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * a2) = a1;
      v31 = *(_QWORD *)(v30 + 16);
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (!v32)
      {
        *(_QWORD *)(v30 + 16) = v33;
        return;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1001D8944(v9);
  }
  v10 = *(_QWORD *)v3;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v13 = v12;
  Hasher.init(_seed:)(v34);
  String.hash(into:)(v34, v11, v13);
  v3 = Hasher._finalize()();
  swift_bridgeObjectRelease(v13);
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v3 = v16;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v15 == v17 && v3 == v18)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v20 = v18;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v3, v17, v18, 0);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v20);
  if ((v21 & 1) == 0)
  {
    v22 = ~v14;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v3 = v24;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v23 == v25 && v3 == v26)
        goto LABEL_25;
      v28 = v26;
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v3, v25, v26, 0);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v28);
    }
    while ((v29 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for Name(0);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1001D6DBC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001D4CE0(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1001D7BA4();
      goto LABEL_12;
    }
    sub_1001D8C20(v9);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for AnyCancellable(0);
  v12 = sub_10001254C(&qword_100550A48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = sub_10001254C(&qword_100550A50, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, v4, v16) & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v17 + 16) = v20;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

void sub_1001D6F64(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[10];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1001D4FF0(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_1001D7D58(&qword_100550A30);
        goto LABEL_10;
      }
      sub_1001D8F04(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v18);
    v10 = Library.Menu.Identifier.rawValue.getter(a1);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1001D7330);
  }
  *(_QWORD *)(v12 + 16) = v15;
}

void sub_1001D73B4(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001D5488(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_1001D7D58(&qword_100550A18);
      goto LABEL_14;
    }
    sub_1001D9364(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MPCPlaybackEngine.Option);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void sub_1001D7510(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001D5730(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_1001D7EE0();
      goto LABEL_14;
    }
    sub_1001D95DC(v8);
  }
  v9 = *v3;
  v10 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), a1);
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = a1;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

void sub_1001D7630(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1001D59B0(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1001D8074();
      goto LABEL_22;
    }
    sub_1001D983C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29);
  swift_bridgeObjectRetain();
  String.hash(into:)(v29, a1, a2);
  swift_bridgeObjectRelease();
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MusicItemID);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_1001D77D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for AudioVariant(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8(&qword_100551D38);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_30:
    *v1 = v8;
    return;
  }
  v25 = v1;
  v9 = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 56 + 8 * v11)
    memmove(v9, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

void sub_1001D79FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10000B4C8(&qword_100551CD8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_28;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v13)
          goto LABEL_28;
        v20 = *(_QWORD *)(v6 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v18 = v17;
  }
  v21 = v19 + 3;
  if (v21 >= v13)
    goto LABEL_28;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001D7BA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000B4C8(&qword_100550A40);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001D7D4C()
{
  sub_1001D7D58(&qword_100550A30);
}

void sub_1001D7D58(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_10000B4C8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001D7EE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10000B4C8(&qword_100551CF8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001D8074()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10000B4C8(&qword_100551CD0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001D8224(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x1001D85F0);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v15);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
}

void sub_1001D861C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for AudioVariant(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100551D38);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
LABEL_37:
    *v2 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v37)
      goto LABEL_35;
    v21 = *(_QWORD *)(v36 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_35;
      v21 = *(_QWORD *)(v36 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_35;
        v21 = *(_QWORD *)(v36 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v23 * v19, v4);
    v24 = *(_QWORD *)(v10 + 40);
    v25 = sub_10001254C(&qword_100550A58, (uint64_t (*)(uint64_t))&type metadata accessor for AudioVariant, (uint64_t)&protocol conformance descriptor for AudioVariant);
    v26 = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v4, v25);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v17 * v23, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_35:
    swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v36 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v37)
      goto LABEL_35;
    v21 = *(_QWORD *)(v36 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

void sub_1001D8944(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CD8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v31 = v2;
  v32 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v33 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v33)
      goto LABEL_36;
    v16 = *(_QWORD *)(v32 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v33)
        goto LABEL_36;
      v16 = *(_QWORD *)(v32 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v33)
          goto LABEL_36;
        v16 = *(_QWORD *)(v32 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v14);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;
    Hasher.init(_seed:)(v34);
    v22 = v18;
    String.hash(into:)(v34, v19, v21);
    v23 = Hasher._finalize()();
    swift_bridgeObjectRelease(v21);
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v26);
      }
      while (v30 == -1);
      v12 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v32 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v33)
      goto LABEL_36;
    v16 = *(_QWORD *)(v32 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1001D8C20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100550A40);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v30 = v2;
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v32)
      goto LABEL_36;
    v16 = *(_QWORD *)(v31 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v32)
        goto LABEL_36;
      v16 = *(_QWORD *)(v31 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v32)
          goto LABEL_36;
        v16 = *(_QWORD *)(v31 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    v19 = *(_QWORD *)(v6 + 40);
    v20 = type metadata accessor for AnyCancellable(0);
    v21 = sub_10001254C(&qword_100550A48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    swift_retain(v18);
    v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v20, v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v32)
      goto LABEL_36;
    v16 = *(_QWORD *)(v31 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1001D8F04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100550A30);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v14 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_22;
    v11 = 2;
    if (v14 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_22;
      v11 = 3;
      if (v14 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v14 > 4)
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1001D9330);
              }
              if (v11 >= v14)
                break;
              v10 = *(_QWORD *)(v3 + 56 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v9);
        Hasher.init(_seed:)(v15);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
}

void sub_1001D9364(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100550A18);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v30);
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1001D95DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CF8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v21 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1001D983C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000B4C8(&qword_100551CD0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain_n(v22, 2);
    String.hash(into:)(v33, v21, v22);
    swift_bridgeObjectRelease();
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

unint64_t sub_1001D9AF4()
{
  unint64_t result;

  result = qword_100551BE0;
  if (!qword_100551BE0)
  {
    result = swift_getWitnessTable(byte_100430678, &_s4MenuV9MoveErrorVN);
    atomic_store(result, (unint64_t *)&qword_100551BE0);
  }
  return result;
}

unint64_t sub_1001D9B38()
{
  unint64_t result;

  result = qword_100551BE8;
  if (!qword_100551BE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Revision, &type metadata for Library.Menu.Revision);
    atomic_store(result, (unint64_t *)&qword_100551BE8);
  }
  return result;
}

void sub_1001D9B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_10018FAC4(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void *sub_1001D9CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v14;
  _QWORD v15[9];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = (_QWORD *)(a1 + 56);
    v5 = -1 << *(_BYTE *)(a1 + 32);
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(a1 + 56);
    v14 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain();
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      goto LABEL_22;
    }
    if (v14 > 1)
    {
      v9 = v4[1];
      v10 = 1;
      if (v9)
        goto LABEL_21;
      v10 = 2;
      if (v14 > 2)
      {
        v9 = v4[2];
        if (v9)
          goto LABEL_21;
        v10 = 3;
        if (v14 > 3)
        {
          v9 = v4[3];
          if (v9)
            goto LABEL_21;
          v10 = 4;
          if (v14 > 4)
          {
            v9 = v4[4];
            if (!v9)
            {
              v11 = 5;
              if (v14 > 5)
              {
                v9 = v4[5];
                if (v9)
                {
                  v10 = 5;
                  goto LABEL_21;
                }
                while (1)
                {
                  v10 = v11 + 1;
                  if (__OFADD__(v11, 1))
                    __break(1u);
                  if (v10 >= v14)
                    break;
                  v9 = v4[v10];
                  ++v11;
                  if (v9)
                    goto LABEL_21;
                }
              }
              goto LABEL_25;
            }
LABEL_21:
            v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_22:
            v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v8);
            Hasher.init(_seed:)(v15);
            __asm { BR              X8 }
          }
        }
      }
    }
LABEL_25:
    sub_100194204(a1);
    return (void *)v2;
  }
  swift_release(a2);
  return &_swiftEmptySetSingleton;
}

void *sub_1001DA530(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v20;
  _QWORD v22[12];

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v22[11] = a3 + 56;
  v20 = v6 - 1;
  v8 = a5[3];
  v7 = a5[4];
  if (v7)
  {
    v9 = (v7 - 1) & v7;
    v10 = __clz(__rbit64(v7)) | (v8 << 6);
    goto LABEL_13;
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    JUMPOUT(0x1001DAACCLL);
  }
  v12 = (unint64_t)(a5[2] + 64) >> 6;
  if (v11 >= v12)
  {
    v11 = a5[3];
  }
  else
  {
    v13 = a5[1];
    v14 = *(_QWORD *)(v13 + 8 * v11);
    if (v14)
    {
LABEL_12:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v11 << 6);
      v8 = v11;
LABEL_13:
      v16 = *(unsigned __int8 *)(*(_QWORD *)(*a5 + 48) + v10);
      a5[3] = v8;
      a5[4] = v9;
      Hasher.init(_seed:)(v22);
      __asm { BR              X8 }
    }
    v15 = v8 + 2;
    if (v8 + 2 < v12)
    {
      v14 = *(_QWORD *)(v13 + 8 * v15);
      if (v14)
      {
LABEL_8:
        v11 = v15;
        goto LABEL_12;
      }
      if (v8 + 3 < v12)
      {
        v14 = *(_QWORD *)(v13 + 8 * (v8 + 3));
        if (v14)
        {
          v11 = v8 + 3;
          goto LABEL_12;
        }
        v15 = v8 + 4;
        if (v8 + 4 >= v12)
        {
          v11 = v8 + 3;
          goto LABEL_23;
        }
        v14 = *(_QWORD *)(v13 + 8 * v15);
        if (v14)
          goto LABEL_8;
        v11 = v8 + 5;
        if (v8 + 5 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * v11);
          if (!v14)
          {
            v11 = v12 - 1;
            v17 = v8 + 6;
            do
            {
              if (v12 == v17)
                goto LABEL_23;
              v14 = *(_QWORD *)(v13 + 8 * v17++);
            }
            while (!v14);
            v11 = v17 - 1;
          }
          goto LABEL_12;
        }
      }
      v11 = v15;
    }
  }
LABEL_23:
  a5[3] = v11;
  a5[4] = 0;
  swift_retain(a3);
  return sub_1001D6068(a1, a2, v20, a3);
}

uint64_t sub_1001DAB6C(void *a1, char a2, void *a3, char a4)
{
  char v7;
  char v8;
  char v9;

  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0)
    {
      sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
      sub_1001DAC44(a1, 0);
      sub_1001DAC44(a3, 0);
      v7 = static NSObject.== infix(_:_:)(a1, a3);
      goto LABEL_6;
    }
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  if ((a4 & 1) == 0)
    goto LABEL_7;
  type metadata accessor for MusicLibrary(0);
  sub_1001DAC44(a1, 1);
  sub_1001DAC44(a3, 1);
  v7 = static MusicLibrary.== infix(_:_:)(a1, a3);
LABEL_6:
  v8 = v7;
  v9 = a2 & 1;
  sub_1001DAC50(a3, v9);
  sub_1001DAC50(a1, v9);
  return v8 & 1;
}

id sub_1001DAC44(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_retain(a1);
  else
    return a1;
}

void sub_1001DAC50(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_release(a1);
  else

}

uint64_t sub_1001DAC5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001DAC6C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001DACA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

void sub_1001DAD04()
{
  uint64_t v0;

  sub_1001CEC64(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1001DAD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001DAD5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1001DAD64()
{
  unint64_t result;

  result = qword_100551BF0;
  if (!qword_100551BF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Revision, &type metadata for Library.Menu.Revision);
    atomic_store(result, (unint64_t *)&qword_100551BF0);
  }
  return result;
}

uint64_t _s9MusicCore7LibraryO4MenuV7RequestV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  char v14;
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  sub_1001DDE90((uint64_t *)a1, (uint64_t)v17);
  sub_1001DDE90((uint64_t *)a2, (uint64_t)v16);
  sub_1001DDE90(v17, (uint64_t)&v18);
  v4 = v18;
  if ((v19 & 1) != 0)
  {
    sub_1001DDE90(v16, (uint64_t)&v20);
    if ((v21 & 1) == 0)
      goto LABEL_16;
    v5 = v20;
    type metadata accessor for MusicLibrary(0);
    sub_1001DDEA8((uint64_t)v17);
    sub_1001DDEA8((uint64_t)v16);
    v6 = static MusicLibrary.== infix(_:_:)(v4, v5);
  }
  else
  {
    sub_1001DDE90(v16, (uint64_t)&v20);
    if ((v21 & 1) != 0)
      goto LABEL_16;
    v7 = v20;
    sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
    sub_1001DDEA8((uint64_t)v17);
    sub_1001DDEA8((uint64_t)v16);
    v6 = static NSObject.== infix(_:_:)(v4, v7);
  }
  v8 = v6;
  sub_1001DDED4((uint64_t)v16);
  sub_1001DDED4((uint64_t)v17);
  if ((v8 & 1) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    goto LABEL_16;
  v9 = *(void **)(a1 + 24);
  v10 = *(void **)(a2 + 24);
  if (v9)
  {
    if (!v10)
      goto LABEL_16;
    sub_1000DD108(0, &qword_100551D18, MPMediaPickerConfiguration_ptr);
    v11 = v10;
    v12 = v9;
    v13 = static NSObject.== infix(_:_:)(v12, v11);

    if ((v13 & 1) == 0)
      goto LABEL_16;
  }
  else if (v10)
  {
    goto LABEL_16;
  }
  if ((sub_1001CD100(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0
    && ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 41) ^ *(unsigned __int8 *)(a2 + 41)) & 1) == 0)
  {
    v14 = ((*(_BYTE *)(a1 + 42) & 1) == 0) ^ *(_BYTE *)(a2 + 42);
    return v14 & 1;
  }
LABEL_16:
  v14 = 0;
  return v14 & 1;
}

char *sub_1001DAF74(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v11;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE v24[24];
  _BYTE v25[24];
  int v26;
  int v27;

  v26 = a3;
  v27 = a5;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess(a4, v25, 0, 0);
    swift_beginAccess(a6, v24, 0, 0);
    v16 = 0;
    v17 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v18 = *(unsigned __int8 *)(a1 + v16 + 32);
      if ((sub_1001679D0(*(_BYTE *)(a1 + v16 + 32), a2) & 1) == 0)
      {
        if ((v26 & 1) != 0)
        {
          v19 = *(_QWORD *)(a4 + 24);
          swift_bridgeObjectRetain();
          v20 = sub_1001679D0(v18, v19);
          swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
          {
            if ((v20 & 1) != 0)
              goto LABEL_11;
            goto LABEL_4;
          }
        }
        else if ((v27 & 1) != 0)
        {
LABEL_11:
          __asm { BR              X9 }
        }
        if (((_DWORD)v18 != 5) | a10 & a11 & 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = sub_1000DF544(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
          v22 = *((_QWORD *)v17 + 2);
          v21 = *((_QWORD *)v17 + 3);
          if (v22 >= v21 >> 1)
            v17 = sub_1000DF544((char *)(v21 > 1), v22 + 1, 1, v17);
          *((_QWORD *)v17 + 2) = v22 + 1;
          v17[v22 + 32] = v18;
        }
      }
LABEL_4:
      if (v11 == ++v16)
      {
        swift_bridgeObjectRelease();
        return v17;
      }
    }
  }
  return (char *)_swiftEmptyArrayStorage;
}

unint64_t _s9MusicCore7LibraryO4MenuV10IdentifierO8rawValueAGSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FB880, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

void sub_1001DB474(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[24];

  v4 = a3 >> 1;
  if (a3 >> 1 != a2)
  {
    swift_beginAccess(a4, v13, 0, 0);
    v8 = v4;
    while (!__OFSUB__(v8--, 1))
    {
      if (v8 < a2 || v8 >= v4)
        goto LABEL_10;
      v10 = *a4;
      v11 = *(unsigned __int8 *)(a1 + v8);
      swift_bridgeObjectRetain();
      v12 = sub_10014ADC8(v11, v10);
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0 || v8 == a2)
        return;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

uint64_t sub_1001DB554(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  _BYTE v10[24];

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 - 1 <= result)
    return 13;
  v4 = result;
  if ((result & 0x8000000000000000) == 0)
  {
    if (v3 != result)
    {
      swift_bridgeObjectRetain();
      swift_beginAccess(a3, v10, 0, 0);
      while (1)
      {
        v5 = *(unsigned __int8 *)(a2 + v4 + 32);
        v8 = *a3;
        swift_bridgeObjectRetain();
        v9 = sub_10014ADC8(v5, v8);
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          break;
        if (v3 == ++v4)
        {
          v5 = 13;
          break;
        }
      }
      swift_bridgeObjectRelease();
      return v5;
    }
    return 13;
  }
  __break(1u);
  return result;
}

void sub_1001DB628(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t *v17;
  char *v18;
  int64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[24];
  _BYTE v42[24];
  _BYTE v43[24];

  v6 = *a1;
  swift_bridgeObjectRetain();
  v7 = sub_100192EEC(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    goto LABEL_48;
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  if (*(_QWORD *)(a2 + 16) < (unint64_t)v7)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v10 = a2 + 32;
  swift_bridgeObjectRetain();
  sub_1001DB474(a2 + 32, 0, (2 * v7) | 1, a3);
  if ((v12 & 1) != 0)
  {
    v10 = 13;
    goto LABEL_11;
  }
  if (v11 < 0 || v11 >= v7)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (!v3)
    v10 = *(unsigned __int8 *)(v10 + v11);
LABEL_11:
  swift_bridgeObjectRelease();
  v13 = sub_1001DB554(v7, a2, a3);
  v14 = v13;
  if (v10 == 13)
  {
    v15 = v13;
    v16 = v43;
    v17 = a3;
    if (v15 == 13)
    {
      swift_beginAccess(a3, v43, 1, 0);
      v18 = 0;
      v19 = 0;
LABEL_37:
      sub_1000E0C0C(v18, v19, v6);
      return;
    }
    goto LABEL_20;
  }
  v20 = v13;
  v21 = v43;
  v22 = a3;
  if (v20 != 13)
    goto LABEL_24;
  swift_beginAccess(a3, v43, 0, 0);
  v23 = *a3;
  swift_bridgeObjectRetain();
  v24 = sub_100192EEC(v10, v23);
  v26 = v25;
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v27 = __OFADD__(v24, 1);
  v14 = v24 + 1;
  if (v27)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  swift_beginAccess(a3, v42, 1, 0);
  if (*(_QWORD *)(*a3 + 16) < v14)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
LABEL_36:
    v18 = (char *)v14;
    v19 = v14;
    goto LABEL_37;
  }
  __break(1u);
LABEL_20:
  swift_beginAccess(v17, v16, 0, 0);
  v28 = *a3;
  swift_bridgeObjectRetain();
  v14 = sub_100192EEC(v14, v28);
  v10 = v29;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  swift_beginAccess(a3, v42, 1, 0);
  if (*(_QWORD *)(*a3 + 16) < v14)
    goto LABEL_42;
  if ((v14 & 0x8000000000000000) == 0)
    goto LABEL_36;
  __break(1u);
LABEL_24:
  swift_beginAccess(v22, v21, 0, 0);
  v30 = *a3;
  swift_bridgeObjectRetain();
  v31 = sub_100192EEC(v10, v30);
  v33 = v32;
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  swift_beginAccess(a3, v42, 0, 0);
  v34 = *a3;
  swift_bridgeObjectRetain();
  v35 = sub_100192EEC(v14, v34);
  v37 = v36;
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    if (v35 <= v31)
      v38 = v31;
    else
      v38 = v35;
    if (v35 >= v31)
      v39 = v31;
    else
      v39 = v35;
    v27 = __OFSUB__(v38, v39);
    v40 = v38 - v39;
    if (!v27)
    {
      v14 = v39 + v40 / 2;
      if (!__OFADD__(v39, v40 / 2))
      {
        swift_beginAccess(a3, v41, 1, 0);
        if (*(_QWORD *)(*a3 + 16) >= v14)
        {
          if ((v14 & 0x8000000000000000) == 0)
            goto LABEL_36;
          goto LABEL_47;
        }
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    goto LABEL_43;
  }
LABEL_52:
  __break(1u);
}

void sub_1001DB954(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unsigned __int8 v19;

  v7 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  v12 = 0;
  while (v10)
  {
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v19 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v14);
    sub_1001DB628(&v19, a2, a3);
    if (v3)
      goto LABEL_24;
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v11)
    goto LABEL_24;
  v16 = *(_QWORD *)(v7 + 8 * v12);
  if (v16)
  {
LABEL_17:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v11)
    goto LABEL_24;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v11)
    goto LABEL_24;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 3;
  if (v12 + 3 >= v11)
    goto LABEL_24;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  v18 = v12 + 4;
  if (v12 + 4 >= v11)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v7 + 8 * v18);
  v12 += 4;
  if (v16)
    goto LABEL_17;
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v11)
      goto LABEL_24;
    v16 = *(_QWORD *)(v7 + 8 * v12);
    ++v18;
    if (v16)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1001DBAD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v6 = (unint64_t *)result;
  v7 = 0;
  v8 = 0;
  v9 = a3 + 56;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_24;
      v17 = *(_QWORD *)(v9 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_24;
        v17 = *(_QWORD *)(v9 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    result = sub_1001679D0(*(_BYTE *)(*(_QWORD *)(a3 + 48) + v15), a4);
    if ((result & 1) != 0)
    {
      *(unint64_t *)((char *)v6 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (uint64_t)sub_1001D6068(v6, a2, v7, a3);
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_24;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v13)
      goto LABEL_24;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001DBC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  swift_bridgeObjectRetain_n(a2, 2);
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_1001DBAD4((uint64_t)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a3);
    swift_release(a1);
    swift_bridgeObjectRelease();
    v12 = swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v9, -1);
    bzero(v13, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = sub_1001DBAD4((uint64_t)v13, v8, a1, a3);
    swift_release(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_slowDealloc(v13, -1, -1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1001DBE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v6;
  char *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  char *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v28;
  char v29[24];
  _QWORD v30[2];
  char *v31;
  uint64_t v32;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (void **)(swift_bridgeObjectRetain() + 40);
    v7 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v8 = (uint64_t)*(v6 - 1);
      v9 = *v6;
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = v8;
      v10._object = v9;
      v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FB880, v10);
      swift_bridgeObjectRelease();
      if (v11 <= 0xC)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1000DF544(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v13 = *((_QWORD *)v7 + 2);
        v12 = *((_QWORD *)v7 + 3);
        if (v13 >= v12 >> 1)
          v7 = sub_1000DF544((char *)(v12 > 1), v13 + 1, 1, v7);
        *((_QWORD *)v7 + 2) = v13 + 1;
        v7[v13 + 32] = v11;
      }
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(a2 + 16);
    if (v14)
      goto LABEL_11;
LABEL_21:
    v16 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  v7 = (char *)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
    goto LABEL_21;
LABEL_11:
  swift_bridgeObjectRetain();
  v15 = (void **)(a2 + 40);
  v16 = (char *)_swiftEmptyArrayStorage;
  do
  {
    v17 = (uint64_t)*(v15 - 1);
    v18 = *v15;
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v17;
    v19._object = v18;
    v20 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FB880, v19);
    swift_bridgeObjectRelease();
    if (v20 <= 0xC)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = sub_1000DF544(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      v22 = *((_QWORD *)v16 + 2);
      v21 = *((_QWORD *)v16 + 3);
      if (v22 >= v21 >> 1)
        v16 = sub_1000DF544((char *)(v21 > 1), v22 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v22 + 1;
      v16[v22 + 32] = v20;
    }
    v15 += 2;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
LABEL_22:
  v23 = sub_100190A34((uint64_t)v16);
  swift_bridgeObjectRelease();
  v30[0] = v7;
  v30[1] = v23;
  v31 = v7;
  v32 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001D0D54(a3, a4);
  if (v28)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess(v30, v29, 0, 0);
    v25 = v31;
    if (*((_QWORD *)v31 + 2))
    {
      swift_bridgeObjectRetain();
      __asm { BR              X9 }
    }
    return v30[0];
  }
}

char *sub_1001DC36C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  char *v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v3 = sub_10000B4C8(&qword_100551D00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000D900(a1, v7);
  v9 = sub_1001DC890();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s4MenuV8RevisionV10CodingKeysON, &_s4MenuV8RevisionV10CodingKeysON, v9, v7, v8);
  if (v1)
  {
    sub_100011758(a1);
  }
  else
  {
    v10 = sub_10000B4C8(&qword_10054D598);
    v45 = 1;
    v11 = sub_1001DDDF4(&qword_100551D08, &qword_10054D598, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v10, &v45, v3, v10, v11);
    v38 = v11;
    v39 = v10;
    v40 = v4;
    v41 = a1;
    v42 = v6;
    v43 = v3;
    v13 = v44;
    v14 = *(_QWORD *)(v44 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = (void **)(v13 + 40);
      v16 = (char *)_swiftEmptyArrayStorage;
      do
      {
        v18 = (uint64_t)*(v15 - 1);
        v17 = *v15;
        swift_bridgeObjectRetain();
        v19._countAndFlagsBits = v18;
        v19._object = v17;
        v20 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FB880, v19);
        swift_bridgeObjectRelease();
        if (v20 <= 0xC)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            v16 = sub_1000DF544(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
          v22 = *((_QWORD *)v16 + 2);
          v21 = *((_QWORD *)v16 + 3);
          if (v22 >= v21 >> 1)
            v16 = sub_1000DF544((char *)(v21 > 1), v22 + 1, 1, v16);
          *((_QWORD *)v16 + 2) = v22 + 1;
          v16[v22 + 32] = v20;
        }
        v15 += 2;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v23 = sub_10000B4C8(&qword_10054F698);
    v45 = 0;
    v24 = sub_1001DDDF4(&qword_10054F798, &qword_10054F698, (const char *)&protocol conformance descriptor for <> Set<A>);
    swift_bridgeObjectRetain();
    v25 = v42;
    v26 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v23, &v45, v43, v23, v24);
    v27 = sub_1001CCB98(v44);
    swift_bridgeObjectRelease();
    v28 = sub_100190A34(v27);
    swift_bridgeObjectRelease();
    v45 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v39, &v45, v26, v39, v38);
    v29 = v44;
    v30 = *(_QWORD *)(v44 + 16);
    if (v30)
    {
      v39 = v28;
      swift_bridgeObjectRetain();
      v38 = v29;
      v31 = (void **)(v29 + 40);
      v6 = (char *)_swiftEmptyArrayStorage;
      do
      {
        v32 = (uint64_t)*(v31 - 1);
        v33 = *v31;
        swift_bridgeObjectRetain();
        v34._countAndFlagsBits = v32;
        v34._object = v33;
        v35 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FB880, v34);
        swift_bridgeObjectRelease();
        if (v35 <= 0xC)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
            v6 = sub_1000DF544(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
          v37 = *((_QWORD *)v6 + 2);
          v36 = *((_QWORD *)v6 + 3);
          if (v37 >= v36 >> 1)
            v6 = sub_1000DF544((char *)(v36 > 1), v37 + 1, 1, v6);
          *((_QWORD *)v6 + 2) = v37 + 1;
          v6[v37 + 32] = v35;
        }
        v31 += 2;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      v25 = v42;
      v26 = v43;
    }
    else
    {
      v6 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v26);
    swift_bridgeObjectRetain();
    sub_100011758(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t sub_1001DC890()
{
  unint64_t result;

  result = qword_100551C00;
  if (!qword_100551C00)
  {
    result = swift_getWitnessTable(byte_100430628, &_s4MenuV8RevisionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551C00);
  }
  return result;
}

unint64_t sub_1001DC8D4()
{
  unint64_t result;

  result = qword_100551C18;
  if (!qword_100551C18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Identifier, &type metadata for Library.Menu.Identifier);
    atomic_store(result, (unint64_t *)&qword_100551C18);
  }
  return result;
}

unint64_t sub_1001DC918()
{
  unint64_t result;

  result = qword_100551C30;
  if (!qword_100551C30)
  {
    result = swift_getWitnessTable(byte_100430600, &_s4MenuV8RevisionV7VersionVN);
    atomic_store(result, (unint64_t *)&qword_100551C30);
  }
  return result;
}

unint64_t sub_1001DC960()
{
  unint64_t result;

  result = qword_100551C38;
  if (!qword_100551C38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.SelectionState, &type metadata for Library.Menu.SelectionState);
    atomic_store(result, (unint64_t *)&qword_100551C38);
  }
  return result;
}

unint64_t sub_1001DC9A4(uint64_t a1)
{
  unint64_t result;

  result = sub_1001DC9C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001DC9C8()
{
  unint64_t result;

  result = qword_100551C70;
  if (!qword_100551C70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Request, &type metadata for Library.Menu.Request);
    atomic_store(result, (unint64_t *)&qword_100551C70);
  }
  return result;
}

unint64_t sub_1001DCA10()
{
  unint64_t result;

  result = qword_100551C78;
  if (!qword_100551C78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Identifier, &type metadata for Library.Menu.Identifier);
    atomic_store(result, (unint64_t *)&qword_100551C78);
  }
  return result;
}

uint64_t sub_1001DCA54()
{
  return sub_100012324(&qword_100551C80, &qword_100551C08, (const char *)&protocol conformance descriptor for [A]);
}

uint64_t _s4MenuVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

_QWORD *_s4MenuVwcp(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *_s4MenuVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[1];
  v6 = (void *)a1[1];
  a1[1] = (uint64_t)v5;
  v7 = v5;

  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  v11 = a2[5];
  v12 = a1[5];
  a1[5] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12);
  return a1;
}

_QWORD *_s4MenuVwta(_QWORD *a1, _OWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *a2;

  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for Library.Menu()
{
  return &type metadata for Library.Menu;
}

ValueMetadata *type metadata accessor for Library.Menu.SelectionState()
{
  return &type metadata for Library.Menu.SelectionState;
}

uint64_t _s4MenuV7RequestVwxx(uint64_t a1)
{
  sub_1001DAC50(*(void **)a1, *(_BYTE *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t _s4MenuV7RequestVwcp(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  void *v6;
  id v7;

  v4 = *(void **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1001DAC44(*(void **)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s4MenuV7RequestVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  id v10;

  v4 = *(void **)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1001DAC44(*(void **)a2, v5);
  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1001DAC50(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  v10 = v9;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  return a1;
}

__n128 _s4MenuV7RequestVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s4MenuV7RequestVwta(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(void **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1001DAC50(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  return a1;
}

uint64_t _s4MenuV7RequestVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 43))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s4MenuV7RequestVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 43) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 43) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Library.Menu.Request()
{
  return &type metadata for Library.Menu.Request;
}

uint64_t _s4MenuV7RequestV18MediaLibrarySourceOwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1001DAC44(*(void **)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void _s4MenuV7RequestV18MediaLibrarySourceOwxx(uint64_t a1)
{
  sub_1001DAC50(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t _s4MenuV7RequestV18MediaLibrarySourceOwca(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1001DAC44(*(void **)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1001DAC50(v5, v6);
  return a1;
}

uint64_t _s4MenuV7RequestV18MediaLibrarySourceOwta(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_1001DAC50(v5, v6);
  return a1;
}

uint64_t sub_1001DCFDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1001DCFE4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Library.Menu.Request.MediaLibrarySource()
{
  return &type metadata for Library.Menu.Request.MediaLibrarySource;
}

uint64_t _s4MenuV10IdentifierOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s4MenuV10IdentifierOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1001DD0DC + 4 * byte_1004301A9[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1001DD110 + 4 * byte_1004301A4[v4]))();
}

uint64_t sub_1001DD110(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD118(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DD120);
  return result;
}

uint64_t sub_1001DD12C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DD134);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1001DD138(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD140(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Library.Menu.Identifier()
{
  return &type metadata for Library.Menu.Identifier;
}

uint64_t _s4MenuV10IdentifierO8LocationOwet(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1001DD1AC + 4 * byte_1004301AE[v4]))();
  }
}

uint64_t _s4MenuV10IdentifierO8LocationOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001DD264 + 4 * byte_1004301B8[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001DD298 + 4 * byte_1004301B3[v5]))();
}

uint64_t sub_1001DD298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD2A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DD2A8);
  return result;
}

uint64_t sub_1001DD2B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DD2BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001DD2C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD2C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Library.Menu.Identifier.Location()
{
  return &type metadata for Library.Menu.Identifier.Location;
}

_QWORD *_s4MenuV8RevisionVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *_s4MenuV8RevisionVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  return a1;
}

_QWORD *_s4MenuV8RevisionVwta(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for Library.Menu.Revision()
{
  return &type metadata for Library.Menu.Revision;
}

uint64_t _s4MenuV8RevisionV7VersionVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

_QWORD *_s4MenuV8RevisionV7VersionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *_s4MenuV8RevisionV7VersionVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a2[1];
  v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

_QWORD *_s4MenuV8RevisionV7VersionVwta(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *_s4MenuV8RevisionV7VersionVMa()
{
  return &_s4MenuV8RevisionV7VersionVN;
}

uint64_t _s4MenuV8RevisionV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001DD580 + 4 * byte_1004301C2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001DD5B4 + 4 * byte_1004301BD[v4]))();
}

uint64_t sub_1001DD5B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD5BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DD5C4);
  return result;
}

uint64_t sub_1001DD5D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DD5D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001DD5DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD5E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4MenuV8RevisionV10CodingKeysOMa()
{
  return &_s4MenuV8RevisionV10CodingKeysON;
}

uint64_t _s4MenuV8RevisionVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t _s4MenuV9MoveErrorVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *_s4MenuV9MoveErrorVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  return a1;
}

__n128 _s4MenuV9MoveErrorVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s4MenuV9MoveErrorVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t _s4MenuV9MoveErrorVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s4MenuV9MoveErrorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s4MenuV9MoveErrorVMa()
{
  return &_s4MenuV9MoveErrorVN;
}

unint64_t sub_1001DD838()
{
  unint64_t result;

  result = qword_100551C88;
  if (!qword_100551C88)
  {
    result = swift_getWitnessTable(aY_24, &_s4MenuV8RevisionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551C88);
  }
  return result;
}

unint64_t sub_1001DD880()
{
  unint64_t result;

  result = qword_100551C90;
  if (!qword_100551C90)
  {
    result = swift_getWitnessTable(byte_1004304C0, &_s4MenuV8RevisionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551C90);
  }
  return result;
}

unint64_t sub_1001DD8C8()
{
  unint64_t result;

  result = qword_100551C98;
  if (!qword_100551C98)
  {
    result = swift_getWitnessTable(byte_1004304E8, &_s4MenuV8RevisionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551C98);
  }
  return result;
}

unint64_t sub_1001DD90C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FD780, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1001DD954()
{
  unint64_t result;

  result = qword_100551CA8;
  if (!qword_100551CA8)
  {
    result = swift_getWitnessTable(byte_1004308C8, &_s4MenuV8RevisionV7VersionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551CA8);
  }
  return result;
}

uint64_t sub_1001DD998(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEB00000000737265)
  {
    v5 = 0xEB00000000737265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEB00000000737265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64657463656C6573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64657463656C6573, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001DDAA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_10000B4C8(&qword_100551CB0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10000D900(a1, v7);
  v9 = sub_1001DD954();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s4MenuV8RevisionV7VersionV10CodingKeysON, &_s4MenuV8RevisionV7VersionV10CodingKeysON, v9, v7, v8);
  if (v1)
  {
    sub_100011758(a1);
  }
  else
  {
    v10 = sub_10000B4C8(&qword_100551C08);
    HIBYTE(v15) = 0;
    v11 = sub_100038110(&qword_100551CB8, &qword_100551C08, (uint64_t (*)(void))sub_1001DDCB4, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v10, (char *)&v15 + 7, v3, v10, v11);
    v7 = v16;
    v13 = sub_10000B4C8(&qword_100551C20);
    HIBYTE(v15) = 1;
    v14 = sub_100038110(&qword_100551CC8, &qword_100551C20, (uint64_t (*)(void))sub_1001DDCB4, (const char *)&protocol conformance descriptor for <> Set<A>);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v13, (char *)&v15 + 7, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100011758(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1001DDCB4()
{
  unint64_t result;

  result = qword_100551CC0;
  if (!qword_100551CC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Identifier, &type metadata for Library.Menu.Identifier);
    atomic_store(result, (unint64_t *)&qword_100551CC0);
  }
  return result;
}

unint64_t sub_1001DDCF8()
{
  unint64_t result;

  result = qword_100551CE8;
  if (!qword_100551CE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Library.Menu.Identifier, &type metadata for Library.Menu.Identifier);
    atomic_store(result, (unint64_t *)&qword_100551CE8);
  }
  return result;
}

uint64_t sub_1001DDD3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DDD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(_BYTE *, uint64_t, uint64_t);
  _BYTE v8[56];

  v6 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16);
  sub_1001DDDAC(a1, (uint64_t)v8);
  return v6(v8, a2, a3);
}

uint64_t sub_1001DDDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100551CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DDDF4(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;
  void *v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_100011650(a2);
    v7 = &protocol witness table for String;
    result = swift_getWitnessTable(a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001DDE4C()
{
  unint64_t result;

  result = qword_100551D10;
  if (!qword_100551D10)
  {
    result = swift_getWitnessTable(byte_1004305D8, &_s4MenuV8RevisionV7VersionVN);
    atomic_store(result, (unint64_t *)&qword_100551D10);
  }
  return result;
}

uint64_t sub_1001DDE90(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_1001DDEA8(uint64_t a1)
{
  sub_1001DAC44(*(void **)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

uint64_t sub_1001DDED4(uint64_t a1)
{
  sub_1001DAC50(*(void **)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

unint64_t sub_1001DDF00()
{
  unint64_t result;

  result = qword_100551D20;
  if (!qword_100551D20)
  {
    result = swift_getWitnessTable(byte_100430890, &_s9LegacyKeyON);
    atomic_store(result, (unint64_t *)&qword_100551D20);
  }
  return result;
}

unint64_t sub_1001DDF44()
{
  unint64_t result;

  result = qword_100551D28;
  if (!qword_100551D28)
  {
    result = swift_getWitnessTable(byte_100430850, &_s4MenuV8RevisionV16MigrationFailureON);
    atomic_store(result, (unint64_t *)&qword_100551D28);
  }
  return result;
}

uint64_t sub_1001DDF90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001DDFBC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DDFE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_1001DE00C()
{
  uint64_t v0;

  return sub_10024CEB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t _s4MenuV8RevisionV16MigrationFailureOwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *_s4MenuV8RevisionV16MigrationFailureOwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *_s4MenuV8RevisionV16MigrationFailureOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  v9 = a2[5];
  v10 = a1[5];
  a1[5] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  return a1;
}

_QWORD *_s4MenuV8RevisionV16MigrationFailureOwta(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *_s4MenuV8RevisionV16MigrationFailureOMa()
{
  return &_s4MenuV8RevisionV16MigrationFailureON;
}

ValueMetadata *_s9LegacyKeyOMa()
{
  return &_s9LegacyKeyON;
}

uint64_t _s4MenuV14SelectionStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001DE264 + 4 * byte_1004301CC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001DE298 + 4 * byte_1004301C7[v4]))();
}

uint64_t sub_1001DE298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE2A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DE2A8);
  return result;
}

uint64_t sub_1001DE2B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DE2BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001DE2C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE2C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s4MenuV8RevisionV7VersionV10CodingKeysOMa()
{
  return &_s4MenuV8RevisionV7VersionV10CodingKeysON;
}

uint64_t _s4MenuV9MoveErrorV7FailureOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0xF)
    goto LABEL_17;
  if (a2 + 241 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 241) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 241;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 241;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 241;
  }
LABEL_17:
  v6 = ((*a1 >> 3) & 0xE | (*a1 >> 7)) ^ 0xF;
  if (v6 >= 0xE)
    v6 = -1;
  return v6 + 1;
}

uint64_t _s4MenuV9MoveErrorV7FailureOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 241 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 241) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE)
    return ((uint64_t (*)(void))((char *)&loc_1001DE3D0 + 4 * byte_1004301D6[v4]))();
  *a1 = a2 - 15;
  return ((uint64_t (*)(void))((char *)sub_1001DE404 + 4 * byte_1004301D1[v4]))();
}

uint64_t sub_1001DE404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE40C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DE414);
  return result;
}

uint64_t sub_1001DE42C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DE434);
  *(_BYTE *)result = 16 * (((-a2 >> 1) & 7) - 8 * a2);
  return result;
}

uint64_t sub_1001DE438(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE440(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE44C(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

_BYTE *sub_1001DE458(_BYTE *result)
{
  *result &= ~0x80u;
  return result;
}

_BYTE *sub_1001DE468(_BYTE *result, char a2)
{
  *result = *result & 0xF | (a2 << 7);
  return result;
}

ValueMetadata *_s4MenuV9MoveErrorV7FailureOMa()
{
  return &_s4MenuV9MoveErrorV7FailureON;
}

unint64_t sub_1001DE490()
{
  unint64_t result;

  result = qword_100551D40;
  if (!qword_100551D40)
  {
    result = swift_getWitnessTable(aA_5, &_s4MenuV8RevisionV7VersionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551D40);
  }
  return result;
}

unint64_t sub_1001DE4D8()
{
  unint64_t result;

  result = qword_100551D48;
  if (!qword_100551D48)
  {
    result = swift_getWitnessTable("ٳ\r", &_s9LegacyKeyON);
    atomic_store(result, (unint64_t *)&qword_100551D48);
  }
  return result;
}

unint64_t sub_1001DE520()
{
  unint64_t result;

  result = qword_100551D50;
  if (!qword_100551D50)
  {
    result = swift_getWitnessTable(byte_100430730, &_s4MenuV8RevisionV7VersionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551D50);
  }
  return result;
}

unint64_t sub_1001DE568()
{
  unint64_t result;

  result = qword_100551D58;
  if (!qword_100551D58)
  {
    result = swift_getWitnessTable(aI_3, &_s4MenuV8RevisionV7VersionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100551D58);
  }
  return result;
}

void sub_1001DE5B0()
{
  qword_100561860 = (uint64_t)&off_1004FD838;
}

uint64_t SortOptions.SortType.localizedTitle.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  sub_1001DE630(a1);
  v1 = v6;
  v2 = v7;
  sub_10000D900(v5, v6);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  sub_100011758(v5);
  return v3;
}

void sub_1001DE630(char a1)
{
  __asm { BR              X10 }
}

void sub_1001DE65C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = &type metadata for PlaylistOrderSort;
  *(_QWORD *)(v0 + 32) = &off_10050C388;
  *(_BYTE *)v0 = 1;
}

id SortOptions.SortType.image.getter(char a1)
{
  id v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;

  v1 = 0;
  if (((1 << a1) & 0x1FC) == 0)
  {
    if (((1 << a1) & 0xC01) != 0)
    {
      v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 1);
      v3 = String._bridgeToObjectiveC()();
      v4 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v3);

      if (v4)
        goto LABEL_6;
    }
    else
    {
      v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 1);
      v5 = String._bridgeToObjectiveC()();
      v4 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v5);

      if (v4)
      {
LABEL_6:
        v1 = objc_msgSend(v4, "imageWithConfiguration:", v2);

        return v1;
      }
    }

    return 0;
  }
  return v1;
}

uint64_t SortOptions.SortType.sortDescriptors(for:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  sub_1001DE630(a2);
  v3 = v8;
  v4 = v9;
  sub_10000D900(v7, v8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
  sub_100011758(v7);
  return v5;
}

uint64_t sub_1001DE9AC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  LOBYTE(a1) = sub_100167D34(a1, v4);
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t SortOptions.SortType.reversed.getter(char a1)
{
  return byte_100430EA2[a1];
}

uint64_t SortOptions.SortType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001DEA4C + 4 * byte_10043098D[a1]))(0xD000000000000018, 0x8000000100446460);
}

uint64_t sub_1001DEA4C()
{
  uint64_t v0;

  return v0 + 7;
}

uint64_t sub_1001DEB5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = SortOptions.SortType.rawValue.getter(*a1);
  v5 = v4;
  v6 = SortOptions.SortType.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1001DEBE4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = SortOptions.SortType.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001DEC44(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = SortOptions.SortType.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001DEC84()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = SortOptions.SortType.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001DECE0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s9MusicCore11SortOptionsV0C4TypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001DED0C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = SortOptions.SortType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void SortOptions.ContentType.localizedTitle.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1001DEDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.LocalizationValue.init(stringLiteral:)(0x695620636973754DLL, 0xEC000000736F6564);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v0);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v5 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v6 = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, v5, v2, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  return v6;
}

_QWORD *SortOptions.ContentType.availableSortTypes(withSelectedType:)()
{
  uint64_t v0;

  if (qword_10054BC58 != -1)
    swift_once(&qword_10054BC58, sub_1001DE5B0);
  v0 = qword_100561860;
  if (*(_QWORD *)(qword_100561860 + 16))
  {
    swift_bridgeObjectRetain_n(qword_100561860, 2);
    __asm { BR              X8 }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t SortOptions.ContentType.defaultSortType.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001DF51C + 4 * byte_1004309C5[a1 >> 6]))(8);
}

uint64_t sub_1001DF51C@<X0>(char a1@<W8>)
{
  if ((a1 & 1) != 0)
    return 2;
  else
    return 6;
}

uint64_t sub_1001DF538@<X0>(char a1@<W8>)
{
  return 0x206u >> (8 * (a1 + 64));
}

uint64_t sub_1001DF550(unsigned __int8 a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  Swift::String v8;
  Swift::Int v10;
  _QWORD v11[9];

  v2 = 0x676E6F5374726F73;
  v3 = a1 >> 6;
  if (a1 != 192 || v3 != 3)
  {
    Hasher.init(_seed:)(v11);
    v4 = SortOptions.ContentType.identifier.getter(a1);
    v6 = v5;
    String.hash(into:)(v11, v4, v5);
    swift_bridgeObjectRelease();
    v7 = Hasher._finalize()();
    Hasher.init(_seed:)(v11);
    String.hash(into:)(v11, 0x73676E6F73, 0xE500000000000000);
    if (v7 != Hasher._finalize()())
    {
      v2 = 0x75626C4174726F53;
      if (v3 != 1)
      {
        Hasher.init(_seed:)(v11);
        String.hash(into:)(v11, v4, v6);
        swift_bridgeObjectRelease();
        v10 = Hasher._finalize()();
        Hasher.init(_seed:)(v11);
        String.hash(into:)(v11, 0x736D75626C61, 0xE600000000000000);
        if (v10 == Hasher._finalize()())
          return v2;
        goto LABEL_6;
      }
      if ((a1 & 0x3F) != 0)
      {
LABEL_6:
        v11[0] = v4;
        v11[1] = v6;
        swift_bridgeObjectRetain();
        v8._countAndFlagsBits = 0x6570795474726F53;
        v8._object = (void *)0xE800000000000000;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        return v11[0];
      }
    }
  }
  return v2;
}

uint64_t SortOptions.ContentType.identifier.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_1001DF71C + 4 * byte_1004309C9[a1 >> 6]))();
}

uint64_t sub_1001DF71C@<X0>(char a1@<W8>)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 0x646956636973756DLL;
}

uint64_t sub_1001DF764@<X0>(char a1@<W8>)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001DF790 + 4 * byte_1004309CD[a1 & 0x3F]))(0x736D75626C61, 0xE600000000000000);
}

uint64_t sub_1001DF790()
{
  return 0x6C41747369747261;
}

uint64_t sub_1001DF7B0@<X0>(char a1@<W8>)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000018;
  else
    return 0x7473696C79616C70;
}

uint64_t sub_1001DF7F4@<X0>(int a1@<W8>)
{
  uint64_t v1;

  v1 = 0x736569766F6DLL;
  if (a1 != 193)
    v1 = 0x7473696C79616C70;
  if (a1 == 192)
    return 0x73676E6F73;
  else
    return v1;
}

unint64_t sub_1001DF850()
{
  return 0xD000000000000016;
}

uint64_t sub_1001DF870()
{
  return 0x7265736F706D6F63;
}

uint64_t sub_1001DF894()
{
  return 0x626C4165726E6567;
}

Swift::String __swiftcall SortOptions.ContentType.storageKey(using:)(Swift::String_optional using)
{
  unsigned __int8 v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String result;
  uint64_t v10;
  void *v11;

  if (using.value._object)
  {
    object = using.value._object;
    countAndFlagsBits = using.value._countAndFlagsBits;
    v10 = sub_1001DF550(v1);
    v11 = v4;
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = 45;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = countAndFlagsBits;
    v6._object = object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7 = v10;
    v8 = v11;
  }
  else
  {
    v7 = sub_1001DF550(v1);
  }
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

void SortOptions.ContentType.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1001DF97C@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  unint64_t v2;
  unint64_t v3;

  if ((a2 & 1) != 0)
    v2 = 0xD000000000000011;
  else
    v2 = 0x646956636973756DLL;
  if ((a2 & 1) != 0)
    v3 = 0x8000000100449D10;
  else
    v3 = 0xEB00000000736F65;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

void sub_1001DFAC4()
{
  JUMPOUT(0x1001DFAACLL);
}

void sub_1001DFAE4()
{
  JUMPOUT(0x1001DFAACLL);
}

void sub_1001DFB08()
{
  JUMPOUT(0x1001DFAACLL);
}

Swift::Int SortOptions.ContentType.hashValue.getter(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v2 = SortOptions.ContentType.identifier.getter(a1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1001DFB8C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = SortOptions.ContentType.identifier.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001DFBEC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = SortOptions.ContentType.identifier.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001DFC2C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = SortOptions.ContentType.identifier.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001DFC88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return _s9MusicCore11SortOptionsV11ContentTypeO2eeoiySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t static SortOptions.ViewType.Albums.preferredItemSortDescriptors.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428000;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongDiscNumber);
  v2 = objc_allocWithZone((Class)NSSortDescriptor);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithKey:ascending:", v3, 1);

  *(_QWORD *)(v1 + 32) = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTrackNumber);
  v5 = objc_allocWithZone((Class)NSSortDescriptor);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, "initWithKey:ascending:", v6, 1);

  *(_QWORD *)(v1 + 40) = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTitle);
  v8 = objc_allocWithZone((Class)NSSortDescriptor);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, "initWithKey:ascending:", v9, 1);

  *(_QWORD *)(v1 + 48) = v10;
  specialized Array._endMutation()(v11);
  return v1;
}

uint64_t sub_1001DFE18(unsigned __int8 a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t result;

  if (a1 == 194)
  {
    v3 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v4 = swift_allocObject(v3, 40, 7);
    *(_OWORD *)(v4 + 16) = xmmword_100424B90;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistEntryPosition);
    v5 = objc_allocWithZone((Class)NSSortDescriptor);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v5, "initWithKey:ascending:", v6, a2 & 1);

    *(_QWORD *)(v4 + 32) = v7;
    specialized Array._endMutation()(v8);
    return v4;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, 336, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DFF40(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x7473696C79616C50, 0xEE00726564724F20);
}

void *sub_1001DFF64()
{
  return sub_100174F88((uint64_t)&off_1004FD908);
}

uint64_t sub_1001DFF70(unsigned __int8 a1)
{
  char *v1;

  return sub_1001DFE18(a1, *v1);
}

uint64_t sub_1001DFF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t result;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428070;
  v2 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100424BA0;
  v4 = MPModelRelationshipPlaylistEntrySong;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntrySong);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTitle);
  *(_QWORD *)(v3 + 56) = v6;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = (void *)objc_opt_self(MPModelSortDescriptor);
  v9 = objc_msgSend(v8, "sortDescriptorWithKeyPath:ascending:", isa, 1);

  *(_QWORD *)(v1 + 32) = v9;
  v10 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100427490;
  *(_QWORD *)(v10 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongArtist);
  *(_QWORD *)(v10 + 56) = v12;
  *(_QWORD *)(v10 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
  *(_QWORD *)(v10 + 72) = v13;
  v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v8, "sortDescriptorWithKeyPath:ascending:", v14, 1);

  *(_QWORD *)(v1 + 40) = v15;
  result = specialized Array._endMutation()(v16);
  qword_100561868 = v1;
  return result;
}

uint64_t sub_1001E0134(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x656C746954, 0xE500000000000000);
}

void *sub_1001E0148()
{
  return sub_100174F88((uint64_t)&off_1004FDA00);
}

uint64_t sub_1001E0158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  id v15;
  id v16;
  NSString v17;
  id v18;
  id v19;
  NSString v20;
  id v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t result;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428080;
  v2 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v3 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100427490;
  v4 = MPModelRelationshipSongAlbum;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongAlbum);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipAlbumArtist);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
  *(_QWORD *)(v3 + 72) = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = (void *)objc_opt_self(MPModelSortDescriptor);
  v10 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", isa, 1);

  *(_QWORD *)(v1 + 32) = v10;
  v11 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100424BA0;
  *(_QWORD *)(v11 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumTitle);
  *(_QWORD *)(v11 + 56) = v13;
  v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", v14, 1);

  *(_QWORD *)(v1 + 40) = v15;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongDiscNumber);
  v16 = objc_allocWithZone((Class)NSSortDescriptor);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v16, "initWithKey:ascending:", v17, 1);

  *(_QWORD *)(v1 + 48) = v18;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTrackNumber);
  v19 = objc_allocWithZone((Class)NSSortDescriptor);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v19, "initWithKey:ascending:", v20, 1);

  *(_QWORD *)(v1 + 56) = v21;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTitle);
  v22 = objc_allocWithZone((Class)NSSortDescriptor);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v22, "initWithKey:ascending:", v23, 1);

  *(_QWORD *)(v1 + 64) = v24;
  result = specialized Array._endMutation()(v25);
  qword_100561870 = v1;
  return result;
}

uint64_t sub_1001E0430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t result;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428070;
  v2 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100424BA0;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipAlbumArtist);
  *(_QWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
  *(_QWORD *)(v3 + 56) = v5;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(MPModelSortDescriptor), "sortDescriptorWithKeyPath:ascending:", isa, 1);

  *(_QWORD *)(v1 + 32) = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumTitle);
  v8 = objc_allocWithZone((Class)NSSortDescriptor);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, "initWithKey:ascending:", v9, 1);

  *(_QWORD *)(v1 + 40) = v10;
  result = specialized Array._endMutation()(v11);
  qword_100561878 = v1;
  return result;
}

uint64_t sub_1001E059C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  uint64_t v22;
  uint64_t result;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428000;
  v2 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v3 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100427490;
  v4 = MPModelRelationshipPlaylistEntrySong;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntrySong);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongArtist);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyArtistName);
  *(_QWORD *)(v3 + 72) = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = (void *)objc_opt_self(MPModelSortDescriptor);
  v10 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", isa, 1);

  *(_QWORD *)(v1 + 32) = v10;
  v11 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100427490;
  *(_QWORD *)(v11 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongAlbum);
  *(_QWORD *)(v11 + 56) = v13;
  *(_QWORD *)(v11 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumTitle);
  *(_QWORD *)(v11 + 72) = v14;
  v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", v15, 1);

  *(_QWORD *)(v1 + 40) = v16;
  v17 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100424BA0;
  *(_QWORD *)(v17 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTrackNumber);
  *(_QWORD *)(v17 + 56) = v19;
  v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", v20, 1);

  *(_QWORD *)(v1 + 48) = v21;
  result = specialized Array._endMutation()(v22);
  qword_100561880 = v1;
  return result;
}

uint64_t sub_1001E07EC(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x747369747241, 0xE600000000000000);
}

void *sub_1001E0800()
{
  return sub_100174F88((uint64_t)&off_1004FD8B8);
}

uint64_t sub_1001E0810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t result;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428070;
  v2 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  v3 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100427490;
  v4 = MPModelRelationshipPlaylistEntrySong;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntrySong);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongAlbum);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumTitle);
  *(_QWORD *)(v3 + 72) = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = (void *)objc_opt_self(MPModelSortDescriptor);
  v10 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", isa, 1);

  *(_QWORD *)(v1 + 32) = v10;
  v11 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100424BA0;
  *(_QWORD *)(v11 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTrackNumber);
  *(_QWORD *)(v11 + 56) = v13;
  v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v9, "sortDescriptorWithKeyPath:ascending:", v14, 1);

  *(_QWORD *)(v1 + 40) = v15;
  result = specialized Array._endMutation()(v16);
  qword_100561888 = v1;
  return result;
}

uint64_t sub_1001E09CC(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x6D75626C41, 0xE500000000000000);
}

void *sub_1001E09E0()
{
  return sub_100174F88((uint64_t)&off_1004FD9D8);
}

uint64_t sub_1001E09F0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t result;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100428080;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongLibraryAddedDate);
  v2 = objc_allocWithZone((Class)NSSortDescriptor);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithKey:ascending:", v3, 0);

  *(_QWORD *)(v1 + 32) = v4;
  v5 = MPModelPropertySongDiscNumber;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongDiscNumber);
  v6 = objc_allocWithZone((Class)NSSortDescriptor);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, "initWithKey:ascending:", v7, 1);

  *(_QWORD *)(v1 + 40) = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = objc_allocWithZone((Class)NSSortDescriptor);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, "initWithKey:ascending:", v10, 1);

  *(_QWORD *)(v1 + 48) = v11;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTrackNumber);
  v12 = objc_allocWithZone((Class)NSSortDescriptor);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, "initWithKey:ascending:", v13, 1);

  *(_QWORD *)(v1 + 56) = v14;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTitle);
  v15 = objc_allocWithZone((Class)NSSortDescriptor);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v15, "initWithKey:ascending:", v16, 1);

  *(_QWORD *)(v1 + 64) = v17;
  result = specialized Array._endMutation()(v18);
  qword_100561890 = v1;
  return result;
}

uint64_t sub_1001E0C38(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x796C746E65636552, 0xEE00646564644120);
}

void *sub_1001E0C5C()
{
  return sub_100174F88((uint64_t)&off_1004FD930);
}

uint64_t sub_1001E0C6C(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x796C746E65636552, 0xEF646579616C5020);
}

void *sub_1001E0C90()
{
  return sub_100174F88((uint64_t)&off_1004FD960);
}

uint64_t sub_1001E0C9C(char a1)
{
  return sub_1001E2358(a1, &MPModelPropertyPlaylistLastDevicePlaybackDate, 516);
}

uint64_t sub_1001E0CBC(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 0x7473696C79616C50, 0xED00006570795420);
}

void *sub_1001E0CE0()
{
  return sub_100174F88((uint64_t)&off_1004FD8E0);
}

_QWORD *sub_1001E0CEC(char a1)
{
  _QWORD *result;

  if ((a1 & 0xC0) == 0x80)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, 538, 0);
  __break(1u);
  return result;
}

void *sub_1001E0D60()
{
  return sub_100174F88((uint64_t)&off_1004FD988);
}

uint64_t sub_1001E0D6C(char a1)
{
  return sub_1001E2358(a1, &MPModelPropertyPlaylistLastModifiedDateComponents, 560);
}

uint64_t sub_1001E0D8C(unsigned __int8 a1, char a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t result;

  v3 = a1 >> 6;
  if (!(a1 >> 6))
  {
    v10 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v5 = swift_allocObject(v10, 48, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100428070;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongYear);
    v11 = objc_allocWithZone((Class)NSSortDescriptor);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, "initWithKey:ascending:", v12, a2 & 1);

    *(_QWORD *)(v5 + 32) = v13;
    v9 = &MPModelPropertySongTitle;
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    v4 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v5 = swift_allocObject(v4, 48, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100428070;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumYear);
    v6 = objc_allocWithZone((Class)NSSortDescriptor);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, "initWithKey:ascending:", v7, a2 & 1);

    *(_QWORD *)(v5 + 32) = v8;
    v9 = &MPModelPropertyAlbumTitle;
LABEL_8:
    static String._unconditionallyBridgeFromObjectiveC(_:)(*v9);
    v18 = objc_allocWithZone((Class)NSSortDescriptor);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v18, "initWithKey:ascending:", v19, 1);

    *(_QWORD *)(v5 + 40) = v20;
    specialized Array._endMutation()(v21);
    return v5;
  }
  if (v3 == 3 && a1 == 193)
  {
    v14 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v5 = swift_allocObject(v14, 48, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100428070;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyMovieReleaseDate);
    v15 = objc_allocWithZone((Class)NSSortDescriptor);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v15, "initWithKey:ascending:", v16, a2 & 1);

    *(_QWORD *)(v5 + 32) = v17;
    v9 = &MPModelPropertyMovieTitle;
    goto LABEL_8;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, 598, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001E1060(uint64_t a1, uint64_t a2)
{
  return sub_1000FAF44(a1, a2, 1918985561, 0xE400000000000000);
}

void *sub_1001E1070()
{
  return sub_100174F88((uint64_t)&off_1004FD9B0);
}

uint64_t sub_1001E107C(unsigned __int8 a1)
{
  char *v1;

  return sub_1001E0D8C(a1, *v1);
}

uint64_t sub_1001E1084()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0x20657361656C6552, 0xEC00000065746144);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v10 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

uint64_t Gradient.colors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001E11FC(unsigned __int8 a1)
{
  char *v1;

  return sub_1001E1F68(a1, *v1);
}

unint64_t NSUserDefaults.sortType(for:keyDomain:)(unsigned __int8 a1, uint64_t a2, void *a3)
{
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *object;
  void *v11;
  unint64_t v12;
  unint64_t result;
  Swift::String v14;
  __int128 v15;
  uint64_t v16;

  if (a3)
  {
    v14._countAndFlagsBits = sub_1001DF550(a1);
    v14._object = v6;
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 45;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = a2;
    v8._object = a3;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
  }
  else
  {
    countAndFlagsBits = sub_1001DF550(a1);
    object = v11;
  }
  v14._countAndFlagsBits = countAndFlagsBits;
  v14._object = object;
  v12 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)&v14, (uint64_t)&type metadata for String, v12, &v15);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    sub_100139528((uint64_t)&v15);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v14, &v15, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0
    || (result = _s9MusicCore11SortOptionsV0C4TypeO8rawValueAESgSS_tcfC_0(v14), result == 13))
  {
LABEL_9:
    __asm { BR              X10 }
  }
  return result;
}

void NSUserDefaults.setSortType(_:for:keyDomain:)(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  __CFNotificationCenter *v29;
  __CFString *v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  if (a4)
  {
    v32 = sub_1001DF550(a2);
    v33 = v8;
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 45;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = a3;
    v10._object = a4;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11 = v32;
    v12 = v33;
  }
  else
  {
    v11 = sub_1001DF550(a2);
    v12 = v13;
  }
  if ((a2 & 0xC0) == 0x40)
  {
    v14 = (a2 & 0x3F) == 0;
    if (a4)
      goto LABEL_12;
  }
  else
  {
    Hasher.init(_seed:)(&v32);
    v15 = SortOptions.ContentType.identifier.getter(a2);
    String.hash(into:)(&v32, v15, v16);
    swift_bridgeObjectRelease();
    v17 = Hasher._finalize()();
    Hasher.init(_seed:)(&v32);
    String.hash(into:)(&v32, 0x736D75626C61, 0xE600000000000000);
    v14 = v17 == Hasher._finalize()();
    if (a4)
    {
LABEL_12:
      v23 = SortOptions.SortType.rawValue.getter(a1);
      v24 = v26;
      v25 = 0;
      goto LABEL_14;
    }
  }
  if (!v14)
    goto LABEL_12;
  v18 = NSUserDefaults.sortType(for:keyDomain:)(a2, a3, 0);
  v19 = SortOptions.SortType.rawValue.getter(v18);
  v21 = v20;
  v23 = SortOptions.SortType.rawValue.getter(a1);
  v24 = v22;
  if (v19 == v23 && v21 == v22)
  {
    swift_bridgeObjectRelease_n(v21, 2);
    v25 = 0;
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v27 ^ 1;
  }
LABEL_14:
  v34 = &type metadata for String;
  v32 = v23;
  v33 = v24;
  v31[0] = v11;
  v31[1] = v12;
  v28 = sub_1000AE4D8();
  NSUserDefaults.subscript.setter((uint64_t)&v32, (uint64_t)v31, (uint64_t)&type metadata for String, v28);
  if ((v25 & 1) != 0)
  {
    v29 = CFNotificationCenterGetDarwinNotifyCenter();
    v30 = (__CFString *)String._bridgeToObjectiveC()();
    CFNotificationCenterPostNotification(v29, v30, 0, 0, 1u);

  }
}

id MPModelPlaylist.canBeSorted.getter()
{
  void *v0;
  id result;

  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyAlbumLibraryAdded) & 1) != 0)
    return objc_msgSend(v0, "isLibraryAdded");
  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyMovieLibraryAdded) & 1) != 0)
    return objc_msgSend(v0, "isLibraryAdded");
  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistLibraryAdded) & 1) != 0)
    return objc_msgSend(v0, "isLibraryAdded");
  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertySongLibraryAdded) & 1) != 0)
    return objc_msgSend(v0, "isLibraryAdded");
  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyTVEpisodeLibraryAdded) & 1) != 0)
    return objc_msgSend(v0, "isLibraryAdded");
  if ((objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyTVSeasonLibraryAdded) & 1) != 0)
    return objc_msgSend(v0, "isLibraryAdded");
  result = objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyArtistLibraryAdded);
  if ((_DWORD)result)
    return objc_msgSend(v0, "isLibraryAdded");
  return result;
}

uint64_t MPModelPlaylist.sortStorageKeyDomain.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v12[2];
  _QWORD v13[4];

  v1 = objc_msgSend(v0, "identifiers");
  v2 = objc_msgSend(v1, "universalStore");

  if (!v2)
    goto LABEL_8;
  v3 = objc_msgSend(v2, "globalPlaylistID");
  swift_unknownObjectRelease(v2);
  if (!v3)
    goto LABEL_8;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v10 = objc_msgSend(v0, "identifiers");
    v9 = MPIdentifierSet.bestLibraryIdentifier.getter();

    return v9;
  }
  v13[2] = v4;
  v13[3] = v6;
  v13[0] = 46;
  v13[1] = 0xE100000000000000;
  v12[0] = 45;
  v12[1] = 0xE100000000000000;
  v8 = sub_1000AE4D8();
  v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v13, v12, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v8, v8, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t MPModelPlaylist.preferredTracklistSortDescriptors.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  if ((MPModelPlaylist.canBeSorted.getter() & 1) == 0)
    return 0;
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = objc_msgSend(v0, "sortStorageKeyDomain");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v8 = NSUserDefaults.sortType(for:keyDomain:)(0xC2u, v4, v6);

  swift_bridgeObjectRelease();
  sub_1001DE630(v8);
  v9 = v13;
  v10 = v14;
  sub_10000D900(v12, v13);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(194, v9, v10);
  sub_100011758(v12);
  return v7;
}

uint64_t sub_1001E1A08()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.sortOptions);
  sub_10000D78C(v0, (uint64_t)static Logger.sortOptions);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x6974704F74726F53, 0xEB00000000736E6FLL);
}

uint64_t Logger.sortOptions.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10054BC90 != -1)
    swift_once(&qword_10054BC90, sub_1001E1A08);
  v0 = type metadata accessor for Logger(0);
  return sub_10000D78C(v0, (uint64_t)static Logger.sortOptions);
}

uint64_t static Logger.sortOptions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10054BC90 != -1)
    swift_once(&qword_10054BC90, sub_1001E1A08);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Logger.sortOptions);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t _s9MusicCore11SortOptionsV11ContentTypeO2eeoiySbAE_AEtFZ_0(int a1, int a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 6;
  if (a1 >> 6)
  {
    if (v4 == 1)
    {
      if ((a2 & 0xC0) == 0x40)
        return ((a2 ^ a1) & 0x3F) == 0;
    }
    else if (v4 == 3 && a1 == 192 && a2 == 192)
    {
      return 1;
    }
  }
  else if (a2 < 0x40u)
  {
    return ((a2 ^ a1) & 1) == 0;
  }
  Hasher.init(_seed:)(v12);
  v7 = SortOptions.ContentType.identifier.getter(v3);
  String.hash(into:)(v12, v7, v8);
  swift_bridgeObjectRelease();
  v9 = Hasher._finalize()();
  Hasher.init(_seed:)(v12);
  v10 = SortOptions.ContentType.identifier.getter(v2);
  String.hash(into:)(v12, v10, v11);
  swift_bridgeObjectRelease();
  return v9 == Hasher._finalize()();
}

uint64_t sub_1001E1C58()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010044C090);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v10 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v11 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, v10, v2, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  return v11;
}

uint64_t sub_1001E1DC4(unsigned __int8 a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = a1 >> 6;
  if (!(a1 >> 6))
    goto LABEL_8;
  if (v1 == 1)
  {
    if (qword_10054BC70 != -1)
      swift_once(&qword_10054BC70, sub_1001E0430);
    v2 = qword_100561878;
LABEL_11:
    swift_bridgeObjectRetain();
    return v2;
  }
  if (v1 != 3)
    goto LABEL_22;
  if (a1 == 192)
  {
LABEL_8:
    if (qword_10054BC68 != -1)
      swift_once(&qword_10054BC68, sub_1001E0158);
    v2 = qword_100561870;
    goto LABEL_11;
  }
  if (a1 == 194)
  {
    if (qword_10054BC78 != -1)
      swift_once(&qword_10054BC78, sub_1001E059C);
    v2 = qword_100561880;
    if (!((unint64_t)qword_100561880 >> 62))
    {
      v4 = swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
      sub_1001E3018();
      return v2;
    }
    if (qword_100561880 < 0)
      v5 = qword_100561880;
    else
      v5 = qword_100561880 & 0xFFFFFFFFFFFFFF8;
    v6 = sub_1001E3018();
    swift_bridgeObjectRetain();
    v7 = _bridgeCocoaArray<A>(_:)(v5, v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
LABEL_22:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, 423, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E1F68(unsigned __int8 a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  id v18;
  uint64_t v19;
  uint64_t result;

  if (a1 == 194)
  {
    v3 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v4 = swift_allocObject(v3, 48, 7);
    *(_OWORD *)(v4 + 16) = xmmword_100428070;
    v5 = sub_10000B4C8((uint64_t *)&unk_100550B40);
    v6 = swift_allocObject(v5, 80, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100427490;
    v7 = MPModelRelationshipPlaylistEntrySong;
    *(_QWORD *)(v6 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipPlaylistEntrySong);
    *(_QWORD *)(v6 + 40) = v8;
    *(_QWORD *)(v6 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipSongAlbum);
    *(_QWORD *)(v6 + 56) = v9;
    *(_QWORD *)(v6 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumReleaseDateComponents);
    *(_QWORD *)(v6 + 72) = v10;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v12 = (void *)objc_opt_self(MPModelSortDescriptor);
    v13 = objc_msgSend(v12, "sortDescriptorWithKeyPath:ascending:", isa, a2 & 1);

    *(_QWORD *)(v4 + 32) = v13;
    v14 = swift_allocObject(v5, 64, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100424BA0;
    *(_QWORD *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    *(_QWORD *)(v14 + 40) = v15;
    *(_QWORD *)(v14 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongTitle);
    *(_QWORD *)(v14 + 56) = v16;
    v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v12, "sortDescriptorWithKeyPath:ascending:", v17, 1);

    *(_QWORD *)(v4 + 40) = v18;
    specialized Array._endMutation()(v19);
    return v4;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, 622, 0);
    __break(1u);
  }
  return result;
}

void sub_1001E2178(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001E21A8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;

  v0 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100424B90;
  static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyAlbumLibraryAddedDate);
  v2 = objc_allocWithZone((Class)NSSortDescriptor);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithKey:ascending:", v3, 0);

  *(_QWORD *)(v1 + 32) = v4;
  specialized Array._endMutation()(v5);
  return v1;
}

uint64_t sub_1001E2358(char a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t result;

  if ((a1 & 0xC0) == 0x80)
  {
    v4 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100424B90;
    static String._unconditionallyBridgeFromObjectiveC(_:)(*a2);
    v6 = objc_allocWithZone((Class)NSSortDescriptor);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, "initWithKey:ascending:", v7, 0);

    *(_QWORD *)(v5 + 32) = v8;
    specialized Array._endMutation()(v9);
    return v5;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, a3, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E246C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 == 194)
  {
    if (qword_10054BC80 != -1)
      swift_once(&qword_10054BC80, sub_1001E0810);
    v1 = qword_100561888;
    if ((unint64_t)qword_100561888 >> 62)
    {
      if (qword_100561888 < 0)
        v4 = qword_100561888;
      else
        v4 = qword_100561888 & 0xFFFFFFFFFFFFFF8;
      v5 = sub_1001E3018();
      swift_bridgeObjectRetain();
      v6 = _bridgeCocoaArray<A>(_:)(v4, v5);
      swift_bridgeObjectRelease();
      return v6;
    }
    else
    {
      v2 = swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v2);
      sub_1001E3018();
      return v1;
    }
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x800000010044C060, "MusicCore/SortOptions.swift", 27, 2, 449, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001E2580(unsigned __int8 a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = a1 >> 6;
  if (v1 < 2)
    return _swiftEmptyArrayStorage;
  if (v1 == 2)
  {
    v2 = sub_10000B4C8((uint64_t *)&unk_100550D50);
    v3 = swift_allocObject(v2, 40, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100424B90;
    static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertyPlaylistName);
    v4 = objc_allocWithZone((Class)NSSortDescriptor);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v4, "initWithKey:ascending:", v5, 1);

    *(_QWORD *)(v3 + 32) = v6;
    specialized Array._endMutation()(v7);
    return (_QWORD *)v3;
  }
  if ((a1 & 0xFE) == 0xC0)
    return _swiftEmptyArrayStorage;
  if (qword_10054BC60 != -1)
    swift_once(&qword_10054BC60, sub_1001DFF78);
  v3 = qword_100561868;
  if (!((unint64_t)qword_100561868 >> 62))
  {
    v9 = swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v9);
    sub_1001E3018();
    return (_QWORD *)v3;
  }
  if (qword_100561868 < 0)
    v10 = qword_100561868;
  else
    v10 = qword_100561868 & 0xFFFFFFFFFFFFFF8;
  v11 = sub_1001E3018();
  swift_bridgeObjectRetain();
  v12 = _bridgeCocoaArray<A>(_:)(v10, v11);
  swift_bridgeObjectRelease();
  return (_QWORD *)v12;
}

unint64_t _s9MusicCore11SortOptionsV0C4TypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004FDA30, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

unint64_t sub_1001E2754()
{
  unint64_t result;

  result = qword_100551D60;
  if (!qword_100551D60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortOptions.SortType, &type metadata for SortOptions.SortType);
    atomic_store(result, (unint64_t *)&qword_100551D60);
  }
  return result;
}

unint64_t sub_1001E279C()
{
  unint64_t result;

  result = qword_100551D68;
  if (!qword_100551D68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortOptions.ContentType, &type metadata for SortOptions.ContentType);
    atomic_store(result, (unint64_t *)&qword_100551D68);
  }
  return result;
}

unint64_t sub_1001E27E4()
{
  unint64_t result;

  result = qword_100551D70;
  if (!qword_100551D70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortOptions.ViewType.Albums, &type metadata for SortOptions.ViewType.Albums);
    atomic_store(result, (unint64_t *)&qword_100551D70);
  }
  return result;
}

unint64_t sub_1001E282C()
{
  unint64_t result;

  result = qword_100551D78;
  if (!qword_100551D78)
  {
    result = swift_getWitnessTable("ٸ\r", &type metadata for SortOptions.ViewType.MusicVideos);
    atomic_store(result, (unint64_t *)&qword_100551D78);
  }
  return result;
}

unint64_t sub_1001E2874()
{
  unint64_t result;

  result = qword_100551D80;
  if (!qword_100551D80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortOptions.ViewType.Playlists, &type metadata for SortOptions.ViewType.Playlists);
    atomic_store(result, (unint64_t *)&qword_100551D80);
  }
  return result;
}

unint64_t sub_1001E28BC()
{
  unint64_t result;

  result = qword_100551D88;
  if (!qword_100551D88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SortOptions.ViewType.Detail, &type metadata for SortOptions.ViewType.Detail);
    atomic_store(result, (unint64_t *)&qword_100551D88);
  }
  return result;
}

ValueMetadata *type metadata accessor for SortOptions()
{
  return &type metadata for SortOptions;
}

uint64_t storeEnumTagSinglePayload for SortOptions.SortType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1001E295C + 4 * byte_1004309E8[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1001E2990 + 4 * byte_1004309E3[v4]))();
}

uint64_t sub_1001E2990(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2998(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E29A0);
  return result;
}

uint64_t sub_1001E29AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E29B4);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1001E29B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E29C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SortOptions.SortType()
{
  return &type metadata for SortOptions.SortType;
}

uint64_t getEnumTagSinglePayload for SortOptions.ContentType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x1D)
    goto LABEL_17;
  if (a2 + 227 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 227) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 227;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 227;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 227;
  }
LABEL_17:
  v6 = ((*a1 >> 1) & 0x1C | (*a1 >> 6)) ^ 0x1F;
  if (v6 >= 0x1C)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for SortOptions.ContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 227 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 227) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x1D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x1C)
    return ((uint64_t (*)(void))((char *)&loc_1001E2AC8 + 4 * byte_1004309F2[v4]))();
  *a1 = a2 - 29;
  return ((uint64_t (*)(void))((char *)sub_1001E2AFC + 4 * byte_1004309ED[v4]))();
}

uint64_t sub_1001E2AFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2B04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E2B0CLL);
  return result;
}

uint64_t sub_1001E2B24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E2B2CLL);
  *(_BYTE *)result = 8 * (((-a2 >> 2) & 7) - 8 * a2);
  return result;
}

uint64_t sub_1001E2B30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2B38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2B44(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *a1;
  v2 = v1 >> 6;
  v3 = (v1 & 7) + 3;
  if (v2 == 3)
    return v3;
  else
    return v2;
}

_BYTE *sub_1001E2B60(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_1001E2B70(_BYTE *result, unsigned int a2)
{
  if (a2 < 3)
    *result = *result & 7 | ((_BYTE)a2 << 6);
  else
    *result = (a2 + 5) & 7 | 0xC0;
  return result;
}

ValueMetadata *type metadata accessor for SortOptions.ContentType()
{
  return &type metadata for SortOptions.ContentType;
}

ValueMetadata *type metadata accessor for SortOptions.ViewType()
{
  return &type metadata for SortOptions.ViewType;
}

uint64_t storeEnumTagSinglePayload for SortOptions.ViewType.Albums(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001E2C0C + 4 * byte_1004309FC[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001E2C40 + 4 * byte_1004309F7[v4]))();
}

uint64_t sub_1001E2C40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2C48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E2C50);
  return result;
}

uint64_t sub_1001E2C5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E2C64);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001E2C68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2C70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SortOptions.ViewType.Albums()
{
  return &type metadata for SortOptions.ViewType.Albums;
}

ValueMetadata *type metadata accessor for SortOptions.ViewType.MusicVideos()
{
  return &type metadata for SortOptions.ViewType.MusicVideos;
}

uint64_t _s9MusicCore11SortOptionsV8ViewTypeV11MusicVideosOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001E2CEC + 4 * byte_100430A06[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001E2D20 + 4 * byte_100430A01[v4]))();
}

uint64_t sub_1001E2D20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2D28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E2D30);
  return result;
}

uint64_t sub_1001E2D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E2D44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001E2D48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2D50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SortOptions.ViewType.Playlists()
{
  return &type metadata for SortOptions.ViewType.Playlists;
}

uint64_t storeEnumTagSinglePayload for SortOptions.ViewType.Detail(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001E2DAC + 4 * byte_100430A0B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001E2DCC + 4 * byte_100430A10[v4]))();
}

_BYTE *sub_1001E2DAC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001E2DCC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E2DD4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E2DDC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E2DE4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E2DEC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SortOptions.ViewType.Detail()
{
  return &type metadata for SortOptions.ViewType.Detail;
}

ValueMetadata *type metadata accessor for TitleSort()
{
  return &type metadata for TitleSort;
}

ValueMetadata *type metadata accessor for ArtistSort()
{
  return &type metadata for ArtistSort;
}

ValueMetadata *type metadata accessor for AlbumSort()
{
  return &type metadata for AlbumSort;
}

ValueMetadata *type metadata accessor for PlaylistOrderSort()
{
  return &type metadata for PlaylistOrderSort;
}

ValueMetadata *type metadata accessor for PlaylistTypeSort()
{
  return &type metadata for PlaylistTypeSort;
}

ValueMetadata *type metadata accessor for RecentlyAddedSort()
{
  return &type metadata for RecentlyAddedSort;
}

ValueMetadata *type metadata accessor for RecentlyPlayedSort()
{
  return &type metadata for RecentlyPlayedSort;
}

ValueMetadata *type metadata accessor for RecentlyUpdatedSort()
{
  return &type metadata for RecentlyUpdatedSort;
}

uint64_t _s9MusicCore17PlaylistOrderSortVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001E2EDC + 4 * byte_100430A1A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001E2F10 + 4 * byte_100430A15[v4]))();
}

uint64_t sub_1001E2F10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E2F20);
  return result;
}

uint64_t sub_1001E2F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E2F34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001E2F38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E2F40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for YearSort()
{
  return &type metadata for YearSort;
}

uint64_t initializeBufferWithCopyOfBuffer for ReleaseDateSort(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReleaseDateSort(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t assignWithTake for ReleaseDateSort(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for ReleaseDateSort()
{
  return &type metadata for ReleaseDateSort;
}

unint64_t sub_1001E3018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10054FFB0;
  if (!qword_10054FFB0)
  {
    v1 = objc_opt_self(NSSortDescriptor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10054FFB0);
  }
  return result;
}

id MPModelPlaylist.preferredArtworkCatalog.getter()
{
  void *v0;
  unint64_t v1;
  id result;
  id v3;

  if (!objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistType))
    goto LABEL_8;
  v1 = (unint64_t)objc_msgSend(v0, "type");
  if (v1 > 8)
    goto LABEL_8;
  if (((1 << v1) & 0x173) != 0)
  {
    result = MPModelPlaylist.coverArtworkCatalog.getter();
    if (!result)
    {
      result = objc_msgSend(v0, "artworkCatalog");
      if (!result)
      {
        if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistTracksTiledArtwork))
        {
          v3 = objc_msgSend(v0, "tracksTiledArtworkCatalogWithRows:columns:", 2, 2);
          return v3;
        }
        return 0;
      }
    }
    return result;
  }
  if (v1 == 3)
    return 0;
  if (v1 != 7
    || !objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistEditorialArtwork)
    || (result = objc_msgSend(v0, "editorialArtworkCatalog")) == 0)
  {
LABEL_8:
    v3 = objc_msgSend(v0, "artworkCatalog");
    return v3;
  }
  return result;
}

uint64_t static MPModelPlaylist.artworkPlaceholderSystemImageName(for:)(uint64_t a1, char a2)
{
  uint64_t result;
  unint64_t v4;

  result = 0x6F6E2E636973756DLL;
  if ((a2 & 1) == 0)
  {
    v4 = a1 - 1;
    if (v4 <= 2)
      return *(_QWORD *)&aGearshapgenius[8 * v4];
  }
  return result;
}

uint64_t MPModelPlaylist.artworkPlaceholderImage.getter()
{
  void *v0;
  uint64_t v1;
  char *v2;

  v1 = 0x6F6E2E636973756DLL;
  if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistType))
  {
    v2 = (char *)objc_msgSend(v0, "type");
    if ((unint64_t)(v2 - 1) <= 2)
      return *(_QWORD *)&aGearshapgenius[8 * (_QWORD)(v2 - 1)];
  }
  return v1;
}

char *ModelObjectBackedStoreItemMetadata.__allocating_init(modelObject:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ModelObjectBackedStoreItemMetadata.init(modelObject:)(a1);
}

char *ModelObjectBackedStoreItemMetadata.init(modelObject:)(void *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  void *v9;
  char *v10;
  id v11;
  uint64_t ObjectType;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26[24];
  objc_super v27;

  v3 = OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v4 = &v1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  objc_opt_self(MPModelGenericObject);
  v5 = swift_dynamicCastObjCClass(a1);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = v1;
    v8 = objc_msgSend(v6, "anyObject");
    goto LABEL_5;
  }
  objc_opt_self(MPModelStoreBrowseContentItem);
  v9 = (void *)swift_dynamicCastObjCClass(a1);
  v10 = v1;
  if (v9)
  {
    v8 = objc_msgSend(v9, "innerObject");
LABEL_5:
    v11 = v8;
    if (v11)
      goto LABEL_7;
  }
  v11 = a1;
LABEL_7:
  ObjectType = swift_getObjectType();
  v13 = objc_msgSend(v11, "identifiers");
  v14 = sub_10013B6C0(ObjectType, 2, 0, v13);
  v16 = v15;

  if (v16)
  {

    v27.receiver = v1;
    v27.super_class = (Class)type metadata accessor for ModelObjectBackedStoreItemMetadata();
    v17 = (char *)objc_msgSendSuper2(&v27, "init");
    v18 = (void **)&v17[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject];
    swift_beginAccess(&v17[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject], v26, 1, 0);
    v19 = *v18;
    *v18 = a1;

    v20 = (uint64_t *)&v17[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
    swift_beginAccess(&v17[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID], &v25, 1, 0);
    v21 = v20[1];
    *v20 = v14;
    v20[1] = v16;
    swift_bridgeObjectRelease(v21);
  }
  else
  {

    v22 = *((_QWORD *)v4 + 1);
    swift_bridgeObjectRelease(v22);
    v23 = type metadata accessor for ModelObjectBackedStoreItemMetadata();
    swift_deallocPartialClassInstance(v1, v23, 32, 7);
    return 0;
  }
  return v17;
}

id ModelObjectBackedStoreItemMetadata.__allocating_init(downloadAssetDictionary:)(uint64_t a1)
{
  return sub_1001E3C78(a1, (SEL *)&selRef_initWithDownloadAssetDictionary_);
}

id ModelObjectBackedStoreItemMetadata.init(downloadAssetDictionary:)(uint64_t a1)
{
  return sub_1001E3D04(a1, (SEL *)&selRef_initWithDownloadAssetDictionary_);
}

id ModelObjectBackedStoreItemMetadata.__allocating_init(storePlatformDictionary:)(uint64_t a1)
{
  return sub_1001E3C78(a1, (SEL *)&selRef_initWithStorePlatformDictionary_);
}

id ModelObjectBackedStoreItemMetadata.init(storePlatformDictionary:)(uint64_t a1)
{
  return sub_1001E3D04(a1, (SEL *)&selRef_initWithStorePlatformDictionary_);
}

id ModelObjectBackedStoreItemMetadata.__allocating_init(storePlatformDictionary:parentStoreItemMetadata:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend(v5, "initWithStorePlatformDictionary:parentStoreItemMetadata:", isa, a2);

  return v7;
}

id ModelObjectBackedStoreItemMetadata.init(storePlatformDictionary:parentStoreItemMetadata:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v4;
  Class isa;
  id v6;
  objc_super v8;

  *(_QWORD *)&v2[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v4 = &v2[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  v6 = objc_msgSendSuper2(&v8, "initWithStorePlatformDictionary:parentStoreItemMetadata:", isa, a2);

  return v6;
}

id ModelObjectBackedStoreItemMetadata.__allocating_init(storePlatformDictionary:expirationDate:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  NSDictionary v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  id v10;

  v3 = v2;
  v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  }
  v10 = objc_msgSend(objc_allocWithZone(v3), "initWithStorePlatformDictionary:expirationDate:", v6.super.isa, isa);

  return v10;
}

id ModelObjectBackedStoreItemMetadata.init(storePlatformDictionary:expirationDate:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  NSDictionary v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  objc_class *v13;
  id v14;
  objc_super v16;

  v3 = v2;
  v5 = sub_10000B4C8(&qword_10054FB70);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v8 = &v3[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001628D0(a2, (uint64_t)v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  }
  v13 = (objc_class *)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  v16.receiver = v3;
  v16.super_class = v13;
  v14 = objc_msgSendSuper2(&v16, "initWithStorePlatformDictionary:expirationDate:", v9.super.isa, isa);

  sub_100011694(a2, &qword_10054FB70);
  return v14;
}

id ModelObjectBackedStoreItemMetadata.__allocating_init(storePlatformDictionary:parentStoreItemMetadata:expirationDate:)(uint64_t a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  NSDictionary v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  id v12;

  v4 = v3;
  v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a3, 1, v9) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  }
  v12 = objc_msgSend(objc_allocWithZone(v4), "initWithStorePlatformDictionary:parentStoreItemMetadata:expirationDate:", v8.super.isa, a2, isa);

  return v12;
}

id ModelObjectBackedStoreItemMetadata.init(storePlatformDictionary:parentStoreItemMetadata:expirationDate:)(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;

  v4 = sub_1001EBBF8(a1, (uint64_t)a2, a3);

  return v4;
}

id ModelObjectBackedStoreItemMetadata.__allocating_init(storeMusicAPIDictionary:)(uint64_t a1)
{
  return sub_1001E3C78(a1, (SEL *)&selRef_initWithStoreMusicAPIDictionary_);
}

id sub_1001E3C78(uint64_t a1, SEL *a2)
{
  objc_class *v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend(v5, *a2, isa);

  return v7;
}

id ModelObjectBackedStoreItemMetadata.init(storeMusicAPIDictionary:)(uint64_t a1)
{
  return sub_1001E3D04(a1, (SEL *)&selRef_initWithStoreMusicAPIDictionary_);
}

id sub_1001E3D04(uint64_t a1, SEL *a2)
{
  char *v2;
  char *v4;
  Class isa;
  id v6;
  objc_super v8;

  *(_QWORD *)&v2[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v4 = &v2[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  v6 = objc_msgSendSuper2(&v8, *a2, isa);

  return v6;
}

id sub_1001E3DAC(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  char *v6;
  Class isa;
  id v8;
  objc_super v10;

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  *(_QWORD *)&a1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v6 = &a1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10.receiver = a1;
  v10.super_class = (Class)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  v8 = objc_msgSendSuper2(&v10, *a4, isa);

  return v8;
}

id UIStackView.SpacerView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

void ModelObjectBackedStoreItemMetadata.init(coder:)()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v1 = &v0[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010044BC20, "MusicCore/ModelObjectBackedStoreItemMetadata.swift", 50, 2, 49, 0);
  __break(1u);
}

void *ModelObjectBackedStoreItemMetadata.modelObject.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void ModelObjectBackedStoreItemMetadata.modelObject.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*ModelObjectBackedStoreItemMetadata.modelObject.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ModelObjectBackedStoreItemMetadata.modelObjectStoreID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelObjectBackedStoreItemMetadata.modelObjectStoreID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*ModelObjectBackedStoreItemMetadata.modelObjectStoreID.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID, a1, 33, 0);
  return j_j__swift_endAccess;
}

char *ModelObjectBackedStoreItemMetadata.appending(_:)(uint64_t a1)
{
  char *v1;
  char *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  char v15[24];
  char v16[24];
  char v17[24];
  objc_super v18;

  v18.receiver = v1;
  v18.super_class = (Class)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  v3 = (char *)objc_msgSendSuper2(&v18, "metadataByAppendingMetadata:", a1);
  v4 = (void **)&v1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject];
  swift_beginAccess(&v1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject], v17, 0, 0);
  v5 = *v4;
  v6 = (void **)&v3[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject];
  swift_beginAccess(&v3[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject], v16, 1, 0);
  v7 = *v6;
  *v6 = v5;
  v8 = v5;

  v9 = &v1[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  swift_beginAccess(v9, v15, 0, 0);
  v11 = *(_QWORD *)v9;
  v10 = *((_QWORD *)v9 + 1);
  v12 = &v3[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  swift_beginAccess(&v3[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID], &v14, 1, 0);
  *(_QWORD *)v12 = v11;
  *((_QWORD *)v12 + 1) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

void ModelObjectBackedStoreItemMetadata.artistName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C4D0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050C4F8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBD80;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150C04;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050C510;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 64, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E442C(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _BYTE v26[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v26, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelAlbum);
    v6 = swift_dynamicCastObjCClass(v5);
    if (v6)
    {
      v7 = (void *)v6;
      v8 = v5;
      v9 = objc_msgSend(v7, "artist");
      v10 = v9;
      if (v9)
        goto LABEL_7;
      goto LABEL_9;
    }
    objc_opt_self(MPModelSong);
    v11 = swift_dynamicCastObjCClass(v5);
    if (v11)
    {
      v12 = (void *)v11;
      v8 = v5;
      v9 = objc_msgSend(v12, "artist");
      v10 = v9;
      if (v9)
      {
LABEL_7:
        v13 = objc_msgSend(v9, "name");

        if (v13)
        {
          v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v15 = v14;

LABEL_12:
          v16 = a2[1];
          *a2 = v10;
          a2[1] = v15;
          return swift_bridgeObjectRelease(v16);
        }

        v10 = 0;
LABEL_11:
        v15 = 0;
        goto LABEL_12;
      }
LABEL_9:

      goto LABEL_11;
    }
    objc_opt_self(MPModelTVEpisode);
    result = swift_dynamicCastObjCClass(v5);
    if (result)
    {
      v17 = (void *)result;
      v18 = v5;
      v19 = objc_msgSend(v17, "show");
      if (v19)
        goto LABEL_17;
      v25 = objc_msgSend(v17, "season");
      v22 = v25;
      if (!v25)
      {

        goto LABEL_25;
      }
      v19 = objc_msgSend(v25, "show");

      if (v19)
      {
LABEL_17:
        v20 = objc_msgSend(v19, "title");
        if (v20)
        {
          v21 = v20;
          v22 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v24 = v23;

LABEL_26:
          v16 = a2[1];
          *a2 = v22;
          a2[1] = v24;
          return swift_bridgeObjectRelease(v16);
        }

      }
      v22 = 0;
LABEL_25:
      v24 = 0;
      goto LABEL_26;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.artistStoreID.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  __n128 v9;
  char isEscapingClosureAtFileLocation;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t ObjectType;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD aBlock[5];
  uint64_t v26;
  void *v27;

  v27 = 0;
  v3 = (void *)objc_opt_self(MPModelObject);
  v4 = swift_allocObject(&unk_10050C548, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = &v27;
  v5 = swift_allocObject(&unk_10050C570, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1001EBDB0;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_100150E54;
  v26 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050C588;
  v6 = _Block_copy(aBlock);
  v7 = v26;
  v8 = v1;
  swift_retain(v5);
  objc_msgSend(v3, "performWithoutEnforcement:", v6, swift_release(v7).n128_f64[0]);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 147, 84, 49, 1, v9);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v11 = v27;
    if (!v27)
      goto LABEL_11;
    objc_opt_self(MPModelGenericObject);
    v12 = swift_dynamicCastObjCClass(v11);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = v11;
      v15 = objc_msgSend(v13, "anyObject");
    }
    else
    {
      objc_opt_self(MPModelStoreBrowseContentItem);
      v16 = (void *)swift_dynamicCastObjCClass(v11);
      v17 = v11;
      if (!v16)
      {
LABEL_8:
        v18 = v11;
LABEL_9:
        ObjectType = swift_getObjectType();
        v20 = objc_msgSend(v18, "identifiers");
        v21 = sub_10013B6C0(ObjectType, 2, 0, v20);
        v23 = v22;

        if (v23)
        {
          *(_QWORD *)(a1 + 24) = &type metadata for String;
          *(_QWORD *)a1 = v21;
          *(_QWORD *)(a1 + 8) = v23;
LABEL_12:
          v24 = v27;
          swift_release(v4);

          return;
        }
LABEL_11:
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        goto LABEL_12;
      }
      v15 = objc_msgSend(v16, "innerObject");
    }
    v18 = v15;
    if (v18)
      goto LABEL_9;
    goto LABEL_8;
  }
  __break(1u);
}

void sub_1001E48FC(uint64_t a1, void **a2)
{
  void **v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  _BYTE v14[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v14, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelAlbum);
    v5 = (void *)swift_dynamicCastObjCClass(v4);
    if (v5 || (objc_opt_self(MPModelSong), (v5 = (void *)swift_dynamicCastObjCClass(v4)) != 0))
    {
      v6 = objc_msgSend(v5, "artist");
LABEL_5:
      v7 = *a2;
      *a2 = v6;

      return;
    }
    objc_opt_self(MPModelTVEpisode);
    v8 = swift_dynamicCastObjCClass(v4);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = v4;
      v11 = objc_msgSend(v9, "show");
      if (v11)
      {
        v6 = v11;

      }
      else
      {
        v12 = objc_msgSend(v9, "season");
        if (v12)
        {
          v13 = v12;
          v6 = objc_msgSend(v12, "show");

        }
        else
        {

          v6 = 0;
        }
      }
      goto LABEL_5;
    }
  }
}

void ModelObjectBackedStoreItemMetadata.audioTraits.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C5C0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050C5E8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBDC8;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050C600;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 104, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001E4BFC(uint64_t a1, char **a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v65, 0, 0);
  v4 = *v3;
  if (!v4)
    return;
  objc_opt_self(MPModelAlbum);
  v5 = swift_dynamicCastObjCClass(v4);
  if (v5)
    goto LABEL_3;
  objc_opt_self(MPModelPlaylist);
  v28 = swift_dynamicCastObjCClass(v4);
  if (!v28)
  {
    objc_opt_self(MPModelSong);
    v5 = swift_dynamicCastObjCClass(v4);
    if (!v5)
      return;
LABEL_3:
    v6 = (void *)v5;
    v7 = v4;
    if ((objc_msgSend(v6, "traits") & 0x10) != 0)
    {
      v8 = *a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
      *a2 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v8 = sub_1000DEAD8(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        *a2 = v8;
      }
      v10 = *((_QWORD *)v8 + 2);
      v11 = *((_QWORD *)v8 + 3);
      v12 = v10 + 1;
      if (v10 >= v11 >> 1)
      {
        v62 = v10 + 1;
        v50 = v8;
        v51 = *((_QWORD *)v8 + 2);
        v52 = sub_1000DEAD8((char *)(v11 > 1), v10 + 1, 1, v50);
        v10 = v51;
        v12 = v62;
        v8 = v52;
        *a2 = v52;
      }
      *((_QWORD *)v8 + 2) = v12;
      v13 = &v8[16 * v10];
      *((_QWORD *)v13 + 4) = 0x736F6D7461;
      *((_QWORD *)v13 + 5) = 0xE500000000000000;
    }
    if ((objc_msgSend(v6, "traits", v62) & 4) != 0)
    {
      v14 = *a2;
      v15 = swift_isUniquelyReferenced_nonNull_native(*a2);
      *a2 = v14;
      if ((v15 & 1) == 0)
      {
        v14 = sub_1000DEAD8(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
        *a2 = v14;
      }
      v16 = *((_QWORD *)v14 + 2);
      v17 = *((_QWORD *)v14 + 3);
      v18 = v16 + 1;
      if (v16 >= v17 >> 1)
      {
        v63 = v16 + 1;
        v53 = v14;
        v54 = *((_QWORD *)v14 + 2);
        v55 = sub_1000DEAD8((char *)(v17 > 1), v16 + 1, 1, v53);
        v16 = v54;
        v18 = v63;
        v14 = v55;
        *a2 = v55;
      }
      *((_QWORD *)v14 + 2) = v18;
      v19 = &v14[16 * v16];
      *((_QWORD *)v19 + 4) = 0x6C2D7365722D6968;
      *((_QWORD *)v19 + 5) = 0xEF7373656C73736FLL;
    }
    if ((objc_msgSend(v6, "traits", v63) & 2) == 0)
      goto LABEL_29;
    v20 = *a2;
    v21 = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v20;
    if ((v21 & 1) == 0)
    {
      v20 = sub_1000DEAD8(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
      *a2 = v20;
    }
    v22 = *((_QWORD *)v20 + 2);
    v23 = *((_QWORD *)v20 + 3);
    v24 = v22 + 1;
    if (v22 >= v23 >> 1)
    {
      v62 = v22 + 1;
      v56 = v20;
      v57 = *((_QWORD *)v20 + 2);
      v58 = sub_1000DEAD8((char *)(v23 > 1), v22 + 1, 1, v56);
      v22 = v57;
      v24 = v62;
      v20 = v58;
      *a2 = v58;
    }
    *((_QWORD *)v20 + 2) = v24;
    v25 = &v20[16 * v22];
    v26 = 0x7373656C73736F6CLL;
    v27 = 0xE800000000000000;
    goto LABEL_28;
  }
  v6 = (void *)v28;
  v29 = v4;
  if ((objc_msgSend(v6, "traits") & 0x10) != 0)
  {
    v30 = *a2;
    v31 = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v30;
    if ((v31 & 1) == 0)
    {
      v30 = sub_1000DEAD8(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
      *a2 = v30;
    }
    v32 = *((_QWORD *)v30 + 2);
    v33 = *((_QWORD *)v30 + 3);
    v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      v62 = v32 + 1;
      v59 = v30;
      v60 = *((_QWORD *)v30 + 2);
      v61 = sub_1000DEAD8((char *)(v33 > 1), v32 + 1, 1, v59);
      v32 = v60;
      v34 = v62;
      v30 = v61;
      *a2 = v61;
    }
    *((_QWORD *)v30 + 2) = v34;
    v25 = &v30[16 * v32];
    v26 = 0x736F6D7461;
    v27 = 0xE500000000000000;
LABEL_28:
    *((_QWORD *)v25 + 4) = v26;
    *((_QWORD *)v25 + 5) = v27;
  }
LABEL_29:
  if ((objc_msgSend(v6, "traits", v62) & 8) != 0)
  {
    v35 = *a2;
    v36 = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v35;
    if ((v36 & 1) == 0)
    {
      v35 = sub_1000DEAD8(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
      *a2 = v35;
    }
    v37 = *((_QWORD *)v35 + 2);
    v38 = *((_QWORD *)v35 + 3);
    v39 = v37 + 1;
    if (v37 >= v38 >> 1)
    {
      v64 = v37 + 1;
      v47 = v35;
      v48 = *((_QWORD *)v35 + 2);
      v49 = sub_1000DEAD8((char *)(v38 > 1), v37 + 1, 1, v47);
      v37 = v48;
      v39 = v64;
      v35 = v49;
      *a2 = v49;
    }
    *((_QWORD *)v35 + 2) = v39;
    v40 = &v35[16 * v37];
    *((_QWORD *)v40 + 4) = 0x6C616974617073;
    *((_QWORD *)v40 + 5) = 0xE700000000000000;
  }
  if ((objc_msgSend(v6, "traits", v64) & 0x20) != 0)
  {
    v41 = *a2;
    v42 = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v41;
    if ((v42 & 1) == 0)
    {
      v41 = sub_1000DEAD8(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
      *a2 = v41;
    }
    v44 = *((_QWORD *)v41 + 2);
    v43 = *((_QWORD *)v41 + 3);
    v45 = v44 + 1;
    if (v44 >= v43 >> 1)
    {
      v41 = sub_1000DEAD8((char *)(v43 > 1), v45, 1, v41);
      *a2 = v41;
      v45 = v44 + 1;
    }
    *((_QWORD *)v41 + 2) = v45;
    v46 = &v41[16 * v44];
    *((_QWORD *)v46 + 4) = 0x646E756F72727573;
    *((_QWORD *)v46 + 5) = 0xE800000000000000;
  }

}

void ModelObjectBackedStoreItemMetadata.isBeats1.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C638, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050C660, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBDE0;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050C678;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 166, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.collectionName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C6B0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050C6D8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBE18;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050C6F0;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 181, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.collectionStoreID.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  __n128 v9;
  char isEscapingClosureAtFileLocation;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t ObjectType;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD aBlock[5];
  uint64_t v26;
  void *v27;

  v27 = 0;
  v3 = (void *)objc_opt_self(MPModelObject);
  v4 = swift_allocObject(&unk_10050C728, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = &v27;
  v5 = swift_allocObject(&unk_10050C750, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1001EBE50;
  *(_QWORD *)(v5 + 24) = v4;
  aBlock[4] = sub_100150E54;
  v26 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050C768;
  v6 = _Block_copy(aBlock);
  v7 = v26;
  v8 = v1;
  swift_retain(v5);
  objc_msgSend(v3, "performWithoutEnforcement:", v6, swift_release(v7).n128_f64[0]);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 147, 196, 49, 1, v9);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v11 = v27;
    if (!v27)
      goto LABEL_11;
    objc_opt_self(MPModelGenericObject);
    v12 = swift_dynamicCastObjCClass(v11);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = v11;
      v15 = objc_msgSend(v13, "anyObject");
    }
    else
    {
      objc_opt_self(MPModelStoreBrowseContentItem);
      v16 = (void *)swift_dynamicCastObjCClass(v11);
      v17 = v11;
      if (!v16)
      {
LABEL_8:
        v18 = v11;
LABEL_9:
        ObjectType = swift_getObjectType();
        v20 = objc_msgSend(v18, "identifiers");
        v21 = sub_10013B6C0(ObjectType, 2, 0, v20);
        v23 = v22;

        if (v23)
        {
          *(_QWORD *)(a1 + 24) = &type metadata for String;
          *(_QWORD *)a1 = v21;
          *(_QWORD *)(a1 + 8) = v23;
LABEL_12:
          v24 = v27;
          swift_release(v4);

          return;
        }
LABEL_11:
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        goto LABEL_12;
      }
      v15 = objc_msgSend(v16, "innerObject");
    }
    v18 = v15;
    if (v18)
      goto LABEL_9;
    goto LABEL_8;
  }
  __break(1u);
}

void sub_1001E55F0(uint64_t a1, void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  char **v6;
  id v7;
  void *v8;
  _BYTE v9[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v9, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelSong);
    v5 = (void *)swift_dynamicCastObjCClass(v4);
    if (v5)
    {
      v6 = &selRef_album;
    }
    else
    {
      objc_opt_self(MPModelTVEpisode);
      v5 = (void *)swift_dynamicCastObjCClass(v4);
      if (!v5)
        return;
      v6 = &selRef_season;
    }
    v7 = objc_msgSend(v5, *v6);
    v8 = *a2;
    *a2 = v7;

  }
}

void ModelObjectBackedStoreItemMetadata.isCompilation.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C7A0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050C7C8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBE68;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050C7E0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 214, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.composerName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C818, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050C840, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBEA0;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050C858;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 229, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E596C(uint64_t a1, uint64_t *a2, SEL *a3, SEL *a4)
{
  void **v7;
  uint64_t result;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18[24];

  v7 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v18, 0, 0);
  v9 = *v7;
  if (v9)
  {
    objc_opt_self(MPModelSong);
    result = swift_dynamicCastObjCClass(v9);
    if (result)
    {
      v10 = (void *)result;
      v11 = v9;
      v12 = objc_msgSend(v10, *a3);
      v13 = v12;
      if (v12)
      {
        v14 = objc_msgSend(v12, *a4);

        if (v14)
        {
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v13 = v16;

        }
        else
        {

          v15 = 0;
          v13 = 0;
        }
      }
      else
      {

        v15 = 0;
      }
      v17 = a2[1];
      *a2 = v15;
      a2[1] = (uint64_t)v13;
      return swift_bridgeObjectRelease(v17);
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.copyrightText.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C890, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050C8B8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBED8;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050C8D0;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 244, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.curatorName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C908, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050C930, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBF1C;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050C948;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 261, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001E5D2C(uint64_t a1, uint64_t *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v19, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelPlaylist);
    v5 = swift_dynamicCastObjCClass(v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = v4;
      v8 = objc_msgSend(v6, "curator");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "name");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

        }
        else
        {
          v15 = objc_msgSend(v9, "shortName");
          if (v15)
          {
            v16 = v15;
            v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
            v14 = v17;

          }
          else
          {

            v12 = 0;
            v14 = 0;
          }
        }
        v18 = a2[1];
        *a2 = v12;
        a2[1] = v14;
        swift_bridgeObjectRelease(v18);
      }
      else
      {

      }
    }
  }
}

void ModelObjectBackedStoreItemMetadata.descriptionText.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C980, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050C9A8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBF34;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050C9C0;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 278, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E5FD0(uint64_t a1, uint64_t *a2)
{
  void **v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v20, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelMovie);
    v6 = swift_dynamicCastObjCClass(v5);
    if (v6)
    {
      v7 = (void *)v6;
      v8 = v5;
      v9 = objc_msgSend(v7, "descriptionText");
      if (!v9)
        goto LABEL_13;
    }
    else
    {
      objc_opt_self(MPModelPlaylist);
      v10 = swift_dynamicCastObjCClass(v5);
      if (v10)
      {
        v11 = (void *)v10;
        v8 = v5;
        v9 = objc_msgSend(v11, "descriptionText");
        if (!v9)
          goto LABEL_13;
      }
      else
      {
        objc_opt_self(MPModelTVEpisode);
        v12 = swift_dynamicCastObjCClass(v5);
        if (v12)
        {
          v13 = (void *)v12;
          v8 = v5;
          v9 = objc_msgSend(v13, "descriptionText");
          if (!v9)
          {
LABEL_13:

            v15 = 0;
            v17 = 0;
            goto LABEL_14;
          }
        }
        else
        {
          objc_opt_self(MPModelTVSeason);
          result = swift_dynamicCastObjCClass(v5);
          if (!result)
            return result;
          v18 = (void *)result;
          v8 = v5;
          v9 = objc_msgSend(v18, "descriptionText");
          if (!v9)
            goto LABEL_13;
        }
      }
    }
    v14 = v9;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v17 = v16;

LABEL_14:
    v19 = a2[1];
    *a2 = v15;
    a2[1] = v17;
    return swift_bridgeObjectRelease(v19);
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.discCount.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050C9F8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CA20, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBF4C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CA38;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 299, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.discNumber.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CA70, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CA98, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBF84;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CAB0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 314, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.duration.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CAE8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CB10, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBFBC;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CB28;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 329, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001E65E4(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  id result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v7, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelMovie);
    result = (id)swift_dynamicCastObjCClass(v5);
    if (result
      || (objc_opt_self(MPModelSong), (result = (id)swift_dynamicCastObjCClass(v5)) != 0)
      || (objc_opt_self(MPModelTVEpisode), (result = (id)swift_dynamicCastObjCClass(v5)) != 0))
    {
      result = objc_msgSend(result, "duration");
      *a2 = v6;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.editorNotes.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CB60, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050CB88, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EBFD4;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050CBA0;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 348, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E67E8(uint64_t a1, uint64_t *a2, SEL *a3)
{
  void **v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22[24];

  v5 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v22, 0, 0);
  v7 = *v5;
  if (v7)
  {
    objc_opt_self(MPModelAlbum);
    v8 = swift_dynamicCastObjCClass(v7);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = v7;
      v11 = objc_msgSend(v9, *a3);
      if (!v11)
        goto LABEL_13;
    }
    else
    {
      objc_opt_self(MPModelCurator);
      v12 = swift_dynamicCastObjCClass(v7);
      if (v12)
      {
        v13 = (void *)v12;
        v10 = v7;
        v11 = objc_msgSend(v13, *a3);
        if (!v11)
          goto LABEL_13;
      }
      else
      {
        objc_opt_self(MPModelPlaylist);
        v14 = swift_dynamicCastObjCClass(v7);
        if (v14)
        {
          v15 = (void *)v14;
          v10 = v7;
          v11 = objc_msgSend(v15, *a3);
          if (!v11)
          {
LABEL_13:

            v17 = 0;
            v19 = 0;
            goto LABEL_14;
          }
        }
        else
        {
          objc_opt_self(MPModelRadioStation);
          result = swift_dynamicCastObjCClass(v7);
          if (!result)
            return result;
          v20 = (void *)result;
          v10 = v7;
          v11 = objc_msgSend(v20, *a3);
          if (!v11)
            goto LABEL_13;
        }
      }
    }
    v16 = v11;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v19 = v18;

LABEL_14:
    v21 = a2[1];
    *a2 = v17;
    a2[1] = v19;
    return swift_bridgeObjectRelease(v21);
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.shortEditorNotes.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CBD8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050CC00, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC004;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050CC18;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 369, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.episodeCount.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CC50, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CC78, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC034;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CC90;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 392, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.explicitRating.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CCC8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CCF0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC06C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CD08;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 407, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001E6DC0(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  id result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v6, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelMovie);
    result = (id)swift_dynamicCastObjCClass(v5);
    if (result || (objc_opt_self(MPModelTVEpisode), (result = (id)swift_dynamicCastObjCClass(v5)) != 0))
    {
      result = objc_msgSend(result, "explicitRating");
      *a2 = result;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.genreNames.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  double v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD aBlock[5];
  uint64_t v19;
  id v20;

  v20 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CD40, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v20;
  v3 = swift_allocObject(&unk_10050CD68, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC084;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v19 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CD80;
  v4 = _Block_copy(aBlock);
  v5 = v19;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 424, 49, 1, v7);
  *(_QWORD *)&v9 = swift_release(v3).n128_u64[0];
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v20)
    {
      v10 = objc_msgSend(v20, "name", v9);
      v11 = v10;
      if (v10)
      {
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v14 = v13;

        v15 = sub_10000B4C8(&qword_10054F918);
        v16 = swift_allocObject(v15, 64, 7);
        *(_OWORD *)(v16 + 16) = xmmword_100424BB0;
        *(_QWORD *)(v16 + 56) = &type metadata for String;
        *(_QWORD *)(v16 + 32) = v12;
        *(_QWORD *)(v16 + 40) = v14;
      }
    }
    v17 = v20;
    swift_release(v2);

  }
}

void sub_1001E7070(uint64_t a1, void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  _BYTE v8[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v8, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelAlbum);
    v5 = (void *)swift_dynamicCastObjCClass(v4);
    if (v5
      || (objc_opt_self(MPModelArtist), (v5 = (void *)swift_dynamicCastObjCClass(v4)) != 0)
      || (objc_opt_self(MPModelSong), (v5 = (void *)swift_dynamicCastObjCClass(v4)) != 0))
    {
      v6 = objc_msgSend(v5, "genre");
      v7 = *a2;
      *a2 = v6;

    }
  }
}

void ModelObjectBackedStoreItemMetadata.handle.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CDB8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050CDE0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC09C;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050CDF8;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 447, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.hasArtistBiography.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CE30, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CE58, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC0D4;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CE70;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 462, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.hasLyrics.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CEA8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CED0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC10C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CEE8;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 477, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001E756C(uint64_t a1, unsigned __int8 *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  _BYTE v11[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v11, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelSong);
    v5 = swift_dynamicCastObjCClass(v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = v4;
      v8 = objc_msgSend(v6, "lyrics");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "hasStoreLyrics");

        *a2 = v10;
      }
      else
      {

      }
    }
  }
}

void ModelObjectBackedStoreItemMetadata.hasTimeSyncedLyrics.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CF20, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CF48, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC124;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CF60;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 494, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001E77AC(uint64_t a1, unsigned __int8 *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  _BYTE v11[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v11, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelSong);
    v5 = swift_dynamicCastObjCClass(v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = v4;
      v8 = objc_msgSend(v6, "lyrics");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "hasTimeSyncedLyrics");

        *a2 = v10;
      }
      else
      {

      }
    }
  }
}

void ModelObjectBackedStoreItemMetadata.hasSocialPosts.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050CF98, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050CFC0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC13C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050CFD8;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 508, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001E79E0(uint64_t a1, _BYTE *a2)
{
  uint64_t *v3;
  id result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v6, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelArtist);
    result = (id)swift_dynamicCastObjCClass(v5);
    if (result || (objc_opt_self(MPModelCurator), (result = (id)swift_dynamicCastObjCClass(v5)) != 0))
    {
      result = objc_msgSend(result, "hasSocialPosts");
      *a2 = (_BYTE)result;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.isExplicitContent.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D010, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D038, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC154;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D050;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 525, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001E7BE8(uint64_t a1, _BYTE *a2)
{
  uint64_t *v3;
  id result;
  uint64_t v5;
  char **v6;
  _BYTE v7[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v7, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelAlbum);
    result = (id)swift_dynamicCastObjCClass(v5);
    if (!result)
    {
      objc_opt_self(MPModelRadioStation);
      result = (id)swift_dynamicCastObjCClass(v5);
      if (!result)
      {
        objc_opt_self(MPModelSong);
        result = (id)swift_dynamicCastObjCClass(v5);
        if (result)
        {
          v6 = &selRef_isExplicitSong;
          goto LABEL_5;
        }
        objc_opt_self(MPModelTVSeason);
        result = (id)swift_dynamicCastObjCClass(v5);
        if (!result)
          return result;
      }
    }
    v6 = &selRef_hasExplicitContent;
LABEL_5:
    result = objc_msgSend(result, *v6);
    *a2 = (_BYTE)result;
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.isMasteredForiTunes.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D088, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D0B0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC16C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D0C8;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 546, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E7E3C(uint64_t a1, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v6, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelAlbum);
    result = swift_dynamicCastObjCClass(v5);
    if (result || (objc_opt_self(MPModelSong), (result = swift_dynamicCastObjCClass(v5)) != 0))
    {
      result = (uint64_t)objc_msgSend((id)result, "traits");
      *a2 = result & 1;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.isPreorder.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D100, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D128, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC184;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D140;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 563, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.isPrivatePerson.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D178, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D1A0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC1BC;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D1B8;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 578, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.isVerifiedPerson.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D1F0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D218, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC1F4;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D230;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 593, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.isOnboardedPerson.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D268, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D290, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC22C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D2A8;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 608, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E84A4(uint64_t a1, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v6, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelSocialPerson);
    result = swift_dynamicCastObjCClass(v5);
    if (result)
    {
      result = (uint64_t)objc_msgSend((id)result, "hasLightweightProfile");
      *a2 = result ^ 1;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.itemKind.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D2E0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050D308, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC244;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050D320;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 623, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001E8674(uint64_t a1, uint64_t *a2)
{
  void **v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  char v29[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v29, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelAlbum);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindAlbum;
LABEL_6:
      *a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v5);
      a2[1] = v6;
LABEL_7:
      swift_bridgeObjectRelease();
      return;
    }
    objc_opt_self(MPModelArtist);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindArtist;
      goto LABEL_6;
    }
    objc_opt_self(MPModelCurator);
    v7 = swift_dynamicCastObjCClass(v4);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = v4;
      v10 = objc_msgSend(v8, "curatorKind");
      switch((unint64_t)v10)
      {
        case 0uLL:

          return;
        case 1uLL:
          v11 = &MPStoreItemMetadataItemKindiTunesBrand;
          goto LABEL_20;
        case 2uLL:
          v11 = &MPStoreItemMetadataItemKindBrand;
          goto LABEL_20;
        case 3uLL:
          v11 = &MPStoreItemMetadataItemKindActivity;
          goto LABEL_20;
        case 4uLL:
          v11 = &MPStoreItemMetadataItemKindEditorial;
LABEL_20:
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v11);
          v14 = v13;

          goto LABEL_21;
        default:
          v27 = 0;
          v28 = 0xE000000000000000;
          v21 = v10;
          _StringGuts.grow(_:)(24);
          v22._countAndFlagsBits = 0xD000000000000013;
          v22._object = (void *)0x80000001004487C0;
          String.append(_:)(v22);
          v23._object = (void *)0x800000010044C480;
          v23._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v23);
          v24._countAndFlagsBits = 32;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          v26 = v21;
          type metadata accessor for MPModelCuratorKind(0);
          _print_unlocked<A, B>(_:_:)(&v26, &v27, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, "MusicCore/ModelObjectBackedStoreItemMetadata.swift", 50, 2, 644, 0);
          __break(1u);
          return;
      }
    }
    objc_opt_self(MPModelMovie);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindMovie;
      goto LABEL_6;
    }
    objc_opt_self(MPModelPlaylist);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindPlaylist;
      goto LABEL_6;
    }
    objc_opt_self(MPModelSocialPerson);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindSocialProfile;
      goto LABEL_6;
    }
    objc_opt_self(MPModelRadioStation);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindRadioStation;
      goto LABEL_6;
    }
    objc_opt_self(MPModelSong);
    v15 = swift_dynamicCastObjCClass(v4);
    if (v15)
    {
      v16 = (void *)v15;
      v9 = v4;
      v17 = objc_msgSend(v16, "isArtistUploadedContent");
      v18 = objc_msgSend(v16, "hasVideo");
      if (v17)
      {
        if (v18)
          v19 = &MPStoreItemMetadataItemKindUploadedVideo;
        else
          v19 = &MPStoreItemMetadataItemKindUploadedAudio;
      }
      else if (v18)
      {
        v19 = &MPStoreItemMetadataItemKindMusicVideo;
      }
      else
      {
        v19 = &MPStoreItemMetadataItemKindSong;
      }
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v19);
      v14 = v20;
LABEL_21:

      *a2 = v12;
      a2[1] = v14;
      goto LABEL_7;
    }
    objc_opt_self(MPModelTVEpisode);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindTVEpisode;
      goto LABEL_6;
    }
    objc_opt_self(MPModelTVSeason);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindTVSeason;
      goto LABEL_6;
    }
    objc_opt_self(MPModelTVShow);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindTVShow;
      goto LABEL_6;
    }
    objc_opt_self(MPModelRecordLabel);
    if (swift_dynamicCastObjCClass(v4))
    {
      v5 = &MPStoreItemMetadataItemKindRecordLabel;
      goto LABEL_6;
    }
  }
}

void ModelObjectBackedStoreItemMetadata.lastModifiedDate.getter(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  __n128 v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = sub_10000B4C8(&qword_10054FB70);
  __chkstk_darwin(v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (void *)objc_opt_self(MPModelObject);
  v8 = swift_allocObject(&unk_10050D358, 32, 7);
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v5;
  v9 = swift_allocObject(&unk_10050D380, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001EC25C;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_100150E54;
  v16 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D398;
  v10 = _Block_copy(aBlock);
  v11 = v16;
  v12 = v1;
  swift_retain(v9);
  objc_msgSend(v7, "performWithoutEnforcement:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 147, 688, 49, 1, v13);
  swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100011530((uint64_t)v5, a1, &qword_10054FB70);
    swift_release(v8);
  }
}

void sub_1001E8C68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void **v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v30 = a2;
  v29 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000B4C8(&qword_10054FB70);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_100551DC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v28 - v17;
  v19 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(v19, v31, 0, 0);
  v20 = *v19;
  if (v20)
  {
    objc_opt_self(MPModelPlaylist);
    v21 = swift_dynamicCastObjCClass(v20);
    if (v21)
    {
      v22 = (void *)v21;
      v23 = v20;
      v24 = objc_msgSend(v22, "lastModifiedDateComponents");
      if (v24)
      {
        v25 = v24;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v24);

        v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v26(v11, v16, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
        {
          v26(v18, v11, v12);
          v27 = objc_msgSend((id)objc_opt_self(MPStoreItemMetadata), "storeServerCalendar");
          static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

          Calendar.date(from:)(v18);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v29);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
          sub_10007B328((uint64_t)v8, v30, &qword_10054FB70);
          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
      }

      sub_100011694((uint64_t)v11, &qword_100551DC8);
    }
  }
}

void ModelObjectBackedStoreItemMetadata.movementCount.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D3D0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D3F8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC274;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D410;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 699, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.movementName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D448, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050D470, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC2AC;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050D488;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 714, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.movementNumber.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D4C0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D4E8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC2E4;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D500;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 729, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void ModelObjectBackedStoreItemMetadata.name.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D538, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050D560, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC31C;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050D578;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 744, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001E94B4(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v37, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelAlbum);
    v6 = swift_dynamicCastObjCClass(v5);
    if (v6)
    {
      v7 = (void *)v6;
      v8 = v5;
      v9 = objc_msgSend(v7, "title");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelArtist);
    v10 = swift_dynamicCastObjCClass(v5);
    if (v10)
    {
      v11 = (void *)v10;
      v8 = v5;
      v9 = objc_msgSend(v11, "name");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelCurator);
    v12 = swift_dynamicCastObjCClass(v5);
    if (v12)
    {
      v13 = (void *)v12;
      v8 = v5;
      v9 = objc_msgSend(v13, "name");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelMovie);
    v14 = swift_dynamicCastObjCClass(v5);
    if (v14)
    {
      v15 = (void *)v14;
      v8 = v5;
      v9 = objc_msgSend(v15, "title");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelPlaylist);
    v16 = swift_dynamicCastObjCClass(v5);
    if (v16)
    {
      v17 = (void *)v16;
      v8 = v5;
      v9 = objc_msgSend(v17, "name");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelSocialPerson);
    v18 = swift_dynamicCastObjCClass(v5);
    if (v18)
    {
      v19 = (void *)v18;
      v8 = v5;
      v9 = objc_msgSend(v19, "name");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelRadioStation);
    v20 = swift_dynamicCastObjCClass(v5);
    if (v20)
    {
      v21 = (void *)v20;
      v8 = v5;
      v9 = objc_msgSend(v21, "name");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelSong);
    v22 = swift_dynamicCastObjCClass(v5);
    if (v22)
    {
      v23 = (void *)v22;
      v8 = v5;
      v9 = objc_msgSend(v23, "title");
      if (!v9)
        goto LABEL_38;
      goto LABEL_28;
    }
    objc_opt_self(MPModelTVEpisode);
    v24 = swift_dynamicCastObjCClass(v5);
    if (v24)
    {
      v25 = (void *)v24;
      v8 = v5;
      v9 = objc_msgSend(v25, "title");
      if (v9)
      {
LABEL_28:
        v26 = v9;
        v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v29 = v28;

LABEL_40:
        v36 = a2[1];
        *a2 = v27;
        a2[1] = v29;
        return swift_bridgeObjectRelease(v36);
      }
    }
    else
    {
      objc_opt_self(MPModelTVSeason);
      v30 = swift_dynamicCastObjCClass(v5);
      if (!v30)
      {
        objc_opt_self(MPModelTVShow);
        result = swift_dynamicCastObjCClass(v5);
        if (!result)
          return result;
        v35 = (void *)result;
        v8 = v5;
        v9 = objc_msgSend(v35, "title");
        if (!v9)
          goto LABEL_38;
        goto LABEL_28;
      }
      v31 = (void *)v30;
      v8 = v5;
      v32 = objc_msgSend(v31, "show");
      v27 = v32;
      if (!v32)
      {

LABEL_39:
        v29 = 0;
        goto LABEL_40;
      }
      v33 = objc_msgSend(v32, "title");

      if (v33)
      {
        v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v29 = v34;

        goto LABEL_40;
      }

    }
LABEL_38:

    v27 = 0;
    goto LABEL_39;
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.nameRaw.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D5B0, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050D5D8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC334;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050D5F0;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 779, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001E9A28(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(void), uint64_t (*a5)(_QWORD), uint64_t (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v10 = sub_10000B4C8(a3);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1;
  a4();

  v14 = a5(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
  {
    v16 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  }
  return v16;
}

void ModelObjectBackedStoreItemMetadata.releaseDate.getter(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  __n128 v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = sub_10000B4C8(&qword_10054FB70);
  __chkstk_darwin(v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (void *)objc_opt_self(MPModelObject);
  v8 = swift_allocObject(&unk_10050D628, 32, 7);
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v5;
  v9 = swift_allocObject(&unk_10050D650, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001EC36C;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_100150E54;
  v16 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D668;
  v10 = _Block_copy(aBlock);
  v11 = v16;
  v12 = v1;
  swift_retain(v9);
  objc_msgSend(v7, "performWithoutEnforcement:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 147, 794, 49, 1, v13);
  swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100011530((uint64_t)v5, a1, &qword_10054FB70);
    swift_release(v8);
  }
}

void sub_1001E9CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void **v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72[24];

  v71 = a2;
  v3 = type metadata accessor for DateComponents(0);
  v70 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v69 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_100551DC8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v67 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v67 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v67 - v15;
  v17 = sub_10000B4C8(&qword_10054FB70);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v67 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v67 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v67 - v27;
  v29 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(v29, v72, 0, 0);
  v30 = *v29;
  if (v30)
  {
    v68 = v3;
    objc_opt_self(MPModelAlbum);
    v31 = swift_dynamicCastObjCClass(v30);
    if (v31)
    {
      v32 = (void *)v31;
      v33 = v30;
      v34 = objc_msgSend(v32, "releaseDateComponents");
      if (v34)
      {
        v35 = v34;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v34);

        v36 = 0;
      }
      else
      {
        v36 = 1;
      }
      v43 = v68;
      v44 = v70;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v14, v36, 1, v68);
      sub_100011530((uint64_t)v14, (uint64_t)v16, &qword_100551DC8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v16, 1, v43))
      {

        sub_100011694((uint64_t)v16, &qword_100551DC8);
        v45 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v28, 1, 1, v45);
      }
      else
      {
        v46 = v69;
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v69, v16, v43);
        v47 = sub_100011694((uint64_t)v16, &qword_100551DC8);
        DateComponents.date.getter(v47);

        (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
      }
    }
    else
    {
      objc_opt_self(MPModelPlaylist);
      v37 = swift_dynamicCastObjCClass(v30);
      if (v37)
      {
        v38 = (void *)v37;
        v39 = v30;
        v40 = objc_msgSend(v38, "releaseDateComponents");
        if (v40)
        {
          v41 = v40;
          static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v40);

          v42 = 0;
        }
        else
        {
          v42 = 1;
        }
        v54 = v68;
        v55 = v70;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v8, v42, 1, v68);
        sub_100011530((uint64_t)v8, (uint64_t)v11, &qword_100551DC8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v11, 1, v54))
        {

          sub_100011694((uint64_t)v11, &qword_100551DC8);
          v56 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v26, 1, 1, v56);
        }
        else
        {
          v57 = v69;
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v69, v11, v54);
          v58 = sub_100011694((uint64_t)v11, &qword_100551DC8);
          DateComponents.date.getter(v58);

          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
        }
        v28 = v26;
      }
      else
      {
        objc_opt_self(MPModelTVEpisode);
        v48 = swift_dynamicCastObjCClass(v30);
        if (v48)
        {
          v49 = (void *)v48;
          v50 = v30;
          v51 = objc_msgSend(v49, "releaseDate");
          if (v51)
          {
            v52 = v51;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

            v53 = type metadata accessor for Date(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v23, 0, 1, v53);
          }
          else
          {

            v65 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v23, 1, 1, v65);
          }
          v28 = v23;
        }
        else
        {
          objc_opt_self(MPModelMovie);
          v59 = swift_dynamicCastObjCClass(v30);
          if (!v59)
            return;
          v60 = (void *)v59;
          v61 = v30;
          v62 = objc_msgSend(v60, "releaseDate");
          if (v62)
          {
            v63 = v62;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

            v64 = type metadata accessor for Date(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v20, 0, 1, v64);
          }
          else
          {

            v66 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v20, 1, 1, v66);
          }
          v28 = v20;
        }
      }
    }
    sub_10007B328((uint64_t)v28, v71, &qword_10054FB70);
  }
}

id sub_1001EA274(void *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD v12[3];
  uint64_t v13;

  v4 = a1;
  a3(v12);

  v5 = v13;
  if (!v13)
    return 0;
  v6 = sub_10000D900(v12, v13);
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v9, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  sub_100011758(v12);
  return v10;
}

void ModelObjectBackedStoreItemMetadata.socialProfileID.getter(uint64_t a1@<X8>)
{
  void *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  __n128 v9;
  char isEscapingClosureAtFileLocation;
  _QWORD v11[5];
  uint64_t v12;
  _OWORD v13[2];

  memset(v13, 0, sizeof(v13));
  v3 = (void *)objc_opt_self(MPModelObject);
  v4 = swift_allocObject(&unk_10050D6A0, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v13;
  v5 = swift_allocObject(&unk_10050D6C8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1001EC384;
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = sub_100150E54;
  v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100185F2C;
  v11[3] = &unk_10050D6E0;
  v6 = _Block_copy(v11);
  v7 = v12;
  v8 = v1;
  swift_retain(v5);
  objc_msgSend(v3, "performWithoutEnforcement:", v6, swift_release(v7).n128_f64[0]);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 147, 814, 49, 1, v9);
  swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100011530((uint64_t)v13, a1, &qword_100550FD0);
    swift_release(v4);
  }
}

void sub_1001EA4AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  __int128 v10;
  __int128 v11;
  _BYTE v12[24];

  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v12, 0, 0);
  v5 = *v4;
  if (v5)
  {
    objc_opt_self(MPModelSocialPerson);
    if (swift_dynamicCastObjCClass(v5))
    {
      v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID);
      swift_beginAccess(v6, v9, 0, 0);
      v7 = v6[1];
      if (v7)
      {
        v8 = *v6;
        *((_QWORD *)&v11 + 1) = &type metadata for String;
        *(_QWORD *)&v10 = v8;
        *((_QWORD *)&v10 + 1) = v7;
      }
      else
      {
        v10 = 0u;
        v11 = 0u;
      }
      swift_bridgeObjectRetain();
      sub_10007B328((uint64_t)&v10, a2, &qword_100550FD0);
    }
  }
}

void ModelObjectBackedStoreItemMetadata.seasonNumber.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D718, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D740, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC39C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D758;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 829, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001EA6F4(uint64_t a1, _QWORD *a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _BYTE v11[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v11, 0, 0);
  v4 = *v3;
  if (v4)
  {
    objc_opt_self(MPModelTVEpisode);
    v5 = swift_dynamicCastObjCClass(v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = v4;
      v8 = objc_msgSend(v6, "season");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "number");

        *a2 = v10;
      }
      else
      {

      }
    }
  }
}

void ModelObjectBackedStoreItemMetadata.shortName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D790, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050D7B8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC3B4;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050D7D0;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 846, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001EA914(uint64_t a1, uint64_t *a2, _QWORD *a3, SEL *a4, _QWORD *a5, SEL *a6)
{
  void **v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[24];

  v11 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v29, 0, 0);
  v13 = *v11;
  if (v13)
  {
    objc_opt_self(*a3);
    v14 = swift_dynamicCastObjCClass(v13);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = v13;
      v17 = objc_msgSend(v15, *a4);
      if (v17)
      {
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v21 = v20;

      }
      else
      {

        v19 = 0;
        v21 = 0;
      }
      v28 = a2[1];
      *a2 = v19;
    }
    else
    {
      objc_opt_self(*a5);
      result = swift_dynamicCastObjCClass(v13);
      if (!result)
        return result;
      v22 = (void *)result;
      v23 = v13;
      v24 = objc_msgSend(v22, *a6);
      if (v24)
      {
        v25 = v24;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v21 = v27;

      }
      else
      {

        v26 = 0;
        v21 = 0;
      }
      v28 = a2[1];
      *a2 = v26;
    }
    a2[1] = v21;
    return swift_bridgeObjectRelease(v28);
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.shortURL.getter(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  __n128 v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (void *)objc_opt_self(MPModelObject);
  v8 = swift_allocObject(&unk_10050D808, 32, 7);
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v5;
  v9 = swift_allocObject(&unk_10050D830, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001EC3FC;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_100150E54;
  v16 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D848;
  v10 = _Block_copy(aBlock);
  v11 = v16;
  v12 = v1;
  swift_retain(v9);
  objc_msgSend(v7, "performWithoutEnforcement:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 147, 863, 49, 1, v13);
  swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100011530((uint64_t)v5, a1, &qword_10054C950);
    swift_release(v8);
  }
}

void ModelObjectBackedStoreItemMetadata.showComposer.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D880, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D8A8, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC42C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D8C0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 878, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001EADAC(uint64_t a1, _BYTE *a2, _QWORD *a3, SEL *a4)
{
  uint64_t *v7;
  id result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v10, 0, 0);
  v9 = *v7;
  if (v9)
  {
    objc_opt_self(*a3);
    result = (id)swift_dynamicCastObjCClass(v9);
    if (result)
    {
      result = objc_msgSend(result, *a4);
      *a2 = (_BYTE)result;
    }
  }
  return result;
}

uint64_t ModelObjectBackedStoreItemMetadata.storeID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID);
  swift_beginAccess(v3, v7, 0, 0);
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    *(_QWORD *)(a1 + 24) = &type metadata for String;
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return swift_bridgeObjectRetain();
}

void ModelObjectBackedStoreItemMetadata.isStoreRedownloadable.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  char v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D8F8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D920, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC464;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D938;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 897, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

void sub_1001EB08C(uint64_t a1, _BYTE *a2)
{
  void **v3;
  void *v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  id v11;
  char v12;
  _BYTE v13[24];

  v3 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v13, 0, 0);
  v4 = *v3;
  if (v4)
  {
    ObjectType = swift_getObjectType(v4);
    v6 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for LibraryAddable);
    if (v6)
      v7 = v6;
    else
      v7 = 0;
    if (v6)
      v8 = v4;
    else
      v8 = 0;
    if (v8)
    {
      v9 = swift_getObjectType(v8);
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
      v11 = v4;
      v12 = v10(v9, v7);

      *a2 = v12 & 1;
    }
  }
}

void ModelObjectBackedStoreItemMetadata.trackCount.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D970, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050D998, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC47C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050D9B0;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 907, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001EB2C0(uint64_t a1, _QWORD *a2, _QWORD *a3, SEL *a4)
{
  uint64_t *v7;
  id result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v10, 0, 0);
  v9 = *v7;
  if (v9)
  {
    objc_opt_self(*a3);
    result = (id)swift_dynamicCastObjCClass(v9);
    if (result)
    {
      result = objc_msgSend(result, *a4);
      *a2 = result;
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.trackNumber.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050D9E8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v11;
  v3 = swift_allocObject(&unk_10050DA10, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC4B4;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_100150E54;
  v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050DA28;
  v4 = _Block_copy(aBlock);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 922, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

id sub_1001EB4B4(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  id result;
  uint64_t v5;
  char **v6;
  _BYTE v7[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = (id)swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v7, 0, 0);
  v5 = *v3;
  if (v5)
  {
    objc_opt_self(MPModelSong);
    result = (id)swift_dynamicCastObjCClass(v5);
    if (result)
    {
      v6 = &selRef_trackNumber;
    }
    else
    {
      objc_opt_self(MPModelTVEpisode);
      result = (id)swift_dynamicCastObjCClass(v5);
      if (!result)
        return result;
      v6 = &selRef_episodeNumber;
    }
    result = objc_msgSend(result, *v6);
    *a2 = result;
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.url.getter(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  __n128 v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (void *)objc_opt_self(MPModelObject);
  v8 = swift_allocObject(&unk_10050DA60, 32, 7);
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v5;
  v9 = swift_allocObject(&unk_10050DA88, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001EC4CC;
  *(_QWORD *)(v9 + 24) = v8;
  aBlock[4] = sub_100150E54;
  v16 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10050DAA0;
  v10 = _Block_copy(aBlock);
  v11 = v16;
  v12 = v1;
  swift_retain(v9);
  objc_msgSend(v7, "performWithoutEnforcement:", v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 147, 939, 49, 1, v13);
  swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100011530((uint64_t)v5, a1, &qword_10054C950);
    swift_release(v8);
  }
}

void sub_1001EB72C(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void **v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v6 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  swift_beginAccess(v9, v19, 0, 0);
  v10 = *v9;
  if (v10)
  {
    objc_opt_self(MPModelPlaylist);
    v11 = swift_dynamicCastObjCClass(v10);
    if (v11)
    {
      v12 = (void *)v11;
      v13 = v10;
      v14 = objc_msgSend(v12, *a3);
      if (v14)
      {
        v15 = v14;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

        v16 = type metadata accessor for URL(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
      }
      else
      {

        v17 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
      }
      sub_10007B328((uint64_t)v8, a2, &qword_10054C950);
    }
  }
}

id sub_1001EB890(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void ModelObjectBackedStoreItemMetadata.workName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  __n128 v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[5];
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v1 = (void *)objc_opt_self(MPModelObject);
  v2 = swift_allocObject(&unk_10050DAD8, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v11;
  v3 = swift_allocObject(&unk_10050DB00, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1001EC4FC;
  *(_QWORD *)(v3 + 24) = v2;
  v9[4] = sub_100150E54;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100185F2C;
  v9[3] = &unk_10050DB18;
  v4 = _Block_copy(v9);
  v5 = v10;
  v6 = v0;
  swift_retain(v3);
  objc_msgSend(v1, "performWithoutEnforcement:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 147, 954, 49, 1, v7);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    swift_release(v2);
}

uint64_t sub_1001EBA40(uint64_t a1, uint64_t *a2, _QWORD *a3, SEL *a4)
{
  void **v7;
  uint64_t result;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[24];

  v7 = (void **)(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject, v18, 0, 0);
  v9 = *v7;
  if (v9)
  {
    objc_opt_self(*a3);
    result = swift_dynamicCastObjCClass(v9);
    if (result)
    {
      v10 = (void *)result;
      v11 = v9;
      v12 = objc_msgSend(v10, *a4);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

      }
      else
      {

        v14 = 0;
        v16 = 0;
      }
      v17 = a2[1];
      *a2 = v14;
      a2[1] = v16;
      return swift_bridgeObjectRelease(v17);
    }
  }
  return result;
}

void ModelObjectBackedStoreItemMetadata.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCore.ModelObjectBackedStoreItemMetadata", 44, "init()", 6, 0);
  __break(1u);
}

id ModelObjectBackedStoreItemMetadata.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ModelObjectBackedStoreItemMetadata()
{
  return objc_opt_self(_TtC9MusicCore34ModelObjectBackedStoreItemMetadata);
}

id sub_1001EBBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  NSDictionary v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  objc_class *v15;
  id v16;
  objc_super v18;

  v4 = v3;
  v7 = sub_10000B4C8(&qword_10054FB70);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObject] = 0;
  v10 = &v4[OBJC_IVAR____TtC9MusicCore34ModelObjectBackedStoreItemMetadata_modelObjectStoreID];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1001628D0(a3, (uint64_t)v9);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  v15 = (objc_class *)type metadata accessor for ModelObjectBackedStoreItemMetadata();
  v18.receiver = v4;
  v18.super_class = v15;
  v16 = objc_msgSendSuper2(&v18, "initWithStorePlatformDictionary:parentStoreItemMetadata:expirationDate:", v11.super.isa, a2, isa);

  sub_100011694(a3, &qword_10054FB70);
  return v16;
}

uint64_t sub_1001EBD5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBD80()
{
  uint64_t v0;

  return sub_1001E442C(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1001EBD88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBD98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001EBDA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001EBDB0()
{
  uint64_t v0;

  sub_1001E48FC(*(_QWORD *)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_1001EBDB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EBDC8()
{
  uint64_t v0;

  sub_1001E4BFC(*(_QWORD *)(v0 + 16), *(char ***)(v0 + 24));
}

uint64_t sub_1001EBDD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EBDE0()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelRadioStation_ptr, (SEL *)&selRef_isBeats1);
}

uint64_t sub_1001EBE08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBE18()
{
  uint64_t v0;

  return sub_1001E596C(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), (SEL *)&selRef_album, (SEL *)&selRef_title);
}

uint64_t sub_1001EBE40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EBE50()
{
  uint64_t v0;

  sub_1001E55F0(*(_QWORD *)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_1001EBE58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EBE68()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelAlbum_ptr, (SEL *)&selRef_isCompilation);
}

uint64_t sub_1001EBE90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBEA0()
{
  uint64_t v0;

  return sub_1001E596C(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), (SEL *)&selRef_composer, (SEL *)&selRef_name);
}

uint64_t sub_1001EBEC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBED8()
{
  uint64_t v0;

  return sub_1001EA914(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), MPModelAlbum_ptr, (SEL *)&selRef_copyrightText, MPModelSong_ptr, (SEL *)&selRef_copyrightText);
}

uint64_t sub_1001EBF0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EBF1C()
{
  uint64_t v0;

  sub_1001E5D2C(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1001EBF24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBF34()
{
  uint64_t v0;

  return sub_1001E5FD0(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1001EBF3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EBF4C()
{
  uint64_t v0;

  return sub_1001EB2C0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), MPModelAlbum_ptr, (SEL *)&selRef_discCount);
}

uint64_t sub_1001EBF74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EBF84()
{
  uint64_t v0;

  return sub_1001EB2C0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), MPModelSong_ptr, (SEL *)&selRef_discNumber);
}

uint64_t sub_1001EBFAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EBFBC()
{
  uint64_t v0;

  return sub_1001E65E4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1001EBFC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EBFD4()
{
  uint64_t v0;

  return sub_1001E67E8(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), (SEL *)&selRef_editorNotes);
}

uint64_t sub_1001EBFF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC004()
{
  uint64_t v0;

  return sub_1001E67E8(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), (SEL *)&selRef_shortEditorNotes);
}

uint64_t sub_1001EC024()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC034()
{
  uint64_t v0;

  return sub_1001EB2C0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), MPModelTVShow_ptr, (SEL *)&selRef_episodesCount);
}

uint64_t sub_1001EC05C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC06C()
{
  uint64_t v0;

  return sub_1001E6DC0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1001EC074()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC084()
{
  uint64_t v0;

  sub_1001E7070(*(_QWORD *)(v0 + 16), *(void ***)(v0 + 24));
}

uint64_t sub_1001EC08C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC09C()
{
  uint64_t v0;

  return sub_1001EBA40(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), MPModelSocialPerson_ptr, (SEL *)&selRef_handle);
}

uint64_t sub_1001EC0C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC0D4()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelArtist_ptr, (SEL *)&selRef_hasBiography);
}

uint64_t sub_1001EC0FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC10C()
{
  uint64_t v0;

  sub_1001E756C(*(_QWORD *)(v0 + 16), *(unsigned __int8 **)(v0 + 24));
}

uint64_t sub_1001EC114()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC124()
{
  uint64_t v0;

  sub_1001E77AC(*(_QWORD *)(v0 + 16), *(unsigned __int8 **)(v0 + 24));
}

uint64_t sub_1001EC12C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC13C()
{
  uint64_t v0;

  return sub_1001E79E0(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_1001EC144()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC154()
{
  uint64_t v0;

  return sub_1001E7BE8(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_1001EC15C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC16C()
{
  uint64_t v0;

  return sub_1001E7E3C(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_1001EC174()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC184()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelAlbum_ptr, (SEL *)&selRef_isPreorder);
}

uint64_t sub_1001EC1AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC1BC()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelSocialPerson_ptr, (SEL *)&selRef_isPrivate);
}

uint64_t sub_1001EC1E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC1F4()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelSocialPerson_ptr, (SEL *)&selRef_isVerified);
}

uint64_t sub_1001EC21C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC22C()
{
  uint64_t v0;

  return sub_1001E84A4(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_1001EC234()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC244()
{
  uint64_t v0;

  sub_1001E8674(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1001EC24C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC25C()
{
  uint64_t v0;

  sub_1001E8C68(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001EC264()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC274()
{
  uint64_t v0;

  return sub_1001EB2C0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), MPModelSong_ptr, (SEL *)&selRef_classicalMovementCount);
}

uint64_t sub_1001EC29C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC2AC()
{
  uint64_t v0;

  return sub_1001EBA40(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), MPModelSong_ptr, (SEL *)&selRef_classicalMovement);
}

uint64_t sub_1001EC2D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC2E4()
{
  uint64_t v0;

  return sub_1001EB2C0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), MPModelSong_ptr, (SEL *)&selRef_classicalMovementNumber);
}

uint64_t sub_1001EC30C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC31C()
{
  uint64_t v0;

  return sub_1001E94B4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1001EC324()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC334()
{
  uint64_t v0;

  return sub_1001EBA40(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), MPModelSocialPerson_ptr, (SEL *)&selRef_uncensoredName);
}

uint64_t sub_1001EC35C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC36C()
{
  uint64_t v0;

  sub_1001E9CAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001EC374()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC384()
{
  uint64_t v0;

  sub_1001EA4AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001EC38C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC39C()
{
  uint64_t v0;

  sub_1001EA6F4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1001EC3A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC3B4()
{
  uint64_t v0;

  return sub_1001EA914(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), MPModelCurator_ptr, (SEL *)&selRef_shortName, MPModelTVShow_ptr, (SEL *)&selRef_shortTitle);
}

uint64_t sub_1001EC3EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC3FC()
{
  uint64_t v0;

  sub_1001EB72C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_shareShortURL);
}

uint64_t sub_1001EC41C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC42C()
{
  uint64_t v0;

  return sub_1001EADAC(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24), MPModelSong_ptr, (SEL *)&selRef_shouldShowComposer);
}

uint64_t sub_1001EC454()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC464()
{
  uint64_t v0;

  sub_1001EB08C(*(_QWORD *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_1001EC46C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC47C()
{
  uint64_t v0;

  return sub_1001EB2C0(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), MPModelAlbum_ptr, (SEL *)&selRef_trackCount);
}

uint64_t sub_1001EC4A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001EC4B4()
{
  uint64_t v0;

  return sub_1001EB4B4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_1001EC4BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001EC4CC()
{
  uint64_t v0;

  sub_1001EB72C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_shareURL);
}

uint64_t sub_1001EC4EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC4FC()
{
  uint64_t v0;

  return sub_1001EBA40(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), MPModelSong_ptr, (SEL *)&selRef_classicalWork);
}

uint64_t sub_1001EC524()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EC534(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

uint64_t MotionMode.allowsMotion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  int v9;
  uint64_t result;
  id v11;
  id v12;
  unint64_t v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;

  v1 = type metadata accessor for MotionMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v8((char *)&v15 - v6, v0, v1);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v7, v1);
  if (v9 == enum case for MotionMode.off(_:))
    return 0;
  if (v9 == enum case for MotionMode.wifiOnly(_:))
  {
    v11 = objc_msgSend((id)objc_opt_self(ICEnvironmentMonitor), "sharedMonitor");
    v12 = objc_msgSend(v11, "networkType");

    return ICEnvironmentNetworkTypeIsWiFi(v12);
  }
  else if (v9 == enum case for MotionMode.on(_:))
  {
    return 1;
  }
  else
  {
    v8(v5, v0, v1);
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v15 = 0xD00000000000001ELL;
    v16 = 0x800000010044C4C0;
    v13 = sub_1001EC980();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v13);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "MusicCore/MotionMode.swift", 26, 2, 18, 0);
    __break(1u);
  }
  return result;
}

unint64_t sub_1001EC980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100551DD0;
  if (!qword_100551DD0)
  {
    v1 = type metadata accessor for MotionMode(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for MotionMode, v1);
    atomic_store(result, (unint64_t *)&qword_100551DD0);
  }
  return result;
}

uint64_t sub_1001EC9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(uint64_t *);
  _QWORD v27[3];
  double v28;

  v8 = sub_10000B4C8(&qword_100551DE0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Edge.Set.top.getter(v9);
  *(double *)&v27[1] = a4;
  v27[2] = a2;
  sub_10000B4C8(&qword_100551DE8);
  State.wrappedValue.getter(&v28);
  v13 = EdgeInsets.init(_all:)(v28 * -0.5);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = sub_10000B4C8(&qword_100551DF0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v11, a1, v20);
  v21 = &v11[*(int *)(v8 + 36)];
  *v21 = v12;
  *((double *)v21 + 1) = v13;
  *((_QWORD *)v21 + 2) = v15;
  *((_QWORD *)v21 + 3) = v17;
  *((_QWORD *)v21 + 4) = v19;
  v21[40] = 0;
  v22 = sub_1001ECEEC();
  v23 = swift_allocObject(&unk_10050DBD0, 32, 7);
  *(double *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a2;
  sub_1001ED218((uint64_t)v11, a3);
  v24 = sub_10000B4C8(&qword_100551DF8);
  *(_QWORD *)(a3 + *(int *)(v24 + 52)) = v22;
  v25 = (void (**)(uint64_t *))(a3 + *(int *)(v24 + 56));
  *v25 = sub_1001ED20C;
  v25[1] = (void (*)(uint64_t *))v23;
  swift_retain(a2);
  return sub_100011694((uint64_t)v11, &qword_100551DE0);
}

void sub_1001ECB5C(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];

  v5 = *a1;
  v6 = static Animation.easeInOut(duration:)(0.25);
  *(double *)&v7[2] = a3;
  v7[3] = a2;
  v7[4] = v5;
  withAnimation<A>(_:_:)(v6, sub_1001ED260, v7, (char *)&type metadata for () + 8);
  swift_release(v6);
}

uint64_t sub_1001ECBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001EC9C8(a1, *(_QWORD *)(v2 + 8), a2, *(double *)v2);
}

uint64_t View.keyboardReactive()(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __chkstk_darwin(a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v3);
  v7 = 0;
  State.init(wrappedValue:)(&v8, &v7, &type metadata for CGFloat);
  return ModifiedContent.init(content:modifier:)(v3, &v8, a1, &type metadata for KeyboardObserverModifier);
}

uint64_t sub_1001ECC98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[1];
  v2 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for KeyboardObserverModifier);
  v4[0] = v1;
  v4[1] = sub_1001ECCEC();
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

unint64_t sub_1001ECCEC()
{
  unint64_t result;

  result = qword_100551DD8;
  if (!qword_100551DD8)
  {
    result = swift_getWitnessTable(byte_100430F6C, &type metadata for KeyboardObserverModifier);
    atomic_store(result, (unint64_t *)&qword_100551DD8);
  }
  return result;
}

_QWORD *assignWithCopy for KeyboardObserverModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a1[1];
  v4 = a2[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

_QWORD *assignWithTake for KeyboardObserverModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a1[1];
  a1[1] = a2[1];
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardObserverModifier()
{
  return &type metadata for KeyboardObserverModifier;
}

uint64_t sub_1001ECDB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1004865CC, 1);
}

void sub_1001ECDC8(uint64_t a1@<X0>, CGFloat *a2@<X8>)
{
  *a2 = sub_1001ECDF0(a1);
}

CGFloat sub_1001ECDF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v8[2];
  CGRect v9;
  __int128 v10;
  __int128 v11;

  v1 = Notification.userInfo.getter(a1);
  if (!v1)
  {
    v10 = 0u;
    v11 = 0u;
LABEL_10:
    sub_100011694((uint64_t)&v10, &qword_100550FD0);
    return 0.0;
  }
  v2 = v1;
  v8[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v8[1] = v3;
  AnyHashable.init<A>(_:)(&v9, v8, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v4 = sub_1001461DC((uint64_t)&v9), (v5 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)&v10);
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10013BB48((uint64_t)&v9);
  if (!*((_QWORD *)&v11 + 1))
    goto LABEL_10;
  type metadata accessor for CGRect(0);
  if ((swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
    return CGRectGetHeight(v9);
  return 0.0;
}

uint64_t sub_1001ECEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v0 = sub_10000B4C8(&qword_100551E00);
  v1 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  v36 = v1;
  __chkstk_darwin(v0);
  v34 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000B4C8(&qword_100551E08);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v14 = (void *)objc_opt_self(NSNotificationCenter);
  v15 = objc_msgSend(v14, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIKeyboardWillShowNotification, 0);

  v16 = sub_1001ED2B8();
  Publisher.map<A>(_:)(sub_1001ECDC8, 0, v3, &type metadata for CGFloat, v16);
  v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v6, v3);
  v18 = objc_msgSend(v14, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIKeyboardWillHideNotification, 0);

  Publisher.map<A>(_:)(sub_1000AD020, 0, v3, &type metadata for CGFloat, v16);
  v17(v6, v3);
  v19 = sub_10000B4C8(&qword_100551E18);
  v20 = *(_QWORD *)(v8 + 72);
  v21 = *(unsigned __int8 *)(v8 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v19, v22 + 2 * v20, v21 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_100424BA0;
  v24 = v23 + v22;
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
  v25(v24, v13, v7);
  v25(v24 + v20, v11, v7);
  v26 = sub_100012324(&qword_100551E20, &qword_100551E08, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v27 = v34;
  Publishers.MergeMany.init(_:)(v23, v7, v26);
  v28 = sub_100012324(&qword_100551E28, &qword_100551E00, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v29 = v35;
  v30 = Publisher.eraseToAnyPublisher()(v35, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v29);
  v31 = *(void (**)(char *, uint64_t))(v8 + 8);
  v31(v11, v7);
  v31(v13, v7);
  return v30;
}

uint64_t sub_1001ED1E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001ED20C(uint64_t *a1)
{
  uint64_t v1;

  sub_1001ECB5C(a1, *(_QWORD *)(v1 + 24), *(double *)(v1 + 16));
}

uint64_t sub_1001ED218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100551DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001ED260()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  v1 = v0[2];
  v2 = v0[3];
  v5[0] = v0[4];
  v5[1] = v1;
  v5[2] = v2;
  v3 = sub_10000B4C8(&qword_100551DE8);
  return State.wrappedValue.setter(v5, v3);
}

unint64_t sub_1001ED2B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100551E10;
  if (!qword_100551E10)
  {
    v1 = type metadata accessor for NSNotificationCenter.Publisher(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSNotificationCenter.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_100551E10);
  }
  return result;
}

uint64_t sub_1001ED300()
{
  return sub_100012324(qword_100551E30, &qword_100551DF8, (const char *)&protocol conformance descriptor for SubscriptionView<A, B>);
}

uint64_t sub_1001ED32C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  Published.init(initialValue:)(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t property wrapper backing initializer of OptionalObservableObject.output(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for Optional(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v5, a1, v3);
  sub_1001ED32C((uint64_t)v6, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t OptionalObservableObject.output.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100430FC0);
  v4 = swift_getKeyPath(&unk_100430FF8);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_1001ED4E8@<X0>(_QWORD *a1@<X8>)
{
  return OptionalObservableObject.output.getter(a1);
}

uint64_t sub_1001ED508(uint64_t a1)
{
  return sub_1001EDC50(a1);
}

uint64_t sub_1001ED528()
{
  return 8;
}

_QWORD *sub_1001ED534(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t OptionalObservableObject.output.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  sub_1001EDC50(a1);
  v4 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void (*OptionalObservableObject.output.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_100430FC0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_100430FF8);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1001ED620;
}

void sub_1001ED620(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t OptionalObservableObject.$output.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v1 = *v0;
  swift_beginAccess((char *)v0 + *(_QWORD *)(*v0 + 88), v5, 33, 0);
  v2 = type metadata accessor for Optional(255, *(_QWORD *)(v1 + 80));
  v3 = type metadata accessor for Published(0, v2);
  Published.projectedValue.getter(v3);
  return swift_endAccess(v5);
}

uint64_t OptionalObservableObject.$output.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  sub_1001EDD2C(a1);
  v4 = type metadata accessor for Optional(255, *(_QWORD *)(v3 + 80));
  v5 = type metadata accessor for Published.Publisher(0, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void (*OptionalObservableObject.$output.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for Optional(255, *(_QWORD *)(*(_QWORD *)v1 + 80));
  v5 = type metadata accessor for Published.Publisher(0, v4);
  v3[1] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[3] = malloc(v7);
  v3[4] = malloc(v7);
  OptionalObservableObject.$output.getter();
  return sub_1001ED7C8;
}

void sub_1001ED7C8(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_1001EDD2C((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_1001EDD2C(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t OptionalObservableObject.__allocating_init(publisher:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  OptionalObservableObject.init(publisher:)(a1);
  return v3;
}

uint64_t *OptionalObservableObject.init(publisher:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = type metadata accessor for Optional(255, v5);
  v7 = type metadata accessor for Published(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = (uint64_t)v2 + *(_QWORD *)(v4 + 88);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))((char *)&v25 - v12, 1, 1, v5);
  property wrapper backing initializer of OptionalObservableObject.output((uint64_t)v13, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14, v11, v7);
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 104)) = 0;
  v15 = (uint64_t)v2 + *(_QWORD *)(*v2 + 96);
  if (!*(_QWORD *)(a1 + 24))
  {
    v19 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v15 = *(_OWORD *)a1;
    *(_OWORD *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 32) = *(_QWORD *)(a1 + 32);
LABEL_8:
    v20 = *(_OWORD *)(a1 + 16);
    v25 = *(_OWORD *)a1;
    v26 = v20;
    v27 = *(_QWORD *)(a1 + 32);
    v16 = *((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_4;
LABEL_9:
    v21 = v27;
    sub_10000D900(&v25, v16);
    swift_retain(v2);
    v18 = Publisher.sink(receiveCompletion:receiveValue:)(CFRange.init(_:), 0, sub_1001EDDF4, v2, v16, v21);
    swift_release(v2);
    if (*(_QWORD *)(a1 + 24))
      sub_100011758((_QWORD *)a1);
    goto LABEL_11;
  }
  sub_1000C53BC(a1, v15);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_8;
  sub_1000C53BC(a1, (uint64_t)&v25);
  v16 = *((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
    goto LABEL_9;
LABEL_4:
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    sub_100011758((_QWORD *)a1);
    v18 = 0;
    v17 = 0;
    if (*((_QWORD *)&v26 + 1))
    {
LABEL_11:
      sub_100011758(&v25);
      v17 = v18;
    }
  }
  v22 = *(_QWORD *)(*v2 + 104);
  v23 = *(uint64_t *)((char *)v2 + v22);
  *(uint64_t *)((char *)v2 + v22) = v17;
  swift_release(v23);
  return v2;
}

uint64_t sub_1001EDAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4 = type metadata accessor for Optional(0, v3);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v10 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v6, a1, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v3);
  sub_1001EDC50((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t *OptionalObservableObject.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t)v0 + *(_QWORD *)(*v0 + 88);
  v2 = type metadata accessor for Optional(255, *(_QWORD *)(*v0 + 80));
  v3 = type metadata accessor for Published(0, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  v4 = *v0;
  v5 = (uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 96));
  if (v5[3])
  {
    sub_100011758(v5);
    v4 = *v0;
  }
  swift_release(*(uint64_t *)((char *)v0 + *(_QWORD *)(v4 + 104)));
  return v0;
}

uint64_t OptionalObservableObject.__deallocating_deinit()
{
  uint64_t v0;

  OptionalObservableObject.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001EDC10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for OptionalObservableObject(0, *(_QWORD *)(a1 + 80), a2, a3);
  result = ObservableObject<>.objectWillChange.getter(v5);
  *a4 = result;
  return result;
}

uint64_t sub_1001EDC50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[4];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = type metadata accessor for Optional(0, v3);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v11 - v6;
  v11[2] = v3;
  KeyPath = swift_getKeyPath(&unk_100430FC0);
  v11[0] = v3;
  v9 = swift_getKeyPath(&unk_100430FF8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_retain(v1);
  return static Published.subscript.setter(v7, v1, KeyPath, v9);
}

uint64_t sub_1001EDD2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v11[24];

  v3 = type metadata accessor for Optional(255, *(_QWORD *)(*(_QWORD *)v1 + 80));
  v4 = type metadata accessor for Published.Publisher(0, v3);
  __chkstk_darwin(v4);
  v6 = &v11[-v5 - 8];
  (*(void (**)(_BYTE *, uint64_t))(v7 + 16))(&v11[-v5 - 8], a1);
  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v11, 33, 0);
  v8 = type metadata accessor for Published(0, v3);
  Published.projectedValue.setter(v6, v8);
  return swift_endAccess(v11);
}

uint64_t sub_1001EDDF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001EDAB0(a1, v1);
}

uint64_t sub_1001EDDFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[3];

  v2 = type metadata accessor for Optional(255, *(_QWORD *)(a1 + 80));
  result = type metadata accessor for Published(319, v2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "(";
    v5[2] = &unk_100431098;
    result = swift_initClassMetadata2(a1, 0, 3, v5, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for OptionalObservableObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalObservableObject);
}

uint64_t PrivacyAcknowledgementObserver.__allocating_init(dispatchOnMainThread:handler:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 56, 7);
  PrivacyAcknowledgementObserver.init(dispatchOnMainThread:handler:)(a1, a2, a3);
  return v7;
}

uint64_t PrivacyAcknowledgementObserver.init(dispatchOnMainThread:handler:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  v5 = (void *)ICPrivacyIdentifierMusic;
  *(_QWORD *)(v3 + 16) = ICPrivacyIdentifierMusic;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  v6 = (void *)objc_opt_self(ICPrivacyInfo);
  v7 = v5;
  swift_retain(a3);
  v8 = objc_msgSend(v6, "sharedPrivacyInfo");
  v9 = swift_allocObject(&unk_10050DD40, 24, 7);
  swift_weakInit(v9 + 16, v3);
  v16[4] = sub_1001EE164;
  v17 = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1001EE16C;
  v16[3] = &unk_10050DD58;
  v10 = _Block_copy(v16);
  v11 = v17;
  v12 = v7;
  v13 = objc_msgSend(v8, "beginObservingPrivacyAcknowledgementForIdentifier:handler:", v12, v10, swift_release(v11).n128_f64[0]);
  swift_release(a3);
  _Block_release(v10);

  v14 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v13;
  swift_unknownObjectRelease(v14);
  return v3;
}

uint64_t sub_1001EE03C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1001EE060(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    if (*(_BYTE *)(Strong + 32) == 1)
    {
      sub_100105D88();
      v8 = swift_allocObject(&unk_10050DD40, 24, 7);
      swift_weakInit(v8 + 16, v7);
      v9 = swift_allocObject(&unk_10050DD90, 25, 7);
      *(_QWORD *)(v9 + 16) = v8;
      *(_BYTE *)(v9 + 24) = a2 & 1;
      swift_retain(v8);
      static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_1001EE3D4, v9);
      swift_release(v7);
      swift_release(v8);
      v10 = v9;
    }
    else
    {
      (*(void (**)(_QWORD))(Strong + 40))(a2 & 1);
      v10 = v7;
    }
    *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  }
  return result;
}

double sub_1001EE164(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001EE060(a1, a2, v2);
}

void sub_1001EE16C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_1001EE1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001EE1D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t PrivacyAcknowledgementObserver.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = (void *)objc_opt_self(ICPrivacyInfo);
    swift_unknownObjectRetain(v1);
    v3 = objc_msgSend(v2, "sharedPrivacyInfo");
    objc_msgSend(v3, "endObservingPrivacyAcknowledgementForIdentifier:withToken:", *(_QWORD *)(v0 + 16), v1);
    swift_unknownObjectRelease(v1);

  }
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t PrivacyAcknowledgementObserver.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = (void *)objc_opt_self(ICPrivacyInfo);
    swift_unknownObjectRetain(v1);
    v3 = objc_msgSend(v2, "sharedPrivacyInfo");
    objc_msgSend(v3, "endObservingPrivacyAcknowledgementForIdentifier:withToken:", *(_QWORD *)(v0 + 16), v1);
    swift_unknownObjectRelease(v1);

  }
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for PrivacyAcknowledgementObserver()
{
  return objc_opt_self(_TtC9MusicCore30PrivacyAcknowledgementObserver);
}

uint64_t sub_1001EE338(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD);
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v7 = *(void (**)(_QWORD))(result + 40);
    v6 = *(_QWORD *)(result + 48);
    swift_retain(v6);
    v7(a2 & 1);
    swift_release(v5);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1001EE3B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001EE3D4()
{
  uint64_t v0;

  return sub_1001EE338(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1001EE3E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v61 = sub_10000B4C8(&qword_100552168);
  v3 = __chkstk_darwin(v61);
  v60 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v59 = (char *)v50 - v6;
  v7 = __chkstk_darwin(v5);
  v58 = (char *)v50 - v8;
  v9 = __chkstk_darwin(v7);
  v57 = (char *)v50 - v10;
  __chkstk_darwin(v9);
  v56 = (char *)v50 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v50[1] = v1;
  v65 = _swiftEmptyArrayStorage;
  sub_100117EE4(0, v12, 0);
  result = sub_1001F111C(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v19 = *(_BYTE *)(a1 + 32);
  v51 = a1 + 80;
  v52 = v12;
  v54 = a1 + 64;
  v55 = a1;
  v53 = v15;
  v20 = v61;
  v21 = (uint64_t)v58;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << v19)
  {
    v24 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_26;
    v62 = v17;
    v63 = 1 << v16;
    v25 = (uint64_t)v56;
    v26 = (uint64_t)&v56[*(int *)(v20 + 48)];
    v27 = *(_QWORD *)(a1 + 48);
    v28 = type metadata accessor for UUID(0);
    v64 = *(_QWORD *)(v28 - 8);
    v29 = v27 + *(_QWORD *)(v64 + 72) * v16;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
    v30(v25, v29, v28);
    v31 = *(_QWORD *)(a1 + 56);
    v32 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
    sub_1001EF020(v31 + *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72) * v16, v26);
    v33 = (uint64_t)v57;
    v30((uint64_t)v57, v25, v28);
    sub_1001EF020(v26, v33 + *(int *)(v20 + 48));
    sub_100011530(v33, v21, &qword_100552168);
    sub_100011694(v25, &qword_100552168);
    v34 = *(int *)(v20 + 48);
    v35 = v59;
    v36 = (uint64_t)&v59[v34];
    v37 = v21 + v34;
    v30((uint64_t)v59, v21, v28);
    sub_1001EF020(v37, v36);
    v38 = (uint64_t)v60;
    v39 = &v60[*(int *)(v20 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v60, v35, v28);
    sub_10013BD5C(v36, (uint64_t)v39);
    v41 = *(_QWORD *)v39;
    v40 = *((_QWORD *)v39 + 1);
    swift_bridgeObjectRetain();
    sub_100011694(v38, &qword_100552168);
    sub_100011694(v21, &qword_100552168);
    v13 = v65;
    result = swift_isUniquelyReferenced_nonNull_native(v65);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100117EE4(0, v13[2] + 1, 1);
      v13 = v65;
    }
    v43 = v13[2];
    v42 = v13[3];
    if (v43 >= v42 >> 1)
    {
      result = (uint64_t)sub_100117EE4((char *)(v42 > 1), v43 + 1, 1);
      v13 = v65;
    }
    v13[2] = v43 + 1;
    v44 = &v13[2 * v43];
    v44[4] = v41;
    v44[5] = v40;
    a1 = v55;
    v19 = *(_BYTE *)(v55 + 32);
    v22 = 1 << v19;
    if (v16 >= 1 << v19)
      goto LABEL_27;
    v18 = v54;
    v45 = *(_QWORD *)(v54 + 8 * v24);
    if ((v45 & v63) == 0)
      goto LABEL_28;
    LODWORD(v15) = v53;
    if (*(_DWORD *)(v55 + 36) != (_DWORD)v53)
      goto LABEL_29;
    v46 = v45 & (-2 << (v16 & 0x3F));
    if (v46)
    {
      v22 = __clz(__rbit64(v46)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v23 = v52;
    }
    else
    {
      v47 = v24 + 1;
      v48 = (v22 + 63) >> 6;
      v23 = v52;
      if (v24 + 1 < v48)
      {
        v49 = *(_QWORD *)(v54 + 8 * v47);
        if (v49)
        {
LABEL_22:
          v22 = __clz(__rbit64(v49)) + (v47 << 6);
        }
        else
        {
          while (v48 - 2 != v24)
          {
            v49 = *(_QWORD *)(v51 + 8 * v24++);
            if (v49)
            {
              v47 = v24 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v17 = v62 + 1;
    v16 = v22;
    if (v62 + 1 == v23)
      return (uint64_t)v13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001EE800(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10000B4C8(&qword_100551F98);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100011694(a1, &qword_100551F98);
    sub_100221598(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100011694((uint64_t)v8, &qword_100551F98);
  }
  else
  {
    sub_10013BD5C(a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10013AC0C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001EE978(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10000B4C8(&qword_100552178);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_100552180);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100011694(a1, &qword_100552178);
    sub_100221820(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100011694((uint64_t)v8, &qword_100552178);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10013B154((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t PushNotificationObserver.register(for:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  v7 = sub_10000B4C8(&qword_100551F98);
  v6[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v6[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[14] = v9;
  v6[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001EEB94, v5, 0);
}

uint64_t sub_1001EEB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  Class isa;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(v1 + 120))
  {
    v2 = *(_QWORD *)(v0 + 112);
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = *(_OWORD *)(v0 + 64);
    *(_QWORD *)v7 = *(_QWORD *)(v0 + 56);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 24) = v6;
    v9 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
    v10 = v7 + *(int *)(v9 + 24);
    swift_bridgeObjectRetain();
    swift_retain(v6);
    _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v10, v5);
    sub_1001EF020(v7, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
    swift_beginAccess(v1 + 112, v0 + 16, 33, 0);
    sub_1001EE800(v4, v3);
    swift_endAccess(v0 + 16);
    v11 = *(void **)(v1 + 120);
    if (v11)
    {
      v12 = *(_QWORD **)(v0 + 88);
      v14 = v12[16];
      v13 = v12[17];
      v15 = v11;
      swift_bridgeObjectRetain();
      v16 = v15;
      sub_1000B0808(v11, v14, v13);
      if (v12[19])
      {
        v17 = swift_bridgeObjectRetain();
        sub_1001EE3E0(v17);
        swift_bridgeObjectRelease();
      }
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v16, "_setEnabledTopics:", isa);

    }
    v21 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = (_QWORD *)swift_task_alloc(dword_100551FA4);
    *(_QWORD *)(v0 + 128) = v18;
    *v18 = v0;
    v18[1] = sub_1001EEDB8;
    return sub_1001EF9EC();
  }
}

uint64_t sub_1001EEDB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_1001EEE10, v1, 0);
}

uint64_t sub_1001EEE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)v7 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 24) = v5;
  v9 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  v10 = v7 + *(int *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_retain(v5);
  _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v10, v4);
  sub_1001EF020(v7, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 0, 1, v9);
  swift_beginAccess(v6 + 112, v0 + 16, 33, 0);
  sub_1001EE800(v3, v2);
  swift_endAccess(v0 + 16);
  v11 = *(void **)(v6 + 120);
  if (v11)
  {
    v12 = *(_QWORD **)(v0 + 88);
    v14 = v12[16];
    v13 = v12[17];
    v15 = v11;
    swift_bridgeObjectRetain();
    v16 = v15;
    sub_1000B0808(v11, v14, v13);
    if (v12[19])
    {
      v17 = swift_bridgeObjectRetain();
      sub_1001EE3E0(v17);
      swift_bridgeObjectRelease();
    }
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v16, "_setEnabledTopics:", isa);

  }
  v19 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for PushNotificationObserver.RegisteredHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_1005520A0;
  if (!qword_1005520A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushNotificationObserver.RegisteredHandler);
  return result;
}

uint64_t sub_1001EF020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void PushNotificationObserver.unregister(registeredHandler:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  Class isa;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v2 = v1;
  v4 = sub_10000B4C8(&qword_100551F98);
  __chkstk_darwin(v4);
  v6 = v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v11 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1 + *(int *)(v11 + 24), v7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  swift_beginAccess(v2 + 14, v24, 33, 0);
  sub_1001EE800((uint64_t)v6, (uint64_t)v10);
  swift_endAccess(v24);
  v13 = (void **)(v2 + 15);
  v12 = (void *)v2[15];
  if (v12)
  {
    v15 = v2[16];
    v14 = v2[17];
    v16 = v12;
    swift_bridgeObjectRetain();
    v17 = v16;
    sub_1000B0808(v12, v15, v14);
    if (v2[19])
    {
      v18 = swift_bridgeObjectRetain();
      sub_1001EE3E0(v18);
      swift_bridgeObjectRelease();
    }
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v17, "_setEnabledTopics:", isa);

  }
  if (!*(_QWORD *)(v2[14] + 16))
  {
    v20 = *v13;
    if (*v13)
    {
      objc_msgSend(v20, "setDelegate:", 0);
      v20 = *v13;
      if (*v13)
      {
        objc_msgSend(v20, "shutdown");
        v20 = *v13;
      }
    }
    v21 = v2[16];
    v22 = v2[17];
    *v13 = 0;
    v2[16] = 0;
    v2[17] = 0;
    sub_1000B0808(v20, v21, v22);
  }
}

void PushNotificationObserver.connection(_:didReceiveMessageForTopic:userInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v8 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = (_QWORD *)swift_allocObject(&unk_10050DDB8, 64, 7);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v4;
    v12[5] = a2;
    v12[6] = a3;
    v12[7] = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain(v4);
    v13 = sub_10016702C((uint64_t)v10, (uint64_t)&unk_100551FB8, (uint64_t)v12);
    swift_release(v13);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001EF3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1001EF3F8, 0, 0);
}

uint64_t sub_1001EF3F8()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 32))
    return swift_task_switch(sub_1001EF418, *(_QWORD *)(v0 + 16), 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EF418()
{
  uint64_t v0;

  sub_1001EF5B4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001EF5B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];

  v41 = a3;
  v6 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_100552160);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  swift_beginAccess(v3 + 112, v44, 0, 0);
  v15 = *(_QWORD *)(v3 + 112);
  v16 = *(_QWORD *)(v15 + 64);
  v39 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (unint64_t)(v17 + 63) >> 6;
  v36 = v20 - 1;
  swift_bridgeObjectRetain();
  v21 = 0;
  v40 = v20;
  v37 = v15 + 104;
  v38 = v20 - 5;
  v42 = a2;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_8;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v29 >= v40)
    {
      v31 = v21;
    }
    else
    {
      v30 = *(_QWORD *)(v39 + 8 * v29);
      if (v30)
        goto LABEL_12;
      v31 = v21 + 1;
      if ((uint64_t)(v21 + 2) < v40)
      {
        v30 = *(_QWORD *)(v39 + 8 * (v21 + 2));
        if (v30)
        {
          v29 = v21 + 2;
          goto LABEL_12;
        }
        v31 = v21 + 2;
        if ((uint64_t)(v21 + 3) < v40)
        {
          v30 = *(_QWORD *)(v39 + 8 * (v21 + 3));
          if (v30)
          {
            v29 = v21 + 3;
LABEL_12:
            v19 = (v30 - 1) & v30;
            v24 = __clz(__rbit64(v30)) + (v29 << 6);
            v21 = v29;
LABEL_8:
            v25 = *(_QWORD *)(v15 + 48);
            v26 = type metadata accessor for UUID(0);
            (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v12, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v26);
            v27 = *(_QWORD *)(v15 + 56) + *(_QWORD *)(v43 + 72) * v24;
            v28 = sub_10000B4C8(&qword_100552168);
            sub_1001EF020(v27, (uint64_t)&v12[*(int *)(v28 + 48)]);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
            a2 = v42;
            goto LABEL_15;
          }
          v29 = v21 + 4;
          v31 = v21 + 3;
          if ((uint64_t)(v21 + 4) < v40)
          {
            v30 = *(_QWORD *)(v39 + 8 * v29);
            if (v30)
              goto LABEL_12;
            while (v38 != v21)
            {
              v30 = *(_QWORD *)(v37 + 8 * v21++);
              if (v30)
              {
                v29 = v21 + 4;
                goto LABEL_12;
              }
            }
            v31 = v36;
          }
        }
      }
    }
    v32 = sub_10000B4C8(&qword_100552168);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v12, 1, 1, v32);
    v19 = 0;
    v21 = v31;
LABEL_15:
    sub_100011530((uint64_t)v12, (uint64_t)v14, &qword_100552160);
    v33 = sub_10000B4C8(&qword_100552168);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v14, 1, v33) == 1)
    {
      swift_release(v15);
      return;
    }
    sub_10013BD5C((uint64_t)&v14[*(int *)(v33 + 48)], (uint64_t)v8);
    v34 = *((_QWORD *)v8 + 1);
    if (*(_QWORD *)v8 == a1 && v34 == a2
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v8, v34, a1, a2, 0) & 1) != 0)
    {
      (*((void (**)(uint64_t, uint64_t, uint64_t))v8 + 2))(a1, a2, v41);
    }
    sub_1001F0EBC((uint64_t)v8);
    v22 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v14, v22);
  }
  __break(1u);
}

void *sub_1001EF968(id a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = (void *)v3[15];
  if (v7)
  {
    objc_msgSend(v7, "setDelegate:", 0);
    v8 = (void *)v3[15];
    if (v8)
      objc_msgSend(v8, "shutdown");
  }
  if (a1)
    objc_msgSend(a1, "setDelegate:", v3);
  v9 = (void *)v3[15];
  v10 = v3[16];
  v11 = v3[17];
  v3[15] = a1;
  v3[16] = a2;
  v3[17] = a3;
  return sub_1000B0808(v9, v10, v11);
}

uint64_t sub_1001EF9EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v1 + 32) = v0;
  v2 = sub_1001F0FB0();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 40) = v3;
  *v3 = v1;
  v3[1] = sub_1001EFA88;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 16, v0, v2, 0xD000000000000017, 0x800000010044C620, sub_1001EFD84, 0, &type metadata for PushNotificationObserver.PushConfiguration);
}

uint64_t sub_1001EFA88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_1001EFADC, v1, 0);
}

uint64_t sub_1001EFADC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v1 = *(_QWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 144) = *(_OWORD *)(v0 + 16);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 144);
    v4 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v4 = v3 & 0xFFFFFFFFFFFFLL;
    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(APSConnectionOverrideNamedDelegatePort);
      sub_100105D88();
      v5 = swift_bridgeObjectRetain_n(v2, 2);
      v13 = (void *)static OS_dispatch_queue.main.getter(v5, v6, v7, v8, v9, v10, v11, v12);
      v14 = objc_allocWithZone((Class)APSConnection);
      v15 = String._bridgeToObjectiveC()();
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(v14, "initWithEnvironmentName:namedDelegatePort:queue:", v15, v16, v13);
      swift_bridgeObjectRelease();

      if (v17)
        goto LABEL_10;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
    }
    v3 = 0;
    v2 = 0;
  }
  else
  {
    v17 = 0;
    v3 = 0;
  }
LABEL_10:
  v18 = *(_QWORD *)(v0 + 32);
  v19 = *(void **)(v18 + 120);
  if (!v19)
  {
    if (!v17)
      goto LABEL_25;
    swift_bridgeObjectRetain();
LABEL_19:
    if (!v2)
      goto LABEL_25;
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v18 + 128);
  v20 = *(_QWORD *)(v18 + 136);
  sub_1001F0FF4(*(void **)(v18 + 120));
  swift_bridgeObjectRetain();
  sub_1000B0808(v19, v21, v20);
  if (!v17)
  {
    if (!v20)
      goto LABEL_25;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  if (!v20)
    goto LABEL_19;
  if (!v2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (v21 == v3 && v20 == v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_25:
    sub_1000B0808(v17, v3, v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v20, v3, v2, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
    goto LABEL_25;
LABEL_23:
  sub_1001EF968(v17, v3, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EFD0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_100551FB4);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100012D1C;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 16) = v6;
  return swift_task_switch(sub_1001EF3F8, 0, 0);
}

uint64_t sub_1001EFD84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;
  void *v26;

  v2 = sub_10000B4C8(&qword_100552198);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - v7;
  if (qword_10054BB60 != -1)
    swift_once(&qword_10054BB60, sub_100164080);
  v9 = static BagProvider.shared;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  v10(v6, (uint64_t)v8, v2);
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10050DF70, v12 + v4, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13 + v12, v8, v2);
  sub_10000B4C8(&qword_10054FFE0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000AE4C0);
  v14 = v26;
  if (v26)
  {
    sub_1001F0010(v26);

  }
  else
  {
    v15 = type metadata accessor for BagProvider.Observer();
    v16 = swift_allocObject(v15, 40, 7);
    v17 = swift_weakInit(v16 + 16, 0);
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    swift_weakAssign(v17, v9);
    v18 = swift_allocObject(&unk_10050DF98, 24, 7);
    swift_weakInit(v18 + 16, v9);
    v19 = (_QWORD *)swift_allocObject(&unk_10050DFC0, 48, 7);
    v19[2] = sub_1001F1084;
    v19[3] = v13;
    v19[4] = v18;
    v19[5] = v16;
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    *(_QWORD *)(v16 + 24) = sub_10015CD50;
    *(_QWORD *)(v16 + 32) = v19;
    swift_retain(v13);
    swift_retain(v16);
    v22 = sub_1000DB26C(v20, v21);
    __chkstk_darwin(v22);
    *(&v25 - 2) = v9;
    *(&v25 - 1) = v16;
    UnfairLock.locked<A>(_:)((void (*)(void))sub_10015CD5C);
    sub_100164460(0);
    swift_release(v16);
  }
  v23 = swift_release(v13);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v23);
}

uint64_t sub_1001F0010(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  NSString v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyPushNotifications);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(a1, "dictionaryForBagKey:", v2);

  if (!v3)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_14;
  }
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v14 = 0x6D6E6F7269766E65;
  v15 = 0xEB00000000746E65;
  AnyHashable.init<A>(_:)(&v16, &v14, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1001461DC((uint64_t)&v16), (v6 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10013BB48((uint64_t)&v16);
  if (!*((_QWORD *)&v19 + 1))
  {
    sub_100011694((uint64_t)&v18, &qword_100550FD0);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(&v14, &v18, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_13:
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
    v17 = v11;
    goto LABEL_14;
  }
  v8 = v14;
  v7 = v15;
  v9 = (void *)objc_opt_self(APSConnection);
  v10 = String._bridgeToObjectiveC()();
  LODWORD(v9) = objc_msgSend(v9, "isValidEnvironment:", v10);

  if (!(_DWORD)v9)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v16 = v8;
  v17 = v7;
LABEL_14:
  v12 = sub_10000B4C8(&qword_100552198);
  return CheckedContinuation.resume(returning:)(&v16, v12);
}

id PushNotificationObserver.__allocating_init()()
{
  objc_class *v0;
  uint64_t v1;
  double v2;
  objc_super v4;

  v1 = swift_allocObject(v0, 160, 15);
  swift_defaultActor_initialize(v1);
  swift_retain(v1);
  *(_QWORD *)(v1 + 112) = sub_100139E40((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)&v2 = swift_release(v1).n128_u64[0];
  v4.receiver = (id)v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, "init", v2);
}

id PushNotificationObserver.init()()
{
  uint64_t v0;
  objc_super v2;

  swift_defaultActor_initialize(v0);
  swift_retain(v0);
  *(_QWORD *)(v0 + 112) = sub_100139E40((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_QWORD *)(v0 + 152) = 0;
  swift_release(v0);
  v2.receiver = (id)v0;
  v2.super_class = (Class)type metadata accessor for PushNotificationObserver();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for PushNotificationObserver()
{
  return objc_opt_self(_TtC9MusicCore24PushNotificationObserver);
}

uint64_t PushNotificationObserver.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000B0808(*(void **)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t PushNotificationObserver.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000B0808(*(void **)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t SequentialVocalCommandsFilter.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

_QWORD *initializeBufferWithCopyOfBuffer for PushNotificationObserver.RegisteredHandler(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v5 = a2[3];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = v5;
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PushNotificationObserver.RegisteredHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for PushNotificationObserver.RegisteredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PushNotificationObserver.RegisteredHandler(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = a2[3];
  v8 = a1[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_OWORD *initializeWithTake for PushNotificationObserver.RegisteredHandler(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PushNotificationObserver.RegisteredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushNotificationObserver.RegisteredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F0718);
}

uint64_t sub_1001F0718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PushNotificationObserver.RegisteredHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F07A0);
}

uint64_t sub_1001F07A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001F0814(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1004311F8;
  v4[1] = (char *)&value witness table for () + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001F0894(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1001F0900(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_1001F0970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1001F09A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1001F09D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1001F0A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1001F0A30(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1001F0AE0 + 4 * byte_100431150[(v7 - 1)]))();
}

void sub_1001F0B30(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PushNotificationObserver.UncheckedSendableWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PushNotificationObserver.UncheckedSendableWrapper);
}

uint64_t getEnumTagSinglePayload for PushNotificationObserver.PushConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PushNotificationObserver.PushConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushNotificationObserver.PushConfiguration()
{
  return &type metadata for PushNotificationObserver.PushConfiguration;
}

uint64_t destroy for PushNotificationObserver.Connection(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s9MusicCore24PushNotificationObserverC10ConnectionVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PushNotificationObserver.Connection(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for PushNotificationObserver.Connection(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for PushNotificationObserver.Connection()
{
  return &type metadata for PushNotificationObserver.Connection;
}

uint64_t sub_1001F0EBC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PushNotificationObserver.RegisteredHandler(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F0EFC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001F0F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_100551FB4);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10000DC64;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 16) = v6;
  return swift_task_switch(sub_1001EF3F8, 0, 0);
}

unint64_t sub_1001F0FB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552188;
  if (!qword_100552188)
  {
    v1 = type metadata accessor for PushNotificationObserver();
    result = swift_getWitnessTable(protocol conformance descriptor for PushNotificationObserver, v1);
    atomic_store(result, (unint64_t *)&qword_100552188);
  }
  return result;
}

void *sub_1001F0FF4(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001F1020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000B4C8(&qword_100552198);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001F1084(void *a1)
{
  sub_10000B4C8(&qword_100552198);
  return sub_1001F0010(a1);
}

uint64_t sub_1001F10C4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F10E8()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F111C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void *MPCPlaybackEngine.Configuration.fallbackPlaybackIntent.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;

  v5 = a4;
  return a4;
}

uint64_t sub_1001F11CC(uint64_t a1, uint64_t a2)
{
  return _sSo17MPCPlaybackEngineC9MusicCoreE13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(void **)(a2 + 24));
}

_UNKNOWN **static MPCPlaybackEngine.Option.allCases.getter()
{
  return &off_1004FDBD8;
}

void sub_1001F11F4(_QWORD *a1@<X8>)
{
  *a1 = &off_1004FDC00;
}

id MPCPlaybackEngine.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  NSString v7;
  id v8;
  id v9;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithPlayerID:", v7);

  v9 = v8;
  sub_1001F4040(a3, (uint64_t)a4);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t MPCPlaybackEngine.configuration.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;

  v1 = v0;
  v2 = objc_msgSend(v1, "playerID");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  sub_1001F3F5C(v1);
  v4 = objc_msgSend(v1, "fallbackPlaybackIntent");

  return v3;
}

void MPCPlaybackEngine.configuration.setter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_1001F4040(a3, (uint64_t)a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void (*MPCPlaybackEngine.configuration.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = v1;
  v5 = objc_msgSend(v4, "playerID");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = sub_1001F3F5C(v4);
  v10 = objc_msgSend(v4, "fallbackPlaybackIntent");

  *v3 = v6;
  v3[1] = v8;
  v3[2] = v9;
  v3[3] = v10;
  return sub_1001F1440;
}

void sub_1001F1440(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = v3;
    swift_bridgeObjectRetain();
    v5 = swift_bridgeObjectRetain();
    sub_1001F4040(v5, (uint64_t)v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v3 = (void *)v2[3];
  }
  else
  {
    sub_1001F4040(*(_QWORD *)(*(_QWORD *)a1 + 16), (uint64_t)v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v2);
}

void sub_1001F14DC()
{
  Swift::Int v0;
  id v1;
  NSString v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v0 = sub_1001733A4((uint64_t)&off_1004FBB18);
  v1 = objc_msgSend(objc_allocWithZone((Class)MPModelLibraryRequest), "init");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setLabel:", v2);

  v3 = (void *)objc_opt_self(MPModelSong);
  v4 = v1;
  v5 = objc_msgSend(v3, "kindWithVariants:", 3);
  objc_msgSend(v4, "setItemKind:", v5);

  v6 = objc_msgSend(v4, "playbackIntentWithStartItemIdentifiers:", 0);
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    objc_msgSend(v8, "setShuffleMode:", 1);

  }
  static MPCPlaybackEngine.Configuration.systemMusic = 0x636973754DLL;
  *(_QWORD *)algn_1005618B8 = 0xE500000000000000;
  qword_1005618C0 = v0;
  unk_1005618C8 = v7;
}

uint64_t *MPCPlaybackEngine.Configuration.systemMusic.unsafeMutableAddressor()
{
  if (qword_10054BC98 != -1)
    swift_once(&qword_10054BC98, sub_1001F14DC);
  return &static MPCPlaybackEngine.Configuration.systemMusic;
}

uint64_t static MPCPlaybackEngine.Configuration.systemMusic.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  if (qword_10054BC98 != -1)
    swift_once(&qword_10054BC98, sub_1001F14DC);
  v0 = static MPCPlaybackEngine.Configuration.systemMusic;
  v1 = (void *)unk_1005618C8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = v1;
  return v0;
}

void *MPCPlayerRequestTracklistRange.nowPlayingItem.unsafeMutableAddressor()
{
  return &static MPCPlayerRequestTracklistRange.nowPlayingItem;
}

void *MPCPlayerRequestTracklistRange.nextPlayingItem.unsafeMutableAddressor()
{
  return &static MPCPlayerRequestTracklistRange.nextPlayingItem;
}

void *MPCPlayerRequestTracklistRange.upNextPlayingItems.unsafeMutableAddressor()
{
  return &static MPCPlayerRequestTracklistRange.upNextPlayingItems;
}

uint64_t static MPCPlayerRequestTracklistRange.upNextPlayingItems.getter()
{
  return 0;
}

BOOL static MPCPlayerRequestTracklistRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL sub_1001F171C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void MPCPlayerRequestTracklistRange.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
}

Swift::Int MPCPlayerRequestTracklistRange.hashValue.getter(Swift::UInt a1, Swift::UInt a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_1001F17C0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001F1818()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001F1850()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001F18A4()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  Class isa;
  Class v7;
  id v8;
  uint64_t v9;

  v0 = sub_10000B4C8((uint64_t *)&unk_1005506E0);
  inited = swift_initStackObject(v0, &v9);
  *(_OWORD *)(inited + 16) = xmmword_100424BA0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipGenericAlbum);
  *(_QWORD *)(inited + 40) = v2;
  v3 = (void *)objc_opt_self(MPPropertySet);
  *(_QWORD *)(inited + 48) = objc_msgSend(v3, "emptyPropertySet");
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelRelationshipGenericPlaylist);
  *(_QWORD *)(inited + 64) = v4;
  *(_QWORD *)(inited + 72) = objc_msgSend(v3, "emptyPropertySet");
  sub_10013987C(inited);
  v5 = objc_allocWithZone((Class)MPPropertySet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1000DD108(0, (unint64_t *)&qword_100550D20, MPPropertySet_ptr);
  v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v5, "initWithProperties:relationships:", isa, v7);

  static MPCPlayerResponse.playStateSectionProperties = (uint64_t)v8;
}

uint64_t *MPCPlayerResponse.playStateSectionProperties.unsafeMutableAddressor()
{
  if (qword_10054BCA0 != -1)
    swift_once(&qword_10054BCA0, sub_1001F18A4);
  return &static MPCPlayerResponse.playStateSectionProperties;
}

id static MPCPlayerResponse.playStateSectionProperties.getter()
{
  if (qword_10054BCA0 != -1)
    swift_once(&qword_10054BCA0, sub_1001F18A4);
  return (id)static MPCPlayerResponse.playStateSectionProperties;
}

id sub_1001F1A7C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;

  v1 = v0;
  v2 = sub_10000B4C8((uint64_t *)&unk_1005521A0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v22 - v6;
  v8 = objc_msgSend(v1, "tracklist");
  v9 = objc_msgSend(v8, "playingItem");

  if (!v9)
    return 0;
  v10 = objc_msgSend(v9, "metadataObject");

  if (v10)
  {
    v11 = objc_msgSend(v1, "tracklist");
    v12 = objc_msgSend(v11, "playingItemIndexPath");

    if (v12)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v12);

      v13 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 0, 1, v13);
    }
    else
    {
      v13 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
    }
    sub_1001F4754((uint64_t)v5, (uint64_t)v7);
    type metadata accessor for IndexPath(0);
    v15 = *(_QWORD *)(v13 - 8);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v13);
    if ((_DWORD)v16 != 1)
    {
      v18 = IndexPath.section.getter(v16);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v13);
      v19 = objc_msgSend(v1, "tracklist");
      v20 = objc_msgSend(v19, "items");

      v21 = objc_msgSend(v20, "sectionAtIndex:", v18);
      v14 = objc_msgSend(v21, "metadataObject");

      objc_msgSend(v1, "state");
      return v14;
    }

    sub_1001F4118((uint64_t)v7);
    return 0;
  }
  return 0;
}

uint64_t MPCPlayerResponse.playState(for:in:)(void *a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  unsigned int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  unsigned __int8 v20;

  v4 = sub_1001F1A7C();
  if (!v5)
    return 0;
  v7 = v4;
  v8 = v5;
  v9 = v6;
  v10 = objc_msgSend(v5, "identifiers");
  v11 = objc_msgSend(a1, "identifiers");
  v12 = objc_msgSend(v10, "intersectsSet:", v11);

  if (!v12)
    goto LABEL_9;
  if (v7)
  {
    if (!a2)
    {

      return 0;
    }
    v13 = a2;
    v14 = v7;
    v15 = v13;
    v7 = v14;
    if (objc_msgSend(v7, "type") != (id)2
      || (v16 = objc_msgSend(v7, "album")) == 0)
    {

      goto LABEL_14;
    }
    v17 = v16;
    v18 = objc_msgSend(v16, "identifiers");
    v19 = objc_msgSend(v15, "identifiers");
    v20 = objc_msgSend(v18, "intersectsSet:", v19);

    if ((v20 & 1) != 0)
    {

      return v9;
    }
LABEL_9:

LABEL_14:
    return 0;
  }

  if (a2)
    return 0;
  return v9;
}

{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  unsigned __int8 v19;

  v4 = sub_1001F1A7C();
  if (v5)
  {
    v7 = v4;
    v8 = v5;
    v9 = v6;
    v10 = objc_msgSend(v5, "innermostModelObject");
    v11 = objc_msgSend(v10, "identifiers");

    v12 = objc_msgSend(v8, "identifiers");
    v13 = objc_msgSend(v11, "unionSet:", v12);

    v14 = objc_msgSend(a1, "identifiers");
    LODWORD(v12) = objc_msgSend(v13, "intersectsSet:", v14);

    if ((_DWORD)v12)
    {
      if (!v7)
      {
        v9 = 0;
        v7 = v8;
        goto LABEL_12;
      }
      v7 = v7;
      if (objc_msgSend(v7, "type") != (id)4
        || (v15 = objc_msgSend(v7, "playlist")) == 0)
      {

        goto LABEL_11;
      }
      v16 = v15;
      v17 = objc_msgSend(v15, "identifiers");
      v18 = objc_msgSend(a2, "identifiers");
      v19 = objc_msgSend(v17, "intersectsSet:", v18);

      if ((v19 & 1) != 0)
      {

        v7 = v8;
LABEL_12:

        return v9;
      }
    }

LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  return 0;
}

uint64_t MPCPlayerResponseItem.isLiveContent.getter()
{
  void *v0;
  unsigned __int8 v2;

  objc_msgSend(v0, "duration");
  return v2;
}

uint64_t MPCPlayerResponseTracklist.playingItemSupportsTimeSyncedLyrics.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  void *v13;
  id v14;
  void *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  _BYTE v24[64];

  v1 = v0;
  v2 = sub_10000B4C8((uint64_t *)&unk_1005521A0);
  __chkstk_darwin(v2);
  v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v24[-v10];
  result = (uint64_t)objc_msgSend(v1, "playingItem");
  if (result)
  {
    v13 = (void *)result;
    objc_msgSend((id)result, "duration");
    if (v24[56] == 1)
    {
LABEL_3:

      return 0;
    }
    v14 = objc_msgSend(v1, "playingItemIndexPath");
    if (v14)
    {
      v15 = v14;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v14);

      v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32);
      v16(v4, v9, v5);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v16(v11, v4, v5);
        v17 = objc_msgSend(v1, "items");
        v18 = objc_msgSend(v17, "sectionAtIndex:", IndexPath.section.getter(v17));

        v19 = objc_msgSend(v18, "metadataObject");
        if (v19)
        {
          v20 = objc_msgSend(v19, "innermostModelObject");
          objc_opt_self(MPModelRadioStation);
          v21 = (void *)swift_dynamicCastObjCClass(v20);
          if (v21)
          {
            v22 = v21;
            if (objc_msgSend(v21, "type") == (id)4)
            {
              (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);

              goto LABEL_3;
            }
            v23 = objc_msgSend(v22, "subtype");

            (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
            if (v23 == (id)1)
              return 0;
          }
          else
          {

            (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
          }
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);

        }
        return 1;
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }

    sub_1001F4118((uint64_t)v4);
    return 1;
  }
  return result;
}

void MPCPlayerResponseTracklist.currentPlayEvent.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;
  char v28;

  v1 = v0;
  v2 = sub_10000B4C8((uint64_t *)&unk_1005521A0);
  __chkstk_darwin(v2);
  v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&aBlock[-1] - v10;
  v12 = objc_msgSend(v1, "playingItemIndexPath");
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_8;
  }
  v13 = v12;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_8:
    sub_1001F4118((uint64_t)v4);
    return;
  }
  v14(v11, v4, v5);
  v15 = objc_msgSend(v1, "items");
  v16 = objc_msgSend(v15, "sectionAtIndex:", IndexPath.section.getter(v15));

  v17 = objc_msgSend(v16, "metadataObject");
  if (v17)
  {
    v28 = 0;
    v18 = objc_msgSend(v17, "identifiers");
    __chkstk_darwin(v18);
    *(&v25 - 2) = (uint64_t)v17;
    *(&v25 - 1) = (uint64_t)&v28;
    v19 = objc_allocWithZone((Class)MPModelPlayEvent);
    v20 = swift_allocObject(&unk_10050E000, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_1001F4158;
    *(_QWORD *)(v20 + 24) = &v25 - 4;
    aBlock[4] = sub_1000D75E8;
    v27 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001880C4;
    aBlock[3] = &unk_10050E018;
    v21 = _Block_copy(aBlock);
    swift_retain(v20);
    v22 = objc_msgSend(v19, "initWithIdentifiers:block:", v18, v21);

    _Block_release(v21);
    v23 = swift_release(v27);
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v20, "", 0, 0, 0, 1, v23);

    v24 = swift_release(v20);
    if ((v18 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v11, v5, v24);
      if (v28 == 1)

    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

void sub_1001F2730(void *a1, void *a2, _BYTE *a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v6 = objc_opt_self(MPModelPlayEvent);
  v7 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v6, 0, 0, 0);
  v19 = a1;
  v8 = objc_msgSend(a2, "anyObject");
  v9 = v19;
  if (v8)
  {
    objc_opt_self(MPModelAlbum);
    v10 = swift_dynamicCastObjCClass(v8);
    if (v10)
    {
      v11 = v10;
      v12 = v8;
      objc_msgSend(v7, "setAlbum:", v11);
LABEL_10:

      return;
    }
    objc_opt_self(MPModelPlaylist);
    v13 = swift_dynamicCastObjCClass(v8);
    if (v13)
    {
      v14 = v13;
      v12 = v8;
      objc_msgSend(v7, "setPlaylist:", v14);
      goto LABEL_10;
    }
    objc_opt_self(MPModelArtist);
    v15 = swift_dynamicCastObjCClass(v8);
    if (v15)
    {
      v16 = v15;
      v12 = v8;
      objc_msgSend(v7, "setArtist:", v16);
      goto LABEL_10;
    }
    objc_opt_self(MPModelRadioStation);
    v17 = swift_dynamicCastObjCClass(v8);
    if (v17)
    {
      v18 = v17;
      v12 = v8;
      objc_msgSend(v7, "setRadioStation:", v18);
      goto LABEL_10;
    }

    v9 = v19;
  }

  *a3 = 1;
}

id MPCVocalsControlCommand.isTrulyActive.getter()
{
  void *v0;
  id result;

  result = objc_msgSend(v0, "isActive");
  if ((_DWORD)result)
    return (id)(objc_msgSend(v0, "isDisabled") ^ 1);
  return result;
}

uint64_t MPCPlayerResponse.VideoContext.__allocating_init(playerResponse:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  __objc2_prot *v10;

  if (!a1)
    return 0;
  v2 = objc_msgSend(a1, "videoOutput");
  v3 = (uint64_t)v2;
  if (v2)
  {
    v10 = &OBJC_PROTOCOL___MPCVideoOutput;
    v4 = swift_dynamicCastObjCProtocolConditional(v2, 1, &v10);
    if (v4)
    {
      v5 = (void *)v4;
      ObjectType = swift_getObjectType();
      v7 = sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
      if (!swift_dynamicCastMetatype(ObjectType, v7))
        v5 = 0;
      if (v5)
      {
        v8 = type metadata accessor for MPCPlayerResponse.VideoContext(0);
        v3 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
        MPCPlayerResponse.VideoContext.init(output:)(v5);
        goto LABEL_8;
      }
    }
    swift_unknownObjectRelease(v3);

    return 0;
  }
LABEL_8:

  return v3;
}

uint64_t MPCPlayerResponse.VideoContext.__allocating_init(output:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  MPCPlayerResponse.VideoContext.init(output:)(a1);
  return v3;
}

uint64_t MPCPlayerResponse.VideoContext.init(output:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[112];
  _QWORD v26[4];
  _BYTE v27[24];

  v2 = v1;
  v3 = OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_binding;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_binding) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output) = a1;
  v4 = a1;
  objc_msgSend(v4, "videoBounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_beginAccess(v2 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__videoBounds, v27, 33, 0);
  v26[0] = v6;
  v26[1] = v8;
  v26[2] = v10;
  v26[3] = v12;
  type metadata accessor for CGRect(0);
  Published.init(initialValue:)(v26, v13);
  swift_endAccess(v27);
  v14 = objc_msgSend(v4, "isReadyForDisplay");
  swift_beginAccess(v2 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__isReadyForDisplay, v26, 33, 0);
  v27[0] = v14;
  Published.init(initialValue:)(v27, &type metadata for Bool);
  swift_endAccess(v26);
  v15 = sub_10000B4C8(&qword_100550030);
  inited = swift_initStackObject(v15, v25);
  *(_OWORD *)(inited + 16) = xmmword_100424BA0;
  KeyPath = swift_getKeyPath(&unk_1004312B8);
  *(_QWORD *)(inited + 56) = sub_10000B4C8(&qword_1005521D0);
  *(_QWORD *)(inited + 64) = &protocol witness table for KeyValueObservationTrigger<A, B>;
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = KeyPath;
  v18 = swift_getKeyPath(&unk_1004312E8);
  *(_QWORD *)(inited + 96) = sub_10000B4C8(&qword_1005521D8);
  *(_QWORD *)(inited + 104) = &protocol witness table for KeyValueObservationTrigger<A, B>;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = v18;
  v19 = swift_allocObject(&unk_10050E050, 24, 7);
  swift_weakInit(v19 + 16, v2);
  v20 = type metadata accessor for Whitetail.Binding();
  swift_allocObject(v20, 48, 7);
  v21 = v4;
  v22 = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, 0, (uint64_t)sub_1001F4264, v19);
  v23 = *(_QWORD *)(v2 + v3);
  *(_QWORD *)(v2 + v3) = v22;
  swift_release(v23);
  return v2;
}

uint64_t property wrapper backing initializer of MPCPlayerResponse.VideoContext.videoBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  _QWORD v6[4];

  *(double *)v6 = a1;
  *(double *)&v6[1] = a2;
  *(double *)&v6[2] = a3;
  *(double *)&v6[3] = a4;
  type metadata accessor for CGRect(0);
  return Published.init(initialValue:)(v6, v4);
}

uint64_t MPCPlayerResponse.VideoContext.videoBounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[4];

  KeyPath = swift_getKeyPath(&unk_100431310);
  v10 = swift_getKeyPath(&unk_100431338);
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v10);
}

uint64_t property wrapper backing initializer of MPCPlayerResponse.VideoContext.isReadyForDisplay(char a1)
{
  char v2;

  v2 = a1;
  return Published.init(initialValue:)(&v2, &type metadata for Bool);
}

uint64_t MPCPlayerResponse.VideoContext.isReadyForDisplay.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  KeyPath = swift_getKeyPath(&unk_100431358);
  v4 = swift_getKeyPath(&unk_100431380);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void sub_1001F2D94(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  id *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  unsigned int v13;
  uint64_t KeyPath;
  uint64_t v15;
  double Width;
  uint64_t v17;
  uint64_t v18;
  double Height;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGRect v28;
  _BYTE v29[24];
  _BYTE v30[24];
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (id *)(Strong + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output);
    swift_beginAccess(Strong + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output, v29, 0, 0);
    objc_msgSend(*v4, "videoBounds");
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v13 = objc_msgSend(*v4, "isReadyForDisplay");
    KeyPath = swift_getKeyPath(&unk_100431310);
    v15 = swift_getKeyPath(&unk_100431338);
    static Published.subscript.getter(&v28, v3, KeyPath, v15);
    swift_release(v15);
    swift_release(KeyPath);
    v31.origin.x = v6;
    v31.origin.y = v8;
    v31.size.width = v10;
    v31.size.height = v12;
    if (!CGRectEqualToRect(v31, v28))
    {
      v32.origin.x = v6;
      v32.origin.y = v8;
      v32.size.width = v10;
      v32.size.height = v12;
      Width = CGRectGetWidth(v32);
      v17 = swift_getKeyPath(&unk_100431310);
      v18 = swift_getKeyPath(&unk_100431338);
      static Published.subscript.getter(&v28, v3, v17, v18);
      swift_release(v18);
      swift_release(v17);
      if (vabdd_f64(Width, CGRectGetWidth(v28)) > 1.0)
      {
        v33.origin.x = v6;
        v33.origin.y = v8;
        v33.size.width = v10;
        v33.size.height = v12;
        Height = CGRectGetHeight(v33);
        v20 = swift_getKeyPath(&unk_100431310);
        v21 = swift_getKeyPath(&unk_100431338);
        static Published.subscript.getter(&v28, v3, v20, v21);
        swift_release(v21);
        swift_release(v20);
        if (vabdd_f64(Height, CGRectGetHeight(v28)) > 1.0)
        {
          v22 = swift_getKeyPath(&unk_100431310);
          v23 = swift_getKeyPath(&unk_100431338);
          v28.origin.x = v6;
          v28.origin.y = v8;
          v28.size.width = v10;
          v28.size.height = v12;
          swift_retain(v3);
          static Published.subscript.setter(&v28, v3, v22, v23);
        }
      }
    }
    v24 = swift_getKeyPath(&unk_100431358);
    v25 = swift_getKeyPath(&unk_100431380);
    static Published.subscript.getter(&v28, v3, v24, v25);
    swift_release(v25);
    swift_release(v24);
    if (v13 == LOBYTE(v28.origin.x))
    {
      swift_release(v3);
    }
    else
    {
      v26 = swift_getKeyPath(&unk_100431358);
      v27 = swift_getKeyPath(&unk_100431380);
      LOBYTE(v28.origin.x) = v13;
      static Published.subscript.setter(&v28, v3, v26, v27);
    }
  }
}

uint64_t MPCPlayerResponse.VideoContext.isReadyForDisplay.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100431358);
  v2 = swift_getKeyPath(&unk_100431380);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_1001F30E4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100431358);
  v5 = swift_getKeyPath(&unk_100431380);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_1001F3160(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100431358);
  v5 = swift_getKeyPath(&unk_100431380);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

void (*MPCPlayerResponse.VideoContext.isReadyForDisplay.modify(_QWORD *a1))(_QWORD *)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_100431358);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_100431380);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1001F3248;
}

uint64_t MPCPlayerResponse.VideoContext.$isReadyForDisplay.getter()
{
  return sub_1001F354C(&OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__isReadyForDisplay, &qword_1005521E0);
}

uint64_t MPCPlayerResponse.VideoContext.$isReadyForDisplay.setter(uint64_t a1)
{
  return sub_1001F35CC(a1, &qword_1005521E8, &OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__isReadyForDisplay, &qword_1005521E0);
}

void (*MPCPlayerResponse.VideoContext.$isReadyForDisplay.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_10000B4C8(&qword_1005521E8);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__isReadyForDisplay;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_10000B4C8(&qword_1005521E0);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_1001F3344;
}

double MPCPlayerResponse.VideoContext.videoBounds.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100431310);
  v2 = swift_getKeyPath(&unk_100431338);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

double sub_1001F33BC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100431310);
  v5 = swift_getKeyPath(&unk_100431338);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  result = *(double *)v8;
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

uint64_t sub_1001F3438(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100431310);
  v6 = swift_getKeyPath(&unk_100431338);
  v9 = v8;
  v10 = v2;
  v11 = v3;
  swift_retain(v4);
  return static Published.subscript.setter(&v9, v4, KeyPath, v6);
}

void (*MPCPlayerResponse.VideoContext.videoBounds.modify(_QWORD *a1))(_QWORD *)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_100431310);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_100431338);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1001F3248;
}

uint64_t MPCPlayerResponse.VideoContext.$videoBounds.getter()
{
  return sub_1001F354C(&OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__videoBounds, &qword_1005521F0);
}

uint64_t sub_1001F354C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(v2 + *a1, v6, 33, 0);
  v4 = sub_10000B4C8(a2);
  Published.projectedValue.getter(v4);
  return swift_endAccess(v6);
}

uint64_t MPCPlayerResponse.VideoContext.$videoBounds.setter(uint64_t a1)
{
  return sub_1001F35CC(a1, &qword_1005521F8, &OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__videoBounds, &qword_1005521F0);
}

uint64_t sub_1001F35CC(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v15[24];

  v8 = sub_10000B4C8(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  swift_beginAccess(v4 + *a3, v15, 33, 0);
  v12 = sub_10000B4C8(a4);
  Published.projectedValue.setter(v11, v12);
  swift_endAccess(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
}

void (*MPCPlayerResponse.VideoContext.$videoBounds.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_10000B4C8(&qword_1005521F8);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__videoBounds;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_10000B4C8(&qword_1005521F0);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_1001F3344;
}

void sub_1001F376C(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = v3[15];
  v6 = v3[16];
  v7 = (void *)v3[13];
  v8 = (void *)v3[14];
  v10 = v3[11];
  v9 = (void *)v3[12];
  v11 = v3[9];
  v12 = v3[10];
  v13 = v11 + v5;
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess(v13, v3 + 3, 33, 0);
    Published.projectedValue.setter(v9, v6);
    swift_endAccess(v3 + 3);
    v14 = *(void (**)(void *, uint64_t))(v10 + 8);
    v14(v7, v12);
  }
  else
  {
    swift_beginAccess(v11 + v5, v3 + 6, 33, 0);
    Published.projectedValue.setter(v7, v6);
    swift_endAccess(v3 + 6);
    v14 = *(void (**)(void *, uint64_t))(v10 + 8);
  }
  v14(v8, v12);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

id MPCPlayerResponse.VideoContext.output.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output);
  swift_beginAccess(v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output, v3, 0, 0);
  return *v1;
}

void MPCPlayerResponse.VideoContext.output.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*MPCPlayerResponse.VideoContext.output.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t MPCPlayerResponse.VideoContext.description.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t WitnessTable;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v8 = 0;
  v9 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v10 = 0xD000000000000026;
  v11 = 0x800000010044C660;
  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output);
  swift_beginAccess(v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output, &v8, 0, 0);
  v2 = *v1;
  ObjectType = swift_getObjectType();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, ObjectType, v2, v8, v9);
  v5._countAndFlagsBits = sub_1000D19E0((uint64_t)&v7, ObjectType, WitnessTable);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t MPCPlayerResponse.VideoContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__isReadyForDisplay;
  v2 = sub_10000B4C8(&qword_1005521E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__videoBounds;
  v4 = sub_10000B4C8(&qword_1005521F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_binding));
  return v0;
}

uint64_t MPCPlayerResponse.VideoContext.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__isReadyForDisplay;
  v2 = sub_10000B4C8(&qword_1005521E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext__videoBounds;
  v4 = sub_10000B4C8(&qword_1005521F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_binding));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

unint64_t sub_1001F3B58()
{
  return MPCPlayerResponse.VideoContext.description.getter();
}

uint64_t sub_1001F3B78(uint64_t *a1, uint64_t *a2)
{
  return _sSo17MPCPlayerResponseC9MusicCoreE12VideoContextC2eeoiySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t MPCPlayerResponse.videoContext.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  __objc2_prot *v10;

  v1 = v0;
  v2 = objc_msgSend(v1, "videoOutput");
  v3 = (uint64_t)v2;
  if (v2)
  {
    v10 = &OBJC_PROTOCOL___MPCVideoOutput;
    v4 = swift_dynamicCastObjCProtocolConditional(v2, 1, &v10);
    if (!v4)
      goto LABEL_8;
    v5 = (void *)v4;
    ObjectType = swift_getObjectType();
    v7 = sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
    if (!swift_dynamicCastMetatype(ObjectType, v7))
      v5 = 0;
    if (!v5)
    {
LABEL_8:
      swift_unknownObjectRelease(v3);

      return 0;
    }
    v8 = type metadata accessor for MPCPlayerResponse.VideoContext(0);
    v3 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    MPCPlayerResponse.VideoContext.init(output:)(v5);
  }

  return v3;
}

uint64_t _sSo17MPCPlaybackEngineC9MusicCoreE13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, Swift::Int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  char v12;
  uint64_t result;
  id v14;
  id v15;
  char v16;

  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
    if ((sub_1001CCF20(a3, a7) & 1) != 0)
    {
      if (a4)
      {
        if (a8)
        {
          sub_1000DD108(0, (unint64_t *)&unk_100552390, MPCPlaybackIntent_ptr);
          v14 = a8;
          v15 = a4;
          v16 = static NSObject.== infix(_:_:)(v15, v14);

          if ((v16 & 1) != 0)
            return 1;
        }
      }
      else if (!a8)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t _sSo17MPCPlayerResponseC9MusicCoreE12VideoContextC2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t KeyPath;
  uint64_t v12;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGRect v24;
  _BYTE v25[24];
  _BYTE v26[24];
  CGRect v27;

  sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
  v4 = (void **)(a1 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output);
  swift_beginAccess(a1 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output, v26, 0, 0);
  v5 = *v4;
  v6 = (void **)(a2 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output);
  swift_beginAccess(a2 + OBJC_IVAR____TtCE9MusicCoreCSo17MPCPlayerResponse12VideoContext_output, v25, 0, 0);
  v7 = *v6;
  v8 = v5;
  v9 = v7;
  v10 = static NSObject.== infix(_:_:)(v8, v9);

  if ((v10 & 1) == 0)
    return 0;
  KeyPath = swift_getKeyPath(&unk_100431310);
  v12 = swift_getKeyPath(&unk_100431338);
  static Published.subscript.getter(&v24, a1, KeyPath, v12);
  swift_release(KeyPath);
  swift_release(v12);
  x = v24.origin.x;
  y = v24.origin.y;
  width = v24.size.width;
  height = v24.size.height;
  v17 = swift_getKeyPath(&unk_100431310);
  v18 = swift_getKeyPath(&unk_100431338);
  static Published.subscript.getter(&v24, a2, v17, v18);
  swift_release(v17);
  swift_release(v18);
  v27.origin.x = x;
  v27.origin.y = y;
  v27.size.width = width;
  v27.size.height = height;
  result = CGRectEqualToRect(v27, v24);
  if (!(_DWORD)result)
    return result;
  v20 = swift_getKeyPath(&unk_100431358);
  v21 = swift_getKeyPath(&unk_100431380);
  static Published.subscript.getter(&v24, a1, v20, v21);
  swift_release(v20);
  swift_release(v21);
  if (LOBYTE(v24.origin.x) != 1)
    return 0;
  v22 = swift_getKeyPath(&unk_100431358);
  v23 = swift_getKeyPath(&unk_100431380);
  static Published.subscript.getter(&v24, a2, v22, v23);
  swift_release(v22);
  swift_release(v23);
  return LOBYTE(v24.origin.x);
}

void *sub_1001F3F5C(void *a1)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  void *v8;

  v8 = &_swiftEmptySetSingleton;
  if (objc_msgSend(a1, "isSystemMusicApplication"))
    sub_1001D3C48(&v3, 0);
  if (objc_msgSend(a1, "isAudioAnalyzerEnabled"))
    sub_1001D3C48(&v4, 1u);
  if (objc_msgSend(a1, "isPictureInPictureSupported"))
    sub_1001D3C48(&v5, 2u);
  if (objc_msgSend(a1, "isVideoSupported"))
    sub_1001D3C48(&v6, 3u);
  if (objc_msgSend(a1, "isStateRestorationSupported"))
    sub_1001D3C48(&v7, 4u);
  return v8;
}

id sub_1001F4040(uint64_t a1, uint64_t a2)
{
  void *v2;

  objc_msgSend(v2, "setSystemMusicApplication:", sub_1001682B0(0, a1));
  objc_msgSend(v2, "setAudioAnalyzerEnabled:", sub_1001682B0(1u, a1));
  objc_msgSend(v2, "setPictureInPictureSupported:", sub_1001682B0(2u, a1));
  objc_msgSend(v2, "setVideoSupported:", sub_1001682B0(3u, a1));
  objc_msgSend(v2, "setStateRestorationSupported:", sub_1001682B0(4u, a1));
  return objc_msgSend(v2, "setFallbackPlaybackIntent:", a2);
}

uint64_t sub_1001F4118(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8((uint64_t *)&unk_1005521A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001F4158(void *a1)
{
  uint64_t v1;

  sub_1001F2730(a1, *(void **)(v1 + 16), *(_BYTE **)(v1 + 24));
}

uint64_t sub_1001F4160()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F4170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001F4180(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for MPCPlayerResponse.VideoContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100552248;
  if (!qword_100552248)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MPCPlayerResponse.VideoContext);
  return result;
}

const char *sub_1001F41C4()
{
  return "isReadyForDisplay";
}

id sub_1001F41D0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isReadyForDisplay");
  *a2 = (_BYTE)result;
  return result;
}

const char *sub_1001F4200()
{
  return "videoBounds";
}

id sub_1001F420C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*a1, "videoBounds");
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t sub_1001F4240()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001F4264()
{
  uint64_t v0;

  sub_1001F2D94(v0);
}

unint64_t sub_1001F4280()
{
  unint64_t result;

  result = qword_100552200;
  if (!qword_100552200)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MPCPlaybackEngine.Option, &type metadata for MPCPlaybackEngine.Option);
    atomic_store(result, (unint64_t *)&qword_100552200);
  }
  return result;
}

unint64_t sub_1001F42C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552208;
  if (!qword_100552208)
  {
    v1 = sub_100011650(&qword_100552210);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100552208);
  }
  return result;
}

unint64_t sub_1001F4318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552218;
  if (!qword_100552218)
  {
    type metadata accessor for MPCPlayerRequestTracklistRange(255);
    result = swift_getWitnessTable(protocol conformance descriptor for MPCPlayerRequestTracklistRange, v1);
    atomic_store(result, (unint64_t *)&qword_100552218);
  }
  return result;
}

void _s13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));

}

_QWORD *_s13ConfigurationVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *_s13ConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a1[3];
  v7 = (void *)a2[3];
  a1[3] = v7;
  v8 = v7;

  return a1;
}

_QWORD *_s13ConfigurationVwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t _s13ConfigurationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPCPlaybackEngine.Configuration()
{
  return &type metadata for MPCPlaybackEngine.Configuration;
}

uint64_t _s6OptionOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001F4588 + 4 * byte_100431265[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001F45BC + 4 * asc_100431260[v4]))();
}

uint64_t sub_1001F45BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F45C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F45CCLL);
  return result;
}

uint64_t sub_1001F45D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F45E0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001F45E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F45EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPCPlaybackEngine.Option()
{
  return &type metadata for MPCPlaybackEngine.Option;
}

uint64_t sub_1001F4608()
{
  return type metadata accessor for MPCPlayerResponse.VideoContext(0);
}

void sub_1001F4610(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_1001F46AC();
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001F4700(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\b";
      v6[3] = &unk_100431578;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

void sub_1001F46AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100552258)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100552258);
  }
}

void sub_1001F4700(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100552260)
  {
    type metadata accessor for CGRect(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100552260);
  }
}

uint64_t sub_1001F4754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8((uint64_t *)&unk_1005521A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Player.SnapshotController.windowScene.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t Player.SnapshotController.player.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t Player.SnapshotController.__allocating_init(windowScene:player:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 81, 7);
  Player.SnapshotController.init(windowScene:player:)(a1, a2);
  return v5;
}

uint64_t Player.SnapshotController.init(windowScene:player:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  CFRange v12;
  CFRange v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  NSString *v17;
  uint64_t v18;
  CFRange v19;
  uint64_t v20;
  NSString *v21;
  uint64_t v22;
  CFRange v23;
  uint64_t v24;
  NSString *v25;
  uint64_t v26;
  _BYTE v29[72];
  _BYTE v30[72];
  _BYTE v31[112];
  _BYTE v32[32];

  v3 = v2;
  v6 = v2 + 16;
  v7 = swift_unknownObjectWeakInit(v6, 0);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 32) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 80) = 1;
  swift_beginAccess(v7, v32, 1, 0);
  swift_unknownObjectWeakAssign(v6, a1);
  *(_QWORD *)(v3 + 24) = a2;
  v8 = sub_10000B4C8((uint64_t *)&unk_100550D50);
  v9 = swift_allocObject(v8, 56, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100428000;
  v10 = sub_10000B4C8(&qword_100550030);
  inited = swift_initStackObject(v10, v31);
  *(_OWORD *)(inited + 16) = xmmword_100424BA0;
  v12 = CFRange.init(_:)((__C::_NSRange)(unint64_t)UISceneDidEnterBackgroundNotification);
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 32) = v12;
  v13 = CFRange.init(_:)((__C::_NSRange)(unint64_t)UISceneWillEnterForegroundNotification);
  *(_QWORD *)(inited + 96) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 104) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(inited + 72) = v13;
  v14 = swift_allocObject(&unk_10050E1F8, 24, 7);
  swift_weakInit(v14 + 16, v3);
  v15 = type metadata accessor for Whitetail.Binding();
  swift_allocObject(v15, 48, 7);
  swift_retain(a2);
  v16 = UISceneDidEnterBackgroundNotification;
  v17 = UISceneWillEnterForegroundNotification;
  *(_QWORD *)(v9 + 32) = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, 1, (uint64_t)sub_1001F4BD4, v14);
  v18 = swift_initStackObject(v10, v30);
  *(_OWORD *)(v18 + 16) = xmmword_100424BB0;
  v19 = CFRange.init(_:)((__C::_NSRange)(unint64_t)UIScreenBrightnessDidChangeNotification);
  *(_QWORD *)(v18 + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(v18 + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(v18 + 32) = v19;
  v20 = swift_allocObject(&unk_10050E1F8, 24, 7);
  swift_weakInit(v20 + 16, v3);
  swift_allocObject(v15, 48, 7);
  v21 = UIScreenBrightnessDidChangeNotification;
  *(_QWORD *)(v9 + 40) = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(v18, 1, (uint64_t)sub_1001F51C0, v20);
  v22 = swift_initStackObject(v10, v29);
  *(_OWORD *)(v22 + 16) = xmmword_100424BB0;
  v23 = CFRange.init(_:)((__C::_NSRange)(unint64_t)UIApplicationProtectedDataDidBecomeAvailable);
  *(_QWORD *)(v22 + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(v22 + 64) = &protocol witness table for NotificationTrigger;
  *(CFRange *)(v22 + 32) = v23;
  v24 = swift_allocObject(&unk_10050E1F8, 24, 7);
  swift_weakInit(v24 + 16, v3);
  swift_allocObject(v15, 48, 7);
  v25 = UIApplicationProtectedDataDidBecomeAvailable;
  v26 = Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(v22, 1, (uint64_t)sub_1001F582C, v24);
  *(_QWORD *)(v9 + 48) = v26;
  specialized Array._endMutation()(v26);

  swift_release(a2);
  *(_QWORD *)(v3 + 32) = v9;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1001F4B5C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1001F4B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1001F4BDC();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

double sub_1001F4BD4()
{
  uint64_t v0;

  return sub_1001F4B80(v0);
}

double sub_1001F4BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *Strong;
  void *v18;
  id v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  int v61;
  os_log_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70[3];
  char v71[24];

  v1 = v0;
  v2 = sub_10000B4C8((uint64_t *)&unk_100555710);
  __chkstk_darwin(v2);
  v68 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000B4C8(&qword_100552D10);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_100552478);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000B4C8(&qword_100552480);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10000B4C8(&qword_100552488);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v66 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0 + 16;
  swift_beginAccess(v16, v71, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v16);
  if (Strong && (v18 = Strong, v19 = objc_msgSend(Strong, "activationState"), v18, v19 == (id)2))
  {
    if (*(_QWORD *)(v1 + 40))
      return result;
    if (qword_10054BCC0 != -1)
      swift_once(&qword_10054BCC0, sub_1002107A4);
    v63 = v14;
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10000D78C(v21, (uint64_t)qword_100561910);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      v62 = v23;
      v26 = v25;
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v24, "[📸👁️] App is backgrounded: Observing for now playing changes", v25, 2u);
      v27 = v26;
      v23 = v62;
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = *(_QWORD *)(v1 + 24);
    KeyPath = swift_getKeyPath(&unk_1004315F8);
    v30 = swift_getKeyPath(&unk_100431620);
    static Published.subscript.getter(v70, v28, KeyPath, v30);
    swift_release(KeyPath);
    swift_release(v30);
    v31 = *(void **)(v1 + 48);
    *(id *)(v1 + 48) = v70[0];

    swift_beginAccess(v28 + OBJC_IVAR____TtC9MusicCore6Player__nowPlaying, v70, 33, 0);
    v32 = sub_10000B4C8((uint64_t *)&unk_1005527F0);
    Published.projectedValue.getter(v32);
    swift_endAccess(v70);
    v33 = sub_100012324((unint64_t *)&qword_100552490, &qword_100552D10, (const char *)&protocol conformance descriptor for Published<A>.Publisher);
    Publisher.dropFirst(_:)(1, v4, v33);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v34 = sub_100012324(&qword_100552498, &qword_100552478, (const char *)&protocol conformance descriptor for Publishers.Drop<A>);
    v35 = sub_1001F61EC();
    v36 = v63;
    Publisher<>.removeDuplicates()(v8, v34, v35);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v37 = sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
    v70[0] = (id)static OS_dispatch_queue.main.getter(v37, v38, v39, v40, v41, v42, v43, v44);
    v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v46 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v68, 1, 1, v45);
    v47 = sub_100012324(&qword_1005524B8, &qword_100552480, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    sub_1001F6270((unint64_t *)&qword_100552C90, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v48 = v65;
    v49 = v66;
    Publisher.receive<A>(on:options:)(v70, v46, v65, v37, v47);
    sub_100011694(v46, (uint64_t *)&unk_100555710);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v48);
    v50 = swift_allocObject(&unk_10050E1F8, 24, 7);
    swift_weakInit(v50 + 16, v1);
    v51 = sub_100012324(&qword_1005524C0, &qword_100552488, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v52 = v69;
    v53 = Publisher<>.sink(receiveValue:)(sub_1001F62B0, v50, v69, v51);
    v54 = swift_release(v50);
    (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v49, v52, v54);
    v55 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = v53;
  }
  else
  {
    if (qword_10054BCC0 != -1)
      swift_once(&qword_10054BCC0, sub_1002107A4);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_10000D78C(v56, (uint64_t)qword_100561910);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "[📸👁️] App is foregrounded: Stopping now playing changes observation", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    v61 = *(unsigned __int8 *)(v1 + 64);
    *(_BYTE *)(v1 + 64) = 0;
    if (v61 == 1)
    {
      *(_QWORD *)(v1 + 72) = 0;
      *(_BYTE *)(v1 + 80) = 1;
    }
    v55 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
  }
  *(_QWORD *)&result = swift_release(v55).n128_u64[0];
  return result;
}

double sub_1001F51C0()
{
  uint64_t v0;

  return sub_1001F57D0(v0, 0);
}

void sub_1001F51DC(char a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  unsigned int v5;
  void *Strong;
  void *v7;
  id v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  NSObject *oslog;
  char v46;
  uint64_t v47;
  uint64_t v48[3];

  if (*(_BYTE *)(v1 + 64) == 1)
  {
    v3 = (void *)objc_opt_self(UIApplication);
    v4 = objc_msgSend(v3, "sharedApplication");
    v5 = objc_msgSend(v4, "isProtectedDataAvailable");

    if (v5)
    {
      swift_beginAccess(v1 + 16, v48, 0, 0);
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
      if (Strong
        && (v7 = Strong,
            v8 = objc_msgSend(Strong, "screen"),
            v7,
            objc_msgSend(v8, "brightness"),
            v10 = v9,
            v8,
            v10 > 0.0))
      {
        v11 = *(unsigned __int8 *)(v1 + 64);
        *(_BYTE *)(v1 + 64) = 0;
        if (v11 == 1)
        {
          *(_QWORD *)(v1 + 72) = 0;
          *(_BYTE *)(v1 + 80) = 1;
        }
        if (qword_10054BCC0 != -1)
          swift_once(&qword_10054BCC0, sub_1002107A4);
        v12 = type metadata accessor for Logger(0);
        v13 = sub_10000D78C(v12, (uint64_t)qword_100561910);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = swift_slowAlloc(22, -1);
          v17 = swift_slowAlloc(32, -1);
          v47 = v17;
          *(_DWORD *)v16 = 134349314;
          *(double *)(v16 + 4) = v10;
          *(_WORD *)(v16 + 12) = 2080;
          v18 = objc_msgSend(v3, "sharedApplication");
          v19 = objc_msgSend(v18, "isProtectedDataAvailable");

          if (v19)
            v20 = 0x64656B636F6C6E75;
          else
            v20 = 0x64656B636F6CLL;
          if (v19)
            v21 = (char *)0xE800000000000000;
          else
            v21 = (char *)0xE600000000000000;
          *(_QWORD *)(v16 + 14) = sub_1000BA30C((char *)v20, v21, &v47);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "[📸] Brightness is at %{public}f, device is %s", (uint8_t *)v16, 0x16u);
          swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v17, -1, -1);
          swift_slowDealloc(v16, -1, -1);
        }

        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = swift_slowAlloc(12, -1);
          v26 = swift_slowAlloc(32, -1);
          v47 = v26;
          *(_DWORD *)v25 = 136446210;
          v46 = a1;
          v27 = (char *)String.init<A>(describing:)(&v46, &_s18SnapshotControllerC6ReasonON);
          *(_QWORD *)(v25 + 4) = sub_1000BA30C(v27, v28, &v47);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "[📸✅:%{public}s] Taking Snapshot!", (uint8_t *)v25, 0xCu);
          swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v26, -1, -1);
          swift_slowDealloc(v25, -1, -1);
        }

        v29 = objc_msgSend(v3, "sharedApplication");
        objc_msgSend(v29, "_updateSnapshotForBackgroundApplication:", 0);

      }
      else
      {
        if (qword_10054BCC0 != -1)
          swift_once(&qword_10054BCC0, sub_1002107A4);
        v37 = type metadata accessor for Logger(0);
        v38 = sub_10000D78C(v37, (uint64_t)qword_100561910);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = swift_slowAlloc(12, -1);
          v42 = swift_slowAlloc(32, -1);
          v47 = v42;
          *(_DWORD *)v41 = 136446210;
          v46 = a1;
          v43 = (char *)String.init<A>(describing:)(&v46, &_s18SnapshotControllerC6ReasonON);
          *(_QWORD *)(v41 + 4) = sub_1000BA30C(v43, v44, &v47);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "[📸❌:%{public}s] Skipping: Screen brightness is 0", (uint8_t *)v41, 0xCu);
          swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v41, -1, -1);
        }

      }
    }
    else
    {
      if (qword_10054BCC0 != -1)
        swift_once(&qword_10054BCC0, sub_1002107A4);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_10000D78C(v30, (uint64_t)qword_100561910);
      oslog = Logger.logObject.getter(v31);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v32))
      {
        v33 = swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v48[0] = v34;
        *(_DWORD *)v33 = 136446210;
        LOBYTE(v47) = a1;
        v35 = (char *)String.init<A>(describing:)(&v47, &_s18SnapshotControllerC6ReasonON);
        *(_QWORD *)(v33 + 4) = sub_1000BA30C(v35, v36, v48);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, oslog, v32, "[📸❌:%{public}s] Skipping Snapshot Request: Device is locked", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

      }
    }
  }
}

double sub_1001F57D0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_1001F51DC(a2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

double sub_1001F582C()
{
  uint64_t v0;

  return sub_1001F57D0(v0, 1);
}

void sub_1001F5848(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;

  v5 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v2 + 48);
  v33 = v8;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v2 + 48) = a1;
    v9 = a1;

    return;
  }
  if (v8)
  {
    v10 = objc_msgSend(v8, "tracklist");
    v11 = objc_msgSend(v10, "playingItem");

    if (!a1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      if (!v11)
        goto LABEL_25;
      goto LABEL_9;
    }
  }
  else
  {
    v11 = 0;
    v13 = 0;
    v14 = 0;
    if (!a1)
      goto LABEL_25;
  }
  v15 = objc_msgSend(a1, "tracklist");
  v12 = objc_msgSend(v15, "playingItem");

  if (!v11)
  {
    v13 = 0;
    v19 = 0;
    v17 = 0;
    v14 = 0;
    if (!v12)
      goto LABEL_25;
    goto LABEL_12;
  }
LABEL_9:
  v16 = objc_msgSend(v11, "contentItemIdentifier");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  if (!v12)
  {
    v14 = 0;
    v13 = v11;
    if (!v19)
      goto LABEL_25;
    goto LABEL_22;
  }
  v13 = v11;
LABEL_12:
  v20 = objc_msgSend(v12, "contentItemIdentifier");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  if (!v19)
  {
    v14 = v12;
    if (!v23)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (!v23)
  {
    v11 = v13;
LABEL_22:
    v13 = v11;
LABEL_23:
    v24 = swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (v17 == v21 && v19 == v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v12;
    goto LABEL_25;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v23, 0);
  swift_bridgeObjectRelease();
  v24 = swift_bridgeObjectRelease();
  v14 = v12;
  if ((v25 & 1) == 0)
  {
LABEL_27:
    static TaskPriority.userInitiated.getter(v24);
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v7, 0, 1, v26);
    v27 = swift_allocObject(&unk_10050E230, 32, 7);
    *(_QWORD *)(v27 + 16) = &unk_1005524D0;
    *(_QWORD *)(v27 + 24) = v2;
    swift_retain(v2);
    v28 = static Task<>.delayed(by:priority:task:)((uint64_t)v7, (uint64_t)&unk_1005524E0, v27, (uint64_t)&type metadata for () + 8, 1.0);
    swift_release(v27);
    sub_100011694((uint64_t)v7, (uint64_t *)&unk_100552B60);
    v29 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = v28;
    swift_retain(v28);
    if (v29)
    {
      sub_10000B4C8((uint64_t *)&unk_100550630);
      Task.cancel()();
      swift_release(v29);
    }
    swift_release(v28);

    goto LABEL_31;
  }
LABEL_25:
  v24 = sub_1001F5C28(v13, v14);
  if ((v24 & 1) != 0)
  {
    v12 = v14;
    goto LABEL_27;
  }

LABEL_31:
  v30 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  v31 = a1;

}

double sub_1001F5BC8(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_1001F5848(v2, 0);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001F5C28(void *a1, id a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unsigned int v8;
  id v10;
  void *v11;

  if (a1)
  {
    v3 = objc_msgSend(a1, "metadataObject");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "innermostModelObject");

      if (!a2)
        goto LABEL_4;
LABEL_8:
      v10 = objc_msgSend(a2, "metadataObject");
      if (v10)
      {
        v11 = v10;
        a2 = objc_msgSend(v10, "innermostModelObject");

        if (v5)
          goto LABEL_5;
      }
      else
      {
        a2 = 0;
        if (v5)
          goto LABEL_5;
      }
      goto LABEL_10;
    }
  }
  v5 = 0;
  if (a2)
    goto LABEL_8;
LABEL_4:
  if (v5)
  {
LABEL_5:
    if (a2)
    {
      v6 = objc_msgSend(v5, "identifiers");
      v7 = objc_msgSend(a2, "identifiers");
      v8 = objc_msgSend(v6, "intersectsSet:", v7);

      return v8 ^ 1;
    }

    return 1;
  }
LABEL_10:
  if (a2)
  {

    return 1;
  }
  return 0;
}

uint64_t sub_1001F5D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001F5DD8, v3, v4);
}

uint64_t sub_1001F5DD8()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  if ((static Task<>.isCancelled.getter(v1) & 1) == 0)
    sub_1001F5E1C(2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001F5E1C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t aBlock[5];
  uint64_t v18;

  if ((*(_BYTE *)(v1 + 64) & 1) == 0)
  {
    v2 = v1;
    *(_BYTE *)(v1 + 64) = 1;
    *(_QWORD *)(v1 + 72) = 0;
    *(_BYTE *)(v1 + 80) = 1;
    if (qword_10054BCC0 != -1)
      swift_once(&qword_10054BCC0, sub_1002107A4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000D78C(v4, (uint64_t)qword_100561910);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      aBlock[0] = v9;
      *(_DWORD *)v8 = 136446210;
      v16 = a1;
      v10 = (char *)String.init<A>(describing:)(&v16, &_s18SnapshotControllerC6ReasonON);
      *(_QWORD *)(v8 + 4) = sub_1000BA30C(v10, v11, aBlock);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[📸] Set Needs Snapshot for Reason=%{public}s", (uint8_t *)v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v12 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v13 = swift_allocObject(&unk_10050E258, 25, 7);
    *(_QWORD *)(v13 + 16) = v2;
    *(_BYTE *)(v13 + 24) = a1;
    aBlock[4] = (uint64_t)sub_1001F63B8;
    v18 = v13;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10015F6F8;
    aBlock[3] = (uint64_t)&unk_10050E270;
    v14 = _Block_copy(aBlock);
    v15 = v18;
    swift_retain(v2);
    objc_msgSend(v12, "_performBlockAfterCATransactionCommits:", v14, swift_release(v15).n128_f64[0]);
    _Block_release(v14);

  }
}

uint64_t sub_1001F6048(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_100075040;
  return v5();
}

uint64_t Player.SnapshotController.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t Player.SnapshotController.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 81, 7);
}

uint64_t sub_1001F612C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1001F6178(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + 16;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_unknownObjectWeakAssign(v3, v2);
}

uint64_t type metadata accessor for Player.SnapshotController()
{
  return objc_opt_self(_TtCC9MusicCore6Player18SnapshotController);
}

unint64_t sub_1001F61EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1005524A0;
  if (!qword_1005524A0)
  {
    v1 = sub_100011650(&qword_100552BD0);
    v2 = sub_1001F6270(&qword_1005524A8, &qword_1005524B0, MPCPlayerResponse_ptr, (const char *)&protocol conformance descriptor for NSObject);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1005524A0);
  }
  return result;
}

uint64_t sub_1001F6270(unint64_t *a1, unint64_t *a2, _QWORD *a3, const char *a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000DD108(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1001F62B0(void **a1)
{
  uint64_t v1;

  return sub_1001F5BC8(a1, v1);
}

uint64_t sub_1001F62B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1005524CC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000DC64;
  return sub_1001F5D6C(v0);
}

uint64_t sub_1001F6300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F6324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1005524DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000DC64;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1005524D8 + dword_1005524D8))(a1, v4);
}

uint64_t sub_1001F6394()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1001F63B8()
{
  uint64_t v0;

  sub_1001F51DC(*(_BYTE *)(v0 + 24));
}

uint64_t sub_1001F63E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001F63F0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t _s18SnapshotControllerC6ReasonOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001F6444 + 4 * byte_100431595[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001F6478 + 4 * byte_100431590[v4]))();
}

uint64_t sub_1001F6478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F6480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F6488);
  return result;
}

uint64_t sub_1001F6494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F649CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001F64A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F64A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s18SnapshotControllerC6ReasonOMa()
{
  return &_s18SnapshotControllerC6ReasonON;
}

unint64_t sub_1001F64C8()
{
  unint64_t result;

  result = qword_1005524E8;
  if (!qword_1005524E8)
  {
    result = swift_getWitnessTable(byte_100431688, &_s18SnapshotControllerC6ReasonON);
    atomic_store(result, (unint64_t *)&qword_1005524E8);
  }
  return result;
}

uint64_t PlaybackController.insert(_:location:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v3[22] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v3[23] = v7;
  v3[24] = v8;
  return swift_task_switch(sub_1001F65A4, v7, v8);
}

uint64_t sub_1001F65A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t KeyPath;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  _QWORD *v34;
  uint64_t v36;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[19];
  v4 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v5 = (char *)UUID.uuidString.getter(v4);
  v7 = v6;
  v0[25] = v5;
  v0[26] = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v8 = (void *)v0[16];
  v9 = type metadata accessor for Logger(0);
  v0[27] = sub_10000D78C(v9, (uint64_t)static Logger.playbackController);
  swift_bridgeObjectRetain_n(v7, 2);
  v10 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = (void *)v0[16];
  if (v12)
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v36 = v15;
    *(_DWORD *)v14 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v14 + 4) = sub_1000BA30C(v5, v7, &v36);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v14 + 12) = 2082;
    v16 = v13;
    v17 = objc_msgSend(v16, "description", v36);
    v18 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    *(_QWORD *)(v14 + 14) = sub_1000BA30C(v18, v20, &v36);
    swift_bridgeObjectRelease(v20);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "⤵️ Inserting new intent with ID=%{public}s, intent=%{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v7, 2);

  }
  v21 = (uint64_t *)(v0[18] + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v21, v0 + 7, 0, 0);
  v22 = *v21;
  v24 = (void *)v0[16];
  v23 = (void *)v0[17];
  if (!v22)
  {
    v30 = v24;
    sub_1000F3528(v23);
    goto LABEL_10;
  }
  KeyPath = swift_getKeyPath(&unk_1004316C0);
  v26 = swift_getKeyPath(&unk_1004316E8);
  v27 = v24;
  swift_retain(v22);
  sub_1000F3528(v23);
  static Published.subscript.getter(v0 + 14, v22, KeyPath, v26);
  swift_release(v26);
  swift_release(KeyPath);
  swift_release(v22);
  v28 = (void *)v0[14];
  if (!v28)
  {
LABEL_10:
    v29 = 0;
    goto LABEL_11;
  }

  v29 = 1;
LABEL_11:
  v32 = (void *)v0[16];
  v31 = (void *)v0[17];
  MPCPlaybackIntent.isInGroupSession.setter(v29);
  v0[5] = &type metadata for Player.InsertCommand;
  v0[6] = &protocol witness table for Player.InsertCommand;
  v0[2] = v32;
  v0[3] = v31;
  v33 = v32;
  sub_1000F3528(v31);
  v34 = (_QWORD *)swift_task_alloc(dword_10055251C);
  v0[28] = v34;
  *v34 = v0;
  v34[1] = sub_1001F68F0;
  return PlaybackController.perform(_:options:route:intent:)((uint64_t)(v0 + 2), 0, 0, (uint64_t)v32);
}

uint64_t sub_1001F68F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  *(_QWORD *)(*(_QWORD *)v2 + 232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[23];
    v7 = v4[24];
    v8 = sub_1001F6AEC;
  }
  else
  {

    sub_100011758(v4 + 2);
    v6 = v4[23];
    v7 = v4[24];
    v8 = sub_1001F6970;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_1001F6970()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 176));
  v1 = swift_bridgeObjectRetain();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(char **)(v0 + 208);
  if (v4)
  {
    v6 = *(char **)(v0 + 200);
    v8 = *(void **)(v0 + 128);
    v7 = *(void **)(v0 + 136);
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v13 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v9 + 4) = sub_1000BA30C(v6, v5, &v13);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "✅ Successfully inserted intent with ID=%{public}s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    sub_1000F32C4(v7);
  }
  else
  {
    v11 = *(void **)(v0 + 136);

    sub_1000F32C4(v11);
    swift_bridgeObjectRelease_n(v5, 2);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F6AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  void *v31;
  void *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 232);
  sub_100011758((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 120) = v1;
  swift_errorRetain(v1);
  v2 = sub_10000B4C8((uint64_t *)&unk_100550630);
  if (!swift_dynamicCast(v0 + 80, v0 + 120, v2, &type metadata for Player.PlaybackError, 0))
  {
    v15 = *(_QWORD *)(v0 + 208);
    v16 = *(_QWORD *)(v0 + 176);
    v17 = *(void **)(v0 + 136);

    sub_1000F32C4(v17);
    swift_release(v16);
    swift_bridgeObjectRelease(v15);
LABEL_12:
    v36 = *(_QWORD *)(v0 + 168);
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_errorRelease(*(_QWORD *)(v0 + 232));
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 240) = v4;
  *(_QWORD *)(v0 + 248) = v3;
  v5 = (void *)_convertErrorToNSError(_:)(v4);
  v6 = objc_msgSend(v5, "code");

  if (v6 != (id)3)
  {
    swift_release(*(_QWORD *)(v0 + 176));
    swift_errorRetain(v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain(v4);
    v18 = swift_bridgeObjectRetain();
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(char **)(v0 + 208);
    if (v21)
    {
      v23 = *(char **)(v0 + 200);
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v37[0] = v25;
      *(_DWORD *)v24 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v24 + 4) = sub_1000BA30C(v23, v22, v37);
      swift_bridgeObjectRelease_n(v22, 3);
      *(_WORD *)(v24 + 12) = 2082;
      *(_QWORD *)(v0 + 96) = v4;
      *(_QWORD *)(v0 + 104) = v3;
      swift_errorRetain(v4);
      swift_bridgeObjectRetain();
      v26 = (char *)String.init<A>(describing:)(v0 + 96, &type metadata for Player.PlaybackError);
      v28 = v27;
      *(_QWORD *)(v24 + 14) = sub_1000BA30C(v26, v27, v37);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(v4);
      swift_bridgeObjectRelease(v3);
      swift_errorRelease(v4);
      swift_bridgeObjectRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "❌ Insert failed for intent with ID=%{public}s, error=%{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 208), 2);
      swift_errorRelease(v4);
      swift_bridgeObjectRelease(v3);
      swift_errorRelease(v4);
      swift_bridgeObjectRelease(v3);
    }

    v32 = *(void **)(v0 + 128);
    v31 = *(void **)(v0 + 136);
    v33 = sub_10020B4A4();
    swift_allocError(&type metadata for Player.PlaybackError, v33, 0, 0);
    *v34 = v4;
    v34[1] = v3;
    swift_errorRetain(v4);
    v35 = swift_bridgeObjectRetain();
    swift_willThrow(v35);

    sub_1000F32C4(v31);
    swift_errorRelease(v4);
    swift_bridgeObjectRelease(v3);
    goto LABEL_12;
  }
  v7 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 208), 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(char **)(v0 + 208);
  if (v10)
  {
    v12 = *(char **)(v0 + 200);
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v37[0] = v14;
    *(_DWORD *)v13 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v13 + 4) = sub_1000BA30C(v12, v11, v37);
    swift_bridgeObjectRelease_n(v11, 3);
    *(_WORD *)(v13 + 12) = 2082;
    *(_QWORD *)(v13 + 14) = sub_1000BA30C((char *)0xD00000000000001FLL, (char *)0x800000010044C7D0, v37);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "❌ Insert failed for intent with ID=%{public}s, error=%{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 208), 2);
  }

  v29 = (_QWORD *)swift_task_alloc(dword_100552534);
  *(_QWORD *)(v0 + 256) = v29;
  *v29 = v0;
  v29[1] = sub_1001F6F7C;
  return sub_1001F9BEC(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
}

uint64_t sub_1001F6F7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 256));
  v3 = v2[26];
  if (v0)
  {
    swift_errorRelease(v0);
    swift_bridgeObjectRelease(v3);
    v4 = v2[23];
    v5 = v2[24];
    v6 = sub_10020E178;
  }
  else
  {
    swift_bridgeObjectRelease(v2[26]);
    v4 = v2[23];
    v5 = v2[24];
    v6 = sub_1001F7000;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1001F7000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(void **)(v0 + 128);
  v3 = *(void **)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 176));
  v5 = sub_10020B4E8();
  v6 = swift_allocError(&type metadata for PlaybackController.CommandError, v5, 0, 0);
  *(_QWORD *)v7 = 3;
  *(_BYTE *)(v7 + 8) = 2;
  swift_willThrow(v6);

  sub_1000F32C4(v3);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease(v2);
  v8 = *(_QWORD *)(v0 + 168);
  swift_errorRelease(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PlaybackController.add(_:route:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  v4 = type metadata accessor for CocoaError.Code(0);
  v3[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[22] = v5;
  v3[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MusicPlaybackIntentDescriptor(0);
  v3[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[25] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v8);
  v3[27] = swift_task_alloc(v8);
  v9 = type metadata accessor for PlaybackIntentDescriptor.IntentType(0);
  v3[28] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v10);
  v3[30] = swift_task_alloc(v10);
  v11 = type metadata accessor for PlaybackIntentDescriptor(0);
  v3[31] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v12);
  v3[33] = swift_task_alloc(v12);
  v13 = type metadata accessor for UUID(0);
  v3[34] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[35] = v14;
  v3[36] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MainActor(0);
  v3[37] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  v3[38] = v16;
  v3[39] = v17;
  return swift_task_switch(sub_1001F721C, v16, v17);
}

uint64_t sub_1001F721C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v50;
  uint64_t v51;

  v2 = v0[35];
  v1 = v0[36];
  v3 = v0[34];
  v4 = (uint64_t *)(v0[20] + OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingPresentationDescriptor);
  swift_beginAccess(v4, v0 + 2, 1, 0);
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v8 = v4[3];
  v9 = v4[4];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[4] = 0;
  sub_10020B52C(v5, v6, v7, v8, v9);
  v10 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  v0[40] = v11;
  v0[41] = v12;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v14 = v0 + 5;
  v15 = v0[33];
  v16 = v0[18];
  v17 = type metadata accessor for Logger(0);
  v0[42] = v17;
  v0[43] = sub_10000D78C(v17, (uint64_t)static Logger.playbackController);
  sub_10000D964(v16, v15, type metadata accessor for PlaybackIntentDescriptor);
  v18 = swift_bridgeObjectRetain_n(v13, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v22 = v0[33];
  if (v21)
  {
    v23 = v0[31];
    v24 = v0[32];
    v25 = swift_slowAlloc(22, -1);
    v50 = (char *)v11;
    v51 = swift_slowAlloc(64, -1);
    v26 = v51;
    *(_DWORD *)v25 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v25 + 4) = sub_1000BA30C(v50, v13, &v51);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v25 + 12) = 2082;
    sub_10000D964(v22, v24, type metadata accessor for PlaybackIntentDescriptor);
    v27 = v24;
    v14 = v0 + 5;
    v28 = (char *)String.init<A>(describing:)(v27, v23);
    v30 = v29;
    *(_QWORD *)(v25 + 14) = sub_1000BA30C(v28, v29, &v51);
    swift_bridgeObjectRelease(v30);
    sub_10000E750(v22, type metadata accessor for PlaybackIntentDescriptor);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "➕ Adding new playback intent with ID=%{public}s, descriptor=%{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    v31 = v26;
    v11 = (uint64_t)v50;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v13, 2);
    sub_10000E750(v22, type metadata accessor for PlaybackIntentDescriptor);
  }

  v32 = v0[30];
  v33 = v0[28];
  sub_10000D964(v0[18], v32, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v32, v33);
  v35 = (void **)v0[30];
  if (EnumCaseMultiPayload == 1)
  {
    v36 = v0[27];
    v37 = v0[24];
    v38 = v0[25];
    v39 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v38 + 32))(v36, v35, v37);
    v40 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v39);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  }
  else
  {
    v40 = *v35;
  }
  v41 = (uint64_t *)(v0[20] + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v41, v14, 0, 0);
  v42 = *v41;
  if (!*v41)
    goto LABEL_12;
  KeyPath = swift_getKeyPath(&unk_1004316C0);
  v44 = swift_getKeyPath(&unk_1004316E8);
  v45 = swift_retain(v42);
  static Published.subscript.getter(v0 + 14, v45, KeyPath, v44);
  swift_release(v44);
  swift_release(KeyPath);
  swift_release(v42);
  v46 = (void *)v0[14];
  if (v46)
  {

    v47 = 1;
  }
  else
  {
LABEL_12:
    v47 = 0;
  }
  MPCPlaybackIntent.isInGroupSession.setter(v47);

  v48 = (_QWORD *)swift_task_alloc(dword_100552554);
  v0[44] = v48;
  *v48 = v0;
  v48[1] = sub_1001F75E8;
  return sub_1001FADBC(v0[18], v11, (uint64_t)v13, v0[19]);
}

uint64_t sub_1001F75E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001F7D30;
  else
    v4 = sub_1001F7648;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 304), *(_QWORD *)(v2 + 312));
}

uint64_t sub_1001F7648()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 328), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(char **)(v0 + 328);
  if (v4)
  {
    v6 = *(char **)(v0 + 320);
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v27 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v7 + 4) = sub_1000BA30C(v6, v5, &v27);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "✅ Successfully added intent with ID=%{public}s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
  }

  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 144);
  _s9MusicCore9AppReviewO16recordSongPlayedyyFZ_0();
  if (*(_BYTE *)(v10 + *(int *)(v9 + 32)) == 1)
  {
    v11 = (_QWORD *)swift_task_alloc(dword_10055256C);
    *(_QWORD *)(v0 + 368) = v11;
    *v11 = v0;
    v11[1] = sub_1001F790C;
    return sub_1001FFC58();
  }
  v13 = *(_QWORD *)(v0 + 144);
  if ((*(_BYTE *)(v13 + *(int *)(*(_QWORD *)(v0 + 248) + 36)) & 1) != 0)
  {
    v14 = *(_QWORD *)(v0 + 328);
    swift_release(*(_QWORD *)(v0 + 296));
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 232);
    sub_10000D964(v13, v16, type metadata accessor for PlaybackIntentDescriptor.IntentType);
    if (swift_getEnumCaseMultiPayload(v16, v15) == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 192));
      v17 = (_QWORD *)swift_task_alloc(async function pointer to MusicPlaybackIntentDescriptor.donate()[1]);
      *(_QWORD *)(v0 + 376) = v17;
      *v17 = v0;
      v17[1] = sub_1001F7AC0;
      return MusicPlaybackIntentDescriptor.donate()();
    }
    v18 = *(_QWORD *)(v0 + 328);
    v19 = *(_QWORD *)(v0 + 232);
    swift_release(*(_QWORD *)(v0 + 296));
    swift_bridgeObjectRelease(v18);
    sub_10000E750(v19, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  }
  v20 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 208);
  v24 = *(_QWORD *)(v0 + 216);
  v26 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F790C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 368));
  return swift_task_switch(sub_1001F7958, *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312));
}

uint64_t sub_1001F7958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 144);
  if ((*(_BYTE *)(v1 + *(int *)(*(_QWORD *)(v0 + 248) + 36)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 328);
    swift_release(*(_QWORD *)(v0 + 296));
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 232);
    sub_10000D964(v1, v4, type metadata accessor for PlaybackIntentDescriptor.IntentType);
    if (swift_getEnumCaseMultiPayload(v4, v3) == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 192));
      v5 = (_QWORD *)swift_task_alloc(async function pointer to MusicPlaybackIntentDescriptor.donate()[1]);
      *(_QWORD *)(v0 + 376) = v5;
      *v5 = v0;
      v5[1] = sub_1001F7AC0;
      return MusicPlaybackIntentDescriptor.donate()();
    }
    v7 = *(_QWORD *)(v0 + 328);
    v8 = *(_QWORD *)(v0 + 232);
    swift_release(*(_QWORD *)(v0 + 296));
    swift_bridgeObjectRelease(v7);
    sub_10000E750(v8, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  }
  v9 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F7AC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[41]);
    v4 = v2[38];
    v5 = v2[39];
    v6 = sub_1001F86A0;
  }
  else
  {
    v4 = v2[38];
    v5 = v2[39];
    v6 = sub_1001F7B2C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1001F7B2C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  swift_release(*(_QWORD *)(v0 + 296));
  if (qword_10054BCB8 != -1)
    swift_once(&qword_10054BCB8, sub_10020AA3C);
  sub_10000D78C(*(_QWORD *)(v0 + 336), (uint64_t)static Logger.siriIntents);
  v1 = swift_bridgeObjectRetain();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(char **)(v0 + 328);
  if (v4)
  {
    v6 = *(char **)(v0 + 320);
    v8 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 208);
    v9 = *(_QWORD *)(v0 + 192);
    v10 = swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v10 + 4) = sub_1000BA30C(v6, v5, &v23);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully donated intent with ID=%{public}s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 192);

    swift_bridgeObjectRelease_n(v5, 2);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 240);
  v20 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F7D30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  id v58;
  os_log_type_t v59;
  _BOOL4 v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85[2];

  v1 = *(_QWORD *)(v0 + 360);
  swift_release(*(_QWORD *)(v0 + 296));
  *(_QWORD *)(v0 + 96) = v1;
  v2 = (_QWORD *)(v0 + 96);
  swift_errorRetain(v1);
  v3 = sub_10000B4C8((uint64_t *)&unk_100550630);
  if (swift_dynamicCast(v0 + 80, v0 + 96, v3, &type metadata for PlaybackController.CommandError, 0))
  {
    v4 = *(void **)(v0 + 80);
    v5 = *(unsigned __int8 *)(v0 + 88);
    if (*(_BYTE *)(v0 + 88))
    {
      if (v5 != 3)
      {
LABEL_7:
        sub_10020B55C(*(id *)(v0 + 80), v5);
        goto LABEL_8;
      }
      if (v4)
      {
        if (v4 == (void *)2)
        {
          swift_errorRelease(*v2);
          goto LABEL_9;
        }
        goto LABEL_7;
      }
      v68 = swift_bridgeObjectRetain();
      v37 = Logger.logObject.getter(v68);
      v69 = static os_log_type_t.error.getter();
      v70 = os_log_type_enabled(v37, v69);
      v71 = *(char **)(v0 + 328);
      if (v70)
      {
        v72 = *(char **)(v0 + 320);
        v73 = swift_slowAlloc(12, -1);
        v74 = swift_slowAlloc(32, -1);
        v85[0] = v74;
        *(_DWORD *)v73 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v73 + 4) = sub_1000BA30C(v72, v71, v85);
        swift_bridgeObjectRelease_n(v71, 3);
        _os_log_impl((void *)&_mh_execute_header, v37, v69, "❌ Intent id=%{public}s) — Missing player", (uint8_t *)v73, 0xCu);
        swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v73, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
      }
    }
    else
    {
      sub_10020B590(*(id *)(v0 + 80), v5);
      swift_bridgeObjectRetain();
      v36 = sub_10020B590(v4, 0);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter();
      v39 = os_log_type_enabled(v37, v38);
      v40 = *(char **)(v0 + 328);
      if (v39)
      {
        v41 = *(char **)(v0 + 320);
        v42 = swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(64, -1);
        v85[0] = v43;
        *(_DWORD *)v42 = 136446466;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v42 + 4) = sub_1000BA30C(v41, v40, v85);
        swift_bridgeObjectRelease_n(v40, 3);
        *(_WORD *)(v42 + 12) = 2082;
        *(_QWORD *)(v0 + 128) = v4;
        sub_10020B5B4(v4);
        v44 = (char *)String.init<A>(describing:)(v0 + 128, &type metadata for PlaybackController.CommandError.AlertKind);
        v46 = v45;
        *(_QWORD *)(v42 + 14) = sub_1000BA30C(v44, v45, v85);
        swift_bridgeObjectRelease(v46);
        sub_10020B55C(v4, 0);
        sub_10020B55C(v4, 0);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "❌ Intent id=%{public}s) — Could not present alertKind=%{public}s", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

        sub_10020B55C(v4, 0);
LABEL_35:
        v75 = *v2;
LABEL_38:
        v57 = swift_errorRelease(v75);
        goto LABEL_39;
      }
      sub_10020B55C(v4, 0);
      swift_bridgeObjectRelease_n(v40, 2);
      sub_10020B55C(v4, 0);
      sub_10020B55C(v4, 0);
    }

    goto LABEL_35;
  }
LABEL_8:
  v6 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 168);
  swift_errorRelease(*(_QWORD *)(v0 + 96));
  v10 = swift_errorRetain(v6);
  static CocoaError.userCancelled.getter(v10);
  v11 = sub_10001254C(&qword_100552558, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
  v12 = static _ErrorCodeProtocol.~= infix(_:_:)(v7, v6, v9, v11);
  swift_errorRelease(v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  if ((v12 & 1) == 0)
  {
    v24 = *(_QWORD *)(v0 + 360);
    *(_QWORD *)(v0 + 104) = v24;
    swift_errorRetain(v24);
    if (swift_dynamicCast(v0 + 64, v0 + 104, v3, &type metadata for PlaybackController.CommandError, 0))
    {
      v25 = *(void **)(v0 + 64);
      v26 = *(unsigned __int8 *)(v0 + 72);
      if (v26 == 1)
      {
        swift_bridgeObjectRetain();
        v58 = sub_10020B590(v25, 1);
        v28 = Logger.logObject.getter(v58);
        v59 = static os_log_type_t.error.getter();
        v60 = os_log_type_enabled(v28, v59);
        v61 = *(char **)(v0 + 328);
        if (!v60)
        {
          swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
          sub_10020B55C(v25, 1);
          sub_10020B55C(v25, 1);
          goto LABEL_37;
        }
        v62 = *(char **)(v0 + 320);
        v33 = swift_slowAlloc(22, -1);
        v63 = swift_slowAlloc(64, -1);
        v85[0] = v63;
        *(_DWORD *)v33 = 136446466;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v33 + 4) = sub_1000BA30C(v62, v61, v85);
        swift_bridgeObjectRelease_n(v61, 3);
        *(_WORD *)(v33 + 12) = 2082;
        swift_bridgeObjectRetain();
        v64 = sub_10000B4C8(&qword_100552560);
        v65 = (char *)Array.description.getter(v25, v64);
        v67 = v66;
        sub_10020B55C(v25, 1);
        *(_QWORD *)(v33 + 14) = sub_1000BA30C(v65, v67, v85);
        swift_bridgeObjectRelease(v67);
        sub_10020B55C(v25, 1);
        sub_10020B55C(v25, 1);
        _os_log_impl((void *)&_mh_execute_header, v28, v59, "❌ Intent id=%{public}s) — Could not produce playback commands=%{public}s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
        v35 = v63;
LABEL_29:
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v33, -1, -1);
LABEL_37:

        v75 = *(_QWORD *)(v0 + 104);
        goto LABEL_38;
      }
      if (v26 == 3 && v25 == (void *)1)
      {
        v27 = swift_bridgeObjectRetain();
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.error.getter();
        v30 = os_log_type_enabled(v28, v29);
        v31 = *(char **)(v0 + 328);
        if (!v30)
        {
          swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
          goto LABEL_37;
        }
        v32 = *(char **)(v0 + 320);
        v33 = swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v85[0] = v34;
        *(_DWORD *)v33 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v33 + 4) = sub_1000BA30C(v32, v31, v85);
        swift_bridgeObjectRelease_n(v31, 3);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "❌ Intent id=%{public}s) — Could not playback, subscription needed", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v35 = v34;
        goto LABEL_29;
      }
      sub_10020B55C(*(id *)(v0 + 64), v26);
    }
    v47 = *(_QWORD *)(v0 + 360);
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRetain(v47);
    swift_bridgeObjectRetain();
    v48 = swift_errorRetain(v47);
    v14 = Logger.logObject.getter(v48);
    v49 = static os_log_type_t.error.getter();
    v50 = os_log_type_enabled(v14, v49);
    v51 = *(_QWORD *)(v0 + 360);
    v52 = *(char **)(v0 + 328);
    if (!v50)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
      swift_errorRelease(v51);
      swift_errorRelease(v51);
      goto LABEL_25;
    }
    v53 = *(char **)(v0 + 320);
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v85[0] = v20;
    *(_DWORD *)v19 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 4) = sub_1000BA30C(v53, v52, v85);
    swift_bridgeObjectRelease_n(v52, 3);
    *(_WORD *)(v19 + 12) = 2082;
    *(_QWORD *)(v0 + 120) = v51;
    swift_errorRetain(v51);
    v54 = (char *)String.init<A>(describing:)(v0 + 120, v3);
    v56 = v55;
    *(_QWORD *)(v19 + 14) = sub_1000BA30C(v54, v55, v85);
    swift_bridgeObjectRelease(v56);
    swift_errorRelease(v51);
    swift_errorRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v14, v49, "❌ Intent id=%{public}s) — Failed to add with error=%{public}s", (uint8_t *)v19, 0x16u);
    v21 = (char *)&type metadata for Any + 8;
    v22 = v20;
    v23 = 2;
    goto LABEL_23;
  }
LABEL_9:
  v13 = swift_bridgeObjectRetain();
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(char **)(v0 + 328);
  if (v16)
  {
    v18 = *(char **)(v0 + 320);
    v19 = swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v85[0] = v20;
    *(_DWORD *)v19 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 4) = sub_1000BA30C(v18, v17, v85);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "❌ Intent id=%{public}s) — User cancelled", (uint8_t *)v19, 0xCu);
    v21 = (char *)&type metadata for Any + 8;
    v22 = v20;
    v23 = 1;
LABEL_23:
    swift_arrayDestroy(v22, v23, v21);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
    goto LABEL_25;
  }
  swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 328), 2);
LABEL_25:

LABEL_39:
  v76 = *(_QWORD *)(v0 + 288);
  v78 = *(_QWORD *)(v0 + 256);
  v77 = *(_QWORD *)(v0 + 264);
  v80 = *(_QWORD *)(v0 + 232);
  v79 = *(_QWORD *)(v0 + 240);
  v82 = *(_QWORD *)(v0 + 208);
  v81 = *(_QWORD *)(v0 + 216);
  v83 = *(_QWORD *)(v0 + 184);
  swift_willThrow(v57);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F86A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  swift_release(*(_QWORD *)(v0 + 296));
  if (qword_10054BCB8 != -1)
    swift_once(&qword_10054BCB8, sub_10020AA3C);
  v1 = *(_QWORD *)(v0 + 384);
  sub_10000D78C(*(_QWORD *)(v0 + 336), (uint64_t)static Logger.siriIntents);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 192);
  if (v5)
  {
    v10 = swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v24 = v11;
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v0 + 136) = v6;
    swift_errorRetain(v6);
    v12 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v13 = (char *)String.init<A>(describing:)(v0 + 136, v12);
    v15 = v14;
    *(_QWORD *)(v10 + 4) = sub_1000BA30C(v13, v14, &v24);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Donation error=%{public}s)", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }
  swift_errorRelease(v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001F88D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  void *v39;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000DD108(0, &qword_100552878, UISceneSession_ptr);
    v7 = sub_10020DAD0();
    v8 = Set.Iterator.init(_cocoa:)(v38, v5, v6, v7);
    v3 = v38[0];
    v35 = v38[1];
    v9 = v38[2];
    v10 = v38[3];
    v11 = v38[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v13 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)swift_bridgeObjectRetain();
    v9 = v13;
    v10 = 0;
  }
  v33 = v9;
  v34 = (unint64_t)(v9 + 64) >> 6;
  v36 = *a2;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v16 = __CocoaSet.Iterator.next()(v8);
  if (!v16)
    goto LABEL_39;
  v17 = v16;
  v37 = v16;
  v18 = sub_1000DD108(0, &qword_100552878, UISceneSession_ptr);
  swift_unknownObjectRetain(v17);
  swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
  v19 = v39;
  swift_unknownObjectRelease(v17);
  v20 = v10;
  v21 = v11;
  if (!v19)
    goto LABEL_39;
  while (1)
  {
    v26 = objc_msgSend(v19, "role", v33);
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    if (v27 == v31 && v29 == v30)
    {

      swift_bridgeObjectRelease_n(v29, 2);
      goto LABEL_39;
    }
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v30, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
      goto LABEL_39;

    v10 = v20;
    v11 = v21;
    if (v3 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v11)
      break;
    v21 = (v11 - 1) & v11;
    v22 = __clz(__rbit64(v11)) | (v10 << 6);
    v20 = v10;
LABEL_32:
    v19 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v22);
    if (!v19)
      goto LABEL_39;
  }
  v23 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    return;
  }
  if (v23 >= v34)
    goto LABEL_39;
  v24 = *(_QWORD *)(v35 + 8 * v23);
  v20 = v10 + 1;
  if (v24)
    goto LABEL_31;
  v20 = v10 + 2;
  if (v10 + 2 >= v34)
    goto LABEL_39;
  v24 = *(_QWORD *)(v35 + 8 * v20);
  if (v24)
    goto LABEL_31;
  v20 = v10 + 3;
  if (v10 + 3 >= v34)
    goto LABEL_39;
  v24 = *(_QWORD *)(v35 + 8 * v20);
  if (v24)
    goto LABEL_31;
  v20 = v10 + 4;
  if (v10 + 4 >= v34)
    goto LABEL_39;
  v24 = *(_QWORD *)(v35 + 8 * v20);
  if (v24)
    goto LABEL_31;
  v20 = v10 + 5;
  if (v10 + 5 >= v34)
    goto LABEL_39;
  v24 = *(_QWORD *)(v35 + 8 * v20);
  if (v24)
  {
LABEL_31:
    v21 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
    goto LABEL_32;
  }
  v25 = v10 + 6;
  while (v34 != v25)
  {
    v24 = *(_QWORD *)(v35 + 8 * v25++);
    if (v24)
    {
      v20 = v25 - 1;
      goto LABEL_31;
    }
  }
LABEL_39:
  sub_100194204(v3);
}

id PlaybackController.__allocating_init(coordinator:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PlaybackController.init(coordinator:)(a1);
}

id PlaybackController.init(coordinator:)(_QWORD *a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  char *v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_player] = 0;
  v4 = &v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingPresentationDescriptor];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingSubscription] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_ageVerificationWrapper] = 0;
  v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_isErrorAlertPresented] = 0;
  v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_isLeaseEndAlertPresented] = 0;
  sub_1000C53BC((uint64_t)a1, (uint64_t)&v1[OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator]);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, "init");
  sub_100011758(a1);
  return v5;
}

uint64_t PlaybackController.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C53BC(v1 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator, a1);
}

double sub_1001F8D64(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  double result;
  char v24[24];
  char v25[24];
  _BYTE v26[24];
  char v27[24];
  char v28[24];

  v2 = v1;
  v4 = sub_10000B4C8(&qword_100552D10);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    swift_beginAccess(a1 + 24, v25, 0, 0);
    v8 = *(char **)(a1 + 24);
    if (v8 && v8 == v2)
    {
      swift_beginAccess(a1 + 24, v24, 1, 0);
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      swift_unknownObjectRelease(v10);
      objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC9MusicCore6Player_engine), "setDelegate:", *(_QWORD *)(a1 + 24));
    }
  }
  v11 = &v2[OBJC_IVAR____TtC9MusicCore18PlaybackController_player];
  swift_beginAccess(&v2[OBJC_IVAR____TtC9MusicCore18PlaybackController_player], v28, 0, 0);
  v12 = *(_QWORD *)v11;
  if (!*(_QWORD *)v11)
    goto LABEL_11;
  swift_beginAccess(v12 + 24, v27, 1, 0);
  v13 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v12 + 24) = v2;
  v14 = v2;
  swift_retain(v12);
  swift_unknownObjectRelease(v13);
  objc_msgSend(*(id *)(v12 + OBJC_IVAR____TtC9MusicCore6Player_engine), "setDelegate:", *(_QWORD *)(v12 + 24));
  swift_release(v12);

  v15 = *(_QWORD *)v11;
  if (*(_QWORD *)v11)
  {
    swift_beginAccess(v15 + OBJC_IVAR____TtC9MusicCore6Player__nowPlaying, v26, 33, 0);
    swift_retain(v15);
    v16 = sub_10000B4C8((uint64_t *)&unk_1005527F0);
    Published.projectedValue.getter(v16);
    swift_endAccess(v26);
    swift_release(v15);
    v17 = swift_allocObject(&unk_10050E7D8, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16, v14);
    v18 = sub_10020D9D8();
    v19 = Publisher<>.sink(receiveValue:)(sub_10020D9D0, v17, v4, v18);
    v20 = swift_release(v17);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v20);
  }
  else
  {
LABEL_11:
    v19 = 0;
  }
  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingSubscription];
  *(_QWORD *)&v2[OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingSubscription] = v19;
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

void sub_1001F8FA0(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[24];

  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
    type metadata accessor for MainActor(0);
    v11 = v7;
    v12 = v9;
    v13 = static MainActor.shared.getter(v12);
    v14 = (_QWORD *)swift_allocObject(&unk_10050EBA0, 48, 7);
    v14[2] = v13;
    v14[3] = &protocol witness table for MainActor;
    v14[4] = v12;
    v14[5] = v7;
    v15 = sub_10016702C((uint64_t)v6, (uint64_t)&unk_100552808, (uint64_t)v14);
    swift_release(v15);

  }
}

uint64_t sub_1001F90C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001F9130, v7, v8);
}

uint64_t sub_1001F9130()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  sub_1001F916C(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001F916C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t ObjectType;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD *, uint64_t, uint64_t);
  void *v75;
  id v76;
  _QWORD v77[7];
  char v78;
  __objc2_prot *v79;
  char v80[24];

  v2 = v1;
  if (!a1)
    goto LABEL_8;
  v4 = objc_msgSend(a1, "tracklist");
  if (!v4)
    goto LABEL_8;
  v5 = v4;
  v6 = objc_msgSend(v4, "playingItem");
  if (!v6)
  {
    v7 = v5;
    goto LABEL_7;
  }
  v7 = v6;
  if ((objc_msgSend(v6, "isPlaceholder") & 1) != 0)
  {

LABEL_7:
LABEL_8:
    v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingPresentationDescriptor);
    swift_beginAccess(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingPresentationDescriptor, v77, 1, 0);
    v9 = *v8;
    v10 = v8[1];
    v11 = v8[2];
    v12 = v8[3];
    v13 = v8[4];
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v8[4] = 0;
    sub_10020B52C(v9, v10, v11, v12, v13);
    return;
  }
  v14 = objc_msgSend(v5, "uniqueIdentifier");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingPresentationDescriptor);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_nowPlayingPresentationDescriptor, v80, 1, 0);
  if (!v18[2])
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v22 = objc_msgSend(v7, "contentItemIdentifier");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = objc_msgSend(v5, "uniqueIdentifier");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v30 = *v18;
    v31 = v18[1];
    v32 = v18[2];
    v33 = v18[3];
    v34 = v18[4];
    *v18 = 1;
    v18[1] = v23;
    v18[2] = v25;
    v18[3] = v27;
    v18[4] = v29;
    sub_10020B52C(v30, v31, v32, v33, v34);
    goto LABEL_17;
  }
  v19 = v18[3];
  v20 = v18[4];
  if (v15 == v19 && v17 == v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v20, 0);
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
    goto LABEL_16;
LABEL_17:
  v35 = objc_msgSend(v7, "contentItemIdentifier");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = v18[2];
  if (v39)
  {
    v40 = v18[1];
    if (v36 == v40 && v38 == v39)
      v41 = 1;
    else
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 0);
  }
  else
  {
    v41 = 0;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess(v18, v77, 32, 0);
  if (v18[2])
    v42 = *(_BYTE *)v18;
  else
    v42 = 0;
  swift_endAccess(v77);
  v43 = a1;
  v44 = objc_msgSend(v43, "videoOutput");
  if (!v44)
  {

    return;
  }
  v45 = v44;
  v79 = &OBJC_PROTOCOL___MPCVideoOutput;
  v46 = swift_dynamicCastObjCProtocolConditional(v44, 1, &v79);
  if (!v46)
    goto LABEL_38;
  v47 = (void *)v46;
  ObjectType = swift_getObjectType();
  v49 = sub_1000DD108(0, (unint64_t *)&qword_100550D30, NSObject_ptr);
  if (!swift_dynamicCastMetatype(ObjectType, v49))
    v47 = 0;
  if (!v47)
  {
LABEL_38:

    swift_unknownObjectRelease(v45);
    return;
  }
  v50 = type metadata accessor for MPCPlayerResponse.VideoContext(0);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v51 = MPCPlayerResponse.VideoContext.init(output:)(v47);

  if ((v42 & 1) == 0 || (v41 & 1) == 0 || objc_msgSend(v43, "state") != (id)2)
  {
    swift_release(v51);
    goto LABEL_41;
  }
  v76 = (id)objc_opt_self(UIApplication);
  v52 = objc_msgSend(v76, "sharedApplication");
  v53 = objc_msgSend(v52, "openSessions");

  v54 = sub_1000DD108(0, &qword_100552878, UISceneSession_ptr);
  v55 = sub_10020DAD0();
  v56 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v53, v54, v55);

  sub_1001F88D4(v56, (uint64_t *)&UIWindowSceneSessionRoleApplication);
  v58 = v57;
  swift_bridgeObjectRelease();
  if (!v58)
  {

    swift_release(v51);
    return;
  }
  v59 = objc_msgSend(v58, "scene");
  v60 = v58;
  if (!v59)
  {
    swift_release(v51);

    goto LABEL_41;
  }
  v61 = v59;
  v75 = v60;
  v62 = objc_msgSend(v59, "activationState");

  if (v62)
  {
    swift_release(v51);

LABEL_41:
    return;
  }
  v63 = objc_msgSend(v76, "sharedApplication");
  v64 = objc_msgSend(v63, "openSessions");

  v65 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v64, v54, v55);
  sub_1001F88D4(v65, &_UIWindowSceneSessionRoleCarPlay);
  v67 = v66;
  swift_bridgeObjectRelease();
  if (!v67
    || (v68 = objc_msgSend(v67, "scene")) != 0
    && (v69 = v68, v70 = objc_msgSend(v68, "activationState"), v69, v70 == (id)-1))
  {
    swift_beginAccess(v18, v77, 33, 0);
    if (v18[2])
      *(_BYTE *)v18 = 0;
    swift_endAccess(v77);
    v71 = (_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
    v72 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
    v73 = v71[4];
    sub_10000D900(v71, v72);
    v77[0] = v51;
    v78 = 1;
    v74 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v73 + 8);
    swift_retain(v51);
    v74(v77, v72, v73);
    swift_release(v51);

    sub_10020BAA8(v77);
  }
  else
  {
    swift_release(v51);

  }
}

uint64_t PlaybackController.player.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player, v3, 0, 0);
  return swift_retain(*v1);
}

double PlaybackController.player.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  double result;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_retain(a1);
  sub_1001F8D64(v4);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void (*PlaybackController.player.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC9MusicCore18PlaybackController_player;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = *v5;
  v3[3] = *v5;
  swift_retain(v6);
  return sub_1001F98B0;
}

void sub_1001F98B0(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)a1;
  v4 = (uint64_t *)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(_QWORD *)(v6 + v5);
  *(_QWORD *)(v6 + v5) = *v4;
  if ((a2 & 1) != 0)
  {
    swift_retain_n(v3, 2);
    sub_1001F8D64(v7);
    swift_release(v3);
    swift_release(v7);
    v7 = *v4;
  }
  else
  {
    swift_retain(v3);
    sub_1001F8D64(v7);
    swift_release(v3);
  }
  swift_release(v7);
  free(v2);
}

uint64_t Logger.playbackController.unsafeMutableAddressor()
{
  return sub_100190E3C(&qword_10054BCA8, (uint64_t)static Logger.playbackController, (uint64_t)sub_10020A920);
}

uint64_t PlaybackController.perform(_:options:route:intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[8] = v7;
  v5[9] = v8;
  return swift_task_switch(sub_1001F99D4, v7, v8);
}

{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  v6 = type metadata accessor for Player.CommandOptions(0);
  v5[21] = v6;
  v5[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[23] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v5[24] = v8;
  v5[25] = v9;
  return swift_task_switch(sub_100200CE0, v8, v9);
}

uint64_t sub_1001F99D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  v2 = sub_10000B4C8((uint64_t *)&unk_100553530);
  v3 = swift_allocObject(v2, 72, 7);
  v0[10] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_100424BB0;
  sub_1000C53BC(v1, v3 + 32);
  v4 = (_QWORD *)swift_task_alloc(dword_1005525A4);
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_1001F9A60;
  return PlaybackController.perform(_:options:route:intent:)(v3, v0[3], v0[4], v0[5]);
}

uint64_t sub_1001F9A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[8];
    v6 = v3[9];
    v7 = sub_1001F9BAC;
  }
  else
  {
    swift_bridgeObjectRelease(v3[10]);
    v5 = v3[8];
    v6 = v3[9];
    v7 = sub_1001F9AD4;
  }
  return swift_task_switch(v7, v5, v6);
}

void sub_1001F9AD4()
{
  uint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 56));
  if (!(v1 >> 62))
  {
    v2 = *(id *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
LABEL_11:
    v4 = *(_QWORD *)(v0 + 96);
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v0 + 96);
  if (v5 < 0)
    v6 = *(_QWORD *)(v0 + 96);
  else
    v6 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v2 = (id)_CocoaArrayWrapper.endIndex.getter(v6);
  swift_bridgeObjectRelease(v5);
  if (!v2)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 96));
    v3 = *(_QWORD *)(v0 + 96);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v0 + 96);
    v2 = *(id *)(v3 + 32);
LABEL_6:
    v4 = v3;
LABEL_12:
    swift_bridgeObjectRelease(v4);
    (*(void (**)(id))(v0 + 8))(v2);
    return;
  }
  __break(1u);
}

uint64_t sub_1001F9BAC()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  v2 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_1001F9BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v5 = type metadata accessor for CocoaError.Code(0);
  v4[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[28] = v6;
  v4[29] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Player.CommandOptions(0);
  v4[30] = v7;
  v4[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001F9C74, 0, 0);
}

uint64_t sub_1001F9C74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v1 = v0[25];
  v2 = type metadata accessor for Logger(0);
  v0[32] = sub_10000D78C(v2, (uint64_t)static Logger.playbackController);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = (char *)v0[25];
  if (v6)
  {
    v8 = (char *)v0[24];
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v9 + 4) = sub_1000BA30C(v8, v7, &v15);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Intent id=%{public}s) — Offering play local option to user", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[25], 2);
  }

  v11 = type metadata accessor for MainActor(0);
  v0[33] = v11;
  v0[34] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v0[35] = v12;
  v0[36] = v13;
  return swift_task_switch(sub_1001F9E40, v12, v13);
}

uint64_t sub_1001F9E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 296) = v2;
  if (v2)
  {
    ObjectType = swift_getObjectType();
    v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  return swift_task_switch(sub_1001F9EA8, v4, v6);
}

uint64_t sub_1001F9EA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)v0[26];
  v0[7] = (char *)v0 + 153;
  v0[2] = v0;
  v0[3] = sub_1001F9F00;
  v2 = swift_continuation_init(v0 + 2, 0);
  sub_100203150(v2, v1);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1001F9F00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 296);
  *(_BYTE *)(*v0 + 154) = *(_BYTE *)(*v0 + 153);
  swift_release(v2);
  return swift_task_switch(sub_1001F9F54, *(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288));
}

uint64_t sub_1001F9F54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 272));
  return swift_task_switch(sub_1001F9F90, 0, 0);
}

uint64_t sub_1001F9F90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52[2];

  if (*(_BYTE *)(v0 + 154) == 1)
  {
    v1 = (_QWORD *)(*(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
    v2 = v1[3];
    v3 = v1[4];
    sub_10000D900(v1, v2);
    *(_QWORD *)(v0 + 304) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
    v4 = (_QWORD *)swift_task_alloc(dword_100554ED4);
    *(_QWORD *)(v0 + 312) = v4;
    *v4 = v0;
    v4[1] = sub_1001FA5C8;
    return GroupActivitiesManager.leave(performLeaveCommand:)(0);
  }
  v6 = (_QWORD *)(v0 + 176);
  v7 = sub_10020B4E8();
  v8 = swift_allocError(&type metadata for PlaybackController.CommandError, v7, 0, 0);
  *(_QWORD *)v9 = 2;
  *(_BYTE *)(v9 + 8) = 3;
  swift_willThrow(v8);
  *(_QWORD *)(v0 + 176) = v8;
  swift_errorRetain(v8);
  v10 = sub_10000B4C8((uint64_t *)&unk_100550630);
  if (swift_dynamicCast(v0 + 144, v0 + 176, v10, &type metadata for PlaybackController.CommandError, 0))
  {
    v11 = *(void **)(v0 + 144);
    v12 = *(unsigned __int8 *)(v0 + 152);
    if (!*(_BYTE *)(v0 + 152))
    {
      swift_bridgeObjectRetain();
      sub_10020B590(v11, 0);
      swift_bridgeObjectRetain();
      v41 = sub_10020B590(v11, 0);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter();
      v44 = os_log_type_enabled(v42, v43);
      v45 = *(char **)(v0 + 200);
      if (v44)
      {
        v46 = *(char **)(v0 + 192);
        v47 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v52[0] = v48;
        *(_DWORD *)v47 = 136446466;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v47 + 4) = sub_1000BA30C(v46, v45, v52);
        swift_bridgeObjectRelease_n(v45, 3);
        *(_WORD *)(v47 + 12) = 2082;
        *(_QWORD *)(v0 + 168) = v11;
        sub_10020B5B4(v11);
        v49 = (char *)String.init<A>(describing:)(v0 + 168, &type metadata for PlaybackController.CommandError.AlertKind);
        v51 = v50;
        *(_QWORD *)(v47 + 14) = sub_1000BA30C(v49, v50, v52);
        swift_bridgeObjectRelease(v51);
        sub_10020B55C(v11, 0);
        sub_10020B55C(v11, 0);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Intent id=%{public}s) — Could not present alertKind=%{public}s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);

        sub_10020B55C(v11, 0);
      }
      else
      {
        sub_10020B55C(v11, 0);
        swift_bridgeObjectRelease_n(v45, 2);
        sub_10020B55C(v11, 0);
        sub_10020B55C(v11, 0);

      }
      v38 = swift_errorRelease(*v6);
      goto LABEL_18;
    }
    if (v12 == 3 && v11 == (void *)2)
    {
      swift_errorRelease(*v6);
      goto LABEL_10;
    }
    sub_10020B55C(*(id *)(v0 + 144), v12);
  }
  v14 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 216);
  swift_errorRelease(*(_QWORD *)(v0 + 176));
  v16 = swift_errorRetain(v8);
  static CocoaError.userCancelled.getter(v16);
  v17 = sub_10001254C(&qword_100552558, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
  v18 = static _ErrorCodeProtocol.~= infix(_:_:)(v13, v8, v15, v17);
  swift_errorRelease(v8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_errorRetain(v8);
    swift_bridgeObjectRetain();
    v28 = swift_errorRetain(v8);
    v20 = Logger.logObject.getter(v28);
    v29 = static os_log_type_t.error.getter();
    v30 = os_log_type_enabled(v20, v29);
    v31 = *(char **)(v0 + 200);
    if (!v30)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      goto LABEL_17;
    }
    v32 = *(char **)(v0 + 192);
    v33 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v52[0] = v34;
    *(_DWORD *)v33 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v33 + 4) = sub_1000BA30C(v32, v31, v52);
    swift_bridgeObjectRelease_n(v31, 3);
    *(_WORD *)(v33 + 12) = 2082;
    *(_QWORD *)(v0 + 160) = v8;
    swift_errorRetain(v8);
    v35 = (char *)String.init<A>(describing:)(v0 + 160, v10);
    v37 = v36;
    *(_QWORD *)(v33 + 14) = sub_1000BA30C(v35, v36, v52);
    swift_bridgeObjectRelease(v37);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v20, v29, "Intent id=%{public}s) — Failed to insert with error=%{public}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    v27 = v33;
    goto LABEL_14;
  }
LABEL_10:
  v19 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 200), 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(char **)(v0 + 200);
  if (!v22)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
    goto LABEL_17;
  }
  v24 = *(char **)(v0 + 192);
  v25 = swift_slowAlloc(12, -1);
  v26 = swift_slowAlloc(32, -1);
  v52[0] = v26;
  *(_DWORD *)v25 = 136446210;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v25 + 4) = sub_1000BA30C(v24, v23, v52);
  swift_bridgeObjectRelease_n(v23, 3);
  _os_log_impl((void *)&_mh_execute_header, v20, v21, "Intent id=%{public}s) — User cancelled", (uint8_t *)v25, 0xCu);
  swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1, -1);
  v27 = v25;
LABEL_14:
  swift_slowDealloc(v27, -1, -1);
LABEL_17:

LABEL_18:
  v39 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 232);
  swift_willThrow(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FA5C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release(v1);
  return swift_task_switch(sub_1001FA624, 0, 0);
}

uint64_t sub_1001FA624()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v1, v0 + 120, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 320) = v2;
  if (v2)
  {
    v4 = *(int **)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 248);
    v5 = *(void **)(v0 + 184);
    *(_QWORD *)(v0 + 104) = &type metadata for Player.ReplaceCommand;
    *(_QWORD *)(v0 + 112) = &protocol witness table for Player.ReplaceCommand;
    *(_QWORD *)(v0 + 80) = v5;
    *(_QWORD *)(v0 + 88) = 3;
    v6 = v5;
    swift_retain(v2);
    _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v7 = (_QWORD *)(v3 + v4[5]);
    *v7 = 0;
    v7[1] = 0;
    *(_QWORD *)(v3 + v4[6]) = 0;
    *(_BYTE *)(v3 + v4[7]) = 0;
    *(_QWORD *)(v3 + v4[8]) = 0;
    v8 = (_QWORD *)swift_task_alloc(dword_100552D9C);
    *(_QWORD *)(v0 + 328) = v8;
    *v8 = v0;
    v8[1] = sub_1001FA740;
    return sub_100216118(v0 + 80, *(_QWORD *)(v0 + 248));
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001FA740(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 328);
  *(_QWORD *)(*(_QWORD *)v2 + 336) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[40];
    sub_10000E750(v4[31], type metadata accessor for Player.CommandOptions);
    swift_release(v6);
    v7 = sub_1001FA840;
  }
  else
  {
    v8 = v4 + 10;
    v9 = v4[40];
    v10 = v4[31];
    swift_release(v9);

    sub_10000E750(v10, type metadata accessor for Player.CommandOptions);
    sub_100011758(v8);
    v7 = sub_1001FA7F8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1001FA7F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FA840()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45[2];

  sub_100011758((_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 176) = v1;
  v2 = (_QWORD *)(v0 + 176);
  swift_errorRetain(v1);
  v3 = sub_10000B4C8((uint64_t *)&unk_100550630);
  if (!swift_dynamicCast(v0 + 144, v0 + 176, v3, &type metadata for PlaybackController.CommandError, 0))
    goto LABEL_7;
  v4 = *(void **)(v0 + 144);
  v5 = *(unsigned __int8 *)(v0 + 152);
  if (*(_BYTE *)(v0 + 152))
  {
    if (v5 == 3 && v4 == (void *)2)
    {
      swift_errorRelease(*v2);
      goto LABEL_8;
    }
    sub_10020B55C(*(id *)(v0 + 144), v5);
LABEL_7:
    v7 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 216);
    swift_errorRelease(*(_QWORD *)(v0 + 176));
    v9 = swift_errorRetain(v1);
    static CocoaError.userCancelled.getter(v9);
    v10 = sub_10001254C(&qword_100552558, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
    v11 = static _ErrorCodeProtocol.~= infix(_:_:)(v6, v1, v8, v10);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    if ((v11 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_errorRetain(v1);
      swift_bridgeObjectRetain();
      v21 = swift_errorRetain(v1);
      v13 = Logger.logObject.getter(v21);
      v22 = static os_log_type_t.error.getter();
      v23 = os_log_type_enabled(v13, v22);
      v24 = *(char **)(v0 + 200);
      if (!v23)
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
        swift_errorRelease(v1);
        swift_errorRelease(v1);
        goto LABEL_15;
      }
      v25 = *(char **)(v0 + 192);
      v18 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v45[0] = v26;
      *(_DWORD *)v18 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v18 + 4) = sub_1000BA30C(v25, v24, v45);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v18 + 12) = 2082;
      *(_QWORD *)(v0 + 160) = v1;
      swift_errorRetain(v1);
      v27 = (char *)String.init<A>(describing:)(v0 + 160, v3);
      v29 = v28;
      *(_QWORD *)(v18 + 14) = sub_1000BA30C(v27, v28, v45);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v13, v22, "Intent id=%{public}s) — Failed to insert with error=%{public}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      v20 = v26;
      goto LABEL_12;
    }
LABEL_8:
    v12 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 200), 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(char **)(v0 + 200);
    if (!v15)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 200), 2);
      goto LABEL_15;
    }
    v17 = *(char **)(v0 + 192);
    v18 = swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v45[0] = v19;
    *(_DWORD *)v18 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v18 + 4) = sub_1000BA30C(v17, v16, v45);
    swift_bridgeObjectRelease_n(v16, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Intent id=%{public}s) — User cancelled", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
LABEL_12:
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);
LABEL_15:

    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  sub_10020B590(v4, 0);
  swift_bridgeObjectRetain();
  v34 = sub_10020B590(v4, 0);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter();
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(char **)(v0 + 200);
  if (v37)
  {
    v39 = *(char **)(v0 + 192);
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    v45[0] = v41;
    *(_DWORD *)v40 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v40 + 4) = sub_1000BA30C(v39, v38, v45);
    swift_bridgeObjectRelease_n(v38, 3);
    *(_WORD *)(v40 + 12) = 2082;
    *(_QWORD *)(v0 + 168) = v4;
    sub_10020B5B4(v4);
    v42 = (char *)String.init<A>(describing:)(v0 + 168, &type metadata for PlaybackController.CommandError.AlertKind);
    v44 = v43;
    *(_QWORD *)(v40 + 14) = sub_1000BA30C(v42, v43, v45);
    swift_bridgeObjectRelease(v44);
    sub_10020B55C(v4, 0);
    sub_10020B55C(v4, 0);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Intent id=%{public}s) — Could not present alertKind=%{public}s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    sub_10020B55C(v4, 0);
  }
  else
  {
    sub_10020B55C(v4, 0);
    swift_bridgeObjectRelease_n(v38, 2);
    sub_10020B55C(v4, 0);
    sub_10020B55C(v4, 0);

  }
  v30 = swift_errorRelease(*v2);
LABEL_16:
  v31 = *(_QWORD *)(v0 + 248);
  v32 = *(_QWORD *)(v0 + 232);
  swift_willThrow(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FADBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5[109] = v4;
  v5[108] = a4;
  v5[107] = a3;
  v5[106] = a2;
  v5[105] = a1;
  v6 = type metadata accessor for UUID(0);
  v5[110] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[111] = v7;
  v5[112] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v5[113] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v5[114] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[115] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[116] = swift_task_alloc(v11);
  v5[117] = swift_task_alloc(v11);
  v12 = type metadata accessor for MusicPlaybackIntentDescriptor(0);
  v5[118] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[119] = v13;
  v5[120] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlaybackIntentDescriptor.IntentType(0);
  v5[121] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[122] = swift_task_alloc(v15);
  v5[123] = swift_task_alloc(v15);
  v5[124] = swift_task_alloc(v15);
  v5[125] = swift_task_alloc(v15);
  v5[126] = swift_task_alloc(v15);
  v5[127] = swift_task_alloc(v15);
  v5[128] = swift_task_alloc(v15);
  v5[129] = swift_task_alloc(v15);
  v5[130] = swift_task_alloc(v15);
  v16 = type metadata accessor for PlaybackIntentDescriptor(0);
  v5[131] = v16;
  v17 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[132] = swift_task_alloc(v17);
  v5[133] = swift_task_alloc(v17);
  v5[134] = swift_task_alloc(v17);
  v5[135] = swift_task_alloc(v17);
  v18 = type metadata accessor for MainActor(0);
  v5[136] = v18;
  v5[137] = static MainActor.shared.getter(v18);
  v19 = dispatch thunk of Actor.unownedExecutor.getter(v18, &protocol witness table for MainActor);
  v5[138] = v19;
  v5[139] = v20;
  return swift_task_switch(sub_1001FAFBC, v19, v20);
}

uint64_t sub_1001FAFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 872);
  v2 = OBJC_IVAR____TtC9MusicCore18PlaybackController_player;
  *(_QWORD *)(v0 + 1120) = OBJC_IVAR____TtC9MusicCore18PlaybackController_player;
  v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess(v1 + v2, v0 + 536, 0, 0);
  v4 = *v3;
  *(_QWORD *)(v0 + 1128) = *v3;
  if (v4)
  {
    v5 = (_BYTE *)(v4 + OBJC_IVAR____TtC9MusicCore6Player_engineState);
    swift_beginAccess(v4 + OBJC_IVAR____TtC9MusicCore6Player_engineState, v0 + 560, 0, 0);
    if (*v5 == 2)
    {
      swift_retain(v4);
    }
    else
    {
      v18 = qword_10054BCA8;
      swift_retain(v4);
      if (v18 != -1)
        swift_once(&qword_10054BCA8, sub_10020A920);
      v19 = *(_QWORD *)(v0 + 856);
      v20 = type metadata accessor for Logger(0);
      sub_10000D78C(v20, (uint64_t)static Logger.playbackController);
      v21 = swift_bridgeObjectRetain_n(v19, 2);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter(v22);
      v24 = os_log_type_enabled(v22, v23);
      v25 = *(char **)(v0 + 856);
      if (v24)
      {
        v26 = *(char **)(v0 + 848);
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v39 = v28;
        *(_DWORD *)v27 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v27 + 4) = sub_1000BA30C(v26, v25, &v39);
        swift_bridgeObjectRelease_n(v25, 3);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Intent id=%{public}s) — Awaiting for engine to start", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
      }

    }
    v29 = (_QWORD *)swift_task_alloc(dword_100552CB4);
    *(_QWORD *)(v0 + 1136) = v29;
    *v29 = v0;
    v29[1] = sub_1001FB32C;
    return Player.startEngineIfNeeded()();
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 1096));
    v6 = sub_10020B4E8();
    v38 = swift_allocError(&type metadata for PlaybackController.CommandError, v6, 0, 0);
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 3;
    swift_willThrow(v38);
    v8 = *(_QWORD *)(v0 + 1072);
    v9 = *(_QWORD *)(v0 + 1064);
    v10 = *(_QWORD *)(v0 + 1056);
    v11 = *(_QWORD *)(v0 + 1040);
    v12 = *(_QWORD *)(v0 + 1032);
    v13 = *(_QWORD *)(v0 + 1024);
    v14 = *(_QWORD *)(v0 + 1016);
    v15 = *(_QWORD *)(v0 + 1008);
    v16 = *(_QWORD *)(v0 + 1000);
    v30 = *(_QWORD *)(v0 + 992);
    v31 = *(_QWORD *)(v0 + 984);
    v32 = *(_QWORD *)(v0 + 976);
    v33 = *(_QWORD *)(v0 + 960);
    v34 = *(_QWORD *)(v0 + 936);
    v35 = *(_QWORD *)(v0 + 928);
    v36 = *(_QWORD *)(v0 + 904);
    v37 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1080));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001FB32C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1136));
  return swift_task_switch(sub_1001FB37C, *(_QWORD *)(v1 + 1104), *(_QWORD *)(v1 + 1112));
}

uint64_t sub_1001FB37C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double v5;
  void *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  id v13;
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(id *)(v0 + 864);
  if (!v1)
  {
    v2 = *(_QWORD *)(v0 + 1128);
    KeyPath = swift_getKeyPath(&unk_100431890);
    v4 = swift_getKeyPath(&unk_1004318B8);
    static Published.subscript.getter((_QWORD *)(v0 + 832), v2, KeyPath, v4);
    swift_release(v4);
    *(_QWORD *)&v5 = swift_release(KeyPath).n128_u64[0];
    v6 = *(void **)(v0 + 832);
    v1 = objc_msgSend(v6, "route", v5);

  }
  *(_QWORD *)(v0 + 1144) = v1;
  v7 = *(_QWORD *)(v0 + 1080);
  v8 = *(int **)(v0 + 1048);
  v9 = *(_QWORD *)(v0 + 840);
  *(_QWORD *)(v0 + 1152) = *(_QWORD *)(v9 + v8[5]);
  v10 = *(_QWORD *)(v9 + v8[6]);
  v11 = *(unsigned __int8 *)(v9 + v8[9]);
  sub_10000D964(v9, v7, type metadata accessor for PlaybackIntentDescriptor);
  v12 = *(_QWORD *)(v0 + 1080);
  if (v11 == 1)
  {
    v13 = *(id *)(v0 + 864);
    sub_10000E750(v12, type metadata accessor for PlaybackIntentDescriptor);
LABEL_6:
    v10 = 1;
    goto LABEL_7;
  }
  v14 = *(unsigned __int8 *)(v12 + *(int *)(*(_QWORD *)(v0 + 1048) + 32));
  v15 = *(id *)(v0 + 864);
  sub_10000E750(v12, type metadata accessor for PlaybackIntentDescriptor);
  if (v14 == 1)
    goto LABEL_6;
LABEL_7:
  *(_QWORD *)(v0 + 1160) = v10;
  v16 = *(_QWORD *)(v0 + 1088);
  *(_QWORD *)(v0 + 1168) = static MainActor.shared.getter(v1);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
  *(_QWORD *)(v0 + 1176) = v17;
  *(_QWORD *)(v0 + 1184) = v18;
  return swift_task_switch(sub_1001FB4F8, v17, v18);
}

uint64_t sub_1001FB4F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 1192) = v2;
  if (v2)
  {
    ObjectType = swift_getObjectType();
    v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  return swift_task_switch(sub_1001FB560, v4, v6);
}

uint64_t sub_1001FB560()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)v0[143];
  v2 = v0[109];
  v0[23] = (char *)v0 + 265;
  v0[18] = v0;
  v0[19] = sub_1001FB5C8;
  v3 = swift_continuation_init(v0 + 18, 1);
  sub_1002036EC(v3, v2, v1);
  return swift_continuation_await(v0 + 18);
}

uint64_t sub_1001FB5C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 1200) = v3;
  if (v3)
  {
    swift_willThrow(a1);
    v4 = *(_QWORD *)(v2 + 1184);
    v5 = *(_QWORD *)(v2 + 1176);
    v6 = sub_1001FC174;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 1192);
    *(_BYTE *)(v2 + 267) = *(_BYTE *)(v2 + 265);
    swift_release(v7);
    v4 = *(_QWORD *)(v2 + 1184);
    v5 = *(_QWORD *)(v2 + 1176);
    v6 = sub_1001FB64C;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1001FB64C()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[143];
  swift_release(v0[146]);

  return swift_task_switch(sub_1001FB690, v0[138], v0[139]);
}

uint64_t sub_1001FB690()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  double v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  _QWORD *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  unsigned __int8 v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v1 = *(unsigned __int8 *)(v0 + 267);
  if (v1 == 2)
  {
    v2 = *(void **)(v0 + 1144);
    v3 = *(_QWORD *)(v0 + 1128);
    swift_release(*(_QWORD *)(v0 + 1096));

    swift_release(v3);
    v4 = *(_QWORD *)(v0 + 1072);
    v5 = *(_QWORD *)(v0 + 1064);
    v6 = *(_QWORD *)(v0 + 1056);
    v7 = *(_QWORD *)(v0 + 1040);
    v8 = *(_QWORD *)(v0 + 1032);
    v9 = *(_QWORD *)(v0 + 1024);
    v10 = *(_QWORD *)(v0 + 1016);
    v11 = *(_QWORD *)(v0 + 1008);
    v12 = *(_QWORD *)(v0 + 1000);
    v125 = *(_QWORD *)(v0 + 992);
    v126 = *(_QWORD *)(v0 + 984);
    v127 = *(_QWORD *)(v0 + 976);
    v128 = *(_QWORD *)(v0 + 960);
    v129 = *(_QWORD *)(v0 + 936);
    v130 = *(_QWORD *)(v0 + 928);
    v131 = *(_QWORD *)(v0 + 904);
    v132 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1080));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v14 = *(_QWORD *)(v0 + 856);
  v15 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 1208) = sub_10000D78C(v15, (uint64_t)static Logger.playbackController);
  v16 = swift_bridgeObjectRetain_n(v14, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(char **)(v0 + 856);
  if (v19)
  {
    v21 = v1 & 1;
    v22 = *(char **)(v0 + 848);
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v133 = v24;
    *(_DWORD *)v23 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v23 + 4) = sub_1000BA30C(v22, v20, &v133);
    swift_bridgeObjectRelease_n(v20, 3);
    *(_WORD *)(v23 + 12) = 2082;
    *(_BYTE *)(v0 + 266) = v21;
    v25 = (char *)String.init<A>(describing:)(v0 + 266, &type metadata for PlaybackController.PlayabilityOption);
    v27 = v26;
    *(_QWORD *)(v23 + 14) = sub_1000BA30C(v25, v26, &v133);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Intent id=%{public}s) — Resolved Playability Options=%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
  }

  v28 = *(_QWORD *)(v0 + 1040);
  v29 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 840), v28, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
  v31 = *(void ***)(v0 + 1040);
  if (EnumCaseMultiPayload == 1)
  {
    v32 = *(_QWORD *)(v0 + 960);
    v33 = *(_QWORD *)(v0 + 952);
    v34 = *(_QWORD *)(v0 + 944);
    v35 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v33 + 32))(v32, v31, v34);
    v36 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v35);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }
  else
  {
    v36 = *v31;
  }
  v37 = objc_msgSend(v36, "sharedListeningProperties");

  if (v37)
  {
    v38 = *(_QWORD *)(v0 + 1128);
    KeyPath = swift_getKeyPath(&unk_1004318D8);
    v40 = swift_getKeyPath(&unk_100431900);
    static Published.subscript.getter((_QWORD *)(v0 + 816), v38, KeyPath, v40);
    swift_release(v40);
    *(_QWORD *)&v41 = swift_release(KeyPath).n128_u64[0];
    v42 = *(void **)(v0 + 816);
    v43 = *(_QWORD *)(v0 + 1072);
    v44 = *(_QWORD *)(v0 + 840);
    if (v42)
    {
      v45 = objc_msgSend(*(id *)(v0 + 816), "isSharedListeningSession", v41);

      sub_10000D964(v44, v43, type metadata accessor for PlaybackIntentDescriptor);
      if (v45)
      {
        v46 = *(_QWORD *)(v0 + 1024);
        v47 = *(_QWORD *)(v0 + 968);
        sub_10000D964(*(_QWORD *)(v0 + 1072), v46, type metadata accessor for PlaybackIntentDescriptor.IntentType);
        v48 = swift_getEnumCaseMultiPayload(v46, v47);
        v49 = *(void ***)(v0 + 1024);
        if (v48 == 1)
        {
          v50 = *(_QWORD *)(v0 + 960);
          v51 = *(_QWORD *)(v0 + 952);
          v52 = *(_QWORD *)(v0 + 944);
          v53 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v51 + 32))(v50, v49, v52);
          v54 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v53);
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
        }
        else
        {
          v54 = *v49;
        }
        v95 = *(_QWORD *)(v0 + 1072);
        v96 = objc_msgSend(v54, "tracklistSource");

        sub_10000E750(v95, type metadata accessor for PlaybackIntentDescriptor);
        if (v96 != (id)100)
        {
          v97 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 856), 2);
          v98 = Logger.logObject.getter(v97);
          v99 = static os_log_type_t.default.getter(v98);
          v100 = os_log_type_enabled(v98, v99);
          v101 = *(char **)(v0 + 856);
          if (v100)
          {
            v102 = *(char **)(v0 + 848);
            v103 = swift_slowAlloc(12, -1);
            v104 = swift_slowAlloc(32, -1);
            v133 = v104;
            *(_DWORD *)v103 = 136446210;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v103 + 4) = sub_1000BA30C(v102, v101, &v133);
            swift_bridgeObjectRelease_n(v101, 3);
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Intent id=%{public}s) — Offering Shared Listening options", (uint8_t *)v103, 0xCu);
            swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v104, -1, -1);
            swift_slowDealloc(v103, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
          }

          v105 = (_QWORD *)swift_task_alloc(dword_1005528BC);
          *(_QWORD *)(v0 + 1240) = v105;
          *v105 = v0;
          v105[1] = sub_1001FCB64;
          return sub_100201854(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856));
        }
LABEL_20:
        *(int8x16_t *)(v0 + 1272) = vextq_s8(*(int8x16_t *)(v0 + 1152), *(int8x16_t *)(v0 + 1152), 8uLL);
        v64 = *(_QWORD *)(v0 + 1128);
        v65 = swift_getKeyPath(&unk_100431890);
        v66 = swift_getKeyPath(&unk_1004318B8);
        static Published.subscript.getter((_QWORD *)(v0 + 808), v64, v65, v66);
        swift_release(v66);
        *(_QWORD *)&v67 = swift_release(v65).n128_u64[0];
        v68 = *(void **)(v0 + 808);
        v69 = objc_msgSend(v68, "route", v67);
        *(_QWORD *)(v0 + 1288) = v69;

        if (!v69)
        {
          v76 = *(void **)(v0 + 1144);
          goto LABEL_27;
        }
        objc_opt_self(MPAVEndpointRoute);
        v70 = (void *)swift_dynamicCastObjCClass(v69);
        *(_QWORD *)(v0 + 1296) = v70;
        if (!v70)
          goto LABEL_24;
        v71 = v70;
        if (objc_msgSend(v70, "isDeviceRoute"))
          goto LABEL_24;
        v72 = *(_QWORD *)(v0 + 1128);
        v73 = swift_getKeyPath(&unk_1004316C0);
        v74 = swift_getKeyPath(&unk_1004316E8);
        static Published.subscript.getter((_QWORD *)(v0 + 824), v72, v73, v74);
        swift_release(v74);
        swift_release(v73);
        v75 = *(void **)(v0 + 824);

        if (v75)
        {
LABEL_24:
          v76 = *(void **)(v0 + 1144);
LABEL_25:

LABEL_27:
          *(_QWORD *)(v0 + 1328) = v76;
          v77 = *(_QWORD *)(v0 + 1008);
          v78 = *(_QWORD *)(v0 + 968);
          sub_10000D964(*(_QWORD *)(v0 + 840), v77, type metadata accessor for PlaybackIntentDescriptor.IntentType);
          v79 = swift_getEnumCaseMultiPayload(v77, v78);
          v80 = *(uint64_t **)(v0 + 1008);
          if (v79 == 1)
          {
            v81 = *(_QWORD *)(v0 + 960);
            v82 = *(_QWORD *)(v0 + 952);
            v83 = *(_QWORD *)(v0 + 944);
            v84 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v82 + 32))(v81, v80, v83);
            v85 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v84);
            (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
          }
          else
          {
            v85 = *v80;
          }
          *(_QWORD *)(v0 + 1336) = v85;
          v86 = dword_10055288C;
          v87 = v76;
          v88 = (_QWORD *)swift_task_alloc(v86);
          *(_QWORD *)(v0 + 1344) = v88;
          *v88 = v0;
          v88[1] = sub_1001FD2EC;
          return sub_10020B5C4(v85, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1272), (uint64_t)v76);
        }
        v106 = *(unsigned __int8 *)(v0 + 267);
        sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1064), type metadata accessor for PlaybackIntentDescriptor);
        v107 = *(_QWORD *)(v0 + 1064);
        if ((v106 & 1) != 0)
        {
          sub_10000E750(v107, type metadata accessor for PlaybackIntentDescriptor);
        }
        else
        {
          v108 = *(_QWORD *)(v0 + 1016);
          v109 = *(_QWORD *)(v0 + 968);
          sub_10000D964(v107, v108, type metadata accessor for PlaybackIntentDescriptor.IntentType);
          v110 = swift_getEnumCaseMultiPayload(v108, v109);
          v111 = *(void ***)(v0 + 1016);
          if (v110 == 1)
          {
            v112 = *(_QWORD *)(v0 + 960);
            v113 = *(_QWORD *)(v0 + 952);
            v114 = *(_QWORD *)(v0 + 944);
            v115 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v113 + 32))(v112, v111, v114);
            v116 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v115);
            (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v114);
          }
          else
          {
            v116 = *v111;
          }
          v117 = *(_QWORD *)(v0 + 1064);
          v118 = objc_msgSend(v116, "prefersEnqueuingUsingAirPlay");

          sub_10000E750(v117, type metadata accessor for PlaybackIntentDescriptor);
          if ((v118 & 1) == 0)
          {
            v120 = *(_QWORD *)(v0 + 1056);
            v121 = *(_QWORD *)(v0 + 840);
            v122 = objc_msgSend(v71, "supportsRemoteControl");
            sub_10000D964(v121, v120, type metadata accessor for PlaybackIntentDescriptor);
            if ((v122 & 1) != 0)
            {
              v123 = *(_QWORD *)(v0 + 1056);
              v124 = *(_BYTE *)(v123 + *(int *)(*(_QWORD *)(v0 + 1048) + 32));
              sub_10000E750(v123, type metadata accessor for PlaybackIntentDescriptor);
              if ((v124 & 1) == 0)
              {
                v76 = *(void **)(v0 + 1144);
                if ((objc_msgSend(*(id *)(v0 + 1296), "canModifyGroupMembership") & 1) == 0)
                  objc_msgSend(*(id *)(v0 + 1296), "establishGroup");
                goto LABEL_25;
              }
LABEL_47:
              v119 = (_QWORD *)swift_task_alloc(dword_100552CCC);
              *(_QWORD *)(v0 + 1304) = v119;
              *v119 = v0;
              v119[1] = sub_1001FD144;
              return Player.prepareForBufferedAirPlay()();
            }
LABEL_46:
            sub_10000E750(*(_QWORD *)(v0 + 1056), type metadata accessor for PlaybackIntentDescriptor);
            goto LABEL_47;
          }
        }
        sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1056), type metadata accessor for PlaybackIntentDescriptor);
        goto LABEL_46;
      }
    }
    else
    {
      sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1072), type metadata accessor for PlaybackIntentDescriptor);
    }
    sub_10000E750(*(_QWORD *)(v0 + 1072), type metadata accessor for PlaybackIntentDescriptor);
    goto LABEL_20;
  }
  v55 = *(_QWORD *)(v0 + 1032);
  v56 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 840), v55, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  v57 = swift_getEnumCaseMultiPayload(v55, v56);
  v58 = *(void ***)(v0 + 1032);
  if (v57 == 1)
  {
    v59 = *(_QWORD *)(v0 + 960);
    v60 = *(_QWORD *)(v0 + 952);
    v61 = *(_QWORD *)(v0 + 944);
    v62 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v60 + 32))(v59, v58, v61);
    v63 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v62);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
  }
  else
  {
    v63 = *v58;
  }
  *(_QWORD *)(v0 + 1216) = v63;
  v89 = (_QWORD *)(*(_QWORD *)(v0 + 872) + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v90 = v89[3];
  v91 = v89[4];
  sub_10000D900(v89, v90);
  *(_QWORD *)(v0 + 1224) = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 40))(v90, v91);
  v92 = dword_100554EAC;
  v93 = v63;
  v94 = (_QWORD *)swift_task_alloc(v92);
  *(_QWORD *)(v0 + 1232) = v94;
  *v94 = v0;
  v94[1] = sub_1001FC318;
  return GroupActivitiesManager.initiateSession(with:)((uint64_t)v63);
}

uint64_t sub_1001FC174()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;

  v1 = v0[149];
  v2 = (void *)v0[143];
  swift_release(v0[146]);
  swift_release(v1);

  return swift_task_switch(sub_1001FC1C4, v0[138], v0[139]);
}

uint64_t sub_1001FC1C4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 1144);
  v2 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 1072);
  v4 = *(_QWORD *)(v0 + 1064);
  v5 = *(_QWORD *)(v0 + 1056);
  v6 = *(_QWORD *)(v0 + 1040);
  v7 = *(_QWORD *)(v0 + 1032);
  v8 = *(_QWORD *)(v0 + 1024);
  v9 = *(_QWORD *)(v0 + 1016);
  v10 = *(_QWORD *)(v0 + 1008);
  v11 = *(_QWORD *)(v0 + 1000);
  v13 = *(_QWORD *)(v0 + 992);
  v14 = *(_QWORD *)(v0 + 984);
  v15 = *(_QWORD *)(v0 + 976);
  v16 = *(_QWORD *)(v0 + 960);
  v17 = *(_QWORD *)(v0 + 936);
  v18 = *(_QWORD *)(v0 + 928);
  v19 = *(_QWORD *)(v0 + 904);
  v20 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FC318(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1232);
  v4 = *(_QWORD *)(*v1 + 1224);
  v5 = *(void **)(*v1 + 1216);
  *(_BYTE *)(*v1 + 268) = a1;
  swift_task_dealloc(v3);

  swift_release(v4);
  return swift_task_switch(sub_1001FC390, *(_QWORD *)(v2 + 1104), *(_QWORD *)(v2 + 1112));
}

uint64_t sub_1001FC390()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  double v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unsigned __int8 v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v1 = *(unsigned __int8 *)(v0 + 268);

  if (v1 == 1)
  {
    v2 = *(void **)(v0 + 1144);
    v3 = *(_QWORD *)(v0 + 1128);
    swift_release(*(_QWORD *)(v0 + 1096));

    swift_release(v3);
    v4 = *(_QWORD *)(v0 + 1072);
    v5 = *(_QWORD *)(v0 + 1064);
    v6 = *(_QWORD *)(v0 + 1056);
    v7 = *(_QWORD *)(v0 + 1040);
    v8 = *(_QWORD *)(v0 + 1032);
    v9 = *(_QWORD *)(v0 + 1024);
    v10 = *(_QWORD *)(v0 + 1016);
    v11 = *(_QWORD *)(v0 + 1008);
    v12 = *(_QWORD *)(v0 + 1000);
    v86 = *(_QWORD *)(v0 + 992);
    v87 = *(_QWORD *)(v0 + 984);
    v88 = *(_QWORD *)(v0 + 976);
    v89 = *(_QWORD *)(v0 + 960);
    v90 = *(_QWORD *)(v0 + 936);
    v91 = *(_QWORD *)(v0 + 928);
    v92 = *(_QWORD *)(v0 + 904);
    v93 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1080));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = *(_QWORD *)(v0 + 1128);
  KeyPath = swift_getKeyPath(&unk_1004318D8);
  v16 = swift_getKeyPath(&unk_100431900);
  static Published.subscript.getter((_QWORD *)(v0 + 816), v14, KeyPath, v16);
  swift_release(v16);
  *(_QWORD *)&v17 = swift_release(KeyPath).n128_u64[0];
  v18 = *(void **)(v0 + 816);
  v19 = *(_QWORD *)(v0 + 1072);
  v20 = *(_QWORD *)(v0 + 840);
  if (!v18)
  {
    sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1072), type metadata accessor for PlaybackIntentDescriptor);
    goto LABEL_8;
  }
  v21 = objc_msgSend(*(id *)(v0 + 816), "isSharedListeningSession", v17);

  sub_10000D964(v20, v19, type metadata accessor for PlaybackIntentDescriptor);
  if (!v21)
  {
LABEL_8:
    sub_10000E750(*(_QWORD *)(v0 + 1072), type metadata accessor for PlaybackIntentDescriptor);
    goto LABEL_9;
  }
  v22 = *(_QWORD *)(v0 + 1024);
  v23 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 1072), v22, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v23);
  v25 = *(void ***)(v0 + 1024);
  if (EnumCaseMultiPayload == 1)
  {
    v26 = *(_QWORD *)(v0 + 960);
    v27 = *(_QWORD *)(v0 + 952);
    v28 = *(_QWORD *)(v0 + 944);
    v29 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v27 + 32))(v26, v25, v28);
    v30 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v29);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  }
  else
  {
    v30 = *v25;
  }
  v56 = *(_QWORD *)(v0 + 1072);
  v57 = objc_msgSend(v30, "tracklistSource");

  sub_10000E750(v56, type metadata accessor for PlaybackIntentDescriptor);
  if (v57 != (id)100)
  {
    v58 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 856), 2);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter(v59);
    v61 = os_log_type_enabled(v59, v60);
    v62 = *(char **)(v0 + 856);
    if (v61)
    {
      v63 = *(char **)(v0 + 848);
      v64 = swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v94 = v65;
      *(_DWORD *)v64 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v64 + 4) = sub_1000BA30C(v63, v62, &v94);
      swift_bridgeObjectRelease_n(v62, 3);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Intent id=%{public}s) — Offering Shared Listening options", (uint8_t *)v64, 0xCu);
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
    }

    v66 = (_QWORD *)swift_task_alloc(dword_1005528BC);
    *(_QWORD *)(v0 + 1240) = v66;
    *v66 = v0;
    v66[1] = sub_1001FCB64;
    return sub_100201854(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856));
  }
LABEL_9:
  *(int8x16_t *)(v0 + 1272) = vextq_s8(*(int8x16_t *)(v0 + 1152), *(int8x16_t *)(v0 + 1152), 8uLL);
  v31 = *(_QWORD *)(v0 + 1128);
  v32 = swift_getKeyPath(&unk_100431890);
  v33 = swift_getKeyPath(&unk_1004318B8);
  static Published.subscript.getter((_QWORD *)(v0 + 808), v31, v32, v33);
  swift_release(v33);
  *(_QWORD *)&v34 = swift_release(v32).n128_u64[0];
  v35 = *(void **)(v0 + 808);
  v36 = objc_msgSend(v35, "route", v34);
  *(_QWORD *)(v0 + 1288) = v36;

  if (!v36)
  {
    v43 = *(void **)(v0 + 1144);
    goto LABEL_16;
  }
  objc_opt_self(MPAVEndpointRoute);
  v37 = (void *)swift_dynamicCastObjCClass(v36);
  *(_QWORD *)(v0 + 1296) = v37;
  if (v37)
  {
    v38 = v37;
    if (!objc_msgSend(v37, "isDeviceRoute"))
    {
      v39 = *(_QWORD *)(v0 + 1128);
      v40 = swift_getKeyPath(&unk_1004316C0);
      v41 = swift_getKeyPath(&unk_1004316E8);
      static Published.subscript.getter((_QWORD *)(v0 + 824), v39, v40, v41);
      swift_release(v41);
      swift_release(v40);
      v42 = *(void **)(v0 + 824);

      if (!v42)
      {
        v67 = *(unsigned __int8 *)(v0 + 267);
        sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1064), type metadata accessor for PlaybackIntentDescriptor);
        v68 = *(_QWORD *)(v0 + 1064);
        if ((v67 & 1) != 0)
        {
          sub_10000E750(v68, type metadata accessor for PlaybackIntentDescriptor);
        }
        else
        {
          v69 = *(_QWORD *)(v0 + 1016);
          v70 = *(_QWORD *)(v0 + 968);
          sub_10000D964(v68, v69, type metadata accessor for PlaybackIntentDescriptor.IntentType);
          v71 = swift_getEnumCaseMultiPayload(v69, v70);
          v72 = *(void ***)(v0 + 1016);
          if (v71 == 1)
          {
            v73 = *(_QWORD *)(v0 + 960);
            v74 = *(_QWORD *)(v0 + 952);
            v75 = *(_QWORD *)(v0 + 944);
            v76 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v74 + 32))(v73, v72, v75);
            v77 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v76);
            (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
          }
          else
          {
            v77 = *v72;
          }
          v78 = *(_QWORD *)(v0 + 1064);
          v79 = objc_msgSend(v77, "prefersEnqueuingUsingAirPlay");

          sub_10000E750(v78, type metadata accessor for PlaybackIntentDescriptor);
          if ((v79 & 1) == 0)
          {
            v81 = *(_QWORD *)(v0 + 1056);
            v82 = *(_QWORD *)(v0 + 840);
            v83 = objc_msgSend(v38, "supportsRemoteControl");
            sub_10000D964(v82, v81, type metadata accessor for PlaybackIntentDescriptor);
            if ((v83 & 1) != 0)
            {
              v84 = *(_QWORD *)(v0 + 1056);
              v85 = *(_BYTE *)(v84 + *(int *)(*(_QWORD *)(v0 + 1048) + 32));
              sub_10000E750(v84, type metadata accessor for PlaybackIntentDescriptor);
              if ((v85 & 1) == 0)
              {
                v43 = *(void **)(v0 + 1144);
                if ((objc_msgSend(*(id *)(v0 + 1296), "canModifyGroupMembership") & 1) == 0)
                  objc_msgSend(*(id *)(v0 + 1296), "establishGroup");
                goto LABEL_14;
              }
LABEL_34:
              v80 = (_QWORD *)swift_task_alloc(dword_100552CCC);
              *(_QWORD *)(v0 + 1304) = v80;
              *v80 = v0;
              v80[1] = sub_1001FD144;
              return Player.prepareForBufferedAirPlay()();
            }
LABEL_33:
            sub_10000E750(*(_QWORD *)(v0 + 1056), type metadata accessor for PlaybackIntentDescriptor);
            goto LABEL_34;
          }
        }
        sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1056), type metadata accessor for PlaybackIntentDescriptor);
        goto LABEL_33;
      }
    }
  }
  v43 = *(void **)(v0 + 1144);
LABEL_14:

LABEL_16:
  *(_QWORD *)(v0 + 1328) = v43;
  v44 = *(_QWORD *)(v0 + 1008);
  v45 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 840), v44, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  v46 = swift_getEnumCaseMultiPayload(v44, v45);
  v47 = *(uint64_t **)(v0 + 1008);
  if (v46 == 1)
  {
    v48 = *(_QWORD *)(v0 + 960);
    v49 = *(_QWORD *)(v0 + 952);
    v50 = *(_QWORD *)(v0 + 944);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v49 + 32))(v48, v47, v50);
    v52 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v51);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  }
  else
  {
    v52 = *v47;
  }
  *(_QWORD *)(v0 + 1336) = v52;
  v53 = dword_10055288C;
  v54 = v43;
  v55 = (_QWORD *)swift_task_alloc(v53);
  *(_QWORD *)(v0 + 1344) = v55;
  *v55 = v0;
  v55[1] = sub_1001FD2EC;
  return sub_10020B5C4(v52, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1272), (uint64_t)v43);
}

uint64_t sub_1001FCB64(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 1240);
  *(_QWORD *)(*v4 + 1248) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = *(_QWORD *)(v8 + 1112);
    v11 = *(_QWORD *)(v8 + 1104);
    v12 = sub_1001FE9E4;
  }
  else
  {
    *(_BYTE *)(v8 + 269) = a3;
    *(_QWORD *)(v8 + 1256) = a2;
    *(_QWORD *)(v8 + 1264) = a1;
    v10 = *(_QWORD *)(v8 + 1112);
    v11 = *(_QWORD *)(v8 + 1104);
    v12 = sub_1001FCBF8;
  }
  return swift_task_switch(v12, v11, v10);
}

uint64_t sub_1001FCBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  double v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unsigned __int8 v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if ((*(_BYTE *)(v0 + 269) & 1) != 0)
  {
    v14 = *(void **)(v0 + 1144);
    v15 = *(_QWORD *)(v0 + 1128);
    swift_release(*(_QWORD *)(v0 + 1096));
    v16 = sub_10020B4E8();
    v67 = swift_allocError(&type metadata for PlaybackController.CommandError, v16, 0, 0);
    *(_QWORD *)v17 = 2;
    *(_BYTE *)(v17 + 8) = 3;
    swift_willThrow(v67);
    swift_release(v15);

    v18 = *(_QWORD *)(v0 + 1072);
    v19 = *(_QWORD *)(v0 + 1064);
    v20 = *(_QWORD *)(v0 + 1056);
    v21 = *(_QWORD *)(v0 + 1040);
    v22 = *(_QWORD *)(v0 + 1032);
    v23 = *(_QWORD *)(v0 + 1024);
    v24 = *(_QWORD *)(v0 + 1016);
    v25 = *(_QWORD *)(v0 + 1008);
    v26 = *(_QWORD *)(v0 + 1000);
    v59 = *(_QWORD *)(v0 + 992);
    v60 = *(_QWORD *)(v0 + 984);
    v61 = *(_QWORD *)(v0 + 976);
    v62 = *(_QWORD *)(v0 + 960);
    v63 = *(_QWORD *)(v0 + 936);
    v64 = *(_QWORD *)(v0 + 928);
    v65 = *(_QWORD *)(v0 + 904);
    v66 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1080));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_OWORD *)(v0 + 1272) = *(_OWORD *)(v0 + 1256);
  v1 = *(_QWORD *)(v0 + 1128);
  KeyPath = swift_getKeyPath(&unk_100431890);
  v3 = swift_getKeyPath(&unk_1004318B8);
  static Published.subscript.getter((_QWORD *)(v0 + 808), v1, KeyPath, v3);
  swift_release(v3);
  *(_QWORD *)&v4 = swift_release(KeyPath).n128_u64[0];
  v5 = *(void **)(v0 + 808);
  v6 = objc_msgSend(v5, "route", v4);
  *(_QWORD *)(v0 + 1288) = v6;

  if (!v6)
  {
    v13 = *(void **)(v0 + 1144);
    goto LABEL_10;
  }
  objc_opt_self(MPAVEndpointRoute);
  v7 = (void *)swift_dynamicCastObjCClass(v6);
  *(_QWORD *)(v0 + 1296) = v7;
  if (v7)
  {
    v8 = v7;
    if (!objc_msgSend(v7, "isDeviceRoute"))
    {
      v9 = *(_QWORD *)(v0 + 1128);
      v10 = swift_getKeyPath(&unk_1004316C0);
      v11 = swift_getKeyPath(&unk_1004316E8);
      static Published.subscript.getter((_QWORD *)(v0 + 824), v9, v10, v11);
      swift_release(v11);
      swift_release(v10);
      v12 = *(void **)(v0 + 824);

      if (!v12)
      {
        v40 = *(unsigned __int8 *)(v0 + 267);
        sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1064), type metadata accessor for PlaybackIntentDescriptor);
        v41 = *(_QWORD *)(v0 + 1064);
        if ((v40 & 1) != 0)
        {
          sub_10000E750(v41, type metadata accessor for PlaybackIntentDescriptor);
        }
        else
        {
          v42 = *(_QWORD *)(v0 + 1016);
          v43 = *(_QWORD *)(v0 + 968);
          sub_10000D964(v41, v42, type metadata accessor for PlaybackIntentDescriptor.IntentType);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v42, v43);
          v45 = *(void ***)(v0 + 1016);
          if (EnumCaseMultiPayload == 1)
          {
            v46 = *(_QWORD *)(v0 + 960);
            v47 = *(_QWORD *)(v0 + 952);
            v48 = *(_QWORD *)(v0 + 944);
            v49 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v47 + 32))(v46, v45, v48);
            v50 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v49);
            (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
          }
          else
          {
            v50 = *v45;
          }
          v51 = *(_QWORD *)(v0 + 1064);
          v52 = objc_msgSend(v50, "prefersEnqueuingUsingAirPlay");

          sub_10000E750(v51, type metadata accessor for PlaybackIntentDescriptor);
          if ((v52 & 1) == 0)
          {
            v54 = *(_QWORD *)(v0 + 1056);
            v55 = *(_QWORD *)(v0 + 840);
            v56 = objc_msgSend(v8, "supportsRemoteControl");
            sub_10000D964(v55, v54, type metadata accessor for PlaybackIntentDescriptor);
            if ((v56 & 1) != 0)
            {
              v57 = *(_QWORD *)(v0 + 1056);
              v58 = *(_BYTE *)(v57 + *(int *)(*(_QWORD *)(v0 + 1048) + 32));
              sub_10000E750(v57, type metadata accessor for PlaybackIntentDescriptor);
              if ((v58 & 1) == 0)
              {
                v13 = *(void **)(v0 + 1144);
                if ((objc_msgSend(*(id *)(v0 + 1296), "canModifyGroupMembership") & 1) == 0)
                  objc_msgSend(*(id *)(v0 + 1296), "establishGroup");
                goto LABEL_7;
              }
LABEL_22:
              v53 = (_QWORD *)swift_task_alloc(dword_100552CCC);
              *(_QWORD *)(v0 + 1304) = v53;
              *v53 = v0;
              v53[1] = sub_1001FD144;
              return Player.prepareForBufferedAirPlay()();
            }
LABEL_21:
            sub_10000E750(*(_QWORD *)(v0 + 1056), type metadata accessor for PlaybackIntentDescriptor);
            goto LABEL_22;
          }
        }
        sub_10000D964(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 1056), type metadata accessor for PlaybackIntentDescriptor);
        goto LABEL_21;
      }
    }
  }
  v13 = *(void **)(v0 + 1144);
LABEL_7:

LABEL_10:
  *(_QWORD *)(v0 + 1328) = v13;
  v28 = *(_QWORD *)(v0 + 1008);
  v29 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 840), v28, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  v30 = swift_getEnumCaseMultiPayload(v28, v29);
  v31 = *(uint64_t **)(v0 + 1008);
  if (v30 == 1)
  {
    v32 = *(_QWORD *)(v0 + 960);
    v33 = *(_QWORD *)(v0 + 952);
    v34 = *(_QWORD *)(v0 + 944);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v33 + 32))(v32, v31, v34);
    v36 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v35);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }
  else
  {
    v36 = *v31;
  }
  *(_QWORD *)(v0 + 1336) = v36;
  v37 = dword_10055288C;
  v38 = v13;
  v39 = (_QWORD *)swift_task_alloc(v37);
  *(_QWORD *)(v0 + 1344) = v39;
  *v39 = v0;
  v39[1] = sub_1001FD2EC;
  return sub_10020B5C4(v36, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1272), (uint64_t)v13);
}

uint64_t sub_1001FD144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1304);
  *(_QWORD *)(*(_QWORD *)v2 + 1312) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[139];
    v7 = v4[138];
    v8 = sub_1001FEB38;
  }
  else
  {
    v4[165] = a1;
    v6 = v4[139];
    v7 = v4[138];
    v8 = sub_1001FD1C0;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_1001FD1C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v1 = *(void **)(v0 + 1320);
  if ((objc_msgSend(*(id *)(v0 + 1296), "canModifyGroupMembership") & 1) == 0)
    objc_msgSend(*(id *)(v0 + 1296), "establishGroup");

  *(_QWORD *)(v0 + 1328) = v1;
  v2 = *(_QWORD *)(v0 + 1008);
  v3 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 840), v2, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v3);
  v5 = *(uint64_t **)(v0 + 1008);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *(_QWORD *)(v0 + 960);
    v7 = *(_QWORD *)(v0 + 952);
    v8 = *(_QWORD *)(v0 + 944);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v7 + 32))(v6, v5, v8);
    v10 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v9);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  else
  {
    v10 = *v5;
  }
  *(_QWORD *)(v0 + 1336) = v10;
  v11 = dword_10055288C;
  v12 = v1;
  v13 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 1344) = v13;
  *v13 = v0;
  v13[1] = sub_1001FD2EC;
  return sub_10020B5C4(v10, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1272), (uint64_t)v1);
}

uint64_t sub_1001FD2EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  void *v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1344);
  *(_QWORD *)(*v1 + 1352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 1112);
    v5 = *(_QWORD *)(v2 + 1104);
    v6 = sub_1001FD4B4;
  }
  else
  {
    v7 = *(void **)(v2 + 1328);

    v4 = *(_QWORD *)(v2 + 1112);
    v5 = *(_QWORD *)(v2 + 1104);
    v6 = sub_1001FD368;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1001FD368()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 1072);
  v4 = *(_QWORD *)(v0 + 1064);
  v5 = *(_QWORD *)(v0 + 1056);
  v6 = *(_QWORD *)(v0 + 1040);
  v7 = *(_QWORD *)(v0 + 1032);
  v8 = *(_QWORD *)(v0 + 1024);
  v9 = *(_QWORD *)(v0 + 1016);
  v10 = *(_QWORD *)(v0 + 1008);
  v11 = *(_QWORD *)(v0 + 1000);
  v13 = *(_QWORD *)(v0 + 992);
  v14 = *(_QWORD *)(v0 + 984);
  v15 = *(_QWORD *)(v0 + 976);
  v16 = *(_QWORD *)(v0 + 960);
  v17 = *(_QWORD *)(v0 + 936);
  v18 = *(_QWORD *)(v0 + 928);
  v19 = *(_QWORD *)(v0 + 904);
  v20 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FD4B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t KeyPath;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _OWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  _OWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  void *v133;
  id v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(void);
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  _BOOL4 v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236[2];

  v1 = *(_QWORD *)(v0 + 1352);
  v2 = *(void **)(v0 + 1328);

  *(_QWORD *)(v0 + 800) = v1;
  swift_errorRetain(v1);
  v3 = sub_10000B4C8((uint64_t *)&unk_100550630);
  if (!swift_dynamicCast(v0 + 584, v0 + 800, v3, &type metadata for Player.PlaybackError, 0))
  {
    v20 = *(void **)(v0 + 1328);
    v21 = *(_QWORD *)(v0 + 1128);
    swift_release(*(_QWORD *)(v0 + 1096));
    v22 = swift_errorRelease(*(_QWORD *)(v0 + 800));
    swift_willThrow(v22);
    swift_release(v21);

LABEL_75:
    v138 = *(_QWORD *)(v0 + 1072);
    v139 = *(_QWORD *)(v0 + 1064);
    v140 = *(_QWORD *)(v0 + 1056);
    v141 = *(_QWORD *)(v0 + 1040);
    v142 = *(_QWORD *)(v0 + 1032);
    v143 = *(_QWORD *)(v0 + 1024);
    v144 = *(_QWORD *)(v0 + 1016);
    v145 = *(_QWORD *)(v0 + 1008);
    v146 = *(_QWORD *)(v0 + 1000);
    v208 = *(_QWORD *)(v0 + 992);
    v211 = *(_QWORD *)(v0 + 984);
    v214 = *(_QWORD *)(v0 + 976);
    v217 = *(_QWORD *)(v0 + 960);
    v221 = *(_QWORD *)(v0 + 936);
    v224 = *(_QWORD *)(v0 + 928);
    v228 = *(_QWORD *)(v0 + 904);
    v231 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1080));
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    swift_task_dealloc(v140);
    swift_task_dealloc(v141);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v208);
    swift_task_dealloc(v211);
    swift_task_dealloc(v214);
    swift_task_dealloc(v217);
    swift_task_dealloc(v221);
    swift_task_dealloc(v224);
    swift_task_dealloc(v228);
    swift_task_dealloc(v231);
    v147 = *(uint64_t (**)(void))(v0 + 8);
    return v147();
  }
  swift_errorRelease(*(_QWORD *)(v0 + 1352));
  v4 = *(_QWORD *)(v0 + 584);
  *(_QWORD *)(v0 + 1360) = v4;
  v5 = *(_QWORD *)(v0 + 592);
  *(_QWORD *)(v0 + 1368) = v5;
  v6 = (void *)_convertErrorToNSError(_:)(v4);
  *(_QWORD *)(v0 + 1376) = v6;
  _s3__C4CodeOMa_0(0);
  v8 = v7;
  *(_QWORD *)(v0 + 760) = 1;
  v9 = sub_10001254C(&qword_10054CB60, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_10042A2F0);
  v10 = v6;
  v11 = static _ErrorCodeProtocol.~= infix(_:_:)(v0 + 760, v10, v8, v9);

  if ((v11 & 1) != 0)
  {
    v12 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 856), 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(char **)(v0 + 856);
    if (v15)
    {
      v17 = *(char **)(v0 + 848);
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v236[0] = v19;
      *(_DWORD *)v18 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v18 + 4) = sub_1000BA30C(v17, v16, v236);
      swift_bridgeObjectRelease_n(v16, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Intent id=%{public}s) — Offering replace intent options to user", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
    }

    v35 = *(_QWORD *)(v0 + 1088);
    *(_QWORD *)(v0 + 1384) = static MainActor.shared.getter(v36);
    v37 = dispatch thunk of Actor.unownedExecutor.getter(v35, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 1392) = v37;
    *(_QWORD *)(v0 + 1400) = v38;
    return swift_task_switch(sub_1001FEC94, v37, v38);
  }
  *(_QWORD *)(v0 + 728) = 5;
  v23 = v10;
  v24 = static _ErrorCodeProtocol.~= infix(_:_:)(v0 + 728, v23, v8, v9);

  if ((v24 & 1) != 0)
  {
    v226 = *(void **)(v0 + 1328);
    v229 = v5;
    v25 = *(_QWORD *)(v0 + 1128);
    v26 = *(_QWORD *)(v0 + 1048);
    v27 = *(_QWORD *)(v0 + 872);
    v28 = *(_QWORD *)(v0 + 840);
    swift_release(*(_QWORD *)(v0 + 1096));
    v29 = v4;
    v30 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
    v31 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
    sub_10000D900((_QWORD *)(v27 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v30);
    sub_10020DB38(v28 + *(int *)(v26 + 28), v0 + 272);
    *(_BYTE *)(v0 + 328) = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 8))(v0 + 272, v30, v31);
    sub_10020BAA8((_QWORD *)(v0 + 272));
    v32 = sub_10020B4E8();
    v33 = swift_allocError(&type metadata for PlaybackController.CommandError, v32, 0, 0);
    *(_QWORD *)v34 = 1;
    *(_BYTE *)(v34 + 8) = 3;
    swift_willThrow(v33);
    swift_release(v25);
    swift_errorRelease(v29);
    swift_bridgeObjectRelease(v229);

LABEL_74:
    swift_errorRelease(*(_QWORD *)(v0 + 800));
    goto LABEL_75;
  }
  *(_QWORD *)(v0 + 720) = 3;
  v40 = v23;
  v41 = static _ErrorCodeProtocol.~= infix(_:_:)(v0 + 720, v40, v8, v9);

  if ((v41 & 1) != 0)
  {
    v42 = *(_QWORD *)(v0 + 992);
    v43 = *(_QWORD *)(v0 + 968);
    sub_10000D964(*(_QWORD *)(v0 + 840), v42, type metadata accessor for PlaybackIntentDescriptor.IntentType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v42, v43);
    v45 = *(uint64_t **)(v0 + 992);
    if (EnumCaseMultiPayload == 1)
    {
      v46 = *(_QWORD *)(v0 + 960);
      v47 = *(_QWORD *)(v0 + 952);
      v48 = *(_QWORD *)(v0 + 944);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v47 + 32))(v46, v45, v48);
      v50 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v49);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    }
    else
    {
      v50 = *v45;
    }
    *(_QWORD *)(v0 + 1448) = v50;
    v65 = (_QWORD *)swift_task_alloc(dword_100552534);
    *(_QWORD *)(v0 + 1456) = v65;
    *v65 = v0;
    v65[1] = sub_1001FF3D4;
    return sub_1001F9BEC(v50, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856));
  }
  type metadata accessor for Code(0);
  v52 = v51;
  *(_QWORD *)(v0 + 680) = 1001;
  v53 = sub_10001254C(&qword_10054CB88, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10042A2B4);
  v54 = v40;
  v55 = static _ErrorCodeProtocol.~= infix(_:_:)(v0 + 680, v54, v52, v53);

  if ((v55 & 1) == 0)
  {
    v66 = *(void **)(v0 + 1328);
    v67 = *(_QWORD *)(v0 + 1128);
    swift_release(*(_QWORD *)(v0 + 1096));
LABEL_73:
    v135 = sub_10020B4A4();
    swift_allocError(&type metadata for Player.PlaybackError, v135, 0, 0);
    *v136 = v4;
    v136[1] = v5;
    swift_errorRetain(v4);
    v137 = swift_bridgeObjectRetain();
    swift_willThrow(v137);
    swift_release(v67);
    swift_errorRelease(v4);
    swift_bridgeObjectRelease(v5);

    goto LABEL_74;
  }
  v56 = *(_QWORD *)(v0 + 984);
  v57 = *(_QWORD *)(v0 + 968);
  sub_10000D964(*(_QWORD *)(v0 + 840), v56, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  v58 = swift_getEnumCaseMultiPayload(v56, v57);
  v59 = *(void ***)(v0 + 984);
  if (v58 == 1)
  {
    v60 = *(_QWORD *)(v0 + 960);
    v61 = *(_QWORD *)(v0 + 952);
    v62 = *(_QWORD *)(v0 + 944);
    v63 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(v61 + 32))(v60, v59, v62);
    v64 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v63);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  }
  else
  {
    v64 = *v59;
  }
  v68 = objc_msgSend(v64, "sharedListeningProperties");

  if (!v68)
    goto LABEL_31;
  v69 = objc_msgSend(v54, "userInfo");
  v70 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v69, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  v73 = v72;
  if (*(_QWORD *)(v70 + 16) && (v74 = sub_10013B57C(v71, v72), (v75 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v70 + 56) + 32 * v74, v0 + 504);
  }
  else
  {
    *(_OWORD *)(v0 + 504) = 0u;
    *(_OWORD *)(v0 + 520) = 0u;
  }
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v73);
  if (!*(_QWORD *)(v0 + 528))
  {
    swift_release(*(_QWORD *)(v0 + 1096));
    sub_100011694(v0 + 504, &qword_100550FD0);
    goto LABEL_45;
  }
  type metadata accessor for MPCPlayerRequestError(0);
  v77 = v76;
  if ((swift_dynamicCast(v0 + 736, v0 + 504, (char *)&type metadata for Any + 8, v76, 6) & 1) == 0)
  {
LABEL_31:
    swift_release(*(_QWORD *)(v0 + 1096));
LABEL_45:
    v99 = *(_QWORD *)(*(_QWORD *)(v0 + 872) + *(_QWORD *)(v0 + 1120));
    if (!v99)
      goto LABEL_72;
    KeyPath = swift_getKeyPath(&unk_1004316C0);
    v101 = swift_getKeyPath(&unk_1004316E8);
    v102 = swift_retain(v99);
    static Published.subscript.getter((_QWORD *)(v0 + 640), v102, KeyPath, v101);
    swift_release(v101);
    swift_release(KeyPath);
    swift_release(v99);
    v103 = *(void **)(v0 + 640);
    if (!v103)
      goto LABEL_72;

    v104 = objc_msgSend(v54, "userInfo");
    v105 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v104, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v108 = v107;
    if (*(_QWORD *)(v105 + 16) && (v109 = sub_10013B57C(v106, v107), (v110 & 1) != 0))
    {
      sub_1000760E0(*(_QWORD *)(v105 + 56) + 32 * v109, v0 + 376);
    }
    else
    {
      *(_OWORD *)(v0 + 376) = 0u;
      *(_OWORD *)(v0 + 392) = 0u;
    }
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v108);
    if (!*(_QWORD *)(v0 + 400))
    {
      sub_100011694(v0 + 376, &qword_100550FD0);
      goto LABEL_72;
    }
    v111 = (void **)(v0 + 616);
    type metadata accessor for MPCMusicBehaviorError(0);
    v113 = v112;
    if ((swift_dynamicCast(v0 + 616, v0 + 376, (char *)&type metadata for Any + 8, v112, 6) & 1) != 0)
    {
      v114 = *v111;
      *(_QWORD *)(v0 + 632) = *v111;
      v115 = sub_10001254C(&qword_10054CAD0, (uint64_t (*)(uint64_t))type metadata accessor for MPCMusicBehaviorError, (uint64_t)&unk_10042A1A4);
      _BridgedStoredNSError.code.getter(v113, v115);
      if (*(_QWORD *)(v0 + 624) != 6)
      {

        goto LABEL_72;
      }
      v234 = v4;
      v116 = (_OWORD *)(v0 + 408);
      v223 = v114;
      v227 = v0;
      *(_QWORD *)(v0 + 648) = v114;
      v117 = _BridgedStoredNSError.userInfo.getter(v113, v115);
      v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMultipleUnderlyingErrorsKey);
      v120 = v119;
      if (*(_QWORD *)(v117 + 16) && (v121 = sub_10013B57C(v118, v119), (v122 & 1) != 0))
      {
        sub_1000760E0(*(_QWORD *)(v117 + 56) + 32 * v121, v0 + 408);
      }
      else
      {
        *v116 = 0u;
        *(_OWORD *)(v0 + 424) = 0u;
      }
      swift_bridgeObjectRelease(v117);
      swift_bridgeObjectRelease(v120);
      if (!*(_QWORD *)(v0 + 432))
      {

        sub_100011694((uint64_t)v116, &qword_100550FD0);
        goto LABEL_72;
      }
      v123 = sub_10000B4C8(&qword_100552898);
      if ((swift_dynamicCast(v0 + 656, v116, (char *)&type metadata for Any + 8, v123, 6) & 1) != 0)
      {
        v124 = *(_QWORD *)(v0 + 656);
        if (*(_QWORD *)(v124 + 16))
        {
          v125 = *(id *)(v124 + 32);
          swift_bridgeObjectRelease(v124);
          *(_QWORD *)(v0 + 672) = v125;
          _BridgedStoredNSError.code.getter(v113, v115);
          if (*(_QWORD *)(v0 + 664) != 4)
          {
LABEL_88:

            goto LABEL_72;
          }
          v126 = (_OWORD *)(v0 + 440);
          *(_QWORD *)(v0 + 688) = v125;
          v127 = _BridgedStoredNSError.userInfo.getter(v113, v115);
          v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMultipleUnderlyingErrorsKey);
          v130 = v129;
          v220 = v125;
          v230 = v5;
          if (*(_QWORD *)(v127 + 16) && (v131 = sub_10013B57C(v128, v129), (v132 & 1) != 0))
          {
            sub_1000760E0(*(_QWORD *)(v127 + 56) + 32 * v131, v0 + 440);
          }
          else
          {
            *v126 = 0u;
            *(_OWORD *)(v0 + 456) = 0u;
          }
          swift_bridgeObjectRelease(v127);
          swift_bridgeObjectRelease(v130);
          if (*(_QWORD *)(v0 + 464))
          {
            v148 = (_QWORD *)(v0 + 696);
            v149 = sub_10000B4C8((uint64_t *)&unk_1005528A0);
            if ((swift_dynamicCast(v0 + 696, v126, (char *)&type metadata for Any + 8, v149, 6) & 1) != 0)
            {
              v150 = *v148;
              if (*(_QWORD *)(*v148 + 16))
              {
                v151 = *(id *)(v150 + 32);
                swift_bridgeObjectRelease(v150);
                *(_QWORD *)(v0 + 712) = v151;
                type metadata accessor for MPCError(0);
                v153 = v152;
                v154 = sub_10001254C(&qword_10054CB30, (uint64_t (*)(uint64_t))type metadata accessor for MPCError, (uint64_t)&unk_10042A358);
                _BridgedStoredNSError.code.getter(v153, v154);

                if (*(_QWORD *)(v0 + 704) == 61)
                {
                  v155 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 856), 2);
                  v156 = Logger.logObject.getter(v155);
                  v157 = static os_log_type_t.default.getter(v156);
                  v158 = os_log_type_enabled(v156, v157);
                  v159 = *(char **)(v0 + 856);
                  if (v158)
                  {
                    v160 = *(char **)(v0 + 848);
                    v161 = swift_slowAlloc(12, -1);
                    v162 = swift_slowAlloc(32, -1);
                    v236[0] = v162;
                    *(_DWORD *)v161 = 136446210;
                    swift_bridgeObjectRetain();
                    *(_QWORD *)(v161 + 4) = sub_1000BA30C(v160, v159, v236);
                    swift_bridgeObjectRelease_n(v159, 3);
                    _os_log_impl((void *)&_mh_execute_header, v156, v157, "Intent id=%{public}s) — SharePlayTogether content not available in host's storefront", (uint8_t *)v161, 0xCu);
                    swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v162, -1, -1);
                    swift_slowDealloc(v161, -1, -1);
                  }
                  else
                  {
                    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
                  }

                  v163 = *(_QWORD *)(v0 + 936);
                  v164 = *(_QWORD *)(v0 + 928);
                  v165 = *(_QWORD *)(v0 + 920);
                  v166 = *(_QWORD *)(v227 + 912);
                  String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010044CAC0);
                  v167 = *(void (**)(uint64_t, uint64_t, uint64_t))(v165 + 16);
                  v167(v164, v163, v166);
                  if (qword_10054B9B0 != -1)
                    swift_once(&qword_10054B9B0, sub_1000ABDCC);
                  v215 = *(_QWORD *)(v227 + 1128);
                  v218 = *(void **)(v227 + 1328);
                  v168 = *(_QWORD *)(v227 + 936);
                  v169 = *(_QWORD *)(v227 + 928);
                  v170 = *(_QWORD *)(v227 + 920);
                  v171 = *(_QWORD *)(v227 + 912);
                  v172 = *(_QWORD *)(v227 + 904);
                  v204 = *(_QWORD *)(v227 + 896);
                  v207 = *(_QWORD *)(v227 + 888);
                  v209 = *(_QWORD *)(v227 + 880);
                  v212 = *(_QWORD *)(v227 + 872);
                  v173 = qword_100561480;
                  static Locale.current.getter((id)qword_100561480);
                  v174 = String.init(localized:table:bundle:locale:comment:)(v169, 0, 0, v173, v172, 0, 0, 256);
                  v205 = v175;
                  v206 = v174;
                  v176 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
                  v176(v168, v171);
                  String.LocalizationValue.init(stringLiteral:)(0xD000000000000046, 0x800000010044CAE0);
                  v167(v169, v168, v171);
                  v177 = qword_100561480;
                  static Locale.current.getter((id)qword_100561480);
                  v178 = String.init(localized:table:bundle:locale:comment:)(v169, 0, 0, v177, v172, 0, 0, 256);
                  v202 = v179;
                  v203 = v178;
                  v176(v168, v171);
                  v180 = sub_10000B4C8(&qword_100552680);
                  v181 = swift_allocObject(v180, 88, 7);
                  *(_OWORD *)(v181 + 16) = xmmword_100424BB0;
                  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
                  v167(v169, v168, v171);
                  v182 = qword_100561480;
                  static Locale.current.getter((id)qword_100561480);
                  v183 = String.init(localized:table:bundle:locale:comment:)(v169, 0, 0, v182, v172, 0, 0, 256);
                  v185 = v184;
                  v176(v168, v171);
                  v186 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
                  v187 = UUID.uuidString.getter(v186);
                  v189 = v188;
                  (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v204, v209);
                  *(_QWORD *)(v181 + 32) = v187;
                  *(_QWORD *)(v181 + 40) = v189;
                  *(_QWORD *)(v181 + 48) = v183;
                  *(_QWORD *)(v181 + 56) = v185;
                  *(_BYTE *)(v181 + 64) = 2;
                  *(_QWORD *)(v181 + 72) = 0;
                  *(_QWORD *)(v181 + 80) = 0;
                  v190 = *(_QWORD *)(v212 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
                  v191 = *(_QWORD *)(v212 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
                  sub_10000D900((_QWORD *)(v212 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v190);
                  *(_QWORD *)(v227 + 208) = v206;
                  *(_QWORD *)(v227 + 216) = v205;
                  *(_QWORD *)(v227 + 224) = v203;
                  *(_QWORD *)(v227 + 232) = v202;
                  *(_BYTE *)(v227 + 240) = 0;
                  *(_QWORD *)(v227 + 248) = v181;
                  *(_QWORD *)(v227 + 256) = 0;
                  *(_BYTE *)(v227 + 264) = 0;
                  v192 = *(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 8);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v192(v227 + 208, v190, v191);
                  swift_release(v215);
                  swift_bridgeObjectRelease(v205);
                  swift_bridgeObjectRelease(v202);
                  swift_bridgeObjectRelease(v181);

                  swift_errorRelease(v234);
                  swift_bridgeObjectRelease(v230);

                  sub_10020BAA8((_QWORD *)(v227 + 208));
                  swift_errorRelease(*(_QWORD *)(v227 + 800));
                  v193 = *(_QWORD *)(v227 + 1072);
                  v194 = *(_QWORD *)(v227 + 1064);
                  v195 = *(_QWORD *)(v227 + 1056);
                  v196 = *(_QWORD *)(v227 + 1040);
                  v197 = *(_QWORD *)(v227 + 1032);
                  v198 = *(_QWORD *)(v227 + 1024);
                  v199 = *(_QWORD *)(v227 + 1016);
                  v200 = *(_QWORD *)(v227 + 1008);
                  v201 = *(_QWORD *)(v227 + 1000);
                  v210 = *(_QWORD *)(v227 + 992);
                  v213 = *(_QWORD *)(v227 + 984);
                  v216 = *(_QWORD *)(v227 + 976);
                  v219 = *(_QWORD *)(v227 + 960);
                  v222 = *(_QWORD *)(v227 + 936);
                  v225 = *(_QWORD *)(v227 + 928);
                  v232 = *(_QWORD *)(v227 + 904);
                  v235 = *(_QWORD *)(v227 + 896);
                  swift_task_dealloc(*(_QWORD *)(v227 + 1080));
                  swift_task_dealloc(v193);
                  swift_task_dealloc(v194);
                  swift_task_dealloc(v195);
                  swift_task_dealloc(v196);
                  swift_task_dealloc(v197);
                  swift_task_dealloc(v198);
                  swift_task_dealloc(v199);
                  swift_task_dealloc(v200);
                  swift_task_dealloc(v201);
                  swift_task_dealloc(v210);
                  swift_task_dealloc(v213);
                  swift_task_dealloc(v216);
                  swift_task_dealloc(v219);
                  swift_task_dealloc(v222);
                  swift_task_dealloc(v225);
                  swift_task_dealloc(v232);
                  swift_task_dealloc(v235);
                  v147 = *(uint64_t (**)(void))(v227 + 8);
                  return v147();
                }
              }
              else
              {
                swift_bridgeObjectRelease(*v148);
              }
            }
            goto LABEL_88;
          }

          sub_100011694((uint64_t)v126, &qword_100550FD0);
          goto LABEL_72;
        }
        swift_bridgeObjectRelease(v124);
      }

    }
LABEL_72:
    v66 = *(void **)(v0 + 1328);
    v67 = *(_QWORD *)(v0 + 1128);
    goto LABEL_73;
  }
  v233 = v4;
  v78 = *(void **)(v0 + 736);
  *(_QWORD *)(v0 + 1472) = v78;
  *(_QWORD *)(v0 + 752) = v78;
  v79 = sub_10001254C(&qword_10054CAE0, (uint64_t (*)(uint64_t))type metadata accessor for MPCPlayerRequestError, (uint64_t)&unk_10042A55C);
  _BridgedStoredNSError.code.getter(v77, v79);
  if (*(_QWORD *)(v0 + 744) != 1000)
  {
    swift_release(*(_QWORD *)(v0 + 1096));

    v4 = v233;
    goto LABEL_45;
  }
  v80 = (_OWORD *)(v0 + 472);
  *(_QWORD *)(v0 + 768) = v78;
  v81 = _BridgedStoredNSError.userInfo.getter(v77, v79);
  v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  v84 = v83;
  if (*(_QWORD *)(v81 + 16))
  {
    v85 = sub_10013B57C(v82, v83);
    if ((v86 & 1) != 0)
    {
      sub_1000760E0(*(_QWORD *)(v81 + 56) + 32 * v85, v0 + 472);
    }
    else
    {
      *v80 = 0u;
      *(_OWORD *)(v0 + 488) = 0u;
    }
  }
  else
  {
    *v80 = 0u;
    *(_OWORD *)(v0 + 488) = 0u;
  }
  v4 = v233;
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v84);
  if (!*(_QWORD *)(v0 + 496))
  {
    swift_release(*(_QWORD *)(v0 + 1096));

    sub_100011694(v0 + 472, &qword_100550FD0);
    goto LABEL_45;
  }
  type metadata accessor for MPCError(0);
  v88 = v87;
  if ((swift_dynamicCast(v0 + 776, v0 + 472, (char *)&type metadata for Any + 8, v87, 6) & 1) == 0)
  {
    swift_release(*(_QWORD *)(v0 + 1096));
LABEL_44:

    goto LABEL_45;
  }
  v89 = *(void **)(v0 + 776);
  *(_QWORD *)(v0 + 1480) = v89;
  *(_QWORD *)(v0 + 792) = v89;
  v90 = sub_10001254C(&qword_10054CB30, (uint64_t (*)(uint64_t))type metadata accessor for MPCError, (uint64_t)&unk_10042A358);
  _BridgedStoredNSError.code.getter(v88, v90);
  if (*(_QWORD *)(v0 + 784) != 58)
  {
    swift_release(*(_QWORD *)(v0 + 1096));

    goto LABEL_44;
  }
  v91 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 856), 2);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.default.getter(v92);
  v94 = os_log_type_enabled(v92, v93);
  v95 = *(char **)(v0 + 856);
  if (v94)
  {
    v96 = *(char **)(v0 + 848);
    v97 = swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    v236[0] = v98;
    *(_DWORD *)v97 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v97 + 4) = sub_1000BA30C(v96, v95, v236);
    swift_bridgeObjectRelease_n(v95, 3);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Intent id=%{public}s) — SharedListening requires system route", (uint8_t *)v97, 0xCu);
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v97, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 856), 2);
  }

  v133 = (void *)objc_opt_self(MPAVRoutingController);
  *(_QWORD *)(v0 + 1488) = v133;
  v134 = objc_msgSend(v133, "systemRoute");
  *(_QWORD *)(v0 + 1496) = v134;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1001FF440;
  *(_QWORD *)(v0 + 368) = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 336) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 344) = 0x40000000;
  *(_QWORD *)(v0 + 352) = sub_100144A90;
  *(_QWORD *)(v0 + 360) = &unk_10050EBB8;
  objc_msgSend(v133, "setActiveRoute:completion:", v134, v0 + 336);
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_1001FE9E4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 1144);
  v2 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 1072);
  v4 = *(_QWORD *)(v0 + 1064);
  v5 = *(_QWORD *)(v0 + 1056);
  v6 = *(_QWORD *)(v0 + 1040);
  v7 = *(_QWORD *)(v0 + 1032);
  v8 = *(_QWORD *)(v0 + 1024);
  v9 = *(_QWORD *)(v0 + 1016);
  v10 = *(_QWORD *)(v0 + 1008);
  v11 = *(_QWORD *)(v0 + 1000);
  v13 = *(_QWORD *)(v0 + 992);
  v14 = *(_QWORD *)(v0 + 984);
  v15 = *(_QWORD *)(v0 + 976);
  v16 = *(_QWORD *)(v0 + 960);
  v17 = *(_QWORD *)(v0 + 936);
  v18 = *(_QWORD *)(v0 + 928);
  v19 = *(_QWORD *)(v0 + 904);
  v20 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FEB38()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 1288);
  v2 = *(void **)(v0 + 1144);
  v3 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));

  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 1072);
  v5 = *(_QWORD *)(v0 + 1064);
  v6 = *(_QWORD *)(v0 + 1056);
  v7 = *(_QWORD *)(v0 + 1040);
  v8 = *(_QWORD *)(v0 + 1032);
  v9 = *(_QWORD *)(v0 + 1024);
  v10 = *(_QWORD *)(v0 + 1016);
  v11 = *(_QWORD *)(v0 + 1008);
  v12 = *(_QWORD *)(v0 + 1000);
  v14 = *(_QWORD *)(v0 + 992);
  v15 = *(_QWORD *)(v0 + 984);
  v16 = *(_QWORD *)(v0 + 976);
  v17 = *(_QWORD *)(v0 + 960);
  v18 = *(_QWORD *)(v0 + 936);
  v19 = *(_QWORD *)(v0 + 928);
  v20 = *(_QWORD *)(v0 + 904);
  v21 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FEC94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = static MainActor.shared.getter(a1);
  *(_QWORD *)(v1 + 1408) = v2;
  if (v2)
  {
    ObjectType = swift_getObjectType();
    v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  return swift_task_switch(sub_1001FECFC, v4, v6);
}

uint64_t sub_1001FECFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[109];
  v0[15] = v0 + 75;
  v0[10] = v0;
  v0[11] = sub_1001FED54;
  v2 = swift_continuation_init(v0 + 10, 0);
  sub_100202894(v2, v1);
  return swift_continuation_await(v0 + 10);
}

uint64_t sub_1001FED54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1408);
  *(_QWORD *)(v1 + 1416) = *(_QWORD *)(v1 + 600);
  *(_BYTE *)(v1 + 270) = *(_BYTE *)(v1 + 608);
  swift_release(v2);
  return swift_task_switch(sub_1001FEDB4, *(_QWORD *)(v1 + 1392), *(_QWORD *)(v1 + 1400));
}

uint64_t sub_1001FEDB4()
{
  _QWORD *v0;

  swift_release(v0[173]);
  return swift_task_switch(sub_1001FEDF0, v0[138], v0[139]);
}

uint64_t sub_1001FEDF0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((*(_BYTE *)(v0 + 270) & 1) != 0)
  {
    v1 = *(void **)(v0 + 1376);
    v2 = *(_QWORD *)(v0 + 1368);
    v3 = *(_QWORD *)(v0 + 1360);
    v4 = *(void **)(v0 + 1328);
    v5 = *(_QWORD *)(v0 + 1128);
    swift_release(*(_QWORD *)(v0 + 1096));
    v6 = sub_10020B4E8();
    v36 = swift_allocError(&type metadata for PlaybackController.CommandError, v6, 0, 0);
    *(_QWORD *)v7 = 2;
    *(_BYTE *)(v7 + 8) = 3;
    swift_willThrow(v36);
    swift_release(v5);
    swift_errorRelease(v3);
    swift_bridgeObjectRelease(v2);

    swift_errorRelease(*(_QWORD *)(v0 + 800));
    v8 = *(_QWORD *)(v0 + 1072);
    v9 = *(_QWORD *)(v0 + 1064);
    v10 = *(_QWORD *)(v0 + 1056);
    v11 = *(_QWORD *)(v0 + 1040);
    v12 = *(_QWORD *)(v0 + 1032);
    v13 = *(_QWORD *)(v0 + 1024);
    v14 = *(_QWORD *)(v0 + 1016);
    v15 = *(_QWORD *)(v0 + 1008);
    v16 = *(_QWORD *)(v0 + 1000);
    v28 = *(_QWORD *)(v0 + 992);
    v29 = *(_QWORD *)(v0 + 984);
    v30 = *(_QWORD *)(v0 + 976);
    v31 = *(_QWORD *)(v0 + 960);
    v32 = *(_QWORD *)(v0 + 936);
    v33 = *(_QWORD *)(v0 + 928);
    v34 = *(_QWORD *)(v0 + 904);
    v35 = *(_QWORD *)(v0 + 896);
    swift_task_dealloc(*(_QWORD *)(v0 + 1080));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 1000);
    v19 = *(_QWORD *)(v0 + 968);
    sub_10000D964(*(_QWORD *)(v0 + 840), v18, type metadata accessor for PlaybackIntentDescriptor.IntentType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
    v21 = *(uint64_t **)(v0 + 1000);
    if (EnumCaseMultiPayload == 1)
    {
      v22 = *(_QWORD *)(v0 + 960);
      v23 = *(_QWORD *)(v0 + 952);
      v24 = *(_QWORD *)(v0 + 944);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v23 + 32))(v22, v21, v24);
      v26 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v25);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
    else
    {
      v26 = *v21;
    }
    *(_QWORD *)(v0 + 1424) = v26;
    v27 = (_QWORD *)swift_task_alloc(dword_10055288C);
    *(_QWORD *)(v0 + 1432) = v27;
    *v27 = v0;
    v27[1] = sub_1001FF078;
    return sub_10020B5C4(v26, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1416), 0);
  }
}

uint64_t sub_1001FF078()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1432);
  *(_QWORD *)(*v1 + 1440) = v0;
  swift_task_dealloc(v3);

  if (v0)
    v4 = sub_1001FF258;
  else
    v4 = sub_1001FF0E4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1104), *(_QWORD *)(v2 + 1112));
}

uint64_t sub_1001FF0E4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 1376);
  v2 = *(_QWORD *)(v0 + 1368);
  v3 = *(_QWORD *)(v0 + 1360);
  v4 = *(void **)(v0 + 1328);
  v5 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));
  swift_release(v5);
  swift_errorRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_errorRelease(*(_QWORD *)(v0 + 800));
  v6 = *(_QWORD *)(v0 + 1072);
  v7 = *(_QWORD *)(v0 + 1064);
  v8 = *(_QWORD *)(v0 + 1056);
  v9 = *(_QWORD *)(v0 + 1040);
  v10 = *(_QWORD *)(v0 + 1032);
  v11 = *(_QWORD *)(v0 + 1024);
  v12 = *(_QWORD *)(v0 + 1016);
  v13 = *(_QWORD *)(v0 + 1008);
  v14 = *(_QWORD *)(v0 + 1000);
  v16 = *(_QWORD *)(v0 + 992);
  v17 = *(_QWORD *)(v0 + 984);
  v18 = *(_QWORD *)(v0 + 976);
  v19 = *(_QWORD *)(v0 + 960);
  v20 = *(_QWORD *)(v0 + 936);
  v21 = *(_QWORD *)(v0 + 928);
  v22 = *(_QWORD *)(v0 + 904);
  v23 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FF258()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 1376);
  v2 = *(_QWORD *)(v0 + 1368);
  v3 = *(_QWORD *)(v0 + 1360);
  v4 = *(void **)(v0 + 1328);
  v5 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));
  swift_release(v5);
  swift_errorRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_errorRelease(*(_QWORD *)(v0 + 800));
  v6 = *(_QWORD *)(v0 + 1072);
  v7 = *(_QWORD *)(v0 + 1064);
  v8 = *(_QWORD *)(v0 + 1056);
  v9 = *(_QWORD *)(v0 + 1040);
  v10 = *(_QWORD *)(v0 + 1032);
  v11 = *(_QWORD *)(v0 + 1024);
  v12 = *(_QWORD *)(v0 + 1016);
  v13 = *(_QWORD *)(v0 + 1008);
  v14 = *(_QWORD *)(v0 + 1000);
  v16 = *(_QWORD *)(v0 + 992);
  v17 = *(_QWORD *)(v0 + 984);
  v18 = *(_QWORD *)(v0 + 976);
  v19 = *(_QWORD *)(v0 + 960);
  v20 = *(_QWORD *)(v0 + 936);
  v21 = *(_QWORD *)(v0 + 928);
  v22 = *(_QWORD *)(v0 + 904);
  v23 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FF3D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1456);
  *(_QWORD *)(*v1 + 1464) = v0;
  swift_task_dealloc(v3);

  if (v0)
    v4 = sub_1001FF940;
  else
    v4 = sub_10020E174;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1104), *(_QWORD *)(v2 + 1112));
}

uint64_t sub_1001FF440()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 1504) = v2;
  if (v2)
    v3 = sub_1001FFABC;
  else
    v3 = sub_1001FF4A0;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 1104), *(_QWORD *)(v1 + 1112));
}

uint64_t sub_1001FF4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 976);
  v2 = *(_QWORD *)(v0 + 968);
  v3 = *(_QWORD *)(v0 + 840);

  sub_10000D964(v3, v1, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  v5 = *(uint64_t **)(v0 + 976);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *(_QWORD *)(v0 + 960);
    v7 = *(_QWORD *)(v0 + 952);
    v8 = *(_QWORD *)(v0 + 944);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v7 + 32))(v6, v5, v8);
    v10 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v9);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  else
  {
    v10 = *v5;
  }
  *(_QWORD *)(v0 + 1512) = v10;
  v11 = objc_msgSend(*(id *)(v0 + 1488), "systemRoute");
  *(_QWORD *)(v0 + 1520) = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_10055288C);
  *(_QWORD *)(v0 + 1528) = v12;
  *v12 = v0;
  v12[1] = sub_1001FF5B4;
  return sub_10020B5C4(v10, *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1272), (uint64_t)v11);
}

uint64_t sub_1001FF5B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1528);
  *(_QWORD *)(*v1 + 1536) = v0;
  swift_task_dealloc(v3);
  v4 = *(void **)(v2 + 1512);

  if (v0)
    v5 = sub_1001FF7B4;
  else
    v5 = sub_1001FF630;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 1104), *(_QWORD *)(v2 + 1112));
}

uint64_t sub_1001FF630()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 1480);
  v2 = *(void **)(v0 + 1472);
  v3 = *(void **)(v0 + 1376);
  v4 = *(_QWORD *)(v0 + 1368);
  v5 = *(_QWORD *)(v0 + 1360);
  v6 = *(void **)(v0 + 1328);
  v7 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));

  swift_release(v7);
  swift_errorRelease(v5);
  swift_bridgeObjectRelease(v4);

  swift_errorRelease(*(_QWORD *)(v0 + 800));
  v8 = *(_QWORD *)(v0 + 1072);
  v9 = *(_QWORD *)(v0 + 1064);
  v10 = *(_QWORD *)(v0 + 1056);
  v11 = *(_QWORD *)(v0 + 1040);
  v12 = *(_QWORD *)(v0 + 1032);
  v13 = *(_QWORD *)(v0 + 1024);
  v14 = *(_QWORD *)(v0 + 1016);
  v15 = *(_QWORD *)(v0 + 1008);
  v16 = *(_QWORD *)(v0 + 1000);
  v18 = *(_QWORD *)(v0 + 992);
  v19 = *(_QWORD *)(v0 + 984);
  v20 = *(_QWORD *)(v0 + 976);
  v21 = *(_QWORD *)(v0 + 960);
  v22 = *(_QWORD *)(v0 + 936);
  v23 = *(_QWORD *)(v0 + 928);
  v24 = *(_QWORD *)(v0 + 904);
  v25 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FF7B4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 1480);
  v2 = *(void **)(v0 + 1472);
  v3 = *(void **)(v0 + 1376);
  v4 = *(_QWORD *)(v0 + 1368);
  v5 = *(_QWORD *)(v0 + 1360);
  v6 = *(void **)(v0 + 1328);
  v7 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));

  swift_release(v7);
  swift_errorRelease(v5);
  swift_bridgeObjectRelease(v4);

  swift_errorRelease(*(_QWORD *)(v0 + 800));
  v8 = *(_QWORD *)(v0 + 1072);
  v9 = *(_QWORD *)(v0 + 1064);
  v10 = *(_QWORD *)(v0 + 1056);
  v11 = *(_QWORD *)(v0 + 1040);
  v12 = *(_QWORD *)(v0 + 1032);
  v13 = *(_QWORD *)(v0 + 1024);
  v14 = *(_QWORD *)(v0 + 1016);
  v15 = *(_QWORD *)(v0 + 1008);
  v16 = *(_QWORD *)(v0 + 1000);
  v18 = *(_QWORD *)(v0 + 992);
  v19 = *(_QWORD *)(v0 + 984);
  v20 = *(_QWORD *)(v0 + 976);
  v21 = *(_QWORD *)(v0 + 960);
  v22 = *(_QWORD *)(v0 + 936);
  v23 = *(_QWORD *)(v0 + 928);
  v24 = *(_QWORD *)(v0 + 904);
  v25 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FF940()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 1376);
  v2 = *(_QWORD *)(v0 + 1368);
  v3 = *(_QWORD *)(v0 + 1360);
  v4 = *(void **)(v0 + 1328);
  v5 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));
  swift_release(v5);
  swift_errorRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_errorRelease(*(_QWORD *)(v0 + 800));
  v6 = *(_QWORD *)(v0 + 1072);
  v7 = *(_QWORD *)(v0 + 1064);
  v8 = *(_QWORD *)(v0 + 1056);
  v9 = *(_QWORD *)(v0 + 1040);
  v10 = *(_QWORD *)(v0 + 1032);
  v11 = *(_QWORD *)(v0 + 1024);
  v12 = *(_QWORD *)(v0 + 1016);
  v13 = *(_QWORD *)(v0 + 1008);
  v14 = *(_QWORD *)(v0 + 1000);
  v16 = *(_QWORD *)(v0 + 992);
  v17 = *(_QWORD *)(v0 + 984);
  v18 = *(_QWORD *)(v0 + 976);
  v19 = *(_QWORD *)(v0 + 960);
  v20 = *(_QWORD *)(v0 + 936);
  v21 = *(_QWORD *)(v0 + 928);
  v22 = *(_QWORD *)(v0 + 904);
  v23 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FFABC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(void **)(v0 + 1496);
  v2 = *(void **)(v0 + 1480);
  v3 = *(void **)(v0 + 1472);
  v4 = *(void **)(v0 + 1376);
  v5 = *(_QWORD *)(v0 + 1368);
  v6 = *(_QWORD *)(v0 + 1360);
  v7 = *(void **)(v0 + 1328);
  v8 = *(_QWORD *)(v0 + 1128);
  swift_release(*(_QWORD *)(v0 + 1096));
  swift_willThrow(v9);
  swift_release(v8);

  swift_errorRelease(v6);
  swift_bridgeObjectRelease(v5);

  swift_errorRelease(*(_QWORD *)(v0 + 800));
  v10 = *(_QWORD *)(v0 + 1072);
  v11 = *(_QWORD *)(v0 + 1064);
  v12 = *(_QWORD *)(v0 + 1056);
  v13 = *(_QWORD *)(v0 + 1040);
  v14 = *(_QWORD *)(v0 + 1032);
  v15 = *(_QWORD *)(v0 + 1024);
  v16 = *(_QWORD *)(v0 + 1016);
  v17 = *(_QWORD *)(v0 + 1008);
  v18 = *(_QWORD *)(v0 + 1000);
  v20 = *(_QWORD *)(v0 + 992);
  v21 = *(_QWORD *)(v0 + 984);
  v22 = *(_QWORD *)(v0 + 976);
  v23 = *(_QWORD *)(v0 + 960);
  v24 = *(_QWORD *)(v0 + 936);
  v25 = *(_QWORD *)(v0 + 928);
  v26 = *(_QWORD *)(v0 + 904);
  v27 = *(_QWORD *)(v0 + 896);
  swift_task_dealloc(*(_QWORD *)(v0 + 1080));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FFC58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[29] = v0;
  v2 = type metadata accessor for Player.CommandOptions(0);
  v1[30] = v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[31] = swift_task_alloc(v3);
  v1[32] = swift_task_alloc(v3);
  v4 = type metadata accessor for MainActor(0);
  v1[33] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[34] = v5;
  v1[35] = v6;
  return swift_task_switch(sub_1001FFCF8, v5, v6);
}

uint64_t sub_1001FFCF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t DynamicType;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  int *v29;
  _QWORD *v30;
  _QWORD *v31;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v1, v0 + 200, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 288) = *v1;
  if (!v2)
  {
    swift_release(*(_QWORD *)(v0 + 264));
    v21 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 256));
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 104) = &type metadata for Player.VocalsCommand;
  *(_QWORD *)(v0 + 112) = &protocol witness table for Player.VocalsCommand;
  *(_WORD *)(v0 + 84) = 1;
  *(_DWORD *)(v0 + 80) = 0;
  v3 = sub_10000D900((_QWORD *)(v0 + 80), (uint64_t)&type metadata for Player.VocalsCommand);
  DynamicType = swift_getDynamicType(v3, &type metadata for Player.VocalsCommand, 1);
  v5 = *(_QWORD *)(v0 + 112);
  swift_retain(v2);
  v6 = sub_100218AB0(DynamicType, v5);
  if (!v6)
  {
    sub_100011758((_QWORD *)(v0 + 80));
    goto LABEL_11;
  }
  v7 = (void *)v6;
  v8 = MPCPlayerResponse.canPerform(_:)(v0 + 80);

  sub_100011758((_QWORD *)(v0 + 80));
  if (!v8)
  {
LABEL_11:
    if (qword_10054BCA8 != -1)
      swift_once(&qword_10054BCA8, sub_10020A920);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10000D78C(v23, (uint64_t)static Logger.playbackController);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "[Auto-Sing] Preparing VA…", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    v28 = *(_QWORD *)(v0 + 256);
    v29 = *(int **)(v0 + 240);

    *(_QWORD *)(v0 + 144) = &type metadata for Player.VocalsCommand.Prepare;
    *(_QWORD *)(v0 + 152) = &protocol witness table for Player.VocalsCommand.Prepare;
    _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v30 = (_QWORD *)(v28 + v29[5]);
    *v30 = 0;
    v30[1] = 0;
    *(_QWORD *)(v28 + v29[6]) = 0;
    *(_BYTE *)(v28 + v29[7]) = 0;
    *(_QWORD *)(v28 + v29[8]) = 0;
    v31 = (_QWORD *)swift_task_alloc(dword_100552D94);
    *(_QWORD *)(v0 + 296) = v31;
    *v31 = v0;
    v31[1] = sub_100200068;
    v18 = *(_QWORD *)(v0 + 256);
    v19 = 5.0;
    v20 = v0 + 120;
    return sub_100214A74(v20, v18, v19);
  }
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D78C(v9, (uint64_t)static Logger.playbackController);
  *(_QWORD *)(v0 + 312) = v10;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[Auto-Sing] Awaiting for Vocals Command…", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }
  v15 = *(int **)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 248);

  *(_QWORD *)(v0 + 184) = &type metadata for Player.VocalsCommand;
  *(_QWORD *)(v0 + 192) = &protocol witness table for Player.VocalsCommand;
  *(_WORD *)(v0 + 164) = 1;
  *(_DWORD *)(v0 + 160) = 0;
  _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v16 = (_QWORD *)(v14 + v15[5]);
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)(v14 + v15[6]) = 0;
  *(_BYTE *)(v14 + v15[7]) = 0;
  *(_QWORD *)(v14 + v15[8]) = 0;
  v17 = (_QWORD *)swift_task_alloc(dword_100552D94);
  *(_QWORD *)(v0 + 320) = v17;
  *v17 = v0;
  v17[1] = sub_100200274;
  v18 = *(_QWORD *)(v0 + 248);
  v19 = 5.0;
  v20 = v0 + 160;
  return sub_100214A74(v20, v18, v19);
}

uint64_t sub_100200068(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 296);
  *(_QWORD *)(*(_QWORD *)v2 + 304) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_10000E750(v4[32], type metadata accessor for Player.CommandOptions);
    v6 = v4[34];
    v7 = v4[35];
    v8 = sub_100200430;
  }
  else
  {
    v9 = v4[32];

    sub_10000E750(v9, type metadata accessor for Player.CommandOptions);
    sub_100011758(v4 + 15);
    v6 = v4[34];
    v7 = v4[35];
    v8 = sub_10020010C;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10020010C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000D78C(v1, (uint64_t)static Logger.playbackController);
  *(_QWORD *)(v0 + 312) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[Auto-Sing] Awaiting for Vocals Command…", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(int **)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);

  *(_QWORD *)(v0 + 184) = &type metadata for Player.VocalsCommand;
  *(_QWORD *)(v0 + 192) = &protocol witness table for Player.VocalsCommand;
  *(_WORD *)(v0 + 164) = 1;
  *(_DWORD *)(v0 + 160) = 0;
  _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v8 = (_QWORD *)(v6 + v7[5]);
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)(v6 + v7[6]) = 0;
  *(_BYTE *)(v6 + v7[7]) = 0;
  *(_QWORD *)(v6 + v7[8]) = 0;
  v9 = (_QWORD *)swift_task_alloc(dword_100552D94);
  *(_QWORD *)(v0 + 320) = v9;
  *v9 = v0;
  v9[1] = sub_100200274;
  return sub_100214A74(v0 + 160, *(_QWORD *)(v0 + 248), 5.0);
}

uint64_t sub_100200274(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 320);
  *(_QWORD *)(*(_QWORD *)v2 + 328) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_10000E750(v4[31], type metadata accessor for Player.CommandOptions);
    v6 = v4[34];
    v7 = v4[35];
    v8 = sub_100200668;
  }
  else
  {
    v9 = v4[31];

    sub_10000E750(v9, type metadata accessor for Player.CommandOptions);
    sub_100011758(v4 + 20);
    v6 = v4[34];
    v7 = v4[35];
    v8 = sub_100200318;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100200318()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 264));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Auto-Sing] Vocals command performed", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = *(_QWORD *)(v0 + 288);
  v6 = (_QWORD *)(*(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v7 = v6[3];
  v8 = v6[4];
  sub_10000D900(v6, v7);
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v0 + 16, v7, v8);
  swift_release(v5);
  sub_10020BAA8((_QWORD *)(v0 + 16));
  v9 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100200430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  swift_release(*(_QWORD *)(v0 + 264));
  sub_100011758((_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 304);
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v2 = type metadata accessor for Logger(0);
  sub_10000D78C(v2, (uint64_t)static Logger.playbackController);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 224) = v1;
    swift_errorRetain(v1);
    v8 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v9 = (char *)String.init<A>(describing:)(v0 + 224, v8);
    v11 = v10;
    *(_QWORD *)(v6 + 4) = sub_1000BA30C(v9, v10, &v18);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Auto-Sing] Failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v12 = *(_QWORD *)(v0 + 288);
  v13 = (_QWORD *)(*(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v14 = v13[3];
  v15 = v13[4];
  sub_10000D900(v13, v14);
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(v0 + 16, v14, v15);
  swift_release(v12);
  sub_10020BAA8((_QWORD *)(v0 + 16));
  v16 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100200668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  swift_release(*(_QWORD *)(v0 + 264));
  sub_100011758((_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 328);
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v2 = type metadata accessor for Logger(0);
  sub_10000D78C(v2, (uint64_t)static Logger.playbackController);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 224) = v1;
    swift_errorRetain(v1);
    v8 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v9 = (char *)String.init<A>(describing:)(v0 + 224, v8);
    v11 = v10;
    *(_QWORD *)(v6 + 4) = sub_1000BA30C(v9, v10, &v18);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Auto-Sing] Failed with error=%{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v12 = *(_QWORD *)(v0 + 288);
  v13 = (_QWORD *)(*(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v14 = v13[3];
  v15 = v13[4];
  sub_10000D900(v13, v14);
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(v0 + 16, v14, v15);
  swift_release(v12);
  sub_10020BAA8((_QWORD *)(v0 + 16));
  v16 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Logger.siriIntents.unsafeMutableAddressor()
{
  return sub_100190E3C(&qword_10054BCB8, (uint64_t)static Logger.siriIntents, (uint64_t)sub_10020AA3C);
}

BOOL PlaybackController.canPerform(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  _BYTE v10[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v1 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player, v10, 0, 0);
  v4 = *v3;
  if (v4)
  {
    v5 = a1[3];
    v6 = a1[4];
    v7 = sub_10000D900(a1, v5);
    swift_retain(v4);
    v8 = sub_100222744((uint64_t)v7, v4, v5, v6);
    swift_release(v4);
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t PlaybackController.canPerform(anyOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v14[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player, v14, 0, 0);
  v6 = *v5;
  if (!v6)
    goto LABEL_13;
  swift_retain(v6);
  v7 = sub_100218AB0(a1, a2);
  if (!v7)
  {
    swift_release(v6);
LABEL_13:
    v12 = 0;
    return v12 & 1;
  }
  v8 = (void *)v7;
  v9 = swift_conformsToProtocol2(a1, &protocol descriptor for _PlayerCommand);
  if (v9)
    v10 = v9;
  else
    v10 = 0;
  if (v9)
    v11 = a1;
  else
    v11 = 0;
  if (!v11)
  {
    swift_release(v6);

    goto LABEL_13;
  }
  v12 = (*(uint64_t (**)(void *))(v10 + 16))(v8);
  swift_release(v6);

  return v12 & 1;
}

uint64_t PlaybackController.performWhenAvailable(_:options:timeout:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 64) = v3;
  *(double *)(v4 + 56) = a3;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a2;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 72) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 80) = v6;
  *(_QWORD *)(v4 + 88) = v7;
  return swift_task_switch(sub_100200AA8, v6, v7);
}

uint64_t sub_100200AA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v6;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 96) = v2;
  if (v2)
  {
    v3 = dword_100552D94;
    swift_retain(v2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 104) = v4;
    *v4 = v0;
    v4[1] = sub_100200B54;
    return sub_100214A74(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(double *)(v0 + 56));
  }
  else
  {
    v6 = swift_release(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v6);
  }
}

uint64_t sub_100200B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  *(_QWORD *)(*(_QWORD *)v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[10];
    v7 = v4[11];
    v8 = sub_100200C08;
  }
  else
  {
    swift_release(v4[12]);
    v4[15] = a1;
    v6 = v4[10];
    v7 = v4[11];
    v8 = sub_100200BD0;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100200BD0()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 120), v1);
}

uint64_t sub_100200C08()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 72));
  v2 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_100200CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = OBJC_IVAR____TtC9MusicCore18PlaybackController_player;
  *(_QWORD *)(v0 + 208) = OBJC_IVAR____TtC9MusicCore18PlaybackController_player;
  v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess(v1 + v2, v0 + 80, 0, 0);
  v4 = *v3;
  *(_QWORD *)(v0 + 216) = v4;
  if (v4)
  {
    v6 = *(int **)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 136);
    v7 = *(void **)(v0 + 144);
    swift_retain(v4);
    _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v9 = (_QWORD *)(v5 + v6[5]);
    *v9 = 0;
    v9[1] = 0;
    v10 = v6[6];
    *(_QWORD *)(v5 + v10) = 0;
    v11 = v6[7];
    *(_BYTE *)(v5 + v11) = 0;
    v12 = v6[8];
    *(_QWORD *)(v5 + v10) = v8;
    *(_BYTE *)(v5 + v11) = 1;
    *(_QWORD *)(v5 + v12) = v7;
    v13 = dword_100552DA4;
    v14 = v7;
    v15 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 224) = v15;
    *v15 = v0;
    v15[1] = sub_100200DF8;
    return sub_10021639C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 176));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100200DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  *(_QWORD *)(*(_QWORD *)v2 + 232) = v1;
  swift_task_dealloc(v5);
  v6 = v4[27];
  v7 = v4[22];
  if (v1)
  {
    sub_10000E750(v7, type metadata accessor for Player.CommandOptions);
    swift_release(v6);
    v8 = v4[24];
    v9 = v4[25];
    v10 = sub_100201278;
  }
  else
  {
    v4[30] = a1;
    sub_10000E750(v7, type metadata accessor for Player.CommandOptions);
    swift_release(v6);
    v8 = v4[24];
    v9 = v4[25];
    v10 = sub_100200E9C;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100200E9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  id v17;
  id v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 184));
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(void **)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v1);
    goto LABEL_18;
  }
  if (v1 >= 0)
    v33 = v1 & 0xFFFFFFFFFFFFFF8;
  else
    v33 = v1;
  swift_bridgeObjectRetain();
  v2 = (void *)_CocoaArrayWrapper.endIndex.getter(v33);
  if (!v2)
    goto LABEL_17;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    v3 = *(id *)(v1 + 32);
  }
  v2 = v3;
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "dialog");
  if (!v4)
  {

LABEL_18:
    sub_10020BA7C(0, 0);
    goto LABEL_19;
  }
  v38 = (uint64_t *)(v0 + 16);
  v39 = v4;
  if (qword_10054BCA8 != -1)
LABEL_22:
    swift_once(&qword_10054BCA8, sub_10020A920);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = type metadata accessor for Logger(0);
  sub_10000D78C(v6, (uint64_t)static Logger.playbackController);
  swift_bridgeObjectRetain_n(v5, 2);
  v7 = v2;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 128);
  v37 = v7;
  if (v10)
  {
    v12 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v40 = v35;
    *(_DWORD *)v12 = 136446466;
    swift_bridgeObjectRetain();
    v13 = sub_10000B4C8(&qword_100552560);
    v14 = (char *)Array.description.getter(v11, v13);
    v16 = v15;
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v12 + 4) = sub_1000BA30C(v14, v16, &v40);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v11, 2);
    *(_WORD *)(v12 + 12) = 2082;
    v17 = v7;
    v18 = objc_msgSend(v17, "description");
    v19 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    *(_QWORD *)(v12 + 14) = sub_1000BA30C(v19, v21, &v40);
    swift_bridgeObjectRelease(v21);

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "⤵️ 🛑 Commands %{public}s — Perform error -> Presenting dialog for status=%{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v11, 2);

  }
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(void **)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 160);
  v25 = (_QWORD *)(v24 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v26 = *(_QWORD *)(v24 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v27 = *(_QWORD *)(v24 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  sub_10000D900((_QWORD *)(v24 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v26);
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 40);
  v36 = v23;
  v29 = v28(v26, v27);
  v30 = *(_QWORD *)(v24 + v22);
  v32 = v25[3];
  v31 = v25[4];
  sub_10000D900(v25, v32);
  swift_retain(v30);
  MPCPlayerCommandDialog.alert(context:completion:)(v23, v29, v30, 0, 0, v38);
  *(_BYTE *)(v0 + 72) = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 8))(v38, v32, v31);
  sub_10020BAA8(v38);

  swift_release(v29);
  swift_release(v30);

LABEL_19:
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100201278()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  id v29;
  id v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v53;
  id v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  id v58;
  uint64_t v59[2];

  v3 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 184));
  *(_QWORD *)(v0 + 120) = v3;
  v4 = (_QWORD *)(v0 + 120);
  swift_errorRetain(v3);
  v5 = sub_10000B4C8((uint64_t *)&unk_100550630);
  if ((swift_dynamicCast(v0 + 104, v0 + 120, v5, &type metadata for Player.PlaybackError, 0) & 1) == 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
LABEL_29:
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_errorRelease(*(_QWORD *)(v0 + 232));
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v8 = (void *)((unint64_t)v6 >> 62);
  if (!((unint64_t)v6 >> 62))
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_4;
LABEL_27:
    swift_bridgeObjectRelease(v6);
    goto LABEL_28;
  }
  if (v6 < 0)
    v48 = *(_QWORD *)(v0 + 112);
  else
    v48 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter(v48))
    goto LABEL_27;
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }
    v10 = *(id *)(v6 + 32);
  }
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v2 = &selRef_presentationControllerDidDismiss_;
  v12 = objc_msgSend(v11, "dialog");

  if (!v12)
  {
LABEL_28:
    v49 = sub_10020B4A4();
    v50 = swift_allocError(&type metadata for Player.PlaybackError, v49, 0, 0);
    *v51 = v7;
    v51[1] = v6;
    swift_willThrow(v50);
    swift_errorRelease(*v4);
    goto LABEL_29;
  }

  v13 = *v4;
  swift_bridgeObjectRetain();
  swift_errorRelease(v13);
  v1 = v6 & 0xFFFFFFFFFFFFFF8;
  if (!v8)
  {
    v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_10;
LABEL_36:
    swift_bridgeObjectRelease(v6);
    goto LABEL_37;
  }
LABEL_32:
  if (v6 >= 0)
    v53 = v1;
  else
    v53 = v6;
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter(v53))
    goto LABEL_36;
LABEL_10:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else
  {
    if (!*(_QWORD *)(v1 + 16))
    {
      __break(1u);
      goto LABEL_41;
    }
    v15 = *(id *)(v6 + 32);
  }
  v8 = v15;
  swift_bridgeObjectRelease(v6);
  v58 = objc_msgSend(v8, v2[195]);
  if (!v58)
  {

LABEL_37:
    sub_10020BA7C(v7, v6);
    goto LABEL_38;
  }
  v55 = (uint64_t *)(v0 + 16);
  if (qword_10054BCA8 != -1)
LABEL_41:
    swift_once(&qword_10054BCA8, sub_10020A920);
  v16 = *(_QWORD *)(v0 + 128);
  v17 = type metadata accessor for Logger(0);
  sub_10000D78C(v17, (uint64_t)static Logger.playbackController);
  swift_bridgeObjectRetain_n(v16, 2);
  v18 = v8;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(_QWORD *)(v0 + 128);
  v56 = v18;
  v57 = v7;
  if (v21)
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v59[0] = v24;
    *(_DWORD *)v23 = 136446466;
    swift_bridgeObjectRetain();
    v25 = sub_10000B4C8(&qword_100552560);
    v26 = (char *)Array.description.getter(v22, v25);
    v28 = v27;
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)(v23 + 4) = sub_1000BA30C(v26, v28, v59);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease_n(v22, 2);
    *(_WORD *)(v23 + 12) = 2082;
    v29 = v18;
    v30 = objc_msgSend(v29, "description");
    v31 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    *(_QWORD *)(v23 + 14) = sub_1000BA30C(v31, v33, v59);
    swift_bridgeObjectRelease(v33);

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "⤵️ 🛑 Commands %{public}s — Perform error -> Presenting dialog for status=%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v22, 2);

  }
  v34 = *(_QWORD *)(v0 + 208);
  v35 = *(void **)(v0 + 152);
  v36 = *(_QWORD *)(v0 + 160);
  v37 = (_QWORD *)(v36 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v38 = *(_QWORD *)(v36 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v39 = *(_QWORD *)(v36 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  sub_10000D900((_QWORD *)(v36 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v38);
  v40 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 40);
  v54 = v35;
  v41 = v40(v38, v39);
  v42 = *(_QWORD *)(v36 + v34);
  v43 = v37[3];
  v44 = v37[4];
  sub_10000D900(v37, v43);
  swift_retain(v42);
  MPCPlayerCommandDialog.alert(context:completion:)(v35, v41, v42, 0, 0, v55);
  *(_BYTE *)(v0 + 72) = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v44 + 8))(v55, v43, v44);
  sub_10020BAA8(v55);
  if (v57)
  {
    v45 = sub_10020B4A4();
    swift_allocError(&type metadata for Player.PlaybackError, v45, 0, 0);
    *v46 = v57;
    v46[1] = v6;
    swift_errorRetain(v57);
    v47 = swift_bridgeObjectRetain();
    swift_willThrow(v47);

    swift_errorRelease(v57);
    swift_release(v41);
    swift_release(v42);

    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_29;
  }

  swift_release(v41);
  swift_release(v42);

LABEL_38:
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_100201854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[40] = a3;
  v4[41] = v3;
  v4[38] = a1;
  v4[39] = a2;
  v5 = type metadata accessor for Locale(0);
  v4[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  v4[43] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[44] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[45] = swift_task_alloc(v8);
  v4[46] = swift_task_alloc(v8);
  v9 = type metadata accessor for MusicPlaybackIntentDescriptor(0);
  v4[47] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[48] = v10;
  v4[49] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlaybackIntentDescriptor.IntentType(0);
  v4[50] = v11;
  v4[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MainActor(0);
  v4[52] = v12;
  v4[53] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v4[54] = v13;
  v4[55] = v14;
  return swift_task_switch(sub_10020196C, v13, v14);
}

uint64_t sub_10020196C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = type metadata accessor for PlaybackIntentDescriptor(0);
  sub_10020DB38(v1 + *(int *)(v2 + 28), v0 + 160);
  sub_10020DB38(v0 + 160, v0 + 240);
  v3 = *(_QWORD *)(v0 + 264);
  if (!v3)
  {
    sub_100011694(v0 + 240, &qword_1005528B0);
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_QWORD *)(v0 + 152) = 0;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(v0 + 272);
  sub_10000D900((_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 264));
  sub_100203FDC(v3, v4, v0 + 120);
  sub_100011758((_QWORD *)(v0 + 240));
  if (!*(_QWORD *)(v0 + 144))
  {
LABEL_12:
    sub_100011694(v0 + 120, &qword_1005528B0);
    goto LABEL_13;
  }
  sub_1000B47A8((__int128 *)(v0 + 120), v0 + 80);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = sub_10000D900((_QWORD *)(v0 + 80), v5);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  if (qword_10054BDB0 != -1)
    swift_once(&qword_10054BDB0, sub_1002766A0);
  v8 = *((_QWORD *)off_100555918 + 2);
  if (!v8)
  {
LABEL_9:
    v10 = *(_QWORD *)(v0 + 400);
    v11 = *(_QWORD *)(v0 + 408);
    sub_10000D964(*(_QWORD *)(v0 + 304), v11, type metadata accessor for PlaybackIntentDescriptor.IntentType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v10);
    v13 = *(uint64_t **)(v0 + 408);
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_QWORD *)(v0 + 384);
      v14 = *(_QWORD *)(v0 + 392);
      v16 = *(_QWORD *)(v0 + 376);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v15 + 32))(v14, v13, v16);
      v18 = MusicPlaybackIntentDescriptor.playbackIntent.getter(v17);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    else
    {
      v18 = *v13;
    }
    *(_QWORD *)(v0 + 448) = v18;
    v47 = (_QWORD *)swift_task_alloc(dword_100552534);
    *(_QWORD *)(v0 + 456) = v47;
    *v47 = v0;
    v47[1] = sub_100201DA4;
    return sub_1001F9BEC(v18, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
  }
  v9 = (_QWORD *)((char *)off_100555918 + 32);
  while (*v9 != DynamicType)
  {
    v9 += 2;
    if (!--v8)
      goto LABEL_9;
  }
  sub_100011758((_QWORD *)(v0 + 80));
LABEL_13:
  if (qword_10054BDB8 != -1)
    swift_once(&qword_10054BDB8, sub_100276CE0);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000D78C(v19, (uint64_t)static Logger.sharedListening);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Offering SharePlay options (Play Now/Next/Last)", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  sub_10020DB38(v0 + 160, v0 + 200);
  v24 = *(_QWORD *)(v0 + 224);
  if (v24)
  {
    v25 = *(_QWORD *)(v0 + 232);
    sub_10000D900((_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224));
    v26 = sub_1002042FC(v24, v25);
    v28 = v27;
    v29 = sub_100011758((_QWORD *)(v0 + 200));
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 360);
    v31 = *(_QWORD *)(v0 + 368);
    v32 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 352);
    sub_100011694(v0 + 200, &qword_1005528B0);
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x800000010044CB30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v30, v31, v32);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v34 = *(_QWORD *)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 368);
    v36 = *(_QWORD *)(v0 + 344);
    v37 = *(_QWORD *)(v0 + 352);
    v38 = *(_QWORD *)(v0 + 336);
    v39 = qword_100561480;
    static Locale.current.getter((id)qword_100561480);
    v26 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v39, v38, 0, 0, 256);
    v28 = v40;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  }
  *(_QWORD *)(v0 + 472) = v28;
  *(_QWORD *)(v0 + 480) = v26;
  v41 = static MainActor.shared.getter(v29);
  *(_QWORD *)(v0 + 488) = v41;
  if (v41)
  {
    ObjectType = swift_getObjectType();
    v43 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, &protocol witness table for MainActor);
    v45 = v44;
  }
  else
  {
    v43 = 0;
    v45 = 0;
  }
  return swift_task_switch(sub_100201EAC, v43, v45);
}

uint64_t sub_100201DA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(void **)(*v1 + 448);
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);

  if (v0)
    v5 = sub_10020203C;
  else
    v5 = sub_100201E10;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 432), *(_QWORD *)(v2 + 440));
}

uint64_t sub_100201E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 424));
  sub_100011758((_QWORD *)(v0 + 80));
  sub_100011694(v0 + 160, &qword_1005528B0);
  v1 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v0 + 8))(0, 0, 1);
}

uint64_t sub_100201EAC()
{
  _QWORD *v0;
  uint64_t v1;
  ValueMetadata *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (ValueMetadata *)v0[59];
  v1 = v0[60];
  v3 = v0[41];
  v4 = v0[38];
  v0[7] = v0 + 35;
  v0[2] = v0;
  v0[3] = sub_100201F28;
  v5 = swift_continuation_init(v0 + 2, 0);
  sub_100204C04(v5, v4, v3, v1, v2);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100201F28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = *v0 + 280;
  v3 = *(_QWORD *)(*v0 + 488);
  v4 = *(_QWORD *)(*v0 + 472);
  *(_OWORD *)(v1 + 496) = *(_OWORD *)v2;
  *(_BYTE *)(v1 + 297) = *(_BYTE *)(v2 + 16);
  swift_release(v3);
  swift_bridgeObjectRelease(v4);
  return swift_task_switch(sub_100201F94, *(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 440));
}

uint64_t sub_100201F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 424));
  sub_100011694(v0 + 160, &qword_1005528B0);
  v1 = *(unsigned __int8 *)(v0 + 297);
  v3 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v3, v2, v1);
}

uint64_t sub_10020203C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 424));
  sub_100011758((_QWORD *)(v0 + 80));
  sub_100011694(v0 + 160, &qword_1005528B0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1002020E0(id a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *result;
  id v10;
  _QWORD *v11;
  uint64_t DynamicType;
  _UNKNOWN **v13;
  id v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  id v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _UNKNOWN **v25;
  id v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t inited;
  _QWORD *v35;
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;
  void *v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  BOOL v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  void *v51;
  BOOL v52;
  unint64_t v53;
  id v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  BOOL v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  ValueMetadata *v73;
  _UNKNOWN **v74;
  _QWORD v75[5];
  uint64_t v76;
  __int128 v77;
  ValueMetadata *v78;
  _UNKNOWN **v79;
  _QWORD *v80;
  char v81[32];

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v7, v81, 0, 0);
  v8 = *v7;
  result = _swiftEmptyArrayStorage;
  if (*v7)
  {
    v80 = _swiftEmptyArrayStorage;
    if ((a2 & 2) != 0)
    {
      v78 = &type metadata for Player.ReplaceCommand;
      v79 = &protocol witness table for Player.ReplaceCommand;
      *(_QWORD *)&v77 = a1;
      *((_QWORD *)&v77 + 1) = a3;
      v11 = sub_10000D900(&v77, (uint64_t)&type metadata for Player.ReplaceCommand);
      DynamicType = swift_getDynamicType(v11, &type metadata for Player.ReplaceCommand, 1);
      v13 = v79;
      v14 = a1;
      swift_retain(v8);
      v15 = sub_100218AB0(DynamicType, (uint64_t)v13);
      if (v15)
      {
        v16 = (void *)v15;
        v17 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v77);

        sub_100011758(&v77);
        if (v17)
        {
          v18 = v14;
          v19 = _swiftEmptyArrayStorage;
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            v19 = sub_1000DEF84(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
          v21 = v19[2];
          v20 = v19[3];
          v22 = v21 + 1;
          if (v21 >= v20 >> 1)
            v19 = sub_1000DEF84((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
          v78 = &type metadata for Player.ReplaceCommand;
          v79 = &protocol witness table for Player.ReplaceCommand;
          *(_QWORD *)&v77 = v18;
          *((_QWORD *)&v77 + 1) = a3;
          goto LABEL_36;
        }
      }
      else
      {
        sub_100011758(&v77);

      }
    }
    else
    {
      v10 = a1;
      swift_retain(v8);
    }
    if ((a2 & 1) == 0)
    {
      if ((a2 & 4) != 0)
      {
        v78 = &type metadata for Player.InsertCommand;
        v79 = &protocol witness table for Player.InsertCommand;
        v77 = (unint64_t)a1;
        v23 = sub_10000D900(&v77, (uint64_t)&type metadata for Player.InsertCommand);
        v24 = swift_getDynamicType(v23, &type metadata for Player.InsertCommand, 1);
        v25 = v79;
        v26 = a1;
        v27 = sub_100218AB0(v24, (uint64_t)v25);
        if (v27)
        {
          v28 = (void *)v27;
          v29 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v77);

          sub_100011758(&v77);
          if (v29)
          {
            v18 = v26;
            v19 = _swiftEmptyArrayStorage;
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              v19 = sub_1000DEF84(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
            v31 = v19[2];
            v30 = v19[3];
            if (v31 >= v30 >> 1)
              v19 = sub_1000DEF84((_QWORD *)(v30 > 1), v31 + 1, 1, v19);
            v78 = &type metadata for Player.InsertCommand;
            v79 = &protocol witness table for Player.InsertCommand;
            v77 = (unint64_t)v18;
            v19[2] = v31 + 1;
            v32 = &v19[5 * v31];
            goto LABEL_37;
          }
        }
        else
        {
          sub_100011758(&v77);

        }
      }
      if ((a2 & 8) != 0)
      {
        v78 = &type metadata for Player.InsertCommand;
        v79 = &protocol witness table for Player.InsertCommand;
        *(_QWORD *)&v77 = a1;
        *((_QWORD *)&v77 + 1) = 1;
        v47 = sub_10000D900(&v77, (uint64_t)&type metadata for Player.InsertCommand);
        v48 = swift_getDynamicType(v47, &type metadata for Player.InsertCommand, 1);
        v49 = v79;
        a1 = a1;
        v50 = sub_100218AB0(v48, (uint64_t)v49);
        if (v50)
        {
          v51 = (void *)v50;
          v52 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v77);

          sub_100011758(&v77);
          if (v52)
          {
            v18 = a1;
            v19 = _swiftEmptyArrayStorage;
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              v19 = sub_1000DEF84(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
            v21 = v19[2];
            v53 = v19[3];
            v22 = v21 + 1;
            if (v21 >= v53 >> 1)
              v19 = sub_1000DEF84((_QWORD *)(v53 > 1), v21 + 1, 1, v19);
            v78 = &type metadata for Player.InsertCommand;
            v79 = &protocol witness table for Player.InsertCommand;
            *(_QWORD *)&v77 = v18;
            *((_QWORD *)&v77 + 1) = 1;
LABEL_36:
            v19[2] = v22;
            v32 = &v19[5 * v21];
LABEL_37:
            sub_1000B47A8(&v77, (uint64_t)(v32 + 4));
            swift_release(v8);

            return v19;
          }
        }
        else
        {
          sub_100011758(&v77);

        }
      }
LABEL_53:
      swift_release(v8);

      return v80;
    }
    v33 = sub_10000B4C8((uint64_t *)&unk_100553530);
    inited = swift_initStackObject(v33, &v76);
    *(_OWORD *)(inited + 16) = xmmword_100424BA0;
    *(_QWORD *)(inited + 56) = &type metadata for Player.InsertCommand;
    *(_QWORD *)(inited + 64) = &protocol witness table for Player.InsertCommand;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = 0;
    *(_QWORD *)(inited + 96) = &type metadata for Player.ChangeCommand;
    *(_QWORD *)(inited + 104) = &protocol witness table for Player.ChangeCommand;
    *(_BYTE *)(inited + 72) = 1;
    v78 = &type metadata for Player.InsertCommand;
    v79 = &protocol witness table for Player.InsertCommand;
    v77 = (unint64_t)a1;
    v35 = sub_10000D900(&v77, (uint64_t)&type metadata for Player.InsertCommand);
    v36 = swift_getDynamicType(v35, &type metadata for Player.InsertCommand, 1);
    v37 = v79;
    a1 = a1;
    v38 = sub_100218AB0(v36, (uint64_t)v37);
    if (v38)
    {
      v39 = (void *)v38;
      v40 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v77);

      sub_100011758(&v77);
      if (v40)
      {
        v78 = &type metadata for Player.ChangeCommand;
        v79 = &protocol witness table for Player.ChangeCommand;
        LOBYTE(v77) = 1;
        v41 = sub_10000D900(&v77, (uint64_t)&type metadata for Player.ChangeCommand);
        v42 = swift_getDynamicType(v41, &type metadata for Player.ChangeCommand, 1);
        v43 = sub_100218AB0(v42, (uint64_t)v79);
        if (v43)
        {
          v44 = (void *)v43;
          v45 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v77);

          sub_100011758(&v77);
          if (v45)
          {
            sub_10012B034((_QWORD *)inited);
            v78 = &type metadata for Player.ReplaceCommand;
            v79 = &protocol witness table for Player.ReplaceCommand;
            *(_QWORD *)&v77 = a1;
            *((_QWORD *)&v77 + 1) = a3;
            v46 = a1;
            goto LABEL_45;
          }
        }
        else
        {
          sub_100011758(&v77);
        }
      }
    }
    else
    {
      sub_100011758(&v77);

    }
    swift_bridgeObjectRelease(inited);
    v78 = &type metadata for Player.ReplaceCommand;
    v79 = &protocol witness table for Player.ReplaceCommand;
    *(_QWORD *)&v77 = a1;
    *((_QWORD *)&v77 + 1) = a3;
    sub_1000C53BC((uint64_t)&v77, (uint64_t)v75);
    v54 = a1;
    v55 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    {
      v55 = sub_1000DEF84(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
      v80 = v55;
    }
    v57 = v55[2];
    v56 = v55[3];
    if (v57 >= v56 >> 1)
    {
      v55 = sub_1000DEF84((_QWORD *)(v56 > 1), v57 + 1, 1, v55);
      v80 = v55;
    }
    v58 = sub_10020DE90((uint64_t)v75, v75[3]);
    __chkstk_darwin(v58);
    v60 = (uint64_t *)((char *)&v72 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v61 + 16))(v60);
    v62 = *v60;
    v63 = v60[1];
    v73 = &type metadata for Player.ReplaceCommand;
    v74 = &protocol witness table for Player.ReplaceCommand;
    *(_QWORD *)&v72 = v62;
    *((_QWORD *)&v72 + 1) = v63;
    v55[2] = v57 + 1;
    sub_1000B47A8(&v72, (uint64_t)&v55[5 * v57 + 4]);
    sub_100011758(v75);
LABEL_45:
    sub_100011758(&v77);
    v78 = &type metadata for Player.PlaybackCommand;
    v79 = &protocol witness table for Player.PlaybackCommand;
    LOBYTE(v77) = 0;
    v64 = sub_10000D900(&v77, (uint64_t)&type metadata for Player.PlaybackCommand);
    v65 = swift_getDynamicType(v64, &type metadata for Player.PlaybackCommand, 1);
    v66 = sub_100218AB0(v65, (uint64_t)v79);
    if (v66)
    {
      v67 = (void *)v66;
      v68 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v77);

      sub_100011758(&v77);
      if (v68)
      {
        v69 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
          v69 = sub_1000DEF84(0, v69[2] + 1, 1, v69);
        v71 = v69[2];
        v70 = v69[3];
        if (v71 >= v70 >> 1)
          v69 = sub_1000DEF84((_QWORD *)(v70 > 1), v71 + 1, 1, v69);
        v78 = &type metadata for Player.PlaybackCommand;
        v79 = &protocol witness table for Player.PlaybackCommand;
        LOBYTE(v77) = 0;
        v69[2] = v71 + 1;
        sub_1000B47A8(&v77, (uint64_t)&v69[5 * v71 + 4]);
        swift_release(v8);

        return v69;
      }
    }
    else
    {
      sub_100011758(&v77);
    }
    goto LABEL_53;
  }
  return result;
}

_QWORD *sub_100202894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[4];
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v60 = (char *)a2;
  v56 = a1;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v49 - v14;
  String.LocalizationValue.init(stringLiteral:)(1885693259, 0xE400000000000000);
  v62 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v62(v13, v15, v9);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v16 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v57 = (_QWORD *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v16, v8, 0, 0, 256);
  v65 = v17;
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v15, v9);
  v59 = swift_allocObject(&unk_10050EC80, 24, 7);
  v19 = v56;
  *(_QWORD *)(v59 + 16) = v56;
  v20 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v55 = UUID.uuidString.getter(v20);
  v61 = v21;
  v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v5, v2);
  String.LocalizationValue.init(stringLiteral:)(0x7261656C43, 0xE500000000000000);
  v62(v13, v15, v9);
  v23 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v54 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v23, v8, 0, 0, 256);
  v64 = v24;
  v18(v15, v9);
  v58 = swift_allocObject(&unk_10050ECA8, 24, 7);
  *(_QWORD *)(v58 + 16) = v19;
  v25 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v53 = UUID.uuidString.getter(v25);
  v63 = v26;
  v22(v5, v2);
  v27 = v2;
  if (qword_10054C290 != -1)
    swift_once(&qword_10054C290, sub_10028CD9C);
  v28 = qword_100562370;
  v52 = static String.cancelButtonTitle;
  v51 = swift_allocObject(&unk_10050ECD0, 24, 7);
  *(_QWORD *)(v51 + 16) = v19;
  swift_bridgeObjectRetain();
  v29 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v56 = UUID.uuidString.getter(v29);
  v31 = v30;
  v22(v5, v27);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000057, 0x800000010044CCB0);
  v62(v13, v15, v9);
  v32 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v62 = (void (*)(char *, char *, uint64_t))String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v32, v8, 0, 0, 256);
  v49 = v33;
  v18(v15, v9);
  v34 = sub_10000B4C8(&qword_100552680);
  v35 = swift_allocObject(v34, 200, 7);
  *(_OWORD *)(v35 + 16) = xmmword_100427490;
  v36 = v61;
  *(_QWORD *)(v35 + 32) = v55;
  *(_QWORD *)(v35 + 40) = v36;
  v37 = v65;
  *(_QWORD *)(v35 + 48) = v57;
  *(_QWORD *)(v35 + 56) = v37;
  *(_BYTE *)(v35 + 64) = 2;
  v39 = v58;
  v38 = v59;
  *(_QWORD *)(v35 + 72) = &unk_100552918;
  *(_QWORD *)(v35 + 80) = v38;
  v40 = v63;
  *(_QWORD *)(v35 + 88) = v53;
  *(_QWORD *)(v35 + 96) = v40;
  v41 = v64;
  *(_QWORD *)(v35 + 104) = v54;
  *(_QWORD *)(v35 + 112) = v41;
  *(_BYTE *)(v35 + 120) = 2;
  *(_QWORD *)(v35 + 128) = &unk_100552928;
  *(_QWORD *)(v35 + 136) = v39;
  *(_QWORD *)(v35 + 144) = v56;
  *(_QWORD *)(v35 + 152) = v31;
  *(_QWORD *)(v35 + 160) = v52;
  *(_QWORD *)(v35 + 168) = v28;
  v50 = v28;
  *(_BYTE *)(v35 + 176) = 2;
  v42 = v51;
  *(_QWORD *)(v35 + 184) = &unk_100552938;
  *(_QWORD *)(v35 + 192) = v42;
  v43 = &v60[OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator];
  v44 = *(_QWORD *)&v60[OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32];
  v60 = *(char **)&v60[OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24];
  v57 = sub_10000D900(v43, (uint64_t)v60);
  v66[0] = 0;
  v66[1] = 0;
  v45 = v49;
  v66[2] = v62;
  v66[3] = v49;
  v67 = 0;
  v68 = v35;
  v69 = 0;
  v70 = 0;
  v62 = *(void (**)(char *, char *, uint64_t))(v44 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = v65;
  swift_bridgeObjectRetain();
  swift_retain(v38);
  swift_bridgeObjectRetain();
  v47 = v64;
  swift_bridgeObjectRetain();
  swift_retain(v39);
  swift_bridgeObjectRetain();
  swift_retain(v42);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62((char *)v66, v60, v44);
  swift_release(v38);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v61);
  swift_release(v39);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v63);
  swift_release(v42);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(0);
  return sub_10020BAA8(v66);
}

uint64_t sub_100202E28(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch(sub_100202E40, 0, 0);
}

uint64_t sub_100202E40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = 2;
  *(_BYTE *)(v0 + 24) = 0;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552940);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100202E98(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch(sub_100202EB0, 0, 0);
}

uint64_t sub_100202EB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = 1;
  *(_BYTE *)(v0 + 24) = 0;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552940);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100202F08(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch(sub_100202F20, 0, 0);
}

uint64_t sub_100202F20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552940);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100202F78(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v18[-v10];
  if (!a1)
    goto LABEL_6;
  if (objc_msgSend(a1, "isHomePodRoute"))
  {
    v12 = 0x800000010044CE30;
    v13 = 0xD000000000000056;
    goto LABEL_8;
  }
  if (objc_msgSend(a1, "isAppleTVRoute"))
  {
    v13 = 0xD000000000000057;
    v14 = "If you AirPlay this, Apple TV will stop playing when your (device) is no longer nearby.";
  }
  else
  {
LABEL_6:
    v13 = 0xD00000000000005ALL;
    v14 = "If you AirPlay this, this device will stop playing when your (device) is no longer nearby.";
  }
  v12 = (unint64_t)(v14 - 32) | 0x8000000000000000;
LABEL_8:
  String.LocalizationValue.init(stringLiteral:)(v13, v12);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v15 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v16 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v15, v4, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  return v16;
}

_QWORD *sub_100203150(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[4];
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v55 = a2;
  v57 = (_QWORD *)type metadata accessor for UUID(0);
  v3 = *(v57 - 1);
  __chkstk_darwin(v57);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v44 - v14;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010044CE90);
  v16 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v16(v13, v15, v9);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v17 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v52 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v17, v8, 0, 0, 256);
  v54 = v18;
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  v53 = swift_allocObject(&unk_10050ED48, 24, 7);
  *(_QWORD *)(v53 + 16) = a1;
  v20 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v51 = UUID.uuidString.getter(v20);
  v58 = v21;
  v22 = a1;
  v23 = *(void (**)(char *, _QWORD *))(v3 + 8);
  v23(v5, v57);
  if (qword_10054C290 != -1)
    swift_once(&qword_10054C290, sub_10028CD9C);
  v50 = static String.cancelButtonTitle;
  v56 = qword_100562370;
  v49 = swift_allocObject(&unk_10050ED70, 24, 7);
  *(_QWORD *)(v49 + 16) = v22;
  swift_bridgeObjectRetain();
  v24 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v48 = UUID.uuidString.getter(v24);
  v26 = v25;
  v23(v5, v57);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x800000010044CAC0);
  v16(v13, v15, v9);
  v27 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v57 = (_QWORD *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v27, v8, 0, 0, 256);
  v47 = v28;
  v19(v15, v9);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000046, 0x800000010044CAE0);
  v16(v13, v15, v9);
  v29 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v46 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v29, v8, 0, 0, 256);
  v31 = v30;
  v19(v15, v9);
  v32 = sub_10000B4C8(&qword_100552680);
  v33 = swift_allocObject(v32, 144, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100424BA0;
  v34 = v58;
  *(_QWORD *)(v33 + 32) = v51;
  *(_QWORD *)(v33 + 40) = v34;
  v35 = v53;
  v36 = v54;
  *(_QWORD *)(v33 + 48) = v52;
  *(_QWORD *)(v33 + 56) = v36;
  *(_BYTE *)(v33 + 64) = 2;
  *(_QWORD *)(v33 + 72) = &unk_100552978;
  *(_QWORD *)(v33 + 80) = v35;
  *(_QWORD *)(v33 + 88) = v48;
  *(_QWORD *)(v33 + 96) = v26;
  v45 = v26;
  v37 = v49;
  v38 = v56;
  *(_QWORD *)(v33 + 104) = v50;
  *(_QWORD *)(v33 + 112) = v38;
  *(_BYTE *)(v33 + 120) = 2;
  *(_QWORD *)(v33 + 128) = &unk_100552988;
  *(_QWORD *)(v33 + 136) = v37;
  v39 = *(_QWORD *)((char *)v55 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v40 = *(_QWORD *)((char *)v55 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  v55 = sub_10000D900((_QWORD *)((char *)v55 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v39);
  v41 = v47;
  v59[0] = v57;
  v59[1] = v47;
  v59[2] = v46;
  v59[3] = v31;
  v60 = 0;
  v61 = v33;
  v62 = 0;
  v63 = 0;
  v57 = *(_QWORD **)(v40 + 8);
  swift_bridgeObjectRetain();
  v42 = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain(v35);
  swift_bridgeObjectRetain();
  swift_retain(v37);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ((void (*)(_QWORD *, uint64_t, uint64_t))v57)(v59, v39, v40);
  swift_release(v35);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v42);
  swift_release(v37);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v41);
  return sub_10020BAA8(v59);
}

uint64_t sub_100203640(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100203658, 0, 0);
}

uint64_t sub_100203658()
{
  uint64_t v0;

  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 64) + 40) = 1;
  swift_continuation_resume();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100203698(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1002036B0, 0, 0);
}

uint64_t sub_1002036B0()
{
  uint64_t v0;

  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 64) + 40) = 0;
  swift_continuation_resume();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1002036EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  void *v56;
  void *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(id *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80[4];
  char v81;
  char *v82;
  uint64_t v83;
  char v84;
  char v85[32];

  v78 = a1;
  v79 = a3;
  v4 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  v77 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v71 - v14;
  v16 = (uint64_t *)(a2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(a2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player, v85, 0, 0);
  v17 = *v16;
  if (!v17)
    goto LABEL_4;
  KeyPath = swift_getKeyPath(&unk_1004316C0);
  v19 = swift_getKeyPath(&unk_1004316E8);
  v20 = swift_retain(v17);
  static Published.subscript.getter(v80, v20, KeyPath, v19);
  swift_release(v17);
  swift_release(KeyPath);
  swift_release(v19);
  v21 = v80[0];

  if (v21)
  {
    v22 = 0;
  }
  else
  {
LABEL_4:
    v23 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
    v22 = sub_100203E30((uint64_t)v79);

  }
  v24 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v25 = objc_msgSend(v24, "applicationState");

  if (!v22)
  {
LABEL_12:
    LOBYTE(v80[0]) = 0;
    v31 = v78;
    sub_100011530((uint64_t)v80, *(_QWORD *)(*(_QWORD *)(v78 + 64) + 40), &qword_100552968);
    return (_QWORD *)swift_continuation_throwingResume(v31);
  }
  if (v25 == (id)2)
  {
    if (qword_10054BCA8 != -1)
      swift_once(&qword_10054BCA8, sub_10020A920);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10000D78C(v26, (uint64_t)static Logger.playbackController);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Music is background so bypass the requires subscription alert and use buffered AirPlay", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    goto LABEL_12;
  }
  v74 = v10;
  v75 = a2;
  v73 = v9;
  if (v79)
  {
    String.LocalizationValue.init(stringLiteral:)(0x776F4E2079616C50, 0xE800000000000000);
    v33 = v77;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v13, v15, v10);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v34 = qword_100561480;
    static Locale.current.getter((id)qword_100561480);
    v72 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v34, v9, 0, 0, 256);
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v10);
    v37 = swift_allocObject(&unk_10050ED20, 24, 7);
    *(_QWORD *)(v37 + 16) = v78;
    v38 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v71 = UUID.uuidString.getter(v38);
    v40 = v39;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v6, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain(v37);
    v41 = sub_1000DE994(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v43 = *((_QWORD *)v41 + 2);
    v42 = *((_QWORD *)v41 + 3);
    if (v43 >= v42 >> 1)
      v41 = sub_1000DE994((char *)(v42 > 1), v43 + 1, 1, v41);
    *((_QWORD *)v41 + 2) = v43 + 1;
    v44 = &v41[56 * v43];
    *((_QWORD *)v44 + 4) = v71;
    *((_QWORD *)v44 + 5) = v40;
    *((_QWORD *)v44 + 6) = v72;
    *((_QWORD *)v44 + 7) = v36;
    v44[64] = 2;
    *((_QWORD *)v44 + 9) = &unk_100552960;
    *((_QWORD *)v44 + 10) = v37;
    swift_release(v37);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v40);
  }
  else
  {
    v41 = (char *)_swiftEmptyArrayStorage;
  }
  if (qword_10054C290 != -1)
    swift_once(&qword_10054C290, sub_10028CD9C);
  v45 = static String.cancelButtonTitle;
  v46 = (void *)qword_100562370;
  v47 = swift_allocObject(&unk_10050ECF8, 24, 7);
  *(_QWORD *)(v47 + 16) = v78;
  swift_bridgeObjectRetain();
  v48 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v49 = UUID.uuidString.getter(v48);
  v50 = v6;
  v52 = v51;
  (*(void (**)(char *, uint64_t))(v76 + 8))(v50, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain(v47);
  if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
    v41 = sub_1000DE994(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
  v54 = *((_QWORD *)v41 + 2);
  v53 = *((_QWORD *)v41 + 3);
  if (v54 >= v53 >> 1)
    v41 = sub_1000DE994((char *)(v53 > 1), v54 + 1, 1, v41);
  *((_QWORD *)v41 + 2) = v54 + 1;
  v55 = &v41[56 * v54];
  *((_QWORD *)v55 + 4) = v49;
  *((_QWORD *)v55 + 5) = v52;
  *((_QWORD *)v55 + 6) = v45;
  *((_QWORD *)v55 + 7) = v46;
  v55[64] = 2;
  *((_QWORD *)v55 + 9) = &unk_100552950;
  *((_QWORD *)v55 + 10) = v47;
  v56 = (void *)sub_100202F78(v79);
  v58 = v57;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000005ELL, 0x800000010044CD10);
  v79 = v46;
  v59 = v15;
  v60 = v77;
  v61 = v74;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v13, v59, v74);
  v78 = v52;
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v62 = qword_100561480;
  v63 = (id)qword_100561480;
  v64 = v73;
  static Locale.current.getter(v63);
  v65 = (void *)String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v62, v64, 0, 0, 256);
  v67 = v66;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
  v68 = *(_QWORD *)(v75 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v69 = *(_QWORD *)(v75 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  sub_10000D900((_QWORD *)(v75 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v68);
  v80[0] = v56;
  v80[1] = v58;
  v80[2] = v65;
  v80[3] = v67;
  v81 = 0;
  v82 = v41;
  v83 = 0;
  v84 = 0;
  v70 = *(void (**)(id *, uint64_t, uint64_t))(v69 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v70(v80, v68, v69);
  swift_release(v47);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v58);
  return sub_10020BAA8(v80);
}

uint64_t sub_100203E30(uint64_t result)
{
  void *v1;
  id v2;
  void *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  id v6;
  unsigned int v7;

  if (result)
  {
    if ((objc_msgSend((id)result, "isDeviceRoute") & 1) != 0)
    {
      return 0;
    }
    else
    {
      v2 = objc_msgSend(v1, "musicSubscriptionStatus");
      if (!v2
        || (v3 = v2,
            v4 = objc_msgSend(v2, "capabilities"),
            v5 = objc_msgSend(v3, "capabilities"),
            v3,
            result = (v5 & 2) == 0,
            (v5 & 2) == 0)
        && (v4 & 1) != 0)
      {
        v6 = objc_msgSend((id)objc_opt_self(MPCloudServiceStatusController), "sharedController");
        v7 = objc_msgSend(v6, "isCloudLibraryEnabled");

        if (v7)
          return 0;
        else
          return 2;
      }
    }
  }
  return result;
}

uint64_t sub_100203F04(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100203F1C, 0, 0);
}

uint64_t sub_100203F1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 24) = 1;
  sub_100011530(v0 + 24, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552968);
  swift_continuation_throwingResume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100203F70(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100203F88, 0, 0);
}

uint64_t sub_100203F88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 24) = 2;
  sub_100011530(v0 + 24, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552968);
  swift_continuation_throwingResume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100203FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v4 = v3;
  v42 = a2;
  v53 = (_QWORD *)a3;
  v51 = type metadata accessor for GenericMusicItem(0);
  v43 = *(_QWORD *)(v51 - 8);
  v6 = __chkstk_darwin(v51);
  v41 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v50 = (char *)&v40 - v8;
  v9 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  __chkstk_darwin(v9);
  v47 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Playlist.Entry(0);
  v46 = *(_QWORD *)(v52 - 8);
  v11 = __chkstk_darwin(v52);
  v45 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for Track(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v40 - v21;
  v23 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v20);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v44 = v4;
  v26(v25, v4, a1);
  if (swift_dynamicCast(v22, v25, a1, v15, 0))
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v22, v15);
    Track.musicItem.getter((uint64_t)v53);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  else
  {
    v28 = v52;
    v27 = v53;
    if (swift_dynamicCast(v14, v25, a1, v52, 0))
    {
      v30 = v45;
      v29 = v46;
      v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))(v45, v14, v28);
      v32 = v47;
      Playlist.Entry.internalItem.getter(v31);
      Playlist.Entry.InternalItem.musicItem.getter(v27);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v49);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
    }
    else
    {
      v34 = v50;
      v33 = v51;
      if (swift_dynamicCast(v50, v25, a1, v51, 0))
      {
        v35 = v43;
        v36 = v41;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v41, v34, v33);
        GenericMusicItem.innerMusicItem.getter((uint64_t)v27);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v33);
      }
      else
      {
        v37 = v42;
        v27[3] = a1;
        v27[4] = v37;
        v38 = (char *)sub_1000C16E0(v27);
        v26(v38, v44, a1);
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, a1);
}

uint64_t sub_1002042FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  id v53;
  char *v54;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD v73[6];
  _BYTE v74[24];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v58 = type metadata accessor for Station(0);
  v56[0] = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v57 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for MusicMovie(0);
  v56[1] = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v60 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for TVEpisode(0);
  v59 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v62 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Playlist(0);
  v64 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v66 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for Album(0);
  v65 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v69 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for MusicVideo(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v72 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)v56 - v18;
  v20 = type metadata accessor for Song(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100203FDC(a1, a2, (uint64_t)v74);
  if (!v75)
    goto LABEL_31;
  v24 = v17;
  sub_10020DB38((uint64_t)v74, (uint64_t)v73);
  v25 = sub_10000B4C8(&qword_1005528C0);
  if (swift_dynamicCast(v23, v73, v25, v20, 0))
  {
    v26 = v19;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000035, 0x800000010044CC70);
    v27 = v24;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v24, v26, v13);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v28 = qword_100561480;
    v29 = (id)qword_100561480;
    v30 = v72;
    static Locale.current.getter(v29);
    v31 = String.init(localized:table:bundle:locale:comment:)(v27, 0, 0, v28, v30, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    goto LABEL_20;
  }
  v32 = v71;
  if (swift_dynamicCast(v10, v73, v25, v71, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000036, 0x800000010044CBB0);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v33 = qword_100561480;
    v34 = (id)qword_100561480;
    v35 = v72;
    static Locale.current.getter(v34);
    v31 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v33, v35, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    v36 = v68;
    goto LABEL_19;
  }
  v10 = v69;
  v32 = v70;
  if (swift_dynamicCast(v69, v73, v25, v70, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000036, 0x800000010044CC30);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v37 = qword_100561480;
    v38 = (id)qword_100561480;
    v39 = v72;
    static Locale.current.getter(v38);
    v31 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v37, v39, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    v36 = v65;
    goto LABEL_19;
  }
  v10 = v66;
  v32 = v67;
  if (swift_dynamicCast(v66, v73, v25, v67, 0))
  {
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000039, 0x800000010044CBF0);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v40 = qword_100561480;
    v41 = (id)qword_100561480;
    v42 = v72;
    static Locale.current.getter(v41);
    v31 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v40, v42, 0, 0, 256);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    v43 = &v79;
LABEL_18:
    v36 = *(v43 - 32);
LABEL_19:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v32);
LABEL_20:
    sub_100011758(v73);
    sub_100011694((uint64_t)v74, &qword_1005528B0);
    return v31;
  }
  v44 = v62;
  v45 = v63;
  if (!swift_dynamicCast(v62, v73, v25, v63, 0))
  {
    v44 = v60;
    v45 = v61;
    if (swift_dynamicCast(v60, v73, v25, v61, 0))
    {
      v46 = &v77;
      goto LABEL_25;
    }
    v10 = v57;
    v32 = v58;
    if (swift_dynamicCast(v57, v73, v25, v58, 0))
    {
      String.LocalizationValue.init(stringLiteral:)(0xD000000000000038, 0x800000010044CB70);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
      if (qword_10054B9B0 != -1)
        swift_once(&qword_10054B9B0, sub_1000ABDCC);
      v49 = qword_100561480;
      v50 = (id)qword_100561480;
      v51 = v72;
      static Locale.current.getter(v50);
      v31 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v49, v51, 0, 0, 256);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
      v43 = &v76;
      goto LABEL_18;
    }
    sub_100011758(v73);
LABEL_31:
    sub_100011694((uint64_t)v74, &qword_1005528B0);
    v48 = 0xD000000000000030;
    v47 = 0x800000010044CB30;
    goto LABEL_32;
  }
  v46 = &v78;
LABEL_25:
  (*(void (**)(char *, uint64_t))(*(v46 - 32) + 8))(v44, v45);
  sub_100011758(v73);
  sub_100011694((uint64_t)v74, &qword_1005528B0);
  v47 = 0x800000010044CBB0;
  v48 = 0xD000000000000036;
LABEL_32:
  String.LocalizationValue.init(stringLiteral:)(v48, v47);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v52 = qword_100561480;
  v53 = (id)qword_100561480;
  v54 = v72;
  static Locale.current.getter(v53);
  v31 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v52, v54, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  return v31;
}

_QWORD *sub_100204C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t DynamicType;
  uint64_t v48;
  id v49;
  uint64_t v50;
  void *v51;
  BOOL v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  void **v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void *v81;
  BOOL v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  ValueMetadata *v112;
  void (*v113)(id *, uint64_t, uint64_t);
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  void (*v117)(char *, char *, uint64_t);
  char *v118;
  uint64_t v119;
  void **v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  ValueMetadata *v125;
  char *v126;
  char *v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  ValueMetadata *v138;
  _UNKNOWN **v139;
  char *v140;
  uint64_t v141;
  char v142;
  char v143[24];

  v125 = a5;
  v124 = a4;
  v132 = a2;
  v133 = a3;
  v134 = a1;
  v123 = type metadata accessor for MusicPlaybackIntentDescriptor(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v121 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for PlaybackIntentDescriptor.IntentType(0);
  v6 = __chkstk_darwin(v131);
  v120 = (void **)((char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v9 = (id *)((char *)&v115 - v8);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v115 - v22;
  String.LocalizationValue.init(stringLiteral:)(0x776F4E2079616C50, 0xE800000000000000);
  v117 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v117(v21, v23, v17);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v24 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v126 = v21;
  v118 = v16;
  v130 = (id)String.init(localized:table:bundle:locale:comment:)(v21, 0, 0, v24, v16, 0, 0, 256);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v18 + 8);
  v127 = v23;
  v119 = v17;
  v116 = v27;
  v27(v23, v17);
  v28 = swift_allocObject(&unk_10050EBE0, 24, 7);
  *(_QWORD *)(v28 + 16) = v134;
  v29 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v30 = UUID.uuidString.getter(v29);
  v32 = v31;
  v128 = *(void (**)(char *, uint64_t))(v11 + 8);
  v129 = v10;
  v128(v13, v10);
  v33 = sub_1000DE994(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v35 = *((_QWORD *)v33 + 2);
  v34 = *((_QWORD *)v33 + 3);
  v36 = v13;
  if (v35 >= v34 >> 1)
    v33 = sub_1000DE994((char *)(v34 > 1), v35 + 1, 1, v33);
  *((_QWORD *)v33 + 2) = v35 + 1;
  v37 = &v33[56 * v35];
  *((_QWORD *)v37 + 4) = v30;
  *((_QWORD *)v37 + 5) = v32;
  *((_QWORD *)v37 + 6) = v130;
  *((_QWORD *)v37 + 7) = v26;
  v37[64] = 2;
  *((_QWORD *)v37 + 9) = &unk_1005528D0;
  *((_QWORD *)v37 + 10) = v28;
  sub_10000D964(v132, (uint64_t)v9, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  if (swift_getEnumCaseMultiPayload(v9, v131) == 1)
  {
    v38 = v122;
    v39 = v121;
    v40 = v123;
    v41 = (*(uint64_t (**)(char *, id *, uint64_t))(v122 + 32))(v121, v9, v123);
    v130 = (id)MusicPlaybackIntentDescriptor.playbackIntent.getter(v41);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  }
  else
  {
    v130 = *v9;
  }
  v42 = v127;
  v43 = (uint64_t *)(v133 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v133 + OBJC_IVAR____TtC9MusicCore18PlaybackController_player, v143, 0, 0);
  v44 = *v43;
  if (*v43)
  {
    v138 = &type metadata for Player.InsertCommand;
    v139 = &protocol witness table for Player.InsertCommand;
    v45 = v130;
    v135 = v130;
    v136 = 0;
    v46 = sub_10000D900(&v135, (uint64_t)&type metadata for Player.InsertCommand);
    DynamicType = swift_getDynamicType(v46, &type metadata for Player.InsertCommand, 1);
    v48 = (uint64_t)v139;
    v49 = v45;
    swift_retain(v44);
    v50 = sub_100218AB0(DynamicType, v48);
    if (v50)
    {
      v51 = (void *)v50;
      v52 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v135);

      sub_100011758(&v135);
      swift_release(v44);
      v53 = v126;
      if (!v52)
        goto LABEL_16;
      String.LocalizationValue.init(stringLiteral:)(0x78654E2079616C50, 0xE900000000000074);
      v54 = v119;
      v117(v53, v42, v119);
      v55 = qword_100561480;
      v56 = (id)qword_100561480;
      v57 = v53;
      v58 = v118;
      static Locale.current.getter(v56);
      v115 = String.init(localized:table:bundle:locale:comment:)(v57, 0, 0, v55, v58, 0, 0, 256);
      v60 = v59;
      v116(v42, v54);
      v61 = swift_allocObject(&unk_10050EC58, 24, 7);
      *(_QWORD *)(v61 + 16) = v134;
      v62 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
      v63 = UUID.uuidString.getter(v62);
      v65 = v64;
      v128(v13, v129);
      v67 = *((_QWORD *)v33 + 2);
      v66 = *((_QWORD *)v33 + 3);
      if (v67 >= v66 >> 1)
        v33 = sub_1000DE994((char *)(v66 > 1), v67 + 1, 1, v33);
      *((_QWORD *)v33 + 2) = v67 + 1;
      v68 = &v33[56 * v67];
      *((_QWORD *)v68 + 4) = v63;
      *((_QWORD *)v68 + 5) = v65;
      *((_QWORD *)v68 + 6) = v115;
      *((_QWORD *)v68 + 7) = v60;
      v68[64] = 2;
      *((_QWORD *)v68 + 9) = &unk_100552900;
      *((_QWORD *)v68 + 10) = v61;
      v42 = v127;
    }
    else
    {
      sub_100011758(&v135);

      swift_release(v44);
    }
  }
  v53 = v126;
LABEL_16:
  v69 = v120;
  sub_10000D964(v132, (uint64_t)v120, type metadata accessor for PlaybackIntentDescriptor.IntentType);
  if (swift_getEnumCaseMultiPayload(v69, v131) == 1)
  {
    v70 = v122;
    v71 = v121;
    v72 = v123;
    v73 = (*(uint64_t (**)(char *, void **, uint64_t))(v122 + 32))(v121, v69, v123);
    v74 = (void *)MusicPlaybackIntentDescriptor.playbackIntent.getter(v73);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
    v75 = *v43;
    if (!v75)
      goto LABEL_26;
  }
  else
  {
    v74 = *v69;
    v75 = *v43;
    if (!v75)
      goto LABEL_26;
  }
  v138 = &type metadata for Player.InsertCommand;
  v139 = &protocol witness table for Player.InsertCommand;
  v135 = v74;
  v136 = 1;
  v76 = sub_10000D900(&v135, (uint64_t)&type metadata for Player.InsertCommand);
  v77 = swift_getDynamicType(v76, &type metadata for Player.InsertCommand, 1);
  v78 = (uint64_t)v139;
  v79 = v74;
  swift_retain(v75);
  v80 = sub_100218AB0(v77, v78);
  if (v80)
  {
    v81 = (void *)v80;
    v82 = MPCPlayerResponse.canPerform(_:)((uint64_t)&v135);

    sub_100011758(&v135);
    swift_release(v75);
    if (v82)
    {
      String.LocalizationValue.init(stringLiteral:)(0x73614C2079616C50, 0xE900000000000074);
      v83 = v53;
      v84 = v53;
      v85 = v119;
      v117(v83, v42, v119);
      v86 = qword_100561480;
      v87 = (id)qword_100561480;
      v88 = v118;
      static Locale.current.getter(v87);
      v89 = String.init(localized:table:bundle:locale:comment:)(v84, 0, 0, v86, v88, 0, 0, 256);
      v91 = v90;
      v116(v42, v85);
      v92 = swift_allocObject(&unk_10050EC30, 24, 7);
      *(_QWORD *)(v92 + 16) = v134;
      v93 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
      v94 = UUID.uuidString.getter(v93);
      v96 = v95;
      v128(v13, v129);
      v98 = *((_QWORD *)v33 + 2);
      v97 = *((_QWORD *)v33 + 3);
      if (v98 >= v97 >> 1)
        v33 = sub_1000DE994((char *)(v97 > 1), v98 + 1, 1, v33);
      *((_QWORD *)v33 + 2) = v98 + 1;
      v99 = &v33[56 * v98];
      *((_QWORD *)v99 + 4) = v94;
      *((_QWORD *)v99 + 5) = v96;
      *((_QWORD *)v99 + 6) = v89;
      *((_QWORD *)v99 + 7) = v91;
      v99[64] = 2;
      *((_QWORD *)v99 + 9) = &unk_1005528F0;
      *((_QWORD *)v99 + 10) = v92;
    }
  }
  else
  {
    sub_100011758(&v135);

    swift_release(v75);
  }
LABEL_26:
  if (qword_10054C290 != -1)
    swift_once(&qword_10054C290, sub_10028CD9C);
  v101 = static String.cancelButtonTitle;
  v100 = qword_100562370;
  v102 = swift_allocObject(&unk_10050EC08, 24, 7);
  *(_QWORD *)(v102 + 16) = v134;
  swift_bridgeObjectRetain();
  v103 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v104 = UUID.uuidString.getter(v103);
  v106 = v105;
  v128(v36, v129);
  v108 = *((_QWORD *)v33 + 2);
  v107 = *((_QWORD *)v33 + 3);
  if (v108 >= v107 >> 1)
    v33 = sub_1000DE994((char *)(v107 > 1), v108 + 1, 1, v33);
  *((_QWORD *)v33 + 2) = v108 + 1;
  v109 = &v33[56 * v108];
  *((_QWORD *)v109 + 4) = v104;
  *((_QWORD *)v109 + 5) = v106;
  *((_QWORD *)v109 + 6) = v101;
  *((_QWORD *)v109 + 7) = v100;
  v109[64] = 2;
  *((_QWORD *)v109 + 9) = &unk_1005528E0;
  *((_QWORD *)v109 + 10) = v102;
  v110 = *(_QWORD *)(v133 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v111 = *(_QWORD *)(v133 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  sub_10000D900((_QWORD *)(v133 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v110);
  v135 = 0;
  v136 = 0;
  v112 = v125;
  v137 = v124;
  v138 = v125;
  LOBYTE(v139) = 0;
  v140 = v33;
  v141 = 0;
  v142 = 0;
  v113 = *(void (**)(id *, uint64_t, uint64_t))(v111 + 8);
  swift_bridgeObjectRetain_n(v125, 2);
  swift_bridgeObjectRetain();
  v113(&v135, v110, v111);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v112);
  swift_bridgeObjectRelease(0);

  return sub_10020BAA8(&v135);
}

uint64_t sub_1002055E8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_100205600, 0, 0);
}

uint64_t sub_100205600()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(int64x2_t *)(v0 + 16) = vdupq_n_s64(2uLL);
  *(_BYTE *)(v0 + 32) = 0;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552908);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020565C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_100205674, 0, 0);
}

uint64_t sub_100205674()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 16) = xmmword_100428090;
  *(_BYTE *)(v0 + 32) = 0;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552908);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002056D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_1002056E8, 0, 0);
}

uint64_t sub_1002056E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_OWORD *)(v0 + 16) = xmmword_1004280A0;
  *(_BYTE *)(v0 + 32) = 0;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552908);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100205744(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_10020575C, 0, 0);
}

uint64_t sub_10020575C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  sub_100011530(v0 + 16, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), &qword_100552908);
  swift_continuation_resume(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id PlaybackController.requestedPropertySet(for:)()
{
  if (qword_10054BDA0 != -1)
    swift_once(&qword_10054BDA0, sub_100276188);
  return (id)static SharedListening.Event.properties;
}

uint64_t PlaybackController.engine(_:didReceive:)(uint64_t a1, void *a2)
{
  return sub_10020BAD4(a2);
}

double PlaybackController.engine(_:didEndSharedListeningSessionWithError:)(uint64_t a1, uint64_t a2)
{
  return sub_10020BD64(a2);
}

uint64_t sub_1002058EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[3] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  v4[5] = v7;
  return swift_task_switch(sub_100205958, v6, v7);
}

uint64_t sub_100205958()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v2 = v1[3];
  v3 = v1[4];
  sub_10000D900(v1, v2);
  v0[6] = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  v4 = (_QWORD *)swift_task_alloc(dword_100554ED4);
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_1002059E4;
  return GroupActivitiesManager.leave(performLeaveCommand:)(0);
}

uint64_t sub_1002059E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release(v2);
  return swift_task_switch(sub_10013391C, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

_QWORD *sub_100205A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v41 = a1;
  v1 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v36 - v12;
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010044CA40);
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v15 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v38 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v15, v6, 0, 0, 256);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v13, v7);
  String.LocalizationValue.init(stringLiteral:)(0xD000000000000057, 0x800000010044CA60);
  v14(v11, v13, v7);
  v19 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v37 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v19, v6, 0, 0, 256);
  v21 = v20;
  v18(v13, v7);
  v22 = sub_10000B4C8(&qword_100552680);
  v23 = swift_allocObject(v22, 88, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100424BB0;
  String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
  v14(v11, v13, v7);
  v24 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v25 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v24, v6, 0, 0, 256);
  v27 = v26;
  v18(v13, v7);
  v28 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v29 = UUID.uuidString.getter(v28);
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v3, v40);
  *(_QWORD *)(v23 + 32) = v29;
  *(_QWORD *)(v23 + 40) = v31;
  *(_QWORD *)(v23 + 48) = v25;
  *(_QWORD *)(v23 + 56) = v27;
  *(_BYTE *)(v23 + 64) = 0;
  *(_QWORD *)(v23 + 72) = 0;
  *(_QWORD *)(v23 + 80) = 0;
  v32 = *(_QWORD *)(v41 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v33 = *(_QWORD *)(v41 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  sub_10000D900((_QWORD *)(v41 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v32);
  v42[0] = v38;
  v42[1] = v17;
  v42[2] = v37;
  v42[3] = v21;
  v43 = 0;
  v44 = v23;
  v45 = 0;
  v46 = 0;
  v34 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v33 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34(v42, v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10020BAA8(v42);
}

void PlaybackController.engine(_:didPauseForLeaseEndWithError:)(uint64_t a1, void *a2)
{
  sub_10020C00C(a2);
}

void sub_100205E18(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];

  v16 = &type metadata for String;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a3 + 16) <= a1)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v5 = a3 + 16 * a1;
  v6 = *(_QWORD *)(v5 + 40);
  v7 = a4 + 16;
  *(_QWORD *)&v15 = *(_QWORD *)(v5 + 32);
  *((_QWORD *)&v15 + 1) = v6;
  sub_10013BB38(&v15, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v18 = a2;
  sub_10013AD8C(v19, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v9 = v18;
  swift_bridgeObjectRelease();
  swift_beginAccess(v7, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v11 = (void *)Strong;
    sub_1000C53BC(Strong + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator, (uint64_t)&v15);

    v12 = v16;
    v13 = v17;
    sub_10000D900(&v15, (uint64_t)v16);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v13 + 24))(v9, v12, v13);
    swift_bridgeObjectRelease();
    sub_100011758(&v15);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_beginAccess(v7, &v15, 0, 0);
  v14 = (_BYTE *)swift_unknownObjectWeakLoadStrong(v7);
  if (v14)
  {
    v14[OBJC_IVAR____TtC9MusicCore18PlaybackController_isLeaseEndAlertPresented] = 0;

  }
}

void sub_100205F8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;

  v4 = v3;
  v54 = a1;
  v55 = a2;
  v6 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  __chkstk_darwin(v6);
  v51 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v3, "buttons");
  v9 = sub_1000DD108(0, &qword_1005526E0, ICStoreDialogResponseButton_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v34 = v10;
    else
      v34 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    v13 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_21;
LABEL_3:
  if (v11 < 1)
  {
    __break(1u);
    return;
  }
  v46 = v4;
  v47 = a3;
  v12 = 0;
  v48 = v10 & 0xC000000000000001;
  v13 = (char *)_swiftEmptyArrayStorage;
  v49 = v11;
  v50 = v10;
  do
  {
    if (v48)
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
    else
      v14 = *(id *)(v10 + 8 * v12 + 32);
    v15 = v14;
    v56 = objc_msgSend(v14, "type") != (id)2;
    v16 = objc_msgSend(v15, "title");
    if (v16)
    {
      v17 = v16;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

    }
    else
    {
      v18 = 0;
      v20 = 0xE000000000000000;
    }
    v21 = (_QWORD *)swift_allocObject(&unk_10050E968, 48, 7);
    v23 = v54;
    v22 = v55;
    v21[2] = v15;
    v21[3] = v23;
    v21[4] = v22;
    v21[5] = v12;
    v24 = v15;
    sub_1000DB0D8(v23, v22);
    v25 = v51;
    v26 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v27 = UUID.uuidString.getter(v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v53);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain(v21);
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_1000DE994(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v31 = *((_QWORD *)v13 + 2);
    v30 = *((_QWORD *)v13 + 3);
    if (v31 >= v30 >> 1)
      v13 = sub_1000DE994((char *)(v30 > 1), v31 + 1, 1, v13);
    ++v12;
    v32 = 2 * v56;
    *((_QWORD *)v13 + 2) = v31 + 1;
    v33 = &v13[56 * v31];
    *((_QWORD *)v33 + 4) = v27;
    *((_QWORD *)v33 + 5) = v29;
    *((_QWORD *)v33 + 6) = v18;
    *((_QWORD *)v33 + 7) = v20;
    v33[64] = v32;
    *((_QWORD *)v33 + 9) = &unk_1005526F0;
    *((_QWORD *)v33 + 10) = v21;
    swift_release(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v10 = v50;
  }
  while (v49 != v12);
  swift_bridgeObjectRelease();
  v4 = v46;
  a3 = v47;
LABEL_22:
  v35 = objc_msgSend(v4, "message");
  if (v35)
  {
    v36 = v35;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0;
  }
  v40 = objc_msgSend(v4, "explanation");
  if (v40)
  {
    v41 = v40;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

  }
  else
  {
    v42 = 0;
    v44 = 0;
  }
  *(_QWORD *)a3 = v37;
  *(_QWORD *)(a3 + 8) = v39;
  *(_QWORD *)(a3 + 16) = v42;
  *(_QWORD *)(a3 + 24) = v44;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = v13;
  *(_QWORD *)(a3 + 48) = 0;
}

_QWORD *sub_100206318(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_OWORD *, uint64_t, uint64_t);
  _OWORD v13[3];
  uint64_t v14;
  char v15;
  _OWORD v16[3];
  uint64_t v17;

  if ((*((_BYTE *)result + OBJC_IVAR____TtC9MusicCore18PlaybackController_isLeaseEndAlertPresented) & 1) == 0)
  {
    v6 = result;
    *((_BYTE *)result + OBJC_IVAR____TtC9MusicCore18PlaybackController_isLeaseEndAlertPresented) = 1;
    v7 = swift_allocObject(&unk_10050E7D8, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16, v6);
    v8 = (_QWORD *)swift_allocObject(&unk_10050EB28, 40, 7);
    v8[2] = a3;
    v8[3] = a4;
    v8[4] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain(v7);
    sub_100205F8C((uint64_t)sub_10020D7B8, (uint64_t)v8, (uint64_t)v16);
    swift_release(v7);
    swift_release(v8);
    v9 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
    v10 = *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
    v11 = v9[4];
    sub_10000D900(v9, v10);
    v13[0] = v16[0];
    v13[1] = v16[1];
    v13[2] = v16[2];
    v14 = v17;
    v15 = 0;
    v12 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v11 + 8);
    sub_1001252D0((uint64_t)v16);
    v12(v13, v10, v11);
    sub_1000B593C(v16);
    return sub_10020BAA8(v13);
  }
  return result;
}

double PlaybackController.engine(_:didFailToPlayFirstItem:withError:)(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  _QWORD *v6;
  id v7;
  id v8;
  double result;

  sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
  v6 = (_QWORD *)swift_allocObject(&unk_10050E380, 40, 7);
  v6[2] = a3;
  v6[3] = v3;
  v6[4] = a2;
  swift_errorRetain(a3);
  v7 = a2;
  v8 = v3;
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)((uint64_t (*)(void))sub_10020C4AC, (uint64_t)v6);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_100206548(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char **v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  id v39;
  Class isa;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  uint64_t v71;
  void *v72;
  id v73;
  __n128 v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void *v78;
  id v79;
  __n128 v80;
  int v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  _BYTE *v90;
  id v91;
  char *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  id v114;
  _BYTE *v115;
  char *v116;
  uint64_t *v117;
  void *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(_QWORD, _QWORD, _QWORD);
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  void *v148;
  id v149;
  void *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  id v158;
  id v159;
  id v160;
  void *v161;
  id v162;
  uint64_t v163;
  id v164;
  void *v165;
  id v166;
  id v167;
  id v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD v184[2];
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  id v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unsigned __int8 *v204;
  _BYTE *v205;
  id v206;
  __int128 v207;
  __int128 v208;
  void *v209;
  char *v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD v216[4];
  unsigned __int8 v217;
  uint64_t v218;
  void *v219;
  _QWORD v220[4];
  unsigned __int8 v221;
  void *v222;
  void *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  _DWORD v231[5];

  v195 = a3;
  v200 = a2;
  v4 = sub_10000B4C8((uint64_t *)&unk_1005526B0);
  __chkstk_darwin(v4);
  v6 = (char *)v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000B4C8(&qword_10054E738);
  __chkstk_darwin(v7);
  v9 = (char *)v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v10 = type metadata accessor for Logger(0);
  sub_10000D78C(v10, (uint64_t)static Logger.playbackController);
  swift_errorRetain(a1);
  v11 = swift_errorRetain(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v206 = v9;
  if (v14)
  {
    v15 = swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v207 = v16;
    *(_DWORD *)v15 = 136446210;
    v224 = (void *)a1;
    swift_errorRetain(a1);
    v17 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v18 = (char *)String.init<A>(describing:)(&v224, v17);
    *(_QWORD *)(v15 + 4) = sub_1000BA30C(v18, v19, (uint64_t *)&v207);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "didFailToPlayFirstItem with error=%{public}s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  if ((*(_BYTE *)(v200 + OBJC_IVAR____TtC9MusicCore18PlaybackController_isErrorAlertPresented) & 1) == 0)
  {
    v185 = OBJC_IVAR____TtC9MusicCore18PlaybackController_isErrorAlertPresented;
    v20 = &selRef_propertySetByCombiningWithPropertySet_;
    v191 = (id)_convertErrorToNSError(_:)(a1);
    v21 = objc_msgSend(v191, "userInfo");
    v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    if (*(_QWORD *)(v22 + 16) && (v23 = sub_10013B57C(0x676F6C616964, 0xE600000000000000), (v24 & 1) != 0))
    {
      sub_1000760E0(*(_QWORD *)(v22 + 56) + 32 * v23, (uint64_t)&v207);
    }
    else
    {
      v207 = 0u;
      v208 = 0u;
    }
    swift_bridgeObjectRelease();
    v203 = a1;
    if (*((_QWORD *)&v208 + 1))
    {
      v25 = sub_10000B4C8((uint64_t *)&unk_10054FF90);
      if ((swift_dynamicCast(&v224, &v207, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
      {
        v26 = (uint64_t)v224;
        v27 = swift_bridgeObjectRetain_n(v224, 2);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = swift_slowAlloc(12, -1);
          v31 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v207 = v31;
          *(_DWORD *)v30 = 136446210;
          v32 = swift_bridgeObjectRetain();
          v33 = v6;
          v34 = Dictionary.description.getter(v32, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
          v36 = v35;
          swift_bridgeObjectRelease();
          v37 = (char *)v34;
          v6 = v33;
          *(_QWORD *)(v30 + 4) = sub_1000BA30C(v37, v36, (uint64_t *)&v207);
          swift_bridgeObjectRelease_n(v26, 2);
          a1 = v203;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Found an error dialog=%{public}s", (uint8_t *)v30, 0xCu);
          swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
          v38 = v31;
          v20 = &selRef_propertySetByCombiningWithPropertySet_;
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v26, 2);
        }
        v39 = objc_allocWithZone((Class)ICStoreDialogResponse);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v41 = objc_msgSend(v39, "initWithResponseDictionary:", isa);

        sub_100205F8C(0, 0, (uint64_t)v216);
        v198 = v216[3];
        v199 = v216[1];
        v192 = v217;
        v193 = v216[0];
        v196 = v216[2];
        v197 = (id)v218;
        v194 = v219;

        goto LABEL_19;
      }
    }
    else
    {
      sub_100011694((uint64_t)&v207, &qword_100550FD0);
    }
    v192 = 0;
    v193 = 0;
    v198 = 0;
    v199 = 0;
    v196 = 0;
    v197 = 0;
    v194 = 0;
LABEL_19:
    v42 = objc_msgSend(v191, v20[313]);
    v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v42, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    if (*(_QWORD *)(v43 + 16) && (v46 = sub_10013B57C(v44, v45), (v47 & 1) != 0))
    {
      sub_1000760E0(*(_QWORD *)(v43 + 56) + 32 * v46, (uint64_t)&v207);
    }
    else
    {
      v207 = 0u;
      v208 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v201 = v6;
    if (*((_QWORD *)&v208 + 1))
    {
      v48 = sub_1000DD108(0, (unint64_t *)&qword_100551050, NSError_ptr);
      if (swift_dynamicCast(&v224, &v207, (char *)&type metadata for Any + 8, v48, 6))
      {
        v49 = v224;
        goto LABEL_28;
      }
    }
    else
    {
      sub_100011694((uint64_t)&v207, &qword_100550FD0);
    }
    v49 = 0;
LABEL_28:
    v50 = swift_allocObject(&unk_10050E878, 17, 7);
    *(_BYTE *)(v50 + 16) = 0;
    v51 = (unsigned __int8 *)(v50 + 16);
    v52 = swift_allocObject(&unk_10050E878, 17, 7);
    *(_BYTE *)(v52 + 16) = 0;
    v205 = (_BYTE *)(v52 + 16);
    v53 = swift_allocObject(&unk_10050E878, 17, 7);
    *(_BYTE *)(v53 + 16) = 0;
    v202 = (char *)(v53 + 16);
    sub_100207A60(a1, v52, v53, v50);
    if (v49)
    {
      v54 = v49;
      sub_100207A60((uint64_t)v54, v52, v53, v50);

    }
    v189 = v50;
    v190 = v49;
    v187 = v52;
    v188 = v53;
    if (!v195)
    {
      v61 = 0;
      goto LABEL_54;
    }
    v204 = (unsigned __int8 *)(v50 + 16);
    v55 = v195;
    v56 = objc_msgSend(v55, "stationStringID");
    if (v56)
    {
      v57 = v56;
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v60 = v59;

    }
    else
    {
      v58 = 0;
      v60 = 0;
    }
    v62 = (unint64_t)objc_msgSend(v55, "stationID");
    v63 = objc_msgSend(v55, "stationHash");
    if (v63)
    {
      v64 = v63;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v61 = v66;

      if (v60)
        goto LABEL_37;
    }
    else
    {
      v65 = 0;
      v61 = 0;
      if (v60)
      {
LABEL_37:
        v67 = HIBYTE(v60) & 0xF;
        if ((v60 & 0x2000000000000000) == 0)
          v67 = v58 & 0xFFFFFFFFFFFFLL;
        if (v67 | v62)
        {
LABEL_47:
          sub_1000DD108(0, &qword_100554F40, MPModelRadioStationKind_ptr);
          v69 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "identityKind");
          __chkstk_darwin(v69);
          v184[-6] = v58;
          v184[-5] = v60;
          v184[-4] = v62;
          v184[-3] = v65;
          v184[-2] = v61;
          v70 = objc_allocWithZone((Class)MPIdentifierSet);
          v71 = swift_allocObject(&unk_10050E8C8, 32, 7);
          *(_QWORD *)(v71 + 16) = sub_10020D2E8;
          *(_QWORD *)(v71 + 24) = &v184[-8];
          v209 = sub_10020D304;
          v210 = (char *)v71;
          *(_QWORD *)&v207 = _NSConcreteStackBlock;
          *((_QWORD *)&v207 + 1) = 1107296256;
          *(_QWORD *)&v208 = sub_1001880C4;
          *((_QWORD *)&v208 + 1) = &unk_10050E8E0;
          v72 = _Block_copy(&v207);
          swift_retain(v71);
          v73 = objc_msgSend(v70, "initWithModelKind:block:", v69, v72);

          _Block_release(v72);
          v74 = swift_release(v210);
          LOBYTE(v69) = swift_isEscapingClosureAtFileLocation(v71, "", 0, 0, 0, 1, v74);
          swift_release(v71);
          swift_bridgeObjectRelease();
          v75 = swift_bridgeObjectRelease();
          if ((v69 & 1) != 0)
          {
            __break(1u);
          }
          else
          {
            __chkstk_darwin(v75);
            v184[-2] = v55;
            v76 = objc_allocWithZone((Class)MPModelRadioStation);
            v77 = swift_allocObject(&unk_10050E918, 32, 7);
            *(_QWORD *)(v77 + 16) = sub_10020D30C;
            *(_QWORD *)(v77 + 24) = &v184[-4];
            v209 = sub_10020D304;
            v210 = (char *)v77;
            *(_QWORD *)&v207 = _NSConcreteStackBlock;
            *((_QWORD *)&v207 + 1) = 1107296256;
            *(_QWORD *)&v208 = sub_1001880C4;
            *((_QWORD *)&v208 + 1) = &unk_10050E930;
            v78 = _Block_copy(&v207);
            swift_retain(v77);
            v79 = objc_msgSend(v76, "initWithIdentifiers:block:", v73, v78);

            _Block_release(v78);
            v80 = swift_release(v210);
            LOBYTE(v76) = swift_isEscapingClosureAtFileLocation(v77, "", 0, 0, 0, 1, v80);

            swift_release(v77);
            if ((v76 & 1) == 0)
            {
              v50 = v189;
              v49 = v190;
              v52 = v187;
              v53 = v188;
              v61 = (unint64_t)v79;
LABEL_53:
              v51 = v204;
LABEL_54:
              swift_beginAccess(v51, &v215, 0, 0);
              v81 = *v51;
              v82 = (void *)v61;
              v186 = (void *)v61;
              if (v81 == 1)
              {
                if (v61)
                {
                  sub_1000C53BC(v200 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator, (uint64_t)&v224);
                  v83 = (void *)v61;
                  v84 = v227;
                  v85 = v228;
                  sub_10000D900(&v224, v227);
                  v86 = type metadata accessor for Station(0);
                  v87 = v83;
                  v88 = v206;
                  dispatch thunk of LegacyModelObjectConvertible.init(_:)(v87);
                  v89 = *(_QWORD *)(v86 - 8);
                  if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v89 + 48))(v88, 1, v86) == 1)
                  {
                    sub_100011694((uint64_t)v88, &qword_10054E738);
                    v207 = 0u;
                    v208 = 0u;
                    v209 = 0;
                  }
                  else
                  {
                    *((_QWORD *)&v208 + 1) = v86;
                    v209 = &protocol witness table for Station;
                    v113 = sub_1000C16E0(&v207);
                    (*(void (**)(_QWORD *, id, uint64_t))(v89 + 32))(v113, v88, v86);
                  }
                  v95 = v193;
                  v99 = v194;
                  v212 = 2;
                  (*(void (**)(__int128 *, uint64_t, uint64_t))(v85 + 8))(&v207, v84, v85);
                  sub_10020BAA8(&v207);
                  sub_100011758(&v224);
LABEL_68:
                  v104 = v197;
                  v49 = v190;
LABEL_69:
                  if (!v104)
                  {
                    v197 = 0;
                    if (v49)
                      goto LABEL_81;
                    goto LABEL_92;
                  }
                  v114 = v99;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v197 = v104;
                  v100 = (uint64_t)v104;
LABEL_71:
                  v115 = *(_BYTE **)(v100 + 16);
                  v194 = v99;
                  if (v115)
                  {
                    v193 = v95;
                    swift_bridgeObjectRetain();
                    v116 = (char *)_swiftEmptyArrayStorage;
                    v184[1] = v100;
                    v117 = (uint64_t *)(v100 + 80);
                    do
                    {
                      v205 = v115;
                      v118 = (void *)*(v117 - 6);
                      v119 = *(v117 - 5);
                      v120 = (unsigned __int8 *)*(v117 - 4);
                      v201 = (char *)*(v117 - 3);
                      v202 = v116;
                      v121 = *((unsigned __int8 *)v117 - 16);
                      v123 = *(v117 - 1);
                      v122 = *v117;
                      v124 = swift_allocObject(&unk_10050E7D8, 24, 7);
                      swift_unknownObjectWeakInit(v124 + 16, v200);
                      v125 = swift_allocObject(&unk_10050E8A0, 80, 7);
                      v206 = v118;
                      *(_QWORD *)(v125 + 16) = v118;
                      *(_QWORD *)(v125 + 24) = v119;
                      v204 = v120;
                      *(_QWORD *)(v125 + 32) = v120;
                      v126 = v123;
                      v127 = v201;
                      *(_QWORD *)(v125 + 40) = v201;
                      LODWORD(v203) = v121;
                      *(_BYTE *)(v125 + 48) = v121;
                      *(_DWORD *)(v125 + 49) = v231[0];
                      *(_DWORD *)(v125 + 52) = *(_DWORD *)((char *)v231 + 3);
                      *(_QWORD *)(v125 + 56) = v126;
                      *(_QWORD *)(v125 + 64) = v122;
                      *(_QWORD *)(v125 + 72) = v124;
                      v128 = v202;
                      swift_bridgeObjectRetain_n(v119, 2);
                      swift_bridgeObjectRetain_n(v127, 2);
                      sub_1000DB0D8(v126, v122);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_1000DB0D8(v126, v122);
                      if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) == 0)
                        v128 = sub_1000DE994(0, *((_QWORD *)v128 + 2) + 1, 1, v128);
                      v130 = *((_QWORD *)v128 + 2);
                      v129 = *((_QWORD *)v128 + 3);
                      v131 = v128;
                      v132 = v205;
                      if (v130 >= v129 >> 1)
                        v131 = sub_1000DE994((char *)(v129 > 1), v130 + 1, 1, v128);
                      v117 += 7;
                      *((_QWORD *)v131 + 2) = v130 + 1;
                      v116 = v131;
                      v133 = &v131[56 * v130];
                      *((_QWORD *)v133 + 4) = v206;
                      *((_QWORD *)v133 + 5) = v119;
                      *((_QWORD *)v133 + 6) = v204;
                      *((_QWORD *)v133 + 7) = v127;
                      v133[64] = v203;
                      *((_QWORD *)v133 + 9) = &unk_1005526C8;
                      *((_QWORD *)v133 + 10) = v125;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000DB26C(v126, v122);
                      v115 = v132 - 1;
                    }
                    while (v115);
                    swift_bridgeObjectRelease();
                    v95 = v193;
                  }
                  else
                  {
                    v116 = (char *)_swiftEmptyArrayStorage;
                  }
                  v134 = v200;
                  *(_BYTE *)(v200 + v185) = 1;
                  v135 = *(_QWORD *)(v134 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
                  v136 = *(_QWORD *)(v134 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
                  sub_10000D900((_QWORD *)(v134 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v135);
                  v138 = v198;
                  v137 = v199;
                  *(_QWORD *)&v207 = v95;
                  *((_QWORD *)&v207 + 1) = v199;
                  *(_QWORD *)&v208 = v196;
                  *((_QWORD *)&v208 + 1) = v198;
                  LOBYTE(v209) = 0;
                  v210 = v116;
                  v211 = 0;
                  v212 = 0;
                  v139 = *(void (**)(_QWORD, _QWORD, _QWORD))(v136 + 8);
                  swift_bridgeObjectRetain_n(v198, 2);
                  swift_bridgeObjectRetain_n(v137, 2);
                  swift_bridgeObjectRetain();
                  v139(&v207, v135, v136);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n(v138, 2);
                  swift_bridgeObjectRelease_n(v137, 2);
                  v99 = v194;

                  sub_10020BAA8(&v207);
                  v49 = v190;
                  if (v190)
                  {
LABEL_81:
                    v140 = objc_msgSend(v49, "domain");
                    v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
                    v143 = v142;

                    v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCErrorDomain);
                    if (v143)
                    {
                      if (v141 == v144 && v143 == v145)
                      {
                        swift_bridgeObjectRelease_n(v143, 2);
                        v146 = (uint64_t)v197;
LABEL_86:
                        if (objc_msgSend(v49, "code") == (id)40)
                        {
                          v148 = v186;
                          if (!v195)
                          {
                            v153 = 0;
                            v155 = 0;
                            v151 = 0;
                            v152 = v192;
LABEL_113:
                            sub_1002096F4(v153, v155, 0, 0);

                            swift_bridgeObjectRelease();
                            sub_100125320(v95, v199, v196, v198, v152, (uint64_t)v197, v99);
                            swift_release(v187);
                            swift_release(v188);

                            v49 = v190;
                            goto LABEL_95;
                          }
                          v149 = objc_msgSend(v195, "modelGenericObject");
                          if (v149)
                          {
                            v150 = v149;
                            v151 = objc_msgSend(v149, "flattenedGenericObject");

                            v152 = v192;
                            if (v151)
                            {
                              v153 = MPModelObject.bestIdentifier(for:)(2, 1u);
                              v155 = v154;
                            }
                            else
                            {
                              v153 = 0;
                              v155 = 0;
                            }
                            goto LABEL_113;
                          }
LABEL_131:
                          __break(1u);
                          return;
                        }

                        sub_100125320(v95, v199, v196, v198, v192, v146, v99);
                        swift_release(v187);
                        swift_release(v188);
                        v148 = v186;
LABEL_95:

                        swift_release(v189);
                        return;
                      }
                      v147 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v143, v144, v145, 0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v146 = (uint64_t)v197;
                      if ((v147 & 1) != 0)
                        goto LABEL_86;

                      v156 = v192;
LABEL_94:
                      v148 = v186;
                      sub_100125320(v95, v199, v196, v198, v156, v146, v99);
                      swift_release(v187);
                      swift_release(v188);
                      goto LABEL_95;
                    }
LABEL_93:

                    swift_bridgeObjectRelease();
                    v156 = v192;
                    v146 = (uint64_t)v197;
                    goto LABEL_94;
                  }
LABEL_92:
                  static String._unconditionallyBridgeFromObjectiveC(_:)(MPCErrorDomain);
                  goto LABEL_93;
                }
                v82 = 0;
              }
              v90 = v205;
              swift_beginAccess(v205, &v214, 0, 0);
              if ((*v90 & 1) != 0)
              {
                v91 = (id)v61;
                sub_10017F890(v82, &v224);
LABEL_63:
                v95 = (uint64_t)v224;
                v94 = v225;
                v96 = v226;
                v97 = v227;
                v98 = v228;
                v100 = v229;
                v99 = v230;

                sub_100125320(v193, v199, v196, v198, v192, (uint64_t)v197, v194);
                sub_1001252D0((uint64_t)&v224);
                v198 = v97;
                v199 = v94;
                v196 = v96;
                v197 = (id)v100;
                v192 = v98;
                goto LABEL_71;
              }
              v92 = v202;
              swift_beginAccess(v202, &v213, 0, 0);
              if (*v92 == 1)
              {
                v93 = (id)v61;
                sub_100180450((uint64_t)v82, (uint64_t *)&v224);
                goto LABEL_63;
              }
              v204 = v51;
              v206 = (id)v61;

              v101 = v203;
              swift_errorRetain(v203);
              v102 = v195;
              v103 = (void *)_convertErrorToNSError(_:)(v101);
              swift_errorRelease(v101);
              v104 = objc_msgSend((id)objc_opt_self(MPUPlaybackAlertController), "playbackAlertControllerForItem:contentType:error:dismissalBlock:", v102, 0, v103, 0);

              v105 = v102;
              if (v104)
              {
                sub_100207DB0((uint64_t)v220);
                v106 = v220[0];
                v107 = v220[1];
                v108 = v220[2];
                v109 = v220[3];
                v110 = v221;
                v112 = v222;
                v111 = v223;
                sub_100125320(v193, v199, v196, v198, v192, (uint64_t)v197, v194);

                v192 = v110;
                v193 = v106;
                v198 = v109;
                v199 = v107;
                v196 = v108;
                v52 = v187;
                v53 = v188;
                v50 = v189;
                v49 = v190;
                v104 = v112;
                v101 = v203;
                v194 = v111;
              }
              else
              {
                sub_100125320(v193, v199, v196, v198, v192, (uint64_t)v197, v194);
                v192 = 0;
                v193 = 0;
                v198 = 0;
                v199 = 0;
                v196 = 0;
                v194 = 0;
              }
              sub_100208154(v101, v50, v53, v52);
              if (v49)
              {
                v157 = v104;
                v158 = v49;
                sub_100208154((uint64_t)v158, v50, v53, v52);

                v104 = v157;
              }
              v95 = v193;
              v99 = v194;
              if (!v195)
                goto LABEL_69;
              v197 = v104;
              v159 = v105;
              v160 = objc_msgSend(v159, "modelGenericObject");
              if (v160)
              {
                v161 = v160;
                v162 = objc_msgSend(v160, "innermostModelObject");

                v163 = (uint64_t)v201;
                if ((*v204 & 1) != 0)
                {
                  v164 = objc_msgSend(v159, "modelPlayEvent");
                  if (!v164)
                  {
LABEL_122:
                    sub_1000C53BC(v200 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator, (uint64_t)&v224);
                    v178 = v227;
                    v179 = v228;
                    sub_10000D900(&v224, v227);
                    v180 = v162;
                    GenericMusicItem.init(_:)();
                    v181 = type metadata accessor for GenericMusicItem(0);
                    v182 = *(_QWORD *)(v181 - 8);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v163, 1, v181) == 1)
                    {
                      sub_100011694(v163, (uint64_t *)&unk_1005526B0);
                      v207 = 0u;
                      v208 = 0u;
                      v209 = 0;
                    }
                    else
                    {
                      *((_QWORD *)&v208 + 1) = v181;
                      v209 = (void *)sub_10001254C((unint64_t *)&unk_1005526D0, (uint64_t (*)(uint64_t))&type metadata accessor for GenericMusicItem, (uint64_t)&protocol conformance descriptor for GenericMusicItem);
                      v183 = sub_1000C16E0(&v207);
                      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v182 + 32))(v183, v163, v181);
                    }
                    v212 = 2;
                    (*(void (**)(__int128 *, uint64_t, uint64_t))(v179 + 8))(&v207, v178, v179);

                    sub_10020BAA8(&v207);
                    sub_100011758(&v224);
                    v95 = v193;
                    v99 = v194;
                    goto LABEL_68;
                  }
                  v165 = v164;
                  v166 = objc_msgSend(v164, "itemType");
                  if (v166 == (id)3)
                  {
                    v167 = objc_msgSend(v165, "playlist");
                  }
                  else
                  {
                    if (v166 != (id)1)
                    {

                      goto LABEL_122;
                    }
                    v167 = objc_msgSend(v165, "album");
                  }
                  v177 = v167;

                  if (v177)
                  {
                    v162 = v177;
                    goto LABEL_122;
                  }

LABEL_127:
                  v95 = v193;
                  v99 = v194;
                  v104 = v197;
                  goto LABEL_69;
                }
                if (*v205 == 1)
                {
                  v168 = v162;
                  sub_10017F890(v162, &v224);
                }
                else
                {
                  if (*v202 != 1)
                  {

                    goto LABEL_127;
                  }
                  v169 = v162;
                  sub_100180450((uint64_t)v162, (uint64_t *)&v224);
                }
                v171 = (uint64_t)v224;
                v170 = v225;
                v173 = v226;
                v172 = v227;
                v174 = v228;
                v100 = v229;
                v175 = v230;

                sub_100125320(v193, v199, v196, v198, v192, (uint64_t)v197, v194);
                v176 = v175;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v95 = v171;
                v198 = v172;
                v199 = v170;
                v196 = v173;
                v197 = (id)v100;
                v192 = v174;
                v99 = v175;
                goto LABEL_71;
              }
LABEL_130:

              sub_100125320(v193, v199, v196, v198, v192, (uint64_t)v197, v194);
              __break(1u);
              goto LABEL_131;
            }
          }
          __break(1u);
          goto LABEL_130;
        }
LABEL_43:
        if (v61)
        {
          v68 = HIBYTE(v61) & 0xF;
          if ((v61 & 0x2000000000000000) == 0)
            v68 = v65 & 0xFFFFFFFFFFFFLL;
          if (v68)
            goto LABEL_47;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v61 = 0;
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v53 = v188;
        v50 = v189;
        v52 = v187;
        goto LABEL_53;
      }
    }
    if (v62)
      goto LABEL_47;
    goto LABEL_43;
  }
}

void sub_100207A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  uint64_t Category;
  _BYTE *v10;
  _BYTE v11[24];

  v7 = (void *)_convertErrorToNSError(_:)(a1);
  v8 = (void *)_convertErrorToNSError(_:)(v7);
  Category = MPCRadioPlaybackErrorGetCategory();

  switch(Category)
  {
    case 3:
      v10 = (_BYTE *)(a4 + 16);
      break;
    case 2:
      v10 = (_BYTE *)(a3 + 16);
      break;
    case 1:
      v10 = (_BYTE *)(a2 + 16);
      break;
    default:
      return;
  }
  swift_beginAccess(v10, v11, 1, 0);
  *v10 = 1;
}

void sub_100207B04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v17[5];
  uint64_t v18;

  v12 = (_QWORD *)swift_allocObject(&unk_10050EA10, 56, 7);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v13 = swift_allocObject(&unk_10050EA38, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10020D58C;
  *(_QWORD *)(v13 + 24) = v12;
  v17[4] = sub_1000D75E8;
  v18 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100188068;
  v17[3] = &unk_10050EA50;
  v14 = _Block_copy(v17);
  v15 = v18;
  swift_bridgeObjectRetain();
  swift_retain(v13);
  swift_bridgeObjectRetain();
  objc_msgSend(a1, "setRadioIdentifiersWithBlock:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v13, "", 128, 848, 61, 1, v16);
  swift_release(v12);
  swift_release(v13);
  if ((a1 & 1) != 0)
    __break(1u);
}

void sub_100207C5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v9;
  NSString v10;
  id v11;

  if (a3)
    v9 = String._bridgeToObjectiveC()();
  else
    v9 = 0;
  objc_msgSend(a1, "setStationStringID:", v9);

  objc_msgSend(a1, "setStationID:", a4);
  if (a6)
    v10 = String._bridgeToObjectiveC()();
  else
    v10 = 0;
  v11 = v10;
  objc_msgSend(a1, "setStationHash:");

}

void sub_100207D18(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v4 = objc_opt_self(MPModelRadioStation);
  v5 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v4, 0, 0, 0);
  v6 = a1;
  v7 = objc_msgSend(a2, "stationName");
  objc_msgSend(v5, "setName:", v7);

}

void sub_100207DB0(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t (*v14)();
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v48 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v1, "actions");
  v7 = sub_1000DD108(0, &qword_100552788, UIAlertAction_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v32 = v8;
    else
      v32 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease();
    v52 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_24;
LABEL_3:
  if (v9 < 1)
  {
    __break(1u);
    return;
  }
  v43 = v2;
  v44 = a1;
  v10 = 0;
  v11 = (char *)_swiftEmptyArrayStorage;
  v45 = v8 & 0xC000000000000001;
  v46 = v9;
  v47 = v8;
  do
  {
    if (v45)
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
    else
      v12 = *(id *)(v8 + 8 * v10 + 32);
    v13 = v12;
    v14 = (uint64_t (*)())objc_msgSend(v12, "handler", v43, v44);
    if (v14)
    {
      v15 = swift_allocObject(&unk_10050EAB0, 24, 7);
      *(_QWORD *)(v15 + 16) = v14;
      v14 = sub_10020D684;
    }
    else
    {
      v15 = 0;
    }
    v16 = objc_msgSend(v13, "title");
    if (v16)
    {
      v17 = v16;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

    }
    else
    {
      v51 = 0;
      v19 = 0xE000000000000000;
    }
    v20 = (_QWORD *)swift_allocObject(&unk_10050EA88, 40, 7);
    v20[2] = v14;
    v20[3] = v15;
    v20[4] = v13;
    sub_1000DB0D8((uint64_t)v14, v15);
    v21 = v13;
    v22 = v48;
    v23 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v50);
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1000DE994(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v52 = v11;
    if (v28 >= v27 >> 1)
      v52 = sub_1000DE994((char *)(v27 > 1), v28 + 1, 1, v52);
    ++v10;
    v30 = v51;
    v29 = v52;
    *((_QWORD *)v52 + 2) = v28 + 1;
    v11 = v29;
    v31 = &v29[56 * v28];
    *((_QWORD *)v31 + 4) = v24;
    *((_QWORD *)v31 + 5) = v26;
    *((_QWORD *)v31 + 6) = v30;
    *((_QWORD *)v31 + 7) = v19;
    v31[64] = 2;
    *((_QWORD *)v31 + 9) = &unk_100552798;
    *((_QWORD *)v31 + 10) = v20;
    sub_1000DB26C((uint64_t)v14, v15);

    v8 = v47;
  }
  while (v46 != v10);
  swift_bridgeObjectRelease();
  v2 = v43;
  a1 = v44;
LABEL_25:
  v33 = objc_msgSend(v2, "title");
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0;
  }
  v38 = objc_msgSend(v2, "message");
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

  }
  else
  {
    v40 = 0;
    v42 = 0;
  }
  *(_QWORD *)a1 = v35;
  *(_QWORD *)(a1 + 8) = v37;
  *(_QWORD *)(a1 + 16) = v40;
  *(_QWORD *)(a1 + 24) = v42;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v52;
  *(_QWORD *)(a1 + 48) = 0;
}

void sub_100208154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD v13[3];
  void *v14;

  v13[0] = a1;
  swift_errorRetain(a1);
  v7 = sub_10000B4C8((uint64_t *)&unk_100550630);
  type metadata accessor for MPCError(0);
  v9 = v8;
  if (swift_dynamicCast(&v14, v13, v7, v8, 6))
  {
    v10 = v14;
    v13[0] = v14;
    v11 = sub_10001254C(&qword_10054CB30, (uint64_t (*)(uint64_t))type metadata accessor for MPCError, (uint64_t)&unk_10042A358);
    _BridgedStoredNSError.code.getter(v9, v11);

    if (v14 == (void *)10)
    {
      v12 = (_BYTE *)(a4 + 16);
    }
    else if (v14 == (void *)11)
    {
      v12 = (_BYTE *)(a3 + 16);
    }
    else
    {
      if (v14 != (void *)17)
        return;
      v12 = (_BYTE *)(a2 + 16);
    }
    swift_beginAccess(v12, v13, 1, 0);
    *v12 = 1;
  }
}

uint64_t sub_100208258(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = a2;
  v3 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002082B4, 0, 0);
}

uint64_t sub_1002082B4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *Strong;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(__int128 **)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80) + 16;
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 1, 1, v4);
  v5 = swift_allocObject(&unk_10050EAD8, 88, 7);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  *(_QWORD *)(v5 + 80) = *((_QWORD *)v2 + 6);
  *(_OWORD *)(v5 + 48) = v7;
  *(_OWORD *)(v5 + 64) = v8;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v0 + 40) = *v2;
  *(_OWORD *)(v0 + 56) = v2[1];
  v9 = *((_QWORD *)v2 + 5);
  v10 = *((_QWORD *)v2 + 6);
  sub_10005001C(v0 + 40);
  sub_10005001C(v0 + 56);
  sub_1000DB0D8(v9, v10);
  v11 = sub_10016704C(v1, (uint64_t)&unk_1005527A8, v5);
  swift_release(v11);
  swift_beginAccess(v3, v0 + 16, 0, 0);
  Strong = (_BYTE *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    Strong[OBJC_IVAR____TtC9MusicCore18PlaybackController_isErrorAlertPresented] = 0;

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002083E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1002083FC, 0, 0);
}

uint64_t sub_1002083FC()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(*(_QWORD *)(v0 + 24) + 40);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 40) = v2;
    *v2 = v0;
    v2[1] = sub_100208480;
    return v4();
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100208480()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_1002084D4, 0, 0);
}

uint64_t sub_1002084D4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double PlaybackController.engine(_:requiresAuthorizationToPlay:reason:authorizationHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  _QWORD *v10;
  id v11;
  id v12;
  double result;

  sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
  v10 = (_QWORD *)swift_allocObject(&unk_10050E3A8, 56, 7);
  v10[2] = a3;
  v10[3] = v5;
  v10[4] = a2;
  v10[5] = a4;
  v10[6] = a5;
  v11 = v5;
  v12 = a2;
  swift_retain(a5);
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_10020C4BC, (uint64_t)v10);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

void sub_100208674(uint64_t a1, uint64_t a2, void *a3, void (*a4)(_QWORD, _QWORD), void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void (*v41)(_QWORD, _QWORD);
  void *v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(__int128 *, uint64_t, uint64_t);
  void *v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  char *v84;
  char *v85;
  _QWORD *v86;
  id v87;
  id v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD);
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  id v122;
  _QWORD v123[3];
  __int128 v124;
  void (*v125)(_QWORD, _QWORD);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;

  v122 = a3;
  v9 = type metadata accessor for UUID(0);
  v119 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v117 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for String.LocalizationValue(0);
  v14 = *(_QWORD *)(v118 - 8);
  v15 = __chkstk_darwin(v118);
  v116 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v105 - v17;
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000D78C(v19, (uint64_t)static Logger.playbackController);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v121 = v9;
  v120 = v11;
  v115 = v14;
  if (v23)
  {
    v24 = swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v124 = v25;
    *(_DWORD *)v24 = 136446210;
    v123[0] = a1;
    type metadata accessor for MPCExplicitContentAuthorizationReason(0);
    v27 = (char *)String.init<A>(describing:)(v123, v26);
    *(_QWORD *)(v24 + 4) = sub_1000BA30C(v27, v28, (uint64_t *)&v124);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "requiresAuthorizationToPlay with reason=%{public}s", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }

  if (a1 == 2)
  {
    v29 = objc_msgSend(v122, "modelGenericObject");
    if (v29)
    {
      v30 = v29;
      v31 = objc_msgSend(v29, "flattenedGenericObject");

      if (v31)
      {
        v32 = MPModelObject.bestIdentifier(for:)(2, 1u);
        v34 = v33;
      }
      else
      {
        v32 = 0;
        v34 = 0;
      }
      sub_1002096F4(v32, v34, a4, (uint64_t)a5);

      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  if (qword_10054BA98 != -1)
    swift_once(&qword_10054BA98, sub_100154564);
  v35 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_100431838);
  v37 = swift_getKeyPath(&unk_100431860);
  static Published.subscript.getter(&v124, v35, KeyPath, v37);
  swift_release(KeyPath);
  swift_release(v37);
  v38 = v130;
  v39 = v132;
  v40 = v133;
  v113 = v126;
  v112 = v127;
  v111 = v134;
  v110 = v135;
  if (!v130 || !v132)
  {
    v109 = a2;
    v106 = a4;
    v107 = v132;
    v114 = v130;
    v108 = v133;
    v122 = a5;
    String.LocalizationValue.init(stringLiteral:)(19279, 0xE200000000000000);
    v48 = v115;
    v49 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
    v50 = v116;
    v51 = v118;
    v49(v116, v18, v118);
    if (qword_10054B9B0 != -1)
      swift_once(&qword_10054B9B0, sub_1000ABDCC);
    v52 = qword_100561480;
    v53 = (id)qword_100561480;
    v54 = v117;
    static Locale.current.getter(v53);
    v105 = String.init(localized:table:bundle:locale:comment:)(v50, 0, 0, v52, v54, 0, 0, 256);
    v56 = v55;
    v57 = *(void (**)(char *, uint64_t))(v48 + 8);
    v57(v18, v51);
    v58 = v120;
    v59 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
    v60 = UUID.uuidString.getter(v59);
    v62 = v61;
    (*(void (**)(_QWORD *, uint64_t))(v119 + 8))(v58, v121);
    String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x8000000100449EE0);
    v49(v50, v18, v51);
    v63 = qword_100561480;
    static Locale.current.getter((id)qword_100561480);
    v64 = String.init(localized:table:bundle:locale:comment:)(v50, 0, 0, v63, v54, 0, 0, 256);
    v66 = v65;
    v57(v18, v51);
    v67 = sub_10000B4C8(&qword_100552680);
    v68 = swift_allocObject(v67, 88, 7);
    *(_OWORD *)(v68 + 16) = xmmword_100424BB0;
    *(_QWORD *)(v68 + 32) = v60;
    *(_QWORD *)(v68 + 40) = v62;
    *(_QWORD *)(v68 + 48) = v105;
    *(_QWORD *)(v68 + 56) = v56;
    *(_BYTE *)(v68 + 64) = 2;
    *(_QWORD *)(v68 + 72) = 0;
    *(_QWORD *)(v68 + 80) = 0;
    v69 = *(_QWORD *)(v109 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
    v70 = *(_QWORD *)(v109 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
    sub_10000D900((_QWORD *)(v109 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v69);
    *(_QWORD *)&v124 = v64;
    *((_QWORD *)&v124 + 1) = v66;
    v125 = 0;
    v126 = 0;
    LOBYTE(v127) = 0;
    v128 = v68;
    v129 = 0;
    LOBYTE(v130) = 0;
    v71 = *(void (**)(__int128 *, uint64_t, uint64_t))(v70 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v71(&v124, v69, v70);
    sub_10020BAA8(&v124);
    v106(0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  v105 = v129;
  v41 = v131;
  v42 = (void *)objc_opt_self(NSUserDefaults);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = objc_msgSend(v42, "standardUserDefaults");
  v123[0] = 0xD000000000000012;
  v123[1] = 0x800000010044C9C0;
  v44 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)v123, (uint64_t)&type metadata for String, v44, &v124);

  v106 = v41;
  if (!v126)
  {
    sub_100011694((uint64_t)&v124, &qword_100550FD0);
    goto LABEL_22;
  }
  v45 = sub_10000B4C8(&qword_10054D598);
  if (!swift_dynamicCast(v123, &v124, (char *)&type metadata for Any + 8, v45, 6))
  {
LABEL_22:
    v47 = v122;
    v46 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  v46 = (_QWORD *)v123[0];
  v47 = v122;
LABEL_23:
  v72 = v47;
  v73 = objc_msgSend(v47, "cloudUniversalLibraryID");
  if (v73)
  {
    v107 = v39;

    v74 = objc_msgSend(v72, "cloudUniversalLibraryID");
    if (!v74)
      goto LABEL_34;
    v75 = v74;
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    v78 = v77;

    LOBYTE(v75) = sub_10014ACA0(v76, v78, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v107;
    if ((v75 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4(1, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v114 = v38;
  v108 = v40;
  v109 = a2;
  String.LocalizationValue.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
  v79 = v115;
  v80 = v116;
  v81 = v118;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v116, v18, v118);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v82 = qword_100561480;
  v83 = (id)qword_100561480;
  v84 = v117;
  static Locale.current.getter(v83);
  v116 = (char *)String.init(localized:table:bundle:locale:comment:)(v80, 0, 0, v82, v84, 0, 0, 256);
  v117 = v85;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v18, v81);
  v86 = (_QWORD *)swift_allocObject(&unk_10050E828, 40, 7);
  v87 = v122;
  v86[2] = v122;
  v86[3] = a4;
  v86[4] = a5;
  v88 = v87;
  swift_retain(a5);
  v89 = v120;
  v90 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v115 = UUID.uuidString.getter(v90);
  v118 = v91;
  v92 = *(void (**)(_QWORD *, uint64_t))(v119 + 8);
  v93 = v121;
  v92(v89, v121);
  if (qword_10054C290 != -1)
    swift_once(&qword_10054C290, sub_10028CD9C);
  v119 = static String.cancelButtonTitle;
  v122 = (id)qword_100562370;
  v94 = swift_allocObject(&unk_10050E850, 32, 7);
  *(_QWORD *)(v94 + 16) = a4;
  *(_QWORD *)(v94 + 24) = a5;
  swift_retain(a5);
  swift_bridgeObjectRetain();
  v95 = _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v96 = UUID.uuidString.getter(v95);
  v98 = v97;
  v92(v89, v93);
  v99 = sub_10000B4C8(&qword_100552680);
  v100 = swift_allocObject(v99, 144, 7);
  *(_OWORD *)(v100 + 16) = xmmword_100424BA0;
  v101 = v118;
  *(_QWORD *)(v100 + 32) = v115;
  *(_QWORD *)(v100 + 40) = v101;
  v102 = v117;
  *(_QWORD *)(v100 + 48) = v116;
  *(_QWORD *)(v100 + 56) = v102;
  *(_BYTE *)(v100 + 64) = 2;
  *(_QWORD *)(v100 + 72) = &unk_100552690;
  *(_QWORD *)(v100 + 80) = v86;
  *(_QWORD *)(v100 + 88) = v96;
  *(_QWORD *)(v100 + 96) = v98;
  v103 = v122;
  *(_QWORD *)(v100 + 104) = v119;
  *(_QWORD *)(v100 + 112) = v103;
  *(_BYTE *)(v100 + 120) = 2;
  *(_QWORD *)(v100 + 128) = &unk_1005526A0;
  *(_QWORD *)(v100 + 136) = v94;
  v104 = *(_QWORD *)(v109 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  v121 = *(_QWORD *)(v109 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v120 = sub_10000D900((_QWORD *)(v109 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v121);
  *(_QWORD *)&v124 = v105;
  *((_QWORD *)&v124 + 1) = v114;
  v125 = v106;
  v126 = v39;
  LOBYTE(v127) = 0;
  v128 = v100;
  v129 = 0;
  LOBYTE(v130) = 0;
  v119 = *(_QWORD *)(v104 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain(v86);
  swift_bridgeObjectRetain();
  swift_retain(v94);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ((void (*)(__int128 *, uint64_t, uint64_t))v119)(&v124, v121, v104);
  swift_release(v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v39, 2);
  swift_bridgeObjectRelease_n(v114, 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_10020BAA8(&v124);
}

uint64_t sub_1002092EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch(sub_100209308, 0, 0);
}

uint64_t sub_100209308()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  id v15;
  char *v17;
  _QWORD v18[4];

  v1 = objc_msgSend(*(id *)(v0 + 64), "cloudUniversalLibraryID");
  if (!v1)
    goto LABEL_14;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  v6 = (void *)objc_opt_self(NSUserDefaults);
  v7 = objc_msgSend(v6, "standardUserDefaults");
  *(_QWORD *)(v0 + 48) = 0xD000000000000012;
  *(_QWORD *)(v0 + 56) = 0x800000010044C9C0;
  v8 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter(v0 + 48, (uint64_t)&type metadata for String, v8, (_OWORD *)(v0 + 16));

  if (!*(_QWORD *)(v0 + 40))
  {
    sub_100011694(v0 + 16, &qword_100550FD0);
    goto LABEL_6;
  }
  v9 = sub_10000B4C8(&qword_10054D598);
  if (!swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, v9, 6))
  {
LABEL_6:
    v10 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_7;
  }
  v10 = *(char **)(v0 + 48);
LABEL_7:
  v17 = v10;
  v11 = *((_QWORD *)v10 + 2);
  if (v11 >= 0x3E8)
    sub_1000E12D8(0, v11 - 999);
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    v10 = sub_1000DEAD8(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v13 = *((_QWORD *)v10 + 2);
  v12 = *((_QWORD *)v10 + 3);
  if (v13 >= v12 >> 1)
    v10 = sub_1000DEAD8((char *)(v12 > 1), v13 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v13 + 1;
  v14 = &v10[16 * v13];
  *((_QWORD *)v14 + 4) = v3;
  *((_QWORD *)v14 + 5) = v5;
  v15 = objc_msgSend(v6, "standardUserDefaults", v17);
  v18[3] = sub_10000B4C8(&qword_10054D598);
  v18[0] = v10;
  *(_QWORD *)(v0 + 16) = 0xD000000000000012;
  *(_QWORD *)(v0 + 24) = 0x800000010044C9C0;
  NSUserDefaults.subscript.setter((uint64_t)v18, v0 + 16, (uint64_t)&type metadata for String, v8);

LABEL_14:
  (*(void (**)(uint64_t, _QWORD))(v0 + 72))(1, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100209544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10020955C, 0, 0);
}

uint64_t sub_10020955C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(0, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10020969C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, a1 & 1);

}

void sub_1002096F4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  __n128 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  const char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t inited;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(void *, char);
  uint64_t v73;
  uint64_t v74;
  void (**v75)(void *, char);
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t, uint64_t);
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_QWORD, _QWORD);
  char v95[64];
  uint64_t v96[3];
  uint64_t v97;
  void *v98;

  v5 = v4;
  v92 = a4;
  v9 = sub_10000B4C8(&qword_10054C950);
  v10 = __chkstk_darwin(v9);
  v88 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v85 - v12;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v87 = (char *)&v85 - v19;
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v93 = type metadata accessor for Logger(0);
  sub_10000D78C(v93, (uint64_t)static Logger.playbackController);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v94 = a3;
  v90 = v14;
  v91 = v5;
  v89 = v15;
  v86 = v18;
  if (v23)
  {
    v24 = swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v96[0] = v25;
    *(_DWORD *)v24 = 136446210;
    swift_bridgeObjectRetain();
    v26 = (char *)Optional<A>.description.getter(a1, a2);
    v28 = v27;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v24 + 4) = sub_1000BA30C(v26, v28, v96);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Presenting Age Verification with model identifier=%{public}s", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v29 = a1;
  if (qword_10054BA98 != -1)
    swift_once(&qword_10054BA98, sub_100154564);
  v30 = static ApplicationCapabilities.Controller.shared;
  KeyPath = swift_getKeyPath(&unk_100431838);
  v32 = swift_getKeyPath(&unk_100431860);
  static Published.subscript.getter(v96, v30, KeyPath, v32);
  swift_release(KeyPath);
  swift_release(v32);
  v33 = BYTE1(v96[0]);
  v34 = v98;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v33 != 1)
  {
    v45 = *(_QWORD *)(v91 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
    v46 = *(_QWORD *)(v91 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
    sub_10000D900((_QWORD *)(v91 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator), v45);
    sub_100180914((uint64_t)v96);
    LOBYTE(v97) = 0;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 8))(v96, v45, v46);
    sub_10020BAA8(v96);
    if (qword_10054BCB0 != -1)
      swift_once(&qword_10054BCB0, sub_10020A9BC);
    v47 = sub_10000D78C(v93, (uint64_t)qword_1005524F0);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (!os_log_type_enabled(v48, v49))
      goto LABEL_26;
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    v51 = "Device is offline. Age Verification cannot proceed. Displaying fallback alert instead.";
    goto LABEL_25;
  }
  if (qword_10054C378 != -1)
    swift_once(&qword_10054C378, sub_100290AD4);
  v35 = static ExplicitRestrictionsController.shared;
  v36 = swift_beginAccess(static ExplicitRestrictionsController.shared + 24, v96, 0, 0);
  v37 = *(void **)(v35 + 24);
  v38 = v90;
  v39 = v89;
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v89 + 56))(v13, 1, 1, v90, v36);
    goto LABEL_21;
  }
  v40 = v29;
  v41 = objc_msgSend(v37, "verificationURL", v36.n128_f64[0]);
  if (v41)
  {
    v42 = v41;
    v43 = (uint64_t)v88;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v44 = 0;
  }
  else
  {
    v44 = 1;
    v43 = (uint64_t)v88;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v43, v44, 1, v38);
  sub_100011530(v43, (uint64_t)v13, &qword_10054C950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v13, 1, v38) == 1)
  {
LABEL_21:
    sub_100011694((uint64_t)v13, &qword_10054C950);
    if (qword_10054BCB0 != -1)
      swift_once(&qword_10054BCB0, sub_10020A9BC);
    v52 = sub_10000D78C(v93, (uint64_t)qword_1005524F0);
    v48 = Logger.logObject.getter(v52);
    v49 = static os_log_type_t.error.getter(v48);
    if (!os_log_type_enabled(v48, v49))
      goto LABEL_26;
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    v51 = "accountVerificationURL is missing. Age Verification cannot proceed.";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v48, v49, v51, v50, 2u);
    swift_slowDealloc(v50, -1, -1);
LABEL_26:

    if (v94)
      v94(0, 0);
    return;
  }
  v53 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v54 = v87;
  v53(v87, v13, v38);
  v55 = qword_10054BCB0;
  if (a2)
  {
    swift_bridgeObjectRetain();
    if (v55 != -1)
      swift_once(&qword_10054BCB0, sub_10020A9BC);
    v56 = sub_10000D78C(v93, (uint64_t)qword_1005524F0);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "modelObjectIdentifier parameters found for age verification context", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    v60 = sub_10000B4C8(&qword_10054F908);
    inited = swift_initStackObject(v60, v95);
    *(_OWORD *)(inited + 16) = xmmword_100424BB0;
    *(_QWORD *)(inited + 32) = 0x64496D616461;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 48) = v40;
    *(_QWORD *)(inited + 56) = a2;
    v62 = sub_10013960C(inited);
    v63 = (uint64_t)v86;
    URL.parametrize(_:)(v62, (uint64_t)v86);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v54, v38);
    v53(v54, (char *)v63, v38);
  }
  else
  {
    if (qword_10054BCB0 != -1)
      swift_once(&qword_10054BCB0, sub_10020A9BC);
    v64 = sub_10000D78C(v93, (uint64_t)qword_1005524F0);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "modelObjectIdentifier parameters missing for age verification context", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

  }
  v68 = v54;
  v69 = (char *)objc_msgSend(objc_allocWithZone((Class)_s22AgeVerificationWrapperCMa()), "init");
  v70 = swift_allocObject(&unk_10050E7D8, 24, 7);
  v71 = v91;
  swift_unknownObjectWeakInit(v70 + 16, v91);
  v72 = (void (*)(void *, char))swift_allocObject(&unk_10050E800, 40, 7);
  v73 = (uint64_t)v94;
  v74 = v92;
  *((_QWORD *)v72 + 2) = v94;
  *((_QWORD *)v72 + 3) = v74;
  *((_QWORD *)v72 + 4) = v70;
  v75 = (void (**)(void *, char))&v69[OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion];
  v76 = *(_QWORD *)&v69[OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion];
  v77 = *(_QWORD *)&v69[OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion
                      + 8];
  *v75 = sub_10020D11C;
  v75[1] = v72;
  sub_1000DB0D8(v73, v74);
  sub_1000DB26C(v76, v77);
  v78 = *(void **)(v71 + OBJC_IVAR____TtC9MusicCore18PlaybackController_ageVerificationWrapper);
  *(_QWORD *)(v71 + OBJC_IVAR____TtC9MusicCore18PlaybackController_ageVerificationWrapper) = v69;
  v79 = v69;

  v80 = (_QWORD *)(v71 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
  v81 = *(_QWORD *)(v71 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
  v82 = *(_QWORD *)(v71 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 32);
  sub_10000D900(v80, v81);
  v83 = *(void (**)(char *, char *, uint64_t, uint64_t))(v82 + 16);
  v84 = v79;
  v83(v68, v84, v81, v82);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v68, v38);
}

void sub_10020A028(id a1, char a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  void *v10;
  id v11;
  char *v12;
  void *v13;
  uint64_t v14;
  char v15[24];

  if (a3)
    a3(a2 & 1, 0);
  if (a1)
  {
    v7 = a5 + 16;
    swift_beginAccess(a5 + 16, v15, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(a5 + 16);
    if (Strong)
    {
      v9 = (void *)Strong;
      v10 = *(void **)(Strong + OBJC_IVAR____TtC9MusicCore18PlaybackController_ageVerificationWrapper);
      v11 = v10;

      if (v10)
      {

        if (a1 == v11)
        {
          swift_beginAccess(v7, &v14, 0, 0);
          v12 = (char *)swift_unknownObjectWeakLoadStrong(v7);
          if (v12)
          {
            v13 = *(void **)&v12[OBJC_IVAR____TtC9MusicCore18PlaybackController_ageVerificationWrapper];
            *(_QWORD *)&v12[OBJC_IVAR____TtC9MusicCore18PlaybackController_ageVerificationWrapper] = 0;

          }
        }
      }
    }
  }
}

uint64_t PlaybackController.displayAgeVerification(modelObject:completion:)(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    a1 = MPModelObject.bestIdentifier(for:)(2, 1u);
    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  sub_1002096F4(a1, v6, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t PlaybackController.displayAgeVerification(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = v3;
  v2[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[6] = v4;
  v2[7] = v5;
  return swift_task_switch(sub_10020A1D8, v4, v5);
}

uint64_t sub_10020A1D8(uint64_t a1)
{
  int8x16_t *v1;
  uint64_t v2;
  int8x16_t *v3;
  int8x16_t **v4;
  int8x16_t v6;

  v6 = v1[1];
  v2 = static MainActor.shared.getter(a1);
  v1[4].i64[0] = v2;
  v3 = (int8x16_t *)swift_task_alloc(32);
  v1[4].i64[1] = (uint64_t)v3;
  v3[1] = vextq_s8(v6, v6, 8uLL);
  v4 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v1[5].i64[0] = (uint64_t)v4;
  *v4 = v1;
  v4[1] = (int8x16_t *)sub_10020A298;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, v2, &protocol witness table for MainActor, 0xD00000000000001CLL, 0x800000010044C7F0, sub_10020C4C0, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10020A298()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10020A30C;
  }
  else
  {
    v7 = v2[9];
    swift_release(v2[8]);
    swift_task_dealloc(v7);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_1000DD0D4;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10020A30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020A354(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_10000B4C8((uint64_t *)&unk_100550A90);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = a3[3];
  v9 = a3[4];
  sub_10000D900(a3, v8);
  v10 = dispatch thunk of MusicItem.id.getter(v8, v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10050E7B0, v14 + v7, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_1002096F4(v10, v12, (void (*)(_QWORD, _QWORD))sub_10020D06C, v15);
  swift_release(v15);
  return swift_bridgeObjectRelease();
}

void PlaybackController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCore.PlaybackController", 28, "init()", 6, 0);
  __break(1u);
}

id sub_10020A544()
{
  char *v0;
  void *v1;
  objc_class *ObjectType;
  void (*v3)(_QWORD, _QWORD);
  uint64_t v4;
  objc_super v6;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = *(void (**)(_QWORD, _QWORD))&v0[OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion];
  if (v3)
  {
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion
                      + 8];
    swift_retain(v4);
    v3(0, 0);
    sub_1000DB26C((uint64_t)v3, v4);
  }
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

double sub_10020A66C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  id v9;
  id v10;
  double result;

  sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
  v8 = (_QWORD *)swift_allocObject(&unk_10050E710, 48, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_retain(a3);
  v9 = a4;
  v10 = a1;
  static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(sub_10020CF3C, (uint64_t)v8);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_10020A708(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  _QWORD v10[5];
  _QWORD *v11;

  v1 = (_QWORD *)(result
                + OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion);
  v2 = *(_QWORD *)(result
                 + OBJC_IVAR____TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper_completion);
  if (v2)
  {
    v3 = (void *)result;
    v4 = v1[1];
    *v1 = 0;
    v1[1] = 0;
    swift_retain(v4);
    sub_1000DB26C(v2, v4);
    v5 = objc_msgSend((id)objc_opt_self(ICAgeVerificationManager), "defaultManager");
    v6 = (_QWORD *)swift_allocObject(&unk_10050E6C0, 40, 7);
    v6[2] = v2;
    v6[3] = v4;
    v6[4] = v3;
    v10[4] = sub_10020CEE4;
    v11 = v6;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100133CF8;
    v10[3] = &unk_10050E6D8;
    v7 = _Block_copy(v10);
    v8 = v11;
    sub_1000DB0D8(v2, v4);
    v9 = v3;
    objc_msgSend(v5, "getAgeVerificationStateWithCompletion:", v7, swift_release(v8).n128_f64[0]);
    _Block_release(v7);

    return sub_1000DB26C(v2, v4);
  }
  return result;
}

uint64_t sub_10020A920()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.playbackController);
  sub_10000D78C(v0, (uint64_t)static Logger.playbackController);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0xD000000000000012, 0x8000000100431760);
}

uint64_t static Logger.playbackController.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100190F30(&qword_10054BCA8, (uint64_t)static Logger.playbackController, (uint64_t)sub_10020A920, a1);
}

uint64_t sub_10020A9BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_1005524F0);
  sub_10000D78C(v0, (uint64_t)qword_1005524F0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x6669726556656741, 0xEF6E6F6974616369);
}

uint64_t sub_10020AA3C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.siriIntents);
  sub_10000D78C(v0, (uint64_t)static Logger.siriIntents);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x65746E4969726953, 0xEB0000000073746ELL);
}

uint64_t static Logger.siriIntents.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100190F30(&qword_10054BCB8, (uint64_t)static Logger.siriIntents, (uint64_t)sub_10020AA3C, a1);
}

uint64_t sub_10020AAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10020AAF0, 0, 0);
}

uint64_t sub_10020AAF0()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 16);
  if (v1)
    v1(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020AB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000B4C8(&qword_10054C950);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v4[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[9] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v4[10] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v10);
  v4[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_10020ABE8, 0, 0);
}

uint64_t sub_10020ABE8()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  __n128 v20;
  void (*v21)(_QWORD, __n128);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;

  v1 = objc_msgSend(*(id *)(v0 + 16), "action");
  v2 = objc_msgSend(v1, "type");

  if (v2 == (id)2)
  {
    v3 = objc_msgSend(*(id *)(v0 + 16), "action");
    v4 = objc_msgSend(v3, "URLString");

    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 64);
      v6 = *(_QWORD *)(v0 + 72);
      v7 = *(_QWORD *)(v0 + 56);
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v10 = v9;

      URL.init(string:)(v8, v10);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) != 1)
      {
        v27 = *(_QWORD *)(v0 + 88);
        v26 = *(_QWORD *)(v0 + 96);
        v29 = *(_QWORD *)(v0 + 72);
        v28 = *(_QWORD *)(v0 + 80);
        v30 = *(_QWORD *)(v0 + 64);
        v31 = *(_QWORD *)(v0 + 48);
        v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
        v32(v26, *(_QWORD *)(v0 + 56), v30);
        v33 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v31, 1, 1, v33);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v26, v30);
        v34 = *(unsigned __int8 *)(v29 + 80);
        v35 = (v34 + 32) & ~v34;
        v36 = swift_allocObject(&unk_10050E9B8, v35 + v28, v34 | 7);
        *(_QWORD *)(v36 + 16) = 0;
        *(_QWORD *)(v36 + 24) = 0;
        v32(v36 + v35, v27, v30);
        v37 = sub_100167068(v31, (uint64_t)&unk_100552718, v36);
        v38 = swift_release(v37);
        (*(void (**)(uint64_t, uint64_t, __n128))(v29 + 8))(v26, v30, v38);
        v21 = *(void (**)(_QWORD, __n128))(v0 + 24);
        if (!v21)
          goto LABEL_7;
        goto LABEL_6;
      }
      sub_100011694(*(_QWORD *)(v0 + 56), &qword_10054C950);
    }
  }
  v11 = *(_QWORD *)(v0 + 48);
  v12 = *(void **)(v0 + 16);
  v13 = objc_msgSend(objc_allocWithZone((Class)ICStoreDialogResponseHandler), "init");
  v14 = objc_msgSend((id)objc_opt_self(ICUserIdentity), "activeAccount");
  v15 = objc_msgSend(objc_allocWithZone((Class)ICStoreRequestContext), "initWithIdentity:", v14);

  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_10050E990, 56, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v13;
  v17[5] = v12;
  v17[6] = v15;
  v18 = v12;
  v19 = sub_1001671D4(v11, (uint64_t)&unk_100552708, (uint64_t)v17);
  v20 = swift_release(v19);
  v21 = *(void (**)(_QWORD, __n128))(v0 + 24);
  if (v21)
LABEL_6:
    v21(*(_QWORD *)(v0 + 40), v20);
LABEL_7:
  v22 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 48);
  v23 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020AEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a1;
  *(_QWORD *)(v4 + 128) = a4;
  return swift_task_switch(sub_10020AED8, 0, 0);
}

uint64_t sub_10020AED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 136) = objc_opt_self(UIApplication);
  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 144) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10020AF50, v2, v3);
}

uint64_t sub_10020AF50()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = objc_msgSend(*(id *)(v0 + 136), "sharedApplication", swift_release(*(_QWORD *)(v0 + 144)).n128_f64[0]);
  return swift_task_switch(sub_10020AFA8, 0, 0);
}

uint64_t sub_10020AFA8@<X0>(NSURL *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;

  v2 = v1;
  v3 = v1 + 2;
  v4 = (void *)v2[19];
  URL._bridgeToObjectiveC()(a1);
  v6 = v5;
  v2[20] = v5;
  sub_100139860((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_10001254C((unint64_t *)&qword_100552720, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)byte_10042A468);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v2[21] = isa;
  swift_bridgeObjectRelease();
  v2[7] = v2 + 22;
  v2[2] = v2;
  v2[3] = sub_10020B0CC;
  v8 = swift_continuation_init(v3, 0);
  v2[10] = _NSConcreteStackBlock;
  v2 += 10;
  v2[1] = 0x40000000;
  v2[2] = sub_10020B160;
  v2[3] = &unk_10050E9D0;
  v2[4] = v8;
  objc_msgSend(v4, "openURL:options:completionHandler:", v6, isa, v2);
  return swift_continuation_await(v3);
}

uint64_t sub_10020B0CC()
{
  return swift_task_switch(sub_10020B118, 0, 0);
}

uint64_t sub_10020B118()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 160);
  v2 = *(void **)(v0 + 168);
  v3 = *(void **)(v0 + 152);
  **(_BYTE **)(v0 + 120) = *(_BYTE *)(v0 + 176);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020B160(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_10020B174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[17] = a5;
  v6[18] = a6;
  v6[15] = a1;
  v6[16] = a4;
  return swift_task_switch(sub_10020B190, 0, 0);
}

uint64_t sub_10020B190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(void **)(v0 + 128);
  v4 = objc_msgSend(*(id *)(v0 + 136), "action");
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 56) = v0 + 168;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_10020B25C;
  v5 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v6 = (_QWORD *)(v0 + 80);
  v6[1] = 0x40000000;
  v6[2] = sub_10020B34C;
  v6[3] = &unk_10050E9E8;
  v6[4] = v5;
  objc_msgSend(v3, "handleButtonAction:usingRequestContext:withCompletionHandler:", v4, v2, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_10020B25C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_10020B2F8;
  else
    v2 = sub_10020B2BC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10020B2BC()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 168);

  **(_BYTE **)(v0 + 120) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020B2F8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v1 + 152);
  v3 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);
  swift_errorRelease(v3);

  **(_BYTE **)(v1 + 120) = 2;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10020B34C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10000B4C8((uint64_t *)&unk_100550630);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

void sub_10020B3CC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1004316C0);
  v5 = swift_getKeyPath(&unk_1004316E8);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  *a2 = v6;
}

void sub_10020B448(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_100212CDC(v1);
}

void sub_10020B478(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_100212CDC(v1);
}

unint64_t sub_10020B4A4()
{
  unint64_t result;

  result = qword_100552528;
  if (!qword_100552528)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Player.PlaybackError, &type metadata for Player.PlaybackError);
    atomic_store(result, &qword_100552528);
  }
  return result;
}

unint64_t sub_10020B4E8()
{
  unint64_t result;

  result = qword_100552538;
  if (!qword_100552538)
  {
    result = swift_getWitnessTable(byte_1004317F8, &type metadata for PlaybackController.CommandError);
    atomic_store(result, (unint64_t *)&qword_100552538);
  }
  return result;
}

uint64_t sub_10020B52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

void sub_10020B55C(id a1, char a2)
{
  if (a2 == 2)
  {
LABEL_4:
    sub_10020B580(a1);
    return;
  }
  if (a2 != 1)
  {
    if (a2)
      return;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease(a1);
}

void sub_10020B580(id a1)
{
  if ((unint64_t)a1 >= 5)

}

id sub_10020B590(id result, char a2)
{
  if (a2 == 2)
    return sub_10020B5B4(result);
  if (a2 != 1)
  {
    if (a2)
      return result;
    return sub_10020B5B4(result);
  }
  return (id)swift_bridgeObjectRetain();
}

id sub_10020B5B4(id result)
{
  if ((unint64_t)result >= 5)
    return result;
  return result;
}

uint64_t sub_10020B5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  v8 = type metadata accessor for MainActor(0);
  v7[12] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v7[13] = v9;
  v7[14] = v10;
  return swift_task_switch(sub_10020B63C, v9, v10);
}

uint64_t sub_10020B63C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31[2];

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC9MusicCore18PlaybackController_player);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 120) = *v1;
  if (!v2)
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v21 = sub_10020B4E8();
    v22 = swift_allocError(&type metadata for PlaybackController.CommandError, v21, 0, 0);
    *(_QWORD *)v23 = 0;
    *(_BYTE *)(v23 + 8) = 3;
    swift_willThrow(v22);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v24);
  }
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(void **)(v0 + 40);
  swift_retain(v2);
  v6 = sub_1002020E0(v5, v4, v3);
  *(_QWORD *)(v0 + 128) = v6;
  if (!v6[2])
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v25 = sub_10020B4E8();
    v26 = swift_allocError(&type metadata for PlaybackController.CommandError, v25, 0, 0);
    *(_QWORD *)v27 = v6;
    *(_BYTE *)(v27 + 8) = 1;
    swift_willThrow(v26);
    v24 = swift_release(v2);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v24);
  }
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = type metadata accessor for Logger(0);
  sub_10000D78C(v8, (uint64_t)static Logger.playbackController);
  swift_bridgeObjectRetain_n(v7, 2);
  v9 = swift_bridgeObjectRetain_n(v6, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(char **)(v0 + 56);
  if (v12)
  {
    v14 = *(char **)(v0 + 48);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v31[0] = v16;
    *(_DWORD *)v15 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v15 + 4) = sub_1000BA30C(v14, v13, v31);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain();
    v17 = sub_10000B4C8(&qword_100552560);
    v18 = (char *)Array.description.getter(v6, v17);
    v20 = v19;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v15 + 14) = sub_1000BA30C(v18, v20, v31);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Intent id=%{public}s) — Performing the following commands: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 56), 2);
    swift_bridgeObjectRelease_n(v6, 2);
  }

  v29 = *(_QWORD *)(v0 + 40);
  v30 = (_QWORD *)swift_task_alloc(dword_1005525A4);
  *(_QWORD *)(v0 + 136) = v30;
  *v30 = v0;
  v30[1] = sub_10020B970;
  return PlaybackController.perform(_:options:route:intent:)((uint64_t)v6, 0x10000, *(_QWORD *)(v0 + 80), v29);
}

uint64_t sub_10020B970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  *(_QWORD *)(*(_QWORD *)v2 + 144) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[13];
    v7 = v4[14];
    v8 = sub_10020BA34;
  }
  else
  {
    v9 = v4[16];
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v9);
    v6 = v4[13];
    v7 = v4[14];
    v8 = sub_10020B9F4;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10020B9F4()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 96));
  v2 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
}

uint64_t sub_10020BA34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(v2);
  v3 = swift_release(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

uint64_t sub_10020BA7C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_errorRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

_QWORD *sub_10020BAA8(_QWORD *a1)
{
  destroy for PresentationKind(a1);
  return a1;
}

uint64_t sub_10020BAD4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  char *v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  char *v23;
  char *v24;
  char *v25;
  _BYTE v26[56];
  _BYTE v27[56];
  uint64_t v28[8];

  v2 = v1;
  if (qword_10054BDB8 != -1)
    swift_once(&qword_10054BDB8, sub_100276CE0);
  v4 = type metadata accessor for Logger(0);
  sub_10000D78C(v4, (uint64_t)static Logger.sharedListening);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v28[0] = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = v5;
    v11 = objc_msgSend(v10, "description");
    v12 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    *(_QWORD *)(v8 + 4) = sub_1000BA30C(v12, v14, v28);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received MPCSharedListeningEvent=%{public}s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v15 = v5;
  sub_100277564(v15, (uint64_t)v26);
  result = sub_100011530((uint64_t)v26, (uint64_t)v27, (uint64_t *)&unk_1005527E0);
  if (v27[48] != 255)
  {
    sub_10020D888((uint64_t)v27, (uint64_t)v28);
    v17 = (_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator);
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9MusicCore18PlaybackController_coordinator + 24);
    v19 = v17[4];
    sub_10000D900(v17, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v18, v19);
    v21 = objc_msgSend(v15, "participant");
    v22 = objc_msgSend(v21, "externalIdentifier");

    v23 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    GroupActivitiesManager.postEvent(_:participantID:)((uint64_t)v28, v23, v25);
    swift_release(v20);
    swift_bridgeObjectRelease();
    return sub_10020D8C4((uint64_t)v26);
  }
  return result;
}

double sub_10020BD64(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10054BDB8 != -1)
    swift_once(&qword_10054BDB8, sub_100276CE0);
  v7 = type metadata accessor for Logger(0);
  sub_10000D78C(v7, (uint64_t)static Logger.sharedListening);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v24 = a1;
    v25 = v12;
    *(_DWORD *)v11 = 136446210;
    swift_errorRetain(a1);
    v13 = sub_10000B4C8(&qword_1005535D0);
    v14 = (char *)String.init<A>(describing:)(&v24, v13);
    *(_QWORD *)(v11 + 4) = sub_1000BA30C(v14, v15, &v25);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Receiving didEndSharedListeningSessionWithError=%{public}s", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  type metadata accessor for MainActor(0);
  v17 = v2;
  v18 = static MainActor.shared.getter(v17);
  v19 = (_QWORD *)swift_allocObject(&unk_10050EB50, 40, 7);
  v19[2] = v18;
  v19[3] = &protocol witness table for MainActor;
  v19[4] = v17;
  v20 = sub_10016702C((uint64_t)v6, (uint64_t)&unk_1005527D8, (uint64_t)v19);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  if (a1)
  {
    sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
    v22 = swift_allocObject(&unk_10050EB78, 24, 7);
    *(_QWORD *)(v22 + 16) = v17;
    v23 = v17;
    static OS_dispatch_queue.asyncOnMainIfNeeded(_:)((uint64_t (*)(void))sub_10020D880, v22);
    *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  }
  return result;
}

void sub_10020C00C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  id v37;
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;

  v2 = v1;
  if (qword_10054BCA8 != -1)
    swift_once(&qword_10054BCA8, sub_10020A920);
  v4 = type metadata accessor for Logger(0);
  sub_10000D78C(v4, (uint64_t)static Logger.playbackController);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v39 = a1;
    *(_QWORD *)&v40 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_errorRetain(a1);
    v10 = sub_10000B4C8(&qword_1005535D0);
    v11 = (char *)String.init<A>(describing:)(&v39, v10);
    *(_QWORD *)(v8 + 4) = sub_1000BA30C(v11, v12, (uint64_t *)&v40);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "didPauseForLeaseEndWithError with error=%{public}s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    if (!a1)
      return;
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    if (!a1)
      return;
  }
  v13 = (void *)_convertErrorToNSError(_:)(a1);
  v14 = objc_msgSend(v13, "userInfo");
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCErrorUserInfoKeyLeaseStatus);
  if (*(_QWORD *)(v15 + 16) && (v18 = sub_10013B57C(v16, v17), (v19 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v15 + 56) + 32 * v18, (uint64_t)&v40);
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v41 + 1))
  {
    v20 = sub_1000DD108(0, &qword_1005527B8, ICMusicSubscriptionLeaseStatus_ptr);
    if ((swift_dynamicCast(&v39, &v40, (char *)&type metadata for Any + 8, v20, 6) & 1) == 0)
    {

      return;
    }
    v21 = v39;
    v22 = objc_msgSend(v39, "stateReasonDialog");
    if (!v22)
    {

      return;
    }
    v23 = v22;
    v24 = objc_msgSend(v13, "userInfo");
    v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(MPCErrorUserInfoKeyMetricsDictionary);
    if (*(_QWORD *)(v25 + 16) && (v28 = sub_10013B57C(v26, v27), (v29 & 1) != 0))
    {
      sub_1000760E0(*(_QWORD *)(v25 + 56) + 32 * v28, (uint64_t)&v40);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v41 + 1))
    {
      v30 = sub_10000B4C8((uint64_t *)&unk_1005527C0);
      if ((swift_dynamicCast(&v39, &v40, (char *)&type metadata for Any + 8, v30, 6) & 1) != 0)
      {
        v31 = v39;
        if (!*((_QWORD *)v39 + 2) || (v32 = sub_10013B57C(0x736E6F6974706FLL, 0xE700000000000000), (v33 & 1) == 0))
        {

          swift_bridgeObjectRelease();
          return;
        }
        sub_1000760E0(v31[7] + 32 * v32, (uint64_t)&v40);
        v34 = sub_10000B4C8(&qword_10054D598);
        if ((swift_dynamicCast(&v39, &v40, (char *)&type metadata for Any + 8, v34, 6) & 1) != 0)
        {
          v35 = v39;
          sub_1000DD108(0, (unint64_t *)&qword_100550000, OS_dispatch_queue_ptr);
          v36 = (_QWORD *)swift_allocObject(&unk_10050EB00, 48, 7);
          v36[2] = v2;
          v36[3] = v23;
          v36[4] = v31;
          v36[5] = v35;
          v37 = v2;
          v38 = v23;
          static OS_dispatch_queue.asyncOnMainIfNeeded(_:)((uint64_t (*)(void))sub_10020D778, (uint64_t)v36);

          swift_release(v36);
          return;
        }

        swift_bridgeObjectRelease();
      }
      else
      {

      }
      return;
    }

  }
  sub_100011694((uint64_t)&v40, &qword_100550FD0);
}

void sub_10020C4AC()
{
  uint64_t v0;

  sub_100206548(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10020C4C0(uint64_t a1)
{
  uint64_t v1;

  return sub_10020A354(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

void destroy for PresentationKind(_QWORD *a1)
{
  unsigned int v2;

  v2 = *((unsigned __int8 *)a1 + 56);
  if (v2 >= 3)
    v2 = *(_DWORD *)a1 + 3;
  if (v2 == 2)
  {
    if (a1[3] >= 0xFFFFFFFFuLL)
      sub_100011758(a1);
  }
  else if (v2 == 1)
  {
    swift_release(*a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    swift_bridgeObjectRelease(a1[5]);

  }
}

uint64_t initializeWithCopy for PresentationKind(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  __int128 v11;

  v3 = *((unsigned __int8 *)a2 + 56);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    v5 = a2[3];
    if (v5 < 0xFFFFFFFF)
    {
      v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    else
    {
      v6 = a2[4];
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = v6;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
    }
    *(_BYTE *)(a1 + 56) = 2;
  }
  else if (v3 == 1)
  {
    v4 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 56) = 1;
    swift_retain(v4);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = (void *)a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = v9;
  }
  return a1;
}

__int128 *assignWithCopy for PresentationKind(__int128 *a1, __int128 *a2, __n128 a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v5 = *((unsigned __int8 *)a1 + 56);
    if (v5 >= 3)
      v5 = *(_DWORD *)a1 + 3;
    if (v5 == 2)
    {
      if (*((_QWORD *)a1 + 3) >= 0xFFFFFFFFuLL)
        sub_100011758(a1);
    }
    else if (v5 == 1)
    {
      a3 = swift_release(*(_QWORD *)a1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    v6 = *((unsigned __int8 *)a2 + 56);
    if (v6 >= 3)
      v6 = *(_DWORD *)a2 + 3;
    if (v6 == 2)
    {
      v8 = *((_QWORD *)a2 + 3);
      if (v8 < 0xFFFFFFFF)
      {
        v11 = *a2;
        v12 = a2[1];
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *a1 = v11;
        a1[1] = v12;
      }
      else
      {
        *((_QWORD *)a1 + 3) = v8;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        (**(void (***)(__int128 *, __int128 *, __n128))(v8 - 8))(a1, a2, a3);
      }
      *((_BYTE *)a1 + 56) = 2;
    }
    else if (v6 == 1)
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_BYTE *)a1 + 56) = 1;
      swift_retain(v7);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      v9 = (void *)*((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 6) = v9;
      *((_BYTE *)a1 + 56) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = v9;
    }
  }
  return a1;
}

__n128 initializeWithTake for PresentationKind(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for PresentationKind(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;
  __int128 v8;

  if (a1 != (_QWORD *)a2)
  {
    v4 = *((unsigned __int8 *)a1 + 56);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      if (a1[3] >= 0xFFFFFFFFuLL)
        sub_100011758(a1);
    }
    else if (v4 == 1)
    {
      swift_release(*a1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      a1[4] = *(_QWORD *)(a2 + 32);
      v6 = 2;
    }
    else if (v5 == 1)
    {
      *a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v8;
      *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
      a1[6] = *(_QWORD *)(a2 + 48);
    }
    *((_BYTE *)a1 + 56) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PresentationKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_10020C96C(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_10020C988(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentationKind()
{
  return &type metadata for PresentationKind;
}

uint64_t *initializeBufferWithCopyOfBuffer for PresentationKind.NowPlayingDestination(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for PresentationKind.NowPlayingDestination(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t *assignWithTake for PresentationKind.NowPlayingDestination(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for PresentationKind.NowPlayingDestination()
{
  return &type metadata for PresentationKind.NowPlayingDestination;
}

uint64_t type metadata accessor for PlaybackController()
{
  return objc_opt_self(_TtC9MusicCore18PlaybackController);
}

uint64_t _s22AgeVerificationWrapperCMa()
{
  return objc_opt_self(_TtCC9MusicCore30ExplicitRestrictionsControllerP33_49A4F392108DD8BCF77701E27C86571422AgeVerificationWrapper);
}

uint64_t initializeWithCopy for PlaybackController.NowPlayingPresentationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlaybackController.NowPlayingPresentationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t assignWithTake for PlaybackController.NowPlayingPresentationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackController.NowPlayingPresentationDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackController.NowPlayingPresentationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackController.NowPlayingPresentationDescriptor()
{
  return &type metadata for PlaybackController.NowPlayingPresentationDescriptor;
}

uint64_t getEnumTagSinglePayload for PlaybackController.CommandError.AlertKind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlaybackController.CommandError.AlertKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackController.CommandError.AlertKind()
{
  return &type metadata for PlaybackController.CommandError.AlertKind;
}

uint64_t initializeBufferWithCopyOfBuffer for PlaybackController.CommandError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10020B590(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for PlaybackController.CommandError(uint64_t a1)
{
  sub_10020B55C(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for PlaybackController.CommandError(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10020B590(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10020B55C(v5, v6);
  return a1;
}

uint64_t assignWithTake for PlaybackController.CommandError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10020B55C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackController.CommandError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackController.CommandError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10020CE70(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_10020CE88(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlaybackController.CommandError()
{
  return &type metadata for PlaybackController.CommandError;
}

uint64_t sub_10020CEB0()
{
  uint64_t v0;

  return sub_10020A708(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10020CEB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

double sub_10020CEE4(void *a1)
{
  uint64_t v1;

  return sub_10020A66C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10020CEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10020CF00(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10020CF08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10020CF3C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, id))(v0 + 16))(*(_QWORD *)(v0 + 32), objc_msgSend(*(id *)(v0 + 40), "isExplicitContentAllowed"));
}

void sub_10020CF80(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10020969C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10020CF8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10020CFC0()
{
  uint64_t v0;

  sub_100208674(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void (**)(_QWORD, _QWORD))(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_10020CFD4()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020D008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000B4C8((uint64_t *)&unk_100550A90);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10020D06C(uint64_t a1, uint64_t a2)
{
  sub_10000B4C8((uint64_t *)&unk_100550A90);
  return sub_10016CA58(a1, a2);
}

uint64_t sub_10020D0C4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020D0E8()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10020D11C(void *a1, char a2)
{
  uint64_t v2;

  sub_10020A028(a1, a2, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10020D128()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020D154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_10055268C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100012D1C;
  *(_QWORD *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 64) = v4;
  return swift_task_switch(sub_100209308, 0, 0);
}

uint64_t sub_10020D1BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020D1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10055269C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100012D1C;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_10020955C, 0, 0);
}

uint64_t sub_10020D240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10020D250()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  if (v0[7])
    swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10020D294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_1005526C4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100012D1C;
  return sub_100208258(v2, v3);
}

uint64_t sub_10020D2E8(uint64_t a1)
{
  return sub_10020D598(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100207B04);
}

uint64_t sub_10020D2F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020D304(uint64_t a1)
{
  uint64_t v1;

  return sub_1001880A4(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_10020D30C(void *a1)
{
  uint64_t v1;

  sub_100207D18(a1, *(void **)(v1 + 16));
}

uint64_t sub_10020D314()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020D324()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10020D358()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1005526EC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100012D1C;
  return sub_10020AB28(v2, v3, v5, v4);
}

uint64_t sub_10020D3BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10020D3F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc(dword_100552704);
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100012D1C;
  *(_QWORD *)(v5 + 144) = v4;
  *(_OWORD *)(v5 + 128) = v6;
  *(_QWORD *)(v5 + 120) = a1;
  return swift_task_switch(sub_10020B190, 0, 0);
}

uint64_t sub_10020D470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10020D4E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = v1 + ((v4 + 32) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_100552714);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100012D1C;
  v6[15] = a1;
  v6[16] = v5;
  return swift_task_switch(sub_10020AED8, 0, 0);
}

uint64_t sub_10020D560()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10020D58C(uint64_t a1)
{
  return sub_10020D598(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100207C5C);
}

uint64_t sub_10020D598(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_10020D5AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10020D5BC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020D5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_100552794);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100012D1C;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch(sub_10020AAF0, 0, 0);
}

uint64_t sub_10020D660()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020D684()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10020D694()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  if (v0[9])
    swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10020D6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1005527A4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100012D1C;
  v4[2] = a1;
  v4[3] = v1 + 32;
  return swift_task_switch(sub_1002083FC, 0, 0);
}

uint64_t sub_10020D73C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_10020D778()
{
  uint64_t v0;

  return sub_100206318(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10020D784()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10020D7B8(unint64_t a1)
{
  uint64_t *v1;

  sub_100205E18(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10020D7C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020D7F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005527D4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100012D1C;
  return sub_1002058EC(a1, v4, v5, v6);
}

uint64_t sub_10020D85C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_10020D880()
{
  uint64_t v0;

  return sub_100205A38(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10020D888(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ComponentRenderEventSignposts(a2, a1);
  return a2;
}

uint64_t sub_10020D8C4(uint64_t a1)
{
  sub_10020D8FC(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return a1;
}

void sub_10020D8FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != -1)
    sub_10020D910(a1, a2, a3, a4, a5, a6, a7);
}

void sub_10020D910(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
    case 3:

      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 2:
LABEL_4:
      swift_bridgeObjectRelease();
      break;
    case 4:
      sub_10020D99C((uint64_t)a1, a2, a3, a4);
      break;
    default:
      return;
  }
}

uint64_t sub_10020D99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

void sub_10020D9D0(void **a1)
{
  uint64_t v1;

  sub_1001F8FA0(a1, v1);
}

unint64_t sub_10020D9D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552490;
  if (!qword_100552490)
  {
    v1 = sub_100011650(&qword_100552D10);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Published<A>.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_100552490);
  }
  return result;
}

uint64_t sub_10020DA24()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10020DA58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100552804);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100012D1C;
  return sub_1001F90C4(a1, v4, v5, v7, v6);
}

unint64_t sub_10020DAD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100552880;
  if (!qword_100552880)
  {
    v1 = sub_1000DD108(255, &qword_100552878, UISceneSession_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, &qword_100552880);
  }
  return result;
}

uint64_t sub_10020DB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005528B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10020DB80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020DB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1005528CC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100012D1C;
  v3[5] = v2;
  return swift_task_switch(sub_100205600, 0, 0);
}

uint64_t sub_10020DBF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020DC00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1005528DC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100012D1C;
  v3[5] = v2;
  return swift_task_switch(sub_10020575C, 0, 0);
}

