uint64_t sub_10028C1FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10028C318;
  else
    v4 = sub_10028C25C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 216));
}

uint64_t sub_10028C25C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 200));

  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10028C2AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = sub_10028C368;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = sub_10028CB24;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10028C318()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 200));

  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10028C368()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease(v2);

  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10028C3C4()
{
  unint64_t result;

  result = qword_100555B18;
  if (!qword_100555B18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ClassicalBridge.Type, &type metadata for ClassicalBridge.Type);
    atomic_store(result, (unint64_t *)&qword_100555B18);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassicalBridge()
{
  return &type metadata for ClassicalBridge;
}

uint64_t storeEnumTagSinglePayload for ClassicalBridge.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10028C464 + 4 * byte_100435385[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10028C498 + 4 * byte_100435380[v4]))();
}

uint64_t sub_10028C498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028C4A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10028C4A8);
  return result;
}

uint64_t sub_10028C4B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10028C4BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10028C4C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028C4C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassicalBridge.Type()
{
  return &type metadata for ClassicalBridge.Type;
}

uint64_t _s23StoreProductCoordinatorCMa()
{
  return objc_opt_self(_TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator);
}

_QWORD *sub_10028C508(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s23StoreProductCoordinatorC3AppVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  return a1;
}

_QWORD *_s23StoreProductCoordinatorC3AppVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t _s23StoreProductCoordinatorC3AppVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23StoreProductCoordinatorC3AppVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s23StoreProductCoordinatorC3AppVMa()
{
  return &_s23StoreProductCoordinatorC3AppVN;
}

uint64_t sub_10028C664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5)
  {
    if (a5 != 1)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ClassicalBridge.Error(uint64_t a1)
{
  return sub_10028C6C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_10028C6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
    return swift_bridgeObjectRelease(a2);
  if (a5 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t initializeWithCopy for ClassicalBridge.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10028C664(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ClassicalBridge.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10028C664(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_10028C6C4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for ClassicalBridge.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_10028C6C4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClassicalBridge.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClassicalBridge.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_10028C8B8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10028C8D0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClassicalBridge.Error()
{
  return &type metadata for ClassicalBridge.Error;
}

uint64_t sub_10028C8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10028C95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100555BD4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000DC64;
  return sub_100289280(v3);
}

uint64_t sub_10028C9C0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10028C9F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100555BE4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100012D1C;
  return sub_10028A9C0(a1, v4, v5, v7, v6);
}

uint64_t sub_10028CA6C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10028CA90(uint64_t a1)
{
  uint64_t v1;

  sub_10028A50C(a1, v1);
}

uint64_t sub_10028CA98()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10028CAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100555BFC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000DC64;
  v3[3] = v2;
  return swift_task_switch(sub_10028A6A0, 0, 0);
}

uint64_t *String.cancelButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C290 != -1)
    swift_once(&qword_10054C290, sub_10028CD9C);
  return &static String.cancelButtonTitle;
}

uint64_t *String.doneButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C288 != -1)
    swift_once(&qword_10054C288, sub_10028CD60);
  return &static String.doneButtonTitle;
}

uint64_t *String.okButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C280 != -1)
    swift_once(&qword_10054C280, sub_10028CD28);
  return &static String.okButtonTitle;
}

uint64_t *String.notNowButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C2A0 != -1)
    swift_once(&qword_10054C2A0, sub_10028CE5C);
  return &static String.notNowButtonTitle;
}

uint64_t *AccessibilityString.dolbyAtmosLabel.unsafeMutableAddressor()
{
  if (qword_10054C2D8 != -1)
    swift_once(&qword_10054C2D8, sub_10028D770);
  return &static AccessibilityString.dolbyAtmosLabel;
}

uint64_t *AccessibilityString.dolbyAudioLabel.unsafeMutableAddressor()
{
  if (qword_10054C2E0 != -1)
    swift_once(&qword_10054C2E0, sub_10028D7BC);
  return &static AccessibilityString.dolbyAudioLabel;
}

uint64_t *AccessibilityString.losslessLabel.unsafeMutableAddressor()
{
  if (qword_10054C2F0 != -1)
    swift_once(&qword_10054C2F0, sub_10028D858);
  return &static AccessibilityString.losslessLabel;
}

uint64_t *AccessibilityString.hiResLosslessLabel.unsafeMutableAddressor()
{
  if (qword_10054C2E8 != -1)
    swift_once(&qword_10054C2E8, sub_10028D808);
  return &static AccessibilityString.hiResLosslessLabel;
}

uint64_t sub_10028CD28(uint64_t a1)
{
  return sub_10028CFD4(a1, 19279, 0xE200000000000000, &static String.okButtonTitle, &qword_100562350);
}

uint64_t static String.okButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C280, &static String.okButtonTitle);
}

uint64_t sub_10028CD60(uint64_t a1)
{
  return sub_10028CFD4(a1, 1701736260, 0xE400000000000000, &static String.doneButtonTitle, &qword_100562360);
}

uint64_t static String.doneButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C288, &static String.doneButtonTitle);
}

uint64_t sub_10028CD9C(uint64_t a1)
{
  return sub_10028CFD4(a1, 0x6C65636E6143, 0xE600000000000000, &static String.cancelButtonTitle, &qword_100562370);
}

uint64_t static String.cancelButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C290, &static String.cancelButtonTitle);
}

uint64_t sub_10028CDDC(uint64_t a1)
{
  return sub_10028CFD4(a1, 0x6574656C6544, 0xE600000000000000, &static String.deleteButtonTitle, &qword_100562380);
}

uint64_t *String.deleteButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C298 != -1)
    swift_once(&qword_10054C298, sub_10028CDDC);
  return &static String.deleteButtonTitle;
}

uint64_t static String.deleteButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C298, &static String.deleteButtonTitle);
}

uint64_t sub_10028CE5C(uint64_t a1)
{
  return sub_10028CFD4(a1, 0x776F4E20746F4ELL, 0xE700000000000000, &static String.notNowButtonTitle, &qword_100562390);
}

uint64_t static String.notNowButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C2A0, &static String.notNowButtonTitle);
}

uint64_t sub_10028CEA0(uint64_t a1)
{
  return sub_10028CFD4(a1, 0x7373696D736944, 0xE700000000000000, &static String.dismissButtonTitle, &qword_1005623A0);
}

uint64_t *String.dismissButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C2A8 != -1)
    swift_once(&qword_10054C2A8, sub_10028CEA0);
  return &static String.dismissButtonTitle;
}

uint64_t static String.dismissButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C2A8, &static String.dismissButtonTitle);
}

uint64_t sub_10028CF24(uint64_t a1)
{
  return sub_10028CFD4(a1, 0xD000000000000014, 0x800000010044FC00, &static String.removeDownloadButtonTitle, &qword_1005623B0);
}

uint64_t *String.removeDownloadButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C2B0 != -1)
    swift_once(&qword_10054C2B0, sub_10028CF24);
  return &static String.removeDownloadButtonTitle;
}

uint64_t static String.removeDownloadButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C2B0, &static String.removeDownloadButtonTitle);
}

uint64_t sub_10028CFAC(uint64_t a1)
{
  return sub_10028CFD4(a1, 0x6961674120797254, 0xE90000000000006ELL, &static String.tryAgainButtonTitle, &qword_1005623C0);
}

uint64_t sub_10028CFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[16];

  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v18 = &v24[-v17];
  String.LocalizationValue.init(stringLiteral:)(a2, a3);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v16, v18, v12);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v19 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v20 = String.init(localized:table:bundle:locale:comment:)(v16, 0, 0, v19, v11, 0, 0, 256);
  v22 = v21;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v18, v12);
  *a4 = v20;
  *a5 = v22;
  return result;
}

uint64_t *String.tryAgainButtonTitle.unsafeMutableAddressor()
{
  if (qword_10054C2B8 != -1)
    swift_once(&qword_10054C2B8, sub_10028CFAC);
  return &static String.tryAgainButtonTitle;
}

uint64_t static String.tryAgainButtonTitle.getter()
{
  return sub_100285B2C(&qword_10054C2B8, &static String.tryAgainButtonTitle);
}

uint64_t static String.socialDisconnectMessage(networkName:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[16];

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v25[-v12];
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(119, 2);
  v17._object = (void *)0x800000010044FB20;
  v17._countAndFlagsBits = 0xD000000000000017;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000005FLL;
  v19._object = (void *)0x800000010044FB40;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v20);
  v21._countAndFlagsBits = 46;
  v21._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
  String.LocalizationValue.init(stringInterpolation:)(v16);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v22 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v23 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v22, v6, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v23;
}

uint64_t MPModelTVShow.localizedEpisodeCount.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  id v21;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v20 - v10;
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  v21 = objc_msgSend(v1, "episodesCount");
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v21, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v16._countAndFlagsBits = 0x65646F7369704520;
  v16._object = (void *)0xEB00000000297328;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  String.LocalizationValue.init(stringInterpolation:)(v14);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v17 = qword_100561480;
  static Locale.current.getter((id)qword_100561480);
  v18 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, v17, v4, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v18;
}

uint64_t sub_10028D5D4(uint64_t a1)
{
  return sub_10028DD78(a1, 0x7241206D75626C41, 0xED00006B726F7774, &static AccessibilityString.albumArtworkLabel, &qword_1005623D0);
}

uint64_t *AccessibilityString.albumArtworkLabel.unsafeMutableAddressor()
{
  if (qword_10054C2C0 != -1)
    swift_once(&qword_10054C2C0, sub_10028D5D4);
  return &static AccessibilityString.albumArtworkLabel;
}

uint64_t static AccessibilityString.albumArtworkLabel.getter()
{
  return sub_100285B2C(&qword_10054C2C0, &static AccessibilityString.albumArtworkLabel);
}

uint64_t sub_10028D664(uint64_t a1)
{
  return sub_10028DD78(a1, 0xD000000000000010, 0x800000010044FBE0, &static AccessibilityString.playlistArtworkLabel, &qword_1005623E0);
}

uint64_t *AccessibilityString.playlistArtworkLabel.unsafeMutableAddressor()
{
  if (qword_10054C2C8 != -1)
    swift_once(&qword_10054C2C8, sub_10028D664);
  return &static AccessibilityString.playlistArtworkLabel;
}

uint64_t static AccessibilityString.playlistArtworkLabel.getter()
{
  return sub_100285B2C(&qword_10054C2C8, &static AccessibilityString.playlistArtworkLabel);
}

uint64_t sub_10028D6EC(uint64_t a1)
{
  return sub_10028DD78(a1, 0x65646F43205251, 0xE700000000000000, &static AccessibilityString.qrCodeButtonLabel, &qword_1005623F0);
}

uint64_t *AccessibilityString.qrCodeButtonLabel.unsafeMutableAddressor()
{
  if (qword_10054C2D0 != -1)
    swift_once(&qword_10054C2D0, sub_10028D6EC);
  return &static AccessibilityString.qrCodeButtonLabel;
}

uint64_t static AccessibilityString.qrCodeButtonLabel.getter()
{
  return sub_100285B2C(&qword_10054C2D0, &static AccessibilityString.qrCodeButtonLabel);
}

uint64_t sub_10028D770(uint64_t a1)
{
  return sub_10028DD78(a1, 0x74412079626C6F44, 0xEB00000000736F6DLL, &static AccessibilityString.dolbyAtmosLabel, &qword_100562400);
}

uint64_t static AccessibilityString.dolbyAtmosLabel.getter()
{
  return sub_100285B2C(&qword_10054C2D8, &static AccessibilityString.dolbyAtmosLabel);
}

uint64_t sub_10028D7BC(uint64_t a1)
{
  return sub_10028DD78(a1, 0x75412079626C6F44, 0xEB000000006F6964, &static AccessibilityString.dolbyAudioLabel, &qword_100562410);
}

uint64_t static AccessibilityString.dolbyAudioLabel.getter()
{
  return sub_100285B2C(&qword_10054C2E0, &static AccessibilityString.dolbyAudioLabel);
}

uint64_t sub_10028D808(uint64_t a1)
{
  return sub_10028DD78(a1, 0x4C207365522D6948, 0xEF7373656C73736FLL, &static AccessibilityString.hiResLosslessLabel, &qword_100562420);
}

uint64_t static AccessibilityString.hiResLosslessLabel.getter()
{
  return sub_100285B2C(&qword_10054C2E8, &static AccessibilityString.hiResLosslessLabel);
}

uint64_t sub_10028D858(uint64_t a1)
{
  return sub_10028DD78(a1, 0x7373656C73736F4CLL, 0xE800000000000000, &static AccessibilityString.losslessLabel, &qword_100562430);
}

uint64_t static AccessibilityString.losslessLabel.getter()
{
  return sub_100285B2C(&qword_10054C2F0, &static AccessibilityString.losslessLabel);
}

uint64_t sub_10028D89C(uint64_t a1)
{
  return sub_10028DD78(a1, 0xD000000000000010, 0x800000010044FBC0, &static AccessibilityString.favoriteBadgeLabel, &qword_100562440);
}

uint64_t *AccessibilityString.favoriteBadgeLabel.unsafeMutableAddressor()
{
  if (qword_10054C2F8 != -1)
    swift_once(&qword_10054C2F8, sub_10028D89C);
  return &static AccessibilityString.favoriteBadgeLabel;
}

uint64_t static AccessibilityString.favoriteBadgeLabel.getter()
{
  return sub_100285B2C(&qword_10054C2F8, &static AccessibilityString.favoriteBadgeLabel);
}

uint64_t sub_10028D924(uint64_t a1)
{
  return sub_10028DD78(a1, 0x72616C75706F50, 0xE700000000000000, &static AccessibilityString.popularBadgeLabel, &qword_100562450);
}

uint64_t *AccessibilityString.popularBadgeLabel.unsafeMutableAddressor()
{
  if (qword_10054C300 != -1)
    swift_once(&qword_10054C300, sub_10028D924);
  return &static AccessibilityString.popularBadgeLabel;
}

uint64_t static AccessibilityString.popularBadgeLabel.getter()
{
  return sub_100285B2C(&qword_10054C300, &static AccessibilityString.popularBadgeLabel);
}

uint64_t sub_10028D9A8(uint64_t a1)
{
  return sub_10028DD78(a1, 0x76697372656D6D49, 0xE900000000000065, &static AccessibilityString.immersiveBadgeLabel, &qword_100562460);
}

uint64_t *AccessibilityString.immersiveBadgeLabel.unsafeMutableAddressor()
{
  if (qword_10054C308 != -1)
    swift_once(&qword_10054C308, sub_10028D9A8);
  return &static AccessibilityString.immersiveBadgeLabel;
}

uint64_t static AccessibilityString.immersiveBadgeLabel.getter()
{
  return sub_100285B2C(&qword_10054C308, &static AccessibilityString.immersiveBadgeLabel);
}

uint64_t sub_10028DA30(uint64_t a1)
{
  return sub_10028DD78(a1, 0xD000000000000012, 0x800000010044FBA0, &static AccessibilityString.downloadedBadgeLabel, &qword_100562470);
}

uint64_t *AccessibilityString.downloadedBadgeLabel.unsafeMutableAddressor()
{
  if (qword_10054C310 != -1)
    swift_once(&qword_10054C310, sub_10028DA30);
  return &static AccessibilityString.downloadedBadgeLabel;
}

uint64_t static AccessibilityString.downloadedBadgeLabel.getter()
{
  return sub_100285B2C(&qword_10054C310, &static AccessibilityString.downloadedBadgeLabel);
}

uint64_t sub_10028DAB8(uint64_t a1)
{
  return sub_10028DD78(a1, 0x79616C5020776F4ELL, 0xEB00000000676E69, &static AccessibilityString.nowPlayingWafeformLabel, &qword_100562480);
}

uint64_t *AccessibilityString.nowPlayingWafeformLabel.unsafeMutableAddressor()
{
  if (qword_10054C318 != -1)
    swift_once(&qword_10054C318, sub_10028DAB8);
  return &static AccessibilityString.nowPlayingWafeformLabel;
}

uint64_t static AccessibilityString.nowPlayingWafeformLabel.getter()
{
  return sub_100285B2C(&qword_10054C318, &static AccessibilityString.nowPlayingWafeformLabel);
}

uint64_t sub_10028DB44(uint64_t a1)
{
  return sub_10028DD78(a1, 0x646573756150, 0xE600000000000000, &static AccessibilityString.pausedWafeformLabel, &qword_100562490);
}

uint64_t *AccessibilityString.pausedWafeformLabel.unsafeMutableAddressor()
{
  if (qword_10054C320 != -1)
    swift_once(&qword_10054C320, sub_10028DB44);
  return &static AccessibilityString.pausedWafeformLabel;
}

uint64_t static AccessibilityString.pausedWafeformLabel.getter()
{
  return sub_100285B2C(&qword_10054C320, &static AccessibilityString.pausedWafeformLabel);
}

uint64_t sub_10028DBC4(uint64_t a1)
{
  return sub_10028DD78(a1, 0x657469726F766146, 0xE800000000000000, &static AccessibilityString.favoriteButtonLabel, &qword_1005624A0);
}

uint64_t *AccessibilityString.favoriteButtonLabel.unsafeMutableAddressor()
{
  if (qword_10054C328 != -1)
    swift_once(&qword_10054C328, sub_10028DBC4);
  return &static AccessibilityString.favoriteButtonLabel;
}

uint64_t static AccessibilityString.favoriteButtonLabel.getter()
{
  return sub_100285B2C(&qword_10054C328, &static AccessibilityString.favoriteButtonLabel);
}

uint64_t sub_10028DC48(uint64_t a1)
{
  return sub_10028DD78(a1, 0x766146206F646E55, 0xED0000657469726FLL, &static AccessibilityString.undoFavoriteButtonLabel, &qword_1005624B0);
}

uint64_t *AccessibilityString.undoFavoriteButtonLabel.unsafeMutableAddressor()
{
  if (qword_10054C330 != -1)
    swift_once(&qword_10054C330, sub_10028DC48);
  return &static AccessibilityString.undoFavoriteButtonLabel;
}

uint64_t static AccessibilityString.undoFavoriteButtonLabel.getter()
{
  return sub_100285B2C(&qword_10054C330, &static AccessibilityString.undoFavoriteButtonLabel);
}

uint64_t sub_10028DCD8(uint64_t a1)
{
  return sub_10028DD78(a1, 2036427856, 0xE400000000000000, &static AccessibilityString.playbackPlayButtonLabel, &qword_1005624C0);
}

uint64_t *AccessibilityString.playbackPlayButtonLabel.unsafeMutableAddressor()
{
  if (qword_10054C338 != -1)
    swift_once(&qword_10054C338, sub_10028DCD8);
  return &static AccessibilityString.playbackPlayButtonLabel;
}

uint64_t static AccessibilityString.playbackPlayButtonLabel.getter()
{
  return sub_100285B2C(&qword_10054C338, &static AccessibilityString.playbackPlayButtonLabel);
}

uint64_t sub_10028DD54(uint64_t a1)
{
  return sub_10028DD78(a1, 0x656C6666756853, 0xE700000000000000, &static AccessibilityString.playbackShuffleButtonLabel, &qword_1005624D0);
}

uint64_t sub_10028DD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t result;
  _BYTE v29[16];

  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v29[-v18];
  __chkstk_darwin(v17);
  v21 = &v29[-v20];
  String.LocalizationValue.init(stringLiteral:)(a2, a3);
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16);
  v22(v19, v21, v12);
  if (qword_10054B9B0 != -1)
    swift_once(&qword_10054B9B0, sub_1000ABDCC);
  v23 = (void *)qword_100561480;
  v22(v16, v19, v12);
  static Locale.current.getter(v23);
  v24 = String.init(localized:table:bundle:locale:comment:)(v16, 0, 0, v23, v11, 0, 0, 256);
  v26 = v25;
  v27 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v27(v19, v12);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v27)(v21, v12);
  *a4 = v24;
  *a5 = v26;
  return result;
}

uint64_t *AccessibilityString.playbackShuffleButtonLabel.unsafeMutableAddressor()
{
  if (qword_10054C340 != -1)
    swift_once(&qword_10054C340, sub_10028DD54);
  return &static AccessibilityString.playbackShuffleButtonLabel;
}

uint64_t static AccessibilityString.playbackShuffleButtonLabel.getter()
{
  return sub_100285B2C(&qword_10054C340, &static AccessibilityString.playbackShuffleButtonLabel);
}

id NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

void NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.setter()
{
  sub_10028E294();
}

uint64_t NSUserDefaults.applicationScriptURL.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;

  v7 = 0xD000000000000014;
  v8 = 0x800000010044FC20;
  v2 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)&v7, (uint64_t)&type metadata for String, v2, &v9);
  if (v10)
  {
    if ((swift_dynamicCast(&v7, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v3 = v8;
      v4 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v4 = v7 & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
        URL.init(string:)(v7, v8);
        return swift_bridgeObjectRelease(v3);
      }
      swift_bridgeObjectRelease(v8);
    }
  }
  else
  {
    sub_100139528((uint64_t)&v9);
  }
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
}

uint64_t NSUserDefaults.showAllTVShows.getter()
{
  unint64_t v0;
  uint64_t result;
  char v2[16];
  __int128 v3;
  uint64_t v4;

  strcpy(v2, "showAllTVShows");
  v2[15] = -18;
  v0 = sub_1000AE4D8();
  NSUserDefaults.subscript.getter((uint64_t)v2, (uint64_t)&type metadata for String, v0, &v3);
  if (v4)
  {
    result = swift_dynamicCast(v2, &v3, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v2[0];
  }
  else
  {
    sub_100139528((uint64_t)&v3);
    return 0;
  }
  return result;
}

void (*NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.modify(uint64_t a1))(void **a1)
{
  void *v1;
  NSString v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  *(_BYTE *)(a1 + 8) = v4;
  return sub_10028E204;
}

void sub_10028E204(void **a1)
{
  sub_10028E38C(a1);
}

id NSUserDefaults.hasSeenDolbyDownloadConflictAlert.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

void NSUserDefaults.hasSeenDolbyDownloadConflictAlert.setter()
{
  sub_10028E294();
}

void sub_10028E294()
{
  void *v0;
  Class isa;
  id v2;

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setValue:forKey:", isa, v2);

}

void (*NSUserDefaults.hasSeenDolbyDownloadConflictAlert.modify(uint64_t a1))(void **a1)
{
  void *v1;
  NSString v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  *(_BYTE *)(a1 + 8) = v4;
  return sub_10028E370;
}

void sub_10028E370(void **a1)
{
  sub_10028E38C(a1);
}

void sub_10028E38C(void **a1)
{
  void *v1;
  NSString v2;
  Class isa;

  v1 = *a1;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKey:", isa, v2);

}

char *DeviceCapabilities.isInternalInstall.unsafeMutableAddressor()
{
  if (qword_10054C348 != -1)
    swift_once(&qword_10054C348, sub_10028E458);
  return &static DeviceCapabilities.isInternalInstall;
}

id static DeviceCapabilities.hasWAPICapability.getter()
{
  return sub_10028E4A4((uint64_t (*)(void))&_MobileGestalt_get_wapiCapability);
}

id static DeviceCapabilities.hasCellularDataCapability.getter()
{
  return sub_10028E4A4((uint64_t (*)(void))&_MobileGestalt_get_cellularDataCapability);
}

uint64_t sub_10028E458()
{
  uint64_t result;

  result = os_variant_has_internal_content("com.apple.Music");
  static DeviceCapabilities.isInternalInstall = result;
  return result;
}

uint64_t static DeviceCapabilities.isInternalInstall.getter()
{
  return sub_10028E934(&qword_10054C348, (unsigned __int8 *)&static DeviceCapabilities.isInternalInstall);
}

id static DeviceCapabilities.hasWatchCompanionCapability.getter()
{
  return sub_10028E4A4((uint64_t (*)(void))&MobileGestalt_get_watchCompanionCapability);
}

id sub_10028E4A4(uint64_t (*a1)(void))
{
  id result;
  void *v3;
  uint64_t v4;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v3 = result;
    v4 = a1();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028E4E8()
{
  id v0;
  void *v1;
  unsigned int deviceClassNumber;
  unsigned int v3;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    deviceClassNumber = MobileGestalt_get_deviceClassNumber();

    v3 = 0x2030100u >> (8 * deviceClassNumber);
    if (deviceClassNumber >= 4)
      LOBYTE(v3) = 0;
    static DeviceCapabilities.deviceType = v3;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.deviceType.unsafeMutableAddressor()
{
  if (qword_10054C350 != -1)
    swift_once(&qword_10054C350, sub_10028E4E8);
  return &static DeviceCapabilities.deviceType;
}

uint64_t static DeviceCapabilities.deviceType.getter()
{
  if (qword_10054C350 != -1)
    swift_once(&qword_10054C350, sub_10028E4E8);
  return static DeviceCapabilities.deviceType;
}

uint64_t sub_10028E5C4()
{
  char v0;
  uint64_t result;

  v0 = 0;
  result = MGGetProductType();
  if (result > 2158787295)
  {
    if (result <= 2311900305)
    {
      if (result != 2158787296 && result != 2270970153)
        goto LABEL_17;
    }
    else if (result != 2311900306 && result != 3645319985 && result != 3242623367)
    {
      goto LABEL_17;
    }
  }
  else if (result <= 820711326)
  {
    if (result != 228444038 && result != 502329937)
      goto LABEL_17;
  }
  else if (result != 820711327 && result != 1429914406 && result != 1721691077)
  {
LABEL_17:
    v0 = 1;
  }
  static DeviceCapabilities.supportsHighFrameRateLyricsBackground = v0;
  return result;
}

char *DeviceCapabilities.supportsHighFrameRateLyricsBackground.unsafeMutableAddressor()
{
  if (qword_10054C358 != -1)
    swift_once(&qword_10054C358, sub_10028E5C4);
  return &static DeviceCapabilities.supportsHighFrameRateLyricsBackground;
}

uint64_t static DeviceCapabilities.supportsHighFrameRateLyricsBackground.getter()
{
  return sub_10028E934(&qword_10054C358, (unsigned __int8 *)&static DeviceCapabilities.supportsHighFrameRateLyricsBackground);
}

uint64_t sub_10028E728()
{
  uint64_t result;

  result = MGGetProductType();
  static DeviceCapabilities.supportsMotionBlur = result != 1325975682;
  return result;
}

char *DeviceCapabilities.supportsMotionBlur.unsafeMutableAddressor()
{
  if (qword_10054C360 != -1)
    swift_once(&qword_10054C360, sub_10028E728);
  return &static DeviceCapabilities.supportsMotionBlur;
}

uint64_t static DeviceCapabilities.supportsMotionBlur.getter()
{
  return sub_10028E934(&qword_10054C360, (unsigned __int8 *)&static DeviceCapabilities.supportsMotionBlur);
}

void sub_10028E7B0()
{
  uint64_t v0;
  BOOL v1;
  BOOL v2;
  id v3;
  void *v4;
  char hevcDecoder8BitSupported;

  v0 = MGGetProductType();
  v1 = v0 != 3707345671 && v0 != 2159747553;
  v2 = v0 != 1119807502 && v1;
  v3 = (id)MobileGestalt_get_current_device();
  if (v3)
  {
    v4 = v3;
    hevcDecoder8BitSupported = MobileGestalt_get_hevcDecoder8BitSupported();

    static DeviceCapabilities.supportsHEIC = v2 & hevcDecoder8BitSupported;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.supportsHEIC.unsafeMutableAddressor()
{
  if (qword_10054C368 != -1)
    swift_once(&qword_10054C368, sub_10028E7B0);
  return &static DeviceCapabilities.supportsHEIC;
}

uint64_t static DeviceCapabilities.supportsHEIC.getter()
{
  return sub_10028E934(&qword_10054C368, (unsigned __int8 *)&static DeviceCapabilities.supportsHEIC);
}

void sub_10028E894()
{
  id v0;
  void *v1;
  char hasExtendedColorDisplay;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    hasExtendedColorDisplay = MobileGestalt_get_hasExtendedColorDisplay();

    static DeviceCapabilities.hasExtendedColorDisplay = hasExtendedColorDisplay;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.hasExtendedColorDisplay.unsafeMutableAddressor()
{
  if (qword_10054C370 != -1)
    swift_once(&qword_10054C370, sub_10028E894);
  return &static DeviceCapabilities.hasExtendedColorDisplay;
}

uint64_t static DeviceCapabilities.hasExtendedColorDisplay.getter()
{
  return sub_10028E934(&qword_10054C370, (unsigned __int8 *)&static DeviceCapabilities.hasExtendedColorDisplay);
}

uint64_t sub_10028E934(_QWORD *a1, unsigned __int8 *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

id static DeviceCapabilitiesObjC.hasWAPICapability.getter(uint64_t a1, uint64_t a2)
{
  id result;
  void *v3;
  uint64_t wapiCapability;

  result = (id)MobileGestalt_get_current_device(a1, a2);
  if (result)
  {
    v3 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    return (id)wapiCapability;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s9MusicCore18DeviceCapabilitiesO9diskUsageSDyAC04DiskF8CategoryOs5Int64VGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  id v46;
  unsigned __int8 v47;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t result;
  _QWORD *v61;
  int64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v0 = MGCopyAnswer(CFSTR("DiskUsage"), 0);
  if (v0)
  {
    v69 = v0;
    v1 = sub_10000B4C8(&qword_100555C40);
    swift_dynamicCast(&v68, &v69, (char *)&type metadata for Swift.AnyObject + 8, v1, 7);
    v2 = v68;
    v3 = sub_10013BB7C((uint64_t)_swiftEmptyArrayStorage);
    v4 = v2 + 64;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = -1;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    v7 = v6 & *(_QWORD *)(v2 + 64);
    v61 = (_QWORD *)v3;
    v62 = (unint64_t)(v5 + 63) >> 6;
    v8 = (void *)kMGQDiskUsageTotalSystemCapacity;
    v9 = (void *)kMGQDiskUsageTotalSystemAvailable;
    v65 = (void *)kMGQDiskUsageTotalDataCapacity;
    v64 = (void *)kMGQDiskUsageTotalDataAvailable;
    v63 = (void *)kMGQDiskUsageTotalDiskCapacity;
    swift_bridgeObjectRetain();
    v10 = 0;
    v66 = v8;
    v11 = v9;
    if (v7)
      goto LABEL_8;
LABEL_9:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v14 < v62)
    {
      v15 = *(_QWORD *)(v4 + 8 * v14);
      ++v10;
      if (v15)
        goto LABEL_26;
      v10 = v14 + 1;
      if (v14 + 1 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
        goto LABEL_26;
      v10 = v14 + 2;
      if (v14 + 2 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
        goto LABEL_26;
      v10 = v14 + 3;
      if (v14 + 3 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
        goto LABEL_26;
      v10 = v14 + 4;
      if (v14 + 4 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
      {
LABEL_26:
        v7 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v10 << 6); ; i = v12 | (v10 << 6))
        {
          v17 = 8 * i;
          v18 = *(void **)(*(_QWORD *)(v2 + 48) + v17);
          v67 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
          if (!v8)
            break;
          type metadata accessor for CFString(0);
          v20 = v19;
          v21 = sub_10028F1D0();
          v22 = v18;
          v23 = v8;
          LOBYTE(v20) = static _CFObject.== infix(_:_:)(v23, v22, v20, v21);

          v9 = v11;
          if ((v20 & 1) != 0)
          {
            v47 = 0;
LABEL_44:

            goto LABEL_45;
          }
          if (v11)
            goto LABEL_32;
LABEL_33:
          if (v65)
          {
            type metadata accessor for CFString(0);
            v32 = v31;
            v33 = sub_10028F1D0();
            v34 = v18;
            v35 = v65;
            LOBYTE(v32) = static _CFObject.== infix(_:_:)(v35, v34, v32, v33);

            if ((v32 & 1) != 0)
            {
              v47 = 2;
              goto LABEL_44;
            }
          }
          if (v64)
          {
            type metadata accessor for CFString(0);
            v37 = v36;
            v38 = sub_10028F1D0();
            v39 = v18;
            v40 = v64;
            LOBYTE(v37) = static _CFObject.== infix(_:_:)(v40, v39, v37, v38);

            if ((v37 & 1) != 0)
            {
              v47 = 3;
              goto LABEL_44;
            }
          }
          if (!v63)
          {

            v9 = v11;
LABEL_7:

            v8 = v66;
            if (!v7)
              goto LABEL_9;
            goto LABEL_8;
          }
          type metadata accessor for CFString(0);
          v42 = v41;
          v43 = sub_10028F1D0();
          v44 = v63;
          v45 = v18;
          v46 = v44;
          LOBYTE(v42) = static _CFObject.== infix(_:_:)(v46, v45, v42, v43);

          v9 = v11;
          if ((v42 & 1) == 0)
            goto LABEL_7;
          v47 = 4;
LABEL_45:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
          v50 = sub_10014620C(v47);
          v51 = v61[2];
          v52 = (v49 & 1) == 0;
          v53 = v51 + v52;
          if (__OFADD__(v51, v52))
            goto LABEL_59;
          v54 = v49;
          if (v61[3] >= v53)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1002564C0();
          }
          else
          {
            sub_1002543E8(v53, isUniquelyReferenced_nonNull_native);
            v55 = sub_10014620C(v47);
            if ((v54 & 1) != (v56 & 1))
              goto LABEL_63;
            v50 = v55;
          }
          v4 = v2 + 64;
          if ((v54 & 1) != 0)
          {
            *(_QWORD *)(v61[7] + 8 * v50) = v67;
          }
          else
          {
            v61[(v50 >> 6) + 8] |= 1 << v50;
            *(_BYTE *)(v61[6] + v50) = v47;
            *(_QWORD *)(v61[7] + 8 * v50) = v67;
            v57 = v61[2];
            v58 = __OFADD__(v57, 1);
            v59 = v57 + 1;
            if (v58)
              goto LABEL_60;
            v61[2] = v59;
          }

          swift_bridgeObjectRelease(0x8000000000000000);
          v8 = v66;
          v9 = v11;
          if (!v7)
            goto LABEL_9;
LABEL_8:
          v12 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
        v24 = v18;
        if (!v9)
          goto LABEL_33;
LABEL_32:
        v25 = v9;
        type metadata accessor for CFString(0);
        v27 = v26;
        v28 = sub_10028F1D0();
        v29 = v18;
        v30 = v25;
        LOBYTE(v27) = static _CFObject.== infix(_:_:)(v30, v29, v27, v28);

        if ((v27 & 1) != 0)
        {
          v47 = 1;
          goto LABEL_44;
        }
        goto LABEL_33;
      }
      v16 = v14 + 5;
      if (v16 < v62)
      {
        v15 = *(_QWORD *)(v4 + 8 * v16);
        if (v15)
        {
          v10 = v16;
          goto LABEL_26;
        }
        while (1)
        {
          v10 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_61;
          if (v10 >= v62)
            break;
          v15 = *(_QWORD *)(v4 + 8 * v10);
          ++v16;
          if (v15)
            goto LABEL_26;
        }
      }
    }
LABEL_57:
    swift_release(v2);
    swift_bridgeObjectRelease(v2);
    return (uint64_t)v61;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DeviceCapabilities.DiskUsageCategory);
  __break(1u);
  return result;
}

unint64_t sub_10028EF7C()
{
  unint64_t result;

  result = qword_100555C08;
  if (!qword_100555C08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeviceCapabilities.DiskUsageCategory, &type metadata for DeviceCapabilities.DiskUsageCategory);
    atomic_store(result, (unint64_t *)&qword_100555C08);
  }
  return result;
}

unint64_t sub_10028EFC4()
{
  unint64_t result;

  result = qword_100555C10;
  if (!qword_100555C10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeviceCapabilities.DeviceType, &type metadata for DeviceCapabilities.DeviceType);
    atomic_store(result, (unint64_t *)&qword_100555C10);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities()
{
  return &type metadata for DeviceCapabilities;
}

uint64_t storeEnumTagSinglePayload for DeviceCapabilities.DiskUsageCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10028F064 + 4 * byte_1004354C5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10028F098 + 4 * byte_1004354C0[v4]))();
}

uint64_t sub_10028F098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028F0A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10028F0A8);
  return result;
}

uint64_t sub_10028F0B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10028F0BCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10028F0C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028F0C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities.DiskUsageCategory()
{
  return &type metadata for DeviceCapabilities.DiskUsageCategory;
}

uint64_t storeEnumTagSinglePayload for DeviceCapabilities.DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10028F130 + 4 * byte_1004354CF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10028F164 + 4 * byte_1004354CA[v4]))();
}

uint64_t sub_10028F164(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028F16C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10028F174);
  return result;
}

uint64_t sub_10028F180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10028F188);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10028F18C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10028F194(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities.DeviceType()
{
  return &type metadata for DeviceCapabilities.DeviceType;
}

uint64_t type metadata accessor for DeviceCapabilitiesObjC()
{
  return objc_opt_self(DeviceCapabilities);
}

unint64_t sub_10028F1D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100555C48;
  if (!qword_100555C48)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable("}I\r", v1);
    atomic_store(result, (unint64_t *)&qword_100555C48);
  }
  return result;
}

uint64_t property wrapper backing initializer of EnvironmentMonitorObserver.networkType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  type metadata accessor for ICEnvironmentNetworkType(0);
  return Published.init(initialValue:)(&v3, v1);
}

uint64_t EnvironmentMonitorObserver.networkType.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1004356A0);
  v2 = swift_getKeyPath(&unk_1004356C8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_10028F2C8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1004356A0);
  v5 = swift_getKeyPath(&unk_1004356C8);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_10028F348(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1004356A0);
  v5 = swift_getKeyPath(&unk_1004356C8);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EnvironmentMonitorObserver.$networkType.getter()
{
  return sub_1001F354C(&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_100555C58);
}

uint64_t EnvironmentMonitorObserver.isNetworkConstrained.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1004356E8);
  v2 = swift_getKeyPath(&unk_100435710);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_10028F43C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1004356E8);
  v5 = swift_getKeyPath(&unk_100435710);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_10028F4BC(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1004356E8);
  v5 = swift_getKeyPath(&unk_100435710);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EnvironmentMonitorObserver.$isNetworkConstrained.getter()
{
  return sub_1001F354C(&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1005521E0);
}

uint64_t property wrapper backing initializer of EnvironmentMonitorObserver.thermalLevel(char a1)
{
  char v2;

  v2 = a1;
  return Published.init(initialValue:)(&v2, &type metadata for EnvironmentMonitorObserver.ThermalLevel);
}

uint64_t EnvironmentMonitorObserver.thermalLevel.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100435730);
  v2 = swift_getKeyPath(&unk_100435758);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_10028F5DC(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100435730);
  v5 = swift_getKeyPath(&unk_100435758);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_10028F65C(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100435730);
  v5 = swift_getKeyPath(&unk_100435758);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EnvironmentMonitorObserver.$thermalLevel.getter()
{
  return sub_1001F354C(&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_100555C78);
}

BOOL static EnvironmentMonitorObserver.ThermalLevel.< infix(_:_:)(char a1, char a2)
{
  return qword_1004358D0[a1] < qword_1004358D0[a2];
}

uint64_t EnvironmentMonitorObserver.ThermalLevel.rawValue.getter(char a1)
{
  return qword_1004358D0[a1];
}

BOOL sub_10028F71C(char *a1, char *a2)
{
  return qword_1004358D0[*a1] == qword_1004358D0[*a2];
}

Swift::Int sub_10028F740()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_1004358D0[v1]);
  return Hasher._finalize()();
}

void sub_10028F78C()
{
  char *v0;

  Hasher._combine(_:)(qword_1004358D0[*v0]);
}

Swift::Int sub_10028F7C0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_1004358D0[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10028F808@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore26EnvironmentMonitorObserverC12ThermalLevelO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10028F830(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1004358D0[*v1];
}

BOOL sub_10028F848(char *a1, char *a2)
{
  return qword_1004358D0[*a1] < qword_1004358D0[*a2];
}

BOOL sub_10028F86C(char *a1, char *a2)
{
  return qword_1004358D0[*a2] >= qword_1004358D0[*a1];
}

BOOL sub_10028F890(char *a1, char *a2)
{
  return qword_1004358D0[*a1] >= qword_1004358D0[*a2];
}

BOOL sub_10028F8B4(char *a1, char *a2)
{
  return qword_1004358D0[*a2] < qword_1004358D0[*a1];
}

unint64_t EnvironmentMonitorObserver.init()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  char *v11;
  objc_super v12;
  id v13;
  _BYTE v14[24];

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor;
  v4 = (void *)objc_opt_self(ICEnvironmentMonitor);
  v5 = v0;
  v6 = objc_msgSend(v4, "sharedMonitor");
  *(_QWORD *)&v1[v3] = v6;
  v7 = objc_msgSend(v6, "networkType");
  swift_beginAccess(&v5[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType], v14, 33, 0);
  v13 = v7;
  type metadata accessor for ICEnvironmentNetworkType(0);
  Published.init(initialValue:)(&v13, v8);
  swift_endAccess(v14);
  LOBYTE(v7) = objc_msgSend(v6, "isNetworkConstrained");
  swift_beginAccess(&v5[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained], v14, 33, 0);
  LOBYTE(v13) = (_BYTE)v7;
  Published.init(initialValue:)(&v13, &type metadata for Bool);
  swift_endAccess(v14);
  result = (unint64_t)objc_msgSend(v6, "currentThermalLevel");
  if (HIDWORD(result))
  {
    __break(1u);
  }
  else
  {
    v10 = sub_10029032C(result);
    swift_beginAccess(&v5[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel], v14, 33, 0);
    LOBYTE(v13) = v10;
    Published.init(initialValue:)(&v13, &type metadata for EnvironmentMonitorObserver.ThermalLevel);
    swift_endAccess(v14);

    v12.receiver = v5;
    v12.super_class = ObjectType;
    v11 = (char *)objc_msgSendSuper2(&v12, "init");
    objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor], "registerObserver:", v11);
    return (unint64_t)v11;
  }
  return result;
}

id EnvironmentMonitorObserver.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor], "unregisterObserver:", v0);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

double EnvironmentMonitorObserver.environmentMonitorDidChangeNetworkReachability(_:)(void *a1)
{
  return sub_10028FEA0(a1, (uint64_t)&unk_1005143C0, (uint64_t)&unk_100555C98);
}

uint64_t sub_10028FC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10028FCB4, v7, v8);
}

uint64_t sub_10028FCB4()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(*(id *)(v0 + 24), "isNetworkConstrained", swift_release(*(_QWORD *)(v0 + 32)).n128_f64[0]);
  KeyPath = swift_getKeyPath(&unk_1004356E8);
  v4 = swift_getKeyPath(&unk_100435710);
  *(_BYTE *)(v0 + 40) = v2;
  static Published.subscript.setter(v0 + 40, v1, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double EnvironmentMonitorObserver.environmentMonitorDidChangeNetworkType(_:)(void *a1)
{
  return sub_10028FEA0(a1, (uint64_t)&unk_1005143E8, (uint64_t)&unk_100555CA8);
}

uint64_t sub_10028FD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10028FDE0, v7, v8);
}

uint64_t sub_10028FDE0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(void **)(v0 + 24);
  v2 = objc_msgSend(*(id *)(v0 + 32), "networkType", swift_release(*(_QWORD *)(v0 + 40)).n128_f64[0]);
  KeyPath = swift_getKeyPath(&unk_1004356A0);
  v4 = swift_getKeyPath(&unk_1004356C8);
  *(_QWORD *)(v0 + 16) = v2;
  static Published.subscript.setter(v0 + 16, v1, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double EnvironmentMonitorObserver.environmentMonitorDidChangeThermalLevel(_:)(void *a1)
{
  return sub_10028FEA0(a1, (uint64_t)&unk_100514410, (uint64_t)&unk_100555CB8);
}

double sub_10028FEA0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v7 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = v3;
  v12 = a1;
  v13 = static MainActor.shared.getter(v12);
  v14 = (_QWORD *)swift_allocObject(a2, 48, 7);
  v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v11;
  v14[5] = v12;
  v15 = sub_10016702C((uint64_t)v9, a3, (uint64_t)v14);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_10028FF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100290004, v7, v8);
}

unint64_t sub_100290004()
{
  uint64_t v0;
  unint64_t result;
  void *v2;
  char v3;
  uint64_t KeyPath;
  uint64_t v5;

  result = (unint64_t)objc_msgSend(*(id *)(v0 + 24), "currentThermalLevel", swift_release(*(_QWORD *)(v0 + 32)).n128_f64[0]);
  if (HIDWORD(result))
  {
    __break(1u);
  }
  else
  {
    v2 = *(void **)(v0 + 16);
    v3 = sub_10029032C(result);
    KeyPath = swift_getKeyPath(&unk_100435730);
    v5 = swift_getKeyPath(&unk_100435758);
    *(_BYTE *)(v0 + 40) = v3;
    static Published.subscript.setter(v0 + 40, v2, KeyPath, v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

void sub_1002900C0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v9 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  type metadata accessor for MainActor(0);
  v13 = a3;
  v14 = a1;
  v15 = v13;
  v16 = static MainActor.shared.getter(v15);
  v17 = (_QWORD *)swift_allocObject(a4, 48, 7);
  v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v14;
  v17[5] = v15;
  v18 = sub_10016702C((uint64_t)v11, a5, (uint64_t)v17);
  swift_release(v18);

}

uint64_t EnvironmentMonitorObserver.ThermalLevel.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100290204 + 4 * byte_100435620[a1]))(0x6C616E696D6F6ELL, 0xE700000000000000);
}

uint64_t sub_100290204()
{
  return 0x746867696CLL;
}

uint64_t sub_100290218()
{
  return 0x6574617265646F6DLL;
}

uint64_t sub_100290230()
{
  return 0x7976616568;
}

uint64_t sub_100290244()
{
  return 0x676E697070617274;
}

uint64_t sub_10029026C()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_100290280()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002902B0 + 4 * byte_100435627[*v0]))(0x6C616E696D6F6ELL, 0xE700000000000000);
}

uint64_t sub_1002902B0()
{
  return 0x746867696CLL;
}

uint64_t sub_1002902C4()
{
  return 0x6574617265646F6DLL;
}

uint64_t sub_1002902DC()
{
  return 0x7976616568;
}

uint64_t sub_1002902F0()
{
  return 0x676E697070617274;
}

uint64_t sub_100290318()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_10029032C(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 10:
      result = 1;
      break;
    case 20:
      result = 2;
      break;
    case 30:
      result = 3;
      break;
    case 40:
      result = 4;
      break;
    case 50:
      result = 5;
      break;
    default:
      result = 6;
      break;
  }
  return result;
}

uint64_t _s9MusicCore26EnvironmentMonitorObserverC12ThermalLevelO8rawValueAESgSi_tcfC_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 6;
      break;
    case 1:
      result = 0;
      break;
    case 11:
      return result;
    case 21:
      result = 2;
      break;
    case 31:
      result = 3;
      break;
    case 41:
      result = 4;
      break;
    case 51:
      result = 5;
      break;
    default:
      result = 7;
      break;
  }
  return result;
}

uint64_t sub_1002903EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100555C94);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100012D1C;
  return sub_10028FC48(a1, v4, v5, v7, v6);
}

uint64_t sub_100290468(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100555CA4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100012D1C;
  return sub_10028FD74(a1, v4, v5, v7, v6);
}

uint64_t sub_1002904E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100555CB4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100012D1C;
  return sub_10028FF98(a1, v4, v5, v7, v6);
}

unint64_t sub_100290560()
{
  unint64_t result;

  result = qword_100555CC0;
  if (!qword_100555CC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EnvironmentMonitorObserver.ThermalLevel, &type metadata for EnvironmentMonitorObserver.ThermalLevel);
    atomic_store(result, (unint64_t *)&qword_100555CC0);
  }
  return result;
}

uint64_t sub_1002905A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100212F9C(a1, a2, a3, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_100555C58);
}

uint64_t sub_1002905C8(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100213008(a1, a2, a3, a4, (uint64_t *)&unk_100555DA0, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_100555C58);
}

uint64_t sub_1002905F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100212F9C(a1, a2, a3, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1005521E0);
}

uint64_t sub_100290618(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100213008(a1, a2, a3, a4, &qword_1005521E8, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1005521E0);
}

uint64_t sub_100290644(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100212F9C(a1, a2, a3, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_100555C78);
}

uint64_t sub_100290668(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100213008(a1, a2, a3, a4, (uint64_t *)&unk_100555D90, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_100555C78);
}

uint64_t sub_100290694()
{
  return type metadata accessor for EnvironmentMonitorObserver(0);
}

uint64_t type metadata accessor for EnvironmentMonitorObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_100555D50;
  if (!qword_100555D50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EnvironmentMonitorObserver);
  return result;
}

void sub_1002906D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_1002907A4(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100259500(319, (unint64_t *)&qword_100552258, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100259500(319, &qword_100555D70, (uint64_t)&type metadata for EnvironmentMonitorObserver.ThermalLevel);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
        swift_updateClassMetadata2(a1, 256, 4, v8, a1 + 80);
      }
    }
  }
}

void sub_1002907A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100555D60)
  {
    type metadata accessor for ICEnvironmentNetworkType(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100555D60);
  }
}

uint64_t storeEnumTagSinglePayload for EnvironmentMonitorObserver.ThermalLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100290844 + 4 * byte_10043569A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100290878 + 4 * byte_100435695[v4]))();
}

uint64_t sub_100290878(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100290880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100290888);
  return result;
}

uint64_t sub_100290894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10029089CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1002908A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002908A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentMonitorObserver.ThermalLevel()
{
  return &type metadata for EnvironmentMonitorObserver.ThermalLevel;
}

uint64_t sub_1002908CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100555CA4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000DC64;
  return sub_10028FD74(a1, v4, v5, v7, v6);
}

uint64_t sub_100290948()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t *ExplicitRestrictionsController.shared.unsafeMutableAddressor()
{
  if (qword_10054C378 != -1)
    swift_once(&qword_10054C378, sub_100290AD4);
  return &static ExplicitRestrictionsController.shared;
}

uint64_t ExplicitRestrictionsController.accountVerificationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v15[24];

  v3 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)&v6 = swift_beginAccess(v1 + 24, v15, 0, 0).n128_u64[0];
  v7 = *(void **)(v1 + 24);
  if (v7)
  {
    v8 = objc_msgSend(v7, "verificationURL", v6);
    if (v8)
    {
      v9 = v8;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

      v10 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    else
    {
      v13 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
    }
    return sub_1000AECC8((uint64_t)v5, a1);
  }
  else
  {
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

uint64_t sub_100290AD4()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for ExplicitRestrictionsController();
  swift_allocObject(v0, 56, 7);
  result = sub_100290B4C();
  static ExplicitRestrictionsController.shared = result;
  return result;
}

uint64_t static ExplicitRestrictionsController.shared.getter()
{
  if (qword_10054C378 != -1)
    swift_once(&qword_10054C378, sub_100290AD4);
  return swift_retain(static ExplicitRestrictionsController.shared);
}

uint64_t sub_100290B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  int v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v26[24];
  _BYTE v27[24];

  v1 = v0;
  *(_BYTE *)(v0 + 16) = 0;
  v2 = v0 + 16;
  *(_QWORD *)(v0 + 24) = 0;
  if (qword_10054C380 != -1)
    swift_once(&qword_10054C380, sub_100291488);
  v3 = static ExplicitRestrictionsController.symbols;
  v4 = unk_1005624F0;
  *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 40) = v4;
  v5 = (void *)objc_opt_self(MPRestrictionsMonitor);
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(v5, "sharedRestrictionsMonitor");
  LODWORD(v5) = objc_msgSend(v6, "allowsExplicitContent");
  swift_beginAccess(v2, v27, 1, 0);
  v7 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v1 + 16) = (_BYTE)v5;
  if ((_DWORD)v5 == v7)
  {
    v8 = v6;
  }
  else
  {
    v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_10054C388 != -1)
      swift_once(&qword_10054C388, sub_10029158C);
    objc_msgSend(v8, "postNotificationName:object:", qword_100562510, v1);

  }
  sub_100290EA8();
  v9 = objc_msgSend((id)objc_opt_self(ICAgeVerificationManager), "defaultManager");
  v10 = objc_msgSend(v9, "ageVerificationState");

  sub_1002912DC(v10);
  type metadata accessor for Whitetail.Binding();
  v11 = (void *)MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification;
  v12 = swift_allocObject(&unk_100514658, 24, 7);
  swift_weakInit(v12 + 16, v1);
  v13 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)((uint64_t)v11, 1, (uint64_t)sub_100291748, v12);
  swift_beginAccess(v1 + 48, v26, 33, 0);
  v14 = swift_retain(v13);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
  v16 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v16 >= v15 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
  specialized Array._endMutation()(v17);
  swift_endAccess(v26);
  v18 = (void *)ICAgeVerificationStateDidChangeNotification;
  v19 = swift_allocObject(&unk_100514658, 24, 7);
  swift_weakInit(v19 + 16, v1);
  v20 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)((uint64_t)v18, 1, (uint64_t)sub_100291750, v19);
  swift_beginAccess(v1 + 48, v26, 33, 0);
  v21 = swift_retain(v20);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
  v23 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v23 >= v22 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
  v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v20);
  specialized Array._endMutation()(v24);
  swift_endAccess(v26);
  swift_release(v20);
  swift_release(v13);
  return v1;
}

uint64_t sub_100290EA8()
{
  _QWORD *v0;
  double v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];

  *(_QWORD *)&v1 = swift_beginAccess(v0 + 3, v9, 0, 0).n128_u64[0];
  v2 = (void *)v0[3];
  if (v2 && objc_msgSend(v2, "treatment", v1) == (id)1)
  {
    if (qword_10054C380 != -1)
      swift_once(&qword_10054C380, sub_100291488);
    v3 = &qword_1005624F8;
  }
  else
  {
    if (qword_10054C380 != -1)
      swift_once(&qword_10054C380, sub_100291488);
    v3 = &static ExplicitRestrictionsController.symbols;
  }
  v5 = *v3;
  v4 = v3[1];
  swift_beginAccess(v0 + 4, &v8, 1, 0);
  v6 = v0[5];
  v0[4] = v5;
  v0[5] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease(v6);
}

void sub_100290F94(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  id v4;
  unsigned int v5;
  int v6;
  id v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend((id)objc_opt_self(MPRestrictionsMonitor), "sharedRestrictionsMonitor");
    v5 = objc_msgSend(v4, "allowsExplicitContent");
    swift_beginAccess(v3 + 16, &v8, 1, 0);
    v6 = *(unsigned __int8 *)(v3 + 16);
    *(_BYTE *)(v3 + 16) = v5;
    if (v5 == v6)
    {
      swift_release(v3);
      v7 = v4;
    }
    else
    {
      v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      if (qword_10054C388 != -1)
        swift_once(&qword_10054C388, sub_10029158C);
      objc_msgSend(v7, "postNotificationName:object:", qword_100562510, v3);
      swift_release(v3);

    }
  }
}

double sub_1002910C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  id v5;
  id v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend((id)objc_opt_self(ICAgeVerificationManager), "defaultManager");
    v6 = objc_msgSend(v5, "ageVerificationState");

    sub_1002912DC(v6);
    sub_100290EA8();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

void *ExplicitRestrictionsController.explicitContentIsAllowed.getter()
{
  uint64_t v0;
  void *result;
  uint64_t v2;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  if (*(_BYTE *)(v0 + 16) != 1)
    return 0;
  swift_beginAccess(v0 + 24, &v2, 0, 0);
  result = *(void **)(v0 + 24);
  if (result)
    return (void *)(((unint64_t)objc_msgSend(result, "status") & 0xFFFFFFFFFFFFFFFDLL) == 1);
  return result;
}

void sub_1002911DC(char a1)
{
  uint64_t v1;
  int v3;
  int v4;
  id v5;
  _BYTE v6[24];

  v3 = a1 & 1;
  swift_beginAccess(v1 + 16, v6, 1, 0);
  v4 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v1 + 16) = a1;
  if (v4 != v3)
  {
    v5 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_10054C388 != -1)
      swift_once(&qword_10054C388, sub_10029158C);
    objc_msgSend(v5, "postNotificationName:object:", qword_100562510, v1);

  }
}

void *ExplicitRestrictionsController.ageVerification.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 24, v4, 0, 0);
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void sub_1002912DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  _BYTE v10[24];

  v2 = v1;
  swift_beginAccess(v2 + 24, v10, 1, 0);
  v4 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  v5 = a1;
  v6 = v5;
  if (a1)
  {
    if (v4)
    {
      sub_1002916E8();
      v7 = v4;
      v8 = v6;
      v9 = static NSObject.== infix(_:_:)();

      if ((v9 & 1) != 0)
        goto LABEL_9;
    }
  }
  else if (!v4)
  {
    v7 = 0;
    v8 = v5;
    goto LABEL_9;
  }
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10054C388 != -1)
    swift_once(&qword_10054C388, sub_10029158C);
  objc_msgSend(v8, "postNotificationName:object:", qword_100562508, v2);

  v7 = v6;
LABEL_9:

}

uint64_t *ExplicitRestrictionsController.symbols.unsafeMutableAddressor()
{
  if (qword_10054C380 != -1)
    swift_once(&qword_10054C380, sub_100291488);
  return &static ExplicitRestrictionsController.symbols;
}

uint64_t ExplicitRestrictionsController.symbol.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 32, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100291488()
{
  static ExplicitRestrictionsController.symbols = 3028656112;
  unk_1005624F0 = 0xA400000000000000;
  qword_1005624F8 = 11768802;
  unk_100562500 = 0xA300000000000000;
}

uint64_t static ExplicitRestrictionsController.symbols.getter()
{
  uint64_t v0;

  if (qword_10054C380 != -1)
    swift_once(&qword_10054C380, sub_100291488);
  v0 = static ExplicitRestrictionsController.symbols;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ExplicitRestrictionsController.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t ExplicitRestrictionsController.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

NSString sub_10029158C()
{
  NSString result;

  qword_100562508 = (uint64_t)String._bridgeToObjectiveC()();
  result = String._bridgeToObjectiveC()();
  qword_100562510 = (uint64_t)result;
  return result;
}

uint64_t sub_1002915F0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 16, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

void sub_100291634(char *a1)
{
  sub_1002911DC(*a1);
}

id sub_100291658@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 24, v6, 0, 0);
  v4 = *(void **)(v3 + 24);
  *a2 = v4;
  return v4;
}

void sub_10029169C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_1002912DC(v1);
}

uint64_t type metadata accessor for ExplicitRestrictionsController()
{
  return objc_opt_self(_TtC9MusicCore30ExplicitRestrictionsController);
}

unint64_t sub_1002916E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100555E68;
  if (!qword_100555E68)
  {
    v1 = objc_opt_self(ICAgeVerificationState);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100555E68);
  }
  return result;
}

uint64_t sub_100291724()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100291748()
{
  uint64_t v0;

  sub_100290F94(v0);
}

double sub_100291750()
{
  uint64_t v0;

  return sub_1002910C4(v0);
}

uint64_t LaunchURL.GenericHandler.perform(withURL:)(uint64_t a1, int *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v5 = type metadata accessor for MainActor(0);
  v2[2] = v5;
  v2[3] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v6 = (_QWORD *)swift_task_alloc(a2[1]);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_1002917E0;
  return v8(a1);
}

uint64_t sub_1002917E0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_1002918C0;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = a1 & 1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_100291888;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_100291888()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(unsigned __int8 *)(v0 + 48), v1);
}

uint64_t sub_1002918C0()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v1);
}

uint64_t sub_1002918F8(uint64_t a1)
{
  int **v1;
  _QWORD *v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *v1;
  v5 = type metadata accessor for MainActor(0);
  v2[2] = v5;
  v2[3] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc(v4[1]);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_10029197C;
  return v8(a1);
}

uint64_t sub_10029197C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_100293554;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = a1 & 1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_100293550;
  }
  return swift_task_switch(v10, v7, v9);
}

_QWORD *static LaunchURL.ArrayBuilder.buildBlock(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9[2];
  _BYTE v10[40];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = a1 + 32;
  swift_bridgeObjectRetain();
  v3 = _swiftEmptyArrayStorage;
  do
  {
    sub_100291B58(v2, (uint64_t)v10);
    sub_100291BA0((uint64_t)v10, (uint64_t)&v7);
    if (v8)
    {
      sub_1000B47A8(&v7, (uint64_t)v9);
      sub_1000B47A8(v9, (uint64_t)&v7);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_1000DFD08(0, v3[2] + 1, 1, v3);
      v5 = v3[2];
      v4 = v3[3];
      if (v5 >= v4 >> 1)
        v3 = sub_1000DFD08((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
      v3[2] = v5 + 1;
      sub_1000B47A8(&v7, (uint64_t)&v3[5 * v5 + 4]);
    }
    else
    {
      sub_100291BE8((uint64_t)&v7);
    }
    v2 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100291B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100555E78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100291BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100555E78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100291BE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100555E78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *static LaunchURL.ArrayBuilder.buildOptional(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6[2];

  sub_100291B58(a1, (uint64_t)&v4);
  if (v5)
  {
    sub_1000B47A8(&v4, (uint64_t)v6);
    v1 = sub_10000B4C8(&qword_10054DBF8);
    v2 = swift_allocObject(v1, 72, 7);
    *(_OWORD *)(v2 + 16) = xmmword_100424BB0;
    sub_1000B47A8(v6, v2 + 32);
  }
  else
  {
    sub_100291BE8((uint64_t)&v4);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v2;
}

uint64_t sub_100291CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000B4C8(&qword_10054DBF8);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100424BB0;
  sub_1000C53BC(a1, v3 + 32);
  return v3;
}

uint64_t LaunchURL.Resolver.init(perform:handlerBuilder:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t result;

  v5 = a1 & 1;
  type metadata accessor for LaunchURL.Resolver(0);
  v6 = Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0xD000000000000012, 0x8000000100446690);
  *(_BYTE *)a3 = v5;
  result = a2(v6);
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t LaunchURL.Resolver.perform(withURL:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[36] = a1;
  v2[37] = v1;
  v3 = type metadata accessor for URL(0);
  v2[38] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[39] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v5);
  v2[41] = swift_task_alloc(v5);
  v2[42] = swift_task_alloc(v5);
  v2[43] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[44] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[45] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[46] = swift_task_alloc(v8);
  v2[47] = swift_task_alloc(v8);
  v2[48] = swift_task_alloc(v8);
  v2[49] = swift_task_alloc(v8);
  return swift_task_switch(sub_100291E64, 0, 0);
}

uint64_t sub_100291E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  void (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  _QWORD *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  int *v106;
  uint64_t v107;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(int *)(type metadata accessor for LaunchURL.Resolver(0) + 24);
  *(_DWORD *)(v0 + 488) = v9;
  v10 = v8 + v9;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 400) = v11;
  v11(v1, v10, v2);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 408) = v12;
  v13 = v12(v4, v7, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 392);
  v19 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 360);
  v20 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 312);
  if (v16)
  {
    v103 = *(_QWORD *)(v0 + 392);
    v23 = swift_slowAlloc(12, -1);
    v101 = v19;
    v24 = swift_slowAlloc(32, -1);
    v107 = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = sub_100292F84();
    v26 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
    *(_QWORD *)(v23 + 4) = sub_1000BA30C(v26, v27, &v107);
    swift_bridgeObjectRelease();
    v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v28(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Evaluating URL=%{public}s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v29 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v29(v103, v101);
  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v28(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));

    v29 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v29(v17, v19);
  }
  *(_QWORD *)(v0 + 416) = v29;
  *(_QWORD *)(v0 + 424) = v28;
  v30 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 280) = _swiftEmptyArrayStorage;
  v31 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v0 + 432) = v31;
  v32 = *(_QWORD *)(v31 + 16);
  *(_QWORD *)(v0 + 440) = v32;
  if (v32)
  {
    *(_QWORD *)(v0 + 456) = v28;
    *(_QWORD *)(v0 + 464) = 0;
    v102 = v28;
    v104 = v29;
    *(_QWORD *)(v0 + 448) = v29;
    v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v33 = *(_QWORD *)(v0 + 384);
    v34 = *(_QWORD *)(v0 + 352);
    v35 = *(_QWORD *)(v0 + 336);
    v36 = *(_QWORD *)(v0 + 304);
    v37 = v31 + 32;
    v38 = v30 + *(int *)(v0 + 488);
    v39 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRetain();
    sub_1000C53BC(v37, v0 + 56);
    v97(v33, v38, v34);
    v99(v35, v39, v36);
    v40 = sub_1000C53BC(v0 + 56, v0 + 96);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.info.getter();
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(_QWORD *)(v0 + 384);
    v45 = *(_QWORD *)(v0 + 352);
    v46 = *(_QWORD *)(v0 + 336);
    v47 = *(_QWORD *)(v0 + 304);
    if (v43)
    {
      v98 = *(_QWORD *)(v0 + 352);
      v48 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      v107 = v49;
      *(_DWORD *)v48 = 136446466;
      v50 = sub_100292F84();
      v51 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v47, v50);
      *(_QWORD *)(v48 + 4) = sub_1000BA30C(v51, v52, &v107);
      swift_bridgeObjectRelease();
      v102(v46, v47);
      *(_WORD *)(v48 + 12) = 2082;
      sub_1000C53BC(v0 + 96, v0 + 16);
      v53 = sub_10000B4C8(&qword_10054DC00);
      v54 = (char *)String.init<A>(describing:)(v0 + 16, v53);
      *(_QWORD *)(v48 + 14) = sub_1000BA30C(v54, v55, &v107);
      swift_bridgeObjectRelease();
      sub_100011758((_QWORD *)(v0 + 96));
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Resolving URL=%{public}s with handler=%{public}s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      v56 = v44;
      v57 = v98;
    }
    else
    {
      v102(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
      sub_100011758((_QWORD *)(v0 + 96));

      v56 = v44;
      v57 = v45;
    }
    v104(v56, v57);
    v83 = *(_QWORD *)(v0 + 80);
    v84 = *(_QWORD *)(v0 + 88);
    sub_10000D900((_QWORD *)(v0 + 56), v83);
    v85 = *(int **)(v84 + 8);
    v106 = (int *)((char *)v85 + *v85);
    v86 = (_QWORD *)swift_task_alloc(v85[1]);
    *(_QWORD *)(v0 + 472) = v86;
    *v86 = v0;
    v86[1] = sub_10029254C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v106)(*(_QWORD *)(v0 + 288), v83, v84);
  }
  else
  {
    v58 = v0 + 280;
    v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v60 = *(_QWORD *)(v0 + 320);
    v61 = *(_QWORD *)(v0 + 304);
    v62 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 368), v30 + *(int *)(v0 + 488), *(_QWORD *)(v0 + 352));
    v59(v60, v62, v61);
    v63 = *(_QWORD *)(v0 + 280);
    v64 = swift_bridgeObjectRetain_n(v63, 2);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.info.getter();
    v67 = os_log_type_enabled(v65, v66);
    v68 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v69 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
    v70 = *(_QWORD *)(v0 + 368);
    v105 = *(_QWORD *)(v0 + 352);
    v71 = *(_QWORD *)(v0 + 320);
    v72 = *(_QWORD *)(v0 + 304);
    if (v67)
    {
      v100 = *(_QWORD *)(v0 + 368);
      v73 = swift_slowAlloc(22, -1);
      v74 = swift_slowAlloc(64, -1);
      v107 = v74;
      *(_DWORD *)v73 = 136446466;
      v75 = sub_100292F84();
      v76 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v72, v75);
      *(_QWORD *)(v73 + 4) = sub_1000BA30C(v76, v77, &v107);
      swift_bridgeObjectRelease();
      v69(v71, v72);
      *(_WORD *)(v73 + 12) = 2082;
      swift_bridgeObjectRetain();
      v78 = sub_10000B4C8(&qword_10054DC00);
      v79 = (char *)Array.description.getter(v63, v78);
      v81 = v80;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v73 + 14) = sub_1000BA30C(v79, v81, &v107);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v63, 2);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Successfully evaluated URL=%{public}s using handlers=%{public}s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
      v82 = v74;
      v58 = v0 + 280;
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v73, -1, -1);

      v68(v100, v105);
    }
    else
    {
      v69(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
      swift_bridgeObjectRelease_n(v63, 2);

      v68(v70, v105);
    }
    v88 = *(_QWORD *)(v0 + 384);
    v89 = *(_QWORD *)(v0 + 392);
    v91 = *(_QWORD *)(v0 + 368);
    v90 = *(_QWORD *)(v0 + 376);
    v93 = *(_QWORD *)(v0 + 336);
    v92 = *(_QWORD *)(v0 + 344);
    v95 = *(_QWORD *)(v0 + 320);
    v94 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v58, v0 + 256, 0, 0);
    v96 = *(_QWORD *)(*(_QWORD *)(v0 + 280) + 16);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v89);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v96 != 0);
  }
}

uint64_t sub_10029254C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 472);
  *(_BYTE *)(v3 + 492) = a1;
  *(_QWORD *)(v3 + 480) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100292E00;
  }
  else
  {
    v5 = sub_1002925CC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002925CC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (**v25)(uint64_t, uint64_t);
  os_log_type_t v26;
  void (**v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  void (*v71)(uint64_t, uint64_t);
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  _QWORD *v99;
  void (*v100)(uint64_t, uint64_t);
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;

  v1 = (_QWORD *)(v0 + 56);
  v2 = (_QWORD *)(v0 + 280);
  if ((*(_BYTE *)(v0 + 492) & 1) != 0)
  {
    sub_1000C53BC(v0 + 56, v0 + 176);
    v3 = (_QWORD *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
      v3 = sub_1000DFD08(0, v3[2] + 1, 1, v3);
    v5 = v3[2];
    v4 = v3[3];
    if (v5 >= v4 >> 1)
      v3 = sub_1000DFD08((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
    v3[2] = v5 + 1;
    sub_1000B47A8((__int128 *)(v0 + 176), (uint64_t)&v3[5 * v5 + 4]);
    *v2 = v3;
  }
  v6 = (_BYTE *)(v0 + 492);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 288);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 296) + *(int *)(v0 + 488), *(_QWORD *)(v0 + 352));
  v7(v8, v10, v9);
  v11 = sub_1000C53BC(v0 + 56, v0 + 136);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  v14 = os_log_type_enabled(v12, v13);
  v104 = *(_QWORD *)(v0 + 352);
  v107 = *(_QWORD *)(v0 + 376);
  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 304);
  if (v14)
  {
    v100 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
    v101 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v111 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = sub_100292F84();
    v20 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    *(_QWORD *)(v17 + 4) = sub_1000BA30C(v20, v21, &v111);
    v1 = (_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    v100(v15, v16);
    *(_WORD *)(v17 + 12) = 2082;
    sub_1000C53BC(v0 + 136, v0 + 216);
    v22 = sub_10000B4C8(&qword_10054DC00);
    v23 = (char *)String.init<A>(describing:)(v0 + 216, v22);
    *(_QWORD *)(v17 + 14) = sub_1000BA30C(v23, v24, &v111);
    swift_bridgeObjectRelease();
    v25 = (void (**)(uint64_t, uint64_t))(v0 + 424);
    sub_100011758((_QWORD *)(v0 + 136));
    v26 = v13;
    v27 = (void (**)(uint64_t, uint64_t))(v0 + 416);
    _os_log_impl((void *)&_mh_execute_header, v12, v26, "Resolved URL=%{public}s with handler=%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v28 = v17;
    v6 = (_BYTE *)(v0 + 492);
    swift_slowDealloc(v28, -1, -1);

    v101(v107, v104);
  }
  else
  {
    v25 = (void (**)(uint64_t, uint64_t))(v0 + 456);
    v27 = (void (**)(uint64_t, uint64_t))(v0 + 448);
    v29 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    (*(void (**)(_QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));
    sub_100011758((_QWORD *)(v0 + 136));

    v29(v107, v104);
  }
  v30 = *v25;
  v31 = *v27;
  if (*v6 == 1 && (**(_BYTE **)(v0 + 296) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100011758(v1);
    goto LABEL_17;
  }
  v32 = *(_QWORD *)(v0 + 440);
  v33 = *(_QWORD *)(v0 + 464) + 1;
  sub_100011758(v1);
  if (v33 == v32)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v63 = *(_QWORD *)(v0 + 320);
    v64 = *(_QWORD *)(v0 + 304);
    v65 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 296) + *(int *)(v0 + 488), *(_QWORD *)(v0 + 352));
    v62(v63, v65, v64);
    v66 = *(_QWORD *)(v0 + 280);
    v67 = swift_bridgeObjectRetain_n(v66, 2);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.info.getter();
    v70 = os_log_type_enabled(v68, v69);
    v71 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v72 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
    v73 = *(_QWORD *)(v0 + 368);
    v74 = *(_QWORD *)(v0 + 352);
    v75 = *(_QWORD *)(v0 + 320);
    v76 = *(_QWORD *)(v0 + 304);
    if (v70)
    {
      v109 = *(_QWORD *)(v0 + 368);
      v77 = swift_slowAlloc(22, -1);
      v106 = v74;
      v78 = swift_slowAlloc(64, -1);
      v111 = v78;
      *(_DWORD *)v77 = 136446466;
      v79 = sub_100292F84();
      v80 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v76, v79);
      *(_QWORD *)(v77 + 4) = sub_1000BA30C(v80, v81, &v111);
      swift_bridgeObjectRelease();
      v72(v75, v76);
      *(_WORD *)(v77 + 12) = 2082;
      swift_bridgeObjectRetain();
      v82 = sub_10000B4C8(&qword_10054DC00);
      v83 = (char *)Array.description.getter(v66, v82);
      v85 = v84;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v77 + 14) = sub_1000BA30C(v83, v85, &v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v66, 2);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Successfully evaluated URL=%{public}s using handlers=%{public}s", (uint8_t *)v77, 0x16u);
      swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      v71(v109, v106);
    }
    else
    {
      v72(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
      swift_bridgeObjectRelease_n(v66, 2);

      v71(v73, v74);
    }
    v86 = *(_QWORD *)(v0 + 384);
    v87 = *(_QWORD *)(v0 + 392);
    v89 = *(_QWORD *)(v0 + 368);
    v88 = *(_QWORD *)(v0 + 376);
    v91 = *(_QWORD *)(v0 + 336);
    v90 = *(_QWORD *)(v0 + 344);
    v93 = *(_QWORD *)(v0 + 320);
    v92 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v0 + 280, v0 + 256, 0, 0);
    v94 = *(_QWORD *)(*(_QWORD *)(v0 + 280) + 16);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v87);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v94 != 0);
  }
  v103 = v30;
  v34 = *(_QWORD *)(v0 + 464) + 1;
  *(_QWORD *)(v0 + 456) = v30;
  *(_QWORD *)(v0 + 464) = v34;
  *(_QWORD *)(v0 + 448) = v31;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  v37 = *(_QWORD *)(v0 + 384);
  v105 = v31;
  v38 = *(_QWORD *)(v0 + 352);
  v39 = *(_QWORD *)(v0 + 336);
  v40 = *(_QWORD *)(v0 + 304);
  v41 = *(_QWORD *)(v0 + 288);
  v42 = *(_QWORD *)(v0 + 296) + *(int *)(v0 + 488);
  sub_1000C53BC(*(_QWORD *)(v0 + 432) + 40 * v34 + 32, (uint64_t)v1);
  v35(v37, v42, v38);
  v43 = (_QWORD *)(v0 + 96);
  v36(v39, v41, v40);
  v108 = v1;
  v44 = sub_1000C53BC((uint64_t)v1, v0 + 96);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter();
  v47 = os_log_type_enabled(v45, v46);
  v48 = *(_QWORD *)(v0 + 384);
  v49 = *(_QWORD *)(v0 + 352);
  v50 = *(_QWORD *)(v0 + 336);
  v51 = *(_QWORD *)(v0 + 304);
  if (v47)
  {
    v52 = swift_slowAlloc(22, -1);
    v102 = v49;
    v53 = swift_slowAlloc(64, -1);
    v111 = v53;
    *(_DWORD *)v52 = 136446466;
    v54 = sub_100292F84();
    v55 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v51, v54);
    *(_QWORD *)(v52 + 4) = sub_1000BA30C(v55, v56, &v111);
    swift_bridgeObjectRelease();
    v103(v50, v51);
    *(_WORD *)(v52 + 12) = 2082;
    sub_1000C53BC((uint64_t)v43, v0 + 16);
    v57 = sub_10000B4C8(&qword_10054DC00);
    v58 = (char *)String.init<A>(describing:)(v0 + 16, v57);
    *(_QWORD *)(v52 + 14) = sub_1000BA30C(v58, v59, &v111);
    swift_bridgeObjectRelease();
    sub_100011758(v43);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Resolving URL=%{public}s with handler=%{public}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    v60 = v48;
    v61 = v102;
  }
  else
  {
    v103(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
    sub_100011758(v43);

    v60 = v48;
    v61 = v49;
  }
  v105(v60, v61);
  v96 = *(_QWORD *)(v0 + 80);
  v97 = *(_QWORD *)(v0 + 88);
  sub_10000D900(v108, v96);
  v98 = *(int **)(v97 + 8);
  v110 = (int *)((char *)v98 + *v98);
  v99 = (_QWORD *)swift_task_alloc(v98[1]);
  *(_QWORD *)(v0 + 472) = v99;
  *v99 = v0;
  v99[1] = sub_10029254C;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v110)(*(_QWORD *)(v0 + 288), v96, v97);
}

uint64_t sub_100292E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  sub_100011758((_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100292EA0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100555E84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100292EEC;
  return LaunchURL.Resolver.perform(withURL:)(a1);
}

uint64_t sub_100292EEC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc(v4);
  if (v1)
    v6 = 0;
  else
    v6 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t type metadata accessor for LaunchURL.Resolver(uint64_t a1)
{
  uint64_t result;

  result = qword_100555EF8;
  if (!qword_100555EF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LaunchURL.Resolver);
  return result;
}

unint64_t sub_100292F84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100550728;
  if (!qword_100550728)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100550728);
  }
  return result;
}

unint64_t sub_100292FD0()
{
  unint64_t result;

  result = qword_100555E90;
  if (!qword_100555E90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LaunchURL.Resolver.PerformOption, &type metadata for LaunchURL.Resolver.PerformOption);
    atomic_store(result, (unint64_t *)&qword_100555E90);
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchURL()
{
  return &type metadata for LaunchURL;
}

ValueMetadata *type metadata accessor for LaunchURL.GenericHandler()
{
  return &type metadata for LaunchURL.GenericHandler;
}

ValueMetadata *type metadata accessor for LaunchURL.ArrayBuilder()
{
  return &type metadata for LaunchURL.ArrayBuilder;
}

uint64_t *initializeBufferWithCopyOfBuffer for LaunchURL.Resolver(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v10);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Logger(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for LaunchURL.Resolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100293308);
}

uint64_t sub_100293308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100293390);
}

uint64_t sub_100293390(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100293404(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100435A60;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LaunchURL.Resolver.PerformOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002934D0 + 4 * byte_100435975[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100293504 + 4 * asc_100435970[v4]))();
}

uint64_t sub_100293504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029350C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100293514);
  return result;
}

uint64_t sub_100293520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100293528);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10029352C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100293534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LaunchURL.Resolver.PerformOption()
{
  return &type metadata for LaunchURL.Resolver.PerformOption;
}

char *LifecyclePatrol.isEnabled.unsafeMutableAddressor()
{
  return &static LifecyclePatrol.isEnabled;
}

uint64_t static LifecyclePatrol.isEnabled.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static LifecyclePatrol.isEnabled, v1, 0, 0);
  return static LifecyclePatrol.isEnabled;
}

uint64_t static LifecyclePatrol.isEnabled.setter(char a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static LifecyclePatrol.isEnabled, v3, 1, 0);
  static LifecyclePatrol.isEnabled = a1;
  return result;
}

uint64_t (*static LifecyclePatrol.isEnabled.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static LifecyclePatrol.isEnabled, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t LifecyclePatrol.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, 0);
  return v1;
}

uint64_t LifecyclePatrol.init()()
{
  uint64_t v0;

  swift_unknownObjectWeakInit(v0 + 16, 0);
  return v0;
}

double LifecyclePatrol.didInit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v2 = v1;
  *(_QWORD *)&result = swift_beginAccess(&static LifecyclePatrol.isEnabled, v16, 0, 0).n128_u64[0];
  if (static LifecyclePatrol.isEnabled == 1)
  {
    v5 = sub_100105D88();
    v13 = (void *)static OS_dispatch_queue.main.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v14 = swift_allocObject(&unk_100514828, 24, 7);
    swift_unknownObjectWeakInit(v14 + 16, a1);
    v15 = swift_allocObject(&unk_100514850, 32, 7);
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = v2;
    swift_retain(v14);
    swift_retain(v2);
    OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)sub_100293A40, v15, 1.0);

    swift_release(v14);
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

uint64_t sub_100293768()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029378C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t ObjectType;
  uint64_t v25;
  _BYTE v26[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = a2 + 16;
    Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (Strong)
    {
      v8 = Strong;
      if (qword_10054C390 != -1)
        swift_once(&qword_10054C390, sub_100293B04);
      v9 = type metadata accessor for Logger(0);
      sub_10000D78C(v9, (uint64_t)qword_100555F40);
      swift_unknownObjectRetain_n(v5, 4, v10);
      v12 = swift_unknownObjectRetain_n(v8, 2, v11);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.fault.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v15 = swift_slowAlloc(32, -1);
        v16 = swift_slowAlloc(96, -1);
        v25 = v16;
        *(_DWORD *)v15 = 136446722;
        ObjectType = swift_getObjectType();
        v17 = sub_10000B4C8(&qword_100556020);
        v18 = (char *)String.init<A>(describing:)(&ObjectType, v17);
        *(_QWORD *)(v15 + 4) = sub_1000BA30C(v18, v19, &v25);
        swift_unknownObjectRelease_n(v5, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2082;
        ObjectType = v5;
        v20 = (char *)String.init<A>(describing:)(&ObjectType, &type metadata for UnsafeMutableRawPointer);
        *(_QWORD *)(v15 + 14) = sub_1000BA30C(v20, v21, &v25);
        swift_unknownObjectRelease_n(v5, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 22) = 2082;
        ObjectType = v8;
        v22 = (char *)String.init<A>(describing:)(&ObjectType, &type metadata for UnsafeMutableRawPointer);
        *(_QWORD *)(v15 + 24) = sub_1000BA30C(v22, v23, &v25);
        swift_unknownObjectRelease_n(v8, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "A new instance of %{public}s<%{public}s> while one already exists <%{public}s>", (uint8_t *)v15, 0x20u);
        swift_arrayDestroy(v16, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);
        swift_unknownObjectRelease(v8);

      }
      else
      {

        swift_unknownObjectRelease_n(v5, 4);
        swift_unknownObjectRelease_n(v8, 3);
      }
    }
    swift_unknownObjectWeakAssign(v6, v5);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t sub_100293A14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100293A40()
{
  uint64_t v0;

  return sub_10029378C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t LifecyclePatrol.willDeinit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    v4 = result;
    result = swift_unknownObjectRelease(result);
    if (v4 == a1)
      return swift_unknownObjectWeakAssign(v1 + 16, 0);
  }
  return result;
}

uint64_t LifecyclePatrol.deinit()
{
  uint64_t v0;

  sub_10019FB08(v0 + 16);
  return v0;
}

uint64_t LifecyclePatrol.__deallocating_deinit()
{
  uint64_t v0;

  sub_10019FB08(v0 + 16);
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for LifecyclePatrol()
{
  return objc_opt_self(_TtC9MusicCore15LifecyclePatrol);
}

uint64_t sub_100293B04()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_100555F40);
  sub_10000D78C(v0, (uint64_t)qword_100555F40);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0xD000000000000010, 0x800000010044FE70);
}

unint64_t sub_100293B84(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000B4C8(&qword_10054F840);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v8 << 6);
      v13 = v8;
    }
    else
    {
      v14 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v14 >= v25)
      {
LABEL_33:
        sub_100194204(a1);
        return (unint64_t)v3;
      }
      v15 = *(_QWORD *)(v26 + 8 * v14);
      v13 = v8 + 1;
      if (!v15)
      {
        v13 = v8 + 2;
        if (v8 + 2 >= v25)
          goto LABEL_33;
        v15 = *(_QWORD *)(v26 + 8 * v13);
        if (!v15)
        {
          v13 = v8 + 3;
          if (v8 + 3 >= v25)
            goto LABEL_33;
          v15 = *(_QWORD *)(v26 + 8 * v13);
          if (!v15)
          {
            v13 = v8 + 4;
            if (v8 + 4 >= v25)
              goto LABEL_33;
            v15 = *(_QWORD *)(v26 + 8 * v13);
            if (!v15)
            {
              v16 = v8 + 5;
              if (v8 + 5 >= v25)
                goto LABEL_33;
              v15 = *(_QWORD *)(v26 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v13 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_38;
                  if (v13 >= v25)
                    goto LABEL_33;
                  v15 = *(_QWORD *)(v26 + 8 * v13);
                  ++v16;
                  if (v15)
                    goto LABEL_26;
                }
              }
              v13 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v11 = (v15 - 1) & v15;
      v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }
    sub_10013BDE4(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_1000760E0(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_10013BDE4((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v27 = 0;
      v28 = 0;
      sub_100011694((uint64_t)v34, &qword_1005560E0);
      swift_bridgeObjectRelease(v28);
      sub_100194204(a1);
      swift_release(v3);
      return 0;
    }
    v17 = v27;
    v18 = v28;
    sub_1000760E0((uint64_t)v35 + 8, (uint64_t)v29);
    sub_100011694((uint64_t)v34, &qword_1005560E0);
    sub_10013BB38(v29, v30);
    *(_QWORD *)&v31 = v17;
    *((_QWORD *)&v31 + 1) = v18;
    sub_10013BB38(v30, v32);
    v19 = v31;
    sub_10013BB38(v32, v33);
    sub_10013BB38(v33, &v31);
    result = sub_10013B57C(v19, *((uint64_t *)&v19 + 1));
    v20 = result;
    if ((v21 & 1) != 0)
    {
      v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      *(_OWORD *)v9 = v19;
      v10 = (_QWORD *)(v3[7] + 32 * v20);
      sub_100011758(v10);
      result = (unint64_t)sub_10013BB38(&v31, v10);
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    result = (unint64_t)sub_10013BB38(&v31, (_OWORD *)(v3[7] + 32 * result));
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_36;
    v3[2] = v24;
LABEL_8:
    v8 = v13;
    v6 = v11;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_100293F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t result;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000B4C8(&qword_1005560D8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v5) >> 6;
  v7 = (char *)v44 + 8;
  v8 = (char *)v41 + 8;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v34 = v1;
  while (1)
  {
    if (v6)
    {
      v16 = (v6 - 1) & v6;
      v17 = __clz(__rbit64(v6)) | (v10 << 6);
      v18 = v10;
    }
    else
    {
      v19 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v19 >= v35)
      {
LABEL_36:
        sub_100194204(v1);
        return (unint64_t)v3;
      }
      v20 = *(_QWORD *)(v36 + 8 * v19);
      v18 = v10 + 1;
      if (!v20)
      {
        v18 = v10 + 2;
        if (v10 + 2 >= v35)
          goto LABEL_36;
        v20 = *(_QWORD *)(v36 + 8 * v18);
        if (!v20)
        {
          v18 = v10 + 3;
          if (v10 + 3 >= v35)
            goto LABEL_36;
          v20 = *(_QWORD *)(v36 + 8 * v18);
          if (!v20)
          {
            v18 = v10 + 4;
            if (v10 + 4 >= v35)
              goto LABEL_36;
            v20 = *(_QWORD *)(v36 + 8 * v18);
            if (!v20)
            {
              v21 = v10 + 5;
              if (v10 + 5 >= v35)
                goto LABEL_36;
              v20 = *(_QWORD *)(v36 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v18 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_41;
                  if (v18 >= v35)
                    goto LABEL_36;
                  v20 = *(_QWORD *)(v36 + 8 * v18);
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v18 = v10 + 5;
            }
          }
        }
      }
LABEL_26:
      v16 = (v20 - 1) & v20;
      v17 = __clz(__rbit64(v20)) + (v18 << 6);
    }
    sub_10013BDE4(*(_QWORD *)(v1 + 48) + 40 * v17, (uint64_t)v43);
    sub_1000760E0(*(_QWORD *)(v1 + 56) + 32 * v17, (uint64_t)v7);
    v41[0] = v44[0];
    v41[1] = v44[1];
    v42 = v45;
    v40[0] = v43[0];
    v40[1] = v43[1];
    sub_10013BDE4((uint64_t)v40, (uint64_t)v39);
    if (!swift_dynamicCast(&v37, v39, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v37 = 0;
      v38 = 0;
      sub_100011694((uint64_t)v40, &qword_1005560E0);
      v33 = v38;
LABEL_35:
      swift_bridgeObjectRelease(v33);
      sub_100194204(v1);
      swift_release(v3);
      return 0;
    }
    v23 = v37;
    v22 = v38;
    sub_1000760E0((uint64_t)v8, (uint64_t)v39);
    sub_100011694((uint64_t)v40, &qword_1005560E0);
    v24 = sub_10000B4C8(&qword_10054F928);
    if ((swift_dynamicCast(&v37, v39, (char *)&type metadata for Any + 8, v24, 6) & 1) == 0)
    {
      v37 = 0;
      swift_bridgeObjectRelease(v22);
      v33 = v37;
      goto LABEL_35;
    }
    v25 = v18;
    v26 = v37;
    result = sub_10013B57C(v23, v22);
    v27 = result;
    if ((v28 & 1) != 0)
    {
      v11 = v8;
      v12 = v7;
      v13 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v13[1]);
      *v13 = v23;
      v13[1] = v22;
      v14 = v3[7];
      v15 = 8 * v27;
      result = swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15));
      *(_QWORD *)(v14 + v15) = v26;
      v7 = v12;
      v8 = v11;
      v1 = v34;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v29 = (uint64_t *)(v3[6] + 16 * result);
    *v29 = v23;
    v29[1] = v22;
    *(_QWORD *)(v3[7] + 8 * result) = v26;
    v30 = v3[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_39;
    v3[2] = v32;
LABEL_8:
    v10 = v25;
    v6 = v16;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_10029432C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t result;
  int64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  _QWORD v43[2];
  uint64_t v44;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000B4C8((uint64_t *)&unk_10054F830);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v7 = &v44;
  v36 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (uint64_t *)&unk_1005560E8;
  v11 = (uint64_t *)&unk_1005527C0;
  v12 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v6)
    {
      v39 = (v6 - 1) & v6;
      v40 = v9;
      v20 = __clz(__rbit64(v6)) | (v9 << 6);
    }
    else
    {
      v21 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_37;
      if (v21 >= v36)
      {
LABEL_33:
        sub_100194204(v1);
        return (unint64_t)v3;
      }
      v22 = *(_QWORD *)(v37 + 8 * v21);
      v23 = v9 + 1;
      if (!v22)
      {
        v23 = v9 + 2;
        if (v9 + 2 >= v36)
          goto LABEL_33;
        v22 = *(_QWORD *)(v37 + 8 * v23);
        if (!v22)
        {
          v23 = v9 + 3;
          if (v9 + 3 >= v36)
            goto LABEL_33;
          v22 = *(_QWORD *)(v37 + 8 * v23);
          if (!v22)
          {
            v23 = v9 + 4;
            if (v9 + 4 >= v36)
              goto LABEL_33;
            v22 = *(_QWORD *)(v37 + 8 * v23);
            if (!v22)
            {
              v24 = v9 + 5;
              if (v9 + 5 >= v36)
                goto LABEL_33;
              v22 = *(_QWORD *)(v37 + 8 * v24);
              if (!v22)
              {
                while (1)
                {
                  v23 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_38;
                  if (v23 >= v36)
                    goto LABEL_33;
                  v22 = *(_QWORD *)(v37 + 8 * v23);
                  ++v24;
                  if (v22)
                    goto LABEL_26;
                }
              }
              v23 = v9 + 5;
            }
          }
        }
      }
LABEL_26:
      v39 = (v22 - 1) & v22;
      v40 = v23;
      v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    sub_1000760E0(*(_QWORD *)(v1 + 56) + 32 * v20, (uint64_t)v7);
    v43[0] = v27;
    v43[1] = v26;
    sub_1000760E0((uint64_t)v7, (uint64_t)v42);
    swift_bridgeObjectRetain_n(v26, 2);
    sub_100011694((uint64_t)v43, v10);
    v28 = sub_10000B4C8(v11);
    if (!swift_dynamicCast(&v41, v42, v12, v28, 6))
    {
      v41 = 0;
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v41);
      sub_100194204(v1);
      swift_release(v3);
      return 0;
    }
    v29 = v41;
    result = sub_10013B57C(v27, v26);
    v30 = result;
    if ((v31 & 1) != 0)
    {
      v38 = v29;
      v13 = v12;
      v14 = v11;
      v15 = v7;
      v16 = v1;
      v17 = v10;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v27;
      v18[1] = v26;
      v10 = v17;
      v1 = v16;
      v7 = v15;
      v11 = v14;
      v12 = v13;
      v19 = v3[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v30));
      *(_QWORD *)(v19 + 8 * v30) = v38;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v32 = (uint64_t *)(v3[6] + 16 * result);
    *v32 = v27;
    v32[1] = v26;
    *(_QWORD *)(v3[7] + 8 * result) = v29;
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_36;
    v3[2] = v35;
LABEL_8:
    v6 = v39;
    v9 = v40;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_1002946AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  unsigned __int8 v23;

  v5 = *v2;
  v6 = (os_unfair_lock_s *)v2[2];
  v7 = (uint64_t)&v6[4];
  v8 = v6 + 11;
  os_unfair_lock_lock(v6 + 11);
  sub_100294CD4(v7, v5, (uint64_t)v22);
  os_unfair_lock_unlock(v8);
  v9 = (void *)v22[0];
  if (v22[0])
  {
    v10 = v22[1];
    v21 = v22[2];
    v20 = v23;
    swift_bridgeObjectRetain();
    v11 = v9;
    v12 = sub_100294F2C(v11, a1, a2);
    v14 = v13;
    v16 = v15;
    v19 = (uint64_t)&v19;
    v18 = v17 & 1;
    os_unfair_lock_lock(v8);
    sub_1002954CC(v7, v12, v14, v16, v18);
    os_unfair_lock_unlock(v8);
    sub_100296414(v9, v10);
    swift_bridgeObjectRelease(v10);

    swift_bridgeObjectRelease(v14);
  }
}

uint64_t sub_1002947EC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

_QWORD *sub_100294828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSString v34;
  NSString v35;
  id v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  __n128 v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v51 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v51 - v18;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v20 = (void *)objc_opt_self(ICURLBagProvider);
  swift_retain(a4);
  v21 = objc_msgSend(v20, "sharedBagProvider");
  LODWORD(a2) = objc_msgSend(v21, "useAMSBag");

  if (!(_DWORD)a2)
  {
    if (qword_10054BBB0 != -1)
      swift_once(&qword_10054BBB0, sub_100190C98);
    v38 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "UserDefaults enabled as source for cached musicTabs.", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v42 = swift_release(a4);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v42);
    goto LABEL_22;
  }
  if (qword_10054BBF8 != -1)
    swift_once(&qword_10054BBF8, sub_100195410);
  v22 = objc_msgSend((id)static ICClientInfo.music, "bagProfile");
  if (!v22)
  {
LABEL_17:
    if (qword_10054BBB0 != -1)
      swift_once(&qword_10054BBB0, sub_100190C98);
    v43 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.fault.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "    AMSBag was intended to be enabled as source for cached musicTabs, but bag profile and/or version were unexpectedly nil.\n    Defaulting to .userDefaults configuration.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = swift_release(a4);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v17, v10, v47);
LABEL_22:
    v36 = 0;
    v37 = 0;
    goto LABEL_23;
  }
  v23 = v22;
  v52 = v10;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = objc_msgSend((id)static ICClientInfo.music, "bagProfileVersion");
  if (!v26)
  {
    swift_bridgeObjectRelease(v25);
    v10 = v52;
    goto LABEL_17;
  }
  v27 = v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  if (qword_10054BBB0 != -1)
    swift_once(&qword_10054BBB0, sub_100190C98);
  v30 = Logger.init(_:)((id)static OS_os_log.musicBag);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "AMSBag enabled as source for cached musicTabs.", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v52);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v36 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v34, v35);
  swift_release(a4);

  v37 = 1;
LABEL_23:
  v48 = sub_10000B4C8(&qword_100556100);
  v49 = swift_allocObject(v48, 48, 7);
  *(_DWORD *)(v49 + 44) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  *(_QWORD *)(v49 + 32) = 0;
  *(_QWORD *)(v49 + 16) = v36;
  *(_BYTE *)(v49 + 40) = v37;
  v5[2] = v49;
  return v5;
}

void sub_100294CD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0 && !*(_QWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 16) = 1;
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 16) = 1;
      *(_BYTE *)(a3 + 24) = 1;
      swift_bridgeObjectRetain();
      v14 = v12;
      return;
    }
    v15 = qword_10054BBB0;
    v28 = v12;
    swift_bridgeObjectRetain();
    if (v15 != -1)
      swift_once(&qword_10054BBB0, sub_100190C98);
    v16 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v27 = v4;
      v20 = v19;
      v26 = swift_slowAlloc(64, -1);
      v29 = v26;
      *(_DWORD *)v20 = 136315394;
      v21 = (char *)_typeName(_:qualified:)(a2, 0);
      v23 = v22;
      *(_QWORD *)(v20 + 4) = sub_1000BA30C(v21, v22, &v29);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v20 + 12) = 2080;
      *(_QWORD *)(v20 + 14) = sub_1000BA30C((char *)0xD000000000000021, (char *)0x800000010044FFA0, &v29);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "    An unexpected attempt to configure an %s instance twice using %s will be ignored.", (uint8_t *)v20, 0x16u);
      v24 = v26;
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease(v13);

  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

id sub_100294F2C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  Swift::Int v16;
  Class isa;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  __int128 aBlock;
  __int128 v59;
  uint64_t (*v60)(uint64_t);
  _QWORD *v61;
  char v62[48];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  v9 = __chkstk_darwin(v8);
  v53 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v52 = (char *)&v51 - v11;
  v57 = objc_msgSend((id)objc_opt_self(AMSBag), "uninitializedToken");
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_QWORD *)(v4 + 32);
  v14 = sub_10000B4C8((uint64_t *)&unk_100550B40);
  inited = swift_initStackObject(v14, v62);
  *(_OWORD *)(inited + 16) = xmmword_100424BB0;
  *(_QWORD *)(inited + 32) = v12;
  *(_QWORD *)(inited + 40) = v13;
  swift_bridgeObjectRetain_n(v13, 2);
  v16 = sub_100173204(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  v18 = swift_allocObject(&unk_100514908, 24, 7);
  swift_weakInit(v18 + 16, v4);
  v19 = (_QWORD *)swift_allocObject(&unk_100514930, 56, 7);
  v19[2] = v18;
  v19[3] = v12;
  v19[4] = v13;
  v19[5] = a2;
  v19[6] = a3;
  v60 = sub_1002968B8;
  v61 = v19;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v59 = sub_1002963A8;
  *((_QWORD *)&v59 + 1) = &unk_100514948;
  v20 = _Block_copy(&aBlock);
  v21 = v61;
  swift_bridgeObjectRetain();
  swift_retain(a3);
  v22 = v21;
  v23 = a1;
  v24 = objc_msgSend(a1, "cachedValuesForKeys:observationToken:updateHandler:", isa, &v57, v20, swift_release(v22).n128_f64[0]);
  _Block_release(v20);

  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if (*(_QWORD *)(v25 + 16) && (v26 = sub_10013B57C(v12, v13), (v27 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v59 = 0u;
  }
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v25);
  if (*((_QWORD *)&v59 + 1))
  {
    v28 = sub_10000B4C8(&qword_100550038);
    if ((swift_dynamicCast(&v56, &aBlock, (char *)&type metadata for Any + 8, v28, 6) & 1) != 0)
    {
      v29 = v56;
      v30 = qword_10054BBB0;
      swift_bridgeObjectRetain();
      if (v30 != -1)
        swift_once(&qword_10054BBB0, sub_100190C98);
      v31 = (id)static OS_os_log.musicBag;
      v32 = v52;
      Logger.init(_:)(v31);
      v33 = swift_bridgeObjectRetain();
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v37;
        *(_DWORD *)v36 = 136315138;
        v38 = sub_100296440(v29);
        v39 = sub_10000B4C8(&qword_10054D598);
        v40 = (char *)Dictionary.description.getter(v38, &type metadata for String, v39, &protocol witness table for String);
        v41 = v23;
        v43 = v42;
        swift_release(v38);
        *(_QWORD *)(v36 + 4) = sub_1000BA30C(v40, v43, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease_n(v29, 2);
        v44 = v43;
        v23 = v41;
        swift_bridgeObjectRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "AMSBag provided initial state of musicTabs: %s", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v55);
      }
      else
      {

        swift_bridgeObjectRelease_n(v29, 2);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v55);
      }
      return v23;
    }
  }
  else
  {
    sub_100011694((uint64_t)&aBlock, &qword_100550FD0);
  }
  v45 = v53;
  if (qword_10054BBB0 != -1)
    swift_once(&qword_10054BBB0, sub_100190C98);
  v46 = Logger.init(_:)((id)static OS_os_log.musicBag);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "AMSBag didn't provide initial state of musicTabs. No cached value was found.", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v55);
  return v23;
}

id sub_1002954CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  char v9;

  v9 = a5 & 1;
  sub_100296414(*(void **)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = v9;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_100295538@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*a1)
  {
    *a4 = a1[1];
    return swift_bridgeObjectRetain();
  }
  else if (a2
         && (v8 = String._bridgeToObjectiveC()(),
             v9 = objc_msgSend(a2, "dictionaryForBagKey:", v8),
             v8,
             v9)
         && (v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v9, v11 = sub_100293F54(v10), result = swift_bridgeObjectRelease(v10), v11))
  {
    *a4 = v11;
  }
  else
  {
    v12 = (*(uint64_t (**)(void))(a3 + 40))();
    result = swift_bridgeObjectRelease(0);
    *a4 = v12;
  }
  return result;
}

uint64_t *sub_100295628()
{
  uint64_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  id v5;
  id v7[3];
  char v8;

  v1 = *v0;
  v2 = (os_unfair_lock_s *)v0[2];
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 11;
  os_unfair_lock_lock(v2 + 11);
  sub_1002956D4(v3, v1, (uint64_t)v7);
  os_unfair_lock_unlock(v4);
  v5 = v7[0];
  if (v7[0])
  {
    if ((v8 & 1) == 0)
      objc_msgSend(v7[0], "removeObserverWithToken:", v7[2]);

    swift_bridgeObjectRelease();
  }
  swift_release(v0[2]);
  swift_bridgeObjectRelease();
  swift_release(v0[6]);
  return v0;
}

id sub_1002956D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  char *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (id)__chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v14 = *(_OWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    {
      *(_QWORD *)a3 = v13;
      *(_OWORD *)(a3 + 8) = v14;
      *(_BYTE *)(a3 + 24) = 0;
      swift_bridgeObjectRetain();
      return v13;
    }
    v15 = *(_QWORD *)(a1 + 8);
    v16 = qword_10054BBB0;
    v17 = v13;
    v30 = v15;
    swift_bridgeObjectRetain();
    if (v16 != -1)
      swift_once(&qword_10054BBB0, sub_100190C98);
    v18 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(12, -1);
      v28 = v17;
      v22 = v21;
      v23 = swift_slowAlloc(32, -1);
      v29 = v4;
      v24 = v23;
      v31 = v23;
      *(_DWORD *)v22 = 136315138;
      v25 = (char *)_typeName(_:qualified:)(a2, 0);
      *(_QWORD *)(v22 + 4) = sub_1000BA30C(v25, v26, &v31);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "    %s wasn't configured with an AMSBag update handler prior to deallocation. This may have caused musicTabs updates to be missed after initialization.", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v22, -1, -1);
      swift_bridgeObjectRelease();

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_100295908()
{
  uint64_t v0;

  sub_100295628();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for MusicTabsDictionaryProvider()
{
  return objc_opt_self(_TtC9MusicCore27MusicTabsDictionaryProvider);
}

id *destroy for MusicTabsDictionaryProvider.Configuration(id *result)
{
  id *v1;

  if ((unint64_t)*result >= 0xFFFFFFFF)
  {
    v1 = result;

    return (id *)swift_bridgeObjectRelease(v1[1]);
  }
  return result;
}

uint64_t initializeWithCopy for MusicTabsDictionaryProvider.Configuration(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v6 = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MusicTabsDictionaryProvider.Configuration(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_QWORD *)(a1 + 16) = v9;
      v10 = v5;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v11 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

__n128 initializeWithTake for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MusicTabsDictionaryProvider.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_100295C10(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration;
}

uint64_t sub_100295C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 aBlock;
  __int128 v44;
  uint64_t (*v45)();
  _QWORD *v46;
  char v47[24];

  v40 = a5;
  v41 = a6;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v47, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v19 = result;
    v20 = *(_QWORD *)(a1 + 16);
    v38 = v14;
    v39 = v11;
    if (v20)
    {
      swift_bridgeObjectRetain();
      v21 = sub_10013B57C(a3, a4);
      if ((v22 & 1) != 0)
      {
        sub_1000760E0(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v44 = 0u;
      }
      swift_bridgeObjectRelease(a4);
      if (*((_QWORD *)&v44 + 1))
      {
        v23 = sub_10000B4C8(&qword_100550038);
        if (swift_dynamicCast(&v42, &aBlock, (char *)&type metadata for Any + 8, v23, 6))
          v24 = v42;
        else
          v24 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      aBlock = 0u;
      v44 = 0u;
    }
    sub_100011694((uint64_t)&aBlock, &qword_100550FD0);
    v24 = 0;
LABEL_12:
    v25 = *(os_unfair_lock_s **)(v19 + 16);
    v26 = (uint64_t)&v25[4];
    v27 = v25 + 11;
    os_unfair_lock_lock(v25 + 11);
    sub_100295F60(v26, v24, (char *)&aBlock);
    os_unfair_lock_unlock(v27);
    if (aBlock == 1)
    {
      sub_100105D88();
      v28 = (void *)static OS_dispatch_queue.main.getter();
      v29 = (_QWORD *)swift_allocObject(&unk_100514980, 40, 7);
      v30 = v41;
      v29[2] = v40;
      v29[3] = v30;
      v29[4] = v24;
      v45 = sub_10029690C;
      v46 = v29;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v44 = sub_10015F6F8;
      *((_QWORD *)&v44 + 1) = &unk_100514998;
      v31 = _Block_copy(&aBlock);
      v32 = v46;
      swift_retain(v30);
      swift_release(v32);
      static DispatchQoS.unspecified.getter(v33);
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v34 = sub_10015EA64();
      v35 = sub_10000B4C8(&qword_10054FC78);
      v36 = sub_100150CBC();
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v35, v36, v10, v34);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v31);
      _Block_release(v31);
      swift_release(v19);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v38);
    }
    else
    {
      swift_release(v19);
      return swift_bridgeObjectRelease(v24);
    }
  }
  return result;
}

uint64_t sub_100295F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  void *v31;
  uint64_t result;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  id v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  v14 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v47 = v7;
    v48 = v3;
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    v17 = *(_BYTE *)(a1 + 24) & 1;
    v52 = a2;
    v53 = v15;
    v54 = v17;
    v51 = v14;
    *(_QWORD *)(a1 + 8) = a2;
    *(_BYTE *)(a1 + 24) = v17;
    v18 = qword_10054BBB0;
    swift_bridgeObjectRetain_n(a2, 2);
    v19 = v14;
    if (v18 != -1)
      swift_once(&qword_10054BBB0, sub_100190C98);
    Logger.init(_:)((id)static OS_os_log.musicBag);
    v20 = swift_bridgeObjectRetain();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v46 = a3;
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v55 = v24;
      *(_DWORD *)v23 = 136315394;
      if (v16)
      {
        v25 = v48;
        v26 = sub_100296440(v16);
        v48 = v25;
      }
      else
      {
        v26 = 0;
      }
      v50[0] = v26;
      v34 = sub_10000B4C8(&qword_1005560F8);
      v35 = (char *)String.init<A>(describing:)(v50, v34);
      v37 = v36;
      *(_QWORD *)(v23 + 4) = sub_1000BA30C(v35, v36, &v55);
      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v23 + 12) = 2080;
      swift_beginAccess(&v51, v50, 0, 0);
      v38 = v52;
      if (v52)
      {
        v39 = swift_bridgeObjectRetain();
        v40 = v48;
        v41 = sub_100296440(v39);
        v48 = v40;
        swift_bridgeObjectRelease(v38);
      }
      else
      {
        v41 = 0;
      }
      v49 = v41;
      v42 = (char *)String.init<A>(describing:)(&v49, v34);
      v44 = v43;
      *(_QWORD *)(v23 + 14) = sub_1000BA30C(v42, v43, &v55);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "    AMSBag provided updated musicTabs dictionary.\n    Previous: %s\n    Updated: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v47);
      result = swift_bridgeObjectRelease(v52);
      a3 = v46;
    }
    else
    {

      swift_bridgeObjectRelease_n(v16, 2);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v47);

      result = swift_bridgeObjectRelease(v52);
    }
    v33 = 1;
  }
  else
  {
    if (qword_10054BBB0 != -1)
      swift_once(&qword_10054BBB0, sub_100190C98);
    v27 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.fault.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(12, -1);
      v31 = (void *)swift_slowAlloc(32, -1);
      v51 = v31;
      *(_DWORD *)v30 = 136315138;
      *(_QWORD *)(v30 + 4) = sub_1000BA30C((char *)0xD000000000000047, (char *)0x800000010044FF50, (uint64_t *)&v51);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected update handler call in %s with .userDefaults configuration. This is likely programmer error.", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v33 = 0;
  }
  *a3 = v33;
  return result;
}

uint64_t sub_1002963A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

void *sub_100296414(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100296440(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[5];
  _OWORD v50[2];
  _QWORD *v51;

  sub_10000B4C8(&qword_1005560F0);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v40 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v38 = (unint64_t)(v6 + 63) >> 6;
  v39 = result + 64;
  v37 = (_QWORD *)result;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * i);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v41 = *v14;
      v43 = i;
      v44 = v4;
      v51 = _swiftEmptyArrayStorage;
      v42 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100117EE4(0, v18, 0);
      v19 = 0;
      v20 = v51;
      do
      {
        v21 = *(_QWORD *)(v17 + 8 * v19 + 32);
        *(_QWORD *)&v47 = 25705;
        *((_QWORD *)&v47 + 1) = 0xE200000000000000;
        AnyHashable.init<A>(_:)(v49, &v47, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v21 + 16) && (v22 = sub_1001461DC((uint64_t)v49), (v23 & 1) != 0))
        {
          sub_1000760E0(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v47);
        }
        else
        {
          v47 = 0u;
          v48 = 0u;
        }
        sub_10013BB48((uint64_t)v49);
        if (*((_QWORD *)&v48 + 1))
        {
          sub_10013BB38(&v47, v50);
          sub_1000760E0((uint64_t)v50, (uint64_t)v49);
          v24 = swift_dynamicCast(&v47, v49, (char *)&type metadata for Any + 8, &type metadata for String, 6);
          v26 = *((_QWORD *)&v47 + 1);
          v25 = v47;
          sub_1000760E0((uint64_t)v50, (uint64_t)&v47);
          if (!v24 || !v26)
          {
            v45 = 0;
            v46 = 0xE000000000000000;
            _StringGuts.grow(_:)(23);
            v27._countAndFlagsBits = 0xD000000000000014;
            v27._object = (void *)0x800000010044FF30;
            String.append(_:)(v27);
            _print_unlocked<A, B>(_:_:)(&v47, &v45, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v28._countAndFlagsBits = 62;
            v28._object = (void *)0xE100000000000000;
            String.append(_:)(v28);
            v25 = v45;
            v26 = v46;
          }
          sub_100011758(&v47);
          sub_100011758(v50);
        }
        else
        {
          sub_100011694((uint64_t)&v47, &qword_100550FD0);
          v26 = 0xEF3E746E65736261;
          v25 = 0x204449206261743CLL;
        }
        v51 = v20;
        v30 = v20[2];
        v29 = v20[3];
        if (v30 >= v29 >> 1)
        {
          sub_100117EE4((char *)(v29 > 1), v30 + 1, 1);
          v20 = v51;
        }
        ++v19;
        v20[2] = v30 + 1;
        v31 = &v20[2 * v30];
        v31[4] = v25;
        v31[5] = v26;
      }
      while (v18 != v19);
      swift_bridgeObjectRelease(v17);
      v3 = v37;
      v4 = v44;
      result = v42;
      i = v43;
      v16 = v41;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v20 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(v39 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v32 = (_QWORD *)(v3[6] + 16 * i);
    *v32 = v16;
    v32[1] = result;
    *(_QWORD *)(v3[7] + 8 * i) = v20;
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v3[2] = v35;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_39;
    if (v11 >= v38)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v36 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v38)
        return (uint64_t)v3;
      v12 = *(_QWORD *)(v36 + 8 * v4);
      if (!v12)
        break;
    }
LABEL_16:
    v8 = (v12 - 1) & v12;
  }
  v13 = v11 + 2;
  if (v13 >= v38)
    return (uint64_t)v3;
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v38)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v36 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100296860()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100296884()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002968B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100295C44(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1002968C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002968D8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002968E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10029690C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t destroy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

uint64_t assignWithTake for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100296B40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100296B5C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State;
}

uint64_t PlayActivityFeatureIdentifier.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100296BD4 + 4 * byte_100435B60[a1]))(0x65645F6D75626C61, 0xEC0000006C696174);
}

uint64_t sub_100296BD4()
{
  return 0x736D75626C61;
}

uint64_t sub_100296BE8()
{
  return 0x5F7972617262696CLL;
}

uint64_t sub_100296C0C()
{
  return 0x74616C69706D6F63;
}

uint64_t sub_100296C2C()
{
  return 0x7265736F706D6F63;
}

uint64_t sub_100296CC4()
{
  return 0x7473696C79616C70;
}

uint64_t sub_100296CE8()
{
  return 0x796C746E65636572;
}

unint64_t sub_100296D0C()
{
  return 0xD000000000000013;
}

uint64_t sub_100296D28()
{
  return 0x73676E6F73;
}

uint64_t sub_100296D3C()
{
  return 0x73776F6873;
}

uint64_t sub_100296D50()
{
  return 0x7365646F73697065;
}

uint64_t sub_100296D68()
{
  return 0x79616C705F776F6ELL;
}

uint64_t sub_100296D88()
{
  return 0x616C705F696E696DLL;
}

uint64_t PlayActivityFeatureIdentifier.id.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100296DE4 + 4 * byte_100435B72[a1]))(0x65645F6D75626C61, 0xEC0000006C696174);
}

uint64_t sub_100296DE4()
{
  return 0x736D75626C61;
}

uint64_t sub_100296DF8()
{
  return 0x5F7972617262696CLL;
}

uint64_t sub_100296E1C()
{
  return 0x74616C69706D6F63;
}

uint64_t sub_100296E3C()
{
  return 0x7265736F706D6F63;
}

uint64_t sub_100296ED4()
{
  return 0x7473696C79616C70;
}

uint64_t sub_100296EF8()
{
  return 0x796C746E65636572;
}

unint64_t sub_100296F1C()
{
  return 0xD000000000000013;
}

uint64_t sub_100296F38()
{
  return 0x73676E6F73;
}

uint64_t sub_100296F4C()
{
  return 0x73776F6873;
}

uint64_t sub_100296F60()
{
  return 0x7365646F73697065;
}

uint64_t sub_100296F78()
{
  return 0x79616C705F776F6ELL;
}

uint64_t sub_100296F98()
{
  return 0x616C705F696E696DLL;
}

uint64_t sub_100296FB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = PlayActivityFeatureIdentifier.rawValue.getter(*a1);
  v5 = v4;
  v6 = PlayActivityFeatureIdentifier.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100297040()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = PlayActivityFeatureIdentifier.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002970A0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = PlayActivityFeatureIdentifier.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002970E0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = PlayActivityFeatureIdentifier.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10029713C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100297168@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PlayActivityFeatureIdentifier.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100297190@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PlayActivityFeatureIdentifier.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1004FD410, a1, a2, &unk_10054C418);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x12)
    return 18;
  else
    return v3;
}

unint64_t sub_10029720C()
{
  unint64_t result;

  result = qword_100556108;
  if (!qword_100556108)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PlayActivityFeatureIdentifier, &type metadata for PlayActivityFeatureIdentifier);
    atomic_store(result, (unint64_t *)&qword_100556108);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlayActivityFeatureIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayActivityFeatureIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_10029732C + 4 * byte_100435B89[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_100297360 + 4 * byte_100435B84[v4]))();
}

uint64_t sub_100297360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100297368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100297370);
  return result;
}

uint64_t sub_10029737C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100297384);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_100297388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100297390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayActivityFeatureIdentifier()
{
  return &type metadata for PlayActivityFeatureIdentifier;
}

uint64_t QRCode.init(data:errorCorrectionLevel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6[5];

  sub_100297D14(a1, a2, a3, v6);
  return sub_100298454((uint64_t)v6, a4);
}

void sub_1002973E4()
{
  qword_100556110 = Int.seconds.getter(10);
}

uint64_t QRCode.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_10003A5E4(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

id QRCode.image.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

void sub_10029743C(void *a1, void *a2, CGImage *a3, uint64_t a4, CGContext *a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, double a11)
{
  CGContext *v18;
  void *v19;
  id v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double Height;
  void *v26;
  id v27;
  void *v28;
  double v29;
  id v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  double v35;
  id v36;
  double v37;
  id v38;
  void *v39;
  double v40;
  CGFloat v41;
  id v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double Width;
  uint64_t v48;
  uint64_t i;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGContext *v53;
  int64_t BytesPerRow;
  int64_t v55;
  uint64_t v56;
  BOOL v57;
  int64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v64;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;

  objc_msgSend(a1, "beginPage");
  v64 = a1;
  v18 = (CGContext *)objc_msgSend(a1, "CGContext");
  if (qword_10054C398 != -1)
    goto LABEL_66;
  while (1)
  {
    CGContextSetLineWidth(v18, *(CGFloat *)&qword_100556110);

    v19 = (void *)objc_opt_self(UIColor);
    v20 = objc_msgSend(v19, "whiteColor");
    objc_msgSend(v20, "setStroke");

    v21 = objc_msgSend(v19, "whiteColor");
    objc_msgSend(v21, "setFill");

    v22 = *(double *)&qword_100556110;
    v23 = *(double *)&qword_100556110 * a6;
    v68.origin.x = a7;
    v68.origin.y = a8;
    v68.size.width = a9;
    v68.size.height = a10;
    v24 = CGRectGetWidth(v68) - v23;
    v69.origin.x = a7;
    v69.origin.y = a8;
    v69.size.width = a9;
    v69.size.height = a10;
    Height = CGRectGetHeight(v69);
    v26 = (void *)objc_opt_self(UIBezierPath);
    a8 = 0.5;
    v70.origin.x = 0.0;
    v70.origin.y = 0.0;
    v70.size.width = v22 * a6;
    v70.size.height = v22 * a6;
    v71 = CGRectInset(v70, v22 * 0.5, v22 * 0.5);
    v27 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v71.origin.x, v71.origin.y, v71.size.width, v71.size.height, 10.0);
    if (v27)
    {
      v28 = v27;
      objc_msgSend(v27, "setLineWidth:", v22);
      objc_msgSend(v28, "stroke");
      v29 = v22 * a11;
      v72.origin.x = 0.0;
      v72.origin.y = 0.0;
      v72.size.width = v23;
      v72.size.height = v23;
      a7 = v29 * 0.5;
      a9 = CGRectGetMidX(v72) - v29 * 0.5;
      v73.origin.x = 0.0;
      v73.origin.y = 0.0;
      v73.size.width = v23;
      v73.size.height = v23;
      v30 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", a9, CGRectGetMidY(v73) - v29 * 0.5, v29, v29, 2.0);
      objc_msgSend(v30, "fill");

    }
    v31 = Height - v23;
    v32 = *(double *)&qword_100556110;
    v74.origin.y = 0.0;
    v74.origin.x = v24;
    v74.size.width = v23;
    v74.size.height = v23;
    v75 = CGRectInset(v74, *(double *)&qword_100556110 * 0.5, *(double *)&qword_100556110 * 0.5);
    v33 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v75.origin.x, v75.origin.y, v75.size.width, v75.size.height, 10.0);
    if (v33)
    {
      v34 = v33;
      objc_msgSend(v33, "setLineWidth:", v32);
      objc_msgSend(v34, "stroke");
      v35 = v32 * a11;
      v76.origin.y = 0.0;
      v76.origin.x = v24;
      v76.size.width = v23;
      v76.size.height = v23;
      a8 = v35 * 0.5;
      a9 = CGRectGetMidX(v76) - v35 * 0.5;
      v77.origin.y = 0.0;
      v77.origin.x = v24;
      v77.size.width = v23;
      v77.size.height = v23;
      v36 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", a9, CGRectGetMidY(v77) - v35 * 0.5, v35, v35, 2.0);
      objc_msgSend(v36, "fill");

    }
    v37 = *(double *)&qword_100556110;
    v78.origin.x = 0.0;
    v78.origin.y = v31;
    v78.size.width = v23;
    v78.size.height = v23;
    v79 = CGRectInset(v78, *(double *)&qword_100556110 * 0.5, *(double *)&qword_100556110 * 0.5);
    v38 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v79.origin.x, v79.origin.y, v79.size.width, v79.size.height, 10.0);
    if (v38)
    {
      v39 = v38;
      objc_msgSend(v38, "setLineWidth:", v37);
      objc_msgSend(v39, "stroke");
      v40 = v37 * a11;
      v80.origin.x = 0.0;
      v80.origin.y = v31;
      v80.size.width = v23;
      v80.size.height = v23;
      a9 = v40 * 0.5;
      v41 = CGRectGetMidX(v80) - v40 * 0.5;
      v81.origin.x = 0.0;
      v81.origin.y = v31;
      v81.size.width = v23;
      v81.size.height = v23;
      v42 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v41, CGRectGetMidY(v81) - v40 * 0.5, v40, v40, 2.0);
      objc_msgSend(v42, "fill");

    }
    objc_msgSend(a2, "extent");
    v43 = CGRectGetHeight(v82);
    if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) == 0)
      break;
    if (v43 <= -9.22337204e18)
      goto LABEL_68;
    if (v43 >= 9.22337204e18)
      goto LABEL_69;
    v44 = (uint64_t)v43;
    if ((uint64_t)v43 < 1)
      goto LABEL_70;
    v18 = a5;
    if ((uint64_t)v43 == 1)
      return;
    v45 = (uint64_t)a6;
    v46 = 1;
    a10 = -1.0;
    *(_QWORD *)&a11 = (uint64_t)v43;
    while (1)
    {
      if (v46 == v44)
        goto LABEL_61;
      objc_msgSend(a2, "extent");
      Width = CGRectGetWidth(v83);
      if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
        break;
      if (Width <= -9.22337204e18)
        goto LABEL_63;
      if (Width >= 9.22337204e18)
        goto LABEL_64;
      v48 = (uint64_t)Width;
      if ((uint64_t)Width < 1)
        goto LABEL_65;
      if ((uint64_t)Width != 1)
      {
        a9 = (double)(v46 - 1);
        for (i = 1; v48 != i; ++i)
        {
          BytesPerRow = CGImageGetBytesPerRow(a3);
          v55 = BytesPerRow * v46;
          if ((unsigned __int128)(BytesPerRow * (__int128)v46) >> 64 != (BytesPerRow * v46) >> 63)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          v56 = i * a4;
          if ((unsigned __int128)(i * (__int128)a4) >> 64 != (i * a4) >> 63)
            goto LABEL_48;
          v57 = __OFADD__(v55, v56);
          v58 = v55 + v56;
          if (v57)
            goto LABEL_49;
          if (!*((_BYTE *)v18 + v58))
          {
            if ((*(_QWORD *)&a6 & 0x7FF0000000000000) == 0x7FF0000000000000)
              goto LABEL_50;
            if (a6 <= -9.22337204e18)
              goto LABEL_51;
            if (a6 >= 9.22337204e18)
              goto LABEL_52;
            objc_msgSend(a2, "extent");
            v59 = CGRectGetWidth(v85);
            if ((~*(_QWORD *)&v59 & 0x7FF0000000000000) == 0)
              goto LABEL_53;
            if (v59 <= -9.22337204e18)
              goto LABEL_54;
            if (v59 >= 9.22337204e18)
              goto LABEL_55;
            v60 = (uint64_t)v59;
            if (v46 <= v45)
            {
              if (i <= v45)
                continue;
              v57 = __OFSUB__(v60, v45);
              v61 = v60 - v45;
              if (v57)
                goto LABEL_59;
              if (__OFSUB__(v61, 1))
                goto LABEL_60;
              if (i >= v61 - 1)
                continue;
            }
            else
            {
              v57 = __OFSUB__(v60, v45);
              v61 = v60 - v45;
              if (v57)
                goto LABEL_56;
            }
            v57 = __OFSUB__(v61, 1);
            v62 = v61 - 1;
            if (v57)
              goto LABEL_57;
            if (v46 < v62 || i > v45)
            {
              if (__OFSUB__(i, 1))
                goto LABEL_58;
              v50 = *(double *)&qword_100556110 * (double)(i - 1);
              v51 = *(double *)&qword_100556110 * a9;
              v52 = *(double *)&qword_100556110 + -1.0;
              v53 = (CGContext *)objc_msgSend(v64, "CGContext");
              v84.origin.x = v50;
              v84.origin.y = v51;
              v84.size.width = v52;
              v84.size.height = v52;
              CGContextFillEllipseInRect(v53, v84);

              v18 = a5;
            }
          }
        }
      }
      ++v46;
      v44 = *(_QWORD *)&a11;
      if (v46 == *(_QWORD *)&a11)
        return;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once(&qword_10054C398, sub_1002973E4);
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

uint64_t QRCode.with(errorCorrectionLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8[5];

  v6 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  sub_10003A5E4(v6, v5);
  sub_100297D14(v6, v5, a1, v8);
  return sub_100298454((uint64_t)v8, a2);
}

double QRCode.dotAdjustedWidth(with:scale:)(double a1)
{
  uint64_t *v1;
  double v2;

  v2 = (double)*v1;
  return UIRoundToScale(a1 / v2) * v2;
}

CGMutablePathRef QRCode.dotAlignedPath(with:in:imageBounds:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t *v9;
  double Width;
  uint64_t v16;
  double MinX;
  double MinY;
  CGMutablePathRef result;
  CGMutablePathRef v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  _QWORD v28[6];
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v29.origin.x = a6;
  v29.origin.y = a7;
  v29.size.width = a8;
  v29.size.height = a9;
  Width = CGRectGetWidth(v29);
  v16 = *v9;
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  MinX = CGRectGetMinX(v30);
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  MinY = CGRectGetMinY(v31);
  swift_bridgeObjectRetain();
  result = CGPathCreateMutable();
  if (*(_QWORD *)(a1 + 16))
  {
    v20 = result;
    v21 = Width / (double)v16;
    v22 = floor(MinX / v21);
    v23 = floor(MinY / v21);
    v25 = *(double *)(a1 + 32);
    v24 = *(double *)(a1 + 40);
    sub_1000E13EC(0, 1);
    v28[0] = 0x3FF0000000000000;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0x3FF0000000000000;
    v28[4] = 0;
    v28[5] = 0;
    CGMutablePathRef.move(to:transform:)(v28, v21 * (v22 + ceil(v25 / v21)), v21 * (v23 + ceil(v24 / v21)));
    v26 = *(_QWORD *)(a1 + 16);
    if (v26)
    {
      v27 = (double *)(a1 + 40);
      do
      {
        CGMutablePathRef.addLine(to:transform:)(v28, v21 * (v22 + ceil(*(v27 - 1) / v21)), v21 * (v23 + ceil(*v27 / v21)));
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    swift_bridgeObjectRelease();
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100297D14(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  id v9;
  Class isa;
  NSString v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  CGImage *v18;
  CGDataProvider *v19;
  uint64_t v20;
  const __CFData *v21;
  const UInt8 *BytePtr;
  const UInt8 *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const __CFData *v39;
  CGDataProvider *v40;
  uint64_t v41;
  CGPDFDocument *v42;
  CGPDFDocument *v43;
  id v44;
  uint64_t v45;
  double Width;
  double v47;
  uint64_t v48;
  id v49;
  id v50;
  unint64_t v51;
  CGPDFPage *v52;
  CGImage *v53;
  id v54;
  uint64_t v55;
  const __CFData *v56;
  id v57;
  _QWORD aBlock[5];
  uint64_t v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v8 = (void *)objc_opt_self(CIFilter);
  sub_10003A5E4(a1, a2);
  v9 = objc_msgSend(v8, "QRCodeGenerator");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setValue:forKey:", isa, v11);

  v12 = v9;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setValue:forKey:", v13, v14);

  v15 = objc_msgSend(v12, "outputImage");
  if (!v15)
  {
    sub_10003A628(a1, a2);
LABEL_19:

    v21 = 0;
LABEL_20:
    v20 = 0;
    goto LABEL_21;
  }
  v16 = v15;
  v17 = objc_msgSend(objc_allocWithZone((Class)CIContext), "init");
  objc_msgSend(v16, "extent");
  v18 = (CGImage *)objc_msgSend(v17, "createCGImage:fromRect:", v16);

  if (!v18)
  {
    sub_10003A628(a1, a2);

    goto LABEL_19;
  }
  v19 = CGImageGetDataProvider(v18);
  v20 = (uint64_t)v19;
  if (!v19)
  {
    sub_10003A628(a1, a2);

    v21 = 0;
    goto LABEL_21;
  }
  v21 = CGDataProviderCopyData(v19);

  if (!v21)
  {
    sub_10003A628(a1, a2);

    goto LABEL_20;
  }
  v56 = v21;
  BytePtr = CFDataGetBytePtr(v21);
  if (BytePtr)
  {
    v23 = BytePtr;
    v55 = a3;
    v24 = (uint64_t)CGImageGetBitsPerPixel(v18) / 8;
    v25 = Int.seconds.getter(7);
    v26 = Int.seconds.getter(3);
    objc_msgSend(v16, "extent");
    v27 = CGRectGetWidth(v60) + -2.0;
    if (qword_10054C398 != -1)
      swift_once(&qword_10054C398, sub_1002973E4);
    v28 = *(double *)&qword_100556110;
    v29 = v27 * *(double *)&qword_100556110;
    objc_msgSend(v16, "extent");
    v30 = v28 * (CGRectGetHeight(v61) + -2.0);
    v57 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsPDFRenderer), "initWithBounds:", 0.0, 0.0, v29, v30);
    v20 = swift_allocObject(&unk_100514C88, 96, 7);
    *(double *)(v20 + 16) = v25;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(double *)(v20 + 40) = v29;
    *(double *)(v20 + 48) = v30;
    *(double *)(v20 + 56) = v26;
    *(_QWORD *)(v20 + 64) = v16;
    *(_QWORD *)(v20 + 72) = v18;
    *(_QWORD *)(v20 + 80) = v24;
    *(_QWORD *)(v20 + 88) = v23;
    v31 = swift_allocObject(&unk_100514CB0, 32, 7);
    *(_QWORD *)(v31 + 16) = sub_10029861C;
    *(_QWORD *)(v31 + 24) = v20;
    aBlock[4] = sub_1000D75E8;
    v59 = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001880C4;
    aBlock[3] = &unk_100514CC8;
    v32 = _Block_copy(aBlock);
    v33 = v59;
    swift_retain(v31);
    v53 = v18;
    v54 = v16;
    v34 = objc_msgSend(v57, "PDFDataWithActions:", v32, swift_release(v33).n128_f64[0]);
    _Block_release(v32);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation(v31, "", 117, 66, 37, 1, v35);
    swift_release(v31);
    if ((v33 & 1) != 0)
    {
      __break(1u);
      goto LABEL_31;
    }
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

    v39 = Data._bridgeToObjectiveC()().super.isa;
    v40 = CGDataProviderCreateWithCFData(v39);

    v41 = v55;
    if (v40)
    {
      v42 = CGPDFDocumentCreateWithProvider(v40);
      if (v42)
      {
        v43 = v42;
        v52 = CGPDFDocumentGetPage(v42, 1uLL);
        if (v52)
        {
          v51 = v38;
          v44 = objc_msgSend((id)objc_opt_self(UIImage), "_imageWithCGPDFPage:", v52);
          if (v44)
          {
            v45 = (uint64_t)v44;
            v50 = v44;
            objc_msgSend(v54, "extent");
            Width = CGRectGetWidth(v62);

            sub_10003A628(v36, v51);
            v47 = Width + -2.0;
            if ((~COERCE__INT64(Width + -2.0) & 0x7FF0000000000000) != 0)
            {
              if (v47 > -9.22337204e18)
              {
                if (v47 < 9.22337204e18)
                {
                  v48 = (uint64_t)v47;
                  sub_10003A5E4(a1, a2);
                  v49 = v50;
                  sub_10003A628(a1, a2);

                  sub_10003A628(a1, a2);
                  swift_release(v20);

LABEL_22:
                  *a4 = v48;
                  a4[1] = a1;
                  a4[2] = a2;
                  a4[3] = v45;
                  a4[4] = v41;
                  return;
                }
                goto LABEL_33;
              }
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              goto LABEL_34;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          sub_10003A628(a1, a2);

          sub_10003A628(v36, v38);
        }
        else
        {
          sub_10003A628(a1, a2);

          sub_10003A628(v36, v38);
        }
      }
      else
      {
        sub_10003A628(a1, a2);

        sub_10003A628(v36, v38);
      }
    }
    else
    {
      sub_10003A628(a1, a2);

      sub_10003A628(v36, v38);
    }

    v21 = (const __CFData *)sub_10029861C;
LABEL_21:
    sub_10003A628(a1, a2);
    sub_1000DB26C((uint64_t)v21, v20);
    v48 = 0;
    a1 = 0;
    a2 = 0;
    v45 = 0;
    v41 = 0;
    goto LABEL_22;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100298454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100554B80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for QRCode(uint64_t a1)
{
  sub_10003A628(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));

}

_QWORD *initializeWithCopy for QRCode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_10003A5E4(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = (void *)a2[3];
  v7 = a2[4];
  a1[3] = v6;
  a1[4] = v7;
  v8 = v6;
  return a1;
}

_QWORD *assignWithCopy for QRCode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_10003A5E4(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10003A628(v6, v7);
  v8 = (void *)a2[3];
  v9 = (void *)a1[3];
  a1[3] = v8;
  v10 = v8;

  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for QRCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10003A628(v5, v6);
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for QRCode()
{
  return &type metadata for QRCode;
}

uint64_t sub_1002985F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 96, 7);
}

void sub_10029861C(void *a1)
{
  uint64_t v1;

  sub_10029743C(a1, *(void **)(v1 + 64), *(CGImage **)(v1 + 72), *(_QWORD *)(v1 + 80), *(CGContext **)(v1 + 88), *(double *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_100298634()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100298644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100298654(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t OSSignposter.sharePlay.unsafeMutableAddressor()
{
  return sub_100298814(&qword_10054C3A8, (uint64_t)static OSSignposter.sharePlay, (uint64_t)sub_100298870);
}

uint64_t *OS_os_log.sharePlay.unsafeMutableAddressor()
{
  if (qword_10054C3B0 != -1)
    swift_once(&qword_10054C3B0, sub_1002989C0);
  return &static OS_os_log.sharePlay;
}

uint64_t static OSSignposter.music(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return OSSignposter.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, a1, a2);
}

uint64_t static OSSignposter.music(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(_:)(a1);
  return OSSignposter.init(logger:)(v4);
}

uint64_t sub_100298788()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter(0);
  sub_10000D924(v0, static OSSignposter.launch);
  sub_10000D78C(v0, (uint64_t)static OSSignposter.launch);
  return OSSignposter.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x68636E75614CLL, 0xE600000000000000);
}

uint64_t OSSignposter.launch.unsafeMutableAddressor()
{
  return sub_100298814(&qword_10054C3A0, (uint64_t)static OSSignposter.launch, (uint64_t)sub_100298788);
}

uint64_t sub_100298814(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for OSSignposter(0);
  return sub_10000D78C(v4, a2);
}

uint64_t static OSSignposter.launch.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100298958(&qword_10054C3A0, (uint64_t)static OSSignposter.launch, (uint64_t)sub_100298788, a1);
}

uint64_t sub_100298870()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignposter(0);
  sub_10000D924(v3, static OSSignposter.sharePlay);
  sub_10000D78C(v3, (uint64_t)static OSSignposter.sharePlay);
  if (qword_10054C3B0 != -1)
    swift_once(&qword_10054C3B0, sub_1002989C0);
  Logger.init(_:)((id)static OS_os_log.sharePlay);
  return OSSignposter.init(logger:)(v2);
}

uint64_t static OSSignposter.sharePlay.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100298958(&qword_10054C3A8, (uint64_t)static OSSignposter.sharePlay, (uint64_t)sub_100298870, a1);
}

uint64_t sub_100298958@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = sub_10000D78C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_1002989C0()
{
  uint64_t result;

  sub_100191240();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x616C506572616853, 0xE900000000000079);
  static OS_os_log.sharePlay = result;
  return result;
}

id static OS_os_log.sharePlay.getter()
{
  if (qword_10054C3B0 != -1)
    swift_once(&qword_10054C3B0, sub_1002989C0);
  return (id)static OS_os_log.sharePlay;
}

uint64_t sub_100298A64()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  __int128 v7[2];
  char v8;

  sub_10029C5AC(v0, (uint64_t)v7);
  if (v8 == 1)
  {
    v1 = (char *)&loc_100298AB4 + 4 * byte_100435D10[MPModelObject.mediaKitPlayableKind.getter()];
    __asm { BR              X10 }
  }
  sub_1000B47A8(v7, (uint64_t)v5);
  v2 = v6;
  sub_10000D900(v5, v6);
  v3 = sub_100298C6C(v2);
  sub_100011758(v5);
  return v3;
}

void sub_100298B28()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298B4C()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298B68()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298B90()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298BB8()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298BD4()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298BF8()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298C1C()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298C3C()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

void sub_100298C54()
{
  void *v0;

  JUMPOUT(0x100298B0CLL);
}

uint64_t sub_100298C6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v2 = v1;
  v4 = type metadata accessor for Playlist.Entry(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v120 = (char *)&v114 - v9;
  v124 = type metadata accessor for Track(0);
  v122 = *(_QWORD *)(v124 - 8);
  v10 = __chkstk_darwin(v124);
  v12 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v123 = (char *)&v114 - v13;
  v129 = type metadata accessor for GenericMusicItem(0);
  v128 = *(_QWORD *)(v129 - 8);
  v14 = __chkstk_darwin(v129);
  v127 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v126 = (char *)&v114 - v16;
  v132 = type metadata accessor for UploadedVideo(0);
  v125 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for UploadedAudio(0);
  v130 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v134 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for TVShow(0);
  v133 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v137 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for TVEpisode(0);
  v136 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v140 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for Station(0);
  v139 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v158 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for Song(0);
  v142 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v156 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for Playlist(0);
  v144 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v146 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for MusicVideo(0);
  v145 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v148 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MusicMovie(0);
  v147 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v152 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Album(0);
  v151 = *(_QWORD *)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v154 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = a1;
  v30 = *(_QWORD *)(a1 - 8);
  v31 = __chkstk_darwin(v28);
  v117 = (char *)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v160 = (char *)&v114 - v34;
  v35 = __chkstk_darwin(v33);
  v153 = (char *)&v114 - v36;
  __chkstk_darwin(v35);
  v38 = (char *)&v114 - v37;
  if (qword_10054C3B8 != -1)
    swift_once(&qword_10054C3B8, sub_10029B1A0);
  v121 = v12;
  v118 = v8;
  v119 = v5;
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10000D78C(v39, (uint64_t)static Logger.capabilityUpsell);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v159 = v2;
  v42 = v41(v38, v2, v161);
  v116 = v40;
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(12, -1);
    v46 = v27;
    v47 = v161;
    v115 = v25;
    v48 = v45;
    v49 = swift_slowAlloc(32, -1);
    v150 = v4;
    v50 = v49;
    v162 = v49;
    *(_DWORD *)v48 = 136315138;
    v51 = v153;
    v41(v153, (uint64_t)v38, v47);
    v52 = (char *)String.init<A>(describing:)(v51, v47);
    v54 = v53;
    *(_QWORD *)(v48 + 4) = sub_1000BA30C(v52, v53, &v162);
    swift_bridgeObjectRelease(v54);
    v55 = v47;
    v27 = v46;
    v56 = *(void (**)(char *, uint64_t))(v30 + 8);
    v56(v38, v55);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "MusicItem - mediaKind =%s", (uint8_t *)v48, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    v57 = v50;
    v4 = v150;
    swift_slowDealloc(v57, -1, -1);
    v58 = v48;
    v25 = v115;
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    v56 = *(void (**)(char *, uint64_t))(v30 + 8);
    v56(v38, v161);
  }

  v59 = v156;
  v60 = v160;
  v61 = v161;
  v41(v160, v159, v161);
  v62 = v154;
  v63 = swift_dynamicCast(v154, v60, v61, v27, 0);
  v64 = v157;
  v65 = v158;
  v66 = v155;
  if (!v63)
  {
    v68 = v152;
    if (swift_dynamicCast(v152, v160, v161, v25, 0))
    {
      (*(void (**)(char *, uint64_t))(v147 + 8))(v68, v25);
      v67 = 0x6F6D2D636973756DLL;
      v56(v160, v161);
      return v67;
    }
    v150 = v4;
    v69 = v148;
    v70 = v149;
    if (swift_dynamicCast(v148, v160, v161, v149, 0))
    {
      (*(void (**)(char *, uint64_t))(v145 + 8))(v69, v70);
      v67 = 0x69762D636973756DLL;
      v56(v160, v161);
      return v67;
    }
    v156 = (char *)v56;
    v71 = v146;
    if (swift_dynamicCast(v146, v160, v161, v66, 0))
    {
      (*(void (**)(char *, uint64_t))(v144 + 8))(v71, v66);
      v67 = 0x7473696C79616C70;
      ((void (*)(char *, uint64_t))v156)(v160, v161);
      return v67;
    }
    if (swift_dynamicCast(v59, v160, v161, v64, 0))
    {
      (*(void (**)(char *, uint64_t))(v142 + 8))(v59, v64);
      v67 = 0x73676E6F73;
      ((void (*)(char *, uint64_t))v156)(v160, v161);
      return v67;
    }
    v72 = v143;
    v73 = swift_dynamicCast(v65, v160, v161, v143, 0);
    v74 = (void (*)(char *, uint64_t))v156;
    if (v73)
    {
      (*(void (**)(char *, uint64_t))(v139 + 8))(v65, v72);
      v67 = 0x736E6F6974617473;
LABEL_46:
      v74(v160, v161);
      return v67;
    }
    v75 = v140;
    v76 = v141;
    if (swift_dynamicCast(v140, v160, v161, v141, 0))
    {
      (*(void (**)(char *, uint64_t))(v136 + 8))(v75, v76);
      v67 = 0x6F736970652D7674;
      goto LABEL_46;
    }
    v77 = v137;
    v78 = v138;
    if (swift_dynamicCast(v137, v160, v161, v138, 0))
    {
      (*(void (**)(char *, uint64_t))(v133 + 8))(v77, v78);
      v67 = 0x73776F68732D7674;
      goto LABEL_46;
    }
    v79 = v134;
    v80 = v135;
    if (swift_dynamicCast(v134, v160, v161, v135, 0))
    {
      v67 = 0x646564616F6C7075;
      (*(void (**)(char *, uint64_t))(v130 + 8))(v79, v80);
      goto LABEL_46;
    }
    v81 = v131;
    v82 = v132;
    if (swift_dynamicCast(v131, v160, v161, v132, 0))
    {
      v67 = 0x646564616F6C7075;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v81, v82);
      goto LABEL_46;
    }
    v83 = v126;
    v84 = v129;
    if (swift_dynamicCast(v126, v160, v161, v129, 0))
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v127, v83, v84);
      sub_10029AC7C((uint64_t)&v162);
      v85 = v163;
      if (v163)
      {
        v86 = v164;
        sub_10000D900(&v162, v163);
        v67 = sub_100298C6C(v85, v86);
        sub_100011758(&v162);
      }
      else
      {
        sub_100011694((uint64_t)&v162, &qword_1005528B0);
        v67 = 0;
      }
      (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v129);
      goto LABEL_46;
    }
    v87 = v123;
    v88 = v124;
    if (swift_dynamicCast(v123, v160, v161, v124, 0))
    {
      v89 = v87;
      v90 = v122;
      v91 = v121;
      (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v121, v89, v88);
      Track.musicItem.getter((uint64_t)&v162);
      v92 = v163;
      if (v163)
      {
        v93 = v164;
        sub_10000D900(&v162, v163);
        v67 = sub_100298C6C(v92, v93);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v88);
LABEL_35:
        sub_100011758(&v162);
        goto LABEL_46;
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v88);
    }
    else
    {
      v94 = v120;
      v95 = v150;
      if (!swift_dynamicCast(v120, v160, v161, v150, 0))
      {
        v101 = v117;
        v102 = v41(v117, v159, v161);
        v103 = Logger.logObject.getter(v102);
        v104 = static os_log_type_t.fault.getter(v103);
        if (os_log_type_enabled(v103, v104))
        {
          v105 = swift_slowAlloc(12, -1);
          v106 = swift_slowAlloc(32, -1);
          v162 = v106;
          *(_DWORD *)v105 = 136315138;
          v107 = v153;
          v108 = v161;
          v41(v153, (uint64_t)v101, v161);
          v109 = (char *)String.init<A>(describing:)(v107, v108);
          v110 = v108;
          v112 = v111;
          *(_QWORD *)(v105 + 4) = sub_1000BA30C(v109, v111, &v162);
          swift_bridgeObjectRelease(v112);
          v74(v101, v110);
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Unsupported MusicItem kind=%s", (uint8_t *)v105, 0xCu);
          swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v106, -1, -1);
          swift_slowDealloc(v105, -1, -1);
        }
        else
        {
          v74(v101, v161);
        }

        goto LABEL_45;
      }
      v96 = v119;
      v97 = v118;
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v94, v95);
      sub_10029A7E8((uint64_t)&v162);
      v98 = v95;
      v99 = v163;
      if (v163)
      {
        v100 = v164;
        sub_10000D900(&v162, v163);
        v67 = sub_100298C6C(v99, v100);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
        goto LABEL_35;
      }
      (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
    }
    sub_100011694((uint64_t)&v162, &qword_1005528B0);
LABEL_45:
    v67 = 0;
    goto LABEL_46;
  }
  (*(void (**)(char *, uint64_t))(v151 + 8))(v62, v27);
  v67 = 0x736D75626C61;
  v56(v160, v161);
  return v67;
}

uint64_t sub_100299A0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, uint64_t, uint64_t);
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v127 = type metadata accessor for Playlist.Entry(0);
  v123 = *(_QWORD *)(v127 - 8);
  v2 = __chkstk_darwin(v127);
  v122 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v124 = (char *)&v118 - v4;
  v131 = type metadata accessor for Track(0);
  v126 = *(_QWORD *)(v131 - 8);
  v5 = __chkstk_darwin(v131);
  v125 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v128 = (char *)&v118 - v7;
  v135 = type metadata accessor for GenericMusicItem(0);
  v130 = *(_QWORD *)(v135 - 8);
  v8 = __chkstk_darwin(v135);
  v129 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v134 = (char *)&v118 - v10;
  v139 = type metadata accessor for UploadedVideo(0);
  v133 = *(_QWORD *)(v139 - 8);
  v11 = __chkstk_darwin(v139);
  v132 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v138 = (char *)&v118 - v13;
  v143 = type metadata accessor for UploadedAudio(0);
  v137 = *(_QWORD *)(v143 - 8);
  v14 = __chkstk_darwin(v143);
  v136 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v142 = (char *)&v118 - v16;
  v147 = type metadata accessor for TVShow(0);
  v141 = *(_QWORD *)(v147 - 8);
  v17 = __chkstk_darwin(v147);
  v140 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v146 = (char *)&v118 - v19;
  v151 = type metadata accessor for TVEpisode(0);
  v145 = *(_QWORD *)(v151 - 8);
  v20 = __chkstk_darwin(v151);
  v144 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v150 = (char *)&v118 - v22;
  v155 = type metadata accessor for Station(0);
  v149 = *(_QWORD *)(v155 - 8);
  v23 = __chkstk_darwin(v155);
  v148 = (char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v154 = (char *)&v118 - v25;
  v159 = type metadata accessor for Song(0);
  v153 = *(_QWORD *)(v159 - 8);
  v26 = __chkstk_darwin(v159);
  v152 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v158 = (char *)&v118 - v28;
  v163 = type metadata accessor for Playlist(0);
  v157 = *(_QWORD *)(v163 - 8);
  v29 = __chkstk_darwin(v163);
  v156 = (char *)&v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v162 = (char *)&v118 - v31;
  v165 = type metadata accessor for MusicVideo(0);
  v161 = *(_QWORD *)(v165 - 8);
  v32 = __chkstk_darwin(v165);
  v160 = (char *)&v118 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v164 = (char *)&v118 - v34;
  v35 = type metadata accessor for MusicMovie(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v118 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v41 = (char *)&v118 - v40;
  v42 = type metadata accessor for Album(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v118 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v118 - v48;
  v50 = __chkstk_darwin(v47);
  v119 = (char *)&v118 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v121 = (char *)&v118 - v53;
  __chkstk_darwin(v52);
  v55 = (char *)&v118 - v54;
  v166 = v56;
  v120 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  v120((char *)&v118 - v54, v167, a1);
  if (swift_dynamicCast(v49, v55, a1, v42, 0))
  {
    v57 = (*(uint64_t (**)(char *, char *, uint64_t))(v43 + 32))(v46, v49, v42);
    v58 = Album.catalogID.getter(v57);
    v60 = v59;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v42);
    if (v60)
      v61 = v58;
    else
      v61 = 0;
    v62 = v166;
    goto LABEL_28;
  }
  if (swift_dynamicCast(v41, v55, a1, v35, 0))
  {
    v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v39, v41, v35);
    v61 = MusicMovie.catalogID.getter(v63);
    v65 = v64;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    if (!v65)
      v61 = 0;
    v62 = v166;
    goto LABEL_28;
  }
  v67 = v164;
  v66 = v165;
  v68 = swift_dynamicCast(v164, v55, a1, v165, 0);
  v62 = v166;
  if (v68)
  {
    v70 = v160;
    v69 = v161;
    v71 = (*(uint64_t (**)(char *, char *, uint64_t))(v161 + 32))(v160, v67, v66);
    v72 = MusicVideo.catalogID.getter(v71);
    goto LABEL_26;
  }
  v74 = v162;
  v66 = v163;
  if (swift_dynamicCast(v162, v55, a1, v163, 0))
  {
    v70 = v156;
    v69 = v157;
    v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v157 + 32))(v156, v74, v66);
    v72 = Playlist.catalogID.getter(v75);
    goto LABEL_26;
  }
  v76 = v158;
  v66 = v159;
  if (swift_dynamicCast(v158, v55, a1, v159, 0))
  {
    v70 = v152;
    v69 = v153;
    v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v153 + 32))(v152, v76, v66);
    v72 = Song.catalogID.getter(v77);
    goto LABEL_26;
  }
  v79 = v154;
  v78 = v155;
  if (swift_dynamicCast(v154, v55, a1, v155, 0))
  {
    v80 = v149;
    v81 = v148;
    v82 = (*(uint64_t (**)(char *, char *, uint64_t))(v149 + 32))(v148, v79, v78);
    v61 = Station.id.getter(v82);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v78);
    goto LABEL_28;
  }
  v83 = v150;
  v66 = v151;
  if (swift_dynamicCast(v150, v55, a1, v151, 0))
  {
    v69 = v145;
    v70 = v144;
    v84 = (*(uint64_t (**)(char *, char *, uint64_t))(v145 + 32))(v144, v83, v66);
    v72 = TVEpisode.catalogID.getter(v84);
    goto LABEL_26;
  }
  v85 = v146;
  v66 = v147;
  if (swift_dynamicCast(v146, v55, a1, v147, 0))
  {
    v69 = v141;
    v70 = v140;
    v86 = (*(uint64_t (**)(char *, char *, uint64_t))(v141 + 32))(v140, v85, v66);
    v72 = TVShow.catalogID.getter(v86);
    goto LABEL_26;
  }
  v87 = v142;
  v66 = v143;
  if (swift_dynamicCast(v142, v55, a1, v143, 0))
  {
    v69 = v137;
    v70 = v136;
    v88 = (*(uint64_t (**)(char *, char *, uint64_t))(v137 + 32))(v136, v87, v66);
    v72 = UploadedAudio.catalogID.getter(v88);
    goto LABEL_26;
  }
  v89 = v138;
  v66 = v139;
  if (!swift_dynamicCast(v138, v55, a1, v139, 0))
  {
    v93 = v134;
    v94 = v135;
    if (swift_dynamicCast(v134, v55, a1, v135, 0))
    {
      v95 = v130;
      v96 = v129;
      (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v129, v93, v94);
      sub_10029AC7C((uint64_t)&v168);
      v97 = v169;
      if (v169)
      {
        v98 = v170;
        sub_10000D900(&v168, v169);
        v61 = sub_100299A0C(v97, v98);
        sub_100011758(&v168);
      }
      else
      {
        sub_100011694((uint64_t)&v168, &qword_1005528B0);
        v61 = 0;
      }
      (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v94);
      goto LABEL_28;
    }
    v99 = v128;
    v100 = v131;
    if (swift_dynamicCast(v128, v55, a1, v131, 0))
    {
      v101 = v126;
      v102 = v125;
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v125, v99, v100);
      Track.musicItem.getter((uint64_t)&v168);
    }
    else
    {
      v103 = v124;
      v100 = v127;
      if (!swift_dynamicCast(v124, v55, a1, v127, 0))
      {
        if (qword_10054C3B8 != -1)
          swift_once(&qword_10054C3B8, sub_10029B1A0);
        v106 = type metadata accessor for Logger(0);
        sub_10000D78C(v106, (uint64_t)static Logger.capabilityUpsell);
        v107 = v121;
        v108 = (void (*)(char *, char *, uint64_t))v120;
        v109 = ((uint64_t (*)(char *, uint64_t, uint64_t))v120)(v121, v167, a1);
        v110 = Logger.logObject.getter(v109);
        v111 = static os_log_type_t.fault.getter(v110);
        if (os_log_type_enabled(v110, v111))
        {
          v112 = swift_slowAlloc(12, -1);
          v113 = swift_slowAlloc(32, -1);
          v168 = v113;
          *(_DWORD *)v112 = 136315138;
          v114 = v119;
          v108(v119, v107, a1);
          v115 = (char *)String.init<A>(describing:)(v114, a1);
          v117 = v116;
          *(_QWORD *)(v112 + 4) = sub_1000BA30C(v115, v116, &v168);
          swift_bridgeObjectRelease(v117);
          (*(void (**)(char *, uint64_t))(v62 + 8))(v107, a1);
          _os_log_impl((void *)&_mh_execute_header, v110, v111, "Unsupported MusicItem catalogID=%s", (uint8_t *)v112, 0xCu);
          swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v113, -1, -1);
          swift_slowDealloc(v112, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v62 + 8))(v107, a1);
        }

        goto LABEL_47;
      }
      v101 = v123;
      v102 = v122;
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v122, v103, v100);
      sub_10029A7E8((uint64_t)&v168);
    }
    v104 = v169;
    if (v169)
    {
      v105 = v170;
      sub_10000D900(&v168, v169);
      v61 = sub_100299A0C(v104, v105);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v100);
      sub_100011758(&v168);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v100);
    sub_100011694((uint64_t)&v168, &qword_1005528B0);
LABEL_47:
    v61 = 0;
    goto LABEL_28;
  }
  v69 = v133;
  v70 = v132;
  v90 = (*(uint64_t (**)(char *, char *, uint64_t))(v133 + 32))(v132, v89, v66);
  v72 = UploadedVideo.catalogID.getter(v90);
LABEL_26:
  v61 = v72;
  v91 = v73;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v66);
  if (!v91)
    v61 = 0;
LABEL_28:
  (*(void (**)(char *, uint64_t))(v62 + 8))(v55, a1);
  return v61;
}

uint64_t Logger.capabilityUpsell.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10054C3B8 != -1)
    swift_once(&qword_10054C3B8, sub_10029B1A0);
  v0 = type metadata accessor for Logger(0);
  return sub_10000D78C(v0, (uint64_t)static Logger.capabilityUpsell);
}

uint64_t sub_10029A77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001774E0, v6, v7);
}

uint64_t sub_10029A7E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint8_t *v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  os_log_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v3 = type metadata accessor for Playlist.Entry(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v39 - v13;
  Playlist.Entry.internalItem.getter(v12);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v14, v7);
  if (v15 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
    v16 = type metadata accessor for MusicMovie(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = (unint64_t *)&unk_10054E028;
    v19 = &protocol conformance descriptor for MusicMovie;
LABEL_3:
    *(_QWORD *)(a1 + 32) = sub_10001254C(v18, v17, (uint64_t)v19);
LABEL_9:
    v22 = sub_1000C16E0((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v22, v14, v16);
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
    v20 = type metadata accessor for MusicVideo(0);
    v16 = v20;
    v21 = &protocol witness table for MusicVideo;
LABEL_8:
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v21;
    goto LABEL_9;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
    v20 = type metadata accessor for Song(0);
    v16 = v20;
    v21 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
    v16 = type metadata accessor for TVEpisode(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = (unint64_t *)&unk_10054E030;
    v19 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_3;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
    v16 = type metadata accessor for UploadedAudio(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = (unint64_t *)&unk_10054E9F8;
    v19 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_3;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
    v16 = type metadata accessor for UploadedVideo(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = (unint64_t *)&unk_10054E048;
    v19 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_3;
  }
  if (qword_10054C3B8 != -1)
    swift_once(&qword_10054C3B8, sub_10029B1A0);
  v24 = type metadata accessor for Logger(0);
  sub_10000D78C(v24, (uint64_t)static Logger.capabilityUpsell);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.fault.getter(v26);
  v43 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (_DWORD *)swift_slowAlloc(12, -1);
    v40 = v28;
    v29 = swift_slowAlloc(32, -1);
    v42 = v29;
    v44 = v29;
    *v28 = 136315138;
    v41 = v26;
    Playlist.Entry.internalItem.getter(v29);
    v30 = sub_10001254C(&qword_10054CE90, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem, (uint64_t)&protocol conformance descriptor for Playlist.Entry.InternalItem);
    v31 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v7, v30);
    v33 = v32;
    v34 = *(void (**)(char *, uint64_t))(v8 + 8);
    v34(v11, v7);
    v35 = sub_1000BA30C(v31, v33, &v44);
    v36 = (uint8_t *)v40;
    *(_QWORD *)(v40 + 1) = v35;
    swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v37 = v41;
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v43, "Unknown Entry internalItem=%s", v36, 0xCu);
    v38 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    v34 = *(void (**)(char *, uint64_t))(v8 + 8);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v34)(v14, v7);
}

uint64_t sub_10029AC7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  unint64_t *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for GenericMusicItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v31 - v8, v1, v3);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v9, v3);
  if (v11 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for Album(0);
    v13 = v12;
    v14 = &protocol witness table for Album;
LABEL_14:
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v14;
    goto LABEL_15;
  }
  if (v11 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for MusicMovie(0);
    v15 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v13;
    v16 = (unint64_t *)&unk_10054E028;
    v17 = &protocol conformance descriptor for MusicMovie;
LABEL_5:
    *(_QWORD *)(a1 + 32) = sub_10001254C(v16, v15, (uint64_t)v17);
LABEL_15:
    v18 = sub_1000C16E0((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v18, v9, v13);
  }
  if (v11 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for MusicVideo(0);
    v13 = v12;
    v14 = &protocol witness table for MusicVideo;
    goto LABEL_14;
  }
  if (v11 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for Playlist(0);
    v13 = v12;
    v14 = &protocol witness table for Playlist;
    goto LABEL_14;
  }
  if (v11 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for Song(0);
    v13 = v12;
    v14 = &protocol witness table for Song;
    goto LABEL_14;
  }
  if (v11 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v12 = type metadata accessor for Station(0);
    v13 = v12;
    v14 = &protocol witness table for Station;
    goto LABEL_14;
  }
  if (v11 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for TVEpisode(0);
    v15 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v13;
    v16 = (unint64_t *)&unk_10054E030;
    v17 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_5;
  }
  if (v11 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for TVShow(0);
    v15 = (uint64_t (*)(uint64_t))&type metadata accessor for TVShow;
    *(_QWORD *)(a1 + 24) = v13;
    v16 = (unint64_t *)&unk_10054E040;
    v17 = &protocol conformance descriptor for TVShow;
    goto LABEL_5;
  }
  if (v11 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for UploadedAudio(0);
    v15 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v13;
    v16 = (unint64_t *)&unk_10054E9F8;
    v17 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_5;
  }
  if (v11 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v9, v3);
    v13 = type metadata accessor for UploadedVideo(0);
    v15 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v13;
    v16 = (unint64_t *)&unk_10054E048;
    v17 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_5;
  }
  if (qword_10054C3B8 != -1)
    swift_once(&qword_10054C3B8, sub_10029B1A0);
  v20 = type metadata accessor for Logger(0);
  sub_10000D78C(v20, (uint64_t)static Logger.capabilityUpsell);
  v21 = ((uint64_t (*)(char *, uint64_t, uint64_t))v10)(v7, v1, v3);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.fault.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v32 = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = sub_10001254C(&qword_10054DCC0, (uint64_t (*)(uint64_t))&type metadata accessor for GenericMusicItem, (uint64_t)&protocol conformance descriptor for GenericMusicItem);
    v27 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v3, v26);
    v29 = v28;
    *(_QWORD *)(v24 + 4) = sub_1000BA30C(v27, v28, &v32);
    swift_bridgeObjectRelease(v29);
    v30 = *(void (**)(char *, uint64_t))(v4 + 8);
    v30(v7, v3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unsupported GenericMusicItem kind=%s", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t))(v4 + 8);
    v30(v7, v3);
  }

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v30)(v9, v3);
}

uint64_t sub_10029B1A0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.capabilityUpsell);
  sub_10000D78C(v0, (uint64_t)static Logger.capabilityUpsell);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0xD00000000000001CLL, 0x8000000100450020);
}

uint64_t static Logger.capabilityUpsell.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10054C3B8 != -1)
    swift_once(&qword_10054C3B8, sub_10029B1A0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Logger.capabilityUpsell);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void _s9MusicCore27SubscriptionUpsellPresenterV7present3foryAC9PlacementO_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  const char *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  size_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  __int128 v115[2];
  unsigned __int8 v116;
  _OWORD v117[2];
  unsigned __int8 v118;

  v2 = sub_10000B4C8((uint64_t *)&unk_100552B60);
  __chkstk_darwin(v2);
  v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v107 - 8);
  v6 = __chkstk_darwin(v107);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v101 - v9;
  v11 = sub_10000B4C8(&qword_10054C950);
  __chkstk_darwin(v11);
  v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v111 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v111 + 64);
  v16 = __chkstk_darwin(v14);
  v108 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v110 = (char *)&v101 - v17;
  if (qword_10054BB60 != -1)
    swift_once(&qword_10054BB60, sub_100164080);
  sub_10000B4C8(&qword_10054FFE0);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_1000AE4C0);
  v18 = *(void **)&v117[0];
  if (!*(_QWORD *)&v117[0])
    goto LABEL_8;
  v109 = v14;
  v106 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMarketingItemDynamicUIUrl);
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v22 = objc_msgSend(v18, "stringForBagKey:", v21);

  if (!v22)
  {

    goto LABEL_8;
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  *(_QWORD *)&v117[0] = 0x2F2F3A636973756DLL;
  *((_QWORD *)&v117[0] + 1) = 0xE800000000000000;
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v27 = *((_QWORD *)&v117[0] + 1);
  URL.init(string:)(*(_QWORD *)&v117[0], *((_QWORD *)&v117[0] + 1));
  swift_bridgeObjectRelease(v27);
  v28 = v111;
  v29 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v13, 1, v109) == 1)
  {

    sub_100011694((uint64_t)v13, &qword_10054C950);
LABEL_8:
    if (qword_10054C3B8 != -1)
      swift_once(&qword_10054C3B8, sub_10029B1A0);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10000D78C(v30, (uint64_t)static Logger.capabilityUpsell);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Could not build marketingURL", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    return;
  }
  v35 = 0xD000000000000011;
  v103 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v103(v110, v13, v29);
  v36 = sub_10000B4C8(&qword_10054DC70);
  v37 = *(unsigned __int8 *)(v5 + 80);
  v38 = (v37 + 32) & ~v37;
  v105 = *(_QWORD *)(v5 + 72);
  v39 = swift_allocObject(v36, v38 + 2 * v105, v37 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_100424BA0;
  v104 = v39;
  v102 = v38;
  URLQueryItem.init(name:value:)(0x5465636976726573, 0xEB00000000657079, 0x636973756DLL, 0xE500000000000000);
  sub_10029C480(a1, (uint64_t)v117);
  if (v118 == 253)
  {
    v35 = 0xD000000000000017;
    v42 = 0x8000000100450040;
    v40 = v110;
  }
  else
  {
    v40 = v110;
    if (v118 == 255)
    {
      v41 = "musicAddToLibrary";
    }
    else if (v118 == 254)
    {
      v35 = 0xD000000000000012;
      v41 = "musicAddToPlaylist";
    }
    else
    {
      sub_1000B5908((uint64_t)v117);
      v35 = 0xD000000000000013;
      v41 = "musicPlaybackUpsell";
    }
    v42 = (unint64_t)(v41 - 32) | 0x8000000000000000;
  }
  URLQueryItem.init(name:value:)(0x6E656D6563616C70, 0xE900000000000074, v35, v42);
  swift_bridgeObjectRelease(v42);
  sub_10029C480(a1, (uint64_t)v115);
  if (v116 < 0xFDu)
  {
    sub_100243F08(v115, v117);
    v44 = sub_100298A64();
    v43 = v104;
    if (v45)
    {
      v46 = v45;
      URLQueryItem.init(name:value:)(0x74694B616964656DLL, 0xEC000000646E694BLL, v44, v45);
      swift_bridgeObjectRelease(v46);
      v48 = *(_QWORD *)(v43 + 16);
      v47 = *(_QWORD *)(v43 + 24);
      v49 = v107;
      if (v48 >= v47 >> 1)
        v43 = sub_1000DEAB0(v47 > 1, v48 + 1, 1, (char *)v43);
      *(_QWORD *)(v43 + 16) = v48 + 1;
      (*(void (**)(size_t, char *, uint64_t))(v5 + 32))(v43 + v102 + v48 * v105, v10, v49);
    }
    else
    {
      if (qword_10054C3B8 != -1)
        swift_once(&qword_10054C3B8, sub_10029B1A0);
      v50 = type metadata accessor for Logger(0);
      sub_10000D78C(v50, (uint64_t)static Logger.capabilityUpsell);
      v51 = sub_10029C5AC((uint64_t)v117, (uint64_t)v115);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.fault.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(12, -1);
        v55 = swift_slowAlloc(32, -1);
        v114 = v55;
        *(_DWORD *)v54 = 136315138;
        sub_10029C5AC((uint64_t)v115, (uint64_t)v112);
        v56 = (char *)String.init<A>(describing:)(v112, &type metadata for SubscriptionUpsellPresenter.Placement.Source);
        v58 = v57;
        *(_QWORD *)(v54 + 4) = sub_1000BA30C(v56, v57, &v114);
        swift_bridgeObjectRelease(v58);
        sub_10029C5E0((uint64_t)v115);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Missing kind for item=%s", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
        v59 = v55;
        v43 = v104;
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v54, -1, -1);
      }
      else
      {
        sub_10029C5E0((uint64_t)v115);
      }

      v49 = v107;
    }
    sub_10029C5AC((uint64_t)v117, (uint64_t)v115);
    if (v116 == 1)
    {
      v60 = *(void **)&v115[0];
      v61 = MPModelObject.bestIdentifier(for:)(2, 1u);
      v63 = v62;

      if (v63)
      {
LABEL_35:
        URLQueryItem.init(name:value:)(1684366707, 0xE400000000000000, v61, v63);
        swift_bridgeObjectRelease(v63);
        v65 = *(_QWORD *)(v43 + 16);
        v64 = *(_QWORD *)(v43 + 24);
        if (v65 >= v64 >> 1)
          v43 = sub_1000DEAB0(v64 > 1, v65 + 1, 1, (char *)v43);
        v40 = v110;
        *(_QWORD *)(v43 + 16) = v65 + 1;
        (*(void (**)(size_t, char *, uint64_t))(v5 + 32))(v43 + v102 + v65 * v105, v8, v49);
        sub_10029C5E0((uint64_t)v117);
        goto LABEL_45;
      }
    }
    else
    {
      sub_1000B47A8(v115, (uint64_t)v112);
      v66 = v113;
      sub_10000D900(v112, v113);
      v61 = sub_100299A0C(v66);
      v63 = v67;
      sub_100011758(v112);
      if (v63)
        goto LABEL_35;
    }
    if (qword_10054C3B8 != -1)
      swift_once(&qword_10054C3B8, sub_10029B1A0);
    v68 = type metadata accessor for Logger(0);
    sub_10000D78C(v68, (uint64_t)static Logger.capabilityUpsell);
    v69 = sub_10029C5AC((uint64_t)v117, (uint64_t)v115);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.fault.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v114 = v73;
      *(_DWORD *)v72 = 136315138;
      sub_10029C5AC((uint64_t)v115, (uint64_t)v112);
      v74 = (char *)String.init<A>(describing:)(v112, &type metadata for SubscriptionUpsellPresenter.Placement.Source);
      v76 = v75;
      *(_QWORD *)(v72 + 4) = sub_1000BA30C(v74, v75, &v114);
      swift_bridgeObjectRelease(v76);
      sub_10029C5E0((uint64_t)v115);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Missing id for item=%s", (uint8_t *)v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);

    }
    else
    {

      sub_10029C5E0((uint64_t)v115);
    }
    sub_10029C5E0((uint64_t)v117);
    v40 = v110;
    goto LABEL_45;
  }
  sub_1000B5908((uint64_t)v115);
  v43 = v104;
LABEL_45:
  URL.append(queryItems:)((Swift::OpaquePointer)v43);
  swift_bridgeObjectRelease(v43);
  if (qword_10054C3B8 != -1)
    swift_once(&qword_10054C3B8, sub_10029B1A0);
  v77 = type metadata accessor for Logger(0);
  v78 = sub_10000D78C(v77, (uint64_t)static Logger.capabilityUpsell);
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.default.getter();
  v81 = os_log_type_enabled(v79, v80);
  v82 = (uint64_t)v106;
  if (v81)
  {
    v83 = swift_slowAlloc(12, -1);
    v84 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v117[0] = v84;
    *(_DWORD *)v83 = 136446210;
    swift_beginAccess(v40, v115, 0, 0);
    v85 = sub_10001254C((unint64_t *)&qword_100550728, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v86 = v109;
    v87 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v109, v85);
    v89 = v88;
    *(_QWORD *)(v83 + 4) = sub_1000BA30C(v87, v88, (uint64_t *)v117);
    swift_bridgeObjectRelease(v89);
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "Will present upsell with URL=%{public}s", (uint8_t *)v83, 0xCu);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {

    v86 = v109;
  }
  v90 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v82, 1, 1, v90);
  v91 = swift_beginAccess(v40, v117, 0, 0);
  v92 = v111;
  v93 = v108;
  (*(void (**)(char *, char *, uint64_t, __n128))(v111 + 16))(v108, v40, v86, v91);
  v94 = type metadata accessor for MainActor(0);
  v95 = static MainActor.shared.getter(v94);
  v96 = *(unsigned __int8 *)(v92 + 80);
  v97 = v40;
  v98 = (v96 + 32) & ~v96;
  v99 = swift_allocObject(&unk_100514E40, v98 + v15, v96 | 7);
  *(_QWORD *)(v99 + 16) = v95;
  *(_QWORD *)(v99 + 24) = &protocol witness table for MainActor;
  v103((char *)(v99 + v98), v93, v86);
  v100 = sub_10016702C(v82, (uint64_t)&unk_100556120, v99);
  swift_release(v100);

  (*(void (**)(char *, uint64_t))(v92 + 8))(v97, v86);
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter()
{
  return &type metadata for SubscriptionUpsellPresenter;
}

void destroy for SubscriptionUpsellPresenter.Placement(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 <= 1)
  {
    if (v1 == 1)

    else
      sub_100011758((_QWORD *)a1);
  }
}

uint64_t initializeWithCopy for SubscriptionUpsellPresenter.Placement(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 > 1)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else if (v3 == 1)
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
    v5 = v4;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SubscriptionUpsellPresenter.Placement(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *((unsigned __int8 *)a2 + 40);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
LABEL_17:
        v11 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      }
      goto LABEL_8;
    }
LABEL_12:
    v8 = *a2;
    v9 = a2[1];
    *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  if (v5 > 1)
  {
    if (v4 == 1)

    else
      sub_100011758((_QWORD *)a1);
    goto LABEL_12;
  }
  if ((__int128 *)a1 != a2)
  {
    if (v4 == 1)

    else
      sub_100011758((_QWORD *)a1);
    v10 = *((unsigned __int8 *)a2 + 40);
    if (v10 >= 2)
      v10 = *(_DWORD *)a2 + 2;
    if (v10 != 1)
      goto LABEL_17;
LABEL_8:
    v6 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
    v7 = v6;
  }
  return a1;
}

uint64_t assignWithTake for SubscriptionUpsellPresenter.Placement(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  unsigned int v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
LABEL_17:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      }
      goto LABEL_8;
    }
LABEL_12:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    return a1;
  }
  if (v5 > 1)
  {
    if (v4 == 1)

    else
      sub_100011758((_QWORD *)a1);
    goto LABEL_12;
  }
  if (a1 != a2)
  {
    if (v4 == 1)

    else
      sub_100011758((_QWORD *)a1);
    v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 != 1)
      goto LABEL_17;
LABEL_8:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 4)
    return v4 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -3 - a2;
  }
  return result;
}

uint64_t sub_10029C1A0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_10029C1B4(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFE)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 25) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter.Placement()
{
  return &type metadata for SubscriptionUpsellPresenter.Placement;
}

void destroy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)

  else
    sub_100011758((_QWORD *)a1);
}

uint64_t initializeWithCopy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  char v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = v4;
    v6 = 1;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    v6 = 0;
  }
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)

    else
      sub_100011758((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
      v7 = v6;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)

    else
      sub_100011758((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter.Placement.Source()
{
  return &type metadata for SubscriptionUpsellPresenter.Placement.Source;
}

uint64_t sub_10029C480(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionUpsellPresenter.Placement(a2, a1);
  return a2;
}

uint64_t sub_10029C4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10029C528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10055611C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000DC64;
  return sub_10029A77C(a1, v5, v6, v7);
}

uint64_t sub_10029C5AC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionUpsellPresenter.Placement.Source(a2, a1);
  return a2;
}

uint64_t sub_10029C5E0(uint64_t a1)
{
  destroy for SubscriptionUpsellPresenter.Placement.Source(a1);
  return a1;
}

uint64_t static ApplicationRecordUtilities.isApplicationInstalled(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  result = (uint64_t)sub_10029D184(a1, a2, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t static ApplicationRecordUtilities.openApplication(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_task_switch(sub_10029C6A4, 0, 0);
}

id sub_10029C6A4()
{
  _QWORD *v0;
  id result;
  void *v2;
  _QWORD *v3;
  NSString v4;
  uint64_t v5;
  _QWORD *v6;

  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  v0[17] = result;
  if (result)
  {
    v2 = result;
    v3 = v0 + 2;
    v4 = String._bridgeToObjectiveC()();
    v0[18] = v4;
    v0[7] = v0 + 20;
    v0[2] = v0;
    v0[3] = sub_10029C784;
    v5 = swift_continuation_init(v0 + 2, 1);
    v0[10] = _NSConcreteStackBlock;
    v6 = v0 + 10;
    v6[1] = 0x40000000;
    v6[2] = sub_10029C864;
    v6[3] = &unk_100515578;
    v6[4] = v5;
    objc_msgSend(v2, "openApplicationWithBundleIdentifier:configuration:completionHandler:", v4, 0, v6);
    return (id)swift_continuation_await(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10029C784()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_10029C81C;
  else
    v2 = sub_10029C7E4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10029C7E4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029C81C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v1 + 144);
  v3 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10029C864(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10000B4C8(&qword_100556360);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

NSString sub_10029C8E4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.applicationRegistered = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.applicationRegistered.unsafeMutableAddressor()
{
  if (qword_100556130 != -1)
    swift_once(&qword_100556130, sub_10029C8E4);
  return &static NSNotificationName.applicationRegistered;
}

id static NSNotificationName.applicationRegistered.getter()
{
  if (qword_100556130 != -1)
    swift_once(&qword_100556130, sub_10029C8E4);
  return (id)static NSNotificationName.applicationRegistered;
}

id variable initialization expression of BrightnessManager.brightnessClient()
{
  return objc_msgSend(objc_allocWithZone((Class)BrightnessSystemClient), "init");
}

unint64_t variable initialization expression of BrightnessManager.minimumBrightness()
{
  return sub_10029C9C8((uint64_t)&off_100514E58);
}

unint64_t sub_10029C9C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100556350);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    result = sub_1002B230C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10029CAD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100556348);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    result = sub_1002B230C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10029CBE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t result;
  char v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100556338);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = v6[1];
    v10 = v6[2];
    v11 = v6[3];
    v12 = v6[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1002B23AC(v7, v8, v9, v10);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (unint64_t *)(v4[6] + 32 * result);
    *v15 = v7;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    v16 = (unint64_t *)(v4[7] + 16 * result);
    *v16 = v11;
    v16[1] = v12;
    v17 = v4[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v6 += 6;
    v4[2] = v19;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10029CD24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100556328);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1002B230C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10029CE44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100556320);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = (void *)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    v11 = v10;
    swift_bridgeObjectRetain();
    result = sub_1002B248C(v7, v8, (uint64_t)v11);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 24 * result);
    *v14 = v7;
    v14[1] = v8;
    v14[2] = (uint64_t)v11;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4[2] = v17;
    v6 += 4;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10029CF80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100556358);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1002B230C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of BrightnessManager.resetBrightness()
{
  return sub_10029C9C8((uint64_t)&off_100514EA8);
}

unint64_t variable initialization expression of BrightnessManager.disableCBFeatures()
{
  return sub_10029CAD8((uint64_t)&off_100514EF8);
}

unint64_t variable initialization expression of BrightnessManager.enableCBFeatures()
{
  return sub_10029CAD8((uint64_t)&off_100514F30);
}

uint64_t variable initialization expression of Datavault.logger@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of WeakArray.items(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for WeakArray.WeakBox(0, a1, a1, a4);
  return static Array._allocateUninitialized(_:)(0, v4);
}

uint64_t variable initialization expression of WeakValuesDictionary.storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;

  v5 = sub_10029D69C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a1, v5, 0, 0);
  v7 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  return Dictionary.init(dictionaryLiteral:)(v7, a1, v5, a3);
}

id sub_10029D184(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

NSNumber sub_10029D25C()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_10029D264(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_10029D2B4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_10029D308(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Int sub_10029D32C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10029D370()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10029D398()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_10029D3D8(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10029D3EC(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_10029D400(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100556300, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100436510);
  v3 = sub_10001254C(&qword_100556308, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_1004364B0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10029D484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100556310, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_100436734);
  v3 = sub_10001254C(&qword_100556318, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_10043612C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_DWORD *sub_10029D508@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_10029D518@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_10029D524(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_1005562F0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100436668);
  v3 = sub_10001254C(&qword_1005562F8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100436608);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_10029D5B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C((unint64_t *)&qword_100556390, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004368CC);
  v3 = sub_10001254C(qword_100556398, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100436820);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10029D63C()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_10029D644()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_10029D674(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

BOOL sub_10029D688(float *a1, float *a2)
{
  return *a1 == *a2;
}

unint64_t sub_10029D69C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005561F0;
  if (!qword_1005561F0)
  {
    v1 = objc_opt_self(NSValue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005561F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationRecordUtilities()
{
  return &type metadata for ApplicationRecordUtilities;
}

void type metadata accessor for AnimationCurve(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005561F8, (uint64_t)&unk_1005156E0);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556200, (uint64_t)&unk_100515700);
}

__n128 initializeWithTake for UserDefaultsKeyValueTrigger(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556208, (uint64_t)&unk_100515780);
}

void type metadata accessor for CTFrame(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556210, (uint64_t)&unk_1005157B0);
}

void type metadata accessor for Event(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556218, (uint64_t)&unk_1005157E0);
}

void _s3__C4NameVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556220, (uint64_t)&unk_100515808);
}

void _s3__C16os_unfair_lock_sVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556228, (uint64_t)&unk_100515830);
}

void _s3__C24MPCPlaybackIntentOptionsVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556230, (uint64_t)&unk_100515858);
}

__n128 initializeWithTake for NotificationTrigger(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556238, (uint64_t)&unk_1005158D8);
}

void _s3__C6CGRectVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556240, (uint64_t)&unk_100515958);
}

void type metadata accessor for State(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556248, (uint64_t)&unk_100515980);
}

void type metadata accessor for Attribute(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556250, (uint64_t)&unk_1005159A0);
}

void _s3__C6CGSizeVMa_1(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556258, (uint64_t)&unk_100515A18);
}

void _s3__C3KeyVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556260, (uint64_t)&unk_100515A40);
}

void _s3__C7CGPointVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556268, (uint64_t)&unk_100515AC0);
}

void type metadata accessor for CTRun(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556270, (uint64_t)&unk_100515AE8);
}

void type metadata accessor for CTLine(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556278, (uint64_t)&unk_100515B18);
}

uint64_t sub_10029D858()
{
  return sub_10001254C(&qword_100556280, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_1004360F0);
}

uint64_t sub_10029D884()
{
  return sub_10001254C(&qword_100556288, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_1004360C4);
}

uint64_t sub_10029D8B0()
{
  return sub_10001254C(&qword_100556290, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_100436228);
}

uint64_t sub_10029D8DC()
{
  return sub_10001254C(&qword_100556298, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_1004362D8);
}

uint64_t sub_10029D908()
{
  return sub_10001254C(&qword_1005562A0, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_1004362A4);
}

uint64_t sub_10029D934()
{
  return sub_10001254C(&qword_1005562A8, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_100436304);
}

uint64_t sub_10029D960()
{
  return sub_10001254C(&qword_1005562B0, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_100436340);
}

uint64_t sub_10029D98C()
{
  return sub_10001254C(&qword_1005562B8, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100436474);
}

uint64_t sub_10029D9B8()
{
  return sub_10001254C(&qword_1005562C0, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100436448);
}

uint64_t sub_10029D9E4()
{
  return sub_10001254C(&qword_1005562C8, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_1004364E4);
}

uint64_t sub_10029DA10()
{
  return sub_10001254C(&qword_1005562D0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004365CC);
}

uint64_t sub_10029DA3C()
{
  return sub_10001254C(&qword_1005562D8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004365A0);
}

uint64_t sub_10029DA68()
{
  return sub_10001254C(&qword_1005562E0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_10043663C);
}

uint64_t sub_10029DA94()
{
  return sub_10001254C(&qword_1005562E8, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_100436160);
}

unint64_t sub_10029DAC0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10000B4C8(&qword_100556340);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  result = sub_1002B2320(v5, v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_BYTE *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v5;
    v10[1] = v4;
    *(_BYTE *)(v3[7] + result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 24;
    v5 = *((_QWORD *)v9 - 2);
    v15 = *((_QWORD *)v9 - 1);
    v6 = *v9;
    swift_bridgeObjectRetain();
    result = sub_1002B2320(v5, v15);
    v9 = v14;
    v4 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_10029DBD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000B4C8(&qword_100556330);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1002B2434(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

void type metadata accessor for MPModelPlaylistEntryType(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556368, (uint64_t)&unk_100515B48);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100556370, (uint64_t)&unk_100515B68);
}

uint64_t sub_10029DCD4()
{
  return sub_10001254C(&qword_100556378, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004367E4);
}

uint64_t sub_10029DD00()
{
  return sub_10001254C(&qword_100556380, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004367B8);
}

uint64_t sub_10029DD2C()
{
  return sub_10001254C(&qword_100556388, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100436854);
}

uint64_t static ArrayBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  _QWORD v7[6];

  v7[5] = a1;
  v7[2] = a2;
  v2 = type metadata accessor for Array(255);
  v3 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v3);
  v5 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v2);
  return Sequence.flatMap<A>(_:)(sub_1000D1A74, v7, v3, v2, WitnessTable, v5);
}

uint64_t static ArrayBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __C::_NSRange v10;
  Swift::Int location;
  uint64_t WitnessTable;
  uint64_t v13;
  _QWORD v15[6];

  v4 = type metadata accessor for Optional(255, a2);
  v5 = type metadata accessor for _ContiguousArrayStorage(0, v4);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72), *(unsigned __int8 *)(v6 + 80) | 7);
  v8 = static Array._adoptStorage(_:count:)(v7, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, a1, v4);
  v15[5] = v8;
  v10.location = type metadata accessor for Array(0);
  location = v10.location;
  CFRange.init(_:)(v10);
  v15[2] = a2;
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], location);
  v13 = Sequence.compactMap<A>(_:)(sub_10029DEF4, v15, location, a2, WitnessTable);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10029DEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
}

uint64_t type metadata accessor for ArrayBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayBuilder);
}

uint64_t Whitetail.Binding.configurationBlock.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 48, 7);
  Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(a1, a2, a3, a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _BYTE v13[72];

  v9 = sub_10000B4C8(&qword_100556430);
  inited = swift_initStackObject(v9, v13);
  *(_OWORD *)(inited + 16) = xmmword_100424BB0;
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = 0;
  v11 = swift_allocObject(v4, 48, 7);
  Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, a2, a3, a4);
  return v11;
}

uint64_t Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;
  char v31[32];

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 40) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a4;
  swift_retain(v5);
  swift_retain(a4);
  v16 = sub_10029F598(a1, v5);
  swift_bridgeObjectRelease(a1);
  swift_release(v5);
  swift_beginAccess(v5 + 40, v31, 1, 0);
  v17 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v16;
  swift_bridgeObjectRelease(v17);
  if ((a2 & 1) != 0)
  {
    v18 = (void *)objc_opt_self(NSThread);
    swift_retain_n(v5, 2);
    if (objc_msgSend(v18, "isMainThread"))
    {
      (*(void (**)(void))(v5 + 16))();
    }
    else
    {
      sub_10029F70C();
      v19 = (void *)static OS_dispatch_queue.main.getter();
      aBlock[4] = sub_1000D75E8;
      v30 = v5;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10015F6F8;
      aBlock[3] = &unk_100515D20;
      v20 = _Block_copy(aBlock);
      v21 = v30;
      swift_retain(v5);
      swift_release(v21);
      static DispatchQoS.unspecified.getter(v22);
      aBlock[0] = _swiftEmptyArrayStorage;
      v23 = sub_10001254C((unint64_t *)&qword_100556420, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v24 = sub_10000B4C8((uint64_t *)&unk_100557320);
      v25 = sub_10029F760();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v10, v23);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v27);
    }
    swift_release_n(v5, 2);
  }
  swift_release(a4);
  return v5;
}

Swift::Void __swiftcall Whitetail.Binding.setNeedsUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s *)(v1 + 32);
  swift_beginAccess(v1 + 32, aBlock, 33, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  swift_endAccess(aBlock);
  if ((*(_BYTE *)(v1 + 36) & 1) == 0)
  {
    *(_BYTE *)(v1 + 36) = 1;
    sub_10029F70C();
    v19 = v3;
    v11 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_10029F7AC;
    v21 = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10015F6F8;
    aBlock[3] = &unk_100515D48;
    v12 = _Block_copy(aBlock);
    v13 = v21;
    swift_retain(v1);
    swift_release(v13);
    static DispatchQoS.unspecified.getter(v14);
    aBlock[0] = _swiftEmptyArrayStorage;
    v15 = sub_10001254C((unint64_t *)&qword_100556420, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_10000B4C8((uint64_t *)&unk_100557320);
    v17 = sub_10029F760();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
    _Block_release(v12);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess(v10, aBlock, 33, 0);
  os_unfair_lock_unlock(v10);
  swift_endAccess(aBlock);
}

uint64_t Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _BYTE v13[72];

  v9 = sub_10000B4C8(&qword_100556430);
  inited = swift_initStackObject(v9, v13);
  *(_OWORD *)(inited + 16) = xmmword_100424BB0;
  sub_1000C53BC((uint64_t)a1, inited + 32);
  v11 = swift_allocObject(v4, 48, 7);
  Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, a2, a3, a4);
  sub_100011758(a1);
  return v11;
}

uint64_t Whitetail.Binding.add(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(double (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v3 = a1[3];
  v4 = a1[4];
  sub_10000D900(a1, v3);
  v5 = swift_allocObject(&unk_100515D80, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v6 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t))(v4 + 8);
  swift_retain(v5);
  v7 = v6(sub_10029F7D8, v5, v3, v4);
  if (v2)
  {
    swift_errorRelease(v2);
    return swift_release_n(v5, 2);
  }
  else
  {
    v9 = v7;
    swift_release_n(v5, 2);
    swift_beginAccess(v1 + 40, v14, 33, 0);
    v10 = swift_unknownObjectRetain(v9);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)((*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
    specialized Array._endMutation()(v13);
    swift_endAccess(v14);
    return swift_unknownObjectRelease(v9);
  }
}

double sub_10029E750(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    Whitetail.Binding.setNeedsUpdate()();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Whitetail.Binding.add(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(double (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _QWORD *v20;

  v3 = v2;
  v4 = *((_QWORD *)a1._rawValue + 2);
  if (v4)
  {
    v5 = v1;
    v6 = (char *)a1._rawValue + 32;
    v20 = (_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain();
    do
    {
      v8 = v6[3];
      v7 = v6[4];
      sub_10000D900(v6, v8);
      v9 = swift_allocObject(&unk_100515D80, 24, 7);
      v10 = v5;
      swift_weakInit(v9 + 16, v5);
      v11 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t))(v7 + 8);
      swift_retain(v9);
      v12 = v11(sub_10029F7D8, v9, v8, v7);
      if (v3)
      {
        swift_errorRelease(v3);
        swift_release_n(v9, 2);
        v3 = 0;
      }
      else
      {
        v13 = v12;
        swift_release_n(v9, 2);
        v14 = v20;
        swift_beginAccess(v20, v19, 33, 0);
        v15 = swift_unknownObjectRetain(v13);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v17 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v16 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v13);
        specialized Array._endMutation()(v18);
        swift_endAccess(v19);
        swift_unknownObjectRelease(v13);
      }
      v5 = v10;
      v6 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10029E930(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (os_unfair_lock_s *)(a1 + 32);
  swift_beginAccess(a1 + 32, v5, 33, 0);
  os_unfair_lock_lock(v2);
  *(_BYTE *)(a1 + 36) = 0;
  os_unfair_lock_unlock(v2);
  v3 = swift_endAccess(v5);
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(v3);
}

uint64_t Whitetail.Binding.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  _QWORD v12[3];
  _QWORD v13[2];

  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)(*v0, 0);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v12[0] = v0;
  _print_unlocked<A, B>(_:_:)(v12, v13, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 0x6576726573626F20;
  v5._object = (void *)0xEB000000003D7372;
  String.append(_:)(v5);
  swift_beginAccess(v0 + 5, v12, 0, 0);
  v6 = v0[5];
  v7 = swift_bridgeObjectRetain();
  v8._countAndFlagsBits = Array.description.getter(v7, (char *)&type metadata for Swift.AnyObject + 8);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v13[0];
}

uint64_t Whitetail.Binding.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t Whitetail.Binding.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_10029EB14()
{
  return Whitetail.Binding.description.getter();
}

id DistributedNotificationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  NSString v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  uint64_t v12;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v5 = swift_allocObject(&unk_100515DA8, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = objc_allocWithZone((Class)MusicDarwinNotificationObserver);
  swift_retain(a2);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v11[4] = sub_1000D75E8;
  v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10015F6F8;
  v11[3] = &unk_100515DC0;
  v8 = _Block_copy(v11);
  v9 = objc_msgSend(v6, "initWithNotificationName:handler:", v7, v8);

  _Block_release(v8);
  swift_release(v12);
  return v9;
}

id sub_10029EC40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return DistributedNotificationTrigger.createObserver(_:)(a1, a2, *v2);
}

uint64_t NotificationTrigger.object.getter(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectRetain(a2);
}

uint64_t NotificationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = swift_allocObject(&unk_100515DF8, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = type metadata accessor for NotificationObserver();
  swift_allocObject(v9, 64, 7);
  swift_unknownObjectRetain(a4);
  swift_retain(a2);
  return NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(a3, a4, 1, 1, (uint64_t)sub_1000D75E8, v8);
}

uint64_t sub_10029ED10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(void **)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v7 = swift_allocObject(&unk_100516108, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = type metadata accessor for NotificationObserver();
  swift_allocObject(v8, 64, 7);
  swift_unknownObjectRetain(v5);
  swift_retain(a2);
  return NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v6, v5, 1, 1, (uint64_t)sub_1000DC31C, v7);
}

uint64_t KeyValueObservationTrigger.keyPath.getter(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t KeyValueObservationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;

  v12 = (_QWORD *)swift_allocObject(&unk_100515E20, 48, 7);
  v12[2] = a5;
  v12[3] = a6;
  v12[4] = a1;
  v12[5] = a2;
  v13 = a3;
  swift_retain(a2);
  v14 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(a4, 0, sub_10029F838, v12, &protocol witness table for NSObject);
  swift_release(v12);

  return v14;
}

uint64_t sub_10029EE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyValueObservationTrigger.createObserver(_:)(a1, a2, *(void **)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t UserDefaultsKeyValueTrigger.init<A>(suiteName:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  dispatch thunk of RawRepresentable.rawValue.getter(&v9, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a3, a4);
  return a1;
}

char *UserDefaultsKeyValueTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char *v13;

  v12 = swift_allocObject(&unk_100515E48, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_retain(a2);
  v13 = sub_10029EFCC(a5, a6, a3, a4, (uint64_t)sub_1000DC31C, v12);
  swift_bridgeObjectRelease();
  swift_release(v12);
  return v13;
}

char *sub_10029EFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];

  v36 = a5;
  v37 = a6;
  v10 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v35 = (uint64_t)&v34 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - v17;
  v38[0] = a1;
  v38[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = String.init<A>(_:)(v38, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v21 = v20;
  _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v22 = &v18[*(int *)(v10 + 20)];
  *(_QWORD *)v22 = a3;
  *((_QWORD *)v22 + 1) = a4;
  v23 = (uint64_t *)&v18[*(int *)(v10 + 24)];
  *v23 = v19;
  v23[1] = v21;
  if (qword_1005561A8 != -1)
    swift_once(&qword_1005561A8, sub_1002C7B24);
  v24 = qword_100557408;
  v25 = *(_QWORD *)(qword_100557408
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 16));
  v26 = v38[3];
  sub_1002C7BF8(v24, (uint64_t)v18, v36, v37);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
  if (v26)
  {
    sub_10029FE5C((uint64_t)v18);
  }
  else
  {
    v27 = v35;
    sub_10029FE98((uint64_t)v18, v35);
    sub_10029FEDC((uint64_t)v18, (uint64_t)v14);
    v28 = *(unsigned __int8 *)(v11 + 80);
    v29 = (v28 + 16) & ~v28;
    v30 = swift_allocObject(&unk_100516130, v29 + v12, v28 | 7);
    sub_10029FEDC((uint64_t)v14, v30 + v29);
    v31 = type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    v14 = (char *)swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    sub_10029FEDC(v27, (uint64_t)&v14[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier]);
    v32 = (void (**)())&v14[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate];
    *v32 = sub_10029FFBC;
    v32[1] = (void (*)())v30;
  }
  return v14;
}

char *sub_10029F208(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v5 = *v2;
  v6 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  v9 = swift_allocObject(&unk_1005160E0, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_retain(a2);
  v10 = sub_10029EFCC(v8, v7, v5, v6, (uint64_t)sub_1000DC31C, v9);
  swift_bridgeObjectRelease();
  swift_release(v9);
  return v10;
}

uint64_t PublisherTrigger.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a3, a1, v5);
}

uint64_t PublisherTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  void *WitnessTable;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41[4];

  v39 = a1;
  v40 = a2;
  v4 = sub_10000B4C8(&qword_100556438);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(a3 + 16);
  v7 = (void *)type metadata accessor for Published.Publisher(255, v38);
  v8 = (void *)sub_10029F70C();
  WitnessTable = (void *)swift_getWitnessTable((const char *)&protocol conformance descriptor for Published<A>.Publisher, v7);
  v35 = WitnessTable;
  v10 = (void *)sub_10001254C(&qword_100556440, (uint64_t (*)(uint64_t))sub_10029F70C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v41[0] = v7;
  v41[1] = v8;
  v41[2] = WitnessTable;
  v41[3] = v10;
  v11 = type metadata accessor for Publishers.ReceiveOn(0, v41);
  v36 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - v12;
  v14 = swift_getWitnessTable((const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>, v11);
  v15 = type metadata accessor for Publishers.Drop(0, v11, v14);
  v37 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v34 - v17;
  v41[0] = (id)static OS_dispatch_queue.main.getter(v16, v19, v20, v21, v22, v23, v24, v25);
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
  Publisher.receive<A>(on:options:)(v41, v6, v7, v8, v35);
  sub_10029F858((uint64_t)v6);

  Publisher.dropFirst(_:)(1, v11, v14);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v11);
  v27 = (_QWORD *)swift_allocObject(&unk_100515E70, 40, 7);
  v28 = v39;
  v27[2] = v38;
  v27[3] = v28;
  v29 = v40;
  v27[4] = v40;
  swift_retain(v29);
  v30 = swift_getWitnessTable((const char *)&protocol conformance descriptor for Publishers.Drop<A>, v15);
  v31 = Publisher<>.sink(receiveValue:)(sub_10029F8BC, v27, v15, v30);
  v32 = swift_release(v27);
  (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v18, v15, v32);
  return v31;
}

uint64_t sub_10029F584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PublisherTrigger.createObserver(_:)(a1, a2, a3);
}

_QWORD *sub_10029F598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(double (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  result = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 32);
    v19 = a1;
    swift_bridgeObjectRetain();
    do
    {
      v10 = v8[3];
      v9 = v8[4];
      sub_10000D900(v8, v10);
      v11 = swift_allocObject(&unk_100515D80, 24, 7);
      swift_weakInit(v11 + 16, a2);
      v12 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t))(v9 + 8);
      swift_retain(v11);
      v13 = v12(sub_10029F7D8, v11, v10, v9);
      if (v3)
      {
        swift_errorRelease(v3);
        swift_release_n(v11, 2);
        v3 = 0;
      }
      else
      {
        v14 = v13;
        v15 = swift_release_n(v11, 2);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
        specialized Array._endMutation()(v18);
      }
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(v19);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

unint64_t sub_10029F70C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100557310;
  if (!qword_100557310)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100557310);
  }
  return result;
}

uint64_t sub_10029F748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10029F758(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_10029F760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556428;
  if (!qword_100556428)
  {
    v1 = sub_100011650((uint64_t *)&unk_100557320);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100556428);
  }
  return result;
}

uint64_t sub_10029F7AC()
{
  uint64_t v0;

  return sub_10029E930(v0);
}

uint64_t sub_10029F7B4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_10029F7D8()
{
  uint64_t v0;

  return sub_10029E750(v0);
}

uint64_t sub_10029F7F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10029F814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10029F838()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_10029F858(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100556438);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10029F898()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10029F8BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

ValueMetadata *type metadata accessor for Whitetail()
{
  return &type metadata for Whitetail;
}

uint64_t type metadata accessor for Whitetail.Binding()
{
  return objc_opt_self(_TtCO14MusicUtilities9Whitetail7Binding);
}

ValueMetadata *type metadata accessor for DistributedNotificationTrigger()
{
  return &type metadata for DistributedNotificationTrigger;
}

_QWORD *initializeBufferWithCopyOfBuffer for NotificationTrigger(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_unknownObjectRetain(v4);
  return a1;
}

uint64_t destroy for NotificationTrigger(uint64_t a1)
{

  return swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for NotificationTrigger(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for NotificationTrigger(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NotificationTrigger()
{
  return &type metadata for NotificationTrigger;
}

_QWORD *sub_10029FA1C(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain(v4);
  return a1;
}

double sub_10029FA50(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10029FA78(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_10029FAD0(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t type metadata accessor for KeyValueObservationTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyValueObservationTrigger);
}

uint64_t getEnumTagSinglePayload for UserDefaultsKeyValueTrigger(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDefaultsKeyValueTrigger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsKeyValueTrigger()
{
  return &type metadata for UserDefaultsKeyValueTrigger;
}

uint64_t sub_10029FBB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Published.Publisher(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t sub_10029FC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v5 - 8))(a1, a2, v5);
}

uint64_t sub_10029FC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t sub_10029FC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  return a1;
}

uint64_t sub_10029FCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1, a2, v5);
  return a1;
}

uint64_t sub_10029FD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  return a1;
}

uint64_t sub_10029FD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a1, a2, v5);
  return a1;
}

uint64_t sub_10029FDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029FDC0);
}

uint64_t sub_10029FDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, a2, v5);
}

uint64_t sub_10029FE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029FE0C);
}

uint64_t sub_10029FE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a4 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

uint64_t type metadata accessor for PublisherTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublisherTrigger);
}

uint64_t sub_10029FE5C(uint64_t a1)
{
  uint64_t v2;

  v2 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10029FE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029FEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029FF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

void sub_10029FFBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8) + 80);
  sub_1002C79A4(v0 + ((v1 + 16) & ~v1));
}

uint64_t NotificationObserver.__allocating_init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, 64, 7);
  NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  __objc2_class **v14;
  char **v15;
  void *v16;
  id v17;
  id v18;
  uint64_t Strong;
  id v20;
  id v21;

  v13 = swift_unknownObjectWeakInit(v6 + 24, 0);
  *(_QWORD *)(v6 + 16) = a1;
  swift_unknownObjectWeakAssign(v13, a2);
  *(_BYTE *)(v6 + 32) = a3;
  v14 = (__objc2_class **)NSNotificationCenter_ptr;
  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 56) = a6;
  if ((a4 & 1) != 0)
  {
    v15 = &selRef_defaultCenter;
  }
  else
  {
    v14 = &off_1004F7E90;
    v15 = &selRef_default;
  }
  v16 = (void *)objc_opt_self(*v14);
  v17 = a1;
  swift_retain(a6);
  v18 = objc_msgSend(v16, *v15);
  *(_QWORD *)(v6 + 40) = v18;
  Strong = swift_unknownObjectWeakLoadStrong(v6 + 24);
  v20 = v17;
  v21 = v18;
  swift_retain(v6);
  objc_msgSend(v21, "addObserver:selector:name:object:", v6, "handleNotification:", v20, Strong);

  swift_release(v6);
  swift_unknownObjectRelease(Strong);

  swift_unknownObjectRelease(a2);
  swift_release(a6);
  return v6;
}

uint64_t NotificationObserver.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t Strong;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 24);
  objc_msgSend(v1, "removeObserver:name:object:", v0, v2, Strong);
  swift_unknownObjectRelease(Strong);

  sub_10019FB08(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t NotificationObserver.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t Strong;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 24);
  objc_msgSend(v1, "removeObserver:name:object:", v0, v2, Strong);
  swift_unknownObjectRelease(Strong);

  sub_10019FB08(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_1002A02F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  void *v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  __n128 v50;
  void (*v51)(char *, uint64_t, __n128);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD aBlock[5];
  uint64_t v64;

  v2 = v1;
  v62 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Notification(0);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  v13 = __chkstk_darwin(v11);
  v14 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  if (*(_BYTE *)(v2 + 32) != 1)
    return (*(uint64_t (**)(uint64_t))(v2 + 48))(v62);
  v54 = v10;
  v55 = v8;
  v56 = v7;
  v57 = v6;
  v58 = v4;
  v59 = v3;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v22 = (char *)&v53 - v18;
  v23 = v20;
  v24 = v19;
  v21((char *)&v53 - v18, v62, v20);
  v61 = v22;
  v21(v17, (uint64_t)v22, v23);
  v21(v14, (uint64_t)v17, v23);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 24) & ~v25;
  v27 = swift_allocObject(&unk_100516168, v26 + v12, v25 | 7);
  *(_QWORD *)(v27 + 16) = v2;
  v62 = v24;
  v28 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  v60 = v23;
  v28(v27 + v26, v17, v23);
  v29 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v2, 2);
  v30 = v14;
  if (objc_msgSend(v29, "isMainThread"))
  {
    (*(void (**)(char *))(v2 + 48))(v14);
  }
  else
  {
    v32 = sub_1000DD108(0, (unint64_t *)&qword_100557310, OS_dispatch_queue_ptr);
    v40 = (void *)static OS_dispatch_queue.main.getter(v32, v33, v34, v35, v36, v37, v38, v39);
    aBlock[4] = sub_1002A0978;
    v64 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10015F6F8;
    aBlock[3] = &unk_100516180;
    v41 = _Block_copy(aBlock);
    v42 = v64;
    swift_retain(v27);
    swift_release(v42);
    v43 = v54;
    static DispatchQoS.unspecified.getter(v44);
    aBlock[0] = _swiftEmptyArrayStorage;
    v45 = sub_1002A09D0();
    v46 = sub_10000B4C8((uint64_t *)&unk_100557320);
    v47 = sub_10029F760();
    v48 = v57;
    v49 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v46, v47, v59, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v48, v41);
    _Block_release(v41);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v56);
  }
  swift_release(v2);
  v50 = swift_release(v27);
  v51 = *(void (**)(char *, uint64_t, __n128))(v62 + 8);
  v52 = v60;
  v51(v30, v60, v50);
  return ((uint64_t (*)(char *, uint64_t))v51)(v61, v52);
}

uint64_t NotificationObserver.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  id v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t Strong;
  uint64_t v18;
  unint64_t v19;

  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x8000000100450190;
  v1._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 16));
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3D7463656A626F20;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 24);
  v4 = sub_10000B4C8(&qword_100556600);
  v5._countAndFlagsBits = String.init<A>(describing:)(&Strong, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3D7265746E656320;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
  v7 = *(void **)(v0 + 40);
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v9 = static NSObject.== infix(_:_:)(v7, v8);

  if ((v9 & 1) != 0)
  {
    v10 = (void *)0xE700000000000000;
    v11 = 0x746C7561666564;
  }
  else
  {
    v12 = objc_msgSend(v7, "description");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v10 = v13;

  }
  v14._countAndFlagsBits = v11;
  v14._object = v10;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v18;
}

uint64_t sub_1002A08C4()
{
  return NotificationObserver.debugDescription.getter();
}

uint64_t type metadata accessor for NotificationObserver()
{
  return objc_opt_self(_TtC14MusicUtilities20NotificationObserver);
}

uint64_t sub_1002A0904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002A0978()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Notification(0) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16) + 48))(v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1002A09B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002A09C8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_1002A09D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556420;
  if (!qword_100556420)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100556420);
  }
  return result;
}

uint64_t BrightnessManager.__allocating_init(windowScene:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 64, 7);
  BrightnessManager.init(windowScene:)(a1);
  return v3;
}

_QWORD *BrightnessManager.init(windowScene:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v2 = v1;
  v1[2] = objc_msgSend(objc_allocWithZone((Class)BrightnessSystemClient), "init");
  v1[3] = sub_10029C9C8((uint64_t)&off_100514F68);
  v1[4] = sub_10029C9C8((uint64_t)&off_100514FB8);
  v1[5] = sub_10029CAD8((uint64_t)&off_100515008);
  v1[6] = sub_10029CAD8((uint64_t)&off_100515040);
  v1[7] = _swiftEmptyArrayStorage;
  v4 = sub_10000B4C8(&qword_1005566F0);
  v5 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100428070;
  v6 = swift_allocObject(&unk_1005161C8, 24, 7);
  swift_weakInit(v6 + 16, v2);
  v7 = type metadata accessor for NotificationObserver();
  swift_allocObject(v7, 64, 7);
  v8 = UISceneWillDeactivateNotification;
  v9 = a1;
  *(_QWORD *)(v5 + 32) = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v8, (uint64_t)a1, 1, 1, (uint64_t)sub_1002A0C68, v6);
  v10 = swift_allocObject(&unk_1005161C8, 24, 7);
  swift_weakInit(v10 + 16, v2);
  swift_allocObject(v7, 64, 7);
  v11 = v9;
  v12 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(UISceneDidActivateNotification, (uint64_t)a1, 1, 1, (uint64_t)sub_1002A0DDC, v10);
  *(_QWORD *)(v5 + 40) = v12;
  specialized Array._endMutation()(v12);

  v2[7] = v5;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1002A0C44()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1002A0C68(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A0D84(a1, v1, BrightnessManager.resetBrightnessToSystemDefault());
}

Swift::Void __swiftcall BrightnessManager.resetBrightnessToSystemDefault()()
{
  uint64_t v0;
  void *v1;
  Class isa;
  NSString v3;
  Class v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", isa, v3);

  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", v4, v5);

}

double sub_1002A0D84(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    a3();
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

double sub_1002A0DDC(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A0D84(a1, v1, BrightnessManager.increaseBrightnessIfNeeded());
}

Swift::Void __swiftcall BrightnessManager.increaseBrightnessIfNeeded()()
{
  uint64_t v0;
  void *v1;
  Class isa;
  NSString v3;
  Class v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", isa, v3);

  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", v4, v5);

}

uint64_t BrightnessManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t BrightnessManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for BrightnessManager()
{
  return objc_opt_self(_TtC14MusicUtilities17BrightnessManager);
}

uint64_t ControlEventHandler.__allocating_init<A>(control:events:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, 48, 7);
  ControlEventHandler.init<A>(control:events:handler:)(a1, a2, a3, a4, a5);
  return v11;
}

_QWORD *ControlEventHandler.init<A>(control:events:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  _QWORD *v12;
  uint64_t Strong;
  void *v14;

  v11 = swift_unknownObjectWeakInit(v5 + 2, 0);
  swift_unknownObjectWeakAssign(v11, a1);
  v5[3] = a2;
  v12 = (_QWORD *)swift_allocObject(&unk_1005161F0, 40, 7);
  v12[2] = a5;
  v12[3] = a3;
  v12[4] = a4;
  v5[4] = sub_1002A1178;
  v5[5] = v12;
  Strong = swift_unknownObjectWeakLoadStrong(v5 + 2);
  if (Strong)
  {
    v14 = (void *)Strong;
    swift_retain(v5);
    objc_msgSend(v14, "addTarget:action:forControlEvents:", v5, "handleActionFromControl:", a2);

    swift_release(v5);
  }

  return v5;
}

void sub_1002A10E8(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;

  v6 = swift_dynamicCastUnknownClass(a1, a4);
  if (v6)
  {
    v7 = v6;
    v8 = a1;
    a2(v7);

  }
}

uint64_t sub_1002A1154()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002A1178(void *a1)
{
  uint64_t v1;

  sub_1002A10E8(a1, *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t ControlEventHandler.deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeTarget:action:forControlEvents:", v0, "handleActionFromControl:", *(_QWORD *)(v0 + 24));

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t ControlEventHandler.__deallocating_deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeTarget:action:forControlEvents:", v0, "handleActionFromControl:", *(_QWORD *)(v0 + 24));

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

void ControlEventHandling<>.on(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  _QWORD *v11;
  id v12;

  v5 = v4;
  sub_1000DD108(0, &qword_1005567C0, UIAction_ptr);
  v10 = swift_allocObject(&unk_100516218, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v5);
  v11 = (_QWORD *)swift_allocObject(&unk_100516240, 48, 7);
  v11[2] = a4;
  v11[3] = v10;
  v11[4] = a2;
  v11[5] = a3;
  swift_retain(a3);
  v12 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1002A15F8, v11);
  objc_msgSend(v5, "addAction:forControlEvents:", v12, a1);

}

uint64_t sub_1002A13B4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002A13D8(void *a1, uint64_t a2, void (*a3)(void *))
{
  id v5;
  id v6;
  uint64_t v7;
  void *Strong;
  uint64_t v9;
  void *v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v5 = objc_msgSend(a1, "sender");
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_1002A1764((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_1002A17AC((uint64_t)v12);
LABEL_8:
    v9 = a2 + 16;
    swift_beginAccess(v9, v12, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v9);
    if (!Strong)
      return;
    goto LABEL_9;
  }
  v7 = sub_1000DD108(0, &qword_1005568B8, UIControl_ptr);
  if ((swift_dynamicCast(&v10, v12, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_8;
  Strong = v10;
LABEL_9:
  a3(Strong);

}

void sub_1002A14D8(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  void *Strong;
  uint64_t v11;
  void *v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v8 = objc_msgSend(a1, "sender");
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_1002A1764((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    sub_1002A17AC((uint64_t)v14);
LABEL_8:
    v11 = a2 + 16;
    swift_beginAccess(v11, v14, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v11);
    if (!Strong)
      return;
    goto LABEL_9;
  }
  if (!swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, a5, 6))
    goto LABEL_8;
  Strong = v12;
LABEL_9:
  a3(Strong);

}

uint64_t sub_1002A15CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1002A15F8(void *a1)
{
  uint64_t v1;

  sub_1002A14D8(a1, *(_QWORD *)(v1 + 24), *(void (**)(void *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

void sub_1002A1604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  v7 = *v3;
  sub_1000DD108(0, &qword_1005567C0, UIAction_ptr);
  v8 = swift_allocObject(&unk_100516268, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_100516290, 40, 7);
  v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  swift_retain(a3);
  v10 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1002A1758, v9);
  objc_msgSend(v7, "addAction:forControlEvents:", v10, a1);

}

uint64_t type metadata accessor for ControlEventHandler()
{
  return objc_opt_self(_TtC14MusicUtilities19ControlEventHandler);
}

uint64_t sub_1002A172C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002A1758(void *a1)
{
  uint64_t v1;

  sub_1002A13D8(a1, *(_QWORD *)(v1 + 16), *(void (**)(void *))(v1 + 24));
}

uint64_t sub_1002A1764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005568B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A17AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_1005568B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Datavault.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Datavault.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1002A1884(v3, a1);
}

uint64_t sub_1002A1884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005568C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Datavault.logger.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess(v3, v5, 33, 0);
  sub_1002A1924(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1002A1924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005568C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Datavault.logger.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, a1, 33, 0);
  return j__swift_endAccess;
}

_QWORD *Datavault.__allocating_init(url:storageClass:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)URL.path.getter(v10);
  v15 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v16 = sub_1002A1BD0(v13, v15, (uint64_t)v12, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v16;
}

_QWORD *Datavault.__allocating_init(path:storageClass:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v19;

  v5 = v4;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v19 - v15;
  URL.init(fileURLWithPath:)(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v17 = sub_1002A1BD0(a1, a2, (uint64_t)v14, a3, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v17;
}

_QWORD *sub_1002A1BD0(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  NSString v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  __n128 v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t, __n128);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  unsigned __int16 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __n128 v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  char *v84;
  __n128 v85;
  unsigned int v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  char *v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111[3];
  _BYTE v112[24];

  v104 = a2;
  v105 = a5;
  v101 = a4;
  v103 = a1;
  v102 = *v5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v100 = (char *)v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v96 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)v96 - v15;
  v17 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v17 - 8);
  v109 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = v5;
  v20 = (char *)v5 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))((uint64_t)v5 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, 1, 1, v8);
  v110 = a3;
  URL.deletingLastPathComponent()(v21);
  v22 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v107 = v19;
  NSFileManager.createDirectoryIfNeeded(at:)();
  if (!v6)
  {
    v23 = v100;
    v24 = v16;
    v97 = v20;
    v96[0] = v14;
    v99 = v9;
    v96[1] = 0;
    v112[0] = 0;
    v25 = v103;
    v26 = v104;
    v27 = String._bridgeToObjectiveC()();
    v98 = v22;
    objc_msgSend(v22, "fileExistsAtPath:isDirectory:", v27, v112);

    v28 = v26;
    if (v112[0] == 1)
    {
      v29 = v26;
      v30 = String.utf8CString.getter(v25, v26);
      v31 = v105;
      v32 = String.utf8CString.getter(v101, v105);
      v33 = rootless_check_datavault_flag(v30 + 32, v32 + 32);
      swift_release(v30);
      v34 = swift_release(v32);
      v35 = v99;
      if (!v33)
      {
        v58 = v108;
        v59 = v109;
        (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v107, v109, v34);

        swift_bridgeObjectRelease();
        v28 = v29;
LABEL_29:
        v63 = v103;
        goto LABEL_30;
      }
      v36 = v97;
      v37 = swift_beginAccess(v97, v112, 0, 0);
      v38 = v8;
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48);
      v28 = v29;
      if (!v39(v36, 1, v38, v37))
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v24, v36, v38);
        v40 = swift_bridgeObjectRetain_n(v29, 2);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(12, -1);
          v100 = (char *)swift_slowAlloc(32, -1);
          v111[0] = (uint64_t)v100;
          *(_DWORD *)v43 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v43 + 4) = sub_1002C9498(v103, v29, v111);
          swift_bridgeObjectRelease_n(v29, 3);
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Found unsecure directory %s attempting to convert to datavault", (uint8_t *)v43, 0xCu);
          v44 = v100;
          swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v44, -1, -1);
          swift_slowDealloc(v43, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v29, 2);
        }
        (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v38);
        v28 = v29;
      }
      v73 = String.utf8CString.getter(v103, v28);
      v74 = String.utf8CString.getter(v101, v31);
      swift_bridgeObjectRelease();
      v75 = rootless_convert_to_datavault(v73 + 32, v74 + 32);
      swift_release(v73);
      swift_release(v74);
      if (v75)
      {
        v76 = swift_bridgeObjectRelease();
        v77 = errno.getter(v76);
        v78 = sub_1002A281C();
        v71 = swift_allocError(&type metadata for Datavault.Error, v78, 0, 0);
        *(_DWORD *)v79 = v77;
        *(_BYTE *)(v79 + 4) = 1;
        goto LABEL_21;
      }
      v84 = v97;
      v85 = swift_beginAccess(v97, v111, 32, 0);
      v86 = v39(v84, 1, v38, v85);
      v87 = v98;
      if (v86)
      {
        v58 = v108;
        v59 = v109;
        (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
        swift_endAccess(v111);

        goto LABEL_29;
      }
      v88 = v99;
      v89 = v96[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v99 + 16))(v96[0], v84, v38);
      swift_endAccess(v111);
      v90 = swift_bridgeObjectRetain_n(v28, 2);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v91, v92))
      {
        swift_bridgeObjectRelease_n(v28, 2);

        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v89, v38);
        v58 = v108;
        v59 = v109;
        (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
        goto LABEL_29;
      }
      v93 = swift_slowAlloc(12, -1);
      v94 = swift_slowAlloc(32, -1);
      v111[0] = v94;
      *(_DWORD *)v93 = 136315138;
      swift_bridgeObjectRetain();
      v95 = v38;
      v63 = v103;
      *(_QWORD *)(v93 + 4) = sub_1002C9498(v103, v28, v111);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Datavault directory conversion successful %s", (uint8_t *)v93, 0xCu);
      swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1, -1);
      swift_slowDealloc(v93, -1, -1);

      (*(void (**)(_QWORD, uint64_t))(v88 + 8))(v96[0], v95);
      v58 = v108;
      v59 = v109;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
    }
    else
    {
      v45 = v97;
      v46 = swift_beginAccess(v97, v112, 0, 0);
      v47 = v99;
      v48 = v8;
      v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v99 + 48))(v45, 1, v8, v46);
      if (!(_DWORD)v49)
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v23, v45, v8);
        v50 = swift_bridgeObjectRetain_n(v26, 2);
        v51 = Logger.logObject.getter(v50);
        v52 = v47;
        v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v53))
        {
          v54 = swift_slowAlloc(12, -1);
          v55 = v28;
          v56 = swift_slowAlloc(32, -1);
          v111[0] = v56;
          *(_DWORD *)v54 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v54 + 4) = sub_1002C9498(v103, v55, v111);
          swift_bridgeObjectRelease_n(v55, 3);
          _os_log_impl((void *)&_mh_execute_header, v51, v53, "Creating DataVault directory %s", (uint8_t *)v54, 0xCu);
          swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
          v57 = v56;
          v28 = v55;
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v54, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v28, 2);
        }
        v49 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v23, v48);
      }
      v60 = S_IRUSR.getter(v49);
      v61 = S_IWUSR.getter() | v60;
      v62 = v61 | S_IXUSR.getter();
      v63 = v103;
      v64 = String.utf8CString.getter(v103, v28);
      v65 = String.utf8CString.getter(v101, v105);
      swift_bridgeObjectRelease();
      v66 = rootless_mkdir_datavault(v64 + 32, v62, v65 + 32);
      swift_release(v64);
      v67 = swift_release(v65);
      if (v66)
      {
        v68 = swift_bridgeObjectRelease();
        v69 = errno.getter(v68);
        v70 = sub_1002A281C();
        v71 = swift_allocError(&type metadata for Datavault.Error, v70, 0, 0);
        *(_DWORD *)v72 = v69;
        *(_BYTE *)(v72 + 4) = 0;
LABEL_21:
        swift_willThrow(v71);

        goto LABEL_22;
      }
      v58 = v108;
      v59 = v109;
      (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v107, v109, v67);

    }
LABEL_30:
    v80 = v106;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))((uint64_t)v106 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url, v110, v59);
    v80[2] = v63;
    v80[3] = v28;
    return v80;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_22:
  v80 = v106;
  v81 = v109;
  v82 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
  v82(v110, v109);
  v82((uint64_t)v107, v81);
  sub_1002A2568((uint64_t)v80 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  swift_deallocPartialClassInstance(v80, v102, *(unsigned int *)(*v80 + 48), *(unsigned __int16 *)(*v80 + 52));
  return v80;
}

uint64_t Datavault.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1002A2568(v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  return v0;
}

uint64_t sub_1002A2568(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_1005568C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Datavault.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1002A2568(v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002A2610()
{
  return type metadata accessor for Datavault(0);
}

uint64_t type metadata accessor for Datavault(uint64_t a1)
{
  uint64_t result;

  result = qword_1005568F0;
  if (!qword_1005568F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Datavault);
  return result;
}

void sub_1002A2654(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_100436CE0;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1002A26E8(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_1002A26E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100556900)
  {
    v2 = type metadata accessor for Logger(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100556900);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for Datavault.Error(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Datavault.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Datavault.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_1002A27DC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1002A27F4(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Datavault.Error()
{
  return &type metadata for Datavault.Error;
}

unint64_t sub_1002A281C()
{
  unint64_t result;

  result = qword_100556990;
  if (!qword_100556990)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Datavault.Error, &type metadata for Datavault.Error);
    atomic_store(result, (unint64_t *)&qword_100556990);
  }
  return result;
}

id sub_1002A2914()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayLinkHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002A295C()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_100556998 = result;
  return result;
}

id CADisplayLink.init(handler:)(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  const void *v11;
  id v12;
  objc_super v14;

  v4 = (objc_class *)type metadata accessor for DisplayLinkHandler();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC14MusicUtilitiesP33_A1FC62D80C043A876151FA559C82DA5918DisplayLinkHandler__handler];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v14.receiver = v5;
  v14.super_class = v4;
  swift_retain(a2);
  v7 = objc_msgSendSuper2(&v14, "init");
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "displayLinkWithTarget:selector:", v7, "handleDisplayLinkFired:", v14.receiver, v14.super_class);
  v9 = qword_100556138;
  v10 = v8;
  if (v9 != -1)
    swift_once(&qword_100556138, sub_1002A295C);
  v11 = (const void *)qword_100556998;
  v12 = v7;
  objc_setAssociatedObject(v10, v11, v12, (void *)1);

  swift_release(a2);
  return v10;
}

uint64_t type metadata accessor for DisplayLinkHandler()
{
  return objc_opt_self(_TtC14MusicUtilitiesP33_A1FC62D80C043A876151FA559C82DA5918DisplayLinkHandler);
}

uint64_t EdgePairSequence.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
  if ((Collection.isEmpty.getter(v4, WitnessTable) & 1) != 0)
  {
    v6 = type metadata accessor for Optional(255, v3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v3, v6, 0, 0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a2, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v9 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    RangeReplaceableCollection.removeFirst()(v4, v9);
    v10 = type metadata accessor for Optional(255, v3);
    v11 = swift_getTupleTypeMetadata2(0, v3, v10, 0, 0);
    v12 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    RangeReplaceableCollection<>.popLast()(v4, v12, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
  }
}

uint64_t sub_1002A2C08(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for EdgePairSequence<A>, a1);
}

uint64_t type metadata accessor for EdgePairSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EdgePairSequence);
}

uint64_t Collection<>.compare<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(uint64_t *, char *, uint64_t);
  unsigned int (*v54)(uint64_t *, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  void (*v87)(uint64_t *, _QWORD);
  uint64_t v88;
  char *v89;
  void (*v90)(char *);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t *, _QWORD);
  unint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  void (*v145)(uint64_t *, _QWORD);
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void (*v152)(uint64_t *, _QWORD);
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  void (*v175)(char *, uint64_t);
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t WitnessTable;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t AssociatedTypeWitness;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  void (*v212)(char *);
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  v209 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v204 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = __chkstk_darwin(AssociatedTypeWitness);
  v198 = (char *)&v182 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v203 = (char *)&v182 - v14;
  __chkstk_darwin(v13);
  v218 = (char *)&v182 - v15;
  v205 = a5;
  v194 = swift_getAssociatedTypeWitness(0, a5);
  v193 = *(_QWORD *)(v194 - 8);
  v16 = __chkstk_darwin(v194);
  v190 = (char *)&v182 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v192 = (char *)&v182 - v19;
  __chkstk_darwin(v18);
  v207 = (char *)&v182 - v20;
  v21 = *(_QWORD *)(a5 + 8);
  v185 = type metadata accessor for EnumeratedSequence(0, a3, v21);
  __chkstk_darwin(v185);
  v184 = (char *)&v182 - v22;
  v186 = v21;
  v212 = (void (*)(char *))type metadata accessor for EnumeratedSequence.Iterator(0, a3, v21);
  v182 = *((_QWORD *)v212 - 1);
  __chkstk_darwin(v212);
  v210 = (unint64_t)&v182 - v23;
  v24 = *(char **)(a4 + 8);
  v25 = swift_getAssociatedTypeWitness(0, v24);
  v214 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v197 = (char *)&v182 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v215 = (char *)&v182 - v28;
  v199 = a6;
  v30 = type metadata accessor for CollectionComparisonOperation(0, v25, a6, v29);
  __chkstk_darwin(v30);
  v195 = (uint64_t *)((char *)&v182 - v31);
  v216 = v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, v25, "offset element ", 0);
  v221 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v213 = *(_QWORD *)(v221 - 8);
  v33 = __chkstk_darwin(v221);
  v202 = (char *)&v182 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v220 = (char *)&v182 - v36;
  __chkstk_darwin(v35);
  v38 = (uint64_t *)((char *)&v182 - v37);
  v188 = type metadata accessor for EnumeratedSequence(0, a2, v24);
  __chkstk_darwin(v188);
  v187 = (char *)&v182 - v39;
  v196 = v24;
  v219 = (char *)type metadata accessor for EnumeratedSequence.Iterator(0, a2, v24);
  v183 = *((_QWORD *)v219 - 1);
  __chkstk_darwin(v219);
  v41 = (char *)&v182 - v40;
  v200 = a2;
  v42 = a4;
  v43 = dispatch thunk of Collection.count.getter(a2, a4);
  v208 = a3;
  v44 = dispatch thunk of Collection.count.getter(a3, v205);
  result = static Array._allocateUninitialized(_:)(0, v30);
  v225 = result;
  v191 = v44;
  v46 = __OFADD__(v44, 1);
  v47 = v44 + 1;
  if (v46)
    goto LABEL_53;
  v48 = type metadata accessor for Array(0);
  v49 = sub_1002A544C((uint64_t)&v225, v47, v48);
  result = swift_bridgeObjectRelease();
  v225 = v49;
  if (__OFADD__(v43, 1))
  {
LABEL_54:
    __break(1u);
  }
  else
  {
    v189 = v43;
    v217 = v42;
    v211 = type metadata accessor for Array(0);
    v50 = sub_1002A544C((uint64_t)&v225, v43 + 1, v211);
    swift_bridgeObjectRelease();
    v227 = v50;
    v201 = v30;
    v226 = static Array._allocateUninitialized(_:)(0, v30);
    v51 = v200;
    Sequence.enumerated()(v200, v196);
    EnumeratedSequence.makeIterator()(v188);
    while (1)
    {
      v52 = v220;
      EnumeratedSequence.Iterator.next()(v219);
      v53 = *(void (**)(uint64_t *, char *, uint64_t))(v213 + 32);
      v53(v38, v52, v221);
      v54 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
      if (v54(v38, 1, TupleTypeMetadata2) == 1)
        break;
      v55 = *v38;
      v56 = v215;
      v57 = *(void (**)(char *, char *, uint64_t))(v214 + 32);
      v58 = v216;
      v57(v215, (char *)v38 + *(int *)(TupleTypeMetadata2 + 48), v216);
      v59 = v195;
      *v195 = 0;
      *((_BYTE *)v59 + 8) = 1;
      v59[2] = v55;
      v57((char *)v59 + *(int *)(v201 + 40), v56, v58);
      result = Array.append(_:)(v59, v48);
      if (__OFADD__(v55, 1))
      {
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v60 = v226;
      v61 = v211;
      type metadata accessor for Array(0);
      swift_bridgeObjectRetain();
      Array._makeMutableAndUnique()();
      v62 = v227;
      sub_1002A53FC(v55 + 1, v227, v61);
      Array._makeMutableAndUnique()();
      v63 = *(_QWORD *)(v62 + 8 * (v55 + 1) + 32);
      result = _swift_isClassOrObjCExistentialType(v48, v48);
      v64 = v63 & 0xFFFFFFFFFFFFF8;
      if ((result & 1) == 0)
        v64 = v63;
      if (!*(_QWORD *)(v64 + 16))
        goto LABEL_50;
      *(_QWORD *)(v63 + 32) = v60;
      swift_bridgeObjectRelease();
      v51 = v200;
    }
    (*(void (**)(char *, char *))(v183 + 8))(v41, v219);
    swift_bridgeObjectRelease();
    v226 = static Array._allocateUninitialized(_:)(0, v201);
    Sequence.enumerated()(v208, v186);
    EnumeratedSequence.makeIterator()(v185);
    v65 = v220;
    EnumeratedSequence.Iterator.next()(v212);
    v66 = (uint64_t *)v202;
    v53((uint64_t *)v202, v65, v221);
    if (v54(v66, 1, TupleTypeMetadata2) != 1)
    {
      v67 = *(void (**)(char *, char *, uint64_t))(v214 + 32);
      v68 = v211;
      do
      {
        v69 = *v66;
        v70 = (char *)v66 + *(int *)(TupleTypeMetadata2 + 48);
        v72 = v215;
        v71 = v216;
        v67(v215, v70, v216);
        v73 = v195;
        *v195 = 1;
        *((_BYTE *)v73 + 8) = 1;
        v73[2] = v69;
        v67((char *)v73 + *(int *)(v201 + 40), v72, v71);
        result = Array.append(_:)(v73, v48);
        v46 = __OFADD__(v69, 1);
        v74 = v69 + 1;
        if (v46)
          goto LABEL_51;
        v75 = v226;
        type metadata accessor for Array(0);
        swift_bridgeObjectRetain();
        Array._makeMutableAndUnique()();
        v76 = v227;
        result = _swift_isClassOrObjCExistentialType(v68, v68);
        v77 = v76 & 0xFFFFFFFFFFFFF8;
        if ((result & 1) == 0)
          v77 = v76;
        if (!*(_QWORD *)(v77 + 16))
          goto LABEL_52;
        Array._makeMutableAndUnique()();
        v78 = *(_QWORD *)(v76 + 32);
        sub_1002A53FC(v74, v78, v48);
        *(_QWORD *)(v78 + 8 * v74 + 32) = v75;
        swift_bridgeObjectRelease();
        v79 = v220;
        EnumeratedSequence.Iterator.next()(v212);
        v66 = (uint64_t *)v202;
        v53((uint64_t *)v202, v79, v221);
        v80 = v54(v66, 1, TupleTypeMetadata2);
        v51 = v200;
      }
      while (v80 != 1);
    }
    (*(void (**)(unint64_t, void (*)(char *)))(v182 + 8))(v210, v212);
    swift_bridgeObjectRelease();
    v81 = v189;
    if (!v189 || !v191)
    {
LABEL_46:
      Array.subscript.getter(v81, v227, v211);
      Array.subscript.getter(v191, v225, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v224;
    }
    v82 = v205;
    result = dispatch thunk of Collection.startIndex.getter(v208);
    v196 = (char *)(v81 - 1);
    if (v81 >= 1 && v191 >= 1)
    {
      v81 = 1;
      v83 = v201;
      v213 = v48;
      while (1)
      {
        dispatch thunk of Collection.startIndex.getter(v51);
        v84 = 0;
        v202 = (char *)(v81 - 1);
        v221 = 40;
        v210 = v81;
        while (1)
        {
          v85 = v48;
          v219 = v84 + 1;
          v86 = v84;
          v87 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v225, v218, v51, v217);
          v88 = v214;
          v89 = v215;
          v90 = *(void (**)(char *))(v214 + 16);
          v91 = v216;
          v90(v215);
          v87(&v225, 0);
          v92 = dispatch thunk of Collection.subscript.read(&v225, v207, v208, v82);
          v93 = v197;
          v212 = v90;
          v90(v197);
          ((void (*)(uint64_t *, _QWORD))v92)(&v225, 0);
          LOBYTE(v92) = dispatch thunk of static Equatable.== infix(_:_:)(v89, v93, v91, v199);
          v94 = *(void (**)(char *, uint64_t))(v88 + 8);
          v94(v93, v91);
          v94(v89, v91);
          v220 = v86;
          if ((v92 & 1) != 0)
          {
            v95 = v86;
            v96 = v211;
            Array.subscript.getter(v95, v227, v211);
            Array.subscript.getter(v202, v225, v85);
            swift_bridgeObjectRelease();
            v97 = v224;
            type metadata accessor for Array(0);
            Array._makeMutableAndUnique()();
            v98 = v227;
            v99 = (unint64_t)v219;
            sub_1002A53FC((unint64_t)v219, v227, v96);
            v100 = (uint64_t *)(v98 + v221);
            Array._makeMutableAndUnique()();
            v101 = *v100;
            v102 = v210;
            sub_1002A53FC(v210, v101, v85);
            *(_QWORD *)(v101 + 8 * v102 + 32) = v97;
            swift_bridgeObjectRelease();
            v103 = v200;
          }
          else
          {
            v104 = v227;
            v105 = v86;
            v106 = v86;
            v107 = v211;
            Array.subscript.getter(v105, v227, v211);
            v108 = v210;
            Array.subscript.getter(v210, v225, v85);
            swift_bridgeObjectRelease();
            Array.subscript.getter(v219, v104, v107);
            v109 = v202;
            Array.subscript.getter(v202, v225, v85);
            swift_bridgeObjectRelease();
            Array.subscript.getter(v106, v104, v107);
            Array.subscript.getter(v109, v225, v85);
            swift_bridgeObjectRelease();
            v110 = swift_bridgeObjectRetain();
            v111 = Array.count.getter(v110, v83);
            swift_bridgeObjectRelease();
            v112 = swift_bridgeObjectRetain();
            v113 = Array.count.getter(v112, v83);
            swift_bridgeObjectRelease();
            v114 = swift_bridgeObjectRetain();
            v115 = Array.count.getter(v114, v83);
            swift_bridgeObjectRelease();
            v116 = v113 >= v111 ? v111 : v113;
            v117 = v115 >= v116 ? v116 : v115;
            v118 = swift_bridgeObjectRetain();
            v119 = Array.count.getter(v118, v83);
            swift_bridgeObjectRelease();
            if (v119 == v117)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v120 = v204;
              v121 = v203;
              v122 = AssociatedTypeWitness;
              (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v203, v218, AssociatedTypeWitness);
              v123 = v200;
              v124 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v225, v121, v200, v217);
              v125 = v108;
              v127 = v215;
              v126 = v216;
              v212(v215);
              v124(&v225, 0);
              (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v122);
              v128 = v195;
              *v195 = 0;
              *((_BYTE *)v128 + 8) = 1;
              v128[2] = v220;
              v129 = v213;
              (*(void (**)(char *, char *, uint64_t))(v214 + 32))((char *)v128 + *(int *)(v83 + 40), v127, v126);
              Array.append(_:)(v128, v129);
              v130 = v224;
              type metadata accessor for Array(0);
              Array._makeMutableAndUnique()();
              v131 = v227;
              v132 = (unint64_t)v219;
              sub_1002A53FC((unint64_t)v219, v227, v107);
              v133 = (uint64_t *)(v131 + v221);
              Array._makeMutableAndUnique()();
              v134 = *v133;
              sub_1002A53FC(v125, v134, v129);
              *(_QWORD *)(v134 + 8 * v125 + 32) = v130;
              v103 = v123;
              v99 = v132;
            }
            else
            {
              v135 = (unint64_t)v219;
              v136 = v220;
              swift_bridgeObjectRelease();
              v137 = swift_bridgeObjectRetain();
              v138 = Array.count.getter(v137, v83);
              swift_bridgeObjectRelease();
              v139 = v138 == v117;
              v140 = v205;
              v141 = v208;
              if (v139)
              {
                swift_bridgeObjectRelease();
                v142 = v193;
                v143 = v192;
                v144 = v194;
                (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v192, v207, v194);
                v145 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v225, v143, v141, v140);
                v147 = v215;
                v146 = v216;
                v212(v215);
                v145(&v225, 0);
                (*(void (**)(char *, uint64_t))(v142 + 8))(v143, v144);
                v148 = v195;
                *v195 = 1;
                *((_BYTE *)v148 + 8) = 1;
                v148[2] = v202;
                (*(void (**)(char *, char *, uint64_t))(v214 + 32))((char *)v148 + *(int *)(v83 + 40), v147, v146);
                v156 = v213;
                Array.append(_:)(v148, v213);
                v157 = v223;
              }
              else
              {
                swift_bridgeObjectRelease();
                v149 = v193;
                v150 = v192;
                v151 = v194;
                (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v192, v207, v194);
                v152 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v225, v150, v141, v140);
                v154 = v215;
                v153 = v216;
                v212(v215);
                v152(&v225, 0);
                (*(void (**)(char *, uint64_t))(v149 + 8))(v150, v151);
                v155 = v195;
                *v195 = 2;
                *((_BYTE *)v155 + 8) = 1;
                v155[2] = v136;
                (*(void (**)(char *, char *, uint64_t))(v214 + 32))((char *)v155 + *(int *)(v83 + 40), v154, v153);
                v156 = v213;
                Array.append(_:)(v155, v213);
                v157 = v222;
              }
              v158 = v211;
              type metadata accessor for Array(0);
              Array._makeMutableAndUnique()();
              v159 = v227;
              v99 = v135;
              sub_1002A53FC(v135, v227, v158);
              v160 = (uint64_t *)(v159 + v221);
              Array._makeMutableAndUnique()();
              v161 = *v160;
              v162 = v210;
              sub_1002A53FC(v210, v161, v156);
              *(_QWORD *)(v161 + 8 * v162 + 32) = v157;
              v103 = v200;
            }
            swift_bridgeObjectRelease();
          }
          v163 = v204;
          v164 = v198;
          v165 = v218;
          v166 = AssociatedTypeWitness;
          (*(void (**)(char *, char *, uint64_t))(v204 + 16))(v198, v218, AssociatedTypeWitness);
          v167 = v203;
          v168 = v103;
          dispatch thunk of Collection.index(_:offsetBy:)(v164, 1, v103, v217);
          v169 = *(void (**)(char *, uint64_t))(v163 + 8);
          v169(v164, v166);
          v169(v165, v166);
          result = (*(uint64_t (**)(char *, char *, uint64_t))(v163 + 32))(v165, v167, v166);
          if (v196 == v220)
            break;
          v84 = v220 + 1;
          v221 += 8;
          v46 = __OFADD__(v99, 1);
          v83 = v201;
          v48 = v213;
          v82 = v205;
          v51 = v168;
          if (v46)
          {
            __break(1u);
            goto LABEL_49;
          }
        }
        v170 = v193;
        v171 = v190;
        v172 = v207;
        v173 = v194;
        (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v190, v207, v194);
        v174 = v192;
        v82 = v205;
        dispatch thunk of Collection.index(_:offsetBy:)(v171, 1, v208, v205);
        v175 = *(void (**)(char *, uint64_t))(v170 + 8);
        v175(v171, v173);
        v169(v218, AssociatedTypeWitness);
        v175(v172, v173);
        v176 = v173;
        v177 = v210;
        (*(void (**)(char *, char *, uint64_t))(v170 + 32))(v172, v174, v176);
        if (v177 == v191)
          break;
        v46 = __OFADD__(v177, 1);
        v81 = v177 + 1;
        v83 = v201;
        v48 = v213;
        v51 = v168;
        if (v46)
        {
          __break(1u);
          goto LABEL_46;
        }
      }
      Array.subscript.getter(v189, v227, v211);
      v179 = v213;
      Array.subscript.getter(v191, v225, v213);
      swift_bridgeObjectRelease();
      v226 = v224;
      swift_bridgeObjectRetain();
      v223 = Array.init()(v201);
      __chkstk_darwin(v223);
      v180 = v208;
      *(&v182 - 6) = v168;
      *(&v182 - 5) = v180;
      *(&v182 - 4) = v217;
      *(&v182 - 3) = v82;
      *(&v182 - 2) = v199;
      WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v179);
      Sequence.reduce<A>(into:_:)(&v225, &v223, sub_1002A54FC, &v182 - 8, v179, v179, WitnessTable);
      swift_bridgeObjectRelease();
      v175(v207, v194);
      swift_bridgeObjectRelease();
      v178 = v225;
      swift_bridgeObjectRelease();
      return v178;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CollectionComparisonOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionComparisonOperation);
}

uint64_t sub_1002A3FAC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;

  *(_QWORD *)a7 = a1;
  *(_BYTE *)(a7 + 8) = a2 & 1;
  *(_QWORD *)(a7 + 16) = a3;
  v9 = a7 + *(int *)(type metadata accessor for CollectionComparisonOperation(0, a5, a6, a4) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v9, a4, a5);
}

uint64_t sub_1002A4010(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v46 = a4;
  v47 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a5 + 8));
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v44 = (char *)&v40 - v14;
  v16 = type metadata accessor for CollectionComparisonOperation(0, AssociatedTypeWitness, a7, v15);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v22 = (char *)&v40 - v19;
  if (*(_BYTE *)(a2 + 8) != 1)
    goto LABEL_5;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)a2 == 1)
    {
      v41 = v20;
      v42 = v21;
      v43 = v7;
      goto LABEL_8;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v40 - v19, a2, v16);
    v23 = type metadata accessor for Array(0);
    v24 = v22;
    return Array.append(_:)(v24, v23);
  }
  v41 = v20;
  v42 = v21;
  v43 = v7;
LABEL_8:
  v46 = &v40;
  v47 = a1;
  v50 = *a1;
  __chkstk_darwin(v18);
  *(&v40 - 8) = a3;
  *(&v40 - 7) = v26;
  *(&v40 - 6) = a5;
  *(&v40 - 5) = v27;
  *(&v40 - 4) = a7;
  *(&v40 - 3) = v28;
  *((_BYTE *)&v40 - 16) = v29;
  *(&v40 - 1) = a2;
  v30 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v30);
  v32 = v43;
  Collection.firstIndex(where:)(&v48, sub_1002A5BDC, &v40 - 10, v30, WitnessTable);
  swift_bridgeObjectRelease();
  if (v49 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v22, a2, v16);
    v24 = v22;
    v23 = v30;
    return Array.append(_:)(v24, v23);
  }
  v43 = v32;
  v33 = *v47;
  v40 = v48;
  Array.subscript.getter(v48, v33, v16);
  v34 = *((_QWORD *)v22 + 2);
  v46 = *(uint64_t **)(v42 + 8);
  ((void (*)(char *, uint64_t))v46)(v22, v16);
  if (*(_BYTE *)(a2 + 8) == 1 && !*(_QWORD *)a2)
  {
    v35 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v35 = v34;
    v34 = *(_QWORD *)(a2 + 16);
  }
  v37 = v44;
  v36 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, a2 + *(int *)(v16 + 40), AssociatedTypeWitness);
  v38 = v41;
  *v41 = v35;
  *((_BYTE *)v38 + 8) = 0;
  v38[2] = v34;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v38 + *(int *)(v16 + 40), v37, AssociatedTypeWitness);
  Array.remove(at:)(v40, v30);
  v39 = v46;
  ((void (*)(char *, uint64_t))v46)(v22, v16);
  (*(void (**)(char *, _QWORD *, uint64_t))(v42 + 16))(v22, v38, v16);
  Array.append(_:)(v22, v30);
  return ((uint64_t (*)(_QWORD *, uint64_t))v39)(v38, v16);
}

BOOL static CollectionComparisonOperationType.__derived_enum_equals(_:_:)(uint64_t a1, char a2, unint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        if ((a4 & 1) != 0 && a3 == 1)
          return 1;
      }
      else if ((a4 & 1) != 0 && a3 > 1)
      {
        return 1;
      }
    }
    else if ((a4 & 1) != 0 && !a3)
    {
      return 1;
    }
  }
  else if ((a4 & 1) == 0)
  {
    return a1 == a3;
  }
  return 0;
}

uint64_t sub_1002A43B8(uint64_t *a1, unint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t *, uint64_t);
  char v23;
  void (*v24)(char *, uint64_t *, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t *v28;

  v28 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a7 + 8));
  v14 = type metadata accessor for CollectionComparisonOperation(0, AssociatedTypeWitness, a9, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v27 - v19;
  v21 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
  {
    if (v21)
    {
      if (v21 == 1)
      {
        if ((a3 & 1) == 0 || a2 != 1)
        {
LABEL_16:
          v24 = *(void (**)(char *, uint64_t *, uint64_t))(v15 + 16);
          v24((char *)&v27 - v19, a1, v14);
          v24(v18, v28, v14);
          v23 = 0;
          goto LABEL_17;
        }
      }
      else if ((a3 & 1) == 0 || a2 < 2)
      {
        goto LABEL_16;
      }
    }
    else if ((a3 & 1) == 0 || a2)
    {
      goto LABEL_16;
    }
  }
  else if ((a3 & 1) != 0 || v21 != a2)
  {
    goto LABEL_16;
  }
  v22 = *(void (**)(char *, uint64_t *, uint64_t))(v15 + 16);
  v22((char *)&v27 - v19, a1, v14);
  v22(v18, v28, v14);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(&v20[*(int *)(v14 + 40)], &v18[*(int *)(v14 + 40)], AssociatedTypeWitness, a9);
LABEL_17:
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v25(v20, v14);
  return v23 & 1;
}

uint64_t ArtworkImage.Size.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CollectionComparisonOperation.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t CollectionComparisonOperation.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

CFRange (__swiftcall *CollectionComparisonOperation.value.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

BOOL sub_1002A45D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  char v6;
  int v7;

  v2 = *a1;
  v3 = *(_QWORD *)a2;
  if (*((_BYTE *)a1 + 8) != 1)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return v2 == v3;
    return 0;
  }
  if (v2)
  {
    if (v2 != 1)
    {
      if (v3 > 1)
        v7 = *(unsigned __int8 *)(a2 + 8);
      else
        v7 = 0;
      return v7 == 1;
    }
    v4 = v3 == 1;
  }
  else
  {
    v4 = v3 == 0;
  }
  if (v4)
    v6 = *(_BYTE *)(a2 + 8);
  else
    v6 = 0;
  return (v6 & 1) != 0;
}

uint64_t CollectionComparisonOperationType.description.getter(uint64_t a1, char a2)
{
  Swift::String v2;
  void *object;
  uint64_t v5;

  if ((a2 & 1) != 0)
  {
    v5 = 0x747265736E69;
    if (a1 != 1)
      v5 = 0x7574697473627573;
    if (a1)
      return v5;
    else
      return 0x6574656C6564;
  }
  else
  {
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    return 0x6F72662065766F6DLL;
  }
}

uint64_t sub_1002A4708()
{
  uint64_t v0;

  return CollectionComparisonOperationType.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void UICollectionView.performBatchUpdates<A>(using:modelUpdateHandler:forSectionAt:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  char isEscapingClosureAtFileLocation;
  void **v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;

  v17 = (_QWORD *)swift_allocObject(&unk_1005163E0, 72, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a1;
  v17[7] = a4;
  v17[8] = v8;
  v18 = swift_allocObject(&unk_100516408, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_1002A5520;
  *(_QWORD *)(v18 + 24) = v17;
  v30 = sub_1000D75E8;
  v31 = v18;
  v26 = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = sub_100185F2C;
  v29 = &unk_100516420;
  v19 = _Block_copy(&v26);
  v20 = v31;
  swift_retain(a3);
  v21 = v8;
  swift_retain(v18);
  swift_bridgeObjectRetain();
  v22 = swift_release(v20).n128_u64[0];
  if (a5)
  {
    v30 = a5;
    v31 = a6;
    v26 = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1002A4D68;
    v29 = &unk_100516448;
    a5 = (uint64_t (*)())_Block_copy(&v26);
    v23 = v31;
    swift_retain(a6);
    v22 = swift_release(v23).n128_u64[0];
  }
  objc_msgSend(v21, "performBatchUpdates:completion:", v19, a5, *(double *)&v22);
  _Block_release(a5);
  _Block_release(v19);
  v24 = swift_release(v17);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v18, "", 137, 132, 34, 1, v24);
  swift_release(v18);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_1002A48E0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  Class isa;
  char *v31;
  uint64_t v32;
  NSIndexPath v33;
  uint64_t v34;
  Swift::Bool IsNativeType;
  void (*v36)(uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  id v62;
  char *v63;
  uint64_t v64;

  v61 = a1;
  v62 = a5;
  v60 = a2;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v57 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v63 = (char *)&v54 - v15;
  v17 = type metadata accessor for CollectionComparisonOperation(0, a6, a7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v21 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v54 - v23;
  v61(v22);
  v25 = swift_bridgeObjectRetain();
  if (!Array.endIndex.getter(v25, v17))
    return swift_bridgeObjectRelease();
  v55 = v19;
  v58 = v11;
  v61 = a4;
  v26 = 0;
  v56 = xmmword_100424BB0;
  v27 = v12;
  v59 = v24;
  v60 = a3;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v26, IsNativeType, a3, v17);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v24, a3+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v26, v17);
      v36 = v61;
      v37 = v63;
      v38 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_16;
      goto LABEL_7;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)(v26, a3, v17);
    v37 = v63;
    if (v55 != 8)
      break;
    v53 = result;
    v64 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 16))(v24, &v64, v17);
    swift_unknownObjectRelease(v53);
    v36 = v61;
    v38 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_16:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_7:
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v24, v17);
    IndexPath.init(row:section:)(*((_QWORD *)v21 + 2), v36);
    v39 = *(_QWORD *)v21;
    if (v21[8] == 1)
    {
      if (v39)
      {
        if (v39 == 1)
        {
          v40 = sub_10000B4C8(&qword_100556AD0);
          v41 = *(unsigned __int8 *)(v27 + 80);
          v42 = (v41 + 32) & ~v41;
          v43 = swift_allocObject(v40, v42 + *(_QWORD *)(v27 + 72), v41 | 7);
          v29 = v27;
          *(_OWORD *)(v43 + 16) = v56;
          v32 = v58;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v43 + v42, v37, v58);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v62, "insertItemsAtIndexPaths:", v33.super.isa);
        }
        else
        {
          v48 = sub_10000B4C8(&qword_100556AD0);
          v49 = *(unsigned __int8 *)(v27 + 80);
          v50 = (v49 + 32) & ~v49;
          v51 = swift_allocObject(v48, v50 + *(_QWORD *)(v27 + 72), v49 | 7);
          v29 = v27;
          *(_OWORD *)(v51 + 16) = v56;
          v32 = v58;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v51 + v50, v37, v58);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v62, "reloadItemsAtIndexPaths:", v33.super.isa);
        }
      }
      else
      {
        v44 = sub_10000B4C8(&qword_100556AD0);
        v45 = *(unsigned __int8 *)(v27 + 80);
        v46 = (v45 + 32) & ~v45;
        v47 = swift_allocObject(v44, v46 + *(_QWORD *)(v27 + 72), v45 | 7);
        v29 = v27;
        *(_OWORD *)(v47 + 16) = v56;
        v32 = v58;
        (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v47 + v46, v37, v58);
        v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v62, "deleteItemsAtIndexPaths:", v33.super.isa);
      }
    }
    else
    {
      v28 = v57;
      IndexPath.init(row:section:)(v39, v36);
      v29 = v27;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v31 = v28;
      v32 = v58;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v58);
      v33.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v62, "moveItemAtIndexPath:toIndexPath:", isa, v33.super.isa);

    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    a3 = v60;
    v34 = Array.endIndex.getter(v60, v17);
    ++v26;
    v27 = v29;
    v24 = v59;
    if (v38 == v34)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

double sub_1002A4D68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

void UITableView.performBatchUpdates<A>(using:modelUpdateHandler:forSectionAt:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  char isEscapingClosureAtFileLocation;
  void **v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;

  v17 = (_QWORD *)swift_allocObject(&unk_100516480, 72, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a1;
  v17[7] = a4;
  v17[8] = v8;
  v18 = swift_allocObject(&unk_1005164A8, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_1002A558C;
  *(_QWORD *)(v18 + 24) = v17;
  v30 = sub_1000DC31C;
  v31 = v18;
  v26 = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = sub_100185F2C;
  v29 = &unk_1005164C0;
  v19 = _Block_copy(&v26);
  v20 = v31;
  swift_retain(a3);
  v21 = v8;
  swift_retain(v18);
  swift_bridgeObjectRetain();
  v22 = swift_release(v20).n128_u64[0];
  if (a5)
  {
    v30 = a5;
    v31 = a6;
    v26 = _NSConcreteStackBlock;
    v27 = 1107296256;
    v28 = sub_1002A4D68;
    v29 = &unk_1005164E8;
    a5 = (uint64_t (*)())_Block_copy(&v26);
    v23 = v31;
    swift_retain(a6);
    v22 = swift_release(v23).n128_u64[0];
  }
  objc_msgSend(v21, "performBatchUpdates:completion:", v19, a5, *(double *)&v22);
  _Block_release(a5);
  _Block_release(v19);
  v24 = swift_release(v17);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v18, "", 137, 157, 34, 1, v24);
  swift_release(v18);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_1002A4F70(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  Class isa;
  char *v31;
  uint64_t v32;
  NSIndexPath v33;
  uint64_t v34;
  Swift::Bool IsNativeType;
  void (*v36)(uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  id v62;
  char *v63;
  uint64_t v64;

  v61 = a1;
  v62 = a5;
  v60 = a2;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v57 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v63 = (char *)&v54 - v15;
  v17 = type metadata accessor for CollectionComparisonOperation(0, a6, a7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v21 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v54 - v23;
  v61(v22);
  v25 = swift_bridgeObjectRetain();
  if (!Array.endIndex.getter(v25, v17))
    return swift_bridgeObjectRelease();
  v55 = v19;
  v58 = v11;
  v61 = a4;
  v26 = 0;
  v56 = xmmword_100424BB0;
  v27 = v12;
  v59 = v24;
  v60 = a3;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v26, IsNativeType, a3, v17);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v24, a3+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v26, v17);
      v36 = v61;
      v37 = v63;
      v38 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_16;
      goto LABEL_7;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)(v26, a3, v17);
    v37 = v63;
    if (v55 != 8)
      break;
    v53 = result;
    v64 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 16))(v24, &v64, v17);
    swift_unknownObjectRelease(v53);
    v36 = v61;
    v38 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_16:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_7:
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v24, v17);
    IndexPath.init(row:section:)(*((_QWORD *)v21 + 2), v36);
    v39 = *(_QWORD *)v21;
    if (v21[8] == 1)
    {
      if (v39)
      {
        if (v39 == 1)
        {
          v40 = sub_10000B4C8(&qword_100556AD0);
          v41 = *(unsigned __int8 *)(v27 + 80);
          v42 = (v41 + 32) & ~v41;
          v43 = swift_allocObject(v40, v42 + *(_QWORD *)(v27 + 72), v41 | 7);
          v29 = v27;
          *(_OWORD *)(v43 + 16) = v56;
          v32 = v58;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v43 + v42, v37, v58);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v62, "insertRowsAtIndexPaths:withRowAnimation:", v33.super.isa, 100);
        }
        else
        {
          v48 = sub_10000B4C8(&qword_100556AD0);
          v49 = *(unsigned __int8 *)(v27 + 80);
          v50 = (v49 + 32) & ~v49;
          v51 = swift_allocObject(v48, v50 + *(_QWORD *)(v27 + 72), v49 | 7);
          v29 = v27;
          *(_OWORD *)(v51 + 16) = v56;
          v32 = v58;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v51 + v50, v37, v58);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v62, "reloadRowsAtIndexPaths:withRowAnimation:", v33.super.isa, 100);
        }
      }
      else
      {
        v44 = sub_10000B4C8(&qword_100556AD0);
        v45 = *(unsigned __int8 *)(v27 + 80);
        v46 = (v45 + 32) & ~v45;
        v47 = swift_allocObject(v44, v46 + *(_QWORD *)(v27 + 72), v45 | 7);
        v29 = v27;
        *(_OWORD *)(v47 + 16) = v56;
        v32 = v58;
        (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v47 + v46, v37, v58);
        v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v62, "deleteRowsAtIndexPaths:withRowAnimation:", v33.super.isa, 100);
      }
    }
    else
    {
      v28 = v57;
      IndexPath.init(row:section:)(v39, v36);
      v29 = v27;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v31 = v28;
      v32 = v58;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v58);
      v33.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v62, "moveRowAtIndexPath:toIndexPath:", isa, v33.super.isa);

    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    a3 = v60;
    v34 = Array.endIndex.getter(v60, v17);
    ++v26;
    v27 = v29;
    v24 = v59;
    if (v38 == v34)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1002A53FC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1002A544C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = static Array._allocateUninitialized(_:)(a2, a3);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (a2)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 - 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      v12 = a2 - 1;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array(0);
    return v8;
  }
  return result;
}

uint64_t sub_1002A54FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002A4010(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1002A5520()
{
  return sub_1002A5598((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002A48E0);
}

uint64_t sub_1002A552C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A553C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002A554C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002A5558()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002A558C()
{
  return sub_1002A5598((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002A4F70);
}

uint64_t sub_1002A5598(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[4], v1[5], v1[6], v1[7], v1[8], v1[2], v1[3]);
}

uint64_t sub_1002A55B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A55C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_1002A5644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 24) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v5 + 24) & ~v5, ((a2 & 0xFFFFFFFFFFFFFFF8) + v5 + 24) & ~v5);
  }
  return v3;
}

uint64_t sub_1002A5700(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_1002A5724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1002A578C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_1002A57F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1002A585C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1002A58C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 24) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1002A5984 + 4 * byte_100436E20[(v8 - 1)]))();
}

void sub_1002A59E8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_100000004;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t initializeBufferWithCopyOfBuffer for CollectionComparisonOperationType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CollectionComparisonOperationType()
{
  return &type metadata for CollectionComparisonOperationType;
}

uint64_t sub_1002A5BDC(uint64_t *a1)
{
  uint64_t v1;

  return sub_1002A43B8(a1, *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64), *(uint64_t **)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48)) & 1;
}

uint64_t static Task<>.sleep(for:)(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
  return swift_task_switch(sub_1002A5C44, 0, 0);
}

void sub_1002A5C44()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 16) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 24) = v3;
    *v3 = v0;
    v3[1] = sub_1000BBBCC;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t static Task<>.delayed(by:priority:task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v10 = sub_10000B4C8(&qword_100556AE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002A5DB4(a1, (uint64_t)v12);
  v13 = swift_allocObject(&unk_100516628, 64, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = a4;
  *(double *)(v13 + 40) = a5;
  *(_QWORD *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = a3;
  swift_retain(a3);
  return sub_1002A5FF8((uint64_t)v12, (uint64_t)&unk_100556AF0, v13);
}

uint64_t sub_1002A5DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100556AE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A5DFC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(double *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_1002A5E1C, 0, 0);
}

void sub_1002A5E1C()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 24) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 48) = v3;
    *v3 = v0;
    v3[1] = sub_1002A5EB8;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_1002A5EB8()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (int *)v2[4];
  v8 = (uint64_t (*)(_QWORD))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v2[7] = v7;
  *v7 = v4;
  v7[1] = sub_100079794;
  return v8(v2[2]);
}

uint64_t sub_1002A5F54()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002A5F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = swift_task_alloc(dword_100556AEC);
  v6 = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10000DC64;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_1002A5E1C, 0, 0);
}

uint64_t sub_1002A5FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5);
  if ((_DWORD)v7 == 1)
  {
    sub_1002A61DC(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15);
}

uint64_t static Task<>.userFeedbackDelayed(task:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10000B4C8(&qword_100556AE0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter(v7);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  v11 = static Task<>.delayed(by:priority:task:)((uint64_t)v9, a1, a2, a3, 2.0);
  sub_1002A61DC((uint64_t)v9);
  return v11;
}

uint64_t sub_1002A61DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100556AE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id CASpringAnimation.springParameters.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  objc_msgSend(v0, "mass");
  v2 = v1;
  objc_msgSend(v0, "stiffness");
  v4 = v3;
  objc_msgSend(v0, "damping");
  return objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", v2, v4, v5, 0.0, 0.0);
}

void CASpringAnimation.springParameters.setter(void *a1)
{
  void *v1;

  objc_msgSend(a1, "mass");
  objc_msgSend(v1, "setMass:");
  objc_msgSend(a1, "stiffness");
  objc_msgSend(v1, "setStiffness:");
  objc_msgSend(a1, "damping");
  objc_msgSend(v1, "setDamping:");
  objc_msgSend(v1, "setInitialVelocity:", 0.0);

}

void (*CASpringAnimation.springParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  a1[1] = v1;
  objc_msgSend(v1, "mass");
  v4 = v3;
  objc_msgSend(v1, "stiffness");
  v6 = v5;
  objc_msgSend(v1, "damping");
  *a1 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", v4, v6, v7, 0.0, 0.0);
  return sub_1002A63D8;
}

void sub_1002A63D8(uint64_t a1, char a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(id *)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(id *)a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2;
    objc_msgSend(v4, "mass");
    objc_msgSend(v3, "setMass:");
    objc_msgSend(v4, "stiffness");
    objc_msgSend(v3, "setStiffness:");
    objc_msgSend(v4, "damping");
    objc_msgSend(v3, "setDamping:");
    objc_msgSend(v3, "setInitialVelocity:", 0.0);

  }
  else
  {
    objc_msgSend(v2, "mass");
    objc_msgSend(v3, "setMass:");
    objc_msgSend(v5, "stiffness");
    objc_msgSend(v3, "setStiffness:");
    objc_msgSend(v5, "damping");
    objc_msgSend(v3, "setDamping:");
    objc_msgSend(v3, "setInitialVelocity:", 0.0);
  }

}

void static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  objc_msgSend(a1, "settlingDuration");
  v15 = v14;
  objc_msgSend(a1, "mass");
  v17 = v16;
  objc_msgSend(a1, "stiffness");
  v19 = v18;
  objc_msgSend(a1, "damping");
  v21 = v20;
  v29 = a3;
  v30 = a4;
  v25 = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_10015F6F8;
  v28 = &unk_100516640;
  v22 = _Block_copy(&v25);
  v23 = v30;
  swift_retain(a4);
  swift_release(v23);
  if (a5)
  {
    v29 = a5;
    v30 = a6;
    v25 = _NSConcreteStackBlock;
    v26 = 1107296256;
    v27 = sub_1002A4D68;
    v28 = &unk_100516668;
    a5 = _Block_copy(&v25);
    v24 = v30;
    swift_retain(a6);
    swift_release(v24);
  }
  objc_msgSend((id)objc_opt_self(UIView), "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", a2, v22, a5, v15, a7, v17, v19, v21, 0.0);
  _Block_release(a5);
  _Block_release(v22);
}

uint64_t sub_1002A6694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002A66A4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

id static UIView.animate(withTimingFunction:duration:delay:options:animations:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8)
{
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  v16 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v16, "begin");
  objc_msgSend(v16, "setAnimationTimingFunction:", a1);
  v25 = a3;
  v26 = a4;
  v21 = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_10015F6F8;
  v24 = &unk_100516690;
  v17 = _Block_copy(&v21);
  v18 = v26;
  swift_retain(a4);
  swift_release(v18);
  if (a5)
  {
    v25 = a5;
    v26 = a6;
    v21 = _NSConcreteStackBlock;
    v22 = 1107296256;
    v23 = sub_1002A4D68;
    v24 = &unk_1005166B8;
    a5 = _Block_copy(&v21);
    v19 = v26;
    swift_retain(a6);
    swift_release(v19);
  }
  objc_msgSend((id)objc_opt_self(UIView), "animateWithDuration:delay:options:animations:completion:", a2, v17, a5, a7, a8);
  _Block_release(a5);
  _Block_release(v17);
  return objc_msgSend(v16, "commit");
}

void sub_1002A6824(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFTimeInterval v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating))
  {
    objc_msgSend(a1, "duration");
    v2 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration;
    *(_QWORD *)v2 = v3;
    *(_BYTE *)(v2 + 8) = 0;
    v4 = CACurrentMediaTime();
    v5 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime;
    *(CFTimeInterval *)v5 = v4;
    *(_BYTE *)(v5 + 8) = 0;
    v6 = objc_msgSend((id)objc_opt_self(CADisplayLink), "displayLinkWithTarget:selector:", v1, "displayLinkFiredWithDisplayLink:");
    v7 = OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink;
    v8 = *(void **)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink) = v6;

    v9 = *(void **)(v1 + v7);
    if (v9)
    {
      v10 = (void *)objc_opt_self(NSRunLoop);
      v11 = v9;
      v12 = objc_msgSend(v10, "currentRunLoop");
      objc_msgSend(v11, "addToRunLoop:forMode:", v12, NSDefaultRunLoopMode);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1002A69F4(void *a1)
{
  uint64_t v1;
  id result;
  double v3;
  double *v4;
  void (*v5)(uint64_t, double);
  double *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  result = objc_msgSend(a1, "timestamp");
  v4 = (double *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime + 8) & 1) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = *(void (**)(uint64_t, double))(v1
                                              + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
  if (v5)
  {
    v6 = (double *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration);
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration + 8) & 1) == 0)
    {
      v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8);
      v8 = (v3 - *v4) / *v6;
      v9 = swift_retain(v7);
      v5(v9, v8);
      return (id)sub_1000DB26C((uint64_t)v5, v7);
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t CAAnimation.progress.getter()
{
  return sub_1002A6E1C(&OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating, (void (*)(_QWORD, _QWORD))sub_1002A81A0);
}

uint64_t type metadata accessor for CAAnimationCompletionHandler()
{
  return objc_opt_self(_TtC14MusicUtilities28CAAnimationCompletionHandler);
}

id CAAnimation.progress.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id result;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  objc_super v27;

  v3 = v2;
  result = objc_msgSend(v3, "delegate");
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for CAAnimationCompletionHandler();
    v9 = swift_dynamicCastClass(v7, v8);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      v12 = v10[1];
      *v10 = a1;
      v10[1] = a2;
      sub_1000DB26C(v11, v12);
      return (id)swift_unknownObjectRelease(v7);
    }
    result = (id)swift_unknownObjectRelease(v7);
  }
  if (a1)
  {
    v13 = (objc_class *)type metadata accessor for CAAnimationCompletionHandler();
    v14 = (char *)objc_allocWithZone(v13);
    v15 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v16 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    v17 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration];
    *(_QWORD *)v18 = 0;
    v18[8] = 1;
    *(_QWORD *)&v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink] = 0;
    v27.receiver = v14;
    v27.super_class = v13;
    swift_retain_n(a2, 2);
    v19 = (char *)objc_msgSendSuper2(&v27, "init");
    v20 = (uint64_t *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v22 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8];
    *v20 = a1;
    v20[1] = a2;
    sub_1000DB26C(v21, v22);
    v23 = &v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v24 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v25 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8];
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    sub_1000DB26C(v24, v25);
    v26 = v19;
    objc_msgSend(v3, "setDelegate:", v26, v27.receiver, v27.super_class);
    sub_1000DB26C(a1, a2);

    return (id)sub_1000DB26C(a1, a2);
  }
  return result;
}

uint64_t (*CAAnimation.progress.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "delegate");
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for CAAnimationCompletionHandler();
    v6 = swift_dynamicCastClass(v4, v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8);
      sub_1000DB0D8(v7, v8);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    swift_unknownObjectRelease(v4);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *a1 = v7;
  a1[1] = v8;
  return sub_1002A6DEC;
}

uint64_t sub_1002A6DEC(uint64_t *a1, char a2)
{
  return sub_1002A711C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CAAnimation.progress.setter, (void (*)(uint64_t, uint64_t))sub_1002A81A0, sub_1002A819C);
}

uint64_t CAAnimation.completion.getter()
{
  return sub_1002A6E1C(&OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion, (void (*)(_QWORD, _QWORD))sub_1000DB0D8);
}

uint64_t sub_1002A6E1C(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  void *v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = objc_msgSend(v2, "delegate");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = type metadata accessor for CAAnimationCompletionHandler();
  v8 = swift_dynamicCastClass(v6, v7);
  if (v8)
  {
    v9 = (_QWORD *)(v8 + *a1);
    v10 = *v9;
    a2(*v9, v9[1]);
  }
  else
  {
    v10 = 0;
  }
  swift_unknownObjectRelease(v6);
  return v10;
}

id CAAnimation.completion.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id result;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  objc_super v27;

  v3 = v2;
  result = objc_msgSend(v3, "delegate");
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for CAAnimationCompletionHandler();
    v9 = swift_dynamicCastClass(v7, v8);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      v12 = v10[1];
      *v10 = a1;
      v10[1] = a2;
      sub_1000DB26C(v11, v12);
      return (id)swift_unknownObjectRelease(v7);
    }
    result = (id)swift_unknownObjectRelease(v7);
  }
  if (a1)
  {
    v13 = (objc_class *)type metadata accessor for CAAnimationCompletionHandler();
    v14 = (char *)objc_allocWithZone(v13);
    v15 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v16 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    v17 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration];
    *(_QWORD *)v18 = 0;
    v18[8] = 1;
    *(_QWORD *)&v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink] = 0;
    v27.receiver = v14;
    v27.super_class = v13;
    swift_retain_n(a2, 2);
    v19 = (char *)objc_msgSendSuper2(&v27, "init");
    v20 = &v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v22 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8];
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    sub_1000DB26C(v21, v22);
    v23 = (uint64_t *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v24 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v25 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8];
    *v23 = a1;
    v23[1] = a2;
    sub_1000DB26C(v24, v25);
    v26 = v19;
    objc_msgSend(v3, "setDelegate:", v26, v27.receiver, v27.super_class);
    sub_1000DB26C(a1, a2);

    return (id)sub_1000DB26C(a1, a2);
  }
  return result;
}

uint64_t (*CAAnimation.completion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "delegate");
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for CAAnimationCompletionHandler();
    v6 = swift_dynamicCastClass(v4, v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8);
      sub_1000DB0D8(v7, v8);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    swift_unknownObjectRelease(v4);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *a1 = v7;
  a1[1] = v8;
  return sub_1002A7100;
}

uint64_t sub_1002A7100(uint64_t *a1, char a2)
{
  return sub_1002A711C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CAAnimation.completion.setter, (void (*)(uint64_t, uint64_t))sub_1000DB0D8, sub_1000DB26C);
}

uint64_t sub_1002A711C(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  if ((a2 & 1) == 0)
    return a3(*a1, v7);
  a4(*a1, v7);
  a3(v6, v7);
  return a5(v6, v7);
}

uint64_t CALayer.addAsyncAnimation(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = v5;
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[8] = v6;
  v4[9] = v7;
  return swift_task_switch(sub_1002A7210, v6, v7);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = sub_10000B4C8(&qword_100556B30);
  __chkstk_darwin(v7);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1;
  v14 = v3;
  v15 = a2;
  v16 = a3;
  (*(void (**)(_BYTE *, _QWORD))(v10 + 104))(v9, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:));
  return AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for CALayer.AnimationStatus, v9, sub_1002A7DB4, v12, &type metadata for CALayer.AnimationStatus);
}

uint64_t sub_1002A7210(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = v1[5];
  v4 = v1[3];
  v3 = v1[4];
  v5 = v1[2];
  v6 = static MainActor.shared.getter(a1);
  v1[10] = v6;
  v7 = (_QWORD *)swift_task_alloc(48);
  v1[11] = v7;
  v7[2] = v5;
  v7[3] = v2;
  v7[4] = v4;
  v7[5] = v3;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[12] = v8;
  *v8 = v1;
  v8[1] = sub_1002A72E4;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 13, v6, &protocol witness table for MainActor, 0xD00000000000001CLL, 0x8000000100450420, sub_1002A7808, v7, &type metadata for Bool);
}

uint64_t sub_1002A72E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002A734C, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1002A734C()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(unsigned __int8 *)(v0 + 104), v1);
}

id sub_1002A7380(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  NSString v20;
  uint64_t v21;
  void *v22;
  id v23;
  id result;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;

  v49 = a3;
  v8 = sub_10000B4C8(&qword_100556BD8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1005167D0, v12 + v10, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  CAAnimation.completion.setter((uint64_t)sub_1002A8134, v13);
  v14 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v14, "begin");
  objc_msgSend(v14, "setDisableActions:", 1);
  if (a5)
    v15 = String._bridgeToObjectiveC()();
  else
    v15 = 0;
  objc_msgSend(v49, "addAnimation:forKey:", a2, v15);

  objc_opt_self(CABasicAnimation);
  v16 = swift_dynamicCastObjCClass(a2);
  if (v16)
  {
    if (a5)
    {
      v17 = (void *)v16;
      v18 = a2;
      v19 = objc_msgSend(v17, "toValue");
      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v49, "setValue:forKey:", v19, v20);

      swift_unknownObjectRelease(v19);
    }
    return objc_msgSend(v14, "commit");
  }
  objc_opt_self(CAAnimationGroup);
  v21 = swift_dynamicCastObjCClass(a2);
  if (!v21)
    return objc_msgSend(v14, "commit");
  v22 = (void *)v21;
  v23 = a2;
  result = objc_msgSend(v22, "animations");
  v25 = (uint64_t)_swiftEmptyArrayStorage;
  if (result)
  {
    v26 = result;
    v27 = sub_1002A80EC();
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

    v50 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0)
        v38 = v28;
      else
        v38 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      result = (id)_CocoaArrayWrapper.endIndex.getter(v38);
      v29 = (uint64_t)result;
      if (result)
        goto LABEL_11;
    }
    else
    {
      v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain();
      if (v29)
      {
LABEL_11:
        if (v29 < 1)
          goto LABEL_47;
        for (i = 0; i != v29; ++i)
        {
          if ((v28 & 0xC000000000000001) != 0)
            v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v28);
          else
            v31 = *(id *)(v28 + 8 * i + 32);
          v32 = v31;
          objc_opt_self(CABasicAnimation);
          v33 = swift_dynamicCastObjCClass(v32);
          if (v33)
          {
            v34 = v33;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
            v36 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v35 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v36 >= v35 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
            v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
            specialized Array._endMutation()(v37);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v25 = v50;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    v25 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_28:
    result = (id)swift_bridgeObjectRelease();
  }
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v46 = v25;
    else
      v46 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter(v46);
    result = (id)swift_bridgeObjectRelease();
    if (v39)
      goto LABEL_31;
    goto LABEL_44;
  }
  v39 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v39)
  {
LABEL_44:

    swift_bridgeObjectRelease();
    return objc_msgSend(v14, "commit");
  }
LABEL_31:
  v47 = v23;
  v48 = v14;
  if (v39 >= 1)
  {
    for (j = 0; j != v39; ++j)
    {
      if ((v25 & 0xC000000000000001) != 0)
        v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v25);
      else
        v41 = *(id *)(v25 + 8 * j + 32);
      v42 = v41;
      v43 = objc_msgSend(v41, "keyPath", v47);
      if (v43)
      {
        v44 = v43;
        v45 = objc_msgSend(v42, "toValue");
        objc_msgSend(v49, "setValue:forKey:", v45, v44);

        swift_unknownObjectRelease(v45);
        v42 = v44;
      }

    }
    swift_bridgeObjectRelease();
    v14 = v48;
    return objc_msgSend(v14, "commit");
  }
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

id sub_1002A7808(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A7380(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

id sub_1002A78D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSString v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  NSString v27;
  uint64_t v28;
  void *v29;
  id v30;
  id result;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;

  v54 = a4;
  v55 = a5;
  v56 = a3;
  v7 = sub_10000B4C8(&qword_100556BC0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, v7);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = v13 + v9;
  v15 = v12 | 7;
  v16 = swift_allocObject(&unk_100516780, v14, v12 | 7);
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v17(v16 + v13, v10, v7);
  CAAnimation.progress.setter((uint64_t)sub_1002A8060, v16);
  v11(v10, a1, v7);
  v18 = swift_allocObject(&unk_1005167A8, v14, v15);
  v19 = v7;
  v20 = v55;
  v17(v18 + v13, v10, v19);
  CAAnimation.completion.setter((uint64_t)sub_1002A80AC, v18);
  v21 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v21, "begin", v54);
  objc_msgSend(v21, "setDisableActions:", 1);
  if (v20)
    v22 = String._bridgeToObjectiveC()();
  else
    v22 = 0;
  objc_msgSend(v56, "addAnimation:forKey:", a2, v22);

  objc_opt_self(CABasicAnimation);
  v23 = swift_dynamicCastObjCClass(a2);
  if (v23)
  {
    if (v20)
    {
      v24 = (void *)v23;
      v25 = a2;
      v26 = objc_msgSend(v24, "toValue");
      v27 = String._bridgeToObjectiveC()();
      objc_msgSend(v56, "setValue:forKey:", v26, v27);

      swift_unknownObjectRelease(v26);
    }
    return objc_msgSend(v21, "commit");
  }
  objc_opt_self(CAAnimationGroup);
  v28 = swift_dynamicCastObjCClass(a2);
  if (!v28)
    return objc_msgSend(v21, "commit");
  v29 = (void *)v28;
  v30 = a2;
  result = objc_msgSend(v29, "animations");
  v32 = (uint64_t)_swiftEmptyArrayStorage;
  if (result)
  {
    v33 = result;
    v34 = sub_1002A80EC();
    v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v34);

    v57 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v35 >> 62)
    {
      if (v35 < 0)
        v45 = v35;
      else
        v45 = v35 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      result = (id)_CocoaArrayWrapper.endIndex.getter(v45);
      v36 = (uint64_t)result;
      if (result)
        goto LABEL_11;
    }
    else
    {
      v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain();
      if (v36)
      {
LABEL_11:
        if (v36 < 1)
          goto LABEL_47;
        for (i = 0; i != v36; ++i)
        {
          if ((v35 & 0xC000000000000001) != 0)
            v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v35);
          else
            v38 = *(id *)(v35 + 8 * i + 32);
          v39 = v38;
          objc_opt_self(CABasicAnimation);
          v40 = swift_dynamicCastObjCClass(v39);
          if (v40)
          {
            v41 = v40;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v40);
            v43 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v42 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v43 >= v42 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
            v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
            specialized Array._endMutation()(v44);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v32 = v57;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    v32 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_28:
    result = (id)swift_bridgeObjectRelease();
  }
  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0)
      v53 = v32;
    else
      v53 = v32 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v46 = _CocoaArrayWrapper.endIndex.getter(v53);
    result = (id)swift_bridgeObjectRelease();
    if (v46)
      goto LABEL_31;
    goto LABEL_44;
  }
  v46 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v46)
  {
LABEL_44:

    swift_bridgeObjectRelease();
    return objc_msgSend(v21, "commit");
  }
LABEL_31:
  v54 = v30;
  v55 = v21;
  if (v46 >= 1)
  {
    for (j = 0; j != v46; ++j)
    {
      if ((v32 & 0xC000000000000001) != 0)
        v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v32);
      else
        v48 = *(id *)(v32 + 8 * j + 32);
      v49 = v48;
      v50 = objc_msgSend(v48, "keyPath", v54);
      if (v50)
      {
        v51 = v50;
        v52 = objc_msgSend(v49, "toValue");
        objc_msgSend(v56, "setValue:forKey:", v52, v51);

        swift_unknownObjectRelease(v52);
        v49 = v51;
      }

    }
    swift_bridgeObjectRelease();
    v21 = v55;
    return objc_msgSend(v21, "commit");
  }
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

id sub_1002A7DB4(uint64_t a1)
{
  void **v1;

  return sub_1002A78D4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002A7DC0(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v8;
  char v9;

  v2 = sub_10000B4C8(&qword_100556BD0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1;
  v9 = 0;
  v6 = sub_10000B4C8(&qword_100556BC0);
  AsyncStream.Continuation.yield(_:)(&v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1002A7E68(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = sub_10000B4C8(&qword_100556BD0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 & 1;
  v8 = 1;
  v6 = sub_10000B4C8(&qword_100556BC0);
  AsyncStream.Continuation.yield(_:)(&v7, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  AsyncStream.Continuation.finish()();
}

id static CATransaction.performWithoutAnimation(_:)(void (*a1)(id))
{
  void *v2;

  v2 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v2, "begin");
  a1(objc_msgSend(v2, "setDisableActions:", 1));
  return objc_msgSend(v2, "commit");
}

ValueMetadata *type metadata accessor for CALayer.AnimationStatus()
{
  return &type metadata for CALayer.AnimationStatus;
}

void sub_1002A7F9C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  uint64_t v9;

  v3 = OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");
    v5 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = 0;

  }
  v6 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = *(void (**)(_QWORD))(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
  if (v8)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8);
    swift_retain(v9);
    v8(a1 & 1);
    sub_1000DB26C((uint64_t)v8, v9);
  }
}

uint64_t sub_1002A8054()
{
  return sub_10017577C(&qword_100556BC0);
}

uint64_t sub_1002A8060(double a1)
{
  sub_10000B4C8(&qword_100556BC0);
  return sub_1002A7DC0(a1);
}

uint64_t sub_1002A80A0()
{
  return sub_10017577C(&qword_100556BC0);
}

void sub_1002A80AC(char a1)
{
  sub_10000B4C8(&qword_100556BC0);
  sub_1002A7E68(a1);
}

unint64_t sub_1002A80EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556BC8;
  if (!qword_100556BC8)
  {
    v1 = objc_opt_self(CAAnimation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100556BC8);
  }
  return result;
}

uint64_t sub_1002A8128()
{
  return sub_10017577C(&qword_100556BD8);
}

uint64_t sub_1002A8134(char a1)
{
  uint64_t v2;
  char v4;

  sub_10000B4C8(&qword_100556BD8);
  v4 = a1;
  v2 = sub_10000B4C8(&qword_100556BD8);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

double Int.seconds.getter(uint64_t a1)
{
  return (double)a1;
}

double CGSize.nonNegative()(double result)
{
  if (result < 0.0)
    return 0.0;
  return result;
}

double static CGSize.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

CGFloat static CGAffineTransform.+ infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  CGFloat result;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v4 = a1[1];
  *(_OWORD *)&t1.a = *a1;
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = a1[2];
  v5 = a2[1];
  *(_OWORD *)&t2.a = *a2;
  *(_OWORD *)&t2.c = v5;
  *(_OWORD *)&t2.tx = a2[2];
  CGAffineTransformConcat(&v9, &t1, &t2);
  result = v9.a;
  v7 = *(_OWORD *)&v9.c;
  v8 = *(_OWORD *)&v9.tx;
  *a3 = *(_OWORD *)&v9.a;
  a3[1] = v7;
  a3[2] = v8;
  return result;
}

void sub_1002A824C()
{
  static CGPoint.topLeft = 0;
  *(_QWORD *)algn_100562598 = 0;
}

uint64_t *CGPoint.topLeft.unsafeMutableAddressor()
{
  if (qword_100556140 != -1)
    swift_once(&qword_100556140, sub_1002A824C);
  return &static CGPoint.topLeft;
}

double static CGPoint.topLeft.getter()
{
  _BYTE v1[24];

  if (qword_100556140 != -1)
    swift_once(&qword_100556140, sub_1002A824C);
  swift_beginAccess(&static CGPoint.topLeft, v1, 0, 0);
  return *(double *)&static CGPoint.topLeft;
}

void static CGPoint.topLeft.setter(double a1, double a2)
{
  _BYTE v4[24];

  if (qword_100556140 != -1)
    swift_once(&qword_100556140, sub_1002A824C);
  swift_beginAccess(&static CGPoint.topLeft, v4, 1, 0);
  static CGPoint.topLeft = *(_QWORD *)&a1;
  *(double *)algn_100562598 = a2;
}

uint64_t (*static CGPoint.topLeft.modify(uint64_t a1))(_QWORD)
{
  if (qword_100556140 != -1)
    swift_once(&qword_100556140, sub_1002A824C);
  swift_beginAccess(&static CGPoint.topLeft, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.topCenter.unsafeMutableAddressor()
{
  return &static CGPoint.topCenter;
}

double static CGPoint.topCenter.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static CGPoint.topCenter, v1, 0, 0);
  return *(double *)&static CGPoint.topCenter;
}

uint64_t static CGPoint.topCenter.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(&static CGPoint.topCenter, v5, 1, 0);
  static CGPoint.topCenter = *(_QWORD *)&a1;
  *(double *)algn_100556C48 = a2;
  return result;
}

uint64_t (*static CGPoint.topCenter.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static CGPoint.topCenter, a1, 33, 0);
  return j_j__swift_endAccess;
}

double sub_1002A84C4()
{
  double result;

  result = 1.0;
  static CGPoint.topRight = xmmword_100438760;
  return result;
}

__int128 *CGPoint.topRight.unsafeMutableAddressor()
{
  if (qword_100556148 != -1)
    swift_once(&qword_100556148, sub_1002A84C4);
  return &static CGPoint.topRight;
}

double static CGPoint.topRight.getter()
{
  return sub_1002A8AA4(&qword_100556148, (uint64_t)&static CGPoint.topRight);
}

uint64_t static CGPoint.topRight.setter(double a1, double a2)
{
  return sub_1002A8B20(&qword_100556148, (double *)&static CGPoint.topRight, (double *)&static CGPoint.topRight + 1, a1, a2);
}

uint64_t (*static CGPoint.topRight.modify(uint64_t a1))(_QWORD)
{
  if (qword_100556148 != -1)
    swift_once(&qword_100556148, sub_1002A84C4);
  swift_beginAccess(&static CGPoint.topRight, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.centerLeft.unsafeMutableAddressor()
{
  return &static CGPoint.centerLeft;
}

double static CGPoint.centerLeft.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.centerLeft, v1, 0, 0);
  return static CGPoint.centerLeft[0];
}

uint64_t static CGPoint.centerLeft.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.centerLeft, v5, 1, 0);
  static CGPoint.centerLeft[0] = a1;
  unk_100556C58 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.centerLeft.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.centerLeft, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.center.unsafeMutableAddressor()
{
  return &static CGPoint.center;
}

double static CGPoint.center.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.center, v1, 0, 0);
  return static CGPoint.center[0];
}

uint64_t static CGPoint.center.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.center, v5, 1, 0);
  static CGPoint.center[0] = a1;
  unk_100556C68 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.center.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.center, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.centerRight.unsafeMutableAddressor()
{
  return &static CGPoint.centerRight;
}

double static CGPoint.centerRight.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.centerRight, v1, 0, 0);
  return static CGPoint.centerRight[0];
}

uint64_t static CGPoint.centerRight.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.centerRight, v5, 1, 0);
  static CGPoint.centerRight[0] = a1;
  unk_100556C78 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.centerRight.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.centerRight, a1, 33, 0);
  return j_j__swift_endAccess;
}

double sub_1002A8858()
{
  double result;

  result = 0.0;
  static CGPoint.bottomLeft = xmmword_1004280C0;
  return result;
}

__int128 *CGPoint.bottomLeft.unsafeMutableAddressor()
{
  if (qword_100556150 != -1)
    swift_once(&qword_100556150, sub_1002A8858);
  return &static CGPoint.bottomLeft;
}

double static CGPoint.bottomLeft.getter()
{
  return sub_1002A8AA4(&qword_100556150, (uint64_t)&static CGPoint.bottomLeft);
}

uint64_t static CGPoint.bottomLeft.setter(double a1, double a2)
{
  return sub_1002A8B20(&qword_100556150, (double *)&static CGPoint.bottomLeft, (double *)&static CGPoint.bottomLeft + 1, a1, a2);
}

uint64_t (*static CGPoint.bottomLeft.modify(uint64_t a1))(_QWORD)
{
  if (qword_100556150 != -1)
    swift_once(&qword_100556150, sub_1002A8858);
  swift_beginAccess(&static CGPoint.bottomLeft, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t *CGPoint.bottomCenter.unsafeMutableAddressor()
{
  return &static CGPoint.bottomCenter;
}

double static CGPoint.bottomCenter.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.bottomCenter, v1, 0, 0);
  return static CGPoint.bottomCenter[0];
}

uint64_t static CGPoint.bottomCenter.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.bottomCenter, v5, 1, 0);
  static CGPoint.bottomCenter[0] = a1;
  unk_100556C88 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.bottomCenter.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.bottomCenter, a1, 33, 0);
  return j_j__swift_endAccess;
}

__n128 sub_1002A8A34()
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  static CGPoint.bottomRight = (__int128)result;
  return result;
}

__int128 *CGPoint.bottomRight.unsafeMutableAddressor()
{
  if (qword_100556158 != -1)
    swift_once(&qword_100556158, sub_1002A8A34);
  return &static CGPoint.bottomRight;
}

double static CGPoint.bottomRight.getter()
{
  return sub_1002A8AA4(&qword_100556158, (uint64_t)&static CGPoint.bottomRight);
}

double sub_1002A8AA4(_QWORD *a1, uint64_t a2)
{
  _BYTE v4[24];

  if (*a1 != -1)
    swift_once();
  swift_beginAccess(a2, v4, 0, 0);
  return *(double *)a2;
}

uint64_t static CGPoint.bottomRight.setter(double a1, double a2)
{
  return sub_1002A8B20(&qword_100556158, (double *)&static CGPoint.bottomRight, (double *)&static CGPoint.bottomRight + 1, a1, a2);
}

uint64_t sub_1002A8B20(_QWORD *a1, double *a2, double *a3, double a4, double a5)
{
  uint64_t result;
  _BYTE v10[24];

  if (*a1 != -1)
    swift_once();
  result = swift_beginAccess(a2, v10, 1, 0);
  *a2 = a4;
  *a3 = a5;
  return result;
}

uint64_t (*static CGPoint.bottomRight.modify(uint64_t a1))(_QWORD)
{
  if (qword_100556158 != -1)
    swift_once(&qword_100556158, sub_1002A8A34);
  swift_beginAccess(&static CGPoint.bottomRight, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t CGRect.outset(by:for:)(double a1, double a2, double a3, double a4)
{
  return CGRect.inset(by:for:)(-a1, -a2, -a3, -a4);
}

CTFrameRef CTFramesetterRef.createFrame(_:)(double a1, double a2, double a3, double a4)
{
  const __CTFramesetter *v4;
  const CGPath *v5;
  CTFrameRef Frame;
  CFRange v8;

  v5 = CGPathCreateWithRect(*(CGRect *)&a1, 0);
  v8.location = 0;
  v8.length = 0;
  Frame = CTFramesetterCreateFrame(v4, v8, v5, 0);

  return Frame;
}

double CTFramesetterRef.suggestedFrameSize(constraints:)(double a1, double a2)
{
  const __CTFramesetter *v2;
  double result;
  CFRange v4;

  v4.location = 0;
  v4.length = 0;
  *(_QWORD *)&result = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v2, v4, 0, *(CGSize *)&a1, 0);
  return result;
}

Swift::Void __swiftcall CTFrameRef.draw(in:)(CGContextRef in)
{
  const __CTFrame *v1;

  CTFrameDraw(v1, in);
}

_QWORD *CTFrameRef.lines.getter()
{
  return sub_1002A96B0((uint64_t (*)(uint64_t))&_CTFrameGetLines, (uint64_t (*)(_QWORD))type metadata accessor for CTLine);
}

CGPoint **CTFrameRef.lineOrigins.getter()
{
  const __CTFrame *v0;
  const __CFArray *v1;
  uint64_t v2;
  uint64_t v3;
  CGPoint **v4;
  const __CTFrame *v5;
  CGPoint **v6;
  uint64_t v8;
  uint64_t v9;

  v1 = CTFrameGetLines(v0);
  v9 = 0;
  type metadata accessor for CTLine(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v1, &v9, v2);

  if (v9)
    v3 = v9;
  else
    v3 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v8 = v3;
    else
      v8 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = (CGPoint **)_CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(CGPoint ***)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v5 = v0;
  v6 = sub_1002AACC8(v4, v5);

  return v6;
}

CGPoint **sub_1002A8D64(CGPoint **result, uint64_t *a2, CTFrameRef frame)
{
  CGPoint *v3;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFRange v13;

  v3 = *result;
  if (*result)
  {
    v13.location = 0;
    v13.length = 0;
    CTFrameGetLineOrigins(frame, v13, v3);
    v7 = CTFrameGetLines(frame);
    v12 = 0;
    type metadata accessor for CTLine(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v12, v8);

    if (v12)
      v9 = v12;
    else
      v9 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v11 = v9;
      else
        v11 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = (CGPoint **)swift_bridgeObjectRelease();
    *a2 = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *CTFrameRef.lineFrames(lines:origins:flippedCoordinates:useExtendedLineBounds:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  const __CTLine *v5;
  CGFloat height;
  CGFloat width;
  double v8;
  uint64_t v9;
  const __CTLine *v13;
  const __CTLine *i;
  const __CTLine *v15;
  CTLineBoundsOptions v16;
  unint64_t v17;
  unint64_t v18;
  CGFloat *v19;
  const __CTLine *v20;
  const __CTLine *v21;
  char *v22;
  char *v23;
  double *v24;
  char *v25;
  double v26;
  const __CTLine *v27;
  uint64_t v28;
  double v29;
  CGFloat v30;
  CGFloat v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  char *v37;
  uint64_t v38;
  CTLineBoundsOptions options;
  unint64_t v41;
  CGRect BoundsWithOptions;
  CGRect v44;

  if (!((unint64_t)a1 >> 62))
  {
    v13 = *(const __CTLine **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_42:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v38 = a1;
  else
    v38 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = (const __CTLine *)_CocoaArrayWrapper.endIndex.getter(v38);
  if (!v13)
    goto LABEL_42;
LABEL_3:
  v41 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_46;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_48;
  }
  for (i = (const __CTLine *)*(id *)(a1 + 32);
        ;
        i = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1))
  {
    v15 = i;
    v4 = *(_QWORD *)(a2 + 16);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return _swiftEmptyArrayStorage;
    }
    v9 = *(_QWORD *)(a2 + 32);
    v8 = *(double *)(a2 + 40);
    if ((a4 & 1) != 0)
      v16 = 32;
    else
      v16 = 0;
    options = v16;
    BoundsWithOptions = CTLineGetBoundsWithOptions(i, v16);
    width = BoundsWithOptions.size.width;
    height = BoundsWithOptions.size.height;
    if ((a3 & 1) == 0)
      v8 = 0.0;
    v5 = v15;
    a4 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
LABEL_48:
      a4 = sub_1002AA974(0, a4[2] + 1, 1, a4);
    v18 = a4[2];
    v17 = a4[3];
    if (v18 >= v17 >> 1)
      a4 = sub_1002AA974((_QWORD *)(v17 > 1), v18 + 1, 1, a4);
    a4[2] = v18 + 1;
    v19 = (CGFloat *)&a4[5 * v18];
    *((_QWORD *)v19 + 4) = v5;
    *((_QWORD *)v19 + 5) = v9;
    v19[6] = 0.0;
    v19[7] = width;
    v19[8] = height;

    if (v13 == (const __CTLine *)1)
      goto LABEL_16;
    if (v41)
    {
      v20 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, a1);
      goto LABEL_22;
    }
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
      break;
LABEL_45:
    __break(1u);
LABEL_46:
    ;
  }
  v20 = (const __CTLine *)*(id *)(a1 + 40);
LABEL_22:
  v21 = v20;
  v22 = (char *)(v4 - 1);
  if (v4 != 1)
  {
    v23 = 0;
    v24 = (double *)(a2 + 56);
    v25 = (char *)v13 - 2;
    v26 = 0.0;
    while (1)
    {
      v28 = *((_QWORD *)v24 - 1);
      v29 = *v24;
      v44 = CTLineGetBoundsWithOptions(v21, options);
      v30 = v44.size.width;
      v31 = v44.size.height;
      v32 = v26 + v8 - v29;
      if ((a3 & 1) != 0)
      {
        v8 = v29;
        v26 = v32;
        v33 = v32;
      }
      else
      {
        v33 = 0.0;
      }
      v13 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(a4) & 1) == 0)
        a4 = sub_1002AA974(0, a4[2] + 1, 1, a4);
      v35 = a4[2];
      v34 = a4[3];
      if (v35 >= v34 >> 1)
        a4 = sub_1002AA974((_QWORD *)(v34 > 1), v35 + 1, 1, a4);
      a4[2] = v35 + 1;
      v36 = (double *)&a4[5 * v35];
      *((_QWORD *)v36 + 4) = v13;
      *((_QWORD *)v36 + 5) = v28;
      v36[6] = v33;
      v36[7] = v30;
      v36[8] = v31;

      if (v25 == v23)
        break;
      v37 = v23 + 2;
      if (v41)
      {
        v27 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, a1);
      }
      else
      {
        if ((unint64_t)v37 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v27 = (const __CTLine *)*(id *)(a1 + 8 * (_QWORD)v23 + 48);
      }
      v21 = v27;
      v24 += 2;
      if (v22 == ++v23)
        goto LABEL_23;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a4;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a4;
}

double CTLineRef.extendedBounds.getter()
{
  return sub_1002A91E0(0x20uLL);
}

double CTLineRef.bounds.getter()
{
  return sub_1002A91E0(0);
}

double sub_1002A91E0(CTLineBoundsOptions options)
{
  const __CTLine *v1;
  double result;

  *(_QWORD *)&result = (unint64_t)CTLineGetBoundsWithOptions(v1, options);
  return result;
}

uint64_t CTFrameRef.linesWithFrames(flippedCoordinates:useExtendedLineBounds:)(char a1, char a2)
{
  const __CTFrame *v2;
  const __CTLine *v3;
  CGFloat height;
  CGFloat width;
  double v6;
  CGPoint *v7;
  CGPoint **v8;
  CTLineBoundsOptions v9;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  const __CFArray *v15;
  uint64_t v16;
  CGPoint **v17;
  char *v18;
  const __CTLine *v19;
  const __CTLine *v20;
  CTLineBoundsOptions v21;
  unint64_t v22;
  unint64_t v23;
  CGFloat *v24;
  const __CTLine *v25;
  char *v26;
  char *v27;
  double v28;
  const __CTLine *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v40;
  unint64_t v41;
  uint64_t v43;
  CGRect BoundsWithOptions;
  CGRect v45;

  v8 = (CGPoint **)v2;
  LOBYTE(v9) = a2;
  v10 = CTFrameGetLines(v2);
  v43 = 0;
  type metadata accessor for CTLine(0);
  v12 = v11;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v10, &v43, v11);

  v13 = (double *)_swiftEmptyArrayStorage;
  if (v43)
    v14 = v43;
  else
    v14 = (uint64_t)_swiftEmptyArrayStorage;
  v15 = CTFrameGetLines((CTFrameRef)v8);
  v43 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v43, v12);

  if (v43)
    v16 = v43;
  else
    v16 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
    goto LABEL_51;
  v17 = *(CGPoint ***)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v16 = v8;
    v8 = sub_1002AACC8(v17, (const __CTFrame *)v16);

    if ((unint64_t)v14 >> 62)
      break;
    v18 = *(char **)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v18)
      goto LABEL_59;
LABEL_11:
    v41 = v14 & 0xC000000000000001;
    if ((v14 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v19 = (const __CTLine *)*(id *)(v14 + 32);
        goto LABEL_14;
      }
      __break(1u);
LABEL_65:
      v16 = (uint64_t)sub_1002AA974(0, *(_QWORD *)(v16 + 16) + 1, 1, (_QWORD *)v16);
      goto LABEL_21;
    }
    while (1)
    {
      v19 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_14:
      v20 = v19;
      v13 = (double *)v8[2];
      if (!v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_60;
      }
      v7 = v8[4];
      v6 = *((double *)v8 + 5);
      if ((v9 & 1) != 0)
        v21 = 32;
      else
        v21 = 0;
      BoundsWithOptions = CTLineGetBoundsWithOptions(v19, v21);
      width = BoundsWithOptions.size.width;
      height = BoundsWithOptions.size.height;
      if ((a1 & 1) == 0)
        v6 = 0.0;
      v3 = v20;
      v16 = (uint64_t)_swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        goto LABEL_65;
LABEL_21:
      v23 = *(_QWORD *)(v16 + 16);
      v22 = *(_QWORD *)(v16 + 24);
      if (v23 >= v22 >> 1)
        v16 = (uint64_t)sub_1002AA974((_QWORD *)(v22 > 1), v23 + 1, 1, (_QWORD *)v16);
      *(_QWORD *)(v16 + 16) = v23 + 1;
      v24 = (CGFloat *)(v16 + 40 * v23);
      *((_QWORD *)v24 + 4) = v3;
      *((_QWORD *)v24 + 5) = v7;
      v24[6] = 0.0;
      v24[7] = width;
      v24[8] = height;

      if (v18 == (char *)1)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
      if (v41)
      {
        v25 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v14);
        goto LABEL_30;
      }
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
        break;
LABEL_62:
      __break(1u);
    }
    v25 = (const __CTLine *)*(id *)(v14 + 40);
LABEL_30:
    v3 = v25;
    v40 = (char *)v13 - 1;
    if (v13 == (double *)1)
    {
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_61;
    }
    v26 = 0;
    if ((v9 & 1) != 0)
      v9 = 32;
    else
      v9 = 0;
    v13 = (double *)(v8 + 7);
    v27 = v18 - 2;
    v7 = 0;
    v28 = 0.0;
    while (v26 + 1 < (char *)v8[2])
    {
      v30 = *((_QWORD *)v13 - 1);
      v31 = *v13;
      v45 = CTLineGetBoundsWithOptions(v3, v9);
      width = v45.size.width;
      height = v45.size.height;
      v32 = v28 + v6 - v31;
      if ((a1 & 1) != 0)
      {
        v6 = v31;
        v28 = v32;
        v33 = v32;
      }
      else
      {
        v33 = 0.0;
      }
      v18 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (uint64_t)sub_1002AA974(0, *(_QWORD *)(v16 + 16) + 1, 1, (_QWORD *)v16);
      v35 = *(_QWORD *)(v16 + 16);
      v34 = *(_QWORD *)(v16 + 24);
      if (v35 >= v34 >> 1)
        v16 = (uint64_t)sub_1002AA974((_QWORD *)(v34 > 1), v35 + 1, 1, (_QWORD *)v16);
      *(_QWORD *)(v16 + 16) = v35 + 1;
      v36 = v16 + 40 * v35;
      *(_QWORD *)(v36 + 32) = v18;
      *(_QWORD *)(v36 + 40) = v30;
      *(double *)(v36 + 48) = v33;
      *(CGFloat *)(v36 + 56) = width;
      *(CGFloat *)(v36 + 64) = height;

      if (v27 == v26)
        goto LABEL_24;
      v37 = v26 + 2;
      if (v41)
      {
        v29 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v14);
      }
      else
      {
        if ((unint64_t)v37 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_62;
        v29 = (const __CTLine *)*(id *)(v14 + 8 * (_QWORD)v26 + 48);
      }
      v3 = v29;
      ++v26;
      v13 += 2;
      if (v40 == v26)
        goto LABEL_31;
    }
    __break(1u);
LABEL_51:
    if (v16 < 0)
      v38 = v16;
    else
      v38 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v17 = (CGPoint **)_CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
  }
  if (v14 < 0)
    v16 = v14;
  else
    v16 = v14 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = (char *)_CocoaArrayWrapper.endIndex.getter(v16);
  if (v18)
    goto LABEL_11;
LABEL_59:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_60:
  v16 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_61:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

Swift::Void __swiftcall CTLineRef.draw(in:)(CGContextRef in)
{
  const __CTLine *v1;

  CTLineDraw(v1, in);
}

_QWORD *CTLineRef.glyphRuns.getter()
{
  return sub_1002A96B0((uint64_t (*)(uint64_t))&CTLineGetGlyphRuns, (uint64_t (*)(_QWORD))type metadata accessor for CTRun);
}

_QWORD *sub_1002A96B0(uint64_t (*a1)(uint64_t), uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (id)a1(v2);
  v7 = 0;
  v5 = a2(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v4, &v7, v5);

  if (v7)
    return (_QWORD *)v7;
  else
    return _swiftEmptyArrayStorage;
}

CFIndex CTLineRef.glyphCount.getter()
{
  const __CTLine *v0;

  return CTLineGetGlyphCount(v0);
}

CFIndex CTLineRef.cfStringRange.getter()
{
  const __CTLine *v0;

  return CTLineGetStringRange(v0).location;
}

CGFloat CTLineRef.offset(stringIndex:)(CFIndex charIndex)
{
  const __CTLine *v1;

  return CTLineGetOffsetForStringIndex(v1, charIndex, 0);
}

__C::_NSRange __swiftcall CTRunRef.convertToGlyphRange(textRange:)(__C::_NSRange textRange)
{
  const __CTRun *v1;
  const __CTRun *v2;
  Swift::Int length;
  Swift::Int location;
  char Status;
  Swift::Int GlyphCount;
  Swift::Int v7;
  Swift::Int v8;
  const __CTRun *v9;
  _QWORD *v10;
  const __CTRun *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  Swift::Int v17;
  BOOL v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  __C::_NSRange result;
  CFRange v25;
  CFRange v26;

  v2 = v1;
  length = textRange.length;
  location = textRange.location;
  Status = CTRunGetStatus(v2);
  GlyphCount = CTRunGetGlyphCount(v2);
  v8 = GlyphCount;
  if ((Status & 1) == 0)
  {
    if ((GlyphCount & 0x8000000000000000) == 0)
    {
      v9 = v2;
      if (v8)
      {
        v10 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v8, &type metadata for Int);
        v10[2] = v8;
      }
      else
      {
        v10 = _swiftEmptyArrayStorage;
      }
      v25.location = 0;
      v25.length = 0;
      CTRunGetStringIndices(v9, v25, v10 + 4);
      GlyphCount = CTRunGetGlyphCount(v9);
      if (v8 >= GlyphCount)
      {
        v10[2] = GlyphCount;

        v13 = v10[2];
        if (!v13)
          goto LABEL_31;
        goto LABEL_15;
      }
      goto LABEL_35;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (GlyphCount < 0)
    goto LABEL_34;
  v11 = v2;
  if (v8)
  {
    v12 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v8, &type metadata for Int);
    v12[2] = v8;
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  v26.location = 0;
  v26.length = 0;
  CTRunGetStringIndices(v11, v26, v12 + 4);
  GlyphCount = CTRunGetGlyphCount(v11);
  if (v8 < GlyphCount)
    goto LABEL_36;
  v12[2] = GlyphCount;

  GlyphCount = (Swift::Int)sub_1002A9954((char *)v12);
  v10 = (_QWORD *)GlyphCount;
  v13 = *(_QWORD *)(GlyphCount + 16);
  if (!v13)
    goto LABEL_31;
LABEL_15:
  v14 = v10[4];
  if (v14 != location)
  {
    v15 = 0;
    while (v13 - 1 != v15)
    {
      v16 = v10[v15++ + 5];
      if (v16 == location)
        goto LABEL_20;
    }
    goto LABEL_31;
  }
  v15 = 0;
LABEL_20:
  v17 = location + length;
  if (__OFADD__(location, length))
    goto LABEL_37;
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v14 != v19)
  {
    v20 = 0;
    v21 = v13 - 1;
    while (v21 != v20)
    {
      v22 = v10[v20++ + 5];
      if (v22 == v19)
        goto LABEL_27;
    }
    goto LABEL_31;
  }
  v20 = 0;
LABEL_27:
  GlyphCount = swift_bridgeObjectRelease();
  v23 = v20 - v15;
  if (__OFSUB__(v20, v15))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v7 = v23 + 1;
  if (!__OFADD__(v23, 1))
    goto LABEL_32;
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  v15 = 0;
  v7 = 0;
LABEL_32:
  GlyphCount = v15;
LABEL_40:
  result.length = v7;
  result.location = GlyphCount;
  return result;
}

uint64_t CTRunRef.status.getter()
{
  const __CTRun *v0;

  return CTRunGetStatus(v0);
}

CFIndex CTRunRef.stringIndices.getter()
{
  return sub_1002A9CA4((uint64_t)&type metadata for Int, (void (*)(const __CTRun *, _QWORD, _QWORD, _QWORD *))&_CTRunGetStringIndices);
}

char *sub_1002A9954(char *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t)result;
  v2 = *((_QWORD *)result + 2);
  if (v2 < 2)
    return (char *)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
    v8 = *(_QWORD *)(v1 + 8 * i);
    result = (char *)swift_isUniquelyReferenced_nonNull_native(v1);
    if ((result & 1) == 0)
    {
      result = sub_1002C3C0C(v1);
      v1 = (uint64_t)result;
    }
    *(_QWORD *)(v1 + 8 * v3 + 32) = v8;
    *(_QWORD *)(v1 + 8 * i) = v7;
LABEL_5:
    if (v4 == ++v3)
      return (char *)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1002A9A0C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v5 = *(id *)(a2 + 32);
    }
    v6 = v5;
    sub_1002AB07C();
    v7 = static NSObject.== infix(_:_:)(v6, v3);

    if ((v7 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      v8 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v8 == v4)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = static NSObject.== infix(_:_:)(v10, v3);

      if ((v12 & 1) != 0)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease();
  }
  return 0;
}

Swift::Void __swiftcall CTRunRef.draw(in:range:)(CGContextRef in, __C::_NSRange range)
{
  const __CTRun *v2;

  CTRunDraw(v2, in, (CFRange)range);
}

double CTRunRef.typographicBounds(range:)(CFRange range)
{
  const __CTRun *v1;

  return CTRunGetTypographicBounds(v1, range, 0, 0, 0);
}

double CTRunRef.typographicBounds(forGlyphAtIndex:)(CFRange range)
{
  const __CTRun *v1;
  CFRange v3;

  v3.location = range.location;
  v3.length = 1;
  return CTRunGetTypographicBounds(v1, v3, 0, 0, 0);
}

CFIndex CTRunRef.cfStringRange.getter()
{
  const __CTRun *v0;

  return CTRunGetStringRange(v0).location;
}

CFIndex CTRunRef.positions.getter()
{
  const __CTRun *v0;
  CFIndex result;
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  const __CTRun *v5;
  CGPoint *v6;
  const __CTRun *v7;
  CFRange v8;

  result = CTRunGetGlyphCount(v0);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    if (result)
    {
      _s3__C7CGPointVMa_0(0);
      v4 = v3;
      v5 = v0;
      v6 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      *(_QWORD *)&v6[1].x = v2;
    }
    else
    {
      v7 = v0;
      v6 = (CGPoint *)_swiftEmptyArrayStorage;
    }
    v8.location = 0;
    v8.length = 0;
    CTRunGetPositions(v0, v8, v6 + 2);
    result = CTRunGetGlyphCount(v0);
    if (v2 >= result)
    {
      *(_QWORD *)&v6[1].x = result;

      return (CFIndex)v6;
    }
  }
  __break(1u);
  return result;
}

CFIndex CTRunRef.glyphCount.getter()
{
  const __CTRun *v0;

  return CTRunGetGlyphCount(v0);
}

CFIndex CTRunRef.glyphs.getter()
{
  return sub_1002A9CA4((uint64_t)&type metadata for UInt16, (void (*)(const __CTRun *, _QWORD, _QWORD, _QWORD *))&CTRunGetGlyphs);
}

CFIndex sub_1002A9CA4(uint64_t a1, void (*a2)(const __CTRun *, _QWORD, _QWORD, _QWORD *))
{
  const __CTRun *v2;
  CFIndex result;
  CFIndex v6;
  const __CTRun *v7;
  _QWORD *v8;

  result = CTRunGetGlyphCount(v2);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = v2;
    if (v6)
    {
      v8 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v6, a1);
      v8[2] = v6;
    }
    else
    {
      v8 = _swiftEmptyArrayStorage;
    }
    a2(v7, 0, 0, v8 + 4);
    result = CTRunGetGlyphCount(v7);
    if (v6 >= result)
    {
      v8[2] = result;

      return (CFIndex)v8;
    }
  }
  __break(1u);
  return result;
}

void *CTLabel.Frame.colorOverride.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
  swift_beginAccess(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CTLabel.Frame.colorOverride.setter(void *a1)
{
  char *v1;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v3 = (void **)&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  swift_beginAccess(&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride], v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  objc_msgSend(v1, "setNeedsDisplay");
}

id (*CTLabel.Frame.colorOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride, a1, 33, 0);
  return sub_1002A9E48;
}

id sub_1002A9E48(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 24), "setNeedsDisplay");
  return result;
}

id CTLabel.Frame.__allocating_init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  objc_class *v4;
  char *v9;
  void **v10;
  double *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  objc_super v17;
  _BYTE v18[24];

  v9 = (char *)objc_allocWithZone(v4);
  v10 = (void **)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *v10 = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  v11 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *v11 = a3;
  v11[1] = a4;
  swift_beginAccess(v10, v18, 1, 0);
  v12 = *v10;
  *v10 = a2;
  v13 = a1;
  v14 = a2;

  v17.receiver = v9;
  v17.super_class = v4;
  v15 = objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return v15;
}

id CTLabel.Frame.init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  char *v4;
  void **v7;
  double *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  objc_super v14;
  _BYTE v15[24];

  v7 = (void **)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *v7 = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *v8 = a3;
  v8[1] = a4;
  swift_beginAccess(v7, v15, 1, 0);
  v9 = *v7;
  *v7 = a2;
  v10 = a1;
  v11 = a2;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CTLabel.Frame();
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return v12;
}

double CTLabel.Frame.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize);
}

void CTLabel.Frame.draw(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  CGContext *v9;
  CGContext *v10;
  id *v11;
  id v12;
  CGColor *v13;
  _BYTE v14[24];
  CGRect v15;

  v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    v10 = v9;
    CGContextTranslateCTM(v9, 0.0, *(CGFloat *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize + 8));
    CGContextScaleCTM(v10, 1.0, -1.0);
    CTFrameDraw(*(CTFrameRef *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame), v10);
    v11 = (id *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
    swift_beginAccess(v11, v14, 0, 0);
    if (*v11)
    {
      v12 = *v11;
      CGContextSetBlendMode(v10, kCGBlendModeOverlay);
      v13 = (CGColor *)objc_msgSend(v12, "CGColor");
      CGContextSetFillColorWithColor(v10, v13);

      v15.origin.x = a1;
      v15.origin.y = a2;
      v15.size.width = a3;
      v15.size.height = a4;
      CGContextFillRect(v10, v15);

    }
  }
}

void CTLabel.Frame.init(frame:)()
{
  sub_1002AA910((uint64_t)"MusicUtilities.Frame", 20);
}

id CTLabel.Frame.__deallocating_deinit()
{
  return sub_10022EE30(type metadata accessor for CTLabel.Frame);
}

id CTLabel.Line.__allocating_init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  objc_class *v4;
  _BYTE *v9;
  double *v10;
  id v11;
  id v12;
  objc_super v14;

  v9 = objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  v10 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *v10 = a3;
  v10[1] = a4;
  v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v14.receiver = v9;
  v14.super_class = v4;
  v11 = a1;
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, a3, a4);
  objc_msgSend(v12, "setOpaque:", 0, v14.receiver, v14.super_class);

  return v12;
}

id CTLabel.Line.init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  _BYTE *v4;
  double *v8;
  id v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *v8 = a3;
  v8[1] = a4;
  v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for CTLabel.Line();
  v9 = a1;
  v10 = objc_msgSendSuper2(&v12, "initWithFrame:", 0.0, 0.0, a3, a4);
  objc_msgSend(v10, "setOpaque:", 0, v12.receiver, v12.super_class);

  return v10;
}

void CTLabel.Line.init(frame:)()
{
  sub_1002AA910((uint64_t)"MusicUtilities.Line", 19);
}

id CTLabel.Line.__deallocating_deinit()
{
  return sub_10022EE30(type metadata accessor for CTLabel.Line);
}

id CTLabel.Run.__allocating_init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  objc_class *v5;
  char *v11;
  double *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  v12 = (double *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *v12 = a4;
  v12[1] = a5;
  v13 = &v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id CTLabel.Run.init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  char *v5;
  double *v6;
  char *v7;
  objc_super v9;

  *(_QWORD *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  v6 = (double *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *v6 = a4;
  v6[1] = a5;
  v7 = &v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for CTLabel.Run();
  return objc_msgSendSuper2(&v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

double CTLabel.Run.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size);
}

void CTLabel.Run.init(frame:)()
{
  sub_1002AA910((uint64_t)"MusicUtilities.Run", 18);
}

id CTLabel.Run.__deallocating_deinit()
{
  return sub_10022EE30(type metadata accessor for CTLabel.Run);
}

id CTLabel.Glyph.__allocating_init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  objc_class *v3;
  char *v7;
  double *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  *(_WORD *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  v8 = (double *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *v8 = a2;
  v8[1] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id CTLabel.Glyph.init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  char *v3;
  double *v4;
  objc_super v6;

  *(_WORD *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  v4 = (double *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *v4 = a2;
  v4[1] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for CTLabel.Glyph();
  return objc_msgSendSuper2(&v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

double CTLabel.Glyph.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size);
}

id UIStackView.SpacerView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

void CTLabel.Glyph.init(frame:)()
{
  sub_1002AA910((uint64_t)"MusicUtilities.Glyph", 20);
}

void sub_1002AA910(uint64_t a1, uint64_t a2)
{
  _swift_stdlib_reportUnimplementedInitializer(a1, a2, "init(frame:)", 12, 0);
  __break(1u);
}

void sub_1002AA940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(frame:)", 12, 0);
  __break(1u);
}

id CTLabel.Glyph.__deallocating_deinit()
{
  return sub_10022EE30(type metadata accessor for CTLabel.Glyph);
}

_QWORD *sub_1002AA974(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100556DB0);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100556DB8);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002AAAA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100556DA8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002AABA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100556D90);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_1002AACA0(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1000DFA94(a1, a2, a3, a4, &qword_100556D88, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

size_t sub_1002AACB4(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1000DFA94(a1, a2, a3, a4, &qword_100556DC0, _s9_ObserverC18HandlerAssociationVMa);
}

CGPoint **sub_1002AACC8(CGPoint **result, const __CTFrame *a2)
{
  uint64_t v2;
  CGPoint *v4;
  uint64_t v5;
  CGPoint *v6;
  CGPoint *v7[2];
  CGFloat v8;

  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = (CGPoint *)result;
  if (result)
  {
    _s3__C7CGPointVMa_0(0);
    v6 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)(v4, v5);
    *(_QWORD *)&v6[1].x = v4;
  }
  else
  {
    v6 = (CGPoint *)_swiftEmptyArrayStorage;
  }
  v7[1] = v4;
  v8 = 0.0;
  v7[0] = v6 + 2;
  result = sub_1002A8D64(v7, (uint64_t *)&v8, a2);
  if (v2)
  {
    if (*(uint64_t *)&v8 <= (uint64_t)v4)
    {
      v6[1].x = v8;
      swift_bridgeObjectRelease();
      return (CGPoint **)v6;
    }
    goto LABEL_12;
  }
  if (*(uint64_t *)&v8 <= (uint64_t)v4)
  {
    v6[1].x = v8;
    return (CGPoint **)v6;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CTLabel.Frame()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel5Frame);
}

uint64_t type metadata accessor for CTLabel.Line()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel4Line);
}

void _s14MusicUtilities7CTLabelO4LineC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  CTLineBoundsOptions v2;
  double y;
  double v4;
  double v5;
  CGContext *c;
  CGRect BoundsWithOptions;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds))
      v2 = 32;
    else
      v2 = 0;
    BoundsWithOptions = CTLineGetBoundsWithOptions((CTLineRef)*(_QWORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), v2);
    y = BoundsWithOptions.origin.y;
    v4 = CGContextRef.textPosition.getter((__n128)BoundsWithOptions.origin);
    CGContextRef.textPosition.setter(v4, v5 - y);
    CTLineDraw(*(CTLineRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), c);

  }
}

uint64_t type metadata accessor for CTLabel.Run()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel3Run);
}

void _s14MusicUtilities7CTLabelO3RunC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  CGContext *c;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    CTRunDraw(*(CTRunRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun), c, *(CFRange *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range));

  }
}

uint64_t type metadata accessor for CTLabel.Glyph()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel5Glyph);
}

CGContext *_s14MusicUtilities7CTLabelO5GlyphC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *result;
  CGContext *v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  uint64_t v5;
  Swift::OpaquePointer v6;

  result = UIGraphicsGetCurrentContext();
  if (result)
  {
    v2 = result;
    CGContextTranslateCTM(result, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size + 8));
    CGContextScaleCTM(v2, 1.0, -1.0);
    v3 = sub_10000B4C8(&qword_100556D98);
    v4._rawValue = (void *)swift_allocObject(v3, 34, 7);
    *((_OWORD *)v4._rawValue + 1) = xmmword_100424BB0;
    *((_WORD *)v4._rawValue + 16) = *(_WORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph);
    v5 = sub_10000B4C8(&qword_100556DA0);
    v6._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v6._rawValue + 1) = xmmword_100424BB0;
    *((_QWORD *)v6._rawValue + 4) = 0;
    *((_QWORD *)v6._rawValue + 5) = 0;
    CGContextRef.showGlyphs(_:at:)(v4, v6);

    swift_bridgeObjectRelease();
    return (CGContext *)swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for CTLabel()
{
  return &type metadata for CTLabel;
}

unint64_t sub_1002AB07C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005572E0;
  if (!qword_1005572E0)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005572E0);
  }
  return result;
}

uint64_t static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void **aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
    return a1();
  v13 = sub_10029F70C();
  v21 = (void *)static OS_dispatch_queue.main.getter(v13, v14, v15, v16, v17, v18, v19, v20, aBlock, v29, v30, v31, v32, v33, v34);
  v32 = a1;
  v33 = a2;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_10015F6F8;
  v31 = &unk_100516808;
  v22 = _Block_copy(&aBlock);
  v23 = v33;
  swift_retain(a2);
  swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v25 = sub_1002A09D0();
  v26 = sub_10000B4C8((uint64_t *)&unk_100557320);
  v27 = sub_10029F760();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v26, v27, v4, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002AB290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002AB2A0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t DeinitTriggeredClosure.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t DeinitTriggeredClosure.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t DeinitTriggeredClosure.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = *(void (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2();
  swift_release(v3);
  return v1;
}

uint64_t DeinitTriggeredClosure.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = *(void (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2();
  swift_release(v3);
  return swift_deallocClassInstance(v1, 32, 7);
}

void static OS_dispatch_queue.syncOnMainIfNeeded(_:)(void (*a1)(void), uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v17[5];
  uint64_t v18;

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    a1();
  }
  else
  {
    v4 = sub_10029F70C();
    v12 = static OS_dispatch_queue.main.getter(v4, v5, v6, v7, v8, v9, v10, v11);
    v13 = swift_allocObject(&unk_100516840, 32, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    v17[4] = sub_100150C04;
    v18 = v13;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100185F2C;
    v17[3] = &unk_100516858;
    v14 = _Block_copy(v17);
    v15 = v18;
    swift_retain(v13);
    swift_release(v15);
    dispatch_sync((dispatch_queue_t)v12, v14);

    _Block_release(v14);
    LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v13, "", 135, 40, 46, 1, v16);
    swift_release(v13);
    if ((v12 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_1002AB484()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void OS_dispatch_queue.asyncAfter(_:block:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTime(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v26 - v18;
  static DispatchTime.now()(v17);
  + infix(_:_:)(v16, a3);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  aBlock[4] = a1;
  v30 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015F6F8;
  aBlock[3] = &unk_100516880;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v22);
  v28 = _swiftEmptyArrayStorage;
  v23 = sub_1002A09D0();
  v24 = sub_10000B4C8((uint64_t *)&unk_100557320);
  v25 = sub_10029F760();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v6, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  v20(v19, v12);
  swift_release(v30);
}

double OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  double result;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = a1;
  v26 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015F6F8;
  aBlock[3] = &unk_1005168A8;
  v14 = _Block_copy(aBlock);
  v24 = _swiftEmptyArrayStorage;
  v15 = sub_1002A09D0();
  swift_retain(a2);
  v16 = sub_10000B4C8((uint64_t *)&unk_100557320);
  v17 = sub_10029F760();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v11, v15);
  v18 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = DispatchWorkItem.init(flags:block:)(v13, v14);
  swift_release(v26);
  static DispatchTime.now()(v20);
  + infix(_:_:)(v8, 2.0);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v19);
  v21(v10, v4);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

uint64_t OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v12 - v8;
  static DispatchTime.now()(v7);
  + infix(_:_:)(v6, 2.0);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v9, a1);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v2);
}

uint64_t static OS_dispatch_queue.UIFeedbackDeadline.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()(v2);
  + infix(_:_:)(v4, 2.0);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t type metadata accessor for DeinitTriggeredClosure()
{
  return objc_opt_self(_TtC14MusicUtilities22DeinitTriggeredClosure);
}

void NSFileManager.createDirectoryIfNeeded(at:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  unsigned int v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  NSURL *v10;
  NSURL *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  NSURL *v15;
  NSURL *v16;
  uint64_t v17;
  NSURL *v18;

  v1 = v0;
  URL.path.getter();
  v3 = v2;
  LOBYTE(v18) = 0;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v0, "fileExistsAtPath:isDirectory:", v4, &v18);
  swift_bridgeObjectRelease(v3);

  if (v5)
  {
    if ((v18 & 1) != 0)
      return;
    URL._bridgeToObjectiveC()((NSURL *)v18);
    v8 = v7;
    v18 = 0;
    v9 = objc_msgSend(v0, "removeItemAtURL:error:", v7, &v18);

    v10 = v18;
    if (!v9)
      goto LABEL_7;
    v11 = v18;
  }
  URL._bridgeToObjectiveC()(v6);
  v13 = v12;
  v18 = 0;
  v14 = objc_msgSend(v1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v18);

  v10 = v18;
  if (v14)
  {
    v15 = v18;
    return;
  }
LABEL_7:
  v16 = v10;
  _convertNSErrorToError(_:)(v10);

  swift_willThrow(v17);
}

Swift::tuple_exists_Bool_isDirectory_Bool __swiftcall NSFileManager.directoryExists(at:)(Swift::String at)
{
  void *v1;
  NSString v2;
  unsigned __int8 v3;
  Swift::Bool v4;
  Swift::Bool v5;
  Swift::tuple_exists_Bool_isDirectory_Bool result;
  char v7;

  v7 = 0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", v2, &v7);

  v5 = v3;
  result.isDirectory = v4;
  result.exists = v5;
  return result;
}

uint64_t NSFileManager.groupCacheURL(for:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  id v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v2 = v1;
  v4 = sub_10000B4C8(&qword_100556E68);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v2, "containerURLForSecurityApplicationGroupIdentifier:", v14);

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 0, 1, v10);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 1, 1, v10);
  }
  sub_1002ABE00((uint64_t)v7, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1002ABE48((uint64_t)v9);
    v17 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7972617262694CLL, 0xE700000000000000, 1);
    v18 = *(void (**)(char *, uint64_t))(v11 + 8);
    v18(v9, v10);
    URL.appendingPathComponent(_:isDirectory:)(0x736568636143, 0xE600000000000000, 1);
    v18(v13, v10);
    v17 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(a1, v17, 1, v10);
}

uint64_t sub_1002ABE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100556E68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ABE48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100556E68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002ABE8C()
{
  unint64_t result;

  result = qword_100556E70;
  if (!qword_100556E70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NSFileManager.Failure, &type metadata for NSFileManager.Failure);
    atomic_store(result, (unint64_t *)&qword_100556E70);
  }
  return result;
}

uint64_t _s7FailureOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002ABF14 + 4 * asc_100436FE8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002ABF34 + 4 * byte_100436FED[v4]))();
}

_BYTE *sub_1002ABF14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002ABF34(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002ABF3C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002ABF44(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002ABF4C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002ABF54(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NSFileManager.Failure()
{
  return &type metadata for NSFileManager.Failure;
}

uint64_t String.sha256Data.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for SHA256Digest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v13 = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v15 >> 60 != 15)
  {
    sub_10003A5E4(v13, v15);
    Data.Digest.SHA256.getter(v13, v15);
    sub_10009FCF0(v13, v15);
    v23 = v4;
    v16 = sub_10001254C(&qword_100556E78, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
    v24 = v16;
    v17 = sub_1000C16E0(v22);
    (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v17, v7, v4);
    sub_10000D900(v22, v23);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v21, sub_1002302B8, 0, &type metadata for Data._Representation, v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v18 = v21;
    sub_100011758(v22);
    sub_10009FCF0(v13, v15);
    return v18;
  }
  return v13;
}

uint64_t Data.digest.getter(uint64_t a1, unint64_t a2)
{
  sub_10003A5E4(a1, a2);
  return a1;
}

void Data.Digest.SHA256.getter(uint64_t a1, unint64_t a2)
{
  sub_1002AC280(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, &qword_100556E80, (uint64_t)&protocol conformance descriptor for SHA256);
}

void Data.Digest.MD5.getter(uint64_t a1, unint64_t a2)
{
  sub_1002AC280(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.MD5, &qword_100556E88, (uint64_t)&protocol conformance descriptor for Insecure.MD5);
}

void Data.Digest.SHA512.getter(uint64_t a1, unint64_t a2)
{
  sub_1002AC280(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SHA512, &qword_100556E90, (uint64_t)&protocol conformance descriptor for SHA512);
}

void sub_1002AC280(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a3(0);
  __chkstk_darwin(v10);
  sub_10003A5E4(a1, a2);
  v11 = sub_10001254C(a4, a3, a5);
  dispatch thunk of HashFunction.init()(v10, v11);
  __asm { BR              X9 }
}

uint64_t sub_1002AC350()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 112) = v1;
  *(_WORD *)(v5 - 104) = v0;
  *(_BYTE *)(v5 - 102) = BYTE2(v0);
  *(_BYTE *)(v5 - 101) = BYTE3(v0);
  *(_BYTE *)(v5 - 100) = BYTE4(v0);
  *(_BYTE *)(v5 - 99) = BYTE5(v0);
  dispatch thunk of HashFunction.update(bufferPointer:)(v5 - 112, v5 - 112 + BYTE6(v0), v2, v4);
  sub_10003A628(v1, v0);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 128) + 8))(v3, v2);
  return sub_10003A628(v1, v0);
}

uint64_t sub_1002AC528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = __DataStorage._bytes.getter();
  v13 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  v14 = __OFSUB__(a2, a1);
  v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = __DataStorage._length.getter();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = v13 + v17;
  if (v13)
    v19 = v18;
  else
    v19 = 0;
  v20 = a5(0);
  v21 = sub_10001254C(a6, a5, a7);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v13, v19, v20, v21);
}

uint64_t *_s6DigestVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10003A5E4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s6DigestVwxx(uint64_t a1)
{
  return sub_10003A628(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s6DigestVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10003A5E4(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10003A628(v5, v6);
  return a1;
}

uint64_t *_s6DigestVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10003A628(v3, v4);
  return a1;
}

uint64_t _s6DigestVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s6DigestVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Digest()
{
  return &type metadata for Data.Digest;
}

uint64_t sub_1002AC774(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (a5 >= 1)
    v5 = a4;
  else
    v5 = 0;
  if (!a2)
  {
LABEL_19:
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v5;
    *(_BYTE *)(result + 24) = a5 < 1;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = a4 + a5;
    v7 = __OFADD__(a4, a5);
    if (v5 > v6)
      v6 = v5;
    if (a5 >= 1)
    {
      v8 = 0;
      v9 = v6 - v5;
      while (!v7)
      {
        if (v9 == v8)
        {
          v5 += v8;
          a3 = v9;
          goto LABEL_20;
        }
        *(_QWORD *)(a2 + 8 * v8) = v5 + v8;
        if (a3 - 1 == v8)
        {
          v5 += v8 + 1;
          goto LABEL_20;
        }
        ++v8;
      }
      __break(1u);
      goto LABEL_24;
    }
    v5 = 0;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t Array.append(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v11(v8);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    Array.append(_:)(v10, a4);
  }
  return v12 & 1;
}

uint64_t Array.append<A>(contentsOf:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  char v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a5 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14(v11);
  if ((v15 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a5);
    Array.append<A>(contentsOf:)(v13, a4, a5, a6);
  }
  return v15 & 1;
}

uint64_t Array.item(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v10 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v10);
  Collection.firstIndex(where:)(&v14, a1, a2, v10, WitnessTable);
  if ((v15 & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    Array.subscript.getter(v14, a3, a4);
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v12, 1, a4);
}

Swift::Void __swiftcall Array.moveItem(at:to:)(Swift::Int at, Swift::Int to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(at);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v14 - v11;
  Array.remove(at:)(v10, v13);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  Array.insert(_:at:)(v9, to, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v8 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v8);
  RandomAccessCollection<>.indices.getter(&v15, v8, WitnessTable, &protocol witness table for Int);
  v14 = v15;
  v13 = a1;
  v10 = sub_10000B4C8(&qword_100556EA0);
  if ((Range.contains(_:)(&v13, v10) & 1) != 0)
  {
    Array.subscript.getter(a1, a2, a3);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[2] = a3;
  v4[3] = a1;
  return Array.inserting(separator:)((uint64_t)sub_1002ACC2C, (uint64_t)v4, a2, a3);
}

uint64_t sub_1002ACC2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, *(_QWORD *)(v1 + 24));
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[10];

  v5 = a3;
  result = Array.count.getter(a3, a4);
  if (result < 2)
  {
    swift_bridgeObjectRetain();
    return v5;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    v12[8] = 0;
    v12[9] = 2 * result - 1;
    __chkstk_darwin(result);
    v12[2] = a4;
    v12[3] = v5;
    v12[4] = a1;
    v12[5] = a2;
    v9 = sub_10000B4C8(&qword_100556EA0);
    v10 = sub_1002AD070();
    return sub_1002ACD80((void (*)(char *, char *))sub_1002ACD38, (uint64_t)v12, v9, a4, (uint64_t)&type metadata for Never, v10, (uint64_t)&protocol witness table for Never, v11);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002ACD38(_QWORD *a1)
{
  uint64_t v1;

  if ((*a1 & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 32))();
  else
    return Array.subscript.getter(*a1 / 2, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1002ACD80(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v40 = a5;
  v41 = a8;
  v48 = a1;
  v49 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v18 = (char *)&v39 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v42 = *(_QWORD *)(v21 - 8);
  v43 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v39 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v46 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v54 = ContiguousArray.init()(v26);
  v44 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v47 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v45 = v20;
    while (v29)
    {
      v51 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v46;
      v31(v18);
      v30(v53, 0);
      v34 = v23;
      v35 = v18;
      v36 = v45;
      v37 = v52;
      v48(v35, v50);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        v38 = swift_release(v54);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v39 + 32))(v41, v50, v40, v38);
      }
      v52 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v44);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v51 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        return v54;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1002AD070()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100556EA8;
  if (!qword_100556EA8)
  {
    v1 = sub_100011650(&qword_100556EA0);
    v2[0] = &protocol witness table for Int;
    v2[1] = sub_1002AD0DC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> Range<A>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100556EA8);
  }
  return result;
}

unint64_t sub_1002AD0DC()
{
  unint64_t result;

  result = qword_100556EB0;
  if (!qword_100556EB0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100556EB0);
  }
  return result;
}

uint64_t Set.insert(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  char v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v13(v10) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    v14 = Set.insert(_:)(a1, v12, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, 1, 1, v8);
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t Set<>.first<A>(alike:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t WitnessTable;
  _QWORD v10[10];

  v10[9] = a2;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a7;
  v10[7] = a1;
  v7 = type metadata accessor for Set(0, a3, a5);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for Set<A>, v7);
  return Sequence.first(where:)(sub_1002AD3D4, v10, v7, WitnessTable);
}

uint64_t sub_1002AD28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v21 - v15;
  dispatch thunk of Identifiable.id.getter(a3, a6);
  dispatch thunk of Identifiable.id.getter(a4, v22);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v14, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, AssociatedTypeWitness);
  v19(v16, AssociatedTypeWitness);
  return v18 & 1;
}

uint64_t sub_1002AD3D4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002AD28C(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]) & 1;
}

uint64_t NSBundle.displayName.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = objc_msgSend(v0, "localizedInfoDictionary");
  if (!v1)
  {
    v8 = 0u;
    v9 = 0u;
    goto LABEL_11;
  }
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v3 + 16)
    || (v4 = sub_1002B2334(0xD000000000000013, 0x8000000100450780, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10013B5E0), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_1000760E0(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_11:
    sub_100011694((uint64_t)&v8, &qword_1005568B0);
    return 0;
  }
  if (swift_dynamicCast(&v7, &v8, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v7;
  else
    return 0;
}

uint64_t NSBundle.exportedTypeDeclarations.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForInfoDictionaryKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1002A1764((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10000B4C8(&qword_100556EB8);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_100011694((uint64_t)v7, &qword_1005568B0);
    return 0;
  }
}

uint64_t Comparable.clamp(to:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ClosedRange(0);
  return ClosedRange.clamp(_:)(v0, v1);
}

uint64_t ClosedRange.clamp(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 24);
  max<A>(_:_:)(v2);
  min<A>(_:_:)(v7, v2 + *(int *)(a2 + 36), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ClosedRange<>.scaledValue(relativeTo:relativeValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a5;
  v50 = a4;
  v44 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8);
  v11 = __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v43 - v12;
  v14 = __chkstk_darwin(v11);
  v46 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - v17;
  v19 = __chkstk_darwin(v16);
  v47 = (char *)&v43 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v43 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v43 - v24;
  v48 = a3;
  v49 = v7;
  v26 = a1 + *(int *)(a3 + 36);
  v27 = *(_QWORD *)(v7 + 8);
  v45 = a1;
  v28 = a1;
  v30 = v29;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v26, v28, v9, v27);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v9, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100435E88, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v32 = v13;
  v33 = v50;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v32, v9, v8);
  LOBYTE(v7) = dispatch thunk of static Comparable.> infix(_:_:)(v25, v23, v9, *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8));
  v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  v34(v23, v9);
  if ((v7 & 1) != 0)
  {
    v35 = v45;
    v36 = v27;
    v37 = v48;
    ClosedRange.clamp(_:)(v44, v48);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v23, v35, v9, v36);
    v38 = v47;
    dispatch thunk of static FloatingPoint./ infix(_:_:)(v18, v25, v9, v33);
    v34(v18, v9);
    v39 = *(int *)(v37 + 36);
    v40 = v52;
    v41 = v46;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v52 + v39, v52, v9, v36);
    dispatch thunk of static Numeric.* infix(_:_:)(v41, v38, v9, v49);
    v34(v41, v9);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v18, v40, v9, v36);
    v34(v18, v9);
    v34(v38, v9);
    v34(v23, v9);
    return ((uint64_t (*)(char *, uint64_t))v34)(v25, v9);
  }
  else
  {
    v34(v25, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v51, v52, v9);
  }
}

void Data.hexRepresentation.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002ADA78()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  sub_1002ADC6C((uint64_t)&v3, (uint64_t)&v3 + BYTE6(v1), v0, v1);
  sub_10003A628(v0, v1);
  if (v10)
    return v9;
  else
    return 0;
}

void sub_1002ADC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  __asm { BR              X9 }
}

uint64_t sub_1002ADCEC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  unint64_t v22;
  int8x16_t *v23;
  char *v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  int8x16x2_t v40;

  if (BYTE6(v4) + 0x4000000000000000 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v6 = swift_slowAlloc(2 * BYTE6(v4), -1);
  v7 = v6;
  if (!v5)
  {
    v8 = BYTE6(v4);
    goto LABEL_9;
  }
  if (v5 == 1)
  {
    LODWORD(v8) = HIDWORD(v3) - v3;
    if (!__OFSUB__(HIDWORD(v3), (_DWORD)v3))
    {
      v8 = (int)v8;
      goto LABEL_8;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    JUMPOUT(0x1002ADF04);
  }
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = __OFSUB__(v9, v10);
  v8 = v9 - v10;
  if (v11)
    goto LABEL_36;
LABEL_8:
  if (v8 < 0)
  {
LABEL_34:
    __break(1u);
    JUMPOUT(0x1002ADEF4);
  }
LABEL_9:
  if (v8)
  {
    v12 = v8 - 1;
    if ((unint64_t)(v8 - 1) >= 0x4000000000000000)
      v13 = 0x4000000000000000;
    else
      v13 = v8 - 1;
    if (v13 <= 0xF)
      goto LABEL_18;
    if (v12 >= 0x4000000000000000)
      v12 = 0x4000000000000000;
    if (v6 >= v12 + v2 + 1 || v6 + 2 * v12 + 2 <= v2)
    {
      v15 = v13 + 1;
      v16 = v15 & 0xF;
      if ((v15 & 0xF) == 0)
        v16 = 16;
      v14 = v15 - v16;
      v17.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
      v17.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
      v18.i64[0] = 0x5757575757575757;
      v18.i64[1] = 0x5757575757575757;
      v19.i64[0] = 0x3030303030303030;
      v19.i64[1] = 0x3030303030303030;
      v20.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v20.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v21.i64[0] = 0x909090909090909;
      v21.i64[1] = 0x909090909090909;
      v22 = v14;
      v23 = (int8x16_t *)v2;
      v24 = (char *)v6;
      do
      {
        v25 = *v23++;
        v26.i64[0] = 0x5757575757575757;
        v26.i64[1] = 0x5757575757575757;
        v27.i64[0] = 0x3030303030303030;
        v27.i64[1] = 0x3030303030303030;
        v40.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v25, v17), (int8x16_t)vsraq_n_u8(v26, (uint8x16_t)v25, 4uLL), (int8x16_t)vsraq_n_u8(v27, (uint8x16_t)v25, 4uLL));
        v28 = vandq_s8(v25, v20);
        v40.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v28, v21), vaddq_s8(v28, v18), vorrq_s8(v28, v19));
        vst2q_s8(v24, v40);
        v24 += 32;
        v22 -= 16;
      }
      while (v22);
    }
    else
    {
LABEL_18:
      v14 = 0;
    }
    v29 = v14 - 0x4000000000000000;
    v30 = (_BYTE *)(v6 + 2 * v14 + 1);
    v31 = v8 - v14;
    v32 = (unsigned __int8 *)(v2 + v14);
    while (v29)
    {
      v34 = *v32++;
      v33 = v34;
      v35 = (v34 >> 4) + 87;
      v36 = (v34 >> 4) | 0x30;
      if (v34 > 0x9F)
        LOBYTE(v36) = v35;
      *(v30 - 1) = v36;
      if ((v33 & 0xFu) <= 9)
        v37 = v33 & 0xF | 0x30;
      else
        v37 = (v33 & 0xF) + 87;
      *v30 = v37;
      v30 += 2;
      ++v29;
      if (!--v31)
        goto LABEL_31;
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_31:
  ((void (*)(void))static String.Encoding.utf8.getter)();
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))String.init(bytesNoCopy:length:encoding:freeWhenDone:))(v7, 2 * BYTE6(v4), v1, 1);
  *v0 = result;
  v0[1] = v39;
  return result;
}

uint64_t sub_1002ADF14()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_10029DAC0((uint64_t)&off_100515078);
  v1 = sub_10000B4C8(&qword_100556FD0);
  result = swift_arrayDestroy(&unk_100515098, 22, v1);
  static Data.Hexadecimal.hexToDecimalMapping = v0;
  return result;
}

uint64_t *Data.Hexadecimal.hexToDecimalMapping.unsafeMutableAddressor()
{
  if (qword_100556160 != -1)
    swift_once(&qword_100556160, sub_1002ADF14);
  return &static Data.Hexadecimal.hexToDecimalMapping;
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.getter()
{
  _BYTE v1[24];

  if (qword_100556160 != -1)
    swift_once(&qword_100556160, sub_1002ADF14);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v1, 0, 0);
  return swift_bridgeObjectRetain();
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.setter(uint64_t a1)
{
  _BYTE v3[24];

  if (qword_100556160 != -1)
    swift_once(&qword_100556160, sub_1002ADF14);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v3, 1, 0);
  static Data.Hexadecimal.hexToDecimalMapping = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Data.Hexadecimal.hexToDecimalMapping.modify(uint64_t a1))(_QWORD)
{
  if (qword_100556160 != -1)
    swift_once(&qword_100556160, sub_1002ADF14);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Data.init(hexString:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  uint64_t v5;
  __int16 v6;
  Swift::String_optional v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  _QWORD v14[3];
  __int128 v15;

  if ((String.count.getter(a1, a2) & 1) != 0)
  {
    v14[0] = 48;
    v14[1] = 0xE100000000000000;
    v4._countAndFlagsBits = a1;
    v4._object = a2;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  v5 = 0;
  LOBYTE(v6) = 0;
  v15 = xmmword_1004280B0;
  while (1)
  {
    v8 = String.Iterator.next()();
    if (!v8.value._object)
      break;
    if (qword_100556160 != -1)
      swift_once(&qword_100556160, sub_1002ADF14);
    swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v14, 32, 0);
    v9 = static Data.Hexadecimal.hexToDecimalMapping;
    if (!*(_QWORD *)(static Data.Hexadecimal.hexToDecimalMapping + 16)
      || (v10 = sub_1002B2334(v8.value._countAndFlagsBits, (uint64_t)v8.value._object, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10013B5E0), (v11 & 1) == 0))
    {
      swift_endAccess(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10003A628(v15, *((unint64_t *)&v15 + 1));
      return 0;
    }
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 56) + v10);
    swift_endAccess(v14);
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      if (((v12 + v6) & 0x100) == 0)
        __asm { BR              X11 }
      goto LABEL_18;
    }
    v6 = 16 * (v12 & 0xF) + v6;
    if ((v6 & 0x100) != 0)
      goto LABEL_17;
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1002AE38C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v0 = sub_10000B4C8(&qword_100556ED0);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.Identifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D924(v9, static Calendar.musicDefaultCalendar);
  v12 = sub_10000D78C(v7, (uint64_t)static Calendar.musicDefaultCalendar);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v3);
  Calendar.init(identifier:)(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  TimeZone.init(secondsFromGMT:)(0);
  v13 = type metadata accessor for TimeZone(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v2, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    Calendar.timeZone.setter(v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v11, v7);
  }
  return result;
}

uint64_t Calendar.musicDefaultCalendar.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_100556168 != -1)
    swift_once(&qword_100556168, sub_1002AE38C);
  v0 = type metadata accessor for Calendar(0);
  return sub_10000D78C(v0, (uint64_t)static Calendar.musicDefaultCalendar);
}

uint64_t static Calendar.musicDefaultCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100556168 != -1)
    swift_once(&qword_100556168, sub_1002AE38C);
  v2 = type metadata accessor for Calendar(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Calendar.musicDefaultCalendar);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id static NSDateFormatter.iso8601ExtendedDateFormatter.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  Class isa;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  Class v12;
  uint64_t v14;

  v0 = sub_10000B4C8(&qword_100556ED0);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, "setLocale:", isa);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setDateFormat:", v9);

  TimeZone.init(secondsFromGMT:)(0);
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) != 1)
  {
    v12 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  }
  objc_msgSend(v7, "setTimeZone:", v12);

  return v7;
}

id static NSDateFormatter.dayNameDateFormatter.getter()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setLocalizedDateFormatFromTemplate:", v1);

  return v0;
}

void sub_1002AE7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  Class isa;
  uint64_t v7;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v4, "setDateStyle:", 3);
  if (qword_100556168 != -1)
    swift_once(&qword_100556168, sub_1002AE38C);
  v5 = type metadata accessor for Calendar(0);
  sub_10000D78C(v5, (uint64_t)static Calendar.musicDefaultCalendar);
  Calendar.timeZone.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setTimeZone:", isa);

  static NSDateFormatter.releaseDateFormatter = (uint64_t)v4;
}

uint64_t *NSDateFormatter.releaseDateFormatter.unsafeMutableAddressor()
{
  if (qword_100556170 != -1)
    swift_once(&qword_100556170, sub_1002AE7E8);
  return &static NSDateFormatter.releaseDateFormatter;
}

id static NSDateFormatter.releaseDateFormatter.getter()
{
  return sub_100159824(&qword_100556170, (id *)&static NSDateFormatter.releaseDateFormatter);
}

id sub_1002AE958()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v0, "setUnitsStyle:", 3);
  result = objc_msgSend(v0, "setAllowedUnits:", 96);
  static NSDateFormatter.collectionsDurationFormatter = (uint64_t)v0;
  return result;
}

uint64_t *NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor()
{
  if (qword_100556178 != -1)
    swift_once(&qword_100556178, sub_1002AE958);
  return &static NSDateFormatter.collectionsDurationFormatter;
}

id static NSDateFormatter.collectionsDurationFormatter.getter()
{
  return sub_100159824(&qword_100556178, (id *)&static NSDateFormatter.collectionsDurationFormatter);
}

uint64_t Dictionary.filterIncludingPairsWithStringValues()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;

  v77 = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v8 = __chkstk_darwin(a1);
  v76 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v8);
  v71 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v79 = (char *)v64 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v15, "key value ", 0);
  v17 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v73 = *(_QWORD *)(v17 - 8);
  v74 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)v64 - v21;
  v23 = swift_getTupleTypeMetadata2(0, a2, &type metadata for String, 0, 0);
  v24 = static Array._allocateUninitialized(_:)(0, v23);
  v72 = a4;
  v83 = Dictionary.init(dictionaryLiteral:)(v24, a2, &type metadata for String, a4);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    v26 = __CocoaDictionary.makeIterator()(v25);
    v65 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v26 | 0x8000000000000000;
  }
  else
  {
    v30 = -1 << *(_BYTE *)(a1 + 32);
    v27 = ~v30;
    v31 = *(_QWORD *)(a1 + 64);
    v65 = a1 + 64;
    v32 = -v30;
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v28 = v33 & v31;
    v29 = a1;
  }
  v75 = v29;
  v66 = (unint64_t)(v27 + 64) >> 6;
  v67 = v29 & 0x7FFFFFFFFFFFFFFFLL;
  v64[0] = v66 - 1;
  v64[1] = v27;
  result = swift_bridgeObjectRetain();
  v35 = v75;
  v36 = 0;
  v37 = v7;
  v69 = v7;
  v70 = v20;
  v68 = v22;
  if ((v75 & 0x8000000000000000) == 0)
    goto LABEL_16;
LABEL_11:
  v38 = __CocoaDictionary.Iterator.next()(result);
  if (v38)
  {
    v40 = v38;
    v41 = v39;
    _forceBridgeFromObjectiveC<A>(_:_:)(v38, a2, a2);
    swift_unknownObjectRelease(v40);
    v42 = v77;
    _forceBridgeFromObjectiveC<A>(_:_:)(v41, v77, v77);
    swift_unknownObjectRelease(v41);
    v43 = 0;
    v44 = v36;
    v78 = v28;
    v45 = v69;
    goto LABEL_25;
  }
  v43 = 1;
  v44 = v36;
  v78 = v28;
  v45 = v69;
LABEL_24:
  v42 = v77;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_25:
        v55 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v20, v43, 1, TupleTypeMetadata2);
        (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v22, v20, v74);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v22, 1, TupleTypeMetadata2) == 1)
        {
          sub_100194204(v75);
          return v83;
        }
        v56 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
        (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v22, a2);
        v57 = v76;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v76, v56, v42);
        if (swift_dynamicCast(&v81, v57, v42, &type metadata for String, 0))
        {
          v46 = v81;
          v47 = v82;
          goto LABEL_15;
        }
        v58 = sub_1000DD108(0, &qword_100556ED8, NSNumber_ptr);
        if (swift_dynamicCast(&v81, v57, v42, v58, 0))
        {
          v59 = v81;
          v60 = objc_msgSend(v81, "description");
          v46 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          v47 = v61;

          v45 = v69;
          v57 = v76;
LABEL_15:
          v37 = v45;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v77);
          v48 = v79;
          v49 = v80;
          v50 = v71;
          (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v71, v79, a2);
          v81 = v46;
          v82 = v47;
          v51 = type metadata accessor for Dictionary(0, a2, &type metadata for String, v72);
          Dictionary.subscript.setter(&v81, v50, v51);
          result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, a2);
          v36 = v44;
          v28 = v78;
          v20 = v70;
          v35 = v75;
          if ((v75 & 0x8000000000000000) != 0)
            goto LABEL_11;
          goto LABEL_16;
        }
        v62 = v42;
        v37 = v45;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v62);
        result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v79, a2);
        v36 = v44;
        v28 = v78;
        v35 = v75;
        if ((v75 & 0x8000000000000000) != 0)
          goto LABEL_11;
LABEL_16:
        if (v28)
        {
          v78 = (v28 - 1) & v28;
          v52 = __clz(__rbit64(v28)) | (v36 << 6);
          v44 = v36;
          v45 = v37;
          v42 = v77;
          goto LABEL_18;
        }
        v44 = v36 + 1;
        if (__OFADD__(v36, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        v45 = v37;
        if (v44 >= v66)
        {
          v78 = 0;
          v43 = 1;
          v44 = v36;
          goto LABEL_24;
        }
        v54 = *(_QWORD *)(v65 + 8 * v44);
        v42 = v77;
        if (!v54)
          break;
LABEL_22:
        v78 = (v54 - 1) & v54;
        v52 = __clz(__rbit64(v54)) + (v44 << 6);
LABEL_18:
        v53 = v35;
        (*(void (**)(char *, unint64_t, uint64_t))(v80 + 16))(v20, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v80 + 72) * v52, a2);
        (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(&v20[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v53 + 56) + *(_QWORD *)(v45 + 72) * v52, v42);
        v43 = 0;
        v22 = v68;
      }
      if (v36 + 2 < v66)
        break;
      v78 = 0;
      v43 = 1;
    }
    v54 = *(_QWORD *)(v65 + 8 * (v36 + 2));
    if (v54)
    {
      v44 = v36 + 2;
      goto LABEL_22;
    }
    v63 = v36 + 3;
    if (v36 + 3 < v66)
      break;
    v78 = 0;
    v43 = 1;
    v44 = v36 + 2;
  }
  v54 = *(_QWORD *)(v65 + 8 * v63);
  if (v54)
  {
    v44 = v36 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    v44 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v44 >= v66)
    {
      v78 = 0;
      v43 = 1;
      v44 = v64[0];
      goto LABEL_25;
    }
    v54 = *(_QWORD *)(v65 + 8 * v44);
    ++v63;
    if (v54)
      goto LABEL_22;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t Dictionary.filteredDictionary(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  int64_t v37;
  char *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t (*v71)(char *, char *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;

  v77 = a4;
  v71 = a1;
  v72 = a2;
  v10 = type metadata accessor for Optional(0, a5);
  v11 = __chkstk_darwin(v10);
  v66 = (char *)v61 - v12;
  v75 = *(_QWORD *)(a5 - 8);
  v13 = __chkstk_darwin(v11);
  v79 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = *(_QWORD *)(a4 - 8);
  v15 = __chkstk_darwin(v13);
  v65 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)v61 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a4, a5, "key value ", 0);
  v20 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v73 = *(_QWORD *)(v20 - 8);
  v74 = v20;
  v21 = __chkstk_darwin(v20);
  v68 = (char *)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)v61 - v23;
  v25 = swift_getTupleTypeMetadata2(0, a4, a5, 0, 0);
  v26 = static Array._allocateUninitialized(_:)(0, v25);
  v67 = a6;
  v80 = Dictionary.init(dictionaryLiteral:)(v26, a4, a5, a6);
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v27 = a3;
    else
      v27 = a3 & 0xFFFFFFFFFFFFFF8;
    v28 = __CocoaDictionary.makeIterator()(v27);
    v62 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v28 | 0x8000000000000000;
  }
  else
  {
    v32 = -1 << *(_BYTE *)(a3 + 32);
    v29 = ~v32;
    v33 = *(_QWORD *)(a3 + 64);
    v62 = a3 + 64;
    v34 = -v32;
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v30 = v35 & v33;
    v31 = a3;
  }
  v63 = (unint64_t)(v29 + 64) >> 6;
  v64 = v31 & 0x7FFFFFFFFFFFFFFFLL;
  v61[0] = v63 - 1;
  v61[1] = v29;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  v38 = v68;
  v69 = TupleTypeMetadata2;
  v70 = v31;
  while ((v31 & 0x8000000000000000) != 0)
  {
    v42 = __CocoaDictionary.Iterator.next()(result);
    if (v42)
    {
      v44 = v42;
      v45 = v43;
      _forceBridgeFromObjectiveC<A>(_:_:)(v42, v77, v77);
      swift_unknownObjectRelease(v44);
      _forceBridgeFromObjectiveC<A>(_:_:)(v45, a5, a5);
      swift_unknownObjectRelease(v45);
      v41 = 0;
    }
    else
    {
      v41 = 1;
    }
    v40 = v37;
    v78 = v30;
LABEL_25:
    v47 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v38, v41, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v24, v38, v74);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v24, 1, TupleTypeMetadata2) == 1)
    {
      sub_100194204(v31);
      return v80;
    }
    v48 = &v24[*(int *)(TupleTypeMetadata2 + 48)];
    v50 = v76;
    v49 = v77;
    v51 = v24;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v18, v24, v77);
    v52 = v75;
    v53 = v79;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v79, v48, a5);
    if ((v71(v18, v53) & 1) != 0)
    {
      v54 = v18;
      v55 = v65;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v65, v54, v49);
      v56 = v66;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v66, v79, a5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v56, 0, 1, a5);
      v57 = type metadata accessor for Dictionary(0, v49, a5, v67);
      v58 = v56;
      v53 = v79;
      v59 = v55;
      v18 = v54;
      v38 = v68;
      Dictionary.subscript.setter(v58, v59, v57);
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, a5);
    result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v18, v49);
    v37 = v40;
    v30 = v78;
    v24 = v51;
    TupleTypeMetadata2 = v69;
    v31 = v70;
  }
  if (v30)
  {
    v78 = (v30 - 1) & v30;
    v39 = __clz(__rbit64(v30)) | (v37 << 6);
    v40 = v37;
    goto LABEL_15;
  }
  v40 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v40 >= v63)
  {
    v78 = 0;
    v41 = 1;
    v40 = v37;
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(v62 + 8 * v40);
  if (v46)
    goto LABEL_21;
  if (v37 + 2 >= v63)
  {
    v78 = 0;
    v41 = 1;
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(v62 + 8 * (v37 + 2));
  if (v46)
  {
    v40 = v37 + 2;
    goto LABEL_21;
  }
  v60 = v37 + 3;
  if (v37 + 3 >= v63)
  {
    v78 = 0;
    v41 = 1;
    v40 = v37 + 2;
    goto LABEL_25;
  }
  v46 = *(_QWORD *)(v62 + 8 * v60);
  if (v46)
  {
    v40 = v37 + 3;
LABEL_21:
    v78 = (v46 - 1) & v46;
    v39 = __clz(__rbit64(v46)) + (v40 << 6);
LABEL_15:
    (*(void (**)(char *, unint64_t, uint64_t))(v76 + 16))(v38, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v76 + 72) * v39, v77);
    (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(&v38[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v31 + 56) + *(_QWORD *)(v75 + 72) * v39, a5);
    v41 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v40 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v40 >= v63)
    {
      v78 = 0;
      v41 = 1;
      v40 = v61[0];
      goto LABEL_25;
    }
    v46 = *(_QWORD *)(v62 + 8 * v40);
    ++v60;
    if (v46)
      goto LABEL_21;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t IndexPath.safeSection.getter()
{
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
    return NSNotFound.getter();
  else
    return IndexPath.subscript.getter(0);
}

uint64_t IndexPath.safeSection.setter(uint64_t a1)
{
  uint64_t result;

  result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
    return IndexPath.subscript.setter(a1, 0);
  return result;
}

uint64_t (*IndexPath.safeSection.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
    v3 = NSNotFound.getter();
  else
    v3 = IndexPath.subscript.getter(0);
  *a1 = v3;
  return sub_1002AF644;
}

uint64_t sub_1002AF644(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
    return IndexPath.subscript.setter(v1, 0);
  return result;
}

uint64_t IndexPath.safeItem.getter()
{
  if ((unint64_t)IndexPath.count.getter() > 1)
    return IndexPath.subscript.getter(1);
  else
    return NSNotFound.getter();
}

unint64_t IndexPath.safeItem.setter(uint64_t a1)
{
  unint64_t result;

  result = IndexPath.count.getter();
  if (result >= 2)
    return IndexPath.subscript.setter(a1, 1);
  return result;
}

unint64_t (*IndexPath.safeItem.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((unint64_t)IndexPath.count.getter() > 1)
    v3 = IndexPath.subscript.getter(1);
  else
    v3 = NSNotFound.getter();
  *a1 = v3;
  return sub_1002AF72C;
}

unint64_t sub_1002AF72C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *a1;
  result = IndexPath.count.getter();
  if (result >= 2)
    return IndexPath.subscript.setter(v1, 1);
  return result;
}

void *String.nonBreakingSpace.unsafeMutableAddressor()
{
  return &static String.nonBreakingSpace;
}

uint64_t static String.nonBreakingSpace.getter()
{
  return 41154;
}

Swift::String __swiftcall String.trim()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  _QWORD v16[2];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v3;
  v16[1] = v2;
  v8 = objc_msgSend((id)objc_opt_self(NSCharacterSet), "whitespaceAndNewlineCharacterSet");
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = sub_1002B3208();
  v10 = StringProtocol.trimmingCharacters(in:)(v7, &type metadata for String, v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = v10;
  v14 = v12;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

Swift::String __swiftcall String.removeSpaces()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String result;
  _QWORD v6[2];
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v8 = v0;
  v9 = v1;
  v7[0] = 32;
  v7[1] = 0xE100000000000000;
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  v2 = sub_1002B3208();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v7, v6, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

Swift::String __swiftcall String.replace(usingRegexPattern:with:options:)(Swift::String usingRegexPattern, Swift::String with, NSRegularExpressionOptions options)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  id v10;
  void *v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String result;

  v5 = v4;
  v6 = v3;
  object = usingRegexPattern._object;
  countAndFlagsBits = usingRegexPattern._countAndFlagsBits;
  objc_allocWithZone((Class)NSRegularExpression);
  swift_bridgeObjectRetain();
  v10 = sub_1002B2234(countAndFlagsBits, (uint64_t)object, options);
  v11 = v10;
  if (v10)
  {
    v12 = String.count.getter(v6, v5);
    v13 = String._bridgeToObjectiveC()();
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v11, "stringByReplacingMatchesInString:options:range:withTemplate:", v13, 0, 0, v12, v14);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v5 = v16;

  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v17 = v6;
  v18 = v5;
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

Swift::String __swiftcall String.htmlizedString()()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v18 = v0;
  v19 = v1;
  v16 = 10;
  v17 = 0xE100000000000000;
  v14 = 1047683644;
  v15 = 0xE400000000000000;
  v2 = sub_1002B3208();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v16, &v14, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v5 = sub_1002AFB04(v3, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  v18 = v5;
  v19 = v7;
  v16 = 38;
  v17 = 0xE100000000000000;
  v14 = 0x3B706D6126;
  v15 = 0xE500000000000000;
  v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v16, &v14, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = v8;
  v12 = v10;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

unint64_t sub_1002AFB04(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v4 = sub_10000B4C8(&qword_100556EE8);
  __chkstk_darwin(v4);
  v60 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = 0;
  v67 = 0xE000000000000000;
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v7 = 11;
  v57 = 4 * v6;
  v64 = a1;
  v65 = a2;
  v61 = v7 | (v6 << 16);
  v62 = 38;
  v63 = 0xE100000000000000;
  v8 = type metadata accessor for Locale(0);
  v9 = 0;
  v10 = 15;
  v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v59 = v8;
  v55 = a1;
  v56 = a2;
  while (1)
  {
    v12 = (uint64_t)v60;
    v58(v60, 1, 1, v59);
    v13 = sub_1002B3208();
    v14 = StringProtocol.range<A>(of:options:range:locale:)(&v62, 0, v10, v61, 0, v12, &type metadata for String, &type metadata for String, v13, v13);
    v16 = v15;
    sub_100011694(v12, &qword_100556EE8);
    result = swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      v17 = v10 >> 14;
      goto LABEL_35;
    }
    v17 = v14 >> 14;
    if (v14 >> 14 < v9)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v18 = String.subscript.getter(v10, v14, a1, a2);
    String.append(contentsOf:)(v18);
    result = swift_bridgeObjectRelease();
    v64 = a1;
    v65 = a2;
    v62 = 59;
    v63 = 0xE100000000000000;
    if (v57 < v17)
      goto LABEL_38;
    v19 = (uint64_t)v60;
    v58(v60, 1, 1, v59);
    StringProtocol.range<A>(of:options:range:locale:)(&v62, 0, v14, v61, 0, v19, &type metadata for String, &type metadata for String, v13, v13);
    v10 = v20;
    v22 = v21;
    sub_100011694(v19, &qword_100556EE8);
    result = swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      break;
    v9 = v10 >> 14;
    if (v10 >> 14 < v17)
      goto LABEL_40;
    v23 = String.subscript.getter(v14, v10, a1, a2);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    if (sub_1002B2EEC(8998, (void *)0xE200000000000000, v23, v24, v26, v28))
    {
      result = Substring.index(_:offsetBy:)(v23, 2, v23, v25, v27, v29);
      if (v25 >> 14 < result >> 14)
        goto LABEL_41;
      v30 = ((uint64_t (*)(void))Substring.subscript.getter)();
      v32 = v31;
      v34 = v33;
      v36 = v35;
      if (sub_1002B2EEC(120, (void *)0xE100000000000000, v30, v31, v33, v35))
      {
        swift_bridgeObjectRelease();
        v37 = 16;
        v38 = 3;
      }
      else
      {
        v45 = sub_1002B2EEC(88, (void *)0xE100000000000000, v30, v32, v34, v36);
        swift_bridgeObjectRelease();
        if (v45)
          v37 = 16;
        else
          v37 = 10;
        if (v45)
          v38 = 3;
        else
          v38 = 2;
      }
      v46 = Substring.index(_:offsetBy:)(v23, v38, v23, v25, v27, v29);
      result = Substring.index(_:offsetBy:)(v25, -1, v23, v25, v27, v29);
      if (result >> 14 < v46 >> 14)
        goto LABEL_42;
      v47 = Substring.subscript.getter(v46, result, v23, v25, v27, v29);
      v44 = sub_1002B0580(v47, v48, v49, v50, v37);
      v43 = v51;
      swift_bridgeObjectRelease();
      if (v43)
      {
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    else
    {
      if (qword_100556180 != -1)
        swift_once(&qword_100556180, sub_1002B0470);
      v39 = off_100556E98;
      if (*((_QWORD *)off_100556E98 + 2))
      {
        swift_bridgeObjectRetain();
        v40 = sub_1002B23AC(v23, v25, v27, v29);
        if ((v41 & 1) != 0)
        {
          v42 = (uint64_t *)(v39[7] + 16 * v40);
          v44 = *v42;
          v43 = (void *)v42[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n(v29, 2);
LABEL_32:
          v52._countAndFlagsBits = v44;
          v52._object = v43;
          String.append(_:)(v52);
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
    }
    String.append(contentsOf:)(v23);
LABEL_8:
    a1 = v55;
    result = swift_bridgeObjectRelease();
    a2 = v56;
    v64 = a1;
    v65 = v56;
    v62 = 38;
    v63 = 0xE100000000000000;
    if (v57 < v9)
      goto LABEL_39;
  }
  v10 = v14;
LABEL_35:
  if (v57 >= v17)
  {
    v53 = String.subscript.getter(v10, v61, a1, a2);
    String.append(contentsOf:)(v53);
    swift_bridgeObjectRelease();
    return v66;
  }
LABEL_43:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.insensitiveCompareString()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String_optional v9;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v2 = v1;
  v3 = v0;
  v4 = sub_10000B4C8(&qword_100556EE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 0xE000000000000000;
  v31 = 0;
  v32 = 0xE000000000000000;
  v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  v27 = v3;
  v28 = v2;
  v29 = 0;
  v30 = v8;
  swift_bridgeObjectRetain();
  v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    countAndFlagsBits = v9.value._countAndFlagsBits;
    object = v9.value._object;
    do
    {
      if ((Character.isPunctuation.getter(countAndFlagsBits, object) & 1) == 0)
      {
        v13._countAndFlagsBits = countAndFlagsBits;
        v13._object = object;
        String.append(_:)(v13);
      }
      swift_bridgeObjectRelease();
      v12 = String.Iterator.next()();
      countAndFlagsBits = v12.value._countAndFlagsBits;
      object = v12.value._object;
    }
    while (v12.value._object);
    v14 = v31;
    v7 = v32;
  }
  else
  {
    v14 = 0;
  }
  swift_bridgeObjectRelease();
  v27 = v14;
  v28 = v7;
  v15 = sub_1002B3208();
  v16 = StringProtocol.localizedLowercase.getter(&type metadata for String, v15);
  v18 = v17;
  v19 = swift_bridgeObjectRelease();
  v27 = v16;
  v28 = v18;
  static Locale.current.getter(v19);
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
  v21 = StringProtocol.folding(options:locale:)(128, v6, &type metadata for String, v15);
  v23 = v22;
  sub_100011694((uint64_t)v6, &qword_100556EE8);
  swift_bridgeObjectRelease();
  v24 = v21;
  v25 = v23;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

id String.BOOLValue.getter()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

BOOL String.containsExcessiveHeightCharacters.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  void *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  _BOOL8 v18;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  char v22;
  _QWORD v23[2];

  sub_10000B4C8(&qword_100556EF0);
  __chkstk_darwin();
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)v23 - v6;
  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin();
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet(v10);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13
    && (v15 = (void *)v13,
        v14(v5, 1, 1, v8),
        v16 = sub_10001254C(&qword_100556EF8, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterSet, (uint64_t)&protocol conformance descriptor for CharacterSet), dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v15, v5, v8, v16), v15, v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48), v17(v5, 1, v8) != 1))
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v20(v7, v5, v8);
    v14(v7, 0, 1, v8);
    if (v17(v7, 1, v8) != 1)
    {
      v20(v12, v7, v8);
      v23[0] = a1;
      v23[1] = a2;
      v21 = sub_1002B3208();
      StringProtocol.rangeOfCharacter(from:options:range:)(v12, 0, 0, 0, 1, &type metadata for String, v21);
      v18 = (v22 & 1) == 0;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v18;
    }
  }
  else
  {
    v14(v7, 1, 1, v8);
  }
  sub_100011694((uint64_t)v7, &qword_100556EF0);
  return 0;
}

BOOL String.containsCharacter(from:)(uint64_t a1)
{
  unint64_t v2;
  char v3;

  v2 = sub_1002B3208();
  StringProtocol.rangeOfCharacter(from:options:range:)(a1, 0, 0, 0, 1, &type metadata for String, v2);
  return (v3 & 1) == 0;
}

void *sub_1002B0470()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  uint64_t v18;

  v0 = sub_10000B4C8(&qword_100556FC8);
  inited = swift_initStackObject(v0, &v18);
  *(_OWORD *)(inited + 16) = xmmword_100427F30;
  *(_QWORD *)(inited + 32) = Substring.init(_:)(0x3B746F757126, 0xE600000000000000);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = 34;
  *(_QWORD *)(inited + 72) = 0xE100000000000000;
  *(_QWORD *)(inited + 80) = Substring.init(_:)(0x3B706D6126, 0xE500000000000000);
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 104) = v7;
  *(_QWORD *)(inited + 112) = 38;
  *(_QWORD *)(inited + 120) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = Substring.init(_:)(0x3B736F706126, 0xE600000000000000);
  *(_QWORD *)(inited + 136) = v8;
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 152) = v10;
  *(_QWORD *)(inited + 160) = 39;
  *(_QWORD *)(inited + 168) = 0xE100000000000000;
  *(_QWORD *)(inited + 176) = Substring.init(_:)(997485606, 0xE400000000000000);
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = v12;
  *(_QWORD *)(inited + 200) = v13;
  *(_QWORD *)(inited + 208) = 60;
  *(_QWORD *)(inited + 216) = 0xE100000000000000;
  *(_QWORD *)(inited + 224) = Substring.init(_:)(997484326, 0xE400000000000000);
  *(_QWORD *)(inited + 232) = v14;
  *(_QWORD *)(inited + 240) = v15;
  *(_QWORD *)(inited + 248) = v16;
  *(_QWORD *)(inited + 256) = 62;
  *(_QWORD *)(inited + 264) = 0xE100000000000000;
  result = (void *)sub_10029CBE8(inited);
  off_100556E98 = result;
  return result;
}

uint64_t sub_1002B0580(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if ((unint64_t)(a5 - 37) < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 ^ a1) < 0x4000)
    return 0;
  v11 = sub_1002B3080(a1, a2, a3, a4, a5);
  if ((v11 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1002B29BC(a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    if ((v5 & 0x100000000) != 0)
      return 0;
  }
  else
  {
    LODWORD(v5) = v11;
    if ((v11 & 0x100000000) != 0)
      return 0;
  }
  result = 0;
  if (WORD1(v5) <= 0x10u && (v5 & 0xFFFFF800) != 0xD800)
  {
    if ((v5 & 0xFFFFFF80) == 0)
    {
      if (v5 > 0xFF)
      {
        __break(1u);
        return result;
      }
      v13 = (v5 + 1);
      goto LABEL_12;
    }
LABEL_15:
    v15 = (v5 & 0x3F) << 8;
    v13 = (v15 | (v5 >> 6)) + 33217;
    v16 = (v15 | (v5 >> 6) & 0x3F) << 8;
    v17 = (((v16 | (v5 >> 12) & 0x3F) << 8) | (v5 >> 18)) - 2122219023;
    v18 = (v16 | (v5 >> 12)) + 8487393;
    if (WORD1(v5))
      v18 = v17;
    if (v5 >= 0x800)
      v13 = v18;
LABEL_12:
    v14 = __clz(v13);
    v19 = (v13 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v14 >> 3)) & 7)));
    return static String._uncheckedFromUTF8(_:)(&v19, 4 - (v14 >> 3));
  }
  return result;
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  v3 = v2 == 0;
  return !a2 || v3;
}

uint64_t Optional<A>.nonEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
    return 0;
  v2 = a1;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  return v2;
}

NSAttributedString __swiftcall NSAttributedString.init(string:attributes:replacingPlaceholder:withImage:imageAttributes:)(Swift::String string, Swift::OpaquePointer attributes, Swift::String replacingPlaceholder, UIImage_optional withImage, Swift::OpaquePointer imageAttributes)
{
  Class isa;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  Class v10;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  Class v19;
  id v20;
  id v21;
  uint64_t v23;

  isa = withImage.value.super.isa;
  static String.localizedStringWithFormat(_:_:)();
  v6 = objc_allocWithZone((Class)NSMutableAttributedString);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _s3__C3KeyVMa_0(0);
  v9 = v8;
  sub_10001254C(&qword_100556310, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_0, (uint64_t)&unk_100436734);
  v23 = v9;
  v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v6, "initWithString:attributes:", v7, v10);

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, "rangeOfString:options:", v13, 129);
  v16 = v15;

  if (isa)
  {
    v17 = (void *)objc_opt_self(NSTextAttachment);
    isa = isa;
    v18 = objc_msgSend(v17, "textAttachmentWithImage:", isa);
    v19 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v20 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:attributes:", v18, v19);

  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  }
  objc_msgSend(v11, "replaceCharactersInRange:withAttributedString:", v14, v16, v20, v23);
  v21 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithAttributedString:", v11);

  return (NSAttributedString)v21;
}

void sub_1002B0A2C()
{
  static Double.epsilon = 0x3E80000000000000;
}

uint64_t *Double.epsilon.unsafeMutableAddressor()
{
  if (qword_100556188 != -1)
    swift_once(&qword_100556188, sub_1002B0A2C);
  return &static Double.epsilon;
}

double static Double.epsilon.getter()
{
  if (qword_100556188 != -1)
    swift_once(&qword_100556188, sub_1002B0A2C);
  return *(double *)&static Double.epsilon;
}

double TimeIntervalSyntaxSugar.minutes.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 16))() * 60.0;
}

double TimeIntervalSyntaxSugar.hours.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 24))() * 60.0;
}

double sub_1002B0B04()
{
  uint64_t *v0;

  return (double)*v0;
}

double sub_1002B0B10()
{
  uint64_t *v0;

  return (double)*v0 * 60.0;
}

double sub_1002B0B28()
{
  uint64_t *v0;

  return (double)*v0 * 60.0 * 60.0;
}

double sub_1002B0B44()
{
  double *v0;

  return *v0 * 60.0;
}

double sub_1002B0B58()
{
  double *v0;

  return *v0 * 60.0 * 60.0;
}

uint64_t _NSRange.init(range:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v7 = String.Index.samePosition(in:)(a3, a4, a1);
  if ((v8 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100450820, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 726, 0);
  }
  else
  {
    v9 = v7;
    v10 = String.Index.samePosition(in:)(a3, a4, a2);
    if ((v11 & 1) == 0)
    {
      v12 = v10;
      v13 = String.UTF16View.distance(from:to:)(15, v9, a3, a4);
      String.UTF16View.distance(from:to:)(v9, v12, a3, a4);
      swift_bridgeObjectRelease(a4);
      return v13;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100450850, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 727, 0);
  }
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v7 = String.index(after:)(a2, a3, a4);
  v8 = String.Index.samePosition(in:)(a3, a4, a1);
  if ((v9 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100450820, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 726, 0);
  }
  else
  {
    v10 = v8;
    v11 = String.Index.samePosition(in:)(a3, a4, v7);
    if ((v12 & 1) == 0)
    {
      v13 = v11;
      v14 = String.UTF16View.distance(from:to:)(15, v10, a3, a4);
      String.UTF16View.distance(from:to:)(v10, v13, a3, a4);
      swift_bridgeObjectRelease(a4);
      return v14;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100450850, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 727, 0);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;

  if (a1.location >= v1)
  {
    if (__OFADD__(a1.location, a1.length))
    {
      __break(1u);
    }
    else if (!__OFADD__(v1, v2))
    {
      LOBYTE(a1.location) = v1 + v2 >= a1.location + a1.length;
      return a1.location;
    }
    __break(1u);
    return a1.location;
  }
  LOBYTE(a1.location) = 0;
  return a1.location;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(Swift::String from, Swift::String to, Swift::Bool preserveLength)
{
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  Swift::Int v7;
  NSString v8;
  NSString v9;
  id v10;
  Swift::Int v11;
  Swift::Int v12;
  __C::_NSRange v13;
  __C::_NSRange v14;
  uint64_t location;
  Swift::Int length;
  __C::_NSRange v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  __C::_NSRange result;
  Swift::String v22;
  Swift::String v23;

  v23 = from;
  object = from._object;
  countAndFlagsBits = from._countAndFlagsBits;
  v22 = to;
  v6 = sub_1002B3208();
  if ((StringProtocol.contains<A>(_:)(&v22, &type metadata for String, &type metadata for String, v6, v6) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v7 = String.UTF16View.count.getter(countAndFlagsBits, object);
    swift_bridgeObjectRelease();
    v8 = String._bridgeToObjectiveC()();
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "rangeOfString:", v9, v22._countAndFlagsBits, v22._object, v23._countAndFlagsBits, v23._object);
    v12 = v11;

    v13.location = 0;
    v13.length = v7;
    v14.location = (Swift::Int)v10;
    v14.length = v12;
    v17 = _NSRange.convert(from:to:preserveLength:)(v13, v14, preserveLength);
    length = v17.length;
    location = v17.location;
  }
  else
  {
    v18 = sub_1002B324C();
    v19 = swift_allocError(&type metadata for _NSRange.ConversionError, v18, 0, 0);
    *v20 = 4;
    location = swift_willThrow(v19);
  }
  result.length = length;
  result.location = location;
  return result;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(__C::_NSRange from, __C::_NSRange to, Swift::Bool preserveLength)
{
  Swift::Int v3;
  uint64_t v4;
  Swift::Int v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __C::_NSRange v12;
  Swift::Int v13;
  char v14;

  if (to.location < from.location)
    goto LABEL_5;
  if (__OFADD__(to.location, to.length))
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = from.location + from.length;
  if (__OFADD__(from.location, from.length))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < to.location + to.length)
  {
LABEL_5:
    v6 = 0;
LABEL_6:
    v7 = sub_1002B324C();
    v8 = swift_allocError(&type metadata for _NSRange.ConversionError, v7, 0, 0);
    *v9 = v6;
    from.location = swift_willThrow(v8);
    return from;
  }
  if (v3 < from.location)
  {
LABEL_11:
    v6 = 1;
    goto LABEL_6;
  }
  v10 = v4;
  if (__OFADD__(v3, v4))
    goto LABEL_20;
  if (v5 < v3 + v4)
    goto LABEL_11;
  if (__OFSUB__(v3, to.location))
  {
LABEL_21:
    __break(1u);
    return from;
  }
  v12.location = 0;
  v12.length = v13;
  *(__C::_NSRange_optional *)&from.location = _NSRange.intersection(_:)(v12);
  if ((v14 & 1) != 0)
  {
    v6 = 2;
    goto LABEL_6;
  }
  if (preserveLength && from.length != v10)
  {
    v6 = 3;
    goto LABEL_6;
  }
  return from;
}

Swift::Bool __swiftcall _NSRange.intersects(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;

  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_13:
    __break(1u);
    return a1.location;
  }
  if (v1 >= a1.location && a1.location + a1.length > v1)
    return 1;
  LOBYTE(a1.location) = a1.location >= v1 && v1 + v2 > a1.location;
  return a1.location;
}

uint64_t sub_1002B1058()
{
  uint64_t result;

  result = NSNotFound.getter();
  static _NSRange.notFound = result;
  unk_100562610 = 0;
  return result;
}

uint64_t *_NSRange.notFound.unsafeMutableAddressor()
{
  if (qword_100556190 != -1)
    swift_once(&qword_100556190, sub_1002B1058);
  return &static _NSRange.notFound;
}

uint64_t static _NSRange.notFound.getter()
{
  if (qword_100556190 != -1)
    swift_once(&qword_100556190, sub_1002B1058);
  return static _NSRange.notFound;
}

Swift::tuple_first___C__NSRange_second___C__NSRange __swiftcall _NSRange.difference(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  BOOL v6;
  Swift::Int v7;
  _BOOL4 v8;
  Swift::Int v9;
  Swift::Int v11;
  Swift::Int v12;
  Swift::tuple_first___C__NSRange_second___C__NSRange result;

  v3 = v2;
  v4 = v1;
  v5 = v1 + v2;
  v6 = __OFADD__(v1, v2);
  if (v1 < a1.location)
  {
    if (!v6)
      goto LABEL_10;
    __break(1u);
  }
  if (v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once(&qword_100556190, sub_1002B1058);
    goto LABEL_43;
  }
  if (a1.location + a1.length >= v5)
  {
    if (qword_100556190 == -1)
    {
LABEL_45:
      v4 = static _NSRange.notFound;
      v3 = unk_100562610;
      v7 = static _NSRange.notFound;
      v9 = unk_100562610;
      goto LABEL_46;
    }
LABEL_48:
    swift_once(&qword_100556190, sub_1002B1058);
    goto LABEL_45;
  }
LABEL_10:
  v7 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v4 < a1.location || v7 <= v4)
    goto LABEL_27;
  v8 = 0;
  v3 = a1.location - v4;
  if (!__OFSUB__(a1.location, v4))
  {
    while (1)
    {
      v9 = v5 - v7;
      if (__OFSUB__(v5, v7))
        goto LABEL_50;
      if (!v8)
        break;
      if (v7 >= v5)
        goto LABEL_38;
      v5 = v4 + v3;
      if (__OFADD__(v4, v3))
      {
        __break(1u);
LABEL_55:
        v11 = a1.location + a1.length;
        v12 = v9;
        swift_once(&qword_100556190, sub_1002B1058);
        v9 = v12;
        v7 = v11;
LABEL_42:
        v4 = v7;
        v3 = v9;
        goto LABEL_43;
      }
      if (v5 < v7)
        goto LABEL_46;
      if (__OFADD__(v7, v9))
      {
        __break(1u);
        goto LABEL_57;
      }
      if (v5 <= v7 + v9)
        v5 = v7 + v9;
      if (v7 < v4)
        v4 = a1.location + a1.length;
      v3 = v5 - v4;
      if (!__OFSUB__(v5, v4))
        goto LABEL_38;
      __break(1u);
LABEL_27:
      if (a1.location < v4 || v5 <= a1.location)
        goto LABEL_38;
      v8 = v4 < a1.location && v3 > 0;
      v3 = a1.location - v4;
      if (__OFSUB__(a1.location, v4))
        goto LABEL_37;
    }
    if (v7 < v5)
    {
      if (qword_100556190 != -1)
        goto LABEL_55;
      goto LABEL_42;
    }
    if (qword_100556190 == -1)
      goto LABEL_45;
    goto LABEL_48;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  if (qword_100556190 != -1)
    goto LABEL_53;
LABEL_43:
  v7 = static _NSRange.notFound;
  v9 = unk_100562610;
LABEL_46:
  a1.location = v4;
  a1.length = v3;
LABEL_57:
  result.first = a1;
  result.second.length = v9;
  result.second.location = v7;
  return result;
}

uint64_t _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  _BYTE v38[16];
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v42 = a3;
  v43 = a4;
  v6 = a2;
  v7 = a1;
  v8 = Range<>.init(_:in:)(a5, a6, a1, a2);
  if ((v10 & 1) != 0)
  {
LABEL_22:
    v35 = 0xD00000000000001FLL;
    v40 = 0;
    v39 = 674;
    v36 = 0x8000000100450880;
    goto LABEL_26;
  }
  v11 = v8;
  v12 = v9;
  v13 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v13 = v7 & 0xFFFFFFFFFFFFLL;
  v14 = 4 * v13;
  v44 = v6;
  v41 = 4 * v13;
LABEL_5:
  if (v11 >= 0x4000)
  {
    v17 = String.index(before:)(v11, v7, v6);
    if (v12 >> 14 >= v17 >> 14)
    {
      v18 = 0;
      v19 = v17;
      v16 = v12;
      do
      {
        v45 = v11;
        v20 = String.subscript.getter(v17, v7, v6);
        v21 = v7;
        v23 = v22;
        __chkstk_darwin(v20);
        v39 = v42;
        swift_bridgeObjectRetain();
        v24 = sub_1002B1714((uint64_t (*)(_QWORD *))sub_1002B3290, (uint64_t)v38, v20, v23);
        v25 = swift_bridgeObjectRelease();
        __chkstk_darwin(v25);
        v39 = v43;
        v26 = sub_1002B19C8(0, (void (*)(uint64_t *__return_ptr, char *, _QWORD *))sub_1002B32AC, (uint64_t)v38, v20, v23);
        v7 = v21;
        v14 = v41;
        swift_bridgeObjectRelease();
        v6 = v44;
        if ((v24 & 1) == 0 || (v26 & 1) != 0)
        {
          v11 = v45;
          if ((v18 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v11 = v19;
          v16 = v12;
          if ((v18 & 1) == 0)
            goto LABEL_5;
        }
LABEL_10:
        v15 = 1;
        if (v14 == v16 >> 14)
          goto LABEL_9;
        v12 = String.index(after:)(v16, v7, v6);
        v18 = 1;
        v17 = v16;
        v19 = v11;
      }
      while (v12 >> 14 >= v11 >> 14);
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  v15 = 0;
  v16 = v12;
LABEL_9:
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_18:
  swift_bridgeObjectRetain();
  v27 = String.Index.samePosition(in:)(v7, v6, v11);
  if ((v28 & 1) != 0)
  {
    v40 = 0;
    v39 = 726;
    v37 = "Lower Bound not found in UTF-16 view";
  }
  else
  {
    v29 = v27;
    v30 = String.Index.samePosition(in:)(v7, v6, v16);
    if ((v31 & 1) == 0)
    {
      v32 = v30;
      v33 = String.UTF16View.distance(from:to:)(15, v29, v7, v6);
      String.UTF16View.distance(from:to:)(v29, v32, v7, v6);
      swift_bridgeObjectRelease();
      return v33;
    }
    v40 = 0;
    v39 = 727;
    v37 = "Upper Bound not found in UTF-16 view";
  }
  v36 = (unint64_t)(v37 - 32) | 0x8000000000000000;
  v35 = 0xD000000000000024;
LABEL_26:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v35, v36, "MusicUtilities/Foundation+Utilities.swift", 41, 2, v39, v40);
  __break(1u);
  return result;
}

uint64_t sub_1002B15FC(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_100556EF0);
  __chkstk_darwin(v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  sub_1002B3CD0(a2, (uint64_t)v10);
  v12 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v12 = CharacterSet.contains(_:)(v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v12 & 1;
}

uint64_t sub_1002B1714(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v10 << 16, a3, a4);
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v21[0] = a3;
          v21[1] = v20;
          v11 = v21;
          v12 = v22;
        }
        else
        {
          v11 = (_QWORD *)v19;
          v12 = v5;
          if ((a3 & 0x1000000000000000) == 0)
            v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
        }
        v13 = _decodeScalar(_:startingAt:)(v11, v12, v10);
      }
      v15 = v14;
      LODWORD(v21[0]) = v13;
      v16 = a1(v21);
      if (v4)
      {
        swift_bridgeObjectRelease(a4);
        return v17 & 1;
      }
      if ((v16 & 1) == 0)
        break;
      v10 += v15;
      if (v10 >= v6)
      {
        swift_bridgeObjectRelease(a4);
        v17 = 1;
        return v17 & 1;
      }
    }
    swift_bridgeObjectRelease(a4);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  return v17 & 1;
}

uint64_t sub_1002B1850@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;

  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000B4C8(&qword_100556EF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v21 - v16;
  LOBYTE(a1) = *a1;
  v18 = *a2;
  sub_1002B3CD0(a3, (uint64_t)&v21 - v16);
  if ((a1 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    sub_1002B3CD0((uint64_t)v17, (uint64_t)v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
    {
      v19 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
      v19 = CharacterSet.contains(_:)(v18);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  result = sub_100011694((uint64_t)v17, &qword_100556EF0);
  *a4 = v19 & 1;
  return result;
}

uint64_t sub_1002B19C8(char a1, void (*a2)(uint64_t *__return_ptr, char *, _QWORD *), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  BYTE1(v22) = a1;
  v6 = a4 & 0xFFFFFFFFFFFFLL;
  v20 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a5) & 0xF;
  else
    v7 = a4 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v18 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v19 = a5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      if ((a5 & 0x1000000000000000) != 0)
      {
        v14 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v11 << 16, a4, a5);
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v13 = v20;
          v21[0] = a4;
          v21[1] = v19;
          v12 = v21;
        }
        else
        {
          v12 = (_QWORD *)v18;
          v13 = v6;
          if ((a4 & 0x1000000000000000) == 0)
            v12 = (_QWORD *)_StringObject.sharedUTF8.getter(a4, a5);
        }
        v14 = _decodeScalar(_:startingAt:)(v12, v13, v11);
      }
      v16 = v15;
      LODWORD(v21[0]) = v14;
      a2(&v22, (char *)&v22 + 1, v21);
      if (v5)
        break;
      v11 += v16;
      LOBYTE(v16) = v22;
      BYTE1(v22) = v22;
    }
    while (v11 < v7);
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    LOBYTE(v16) = a1;
  }
  return v16 & 1;
}

Swift::Int_optional __swiftcall _NSRange.NSRangeIterator.next()()
{
  uint64_t v0;
  Swift::Int v1;
  Swift::Bool v2;
  uint64_t v3;
  Swift::Int_optional result;

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    if (__OFADD__(*(_QWORD *)v0, v3))
    {
      __break(1u);
    }
    else if (v1 >= *(_QWORD *)v0 + v3)
    {
      v1 = 0;
      v2 = 1;
    }
    else
    {
      v2 = 0;
      *(_QWORD *)(v0 + 16) = v1 + 1;
    }
  }
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void sub_1002B1B44(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    goto LABEL_6;
  v3 = *(_QWORD *)(v1 + 8);
  if (!__OFADD__(*(_QWORD *)v1, v3))
  {
    if (v2 < *(_QWORD *)v1 + v3)
    {
      v4 = 0;
      *(_QWORD *)(v1 + 16) = v2 + 1;
LABEL_7:
      *(_QWORD *)a1 = v2;
      *(_BYTE *)(a1 + 8) = v4;
      return;
    }
    v2 = 0;
LABEL_6:
    v4 = 1;
    goto LABEL_7;
  }
  __break(1u);
}

void sub_1002B1B9C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  if (v2 >= 1)
    v3 = *v1;
  else
    v3 = 0;
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v2 < 1;
}

void sub_1002B1BBC()
{
  uint64_t *v0;

  sub_1002B2844(*v0, v0[1]);
}

uint64_t sub_1002B1BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1002AC774(a1, a2, a3, *v3, v3[1]);
}

uint64_t WeakWrapper.value.setter(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*WeakWrapper.value.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong(v1);
  return sub_1002B1C30;
}

uint64_t sub_1002B1C30(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_unknownObjectWeakAssign(a1[1], *a1);
  return swift_unknownObjectRelease(v1);
}

uint64_t WeakWrapper.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = swift_unknownObjectWeakInit(a2, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t Int.romanNumeral.getter(uint64_t a1)
{
  unint64_t i;

  if (a1 < 1)
    return 0;
  for (i = 0; i != 13; ++i)
  {
    if (i >= 0xD)
    {
      __break(1u);
      JUMPOUT(0x1002B1E0CLL);
    }
    if (a1 >= qword_100437470[*((char *)&off_1005152A8 + i + 32)])
      __asm { BR              X9 }
  }
  return 0;
}

_UNKNOWN **static RomanNumerals.allCases.getter()
{
  return &off_1005152A8;
}

uint64_t RomanNumerals.arabicNumber.getter(char a1)
{
  return qword_100437470[a1];
}

uint64_t RomanNumerals.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002B1E88 + 4 * byte_1004370E0[a1]))(77, 0xE100000000000000);
}

uint64_t sub_1002B1E88()
{
  return 19779;
}

uint64_t sub_1002B1E94()
{
  return 68;
}

uint64_t sub_1002B1E9C()
{
  return 17475;
}

uint64_t sub_1002B1EA8()
{
  return 67;
}

uint64_t sub_1002B1EB0()
{
  return 17240;
}

uint64_t sub_1002B1EBC()
{
  return 76;
}

uint64_t sub_1002B1EC4()
{
  return 19544;
}

uint64_t sub_1002B1ED0()
{
  return 88;
}

uint64_t sub_1002B1ED8()
{
  return 22601;
}

uint64_t sub_1002B1EE4()
{
  return 86;
}

uint64_t sub_1002B1EEC()
{
  return 22089;
}

uint64_t sub_1002B1EF8()
{
  return 73;
}

uint64_t sub_1002B1F04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = RomanNumerals.rawValue.getter(*a1);
  v5 = v4;
  v6 = RomanNumerals.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1002B1F8C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = RomanNumerals.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002B1FEC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = RomanNumerals.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002B202C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = RomanNumerals.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1002B2088@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002B20B4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = RomanNumerals.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1002B20DC(_QWORD *a1@<X8>)
{
  *a1 = &off_1005152A8;
}

Swift::Int sub_1002B20EC()
{
  Swift::Int result;

  result = sub_1002B3B90((uint64_t)&off_100515430);
  static NSDirectionalEdgeInsets.Edge.all = result;
  return result;
}

uint64_t *NSDirectionalEdgeInsets.Edge.all.unsafeMutableAddressor()
{
  if (qword_100556198 != -1)
    swift_once(&qword_100556198, sub_1002B20EC);
  return &static NSDirectionalEdgeInsets.Edge.all;
}

uint64_t static NSDirectionalEdgeInsets.Edge.all.getter()
{
  if (qword_100556198 != -1)
    swift_once(&qword_100556198, sub_1002B20EC);
  return swift_bridgeObjectRetain();
}

double NSDirectionalEdgeInsets.init(edge:length:)(uint64_t a1, double a2)
{
  double v4;

  if (sub_1001682B0(0, a1))
    v4 = a2;
  else
    v4 = 0.0;
  sub_1001682B0(1u, a1);
  sub_1001682B0(2u, a1);
  sub_1001682B0(3u, a1);
  swift_bridgeObjectRelease();
  return v4;
}

id sub_1002B2234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithPattern:options:error:", v6, a3, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

uint64_t sub_1002B230C(uint64_t a1, uint64_t a2)
{
  return sub_1002B2334(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10013B5E0);
}

uint64_t sub_1002B2320(uint64_t a1, uint64_t a2)
{
  return sub_1002B2334(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10013B5E0);
}

uint64_t sub_1002B2334(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t sub_1002B23AC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40), &type metadata for Substring, &protocol witness table for Substring);
  return sub_1002B252C(a1, a2, a3, a4, v9);
}

unint64_t sub_1002B2434(Swift::UInt a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_1002B2664(a1, v2);
}

unint64_t sub_1002B248C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v8, a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v6 = Hasher._finalize()();
  return sub_1002B2700(a1, a2, a3, v6);
}

unint64_t sub_1002B252C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  char v34;
  int v35;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v12 = (unint64_t *)(v11 + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v13 >> 16;
    v18 = v14 >> 16;
    v19 = a1 >> 16;
    v20 = a2 >> 16;
    v21 = v15 == a3 && v16 == a4;
    v22 = v21 && v17 == v19;
    if (!v22 || v18 != v20)
    {
      v34 = 0;
      if ((_stringCompareInternal(_:_:_:_:expecting:)(v15, v16, v17, v18, a3, a4, v19, v20, v34) & 1) == 0)
      {
        v24 = ~v7;
        do
        {
          v8 = (v8 + 1) & v24;
          if (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
            break;
          v25 = (_QWORD *)(v11 + 32 * v8);
          v26 = v25[2];
          v27 = v25[3];
          v28 = *v25 >> 16;
          v29 = v25[1] >> 16;
          v30 = v26 == a3 && v27 == a4;
          v31 = v30 && v28 == v19;
          if (v31 && v29 == v20)
            break;
          LOBYTE(v35) = 0;
        }
        while ((_stringCompareInternal(_:_:_:_:expecting:)(v26, v27, v28, v29, a3, a4, v19, v20, v35) & 1) == 0);
      }
    }
  }
  return v8;
}

unint64_t sub_1002B2664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1002B2700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  id v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  BOOL v17;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v8 = v4;
    v11 = ~v6;
    do
    {
      v14 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v7);
      v15 = v14[1];
      v16 = (void *)v14[2];
      if (v15)
      {
        if (a2)
        {
          v17 = *v14 == a1 && v15 == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v14[1], a1, a2, 0) & 1) != 0)
          {
LABEL_3:
            sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
            swift_bridgeObjectRetain();
            v12 = v16;
            v13 = static NSObject.== infix(_:_:)(v12, a3);

            swift_bridgeObjectRelease();
            if ((v13 & 1) != 0)
              return v7;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_3;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

void sub_1002B2844(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;

  v2 = _swiftEmptyArrayStorage;
  v22 = a2 < 1;
  if (a2 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = a1;
    if (__OFADD__(a1, a2))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v4 = 0;
    if (a1 <= a1 + a2)
      v5 = a1 + a2;
    else
      v5 = a1;
    v6 = &_swiftEmptyArrayStorage[4];
    while (v5 != v3)
    {
      if (!v4)
      {
        v7 = v2[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1)
          v9 = 1;
        else
          v9 = v8;
        v10 = sub_10000B4C8(&qword_100556DA8);
        v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
        v12 = j__malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 25;
        v14 = v13 >> 3;
        v11[2] = v9;
        v11[3] = 2 * (v13 >> 3);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[v16 + 4])
            memmove(v11 + 4, v2 + 4, 8 * v16);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + 8 * v16);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        swift_release(v2);
        v2 = v11;
      }
      v18 = __OFSUB__(v4--, 1);
      if (v18)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      *v6++ = v3++;
      if (v22)
        break;
    }
  }
  v19 = v2[3];
  if (v19 < 2)
    return;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v4);
  v21 = v20 - v4;
  if (v18)
  {
LABEL_35:
    __break(1u);
    return;
  }
  v2[2] = v21;
}

uint64_t sub_1002B29BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v6 = sub_1002B3D18();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)(&v17, &type metadata for Substring, &protocol witness table for Substring, v6);
  v9 = v7;
  v10 = v8;
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v12 = HIBYTE(v10) & 0xF;
    v17 = v9;
    v18 = v10 & 0xFFFFFFFFFFFFFFLL;
    v11 = (unsigned __int8 *)&v17;
    goto LABEL_7;
  }
  v9 = sub_1002B2D2C(v7, v8);
  v14 = v13;
  swift_bridgeObjectRelease();
  v10 = v14;
  if ((v14 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v9 & 0x1000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v10);
  }
LABEL_7:
  v15 = sub_1002B2AAC(v11, v12, a5);
  swift_bridgeObjectRelease();
  return v15 | ((((unint64_t)v15 >> 32) & 1) << 32);
}

unsigned __int8 *sub_1002B2AAC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B2D2C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v8 = sub_1002B2DA8(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1002B2DA8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10028B488(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1002C9790(v12, 0);
      v5 = sub_10028B574((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

BOOL sub_1002B2EEC(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String_optional v16;
  void *object;
  _BOOL8 v18;

  v10 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v10 == a3 >> 14)
  {
LABEL_10:
    object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease(a2);
    v18 = object == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = a3;
    while (1)
    {
      while (1)
      {
        v13 = Substring.subscript.getter(v11, a3, a4, a5, a6);
        v15 = v14;
        v11 = Substring.index(after:)(v11, a3, a4, a5, a6);
        v16 = String.Iterator.next()();
        if (!v16.value._object)
        {
          swift_bridgeObjectRelease(a6);
          swift_bridgeObjectRelease(v15);
          v18 = 1;
          goto LABEL_13;
        }
        if (v13 != v16.value._countAndFlagsBits || v16.value._object != v15)
          break;
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v16.value._object);
        if (v10 == v11 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease(a6);
          goto LABEL_10;
        }
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16.value._countAndFlagsBits, v16.value._object, 0);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16.value._object);
      if ((v12 & 1) == 0)
        break;
      if (v10 == v11 >> 14)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(a6);
    v18 = 0;
LABEL_13:
    object = a2;
  }
  swift_bridgeObjectRelease(object);
  return v18;
}

uint64_t sub_1002B3080(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_1002B32C4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

void sub_1002B3150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_1002ADC6C(v9, v16, a4, a5);
}

unint64_t sub_1002B3208()
{
  unint64_t result;

  result = qword_100556EE0;
  if (!qword_100556EE0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100556EE0);
  }
  return result;
}

unint64_t sub_1002B324C()
{
  unint64_t result;

  result = qword_100556F00;
  if (!qword_100556F00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for _NSRange.ConversionError, &type metadata for _NSRange.ConversionError);
    atomic_store(result, (unint64_t *)&qword_100556F00);
  }
  return result;
}

uint64_t sub_1002B3290(unsigned int *a1)
{
  uint64_t v1;

  return sub_1002B15FC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1002B32AC@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return sub_1002B1850(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_1002B32C4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_10022FF50(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_10022FF50(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_10022FF50(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unint64_t _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005152D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

unint64_t sub_1002B3734()
{
  unint64_t result;

  result = qword_100556F08;
  if (!qword_100556F08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for _NSRange.ConversionError, &type metadata for _NSRange.ConversionError);
    atomic_store(result, (unint64_t *)&qword_100556F08);
  }
  return result;
}

unint64_t sub_1002B377C()
{
  unint64_t result;

  result = qword_100556F10;
  if (!qword_100556F10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for _NSRange.NSRangeIterator, &type metadata for _NSRange.NSRangeIterator);
    atomic_store(result, (unint64_t *)&qword_100556F10);
  }
  return result;
}

unint64_t sub_1002B37C4()
{
  unint64_t result;

  result = qword_100556F18;
  if (!qword_100556F18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RomanNumerals, &type metadata for RomanNumerals);
    atomic_store(result, (unint64_t *)&qword_100556F18);
  }
  return result;
}

uint64_t sub_1002B3808()
{
  return sub_100012324(&qword_100556F20, &qword_100556F28, (const char *)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002B3838()
{
  unint64_t result;

  result = qword_100556F30[0];
  if (!qword_100556F30[0])
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NSDirectionalEdgeInsets.Edge, &type metadata for NSDirectionalEdgeInsets.Edge);
    atomic_store(result, qword_100556F30);
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Hexadecimal()
{
  return &type metadata for Data.Hexadecimal;
}

_BYTE *_s15ConversionErrorOwCP(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s15ConversionErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1002B38E4 + 4 * byte_1004370F2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002B3918 + 4 * byte_1004370ED[v4]))();
}

uint64_t sub_1002B3918(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B3920(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B3928);
  return result;
}

uint64_t sub_1002B3934(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B393CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1002B3940(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B3948(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.ConversionError()
{
  return &type metadata for _NSRange.ConversionError;
}

__n128 _s15NSRangeIteratorVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s15NSRangeIteratorVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s15NSRangeIteratorVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.NSRangeIterator()
{
  return &type metadata for _NSRange.NSRangeIterator;
}

uint64_t type metadata accessor for WeakWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakWrapper);
}

uint64_t storeEnumTagSinglePayload for RomanNumerals(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1002B3A44 + 4 * byte_1004370FC[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1002B3A78 + 4 * byte_1004370F7[v4]))();
}

uint64_t sub_1002B3A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B3A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B3A88);
  return result;
}

uint64_t sub_1002B3A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B3A9CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1002B3AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B3AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RomanNumerals()
{
  return &type metadata for RomanNumerals;
}

uint64_t _s4EdgeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002B3B10 + 4 * byte_100437106[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002B3B44 + 4 * byte_100437101[v4]))();
}

uint64_t sub_1002B3B44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B3B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B3B54);
  return result;
}

uint64_t sub_1002B3B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B3B68);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002B3B6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B3B74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSDirectionalEdgeInsets.Edge()
{
  return &type metadata for NSDirectionalEdgeInsets.Edge;
}

Swift::Int sub_1002B3B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000B4C8(&qword_100556FB8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1002B3CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100556EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002B3D18()
{
  unint64_t result;

  result = qword_100556FC0;
  if (!qword_100556FC0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100556FC0);
  }
  return result;
}

BOOL static MPModelObject.LoggingComponent.__derived_enum_less_than(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL sub_1002B3D6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1002B3D80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1002B3D94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1002B3DA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void MPModelObject.humanDescription(including:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  Swift::String v5;
  void *object;
  Swift::String v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  void **v15;
  unint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t (*v19)();
  uint64_t v20;
  _QWORD v21[2];

  v2 = v1;
  v15 = 0;
  v16 = 0xE000000000000000;
  ObjectType = swift_getObjectType();
  v5._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v21[0] = v1;
  _print_unlocked<A, B>(_:_:)(v21, &v15, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21[0] = v15;
  v21[1] = v16;
  v8 = (void *)objc_opt_self(MPModelObject);
  v9 = (_QWORD *)swift_allocObject(&unk_100516E58, 40, 7);
  v9[2] = a1;
  v9[3] = v21;
  v9[4] = v2;
  v10 = swift_allocObject(&unk_100516E80, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1002B4258;
  *(_QWORD *)(v10 + 24) = v9;
  v19 = sub_100150C04;
  v20 = v10;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100185F2C;
  v18 = &unk_100516E98;
  v11 = _Block_copy(&v15);
  v12 = v20;
  swift_bridgeObjectRetain();
  v13 = v2;
  swift_retain(v10);
  objc_msgSend(v8, "performWithoutEnforcement:", v11, swift_release(v12).n128_f64[0]);
  _Block_release(v11);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v10, "", 136, 24, 49, 1, v14);
  swift_release(v10);
  if ((v2 & 1) != 0)
    __break(1u);
  else
    swift_release(v9);
}

double sub_1002B3F88(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  objc_class *ObjCClassFromMetadata;
  objc_ivar *InstanceVariable;
  id v27;
  id v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  double result;
  _OWORD v33[2];
  _QWORD v34[2];

  v5 = swift_bridgeObjectRetain();
  v6 = sub_1002C4B60(v5);
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)&v33[0] = v6;
  sub_1002B5188((char **)v33);
  v7 = *(_QWORD *)&v33[0];
  v8 = *(_QWORD *)(*(_QWORD *)&v33[0] + 16);
  if (v8)
  {
    swift_retain(*(_QWORD *)&v33[0]);
    v9 = 0;
    while (*(_BYTE *)(v7 + v9 + 32))
    {
      if (*(_BYTE *)(v7 + v9 + 32) == 1)
      {
        *(_QWORD *)&v33[0] = 23328;
        *((_QWORD *)&v33[0] + 1) = 0xE200000000000000;
        v19 = objc_msgSend(a3, "shortDescription");
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        v23._countAndFlagsBits = v20;
        v23._object = v22;
        String.append(_:)(v23);
        swift_bridgeObjectRelease(v22);
        v24._countAndFlagsBits = 93;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        goto LABEL_4;
      }
      sub_1002B51F0();
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      InstanceVariable = class_getInstanceVariable(ObjCClassFromMetadata, "_storage");
      if (!InstanceVariable)
        goto LABEL_6;
      strcpy((char *)v34, " properties=");
      BYTE5(v34[1]) = 0;
      HIWORD(v34[1]) = -5120;
      v27 = object_getIvar(a3, InstanceVariable);
      if (v27)
      {
        v28 = v27;
        _bridgeAnyObjectToAny(_:)(v27);
        swift_unknownObjectRelease(v28);
      }
      else
      {
        memset(v33, 0, sizeof(v33));
      }
      v29 = sub_10000B4C8(&qword_1005568B0);
      v30._countAndFlagsBits = String.init<A>(describing:)(v33, v29);
      object = v30._object;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(object);
      v16 = v34[0];
      v17 = v34[1];
LABEL_5:
      v18 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease(v17);
LABEL_6:
      if (v8 == ++v9)
      {
        swift_release_n(v7, 2);
        return result;
      }
    }
    strcpy((char *)v33, " identifiers=");
    HIWORD(v33[0]) = -4864;
    v10 = objc_msgSend(a3, "identifiers");
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);

    swift_bridgeObjectRelease(v14);
LABEL_4:
    v17 = *((_QWORD *)&v33[0] + 1);
    v16 = *(_QWORD *)&v33[0];
    goto LABEL_5;
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)&v33[0]).n128_u64[0];
  return result;
}

uint64_t sub_1002B422C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

double sub_1002B4258()
{
  uint64_t v0;

  return sub_1002B3F88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1002B4264()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002B4274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002B4284(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_1002B4290()
{
  unint64_t result;

  result = qword_100556FD8;
  if (!qword_100556FD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MPModelObject.LoggingComponent, &type metadata for MPModelObject.LoggingComponent);
    atomic_store(result, (unint64_t *)&qword_100556FD8);
  }
  return result;
}

uint64_t _s16LoggingComponentOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002B4320 + 4 * byte_1004374E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002B4354 + 4 * byte_1004374E0[v4]))();
}

uint64_t sub_1002B4354(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B435C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B4364);
  return result;
}

uint64_t sub_1002B4370(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B4378);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002B437C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B4384(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.LoggingComponent()
{
  return &type metadata for MPModelObject.LoggingComponent;
}

uint64_t sub_1002B43D8()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xED0000676E6F5320;
    v4 = 0x64656C7469746E55;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v1, "album");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "shortDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x206D75626C41203BLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE800000000000000);
  }
  v17 = objc_msgSend(v1, "artist");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shortDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 0x747369747241203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease(0xE900000000000020);
  }
  return 0x22203A656C746954;
}

uint64_t sub_1002B47A0()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x8000000100449C00;
    v3 = 0xD000000000000011;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_1002B4864()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t (*v18)@<X0>(uint64_t *@<X8>);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v20 = 0x203A65707954;
  v21 = 0xE600000000000000;
  v1 = swift_allocObject(&unk_100516F60, 24, 7);
  *(_QWORD *)(v1 + 16) = v0;
  v2 = swift_allocObject(&unk_100516F88, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_1002B512C;
  *(_QWORD *)(v2 + 24) = v1;
  v18 = sub_1002B5160;
  v19 = v2;
  v3 = v0;
  v4 = sub_10000B4C8(&qword_100556FE0);
  v5._countAndFlagsBits = String.init<A>(describing:)(&v18, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2236475;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7 = objc_msgSend(v3, "anyObject", v18, v19);
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "shortDescription");

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v8 = v11;

  }
  else
  {
    v10 = 0;
  }
  v12 = Optional<A>.description.getter(v10, v8);
  v14 = v13;
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 34;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v20;
}

uint64_t sub_1002B4B58()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0x80000001004508E0;
    v4 = 0xD000000000000010;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v1, "show");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "shortDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x20776F6853203BLL;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE700000000000000);
  }
  v17 = objc_msgSend(v1, "season");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shortDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 0x6E6F73616553203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease(0xE900000000000020);
  }
  return 0x22203A656C746954;
}

id sub_1002B4E38(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_1002B4E90()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x80000001004508C0;
    v3 = 0xD000000000000010;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_1002B5108()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1002B512C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "type");
}

uint64_t sub_1002B513C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002B5160@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1002B5188(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1002C59B4((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1002B522C(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_1002B51F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556FE8;
  if (!qword_100556FE8)
  {
    v1 = objc_opt_self(MPModelObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100556FE8);
  }
  return result;
}

uint64_t sub_1002B522C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  Swift::Int v20;
  _BYTE *v21;
  unsigned int v22;
  Swift::Int v23;
  _BYTE *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  Swift::Int v94;
  uint64_t v95;
  unsigned __int8 *v96;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v78 = 0;
      v79 = *v2;
      v80 = 1;
      while (1)
      {
        v81 = *(unsigned __int8 *)(v79 + v80);
        v82 = v78;
        do
        {
          v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_144;
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v80;
        ++v78;
        if (v80 == v3)
          return result;
      }
    }
    goto LABEL_140;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_139;
  v93 = result;
  v94 = v3;
  if (v3 <= 1)
  {
    v7 = _swiftEmptyArrayStorage;
    v96 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v92 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for MPModelObject.LoggingComponent);
    *(_QWORD *)(result + 16) = v6;
    v3 = v94;
    v92 = (_QWORD *)result;
    v96 = (unsigned __int8 *)(result + 32);
  }
  v8 = 0;
  v91 = v2;
  v9 = *v2;
  v10 = (char *)_swiftEmptyArrayStorage;
  v95 = *v2;
  while (1)
  {
    v12 = v8++;
    if (v8 < v3)
    {
      v13 = *(unsigned __int8 *)(v9 + v8);
      v14 = *(unsigned __int8 *)(v9 + v12);
      v8 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = v13;
        while (1)
        {
          v16 = *(unsigned __int8 *)(v9 + v8);
          if (v13 < v14 == v16 >= v15)
            break;
          ++v8;
          v15 = v16;
          if (v3 == v8)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v8 < v12)
          goto LABEL_141;
        if (v12 < v8)
        {
          v17 = v8 - 1;
          v18 = v12;
          do
          {
            if (v18 != v17)
            {
              if (!v9)
                goto LABEL_147;
              v19 = *(_BYTE *)(v9 + v18);
              *(_BYTE *)(v9 + v18) = *(_BYTE *)(v9 + v17);
              *(_BYTE *)(v9 + v17) = v19;
            }
            v58 = ++v18 < v17--;
          }
          while (v58);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_138;
      if (v8 - v12 < v93)
      {
        v20 = v12 + v93;
        if (__OFADD__(v12, v93))
          goto LABEL_142;
        if (v20 >= v3)
          v20 = v3;
        if (v20 < v12)
          goto LABEL_143;
        if (v8 != v20)
        {
          v21 = (_BYTE *)(v9 + v8);
          do
          {
            v22 = *(unsigned __int8 *)(v9 + v8);
            v23 = v12;
            v24 = v21;
            do
            {
              v25 = *(v24 - 1);
              if (v22 >= v25)
                break;
              if (!v9)
                goto LABEL_145;
              *v24 = v25;
              *--v24 = v22;
              ++v23;
            }
            while (v8 != v23);
            ++v8;
            ++v21;
          }
          while (v8 != v20);
          v8 = v20;
        }
      }
    }
    if (v8 < v12)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1002C58A8(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v10 = (char *)result;
    }
    v27 = *((_QWORD *)v10 + 2);
    v26 = *((_QWORD *)v10 + 3);
    v11 = v27 + 1;
    v9 = v95;
    if (v27 >= v26 >> 1)
    {
      result = (uint64_t)sub_1002C58A8((char *)(v26 > 1), v27 + 1, 1, v10);
      v9 = v95;
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v11;
    v28 = v10 + 32;
    v29 = &v10[16 * v27 + 32];
    *(_QWORD *)v29 = v12;
    *((_QWORD *)v29 + 1) = v8;
    if (v27)
      break;
    v11 = 1;
LABEL_15:
    v3 = v94;
    if (v8 >= v94)
    {
      v2 = v91;
      v7 = v92;
LABEL_104:
      v92 = v7;
      if (v11 < 2)
      {
LABEL_115:
        v77 = v10;
        goto LABEL_116;
      }
      v84 = *v2;
      while (1)
      {
        v85 = v11 - 2;
        if (v11 < 2)
          break;
        if (!v84)
          goto LABEL_148;
        v76 = (uint64_t)v10;
        v86 = v10 + 32;
        v87 = *(_QWORD *)&v10[16 * v85 + 32];
        v88 = *(_QWORD *)&v10[16 * v11 + 24];
        result = sub_1002B5860((unsigned __int8 *)(v84 + v87), (unsigned __int8 *)(v84 + v86[2 * v11 - 2]), v84 + v88, v96);
        if (v1)
          goto LABEL_95;
        if (v88 < v87)
          goto LABEL_135;
        result = swift_isUniquelyReferenced_nonNull_native(v76);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1002C59A0(v76);
          v76 = result;
        }
        if (v85 >= *(_QWORD *)(v76 + 16))
          goto LABEL_136;
        v89 = (_QWORD *)(v76 + 32 + 16 * v85);
        *v89 = v87;
        v89[1] = v88;
        v90 = *(_QWORD *)(v76 + 16);
        if (v11 > v90)
          goto LABEL_137;
        result = (uint64_t)memmove((void *)(v76 + 32 + 16 * (v11 - 1)), (const void *)(v76 + 32 + 16 * v11), 16 * (v90 - v11));
        v10 = (char *)v76;
        *(_QWORD *)(v76 + 16) = v90 - 1;
        v11 = v90 - 1;
        if (v90 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      return result;
    }
  }
  while (1)
  {
    v30 = v11 - 1;
    if (v11 >= 4)
    {
      v35 = &v28[2 * v11];
      v36 = *(v35 - 8);
      v37 = *(v35 - 7);
      v41 = __OFSUB__(v37, v36);
      v38 = v37 - v36;
      if (v41)
        goto LABEL_122;
      v40 = *(v35 - 6);
      v39 = *(v35 - 5);
      v41 = __OFSUB__(v39, v40);
      v33 = v39 - v40;
      v34 = v41;
      if (v41)
        goto LABEL_123;
      v42 = v11 - 2;
      v43 = &v28[2 * v11 - 4];
      v45 = *v43;
      v44 = v43[1];
      v41 = __OFSUB__(v44, v45);
      v46 = v44 - v45;
      if (v41)
        goto LABEL_124;
      v41 = __OFADD__(v33, v46);
      v47 = v33 + v46;
      if (v41)
        goto LABEL_126;
      if (v47 >= v38)
      {
        v65 = &v28[2 * v30];
        v67 = *v65;
        v66 = v65[1];
        v41 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v41)
          goto LABEL_132;
        v58 = v33 < v68;
        goto LABEL_84;
      }
    }
    else
    {
      if (v11 != 3)
      {
        v59 = *((_QWORD *)v10 + 4);
        v60 = *((_QWORD *)v10 + 5);
        v41 = __OFSUB__(v60, v59);
        v52 = v60 - v59;
        v53 = v41;
        goto LABEL_78;
      }
      v32 = *((_QWORD *)v10 + 4);
      v31 = *((_QWORD *)v10 + 5);
      v41 = __OFSUB__(v31, v32);
      v33 = v31 - v32;
      v34 = v41;
    }
    if ((v34 & 1) != 0)
      goto LABEL_125;
    v42 = v11 - 2;
    v48 = &v28[2 * v11 - 4];
    v50 = *v48;
    v49 = v48[1];
    v51 = __OFSUB__(v49, v50);
    v52 = v49 - v50;
    v53 = v51;
    if (v51)
      goto LABEL_127;
    v54 = &v28[2 * v30];
    v56 = *v54;
    v55 = v54[1];
    v41 = __OFSUB__(v55, v56);
    v57 = v55 - v56;
    if (v41)
      goto LABEL_129;
    if (__OFADD__(v52, v57))
      goto LABEL_131;
    if (v52 + v57 >= v33)
    {
      v58 = v33 < v57;
LABEL_84:
      if (v58)
        v30 = v42;
      goto LABEL_86;
    }
LABEL_78:
    if ((v53 & 1) != 0)
      goto LABEL_128;
    v61 = &v28[2 * v30];
    v63 = *v61;
    v62 = v61[1];
    v41 = __OFSUB__(v62, v63);
    v64 = v62 - v63;
    if (v41)
      goto LABEL_130;
    if (v64 < v52)
      goto LABEL_15;
LABEL_86:
    v69 = v30 - 1;
    if (v30 - 1 >= v11)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v9)
      goto LABEL_146;
    v70 = &v28[2 * v69];
    v71 = *v70;
    v72 = v28;
    v73 = &v28[2 * v30];
    v74 = v73[1];
    result = sub_1002B5860((unsigned __int8 *)(v9 + *v70), (unsigned __int8 *)(v9 + *v73), v9 + v74, v96);
    if (v1)
      break;
    if (v74 < v71)
      goto LABEL_119;
    if (v30 > *((_QWORD *)v10 + 2))
      goto LABEL_120;
    *v70 = v71;
    v72[2 * v69 + 1] = v74;
    v75 = *((_QWORD *)v10 + 2);
    if (v30 >= v75)
      goto LABEL_121;
    v11 = v75 - 1;
    result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
    v28 = v72;
    *((_QWORD *)v10 + 2) = v75 - 1;
    v9 = v95;
    if (v75 <= 2)
      goto LABEL_15;
  }
  v76 = (uint64_t)v10;
LABEL_95:
  v77 = (char *)v76;
LABEL_116:
  swift_bridgeObjectRelease(v77);
  v92[2] = 0;
  return swift_bridgeObjectRelease(v92);
}

uint64_t sub_1002B5860(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned int v17;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = a3 - (_QWORD)__src;
  if (__src - __dst < (uint64_t)(a3 - (_QWORD)__src))
  {
    if (a4 != __dst || __src <= a4)
      memmove(a4, __dst, v8);
    v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      v6 = v7;
      if (v7 != v4)
        goto LABEL_38;
      goto LABEL_37;
    }
    while (1)
    {
      v11 = *v6;
      if (v11 >= *v4)
        break;
      v12 = v7 == v6++;
      if (!v12)
        goto LABEL_12;
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    LOBYTE(v11) = *v4;
    v12 = v7 == v4++;
    if (v12)
      goto LABEL_13;
LABEL_12:
    *v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4)
    memmove(a4, __src, a3 - (_QWORD)__src);
  v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4)
      goto LABEL_38;
    goto LABEL_37;
  }
  v13 = (unsigned __int8 *)(a3 - 1);
  v14 = v6;
  while (1)
  {
    v15 = v13 + 1;
    v17 = *--v14;
    v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      v16 = *(v10 - 1);
      v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--)
        goto LABEL_32;
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7)
      break;
    --v13;
    v6 = v14;
    if (v10 <= v4)
    {
      v6 = v14;
      goto LABEL_36;
    }
  }
  v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10)
    goto LABEL_38;
  return 1;
}

char *sub_1002B5A34(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_1002AABA0(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[16 * v7 + 32]);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1002B5B1C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_1002AACA0(result, v12, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  v8 = (*(_QWORD *)(v3 + 24) >> 1) - v7;
  result = type metadata accessor for URLQueryItem(0);
  if (v8 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy(v3+ ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v7);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    *(_QWORD *)(v3 + 16) = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *String.components(wrappedToLineLength:bullet:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a4;
  v26 = a5;
  static CharacterSet.newlines.getter(v12);
  v15 = sub_1002B3208();
  v16 = StringProtocol.components(separatedBy:)(v14, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = (char *)_swiftEmptyArrayStorage;
  v24 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      v20 = *v19;
      v25 = *(v19 - 1);
      v26 = v20;
      swift_bridgeObjectRetain();
      sub_1002B5D6C(&v24, &v25, a2, a3, a1, &v23);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      v17 = v23;
      v24 = v23;
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v16);
  }
  swift_bridgeObjectRelease(v16);
  return v17;
}

void sub_1002B5D6C(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  __n128 v26;
  char **v27;
  char *v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  Swift::String v32;
  void *v33;
  __n128 v34;
  char *v35;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::String v51;
  uint64_t v52;
  Swift::String v53;
  void *v54;
  Swift::String v55;
  void *v56;
  Swift::String v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  Swift::String v83;
  char v84[24];
  Swift::String v85;
  char *v86;

  v78 = a5;
  v74 = a4;
  v11 = type metadata accessor for CharacterSet(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v17 = *a2;
  v16 = a2[1];
  v86 = v15;
  v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v18 = v17 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v71 = a6;
    v72 = v6;
    v19 = objc_allocWithZone((Class)NSScanner);
    v77 = v11;
    v20 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v22 = v20;
    v23 = v77;
    v24 = objc_msgSend(v22, "initWithString:", v21);

    v73 = a3;
    v85._countAndFlagsBits = sub_1002B62EC(a3, v74, (uint64_t)&v86);
    v85._object = v25;
    v26 = swift_beginAccess(&v86, v84, 1, 0);
    static CharacterSet.whitespaces.getter(v26);
    v27 = (char **)NSScanner.scanUpToCharacters(from:)(v14);
    v29 = v28;
    v30 = *(void (**)(char *, uint64_t))(v12 + 8);
    v30(v14, v23);
    if (v29)
    {
      v31 = HIBYTE(v74) & 0xF;
      if ((v74 & 0x2000000000000000) == 0)
        v31 = v73 & 0xFFFFFFFFFFFFLL;
      v75 = v24;
      v76 = v31;
      while (1)
      {
        object = v85._object;
        countAndFlagsBits = v85._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v38 = String.count.getter(countAndFlagsBits, object);
        swift_bridgeObjectRelease(object);
        v39 = String.count.getter(v27, v29);
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          break;
        v41 = __OFADD__(v40, 1);
        v42 = v40 + 1;
        if (v41)
          goto LABEL_39;
        if (v42 <= v78)
        {
          v83._countAndFlagsBits = (uint64_t)v27;
          v83._object = v29;
          swift_bridgeObjectRetain();
          v32._countAndFlagsBits = 32;
          v32._object = (void *)0xE100000000000000;
          String.append(_:)(v32);
          swift_bridgeObjectRelease(v29);
          v33 = v83._object;
          String.append(_:)(v83);
          swift_bridgeObjectRelease(v33);
        }
        else
        {
          v83._countAndFlagsBits = countAndFlagsBits;
          v83._object = object;
          v81 = 606827356;
          v82 = 0xE400000000000000;
          v79 = 0;
          v80 = 0xE000000000000000;
          v43 = sub_1002B3208();
          countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v81, &v79, 1024, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v43, v43, v43);
          v38 = v44;
          swift_bridgeObjectRelease(object);
          v45 = v86;
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
            v45 = sub_1002AABA0(0, *((_QWORD *)v45 + 2) + 1, 1, v45);
          v47 = *((_QWORD *)v45 + 2);
          v46 = *((_QWORD *)v45 + 3);
          if (v47 >= v46 >> 1)
            v45 = sub_1002AABA0((char *)(v46 > 1), v47 + 1, 1, v45);
          *((_QWORD *)v45 + 2) = v47 + 1;
          v48 = &v45[16 * v47];
          *((_QWORD *)v48 + 4) = countAndFlagsBits;
          *((_QWORD *)v48 + 5) = v38;
          v86 = v45;
          if (v76)
          {
            v49 = String.count.getter(v73, v74);
            v50 = v49 + 1;
            v24 = v75;
            v23 = v77;
            if (__OFADD__(v49, 1))
              goto LABEL_40;
            v51._countAndFlagsBits = 32;
            v51._object = (void *)0xE100000000000000;
            v53 = String.init(repeating:count:)(v51, v50);
            v52 = v53._countAndFlagsBits;
            v54 = v53._object;
          }
          else
          {
            v52 = 0;
            v54 = (void *)0xE000000000000000;
            v24 = v75;
            v23 = v77;
          }
          v83._countAndFlagsBits = v52;
          v83._object = v54;
          swift_bridgeObjectRetain();
          v55._countAndFlagsBits = (uint64_t)v27;
          v55._object = v29;
          String.append(_:)(v55);
          swift_bridgeObjectRelease(v54);
          swift_bridgeObjectRelease(v29);
          v56 = v83._object;
          swift_bridgeObjectRetain();
          v57._countAndFlagsBits = 32;
          v57._object = (void *)0xE100000000000000;
          String.append(_:)(v57);
          swift_bridgeObjectRelease(v56);
          v85 = v83;
        }
        static CharacterSet.whitespaces.getter(v34);
        v27 = (char **)NSScanner.scanUpToCharacters(from:)(v14);
        v29 = v35;
        v30(v14, v23);
        if (!v29)
          goto LABEL_22;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    else
    {
LABEL_22:
      v58 = v85._object;
      v59 = ((unint64_t)v85._object >> 56) & 0xF;
      if (((uint64_t)v85._object & 0x2000000000000000) == 0)
        v59 = v85._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (!v59)
      {

        swift_bridgeObjectRelease(v58);
        v27 = v71;
LABEL_37:
        *v27 = v86;
        return;
      }
      v83 = v85;
      v81 = 606827356;
      v82 = 0xE400000000000000;
      v79 = 0;
      v80 = 0xE000000000000000;
      v60 = sub_1002B3208();
      v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v81, &v79, 1024, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v60, v60, v60);
      countAndFlagsBits = v61;
      swift_bridgeObjectRelease(v58);
      v29 = v86;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
      v27 = v71;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_26:
        v64 = *((_QWORD *)v29 + 2);
        v63 = *((_QWORD *)v29 + 3);
        if (v64 >= v63 >> 1)
          v29 = sub_1002AABA0((char *)(v63 > 1), v64 + 1, 1, v29);
        *((_QWORD *)v29 + 2) = v64 + 1;
        v65 = &v29[16 * v64];
        *((_QWORD *)v65 + 4) = v38;
        *((_QWORD *)v65 + 5) = countAndFlagsBits;
        v86 = v29;

        goto LABEL_37;
      }
    }
    v29 = sub_1002AABA0(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    goto LABEL_26;
  }
  v66 = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  if (v66)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_1002AABA0(0, v66 + 1, 1, v15);
    v68 = *((_QWORD *)v15 + 2);
    v67 = *((_QWORD *)v15 + 3);
    if (v68 >= v67 >> 1)
      v15 = sub_1002AABA0((char *)(v67 > 1), v68 + 1, 1, v15);
    *((_QWORD *)v15 + 2) = v68 + 1;
    v69 = &v15[16 * v68];
    *((_QWORD *)v69 + 4) = v17;
    *((_QWORD *)v69 + 5) = v16;
  }
  *a6 = v15;
}

uint64_t sub_1002B62EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  Swift::Int v8;
  Swift::String v9;
  Swift::String v10;
  _BYTE v11[24];

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_beginAccess(a3, v11, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)a3 + 16))
  {
    result = String.count.getter(a1, a2);
    v8 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v9._countAndFlagsBits = 32;
      v9._object = (void *)0xE100000000000000;
      return String.init(repeating:count:)(v9, v8)._countAndFlagsBits;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = 32;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return a1;
  }
  return result;
}

char *Array<A>.asciiBoxed()(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  Swift::String v38;
  void *object;
  unint64_t v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v65 = *(_QWORD *)(a1 + 16);
  if (v65)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v63 = v3;
    do
    {
      v66 = *(_QWORD **)(v3 + 8 * v4);
      v6 = v66[2];
      if (v6)
      {
        v8 = v66[4];
        v7 = v66[5];
        swift_bridgeObjectRetain();
        v9 = v6 - 1;
        if (v9)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v10 = v66 + 7;
          v1 = v7;
          do
          {
            v11 = *(v10 - 1);
            v12 = *v10;
            swift_bridgeObjectRetain();
            v2 = String.count.getter(v8, v1);
            v13 = String.count.getter(v11, v12);
            v10 += 2;
            v14 = v2 < v13;
            if (v2 < v13)
              v15 = v7;
            else
              v15 = v12;
            if (v14)
              v7 = v12;
            if (v14)
              v8 = v11;
            if (v14)
              v1 = v12;
            swift_bridgeObjectRelease(v15);
            --v9;
          }
          while (v9);
          swift_bridgeObjectRelease(v66);
          v7 = v1;
          v3 = v63;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v16 = String.count.getter(v8, v7);
        swift_bridgeObjectRelease(v66);
        swift_bridgeObjectRelease(v7);
        if (v16 > v5)
          v5 = v16;
      }
      else
      {
        v5 &= ~(v5 >> 63);
      }
      ++v4;
    }
    while (v4 != v65);
    swift_bridgeObjectRelease(a1);
    v17 = v5 + 2;
    if (__OFADD__(v5, 2))
    {
      __break(1u);
      goto LABEL_51;
    }
  }
  else
  {
    v5 = 0;
    v17 = 2;
  }
  v70 = 11376098;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v18 = sub_1002B3208();
  v19 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v21 = v20;
  v70 = v19;
  v71 = v20;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 11441634;
  v22._object = (void *)0xA300000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v2 = v71;
  v62 = v70;
  v70 = 10261730;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v23 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v25 = v24;
  v70 = v23;
  v71 = v24;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 10786018;
  v26._object = (void *)0xA300000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v1 = v71;
  if (!v65)
  {
LABEL_51:
    v28 = (char *)_swiftEmptyArrayStorage;
    v56 = v2;
    goto LABEL_52;
  }
  v59 = v70;
  swift_bridgeObjectRetain();
  v27 = 0;
  v28 = (char *)_swiftEmptyArrayStorage;
  v60 = v1;
  v61 = v2;
  do
  {
    if (v27)
      v29 = v1;
    else
      v29 = v2;
    v30 = *(_QWORD *)(a1 + 32 + 8 * v27);
    if (v27)
      v31 = v59;
    else
      v31 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v67 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_1002AABA0(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v33 = *((_QWORD *)v28 + 2);
    v32 = *((_QWORD *)v28 + 3);
    if (v33 >= v32 >> 1)
      v28 = sub_1002AABA0((char *)(v32 > 1), v33 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v33 + 1;
    v34 = &v28[16 * v33];
    *((_QWORD *)v34 + 4) = v31;
    *((_QWORD *)v34 + 5) = v29;
    v35 = *(_QWORD *)(v30 + 16);
    v64 = v30;
    if (v35)
    {
      v36 = (unint64_t *)(v30 + 40);
      do
      {
        v37 = *v36;
        v70 = *(v36 - 1);
        v71 = v37;
        v68 = 32;
        v69 = 0xE100000000000000;
        v38._countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v5, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
        object = v38._object;
        v70 = 545428706;
        v71 = 0xA400000000000000;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(object);
        v40 = v71;
        swift_bridgeObjectRetain();
        v41._countAndFlagsBits = 8557794;
        v41._object = (void *)0xA300000000000000;
        String.append(_:)(v41);
        swift_bridgeObjectRelease(v40);
        v43 = v70;
        v42 = v71;
        v45 = *((_QWORD *)v28 + 2);
        v44 = *((_QWORD *)v28 + 3);
        if (v45 >= v44 >> 1)
          v28 = sub_1002AABA0((char *)(v44 > 1), v45 + 1, 1, v28);
        v36 += 2;
        *((_QWORD *)v28 + 2) = v45 + 1;
        v46 = &v28[16 * v45];
        *((_QWORD *)v46 + 4) = v43;
        *((_QWORD *)v46 + 5) = v42;
        --v35;
      }
      while (v35);
    }
    v27 = v67 + 1;
    swift_bridgeObjectRelease(v64);
    v1 = v60;
    v2 = v61;
  }
  while (v67 + 1 != v65);
  v70 = 11572706;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v47 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v49 = v48;
  v70 = v47;
  v71 = v48;
  swift_bridgeObjectRetain();
  v50._countAndFlagsBits = 11507170;
  v50._object = (void *)0xA300000000000000;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  v51 = v70;
  v52 = v71;
  v54 = *((_QWORD *)v28 + 2);
  v53 = *((_QWORD *)v28 + 3);
  if (v54 >= v53 >> 1)
    v28 = sub_1002AABA0((char *)(v53 > 1), v54 + 1, 1, v28);
  *((_QWORD *)v28 + 2) = v54 + 1;
  v55 = &v28[16 * v54];
  *((_QWORD *)v55 + 4) = v51;
  *((_QWORD *)v55 + 5) = v52;
  swift_bridgeObjectRelease(v60);
  v1 = v61;
  v56 = a1;
LABEL_52:
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v56);
  return v28;
}

{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  v2 = sub_10000B4C8(&qword_100556FF0);
  inited = swift_initStackObject(v2, v9);
  *(_OWORD *)(inited + 16) = xmmword_100424BB0;
  *(_QWORD *)(inited + 32) = a1;
  v4 = inited + 32;
  swift_bridgeObjectRetain();
  v5 = Array<A>.asciiBoxed()(inited);
  swift_setDeallocating(inited);
  v6 = *(_QWORD *)(inited + 16);
  v7 = sub_10000B4C8(&qword_100556FF8);
  swift_arrayDestroy(v4, v6, v7);
  return v5;
}

char *Array<A>.appendStringComponents(_:lineLength:bullet:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v26 = a2;
  static CharacterSet.newlines.getter(v12);
  v15 = sub_1002B3208();
  v16 = StringProtocol.components(separatedBy:)(v14, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = (char *)_swiftEmptyArrayStorage;
  v24 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      v20 = *v19;
      v25 = *(v19 - 1);
      v26 = v20;
      swift_bridgeObjectRetain();
      sub_1002B5D6C(&v24, &v25, a4, a5, a3, &v23);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      v17 = v23;
      v24 = v23;
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v16);
  }
  swift_bridgeObjectRelease(v16);
  return sub_1002B5A34(v17);
}

uint64_t Optional<A>.isArtworkVisuallyIdentical(to:)(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = (a2 | a1) == 0;
  if (a2)
  {
    if (a1)
      return (uint64_t)objc_msgSend((id)a2, "isArtworkVisuallyIdenticalToCatalog:");
  }
  return result;
}

uint64_t MPCPlaybackIntentOptions.debugDescription.getter(char a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  if ((a1 & 1) == 0)
  {
    v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_1002AABA0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1002AABA0((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[16 * v4];
  *((_QWORD *)v5 + 4) = 0x656D6D4979616C70;
  *((_QWORD *)v5 + 5) = 0xEF796C6574616964;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1002AABA0(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = sub_1002AABA0((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = 0x6575517465736572;
    *((_QWORD *)v8 + 5) = 0xEA00000000006575;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1002AABA0(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v10 = *((_QWORD *)v2 + 2);
    v9 = *((_QWORD *)v2 + 3);
    if (v10 >= v9 >> 1)
      v2 = sub_1002AABA0((char *)(v9 > 1), v10 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v10 + 1;
    v11 = &v2[16 * v10];
    *((_QWORD *)v11 + 4) = 0x4E70556F54646461;
    *((_QWORD *)v11 + 5) = 0xEF64616548747865;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_31;
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002AABA0(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v13 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  if (v13 >= v12 >> 1)
    v2 = sub_1002AABA0((char *)(v12 > 1), v13 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v13 + 1;
  v14 = &v2[16 * v13];
  *((_QWORD *)v14 + 4) = 0x4E70556F54646461;
  *((_QWORD *)v14 + 5) = 0xEF6C696154747865;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1002AABA0(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v16 = *((_QWORD *)v2 + 2);
    v15 = *((_QWORD *)v2 + 3);
    if (v16 >= v15 >> 1)
      v2 = sub_1002AABA0((char *)(v15 > 1), v16 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v16 + 1;
    v17 = &v2[16 * v16];
    *((_QWORD *)v17 + 4) = 0x5074726174736572;
    *((_QWORD *)v17 + 5) = 0xEF6B63616279616CLL;
  }
LABEL_31:
  v18 = sub_10000B4C8(&qword_100556FF8);
  v19 = sub_1002B6FDC();
  v20 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
  v22 = v21;
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 93;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return 91;
}

uint64_t sub_1002B6E50()
{
  _QWORD *v0;

  return MPCPlaybackIntentOptions.debugDescription.getter(*v0);
}

void *MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor()
{
  return &static MPMediaLibraryFilteringOptions.none;
}

__C::MPMediaLibraryFilteringOptions __swiftcall MPMediaLibraryFilteringOptions.init(_:)(NSNumber_optional a1)
{
  Class isa;
  objc_class *v2;

  if (a1.value.super.super.isa)
  {
    isa = a1.value.super.super.isa;
    v2 = (objc_class *)-[objc_class unsignedIntegerValue](a1.value.super.super.isa, "unsignedIntegerValue");

    a1.value.super.super.isa = v2;
  }
  return (__C::MPMediaLibraryFilteringOptions)a1.value.super.super.isa;
}

uint64_t MPMediaLibraryFilteringOptions.itemRequestFilteringOptions.getter(char a1)
{
  return a1 & 2;
}

uint64_t static PropertySetCombinator.buildBlock(_:)(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t result;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = objc_msgSend((id)objc_opt_self(MPPropertySet), "emptyPropertySet");
  v3 = v2;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v2;
    result = swift_bridgeObjectRetain();
    v7 = v3;
    if (v4)
      goto LABEL_3;
LABEL_13:

    swift_bridgeObjectRelease(a1);
    return (uint64_t)v7;
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  v13 = v2;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v12);
  v4 = result;
  v7 = v3;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v8 = 0;
    v9 = v3;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v10 = *(id *)(a1 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      v7 = objc_msgSend(v9, "propertySetByCombiningWithPropertySet:", v10);

      v9 = v7;
    }
    while (v4 != v8);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_1002B6FDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100557000;
  if (!qword_100557000)
  {
    v1 = sub_100011650(&qword_100556FF8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100557000);
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertySetCombinator()
{
  return &type metadata for PropertySetCombinator;
}

uint64_t GenericMusicItem.innerMusicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for GenericMusicItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Album(0);
    v10 = v9;
    v11 = &protocol witness table for Album;
LABEL_5:
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
LABEL_19:
    v15 = sub_1000C16E0((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v15, v7, v10);
  }
  if (v8 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Artist(0);
    v10 = v9;
    v11 = &protocol witness table for Artist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for Composer(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for Composer;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557050;
    v14 = &protocol conformance descriptor for Composer;
LABEL_18:
    *(_QWORD *)(a1 + 32) = sub_10001254C(v13, v12, (uint64_t)v14);
    goto LABEL_19;
  }
  if (v8 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for CreditArtist(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for CreditArtist;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557048;
    v14 = &protocol conformance descriptor for CreditArtist;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Curator(0);
    v10 = v9;
    v11 = &protocol witness table for Curator;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for EditorialItem(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for EditorialItem;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557040;
    v14 = &protocol conformance descriptor for EditorialItem;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Genre(0);
    v10 = v9;
    v11 = &protocol witness table for Genre;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for MusicMovie(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557038;
    v14 = &protocol conformance descriptor for MusicMovie;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for MusicVideo(0);
    v10 = v9;
    v11 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Playlist(0);
    v10 = v9;
    v11 = &protocol witness table for Playlist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for RadioShow(0);
    v10 = v9;
    v11 = &protocol witness table for RadioShow;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for RecordLabel(0);
    v10 = v9;
    v11 = &protocol witness table for RecordLabel;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for SocialProfile(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for SocialProfile;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557030;
    v14 = &protocol conformance descriptor for SocialProfile;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Song(0);
    v10 = v9;
    v11 = &protocol witness table for Song;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Station(0);
    v10 = v9;
    v11 = &protocol witness table for Station;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVEpisode(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557028;
    v14 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVSeason(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557020;
    v14 = &protocol conformance descriptor for TVSeason;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVShow(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVShow;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557018;
    v14 = &protocol conformance descriptor for TVShow;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for UploadedAudio(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557010;
    v14 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for UploadedVideo(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_100557008;
    v14 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    result = swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t GenericMusicItem.catalogID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v0 = type metadata accessor for TVShow(0);
  v46 = *(_QWORD *)(v0 - 8);
  v47 = v0;
  __chkstk_darwin(v0);
  v45 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for TVSeason(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TVEpisode(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Song(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8);
  v57 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicVideo(0);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10);
  v60 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicMovie(0);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Artist(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Album(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for GenericMusicItem(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v65, v23);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if (v27 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v26, v19);
    v29 = Album.catalogID.getter(v28);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return v29;
  }
  if (v27 != enum case for GenericMusicItem.artist(_:))
  {
    if (v27 != enum case for GenericMusicItem.composer(_:)
      && v27 != enum case for GenericMusicItem.curator(_:)
      && v27 != enum case for GenericMusicItem.editorialItem(_:)
      && v27 != enum case for GenericMusicItem.genre(_:))
    {
      if (v27 == enum case for GenericMusicItem.musicMovie(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v32 = v63;
        v31 = v64;
        v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v63 + 32))(v14, v26, v64);
        v29 = MusicMovie.catalogID.getter(v33);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v31);
        return v29;
      }
      if (v27 == enum case for GenericMusicItem.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v34 = v60;
        v35 = v61;
        v36 = v62;
        v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v60, v26, v62);
        v38 = MusicVideo.catalogID.getter(v37);
LABEL_16:
        v29 = v38;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
        return v29;
      }
      if (v27 == enum case for GenericMusicItem.playlist(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v34 = v57;
        v35 = v58;
        v36 = v59;
        v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 32))(v57, v26, v59);
        v38 = Playlist.catalogID.getter(v39);
        goto LABEL_16;
      }
      if (v27 != enum case for GenericMusicItem.radioShow(_:)
        && v27 != enum case for GenericMusicItem.recordLabel(_:)
        && v27 != enum case for GenericMusicItem.socialProfile(_:))
      {
        if (v27 == enum case for GenericMusicItem.song(_:))
        {
          (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
          v34 = v54;
          v35 = v55;
          v36 = v56;
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 32))(v54, v26, v56);
          v38 = Song.catalogID.getter(v40);
          goto LABEL_16;
        }
        if (v27 != enum case for GenericMusicItem.station(_:))
        {
          if (v27 == enum case for GenericMusicItem.tvEpisode(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v51;
            v35 = v52;
            v36 = v53;
            v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))(v51, v26, v53);
            v38 = TVEpisode.catalogID.getter(v42);
            goto LABEL_16;
          }
          if (v27 == enum case for GenericMusicItem.tvSeason(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v48;
            v35 = v49;
            v36 = v50;
            v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(v48, v26, v50);
            v38 = TVSeason.catalogID.getter(v43);
            goto LABEL_16;
          }
          if (v27 == enum case for GenericMusicItem.tvShow(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v45;
            v35 = v46;
            v36 = v47;
            v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))(v45, v26, v47);
            v38 = TVShow.catalogID.getter(v44);
            goto LABEL_16;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
  v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v26, v15);
  v29 = Artist.catalogID.getter(v30);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return v29;
}

uint64_t Playlist.Entry.InternalItem.musicItem.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  int v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  unint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v23 - v9, v2, v4);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for MusicMovie(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100557038;
    v16 = &protocol conformance descriptor for MusicMovie;
LABEL_3:
    v17 = (void *)sub_10001254C(v15, v14, (uint64_t)v16);
LABEL_8:
    a1[4] = v17;
    v18 = sub_1000C16E0(a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v18, v10, v13);
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for MusicVideo(0);
    a1[3] = v13;
    v17 = &protocol witness table for MusicVideo;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for Song(0);
    a1[3] = v13;
    v17 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for TVEpisode(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100557028;
    v16 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for UploadedAudio(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100557010;
    v16 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for UploadedVideo(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_100557008;
    v16 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_3;
  }
  v11(v8, v2, v4);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(v24);
  v23 = 0xD000000000000028;
  v24 = 0x8000000100450950;
  v20 = sub_10001254C(&qword_100557058, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem, (uint64_t)&protocol conformance descriptor for Playlist.Entry.InternalItem);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v20);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, "MusicUtilities/MusicKit+Utilities.swift", 39, 2, 73, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002B80A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1002BB4F0();
  return static ApproximatelyEquatable<>.==~ infix(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t static ApproximatelyComparable<>.<~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1002B810C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t static ApproximatelyComparable<>.>~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1002B810C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.> infix(_:_:));
}

uint64_t sub_1002B810C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)(a1, a2, a3, a5) & 1) != 0)
    return 0;
  else
    return a7(a1, a2, a3, a6) & 1;
}

uint64_t Result.init(success:failure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v39 = a6;
  v38 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v38 - 8);
  v11 = __chkstk_darwin(v38);
  v13 = (char *)&v34 - v12;
  v35 = *(_QWORD *)(a4 - 8);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v14);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Result(0, a3, a4, a5);
  v36 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v34 - v21;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a1, 1, a3) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v37, v38);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v30(v19, a1, a3);
    v30(v22, (uint64_t)v19, a3);
    v31 = 0;
    v27 = v39;
    v28 = v36;
LABEL_6:
    swift_storeEnumTagMultiPayload(v22, v20, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v27, v22, v20);
    v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v29, 1, v20);
  }
  v23 = type metadata accessor for Optional(0, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
  v24 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, v37, v38);
  v25 = v35;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v13, 1, a4);
  v27 = v39;
  v28 = v36;
  if (v26 != 1)
  {
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v16, v13, a4);
    v32(v22, v16, a4);
    v31 = 1;
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v24);
  v29 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v29, 1, v20);
}

uint64_t Collection.limited(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;

  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  if (dispatch thunk of Collection.count.getter(a2, a3) > a1)
  {
    v9 = dispatch thunk of Collection.count.getter(a2, a3);
    v10 = __OFSUB__(v9, a1);
    v11 = v9 - a1;
    if (!v10)
      return Sequence.dropLast(_:)(v11, a2, *(_QWORD *)(a3 + 8));
    __break(1u);
  }
  v11 = 0;
  return Sequence.dropLast(_:)(v11, a2, *(_QWORD *)(a3 + 8));
}

uint64_t Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for Optional(0, a4);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002B84F8, 0, 0);
}

void sub_1002B84F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v12 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v8 = dispatch thunk of Collection.count.getter(v7, v5);
  v9 = sub_1002A544C(v1, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  *(_QWORD *)(v0 + 16) = v9;
  swift_getTupleTypeMetadata2(0, &type metadata for Int, v6, 0, 0);
  v10 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 104) = v10;
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v6;
  *(_QWORD *)(v10 + 32) = v5;
  *(_QWORD *)(v10 + 40) = v3;
  *(_OWORD *)(v10 + 48) = v12;
  *(_QWORD *)(v10 + 64) = v0 + 16;
  *(_QWORD *)&v12 = (char *)&dword_100557078 + dword_100557078;
  v11 = (_QWORD *)swift_task_alloc(unk_10055707C);
  *(_QWORD *)(v0 + 112) = v11;
  *v11 = v0;
  v11[1] = sub_1002B864C;
  __asm { BR              X0; sub_1002B92D8 }
}

uint64_t sub_1002B864C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002B87A4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_1002B86B8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002B86B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc(48);
  v8 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v8;
  v4 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
  v6 = Sequence.compactMap<A>(_:)(sub_1002BA9F8, v3, v4, v8, WitnessTable);
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_1002B87A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B87E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v8[9] = a8;
  v8[10] = v31;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v11 = type metadata accessor for Optional(0, a8);
  v8[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v31 + 8);
  v8[14] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13);
  v8[15] = AssociatedTypeWitness;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[16] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v8[17] = v16;
  v8[18] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000B4C8(&qword_100556AE0);
  v8[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a8, 0, 0);
  v8[20] = TupleTypeMetadata2;
  v19 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v8[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100011650(&qword_100556360);
  v8[22] = v20;
  v21 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))type metadata accessor for ThrowingTaskGroup.Iterator)(0, TupleTypeMetadata2, v20, &protocol self-conformance witness table for Error);
  v8[23] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v8[24] = v22;
  v8[25] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_getTupleTypeMetadata2(255, &type metadata for Int, AssociatedTypeWitness, "offset element ", 0);
  v8[26] = v23;
  v24 = type metadata accessor for Optional(0, v23);
  v8[27] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v8[28] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[29] = swift_task_alloc(v26);
  v8[30] = swift_task_alloc(v26);
  v27 = type metadata accessor for EnumeratedSequence(0, a7, v13);
  v8[31] = v27;
  v8[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for EnumeratedSequence.Iterator(0, a7, v13);
  v8[33] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v8[34] = v29;
  v8[35] = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002B8A34, 0, 0);
}

uint64_t sub_1002B8A34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  Swift::Int v22;
  __C::_NSRange v23;
  __C::_NSRange v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0[31];
  v34 = v0[26];
  v27 = v0[16];
  v28 = v0[28];
  Sequence.enumerated()(v0[8], v0[14]);
  EnumeratedSequence.makeIterator()(v1);
  while (1)
  {
    v3 = v0[29];
    v2 = v0[30];
    v5 = v0[26];
    v4 = v0[27];
    EnumeratedSequence.Iterator.next()(v0[33]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v2, v3, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v2, 1, v5) == 1)
      break;
    v6 = (uint64_t *)v0[30];
    v7 = v0[19];
    v32 = v0[20];
    v33 = v0[22];
    v8 = v0[17];
    v9 = (char *)v0[18];
    v10 = v0[15];
    v11 = v0[6];
    v30 = v0[10];
    v31 = v0[5];
    v12 = (char *)v6 + *(int *)(v34 + 48);
    v13 = *v6;
    v14 = type metadata accessor for TaskPriority(0);
    v29 = *((_OWORD *)v0 + 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    v15 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v15(v9, v12, v10);
    v16 = *(unsigned __int8 *)(v27 + 80);
    v17 = (v16 + 80) & ~v16;
    v18 = swift_allocObject(&unk_100517108, v17 + v8, v16 | 7);
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_OWORD *)(v18 + 32) = v29;
    *(_QWORD *)(v18 + 48) = v30;
    *(_QWORD *)(v18 + 56) = v13;
    *(_QWORD *)(v18 + 64) = v31;
    *(_QWORD *)(v18 + 72) = v11;
    v15((char *)(v18 + v17), v9, v10);
    type metadata accessor for ThrowingTaskGroup(0, v32, v33, &protocol self-conformance witness table for Error);
    swift_retain(v11);
    sub_1002B9154(v7, (uint64_t)&unk_100557118, v18);
    sub_1002A61DC(v7);
  }
  v19 = v0[22];
  v20 = v0[20];
  v21 = (_QWORD *)v0[3];
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[35], v0[33]);
  ThrowingTaskGroup.makeAsyncIterator()(*v21, v20, v19, &protocol self-conformance witness table for Error);
  v22 = type metadata accessor for Array(0);
  v0[36] = v22;
  Array._makeMutableAndUnique()();
  v23.location = v22;
  CFRange.init(_:)(v23);
  Array._makeMutableAndUnique()();
  v24.location = v22;
  CFRange.init(_:)(v24);
  v25 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[37] = v25;
  *v25 = v0;
  v25[1] = sub_1002B8CDC;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[21], 0, 0, v0[23], v0 + 2);
}

uint64_t sub_1002B8CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  if (v0)
    v2 = sub_1002B8F84;
  else
    v2 = sub_1002B8D40;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002B8D40()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __C::_NSRange v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(unint64_t **)(v0 + 168);
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v7, *(_QWORD *)(v0 + 184));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v2);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(uint64_t **)(v0 + 56);
    v18 = *v2;
    v19 = (char *)v2 + *(int *)(v1 + 48);
    v20 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v14, v19, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v16);
    Array._makeMutableAndUnique()();
    v21 = *v17;
    sub_1002A53FC(v18, *v17, v15);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 40))(v21+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v18, v14, v15);
    v22.location = v12;
    CFRange.init(_:)(v22);
    v23 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 304) = v23;
    *v23 = v0;
    v23[1] = sub_1002B8F20;
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 184), v0 + 16);
  }
}

uint64_t sub_1002B8F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 304));
  if (v0)
    v2 = sub_1002B8F84;
  else
    v2 = sub_1002B8D40;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002B8F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v5, *(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B904C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[6] = a7;
  v7[7] = v9;
  v7[4] = a5;
  v7[5] = a6;
  v7[2] = a1;
  v7[3] = a4;
  return swift_task_switch(sub_1002B9074, 0, 0);
}

uint64_t sub_1002B9074()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int *v7;

  v2 = v0[3];
  v1 = (int *)v0[4];
  v3 = (_QWORD *)v0[2];
  v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2(0, &type metadata for Int, v0[7], 0, 0) + 48);
  *v3 = v2;
  v7 = (int *)((char *)v1 + *v1);
  v5 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_1002B910C;
  return ((uint64_t (*)(char *, _QWORD))v7)(v4, v0[6]);
}

uint64_t sub_1002B910C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_1002B9154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  double result;
  _QWORD v26[3];
  _QWORD v27[4];

  v4 = v3;
  v7 = sub_10000B4C8(&qword_100556AE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002A5DB4(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if ((_DWORD)v12 == 1)
  {
    sub_1002A61DC((uint64_t)v9);
    v13 = 12544;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14)
    {
LABEL_3:
      v15 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v14);
      v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      v19 = v18;
      swift_unknownObjectRelease(v14);
      goto LABEL_6;
    }
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v13 = v20 | 0x3100;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14)
      goto LABEL_3;
  }
  v17 = 0;
  v19 = 0;
LABEL_6:
  v21 = *v4;
  v22 = (_QWORD *)(v19 | v17);
  if (v19 | v17)
  {
    v27[0] = 0;
    v27[1] = 0;
    v22 = v27;
    v27[2] = v17;
    v27[3] = v19;
  }
  v26[0] = 1;
  v26[1] = v22;
  v26[2] = v21;
  v23 = swift_task_create(v13, v26);
  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  return result;
}

uint64_t sub_1002B92D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (sub_10041ADEC(2, 18, 0, 0))
  {
    v18 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v9 + 24) = v18;
    *v18 = v9;
    v18[1] = sub_1000BBBCC;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100557108 + dword_100557108);
    v20 = (_QWORD *)swift_task_alloc(unk_10055710C);
    *(_QWORD *)(v9 + 16) = v20;
    *v20 = v9;
    v20[1] = sub_10000DC64;
    return v21(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL Collection<>.contains(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BOOL8 v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v16[-v12];
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a1;
  Sequence.first(where:)(sub_1002BAA4C, v16, a2, v8);
  v14 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v13, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  return v14;
}

uint64_t Collection<>.first(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.first(where:)(sub_1002BAA4C, v5, a2, *(_QWORD *)(a3 + 8));
}

_QWORD *Collection<>.firstIndex(approximatelyMatching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD v6[8];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a1;
  return Collection.firstIndex(where:)(a5, sub_1002BAA4C, v6, a2, a3);
}

uint64_t static DisplayUnit.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a1;
  v35 = a2;
  v36 = *(_QWORD *)(a3 - 8);
  v4 = __chkstk_darwin(a1);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v31 = (char *)&v31 - v6;
  v33 = v7;
  v9 = type metadata accessor for DisplayUnit(0, v8, v7, v7);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, 0, 0);
  v17 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v18 = __chkstk_darwin(TupleTypeMetadata2);
  v20 = (char *)&v31 - v19;
  v21 = (char *)&v31 + *(int *)(v18 + 48) - v19;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22((char *)&v31 - v19, v34, v9);
  v22(v21, v35, v9);
  if (swift_getEnumCaseMultiPayload(v20, v9) != 1)
  {
    v22(v15, (uint64_t)v20, v9);
    if (swift_getEnumCaseMultiPayload(v21, v9) != 1)
    {
      v28 = v36;
      v29 = v31;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v31, v21, a3);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v29, a3, v33);
      v26 = *(void (**)(char *, uint64_t))(v28 + 8);
      v26(v29, a3);
      v27 = v15;
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, a3);
    v25 = 0;
    v10 = v17;
    v9 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v22(v13, (uint64_t)v20, v9);
  if (swift_getEnumCaseMultiPayload(v21, v9) != 1)
  {
    v15 = v13;
    goto LABEL_8;
  }
  v23 = v36;
  v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v21, a3);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v24, a3, v33);
  v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v24, a3);
  v27 = v13;
LABEL_6:
  v26(v27, a3);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
  return v25 & 1;
}

uint64_t sub_1002B985C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DisplayUnit.__derived_enum_equals(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t ClosedRange<>.linearMap(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v23 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v23 - v16, v4, v8);
  v18 = v4 + *(int *)(a2 + 36);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  v20 = *(_QWORD *)(v19 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v18, v4, v8, v20);
  dispatch thunk of static Numeric.* infix(_:_:)(a1, v12, v8, v19);
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v17, v15, v8, v20);
  v21(v15, v8);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v8);
}

uint64_t ClosedRange<>.normalize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v19 - v13;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 16) + 8) + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v12, v4, v7, v16);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v4 + *(int *)(a2 + 36), v4, v7, v16);
  dispatch thunk of static FloatingPoint./ infix(_:_:)(v14, v11, v7, a3);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v7);
}

uint64_t ClosedRange<>.clampedNormalize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosedRange.clamp(_:)(v7, v10);
  ClosedRange<>.normalize(_:)((uint64_t)v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t Array.extract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], a3);
  v8 = _ArrayProtocol.filter(_:)(a1, a2, a3, WitnessTable);
  if (!v3)
  {
    v9 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], a3);
    v10 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], a3);
    RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, v9, v10);
  }
  return v8;
}

uint64_t Array.extractFirst(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v13;
  char v14;

  v10 = *v4;
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], a3);
  Collection.firstIndex(where:)(&v13, a1, a2, a3, WitnessTable);
  result = swift_bridgeObjectRelease(v10);
  if (!v5)
  {
    if ((v14 & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a4, 1, 1);
    }
    else
    {
      Array.remove(at:)(v13, a3);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a4, 0, 1);
    }
  }
  return result;
}

uint64_t Array.removingDuplicates<A>(with:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  _QWORD v11[7];
  uint64_t v12;

  v6 = Set.init()(*(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8), a3);
  v11[6] = a2;
  v12 = v6;
  v11[2] = a3;
  v11[3] = &v12;
  v11[4] = a1;
  v7 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v7);
  v9 = _ArrayProtocol.filter(_:)(sub_1002BAADC, v11, v7, WitnessTable);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1002B9DF8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v5 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v16 - v11;
  swift_getAtKeyPath(v10, v13);
  v14 = type metadata accessor for Set(0, v5, a4);
  LOBYTE(a4) = Set.insert(_:)(v12, v9, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return a4 & 1;
}

uint64_t Collection.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = Set.init()(*(_QWORD *)(class metadata base offset for KeyPath + v12 + 8), v13);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = &v22;
  v21 = a1;
  v14 = Sequence.filter(_:)(sub_1002BAAFC, v16, a2, *(_QWORD *)(a3 + 8));
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1002B9FD0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v7 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)v18 - v13;
  swift_getAtKeyPath(v12, v15);
  v16 = type metadata accessor for Set(0, v7, a6);
  LOBYTE(a6) = Set.insert(_:)(v14, v11, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return a6 & 1;
}

uint64_t Sequence.sorted<A>(by:comparator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[10];

  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  v7[5] = a2;
  v7[6] = a3;
  v7[7] = a1;
  return Sequence.sorted(by:)(sub_1002BAB20, v7, a4, a5);
}

uint64_t sub_1002BA104(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v5 = a5;
  v8 = *(_QWORD *)(class metadata base offset for KeyPath + *a5 + 8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v19 - v14;
  swift_getAtKeyPath(v13, v16);
  swift_getAtKeyPath(a2, v5);
  LOBYTE(v5) = a3(v15, v12);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  v17(v15, v8);
  return v5 & 1;
}

uint64_t Sequence<>.excluding(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject(&unk_1005170E0, 48, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_bridgeObjectRetain();
  v9 = Sequence.exclude(_:)((uint64_t)sub_1002BB5AC, (uint64_t)v8, a2, a3);
  swift_release(v8);
  return v9;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v8 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v8);
  v10 = Set.init<A>(_:)(&v14, AssociatedTypeWitness, v8, a4, WitnessTable);
  v11 = (_QWORD *)swift_allocObject(&unk_1005170B8, 48, 7);
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = v10;
  v12 = Sequence.exclude(_:)((uint64_t)sub_1002BB558, (uint64_t)v11, a2, a3);
  swift_release(v11);
  return v12;
}

uint64_t sub_1002BA29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t WitnessTable;

  swift_getAssociatedTypeWitness(255, a4);
  v7 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v7);
  return Sequence<>.contains(_:)(a1, v7, WitnessTable, a5) & 1;
}

uint64_t Sequence.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  __chkstk_darwin(a1);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(&v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  v13 = a3;
  v14 = a4;
  v15 = a1;
  v16 = a2;
  return Sequence.filter(_:)(sub_1002BAB44, v12, a3, a4);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_1002BAB6C, (uint64_t)v5, a2, a3);
}

{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_1002BABE8, (uint64_t)v5, a2, a3);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_1002BABD4, (uint64_t)v4, a2, a3);
}

uint64_t sub_1002BA5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    ObjectType = swift_getObjectType();
    v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a5);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(sub_1002BA620, v11, v13);
}

uint64_t sub_1002BA620()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[38];
  v2 = (int *)v0[36];
  swift_taskGroup_initialize(v0 + 2, v1);
  v3 = sub_10000B4C8(&qword_100556360);
  v0[41] = v3;
  v0[34] = ThrowingTaskGroup.init(group:)(v0 + 2, v1, v3, &protocol self-conformance witness table for Error);
  v6 = (int *)((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[42] = v4;
  *v4 = v0;
  v4[1] = sub_1002BA6D4;
  return ((uint64_t (*)(_QWORD, _QWORD *))v6)(v0[35], v0 + 34);
}

uint64_t sub_1002BA6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v3 = *(_QWORD **)v1;
  v3[43] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1002BA79C, v3[39], v3[40]);
  v5 = v3[41];
  v6 = v3[38];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.awaitAllRemainingTasks()[1]);
  v3[45] = v7;
  v8 = type metadata accessor for ThrowingTaskGroup(0, v6, v5, &protocol self-conformance witness table for Error);
  *v7 = v3;
  v7[1] = sub_1002BA8C4;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v8);
}

uint64_t sub_1002BA79C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[41];
  v2 = v0[38];
  ThrowingTaskGroup.cancelAll()();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.awaitAllRemainingTasks()[1]);
  v0[44] = v3;
  v4 = type metadata accessor for ThrowingTaskGroup(0, v2, v1, &protocol self-conformance witness table for Error);
  *v3 = v0;
  v3[1] = sub_1002BA834;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v4);
}

uint64_t sub_1002BA834()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  return swift_task_switch(sub_1002BA880, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_1002BA880()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_taskGroup_destroy(v0 + 16);
  swift_willThrow(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002BA8C4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 360));
  return swift_task_switch(sub_1002BA910, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_1002BA910()
{
  uint64_t v0;

  swift_taskGroup_destroy(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002BA944()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10055706C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100012D1C;
  __asm { BR              X9; sub_1002B87E8 }
}

uint64_t sub_1002BA9F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
}

uint64_t sub_1002BAA4C(uint64_t a1)
{
  return sub_1002BAA64(a1) & 1;
}

uint64_t sub_1002BAA64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v3 + 8));
  return dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)(a1, v4, AssociatedTypeWitness, v5) & 1;
}

uint64_t type metadata accessor for DisplayUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DisplayUnit);
}

uint64_t sub_1002BAADC(uint64_t a1)
{
  uint64_t v1;

  return sub_1002B9DF8(a1, *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1002BAAFC(uint64_t a1)
{
  uint64_t v1;

  return sub_1002B9FD0(a1, *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_1002BAB20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002BA104(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD **)(v2 + 56)) & 1;
}

BOOL sub_1002BAB44()
{
  uint64_t v0;

  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_1002BAB6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v4, AssociatedTypeWitness, v5) & 1;
}

BOOL sub_1002BABD4(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 32);
}

uint64_t sub_1002BABE8(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[3];
  v4 = v1[4];
  v3 = v1[5];
  v5 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  v8 = v3;
  v9 = v5;
  return dispatch thunk of static Equatable.== infix(_:_:)(&v9, &v8, AssociatedTypeWitness, v4) & 1;
}

uint64_t sub_1002BAC5C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_1002BACC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    *((_BYTE *)v3 + v5) = v10 == 1;
  }
  else
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain(v9);
  }
  return v3;
}

uint64_t sub_1002BADC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 16))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_1002BAE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t sub_1002BAF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 32))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_1002BB028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t sub_1002BB110(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 < 0xFF)
    goto LABEL_19;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_19:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_19;
LABEL_12:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1002BB1C8 + 4 * byte_100437659[(v4 - 1)]))();
}

void sub_1002BB214(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1002BB3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1002BB3EC + 4 * byte_100437667[v3]))();
}

void sub_1002BB434(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_1002BB4F0()
{
  unint64_t result;

  result = qword_100557100;
  if (!qword_100557100)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100557100);
  }
  return result;
}

uint64_t sub_1002BB534()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002BB558(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3);
  return Set.contains(_:)(a1, v4, AssociatedTypeWitness, v5);
}

uint64_t sub_1002BB5AC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002BA29C(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_1002BB5B8()
{
  char *v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(*((_QWORD *)v0 + 6) + 8));
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  v7 = swift_release(*((_QWORD *)v0 + 9));
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(&v0[v4], AssociatedTypeWitness, v7);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1002BB650()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  swift_getAssociatedTypeWitness(0, *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8));
  v2 = (_QWORD *)swift_task_alloc(dword_100557114);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000DC64;
  __asm { BR              X9; sub_1002B904C }
}

uint64_t Text.withChevron<A>(_:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  NSString v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;

  v54 = a4;
  v53 = a5 & 1;
  v16 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v20, v19);

  if (v21)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 2);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v22);
    v23._countAndFlagsBits = 41154;
    v23._object = (void *)0xA200000000000000;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v23);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
    v25 = Image.init(uiImage:)(objc_msgSend(v21, "imageWithRenderingMode:", 2));
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release(v25);
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
    v27 = LocalizedStringKey.init(stringInterpolation:)(v18);
    v28 = Text.init(_:tableName:bundle:comment:)(v27);
    v30 = v29;
    v52 = a9;
    v31 = a6;
    v33 = v32 & 1;
    v35 = Text.foregroundStyle<A>(_:)(a2, v28, v29, v33, v34, a7, a8);
    v51 = v21;
    v37 = v36;
    v39 = v38;
    v41 = v40 & 1;
    sub_10001DA20(v28, v30, v33);
    swift_bridgeObjectRelease();
    v42 = v31;
    a9 = v52;
    v43 = static Text.+ infix(_:_:)(a3, v54, v53, v42, v35, v37, v41, v39);
    v45 = v44;
    LOBYTE(v30) = v46;
    a6 = v47;

    v48 = v30 & 1;
    sub_10001DA20(v35, v37, v41);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a9 = v43;
  }
  else
  {
    *(_QWORD *)a9 = a3;
    v45 = v54;
    v48 = v53;
    sub_10002EBA0(a3, v54, v53);
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a9 + 8) = v45;
  *(_BYTE *)(a9 + 16) = v48;
  *(_QWORD *)(a9 + 24) = a6;
  return result;
}

uint64_t Text.playableForegroundStyle<A>(_:isPlayable:)(int *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v29;
  int v30;
  int v31;

  __chkstk_darwin(a1);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, int *, uint64_t))(v18 + 16))(v17, a1, v19);
  if (swift_dynamicCast(&v31, v17, a7, &type metadata for HierarchicalShapeStyle, 6))
  {
    if ((a2 & 1) != 0)
      v20 = v31;
    else
      v20 = static HierarchicalShapeStyle.tertiary.getter();
    v30 = v20;
    v21 = a5 & 1;
    v26 = &type metadata for HierarchicalShapeStyle;
    v27 = &protocol witness table for HierarchicalShapeStyle;
    v22 = &v30;
    v23 = a3;
    v24 = a4;
    v25 = a6;
  }
  else
  {
    v21 = a5 & 1;
    v22 = a1;
    v23 = a3;
    v24 = a4;
    v25 = a6;
    v26 = a7;
    v27 = a8;
  }
  return Text.foregroundStyle<A>(_:)(v22, v23, v24, v21, v25, v26, v27);
}

uint64_t View.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;

  v19 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlayableForegroundStyle(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v11, a4);
  v17[*(int *)(v14 + 36)] = a2;
  View.modifier<A>(_:)(v17, a3, v14, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for PlayableForegroundStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlayableForegroundStyle);
}

uint64_t sub_1002BBC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _DWORD v82[3];

  v68 = a1;
  v73 = a3;
  WitnessTable = swift_getWitnessTable(byte_1004377C0);
  v5 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v6 = *(_QWORD *)(a2 + 16);
  v64 = *(_QWORD *)(a2 + 24);
  v72 = type metadata accessor for _ForegroundStyleModifier(255, v6);
  v7 = type metadata accessor for ModifiedContent(0, v5, v72);
  v65 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v66 = (char *)&v63 - v11;
  v12 = sub_100011650(&qword_100557238);
  v69 = v5;
  v13 = type metadata accessor for ModifiedContent(0, v5, v12);
  v63 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v63 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v63 - v21;
  v23 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v20);
  v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for _ConditionalContent(0, v13, v7);
  v70 = *(_QWORD *)(v26 - 8);
  v71 = v26;
  __chkstk_darwin(v26);
  v67 = (char *)&v63 - v27;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v29 = v74;
  v28(v25, v74, v6);
  if (swift_dynamicCast(v82, v25, v6, &type metadata for HierarchicalShapeStyle, 6))
  {
    v66 = v16;
    v65 = v7;
    v30 = v69;
    v31 = v22;
    v32 = v63;
    if ((*(_BYTE *)(v29 + *(int *)(a2 + 36)) & 1) != 0)
      v33 = v82[0];
    else
      v33 = static HierarchicalShapeStyle.quaternary.getter();
    v82[0] = v33;
    v46 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ViewModifier_Content<A>, v30);
    View.foregroundStyle<A>(_:)(v82, v30, &type metadata for HierarchicalShapeStyle, v46, &protocol witness table for HierarchicalShapeStyle);
    v47 = sub_100012324(&qword_100557240, &qword_100557238, (const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    v76[0] = v46;
    v76[1] = v47;
    v48 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v13, v76);
    v49 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v49(v31, v19, v13);
    v50 = v31;
    v40 = *(void (**)(char *, uint64_t))(v32 + 8);
    v40(v19, v13);
    v51 = (uint64_t)v66;
    v49(v66, v50, v13);
    v35 = v72;
    v52 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>, v72);
    v75[0] = v46;
    v75[1] = v52;
    v7 = v65;
    v53 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v65, v75);
    v43 = v67;
    sub_1000D6B5C(v51, v13, v7, v48, v53);
    v40((char *)v51, v13);
    v44 = v50;
    v45 = v13;
  }
  else
  {
    v30 = v69;
    v34 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ViewModifier_Content<A>, v69);
    View.foregroundStyle<A>(_:)(v29, v30, v6, v34, v64);
    v35 = v72;
    v36 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>, v72);
    v81[0] = v34;
    v81[1] = v36;
    v74 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v7, v81);
    v37 = v65;
    v38 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
    v39 = v66;
    v38(v66, v10, v7);
    v40 = *(void (**)(char *, uint64_t))(v37 + 8);
    v40(v10, v7);
    v38(v10, v39, v7);
    v41 = sub_100012324(&qword_100557240, &qword_100557238, (const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    v80[0] = v34;
    v80[1] = v41;
    v42 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v13, v80);
    v43 = v67;
    sub_1000D6C20((uint64_t)v10, v13, v7, v42, v74);
    v40(v10, v7);
    v44 = v39;
    v45 = v7;
  }
  v40(v44, v45);
  v54 = v73;
  v56 = v70;
  v55 = v71;
  v57 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ViewModifier_Content<A>, v30);
  v58 = sub_100012324(&qword_100557240, &qword_100557238, (const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v79[0] = v57;
  v79[1] = v58;
  v59 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v13, v79);
  v60 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>, v35);
  v78[0] = v57;
  v78[1] = v60;
  v61 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v7, v78);
  v77[0] = v59;
  v77[1] = v61;
  swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v55, v77);
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v54, v43, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v43, v55);
}

uint64_t ListChevron.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = swift_allocObject(&unk_100517158, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain(a2);
  v5 = sub_10000B4C8(&qword_100557120);
  v6 = sub_1002BC6F8();
  return Button.init(action:label:)(sub_1000D75E8, v4, sub_1002BC248, 0, v5, v6);
}

uint64_t sub_1002BC224()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002BC248@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  double v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v54 = a1;
  v52 = sub_10000B4C8(&qword_100557148);
  __chkstk_darwin(v52);
  v59 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Image.Scale(0);
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000B4C8(&qword_100557248);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_100557140);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000B4C8(&qword_100557250);
  v50 = *(_QWORD *)(v11 - 8);
  v51 = v11;
  __chkstk_darwin(v11);
  v49 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000B4C8(&qword_100557138);
  __chkstk_darwin(v13);
  v53 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v16 = static Font.body.getter(v15);
  KeyPath = swift_getKeyPath(&unk_100437810);
  v60 = v15;
  v61 = KeyPath;
  v62 = v16;
  v18 = static Font.Weight.semibold.getter(KeyPath);
  v19 = sub_10000B4C8(&qword_100557158);
  v20 = sub_1002BC918();
  View.fontWeight(_:)(*(_QWORD *)&v18, 0, v19, v20);
  swift_release(v16);
  swift_release(KeyPath);
  v21 = swift_release(v15);
  v23 = v55;
  v22 = v56;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v55 + 104))(v4, enum case for Image.Scale.small(_:), v56, v21);
  v24 = swift_getKeyPath(&unk_100437840);
  v25 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  v26 = sub_10000B4C8(&qword_100557180);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v25 + *(int *)(v26 + 28), v4, v22);
  *v25 = v24;
  v28 = v57;
  v27 = v58;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v10, v7, v58);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v22);
  v29 = v7;
  v30 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  v31 = enum case for DynamicTypeSize.accessibility1(_:);
  v32 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  v33 = sub_10001254C(&qword_100557258, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v30, v30, v32, v33);
  if ((result & 1) != 0)
  {
    v35 = sub_1002BC86C();
    v36 = sub_100012324(&qword_100557188, &qword_100557148, (const char *)&protocol conformance descriptor for PartialRangeThrough<A>);
    v37 = v49;
    v38 = v52;
    View.dynamicTypeSize<A>(_:)(v30, v8, v52, v35, v36);
    sub_100011694(v30, &qword_100557148);
    sub_100011694((uint64_t)v10, &qword_100557140);
    v60 = v8;
    v61 = v38;
    v62 = v35;
    v63 = v36;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v40 = (uint64_t)v53;
    v41 = v51;
    View.accessibilityHidden(_:)(1, v51, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v41);
    v42 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v43 = Color.init(uiColor:)(v42);
    v44 = swift_getKeyPath(&unk_100437870);
    v60 = v43;
    swift_retain(v43);
    v45 = AnyShapeStyle.init<A>(_:)(&v60, &type metadata for Color, &protocol witness table for Color);
    v46 = v54;
    sub_1002BD05C(v40, v54);
    swift_release(v43);
    v47 = (uint64_t *)(v46 + *(int *)(sub_10000B4C8(&qword_100557120) + 36));
    *v47 = v44;
    v47[1] = v45;
    return sub_100011694(v40, &qword_100557138);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002BC6F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100557128;
  if (!qword_100557128)
  {
    v1 = sub_100011650(&qword_100557120);
    v2[0] = sub_1002BC77C();
    v2[1] = sub_100012324(&qword_100557198, &qword_1005571A0, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100557128);
  }
  return result;
}

unint64_t sub_1002BC77C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[4];

  result = qword_100557130;
  if (!qword_100557130)
  {
    v1 = sub_100011650(&qword_100557138);
    v3[0] = sub_100011650(&qword_100557140);
    v3[1] = sub_100011650(&qword_100557148);
    v3[2] = sub_1002BC86C();
    v3[3] = sub_100012324(&qword_100557188, &qword_100557148, (const char *)&protocol conformance descriptor for PartialRangeThrough<A>);
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v2[1] = sub_10001254C(&qword_100557190, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100557130);
  }
  return result;
}

unint64_t sub_1002BC86C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[2];

  result = qword_100557150;
  if (!qword_100557150)
  {
    v1 = sub_100011650(&qword_100557140);
    v3[0] = sub_100011650(&qword_100557158);
    v3[1] = sub_1002BC918();
    v2[0] = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v2[1] = sub_100012324(&qword_100557178, &qword_100557180, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100557150);
  }
  return result;
}

unint64_t sub_1002BC918()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100557160;
  if (!qword_100557160)
  {
    v1 = sub_100011650(&qword_100557158);
    v2[0] = &protocol witness table for Image;
    v2[1] = sub_100012324(&qword_100557168, &qword_100557170, (const char *)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_100557160);
  }
  return result;
}

uint64_t sub_1002BC99C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v0;
  v1 = v0[1];
  v3 = swift_allocObject(&unk_100517258, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain(v1);
  v4 = sub_10000B4C8(&qword_100557120);
  v5 = sub_1002BC6F8();
  return Button.init(action:label:)(sub_1000DC31C, v3, sub_1002BC248, 0, v4, v5);
}

uint64_t _UIHostingView.init(content:)(uint64_t a1)
{
  void (*v1)(void);
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = (void (*)(void))__chkstk_darwin(a1);
  v3 = (char *)&v5 - v2;
  v1();
  return dispatch thunk of _UIHostingView.__allocating_init(rootView:)(v3);
}

uint64_t sub_1002BCA98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListChevron.body>>, 1);
}

ValueMetadata *type metadata accessor for ListChevron()
{
  return &type metadata for ListChevron;
}

void *sub_1002BCAB8()
{
  return &protocol witness table for Text;
}

uint64_t sub_1002BCAC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for PlayableForegroundStyle(255, a1[1], a1[3], a4);
  v7 = type metadata accessor for ModifiedContent(255, v4, v6);
  v9[0] = v5;
  v9[1] = swift_getWitnessTable(byte_1004377C0, v6);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v7, v9);
}

uint64_t sub_1002BCB3C()
{
  return sub_100012324(&qword_1005571A8, qword_1005571B0, (const char *)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_1002BCB68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100437798;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_1002BCBDC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1002BCC9C + 4 * byte_100437700[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_1002BCD10(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1002BCEE8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100489C08, 1);
}

uint64_t sub_1002BCF1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002BCF44(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1002BCF6C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1002BCF8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_1002BD00C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002BD034(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_1002BD05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100557138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BD0A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];

  v4 = *a1;
  v5 = type metadata accessor for PlayableForegroundStyle(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(byte_1004377C0, v5);
  v7 = type metadata accessor for _ViewModifier_Content(255, v5, WitnessTable);
  v8 = sub_100011650(&qword_100557238);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  v10 = type metadata accessor for _ForegroundStyleModifier(255, v4);
  v11 = type metadata accessor for ModifiedContent(255, v7, v10);
  v12 = type metadata accessor for _ConditionalContent(255, v9, v11);
  v13 = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ViewModifier_Content<A>, v7);
  v18[0] = v13;
  v18[1] = sub_100012324(&qword_100557240, &qword_100557238, (const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v14 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v9, v18);
  v17[0] = v13;
  v17[1] = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ForegroundStyleModifier<A>, v10);
  v16[0] = v14;
  v16[1] = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> ModifiedContent<A, B>, v11, v17);
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12, v16);
}

uint64_t sub_1002BD204(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_100257760(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v5 + 8 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * (v6 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v7;
    specialized Array._endMutation()(v10);
    return v9;
  }
  return result;
}

uint64_t sub_1002BD298@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
  {
    result = sub_1002C3C34(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = *(_QWORD *)(_s9_ObserverC18HandlerAssociationVMa(0) - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
    result = sub_1002C2EC8(v11, a2);
    if (v10 > 0 || v11 >= v11 + v10 + v10 * (v8 - a1))
    {
      result = swift_arrayInitWithTakeFrontToBack(v11);
    }
    else if (v10)
    {
      result = swift_arrayInitWithTakeBackToFront(v11);
    }
    *(_QWORD *)(v5 + 16) = v8;
    *v2 = v5;
  }
  return result;
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(image:style:)(UIImage_optional image, UIBarButtonItemStyle style)
{
  Class isa;
  id v3;

  isa = image.value.super.isa;
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithImage:style:target:action:", image.value.super.isa, *(_QWORD *)&image.is_nil, 0, 0);

  return (UIBarButtonItem)v3;
}

void *UIBarButtonItem.spacerBarButtonTag.unsafeMutableAddressor()
{
  return &static UIBarButtonItem.spacerBarButtonTag;
}

uint64_t static UIBarButtonItem.spacerBarButtonTag.getter()
{
  return 9999;
}

id static UIBarButtonItem.spacerBarButtonItem()()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 1.0);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v0);
  objc_msgSend(v1, "setTag:", 9999);

  return v1;
}

void UIWindowScene.mainWindow.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_prot *v11;

  v1 = objc_msgSend(v0, "delegate");
  if (v1)
  {
    v2 = v1;
    v11 = &OBJC_PROTOCOL___UIWindowSceneDelegate;
    v3 = (void *)swift_dynamicCastObjCProtocolConditional(v1, 1, &v11);
    if (v3)
    {
      v4 = v3;
      if ((objc_msgSend(v3, "respondsToSelector:", "window") & 1) != 0)
      {
        objc_msgSend(v4, "window");
        swift_unknownObjectRelease(v2);
        return;
      }
    }
    swift_unknownObjectRelease(v2);
  }
  v5 = objc_msgSend(v0, "windows");
  v6 = sub_1000DD108(0, &qword_100557260, UIWindow_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v9 = v7;
    else
      v9 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
    if (!v10)
      goto LABEL_11;
  }
  else if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(v7 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

id UIWindowScene.rootViewController.getter()
{
  void *v0;
  void *v1;
  id v2;

  UIWindowScene.mainWindow.getter();
  v1 = v0;
  v2 = objc_msgSend(v0, "rootViewController");

  return v2;
}

BOOL UISceneActivationState.isForeground.getter(unint64_t a1)
{
  return a1 < 2;
}

uint64_t static UICollectionReusableView.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_10000B4C8(&qword_1005572C8);
  return String.init<A>(describing:)(&v2, v0);
}

void UICollectionView.register<A>(_:reuseIdentifier:)()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  id v2;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v2);

}

void UICollectionView.register<A>(_:ofKind:reuseIdentifier:)()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  NSString v2;
  id v3;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "registerClass:forSupplementaryViewOfKind:withReuseIdentifier:", ObjCClassFromMetadata, v2, v3);

}

uint64_t UICollectionView.dequeue<A>(_:forItemAt:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  Class isa;
  id v16;
  uint64_t result;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;

  v6 = v5;
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v6, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v14, isa);

  result = swift_dynamicCastUnknownClass(v16, a5);
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v22 = 0xD00000000000001ELL;
    v23 = 0x80000001004509E0;
    v18._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 544497952;
    v19._object = (void *)0xE400000000000000;
    String.append(_:)(v19);
    v20 = sub_10001254C(&qword_1005572D0, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v20);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, "MusicUtilities/UIKit+Utilities.swift", 36, 2, 83, 0);
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.dequeue<A>(_:ofKind:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v8 = v7;
  v26 = a1;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v8, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v15, v16, isa);

  result = swift_dynamicCastUnknownClass(v18, a7);
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v20._object = (void *)0x8000000100450A00;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)(v26, 0);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 544497952;
    v22._object = (void *)0xE400000000000000;
    String.append(_:)(v22);
    v23 = sub_10001254C(&qword_1005572D0, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, "MusicUtilities/UIKit+Utilities.swift", 36, 2, 89, 0);
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.globalIndex(for:)()
{
  void *v0;
  id v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v1 = objc_msgSend(v0, "numberOfSections");
  result = IndexPath.section.getter();
  if (__OFADD__(result, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result + 1 >= (uint64_t)v1)
    v3 = (uint64_t)v1;
  else
    v3 = result + 1;
  if (v3 < 0)
    goto LABEL_20;
  if (!v3)
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    if (v3 == v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v6 = (uint64_t)objc_msgSend(v0, "numberOfItemsInSection:", v5);
    result = IndexPath.section.getter();
    if (v5 == result)
      break;
    v7 = __OFADD__(v4, v6);
    v4 += v6;
    if (v7)
      goto LABEL_18;
    if (v3 == ++v5)
      return 0;
  }
  if (IndexPath.item.getter() >= v6)
    return 0;
  v8 = IndexPath.item.getter();
  v7 = __OFADD__(v4, v8);
  result = v4 + v8;
  if (v7)
    goto LABEL_21;
  return result;
}

uint64_t UICollectionView.indexPath(forGlobalIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = sub_10000B4C8(&qword_1005572D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(a2, 1, 1, v9);
  result = (uint64_t)objc_msgSend(v3, "numberOfSections");
  if (result < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    v12 = result;
    if (result)
    {
      v13 = 0;
      v14 = 0;
      while (1)
      {
        if (v12 == v14)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        result = (uint64_t)objc_msgSend(v3, "numberOfItemsInSection:", v14);
        if (__OFADD__(v13, result))
          goto LABEL_13;
        if (v13 + result > a1)
          break;
        ++v14;
        v13 += result;
        if (v12 == v14)
          return result;
      }
      result = a1 - v13;
      if (__OFSUB__(a1, v13))
        goto LABEL_15;
      IndexPath.init(item:section:)(result, v14);
      sub_1002C21AC(a2);
      v10((uint64_t)v8, 0, 1, v9);
      return sub_1002C21EC((uint64_t)v8, a2);
    }
  }
  return result;
}

unint64_t UICollectionView.totalItemCount.getter()
{
  void *v0;
  unint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  result = (unint64_t)objc_msgSend(v0, "numberOfSections");
  if ((result & 0x8000000000000000) == 0)
  {
    v2 = 0;
    v3 = result;
    if (!result)
      return v2;
    v4 = 0;
    while (1)
    {
      result = (unint64_t)objc_msgSend(v0, "numberOfItemsInSection:", v4);
      v5 = __OFADD__(v2, result);
      v2 += result;
      if (v5)
        break;
      if (v3 == ++v4)
        return v2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *UICollectionView.isLast(indexPath:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *result;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = IndexPath.section.getter(v6);
  result = (char *)objc_msgSend(v2, "numberOfSections");
  v11 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((char *)v9 == v11)
  {
    v13 = IndexPath.item.getter(v12);
    v14 = (char *)objc_msgSend(v2, "numberOfItemsInSection:", v9);
    result = (char *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (!__OFSUB__(v14, 1))
      return (char *)(v13 == (_QWORD)(v14 - 1));
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return 0;
}

uint64_t UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "indexPathsForVisibleSupplementaryElementsOfKind:", v5);

  v7 = type metadata accessor for IndexPath(0);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  v9 = (_QWORD *)swift_allocObject(&unk_100517320, 40, 7);
  v9[2] = v2;
  v9[3] = a1;
  v9[4] = a2;
  v10 = v2;
  swift_bridgeObjectRetain();
  return v8;
}

void sub_1002BDFC0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;

  v6 = *(int *)(sub_10000B4C8((uint64_t *)&unk_100557370) + 48);
  v7 = type metadata accessor for IndexPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, a1, v7);
  v8 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a2, "supplementaryViewForElementKind:atIndexPath:", v8, isa);

  *(_QWORD *)(a3 + v6) = v10;
}

id UICollectionView.clearSelection(using:animated:)(void *a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  id v36;
  void **aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void *v40;
  void *v41;
  uint64_t v42;

  v3 = v2;
  v35 = a2;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_1005572D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v3;
  result = objc_msgSend(v3, "indexPathsForSelectedItems");
  if (result)
  {
    v13 = result;
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, v5);

    if (a1)
    {
      v15 = swift_allocObject(&unk_100517348, 33, 7);
      v16 = v36;
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = v16;
      *(_BYTE *)(v15 + 32) = v35 & 1;
      v41 = sub_1002C2274;
      v42 = v15;
      aBlock = _NSConcreteStackBlock;
      v38 = 1107296256;
      v39 = sub_100243968;
      v40 = &unk_100517360;
      v17 = _Block_copy(&aBlock);
      v18 = v42;
      swift_unknownObjectRetain(a1);
      swift_bridgeObjectRetain();
      v19 = v16;
      swift_release(v18);
      v20 = swift_allocObject(&unk_100517398, 32, 7);
      *(_QWORD *)(v20 + 16) = v14;
      *(_QWORD *)(v20 + 24) = v19;
      v41 = sub_1002C22D8;
      v42 = v20;
      aBlock = _NSConcreteStackBlock;
      v38 = 1107296256;
      v39 = sub_100243968;
      v40 = &unk_1005173B0;
      v21 = _Block_copy(&aBlock);
      v22 = v42;
      v23 = v19;
      objc_msgSend(a1, "animateAlongsideTransition:completion:", v17, v21, swift_release(v22).n128_f64[0]);
      _Block_release(v21);
      _Block_release(v17);
      return (id)swift_unknownObjectRelease(a1);
    }
    else
    {
      v24 = v14;
      v25 = *(_QWORD *)(v14 + 16);
      if (v25)
      {
        v26 = v24 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v27 = *(_QWORD *)(v6 + 72);
        v28 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        v34 = v24;
        swift_bridgeObjectRetain();
        while (1)
        {
          v28(v11, v26, v5);
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v29(v11, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v36, "deselectItemAtIndexPath:animated:", isa, v35 & 1);

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          v26 += v27;
          if (!--v25)
          {
            v31 = v34;
            goto LABEL_10;
          }
        }
        v32 = v34;
      }
      else
      {
        v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v31 = swift_bridgeObjectRetain();
LABEL_10:
        v29(v11, 1, 1, v5);
        v32 = v31;
      }
      return (id)swift_bridgeObjectRelease_n(v32, 2);
    }
  }
  return result;
}

uint64_t sub_1002BE394(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  _QWORD v20[2];
  uint64_t v21;
  id v22;

  v22 = a3;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000B4C8(&qword_1005572D8);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v20[1] = a2;
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v21 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v16 = a4 & 1;
    while (1)
    {
      v15(v12, v14, v6);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v17(v12, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v22, "deselectItemAtIndexPath:animated:", isa, v16);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v14 += v21;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v17(v12, 1, 1, v6);
  }
  return swift_bridgeObjectRelease();
}

id sub_1002BE54C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v19;
  id v20;

  v20 = a3;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_1005572D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "isCancelled");
  if ((_DWORD)result)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v19 = a2;
    if (v13)
    {
      v14 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v15 = *(_QWORD *)(v6 + 72);
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v16(v11, v14, v5);
        v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v17(v11, 0, 1, v5);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v20, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 0, v19);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v14 += v15;
        if (!--v13)
          goto LABEL_8;
      }
    }
    else
    {
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      swift_bridgeObjectRetain();
LABEL_8:
      v17(v11, 1, 1, v5);
    }
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UICollectionView.isDraggingCell(at:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Class isa;
  id v14;
  id v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for UICellConfigurationState.DragState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for UICellConfigurationState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v1, "cellForItemAtIndexPath:", isa);

  if (v14)
  {
    v15 = objc_msgSend(v14, "_bridgedConfigurationState");
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

    UICellConfigurationState.cellDragState.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for UICellConfigurationState.DragState.dragging(_:), v2);
    v16 = static UICellConfigurationState.DragState.== infix(_:_:)(v8, v6);

    v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    v17(v8, v2);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

void *UICollectionView.elementKindGlobalHeader.unsafeMutableAddressor()
{
  return &static UICollectionView.elementKindGlobalHeader;
}

unint64_t static UICollectionView.elementKindGlobalHeader.getter()
{
  return 0xD000000000000023;
}

id UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithRed:green:blue:alpha:", (double)a1 / 255.0, (double)a2 / 255.0, (double)a3 / 255.0, a4);
}

id UIColor.interpolate(to:ratio:)(void *a1, double a2)
{
  void *v2;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = fmin(a2, 1.0);
  if (a2 < 0.0)
    v5 = 0.0;
  else
    v5 = v4;
  v13 = 0.0;
  v14 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  objc_msgSend(v2, "getRed:green:blue:alpha:", &v14, &v12, &v10, &v8);
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v13, &v11, &v9, &v7);
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", (1.0 - v5) * v14 + v5 * v13, (1.0 - v5) * v12 + v5 * v11, (1.0 - v5) * v10 + v5 * v9, (1.0 - v5) * v8 + v5 * v7);
}

double UIColor.hsba.getter()
{
  return sub_1002BEB1C((SEL *)&selRef_getHue_saturation_brightness_alpha_);
}

double UIColor.rgba.getter()
{
  return sub_1002BEB1C((SEL *)&selRef_getRed_green_blue_alpha_);
}

double sub_1002BEB1C(SEL *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v6 = 0.0;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  objc_msgSend(v1, *a1, &v6, &v5, &v4, &v3);
  return v6;
}

UIImage_optional __swiftcall UIImage.init(systemName:font:scale:)(Swift::String systemName, UIFont font, UIImageSymbolScale scale)
{
  void *object;
  void *ObjCClassFromMetadata;
  NSString v7;
  id v8;
  objc_class *v9;
  Swift::Bool v10;
  objc_class *v11;
  UIImage_optional result;

  object = systemName._object;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v8 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:scale:", font.super.isa, scale);
  v9 = (objc_class *)objc_msgSend(ObjCClassFromMetadata, "systemImageNamed:withConfiguration:", v7, v8);

  v11 = v9;
  result.value.super.isa = v11;
  result.is_nil = v10;
  return result;
}

id UIImage.init(systemName:pointSize:weight:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *ObjCClassFromMetadata;
  NSString v8;
  id v9;
  id v10;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v9 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", a4, a1);
  v10 = objc_msgSend(ObjCClassFromMetadata, "systemImageNamed:withConfiguration:", v8, v9);

  return v10;
}

UIImage_optional __swiftcall UIImage.byCroppingToUniformCenter()()
{
  objc_class *v0;
  objc_class *v1;
  objc_class *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::Bool v7;
  double v8;
  double v9;
  double v10;
  double v11;
  objc_class *v12;
  double v13;
  double v14;
  UIImage_optional result;

  v1 = v0;
  v2 = v0;
  -[objc_class size](v2, "size");
  v4 = v3;
  v6 = v5;
  v13 = v5;
  v14 = v3;
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(&v14, &v13) & 1) != 0)
  {
    if (v6 >= v4)
    {
      v9 = round((v6 - v4) * 0.5);
      v8 = 0.0;
      v10 = v4;
      v11 = v4;
    }
    else
    {
      v8 = round((v4 - v6) * 0.5);
      v9 = 0.0;
      v10 = v6;
      v11 = v6;
    }
    v1 = (objc_class *)UIImage.byCropping(to:)(v8, v9, v10, v11);

  }
  v12 = v1;
  result.value.super.isa = v12;
  result.is_nil = v7;
  return result;
}

id UIImage.byCropping(to:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  void *v5;
  CGImage *v10;
  CGImage *v11;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGImageRef v19;
  CGImageRef v20;
  id v21;
  _QWORD v23[2];
  _QWORD v24[2];

  v5 = v4;
  v10 = (CGImage *)objc_msgSend(v4, "CGImage");
  if (!v10)
    return 0;
  v11 = v10;
  _s3__C6CGSizeVMa_1(0);
  *(double *)v24 = a3;
  *(double *)&v24[1] = a4;
  v23[0] = 0;
  v23[1] = 0;
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(v24, v23) & 1) == 0)
    goto LABEL_7;
  objc_msgSend(v4, "scale");
  v13 = v12;
  *(double *)v24 = v12;
  v23[0] = 0x3FF0000000000000;
  v14 = static ApproximatelyEquatable.!=~ infix(_:_:)(v24, v23);
  v15 = v13 * a1;
  v16 = v13 * a2;
  v17 = v13 * a3;
  v18 = v13 * a4;
  if ((v14 & 1) == 0)
  {
    v18 = a4;
    v17 = a3;
    v16 = a2;
    v15 = a1;
  }
  v19 = CGImageCreateWithImageInRect(v11, *(CGRect *)&v15);
  if (!v19)
  {
LABEL_7:

    return 0;
  }
  v20 = v19;
  v21 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v19, objc_msgSend(v5, "imageOrientation"), v13);

  return v21;
}

UIViewController_optional __swiftcall UINavigationController.removeViewController(_:animated:)(UIViewController _, Swift::Bool animated)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  Class isa;
  Swift::Bool v13;
  objc_class *v14;
  UIViewController_optional result;

  v3 = v2;
  v6 = objc_msgSend(v2, "viewControllers");
  v7 = sub_1000DD108(0, (unint64_t *)&qword_1005572E0, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  swift_bridgeObjectRetain();
  v9 = sub_1002A9A0C((uint64_t)_.super.super.isa, v8);
  LOBYTE(v6) = v10;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 0;
  }
  else
  {
    v11 = sub_1002BD204(v9);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v3, "setViewControllers:animated:", isa, animated);

  }
  v14 = (objc_class *)v11;
  result.value.super.super.isa = v14;
  result.is_nil = v13;
  return result;
}

double UIScrollView.normalizedContentOffset.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(v0, "adjustedContentInset");
  v2 = v1;
  objc_msgSend(v0, "contentOffset");
  return v2 + v3;
}

uint64_t UIScrollView.isScrolling.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isDragging") & 1) != 0
    || (objc_msgSend(v0, "isDecelerating") & 1) != 0
    || (objc_msgSend(v0, "_isVerticalBouncing") & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(v0, "_isHorizontalBouncing");
  }
}

uint64_t static UIStackView.SpacerView.layerClass.getter()
{
  return sub_1000DD108(0, &qword_1005572E8, CATransformLayer_ptr);
}

id UIStackView.SpacerView.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id UIStackView.SpacerView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id UIStackView.SpacerView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id UIView.forAutolayout.getter()
{
  void *v0;
  id v2;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v2;
}

double UIView.Shadow.opacity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void UIView.Shadow.opacity.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double UIView.Shadow.offset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void UIView.Shadow.offset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t UIView.Shadow.init(color:opacity:radius:offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void UIView.Shadow.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v3 = *(id *)v1;
  NSObject.hash(into:)(a1);
  sub_1002C2300((id *)v1);
  if ((*(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v1 + 16);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = *(_QWORD *)(v1 + 32);
  if ((*(_QWORD *)(v1 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)(v1 + 24);
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v6;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
}

BOOL static UIView.Shadow.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
  return (static NSObject.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

Swift::Int UIView.Shadow.hashValue.getter()
{
  uint64_t v0;
  id v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v1 = *(id *)v0;
  NSObject.hash(into:)(v8);
  sub_1002C2300((id *)v0);
  if ((*(_QWORD *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)(v0 + 8);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((*(_QWORD *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)(v0 + 16);
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = *(_QWORD *)(v0 + 32);
  if ((*(_QWORD *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v0 + 24);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_1002BF55C()
{
  return UIView.Shadow.hashValue.getter();
}

void sub_1002BF594(uint64_t a1)
{
  UIView.Shadow.hash(into:)(a1);
}

Swift::Int sub_1002BF5CC()
{
  uint64_t v0;
  void *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  double v4;
  double v5;
  id v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  _QWORD v10[9];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(double *)(v0 + 24);
  v5 = *(double *)(v0 + 32);
  Hasher.init(_seed:)(v10);
  v6 = v1;
  NSObject.hash(into:)(v10);

  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v2;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  sub_1002C2328(v4, v5);
  return Hasher._finalize()();
}

BOOL sub_1002BF65C(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
  v12 = static NSObject.== infix(_:_:)(*(_QWORD *)&v2, *(_QWORD *)&v7);
  result = 0;
  if ((v12 & 1) != 0 && v3 == v8 && v4 == v9)
    return v5 == v10 && v6 == v11;
  return result;
}

id UIView.shadowPathIsBounds.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "layer");
  v2 = objc_msgSend(v1, "shadowPathIsBounds");

  return v2;
}

void UIView.shadowPathIsBounds.setter(char a1)
{
  void *v1;
  id v3;

  v3 = objc_msgSend(v1, "layer");
  objc_msgSend(v3, "setShadowPathIsBounds:", a1 & 1);

}

void (*UIView.shadowPathIsBounds.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, "layer");
  v4 = objc_msgSend(v3, "shadowPathIsBounds");

  *(_BYTE *)(a1 + 8) = v4;
  return sub_1002BF808;
}

void sub_1002BF808(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = objc_msgSend(*(id *)a1, "layer");
  objc_msgSend(v2, "setShadowPathIsBounds:", v1);

}

void UIView.shadow.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  float v8;
  float v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v4 = objc_msgSend(v1, "layer");
  v5 = objc_msgSend(v4, "shadowColor");

  if (v5)
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v5);

    v3 = v6;
  }
  v7 = objc_msgSend(v1, "layer");
  objc_msgSend(v7, "shadowOpacity");
  v9 = v8;

  v10 = v9;
  v11 = objc_msgSend(v1, "layer");
  objc_msgSend(v11, "shadowRadius");
  v13 = v12;

  v14 = objc_msgSend(v1, "layer");
  objc_msgSend(v14, "shadowOffset");
  v16 = v15;
  v18 = v17;

  *(_QWORD *)a1 = v3;
  *(double *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
}

void UIView.shadow.setter(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  double v7;
  id v8;

  v3 = objc_msgSend(v1, "layer");
  v4 = objc_msgSend(*(id *)a1, "CGColor");
  objc_msgSend(v3, "setShadowColor:", v4);

  v5 = objc_msgSend(v1, "layer");
  objc_msgSend(v5, "setShadowOffset:", *(double *)(a1 + 24), *(double *)(a1 + 32));

  v6 = objc_msgSend(v1, "layer");
  objc_msgSend(v6, "setShadowRadius:", *(double *)(a1 + 16));

  v8 = objc_msgSend(v1, "layer");
  v7 = *(double *)(a1 + 8);
  *(float *)&v7 = v7;
  objc_msgSend(v8, "setShadowOpacity:", v7);
  sub_1002C2300((id *)a1);

}

void (*UIView.shadow.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UIView.shadow.getter((uint64_t)(v3 + 10));
  return sub_1002BFB20;
}

void sub_1002BFB20(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  id v5;

  v2 = *a1;
  v3 = *a1 + 80;
  v4 = *(_OWORD *)(*a1 + 96);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(v3 + 32);
    v5 = *(id *)v2;
    UIView.shadow.setter(v2);

  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *(_QWORD *)(v2 + 72) = *(_QWORD *)(v3 + 32);
    UIView.shadow.setter(v2 + 40);
  }
  free((void *)v2);
}

uint64_t UIView.Border.init(view:)(void *a1)
{
  uint64_t v2;

  v2 = sub_1002C2560(a1);

  return v2;
}

uint64_t static UIView.Border.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if ((a2 & 1) != 0)
  {
    if ((a5 & 1) == 0)
      return 0;
  }
  else if ((a5 & 1) != 0)
  {
    return 0;
  }
  if (*(double *)&a1 == *(double *)&a4)
  {
    sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(a3, a6) & 1;
  }
  return 0;
}

uint64_t sub_1002BFC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2)
  {
    sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v2, v3) & 1;
  }
  return 0;
}

uint64_t UIView.border.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = v0;
  v2 = sub_1002C2560(v1);

  return v2;
}

void UIView.border.setter(uint64_t a1, char a2, void *a3)
{
  void *v3;
  id v6;
  id v7;
  id v8;
  double v9;
  double v10;
  id v11;
  id v12;

  if (a3)
  {
    v6 = objc_msgSend(v3, "layer");
    v7 = v6;
    if ((a2 & 1) != 0)
    {
      objc_msgSend(v6, "setBorderWidth:", *(double *)&a1);
    }
    else
    {
      v8 = objc_msgSend(v3, "traitCollection");
      objc_msgSend(v8, "displayScale");
      v10 = v9;

      objc_msgSend(v7, "setBorderWidth:", *(double *)&a1 / fmax(v10, 1.0));
    }
  }
  else
  {
    v7 = objc_msgSend(v3, "layer");
    objc_msgSend(v7, "setBorderWidth:", 0.0);
  }

  v11 = objc_msgSend(v3, "layer");
  if (a3)
    v12 = objc_msgSend(a3, "CGColor");
  else
    v12 = 0;
  objc_msgSend(v11, "setBorderColor:", v12);

}

void (*UIView.border.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[3] = (uint64_t)v1;
  v3 = v1;
  v4 = sub_1002C2560(v3);
  v6 = v5;
  v8 = v7;

  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  return sub_1002BFECC;
}

void sub_1002BFECC(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)a1[2];
  if ((a2 & 1) != 0)
  {
    v5 = v4;
    UIView.border.setter(v2, v3, v4);

  }
  else
  {
    UIView.border.setter(*a1, v3, v4);
  }
}

double UIView.untransformedFrame.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  double Width;
  id v12;
  double v13;
  double v14;
  id v15;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  objc_msgSend(v0, "center");
  v10 = v9;
  v17.origin.x = v2;
  v17.origin.y = v4;
  v17.size.width = v6;
  v17.size.height = v8;
  Width = CGRectGetWidth(v17);
  v12 = objc_msgSend(v0, "layer");
  objc_msgSend(v12, "anchorPoint");
  v14 = v13;

  v18.origin.x = v2;
  v18.origin.y = v4;
  v18.size.width = v6;
  v18.size.height = v8;
  CGRectGetHeight(v18);
  v15 = objc_msgSend(v0, "layer");
  objc_msgSend(v15, "anchorPoint");

  v19.origin.x = v2;
  v19.origin.y = v4;
  v19.size.width = v6;
  v19.size.height = v8;
  CGRectGetWidth(v19);
  v20.origin.x = v2;
  v20.origin.y = v4;
  v20.size.width = v6;
  v20.size.height = v8;
  CGRectGetHeight(v20);
  return v10 - Width * v14;
}

id UIView.untransformedFrame.setter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  double MinX;
  double Width;
  id v11;
  double v12;
  double v13;
  double v14;
  double MinY;
  double Height;
  id v17;
  double v18;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  Width = CGRectGetWidth(v21);
  v11 = objc_msgSend(v4, "layer");
  objc_msgSend(v11, "anchorPoint");
  v13 = v12;

  v14 = MinX + Width * v13;
  v22.origin.x = a1;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  MinY = CGRectGetMinY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  Height = CGRectGetHeight(v23);
  v17 = objc_msgSend(v4, "layer");
  objc_msgSend(v17, "anchorPoint");
  v19 = v18;

  objc_msgSend(v4, "setCenter:", v14, MinY + Height * v19);
  objc_msgSend(v4, "bounds");
  return objc_msgSend(v4, "setBounds:");
}

void (*UIView.untransformedFrame.modify(double **a1))(CGFloat **a1)
{
  uint64_t v1;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  *v3 = UIView.untransformedFrame.getter();
  *((_QWORD *)v3 + 1) = v4;
  *((_QWORD *)v3 + 2) = v5;
  *((_QWORD *)v3 + 3) = v6;
  return sub_1002C021C;
}

void sub_1002C021C(CGFloat **a1)
{
  CGFloat *v1;

  v1 = *a1;
  UIView.untransformedFrame.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

float UIView.contentCompressionResistancePriority.getter()
{
  void *v0;
  id v1;
  float v2;
  float v3;

  v1 = v0;
  objc_msgSend(v1, "contentCompressionResistancePriorityForAxis:", 0);
  v3 = v2;
  objc_msgSend(v1, "contentCompressionResistancePriorityForAxis:", 1);

  return v3;
}

float UIView.CompressionResistancePriority.init(view:)(void *a1)
{
  float v2;
  float v3;

  objc_msgSend(a1, "contentCompressionResistancePriorityForAxis:", 0);
  v3 = v2;
  objc_msgSend(a1, "contentCompressionResistancePriorityForAxis:", 1);

  return v3;
}

id UIView.contentCompressionResistancePriority.setter(double a1, float a2)
{
  void *v2;
  double v4;

  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0);
  *(float *)&v4 = a2;
  return objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v4);
}

id (*UIView.contentCompressionResistancePriority.modify(uint64_t a1))(uint64_t a1, double a2)
{
  void *v1;
  id v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)a1 = v1;
  v3 = v1;
  objc_msgSend(v3, "contentCompressionResistancePriorityForAxis:", 0);
  v5 = v4;
  objc_msgSend(v3, "contentCompressionResistancePriorityForAxis:", 1);
  v7 = v6;

  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v7;
  return sub_1002C03BC;
}

id sub_1002C03BC(uint64_t a1, double a2)
{
  id v2;
  int v3;
  double v4;

  v2 = *(id *)a1;
  LODWORD(a2) = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  objc_msgSend(*(id *)a1, "setContentCompressionResistancePriority:forAxis:", 0, a2);
  LODWORD(v4) = v3;
  return objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v4);
}

void UIView.CompressionResistancePriority.horizontal.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

float UIView.CompressionResistancePriority.vertical.getter(double a1, float a2)
{
  return a2;
}

double UIView.maxReadableContentWidth(for:)()
{
  return 1500.0;
}

UIImage *UIView.screenshot.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  unsigned __int8 v5;
  UIImage *v6;
  CGSize v8;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v5 = objc_msgSend(v0, "isOpaque");
  v8.width = v2;
  v8.height = v4;
  UIGraphicsBeginImageContextWithOptions(v8, v5, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v0, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
  v6 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return v6;
}

Swift::Void __swiftcall UIView.visualizeLayout(with:)(UIColor with)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  objc_class *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  Class isa;

  v2 = v1;
  v4 = objc_msgSend(v2, "viewWithTag:", 1234);
  if (v4)
  {
    v24 = v4;
    objc_msgSend(v2, "bringSubviewToFront:");

  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v6 = -[objc_class colorWithAlphaComponent:](with.super.isa, "colorWithAlphaComponent:", 0.2);
    objc_msgSend(v5, "setBackgroundColor:", v6);

    v7 = with.super.isa;
    UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v5, "setTag:", 1234);
    objc_msgSend(v5, "setUserInteractionEnabled:", 0);
    objc_msgSend(v2, "addSubview:", v5);
    v8 = (void *)objc_opt_self(NSLayoutConstraint);
    v9 = sub_10000B4C8(&qword_1005566F0);
    v10 = swift_allocObject(v9, 64, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1004280F0;
    v11 = objc_msgSend(v5, "topAnchor");
    v12 = objc_msgSend(v2, "topAnchor");
    v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

    *(_QWORD *)(v10 + 32) = v13;
    v14 = objc_msgSend(v5, "bottomAnchor");
    v15 = objc_msgSend(v2, "bottomAnchor");
    v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

    *(_QWORD *)(v10 + 40) = v16;
    v17 = objc_msgSend(v5, "leadingAnchor");
    v18 = objc_msgSend(v2, "leadingAnchor");
    v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

    *(_QWORD *)(v10 + 48) = v19;
    v20 = objc_msgSend(v5, "trailingAnchor");
    v21 = objc_msgSend(v2, "trailingAnchor");
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

    *(_QWORD *)(v10 + 56) = v22;
    specialized Array._endMutation()(v23);
    sub_1000DD108(0, &qword_100557300, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, "activateConstraints:", isa);

  }
}

void sub_1002C0804(UIColor a1)
{
  UIView.visualizeLayout(with:)(a1);
}

void UIView.traverseViewHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  char v17;

  v3 = v2;
  v17 = 0;
  a1(v3, &v17);
  if ((v17 & 1) != 0)
    return;
  v6 = objc_msgSend(v3, "subviews");
  v7 = sub_1000DD108(0, &qword_100557308, UIView_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
LABEL_19:
    if (v8 < 0)
      v16 = v8;
    else
      v16 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_16;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    v10 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_7:
    v12 = 0;
    v13 = v9 - 1;
    while (1)
    {
      sub_1002C266C(v11, a1, a2, &v17);

      if (v13 == v12)
        goto LABEL_16;
      v14 = v12 + 1;
      if ((v8 & 0xC000000000000001) != 0)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 + 1, v8);
      }
      else
      {
        if (v14 >= *(_QWORD *)(v10 + 16))
          goto LABEL_18;
        v15 = *(id *)(v8 + 8 * v12 + 40);
      }
      v11 = v15;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      ++v12;
      if (v17 == 1)
      {

        goto LABEL_16;
      }
    }
  }
  v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v8 + 32);
    goto LABEL_7;
  }
  __break(1u);
}

void UIView.statusBarFrame.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = objc_msgSend(v1, "window");
  v4 = 0;
  if (v3)
  {
    v5 = v3;
    v6 = objc_msgSend(v3, "windowScene");

    if (v6)
    {
      v7 = objc_msgSend(v6, "statusBarManager");
      if (v7)
      {
        v8 = v7;
        if ((objc_msgSend(v7, "isStatusBarHidden") & 1) == 0)
        {
          objc_msgSend(v8, "statusBarFrame");
          v14 = v13;
          v16 = v15;
          v18 = v17;
          v20 = v19;
          v21 = objc_msgSend(v6, "screen");
          v22 = objc_msgSend(v21, "coordinateSpace");

          objc_msgSend(v1, "convertRect:fromCoordinateSpace:", v22, v14, v16, v18, v20);
          v4 = v23;
          v10 = v24;
          v11 = v25;
          v12 = v26;

          swift_unknownObjectRelease(v22);
          v9 = 0;
          goto LABEL_8;
        }

      }
      else
      {

      }
    }
  }
  v9 = 1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_8:
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v9;
}

Swift::Void __swiftcall UILayoutGuide.visualizeLayout(with:)(UIColor with)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  objc_class *v6;
  id v7;
  id v8;
  objc_class *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  Class isa;

  v2 = v1;
  v4 = objc_msgSend(v2, "owningView");
  if (v4)
  {
    v5 = v4;
    v6 = (objc_class *)objc_msgSend(v4, "viewWithTag:", 1234);
    if (v6)
    {
      isa = v6;
      objc_msgSend(v5, "bringSubviewToFront:");
    }
    else
    {
      v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      v8 = -[objc_class colorWithAlphaComponent:](with.super.isa, "colorWithAlphaComponent:", 0.2);
      objc_msgSend(v7, "setBackgroundColor:", v8);

      v9 = with.super.isa;
      UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
      objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v7, "setTag:", 1234);
      objc_msgSend(v7, "setUserInteractionEnabled:", 0);
      objc_msgSend(v5, "addSubview:", v7);
      v10 = (void *)objc_opt_self(NSLayoutConstraint);
      v11 = sub_10000B4C8(&qword_1005566F0);
      v12 = swift_allocObject(v11, 64, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1004280F0;
      v13 = objc_msgSend(v7, "topAnchor");
      v14 = objc_msgSend(v2, "topAnchor");
      v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

      *(_QWORD *)(v12 + 32) = v15;
      v16 = objc_msgSend(v7, "bottomAnchor");
      v17 = objc_msgSend(v2, "bottomAnchor");
      v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

      *(_QWORD *)(v12 + 40) = v18;
      v19 = objc_msgSend(v7, "leadingAnchor");
      v20 = objc_msgSend(v2, "leadingAnchor");
      v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

      *(_QWORD *)(v12 + 48) = v21;
      v22 = objc_msgSend(v7, "trailingAnchor");
      v23 = objc_msgSend(v2, "trailingAnchor");
      v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

      *(_QWORD *)(v12 + 56) = v24;
      specialized Array._endMutation()(v25);
      sub_1000DD108(0, &qword_100557300, NSLayoutConstraint_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v10, "activateConstraints:", isa);

      v5 = v7;
    }

  }
}

void sub_1002C0F04(UIColor a1)
{
  UILayoutGuide.visualizeLayout(with:)(a1);
}

BOOL UIViewController.canPresentViewControllers.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "popoverPresentationController");
  v2 = v1;
  if (v1)

  return v2 == 0;
}

BOOL UIViewController.canBeDismissed.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "presentingViewController");
  v2 = v1;
  if (v1)

  return v2 != 0;
}

Swift::Void __swiftcall UIViewController.dismiss(after:)(Swift::Double after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  v17 = sub_1000DD108(0, (unint64_t *)&qword_100557310, OS_dispatch_queue_ptr);
  v25 = (void *)static OS_dispatch_queue.main.getter(v17, v18, v19, v20, v21, v22, v23, v24);
  static DispatchTime.now()(v25);
  + infix(_:_:)(v14, after);
  v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v14, v10);
  v27 = swift_allocObject(&unk_1005173E8, 24, 7);
  swift_unknownObjectWeakInit(v27 + 16, v2);
  aBlock[4] = sub_1002C2868;
  v38 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015F6F8;
  aBlock[3] = &unk_100517400;
  v28 = _Block_copy(aBlock);
  swift_release(v38);
  static DispatchQoS.unspecified.getter(v29);
  aBlock[0] = _swiftEmptyArrayStorage;
  v30 = sub_10001254C((unint64_t *)&qword_100556420, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10000B4C8((uint64_t *)&unk_100557320);
  v32 = sub_10029F760();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v4, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v9, v6, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
  v26(v16, v10);
}

void sub_1002C1288(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "presentingViewController");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "presentedViewController");
      if (v6)
      {
        v7 = v6;
        sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
        if ((static NSObject.== infix(_:_:)(v7, v3) & 1) != 0)
          objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, 0);

        v3 = v5;
      }
      else
      {
        v7 = v5;
      }

      v3 = v7;
    }

  }
}

Swift::Void __swiftcall UIViewController.add(_:)(UIViewController a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;

  objc_msgSend(v1, "addChildViewController:", a1.super.super.isa);
  if (!objc_msgSend(v1, "isViewLoaded"))
    goto LABEL_6;
  v3 = objc_msgSend(v1, "view");
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  v5 = -[objc_class view](a1.super.super.isa, "view");
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  objc_msgSend(v4, "addSubview:", v5);

  v7 = objc_msgSend(v1, "view");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "setNeedsLayout");

LABEL_6:
    -[objc_class didMoveToParentViewController:](a1.super.super.isa, "didMoveToParentViewController:", v1);
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall UIViewController.remove(_:)(UIViewController a1)
{
  id v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  void *v11;

  v3 = -[objc_class parentViewController](a1.super.super.isa, "parentViewController");
  if (v3)
  {
    v4 = v3;

    if (v4 == v1)
    {
      -[objc_class willMoveToParentViewController:](a1.super.super.isa, "willMoveToParentViewController:", 0);
      if (!objc_msgSend(v1, "isViewLoaded")
        || !-[objc_class isViewLoaded](a1.super.super.isa, "isViewLoaded"))
      {
        goto LABEL_11;
      }
      v5 = -[objc_class view](a1.super.super.isa, "view");
      if (v5)
      {
        v6 = v5;
        v7 = objc_msgSend(v1, "view");
        if (v7)
        {
          v8 = v7;
          v9 = objc_msgSend(v6, "isDescendantOfView:", v7);

          if (!v9)
          {
LABEL_11:
            -[objc_class removeFromParentViewController](a1.super.super.isa, "removeFromParentViewController");
            return;
          }
          v10 = -[objc_class view](a1.super.super.isa, "view");
          if (v10)
          {
            v11 = v10;
            objc_msgSend(v10, "removeFromSuperview");

            goto LABEL_11;
          }
LABEL_14:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_14;
    }
  }
}

Swift::Bool __swiftcall UIViewController.isDescendant(of:)(UIViewController of)
{
  void *v1;
  objc_class *v3;
  objc_class *v4;
  id v5;
  void *v6;
  Swift::Bool v7;

  v3 = (objc_class *)objc_msgSend(v1, "parentViewController");
  if (v3 && (v4 = v3, v3, v4 == of.super.super.isa))
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    v5 = objc_msgSend(v1, "parentViewController");
    if (v5)
    {
      v6 = v5;
      v7 = UIViewController.isDescendant(of:)(of);

      LOBYTE(v5) = v7;
    }
  }
  return (char)v5;
}

void UIViewController.traverseViewControllerHierarchy(_:)(void (*a1)(void *, char *, __n128), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  double v14;
  id v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[31];
  char v20;

  v3 = v2;
  v20 = 0;
  ((void (*)(void *, char *))a1)(v3, &v20);
  v6 = objc_msgSend(v3, "childViewControllers");
  v7 = sub_1000DD108(0, (unint64_t *)&qword_1005572E0, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
    goto LABEL_17;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    swift_beginAccess(&v20, v19, 0, 0);
    v10 = 4;
    while (1)
    {
      v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v8)
          : *(id *)(v8 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      if ((v20 & 1) != 0)
      {

        goto LABEL_12;
      }
      sub_1002C2870(v11, a1, a2, &v20);

      ++v10;
      if (v13 == v9)
        goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v14 = swift_beginAccess(&v20, v18, 0, 0).n128_u64[0];
  if ((v20 & 1) == 0)
  {
    v15 = objc_msgSend(v3, "presentedViewController", v14);
    if (v15)
    {
      v16 = v15;
      sub_1002C2870(v15, a1, a2, &v20);

    }
  }
}

uint64_t sub_1002C17F0(uint64_t a1, _BYTE *a2, void (*a3)(uint64_t, _BYTE *), uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  _BYTE v10[24];

  swift_beginAccess(a5, v10, 33, 0);
  a3(a1, a5);
  swift_endAccess(v10);
  result = swift_beginAccess(a5, v10, 0, 0);
  *a2 = *a5;
  return result;
}

NSLayoutConstraint __swiftcall NSLayoutConstraint.with(priority:)(__C::UILayoutPriority priority)
{
  void *v1;
  id v3;

  objc_msgSend(v1, "setPriority:", *(double *)&priority.rawValue);
  return (NSLayoutConstraint)v3;
}

void UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  Class isa;
  _BYTE v5[96];

  v0 = sub_10000B4C8(&qword_100557330);
  inited = swift_initStackObject(v0, v5);
  *(_OWORD *)(inited + 16) = xmmword_100424BC0;
  *(_QWORD *)(inited + 32) = 3;
  *(_QWORD *)(inited + 40) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 48) = 5;
  *(_QWORD *)(inited + 56) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 64) = 6;
  *(_QWORD *)(inited + 72) = 0xBFF0000000000000;
  *(_QWORD *)(inited + 80) = 4;
  *(_QWORD *)(inited + 88) = 0xBFF0000000000000;
  v2 = sub_10029DBD4(inited);
  swift_setDeallocating(inited);
  sub_1002C2370(v2, (uint64_t (*)(_QWORD, double))sub_1002C2A78);
  swift_bridgeObjectRelease();
  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1000DD108(0, &qword_100557300, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "activateConstraints:", isa);
  swift_bridgeObjectRelease();

}

id sub_1002C1A18(uint64_t a1, void *a2, char a3, void *a4, double a5, double a6)
{
  id v12;
  id v13;
  id v14;
  _QWORD v16[4];
  _QWORD v17[4];

  v17[3] = sub_1000DD108(0, &qword_100557308, UIView_ptr);
  v17[0] = a2;
  v12 = a2;
  if ((a3 & 1) != 0)
    v13 = objc_msgSend(a4, "layoutMarginsGuide");
  else
    v13 = a4;
  v14 = v13;
  sub_1000DD108(0, &qword_100557300, NSLayoutConstraint_ptr);
  v16[3] = sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
  v16[0] = v14;
  return sub_1002C1B0C(v17, a1, 0, v16, a1, 1.0, a5 * a6);
}

id sub_1002C1B0C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  id v25;
  uint64_t v27;
  uint64_t v28;

  v14 = a1[3];
  v15 = sub_10000D900(a1, v14);
  v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
  v17 = a4[3];
  if (v17)
  {
    v18 = sub_10000D900(a4, a4[3]);
    v27 = a5;
    v28 = a2;
    v19 = a3;
    v20 = *(_QWORD *)(v17 - 8);
    __chkstk_darwin(v18);
    v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v22);
    v23 = _bridgeAnythingToObjectiveC<A>(_:)(v22, v17);
    v24 = *(void (**)(char *, uint64_t))(v20 + 8);
    a3 = v19;
    v24(v22, v17);
    a5 = v27;
    a2 = v28;
    sub_100011758(a4);
  }
  else
  {
    v23 = 0;
  }
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v16, a2, a3, v23, a5, a6, a7);
  swift_unknownObjectRelease(v16);
  swift_unknownObjectRelease(v23);
  sub_100011758(a1);
  return v25;
}

void Array<A>.activate()(uint64_t a1)
{
  sub_1002C1D04(a1, (SEL *)&selRef_activateConstraints_);
}

void UIView.addSubviewAnchoredToBounds(_:useLayoutMarginsGuide:padding:)(void *a1)
{
  void *v1;

  objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", a1);
  UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)();
}

void Array<A>.deactivate()(uint64_t a1)
{
  sub_1002C1D04(a1, (SEL *)&selRef_deactivateConstraints_);
}

void sub_1002C1D04(uint64_t a1, SEL *a2)
{
  void *v3;
  Class isa;

  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1000DD108(0, &qword_100557300, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, *a2, isa);

}

uint64_t NSTextAlignment.init(languageCode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for Locale.Language(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Locale.Language.init(identifier:)(a1, a2);
  v9 = Locale.Language.characterDirection.getter(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = 4;
  if (v9 == 2)
    v10 = 2;
  if (v9 == 1)
    return 0;
  else
    return v10;
}

Swift::Void __swiftcall NSTextAlignment.flip()()
{
  uint64_t *v0;
  uint64_t v1;

  if (*v0)
  {
    if (*v0 != 2)
      return;
    v1 = 0;
  }
  else
  {
    v1 = 2;
  }
  *v0 = v1;
}

uint64_t NSTextAlignment.ctTextAlignment.getter(unint64_t a1)
{
  if (a1 >= 5)
    return 4;
  else
    return (0x403010200uLL >> (8 * a1));
}

uint64_t UIViewPropertyAnimator.UpdateReason.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 4)
    return 3;
  else
    return 0x2010003u >> (8 * a1);
}

_QWORD *sub_1002C1E94@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result >= 4uLL)
    v2 = 3;
  else
    v2 = 0x2010003u >> (8 * *result);
  *a2 = v2;
  return result;
}

void UIViewPropertyAnimator.addModifiedAnimations(with:animations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v7[4] = a2;
  v8 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10015F6F8;
  v7[3] = &unk_100517428;
  v5 = _Block_copy(v7);
  v6 = v8;
  swift_retain(a3);
  objc_msgSend(v3, "addAnimations:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
}

UIViewPropertyAnimator __swiftcall UIViewPropertyAnimator.init(springTimingParameters:)(UISpringTimingParameters springTimingParameters)
{
  id v2;
  id v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  -[objc_class settlingDuration](springTimingParameters.super.isa, "settlingDuration");
  v3 = objc_msgSend(v2, "initWithDuration:timingParameters:", springTimingParameters.super.isa);

  return (UIViewPropertyAnimator)v3;
}

id UISpringTimingParameters.init(dampingRatio:response:)(double a1, double a2)
{
  double v2;
  double v3;

  v2 = 6.28318531 / a2 * (6.28318531 / a2);
  v3 = sqrt(v2);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithMass:stiffness:damping:initialVelocity:", 1.0, v2, (v3 + v3) * a1, 0.0, 0.0);
}

id UIView.setAnchorPoint(_:preserveFrame:)(char a1, double a2, double a3)
{
  void *v3;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;

  if ((a1 & 1) == 0)
    return objc_msgSend(v3, "setAnchorPoint:", a2, a3);
  v6 = UIView.untransformedFrame.getter();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v3, "setAnchorPoint:", a2, a3);
  return UIView.untransformedFrame.setter(v6, v8, v10, v12);
}

double sub_1002C20A4()
{
  double result;

  static UIView.Shadow.identity = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  unk_100562628 = xmmword_100438770;
  result = 0.0;
  unk_100562638 = xmmword_100438780;
  return result;
}

uint64_t *UIView.Shadow.identity.unsafeMutableAddressor()
{
  if (qword_1005561A0 != -1)
    swift_once(&qword_1005561A0, sub_1002C20A4);
  return &static UIView.Shadow.identity;
}

id static UIView.Shadow.identity.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;

  if (qword_1005561A0 != -1)
    swift_once(&qword_1005561A0, sub_1002C20A4);
  v2 = (void *)static UIView.Shadow.identity;
  *(_QWORD *)a1 = static UIView.Shadow.identity;
  *(_OWORD *)(a1 + 8) = unk_100562628;
  *(_OWORD *)(a1 + 24) = unk_100562638;
  return v2;
}

uint64_t sub_1002C21AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_1005572D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002C21EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005572D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C2234()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002C2260(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1002BDFC0(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1002C226C()
{
  return sub_1002C22A0(33);
}

uint64_t sub_1002C2274(uint64_t a1)
{
  uint64_t v1;

  return sub_1002BE394(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_1002C2280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002C2290(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002C2298()
{
  return sub_1002C22A0(32);
}

uint64_t sub_1002C22A0(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

id sub_1002C22D8(void *a1)
{
  uint64_t v1;

  return sub_1002BE54C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for UIStackView.SpacerView()
{
  return objc_opt_self(_TtCE14MusicUtilitiesCSo11UIStackView10SpacerView);
}

id *sub_1002C2300(id *a1)
{

  return a1;
}

void sub_1002C2328(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

_QWORD *sub_1002C2370(uint64_t a1, uint64_t (*a2)(_QWORD, double))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    result = (_QWORD *)sub_1001F111C(a1);
    v5 = (uint64_t)result;
    v7 = v6;
    v8 = 0;
    v9 = a1 + 64;
    v20 = v3;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != v7)
        goto LABEL_23;
      v22 = v8;
      v12 = a2(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5), *(double *)(*(_QWORD *)(a1 + 56) + 8 * v5));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v14);
      v10 = 1 << *(_BYTE *)(a1 + 32);
      if (v5 >= v10)
        goto LABEL_24;
      v15 = *(_QWORD *)(v9 + 8 * v11);
      if ((v15 & (1 << v5)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a1 + 36) != v7)
        goto LABEL_26;
      v16 = v15 & (-2 << (v5 & 0x3F));
      if (v16)
      {
        v10 = __clz(__rbit64(v16)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v17 = v11 + 1;
        v18 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v18)
        {
          v19 = *(_QWORD *)(v9 + 8 * v17);
          if (v19)
          {
LABEL_18:
            v10 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v11)
            {
              v19 = *(_QWORD *)(a1 + 80 + 8 * v11++);
              if (v19)
              {
                v17 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v8 = v22 + 1;
      v5 = v10;
      if (v22 + 1 == v20)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C2560(void *a1)
{
  id v2;
  double v3;
  double v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = objc_msgSend(a1, "layer");
  objc_msgSend(v2, "borderWidth");
  v4 = v3;

  if (v4 <= 0.0)
    return 0;
  v5 = objc_msgSend(a1, "layer");
  v6 = objc_msgSend(v5, "borderColor");

  if (!v6)
    return 0;
  v7 = objc_msgSend(a1, "layer");
  objc_msgSend(v7, "borderWidth");
  v9 = v8;

  v10 = v9;
  objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v6);

  return v10;
}

void sub_1002C266C(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v16[5];
  char v17;

  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  a2(a1, a4);
  v17 = *a4;
  if ((v17 & 1) == 0)
  {
    v6 = objc_msgSend(a1, "subviews");
    v7 = sub_1000DD108(0, &qword_100557308, UIView_ptr);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
      goto LABEL_20;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
        v10 = v8 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        v10 = v8 & 0xFFFFFFFFFFFFFF8;
        if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v11 = *(id *)(v8 + 32);
      }
      v12 = 0;
      while (1)
      {
        sub_1002C266C(v11, sub_1002C2E88, v16, &v17);

        if (v9 - 1 == v12)
          goto LABEL_16;
        v13 = v12 + 1;
        if ((v8 & 0xC000000000000001) != 0)
        {
          v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 + 1, v8);
        }
        else
        {
          if (v13 >= *(_QWORD *)(v10 + 16))
            goto LABEL_19;
          v14 = *(id *)(v8 + 8 * v12 + 40);
        }
        v11 = v14;
        if (__OFADD__(v13, 1))
          break;
        ++v12;
        if (v17 == 1)
        {

LABEL_16:
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (v8 < 0)
        v15 = v8;
      else
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease();
      if (!v9)
        goto LABEL_24;
    }
  }
}

uint64_t sub_1002C2844()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002C2868()
{
  uint64_t v0;

  sub_1002C1288(v0);
}

void sub_1002C2870(void *a1, void (*a2)(void *, char *, __n128), uint64_t a3, char *a4)
{
  __n128 v7;
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  double v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[6];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[31];
  char v25;

  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v7 = swift_beginAccess(a4, v24, 33, 0);
  a2(a1, a4, v7);
  swift_endAccess(v24);
  *(_QWORD *)&v8 = swift_beginAccess(a4, v24, 0, 0).n128_u64[0];
  v25 = *a4;
  v9 = objc_msgSend(a1, "childViewControllers", v8);
  v10 = sub_1000DD108(0, (unint64_t *)&qword_1005572E0, UIViewController_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
    goto LABEL_17;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v12)
  {
    swift_beginAccess(&v25, v23, 0, 0);
    v13 = 4;
    while (1)
    {
      v14 = (v11 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11)
          : *(id *)(v11 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      if (v25 == 1)
      {

        goto LABEL_12;
      }
      sub_1002C2870(v14, sub_1002C2E7C, v21, &v25);

      ++v13;
      if (v16 == v12)
        goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    if (v11 < 0)
      v20 = v11;
    else
      v20 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v17 = swift_beginAccess(&v25, v22, 0, 0).n128_u64[0];
  if ((v25 & 1) == 0)
  {
    v18 = objc_msgSend(a1, "presentedViewController", v17);
    if (v18)
    {
      v19 = v18;
      sub_1002C2870(v18, sub_1002C2E7C, v21, &v25);

    }
  }
}

id sub_1002C2A78(uint64_t a1, double a2)
{
  uint64_t v2;

  return sub_1002C1A18(a1, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), *(void **)(v2 + 32), a2, *(double *)(v2 + 40));
}

unint64_t sub_1002C2A90()
{
  unint64_t result;

  result = qword_100557338;
  if (!qword_100557338)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UIView.Shadow, &type metadata for UIView.Shadow);
    atomic_store(result, (unint64_t *)&qword_100557338);
  }
  return result;
}

unint64_t sub_1002C2AD8()
{
  unint64_t result;

  result = qword_100557340;
  if (!qword_100557340)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for UIViewPropertyAnimator.UpdateReason, &type metadata for UIViewPropertyAnimator.UpdateReason);
    atomic_store(result, (unint64_t *)&qword_100557340);
  }
  return result;
}

uint64_t _s6ShadowVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t _s6ShadowVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 _s6ShadowVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s6ShadowVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for UIView.Shadow()
{
  return &type metadata for UIView.Shadow;
}

uint64_t _s6BorderVwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void _s6BorderVwxx(uint64_t a1)
{

}

uint64_t _s6BorderVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = (void *)a2[2];
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  return a1;
}

__n128 _s6BorderVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s6BorderVwta(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t _s6BorderVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s6BorderVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIView.Border()
{
  return &type metadata for UIView.Border;
}

_QWORD *_s29CompressionResistancePriorityVwCP(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UIView.CompressionResistancePriority()
{
  return &type metadata for UIView.CompressionResistancePriority;
}

uint64_t _s12UpdateReasonOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002C2DFC + 4 * byte_1004378A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002C2E30 + 4 * byte_1004378A0[v4]))();
}

uint64_t sub_1002C2E30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002C2E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002C2E40);
  return result;
}

uint64_t sub_1002C2E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002C2E54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002C2E58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002C2E60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIViewPropertyAnimator.UpdateReason()
{
  return &type metadata for UIViewPropertyAnimator.UpdateReason;
}

uint64_t sub_1002C2E7C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return sub_1002C17F0(a1, a2, *(void (**)(uint64_t, _BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE **)(v2 + 32));
}

uint64_t sub_1002C2E88(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v4;
  uint64_t result;

  v4 = *(_BYTE **)(v2 + 32);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(v2 + 16))(a1, v4);
  *a2 = *v4;
  return result;
}

uint64_t sub_1002C2EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s9_ObserverC18HandlerAssociationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t URL.appending(_:)(uint64_t a1, uint64_t a2, char a3)
{
  return URL.appendingPathComponent(_:isDirectory:)(a1, a2, (a3 & 1) == 0);
}

uint64_t URL.init(string:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10000B4C8(&qword_100556E68);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    goto LABEL_4;
  URL.init(string:)(a1, a2);
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_100011694((uint64_t)v8, &qword_100556E68);
LABEL_4:
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
}

void URL.parametrize(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;

  v5 = sub_10000B4C8(&qword_100556E68);
  __chkstk_darwin(v5);
  v63 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for URLQueryItem(0);
  v71 = *(_QWORD *)(v73 - 8);
  v7 = __chkstk_darwin(v73);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v72 = (char *)&v58 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v58 - v12;
  v14 = sub_10000B4C8(&qword_1005573E0);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URLComponents(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v64 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v60 = a2;
  v61 = v21;
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
  v62 = v20;
  v22(a2, v2);
  if (*(_QWORD *)(a1 + 16))
  {
    URLComponents.init(url:resolvingAgainstBaseURL:)(v2, 0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_100011694((uint64_t)v16, &qword_1005573E0);
    }
    else
    {
      v58 = v18;
      v59 = v17;
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v64, v16, v17);
      v24 = URLComponents.queryItems.getter(v23);
      if (v24)
        v25 = (char *)v24;
      else
        v25 = (char *)_swiftEmptyArrayStorage;
      v26 = swift_bridgeObjectRetain();
      v27 = sub_1002C4C34(v26);
      swift_bridgeObjectRelease();
      v74 = v27;
      sub_1002C4AF8(&v74);
      v28 = v74;
      v69 = v74[2];
      if (v69)
      {
        v29 = 0;
        v67 = v74;
        v68 = v74 + 4;
        v65 = v13;
        v66 = v9;
        while (v29 < v28[2])
        {
          v70 = v29;
          v33 = &v68[4 * v29];
          v34 = *v33;
          v35 = v33[1];
          v37 = v33[2];
          v36 = v33[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          URLQueryItem.init(name:value:)(v34, v35, v37, v36);
          swift_bridgeObjectRelease();
          v38 = *((_QWORD *)v25 + 2);
          if (v38)
          {
            v39 = v71;
            v40 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
            v41 = (uint64_t)v25;
            swift_bridgeObjectRetain();
            v42 = 0;
            v43 = *(_QWORD *)(v39 + 72);
            v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v39 + 16);
            while (1)
            {
              v45 = v44(v72, v41 + v40, v73);
              v46 = URLQueryItem.name.getter(v45);
              if (v46 == v34 && v47 == v35)
                break;
              v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v34, v35, 0);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
              if ((v48 & 1) != 0)
                goto LABEL_25;
              ++v42;
              v40 += v43;
              if (v38 == v42)
              {
                swift_bridgeObjectRelease();
                v25 = (char *)v41;
                swift_bridgeObjectRelease();
                v13 = v65;
                v9 = v66;
                v28 = v67;
                goto LABEL_20;
              }
            }
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
LABEL_25:
            swift_bridgeObjectRelease();
            v25 = (char *)v41;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
              v25 = (char *)sub_1002C3C20(v41);
            v28 = v67;
            if (v42 >= *((_QWORD *)v25 + 2))
              goto LABEL_34;
            v51 = &v25[v40];
            v13 = v65;
            (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v51, v65, v73);
            v9 = v66;
          }
          else
          {
            swift_bridgeObjectRelease();
            v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v71 + 16);
LABEL_20:
            v44(v9, (unint64_t)v13, v73);
            if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
              v25 = (char *)sub_1002AACA0(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
            v50 = *((_QWORD *)v25 + 2);
            v49 = *((_QWORD *)v25 + 3);
            if (v50 >= v49 >> 1)
              v25 = (char *)sub_1002AACA0(v49 > 1, v50 + 1, 1, v25);
            *((_QWORD *)v25 + 2) = v50 + 1;
            v30 = v71;
            v31 = (unint64_t)&v25[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
                                       + *(_QWORD *)(v71 + 72) * v50];
            v32 = v73;
            (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))(v31, v9, v73);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v32);
          }
          v29 = v70 + 1;
          if (v70 + 1 == v69)
            goto LABEL_29;
        }
        __break(1u);
LABEL_34:
        __break(1u);
        swift_release(v28);
        __break(1u);
      }
      else
      {
LABEL_29:
        swift_release(v28);
        v52 = v64;
        v53 = URLComponents.queryItems.setter(v25);
        v54 = (uint64_t)v63;
        URLComponents.url.getter(v53);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v59);
        v56 = v61;
        v55 = v62;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v54, 1, v62) == 1)
        {
          sub_100011694(v54, &qword_100556E68);
        }
        else
        {
          v57 = v60;
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v60, v55);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v57, v54, v55);
        }
      }
    }
  }
}

uint64_t static URL.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return URL.appendingPathComponent(_:isDirectory:)(a2, a3, (a4 & 1) == 0);
}

uint64_t URLComponents.queryItemsDictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v0 = type metadata accessor for URLQueryItem(0);
  v37 = *(_QWORD *)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = URLComponents.queryItems.getter(v1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = (_QWORD *)sub_10029CD24((uint64_t)_swiftEmptyArrayStorage);
  v8 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v32 = v5;
  v33 = v3;
  v9 = v5 + v8;
  v10 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v37 + 16);
  v35 = *(_QWORD *)(v37 + 72);
  v36 = v10;
  v34 = v0;
  for (i = v10(v3, v9, v0); ; i = v36(v3, v9, v0))
  {
    v13 = URLQueryItem.value.getter(i);
    if (v14)
      break;
LABEL_6:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v0);
    v9 += v35;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
  }
  v38 = v14;
  v15 = v13;
  URLQueryItem.name.getter(v13);
  v16 = String.lowercased()();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v39 = v7;
  v19 = sub_1002B230C(v16._countAndFlagsBits, (uint64_t)v16._object);
  v20 = v7[2];
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (!__OFADD__(v20, v21))
  {
    v23 = v18;
    if (v7[3] < v22)
    {
      sub_1002C3C48(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_1002B230C(v16._countAndFlagsBits, (uint64_t)v16._object);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_26;
      v19 = v24;
      v26 = v38;
      v7 = v39;
      if ((v23 & 1) == 0)
        goto LABEL_16;
LABEL_4:
      v12 = (uint64_t *)(v7[7] + 16 * v19);
      swift_bridgeObjectRelease();
      *v12 = v15;
      v12[1] = v26;
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v33;
      v0 = v34;
      goto LABEL_6;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v38;
      v7 = v39;
      if ((v18 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_1002C45C0();
      v26 = v38;
      v7 = v39;
      if ((v23 & 1) != 0)
        goto LABEL_4;
    }
LABEL_16:
    v7[(v19 >> 6) + 8] |= 1 << v19;
    *(Swift::String *)(v7[6] + 16 * v19) = v16;
    v27 = (uint64_t *)(v7[7] + 16 * v19);
    *v27 = v15;
    v27[1] = v26;
    v28 = v7[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_25;
    v7[2] = v30;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_1002C3858(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1002C39EC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = 16 * v16;
    v21 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v23 = *v21;
    v22 = v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(a4 + 56) + v20);
    v25 = *v24;
    v26 = v24[1];
    *v11 = v23;
    v11[1] = v22;
    v11[2] = v25;
    v11[3] = v26;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_1002C3C0C(uint64_t a1)
{
  return sub_1002AAAA8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_1002C3C20(uint64_t a1)
{
  return sub_1002AACA0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_1002C3C34(uint64_t a1)
{
  return sub_1002AACB4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1002C3C48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100556328);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002C3F6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100556320);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v18 >= v37)
          goto LABEL_39;
        v19 = v38[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v37)
            goto LABEL_39;
          v19 = v38[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v37)
            {
LABEL_39:
              swift_release(v5);
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v38[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v13 >= v37)
                  goto LABEL_39;
                v19 = v38[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 24 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (void *)v21[2];
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v26 = v24;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)(v40);
      if (v22)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)(v40, v23, v22);
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v8 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        v14 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v14);
      *v15 = v23;
      v15[1] = v22;
      v15[2] = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002C42AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100556358);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002C45C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10000B4C8(&qword_100556328);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002C4778()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_10000B4C8(&qword_100556320);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * v15);
    v18 = v17[1];
    v19 = (void *)v17[2];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    v23 = v19;
    swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002C4944()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000B4C8(&qword_100556358);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1002C4AF8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1002C59C8(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1002C4EE0(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_1002C4B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000B4C8(&qword_100557400);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_1002C3858(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_100194204(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_1002C4C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000B4C8(&qword_1005573E8);
  v4 = (_QWORD *)swift_allocObject(v3, 32 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 1;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 5);
  v7 = sub_1002C39EC((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain();
  sub_100194204(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1002C4D1C()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s9ComponentOwxx(uint64_t *a1)
{
  return sub_1002C4D34(*a1, a1[1]);
}

uint64_t sub_1002C4D34(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t _s9ComponentOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1002C4D1C();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s9ComponentOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1002C4D1C();
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1002C4D34(v6, v7);
  return a1;
}

__n128 _s9ComponentOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s9ComponentOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1002C4D34(v4, v5);
  return a1;
}

uint64_t _s9ComponentOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s9ComponentOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1002C4EBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1002C4EC4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for URL.Component()
{
  return &type metadata for URL.Component;
}

uint64_t sub_1002C4EE0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  Swift::Int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  Swift::Int v115;
  uint64_t v116;
  char *v117;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_1002C559C(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_151;
  v114 = result;
  v111 = a1;
  if (v3 <= 1)
  {
    v8 = _swiftEmptyArrayStorage;
    v117 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_117:
      result = (uint64_t)v11;
      v113 = v8;
      if (v12 >= 2)
      {
        v103 = *v111;
        do
        {
          v104 = v12 - 2;
          if (v12 < 2)
            goto LABEL_146;
          if (!v103)
            goto LABEL_159;
          v105 = result;
          v106 = *(_QWORD *)(result + 32 + 16 * v104);
          v107 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
          result = sub_1002C567C((char *)(v103 + 32 * v106), (char *)(v103 + 32 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v103 + 32 * v107, v117);
          if (v1)
            break;
          if (v107 < v106)
            goto LABEL_147;
          result = swift_isUniquelyReferenced_nonNull_native(v105);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1002C59A0(v105);
            v105 = result;
          }
          if (v104 >= *(_QWORD *)(v105 + 16))
            goto LABEL_148;
          v108 = (_QWORD *)(v105 + 32 + 16 * v104);
          *v108 = v106;
          v108[1] = v107;
          v109 = *(_QWORD *)(v105 + 16);
          if (v12 > v109)
            goto LABEL_149;
          memmove((void *)(v105 + 32 + 16 * (v12 - 1)), (const void *)(v105 + 32 + 16 * v12), 16 * (v109 - v12));
          result = v105;
          *(_QWORD *)(v105 + 16) = v109 - 1;
          v12 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v113[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v113 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_10000B4C8(&qword_1005573F0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(result + 16) = v6;
    v113 = (_QWORD *)result;
    v117 = (char *)(result + 32);
  }
  v9 = 0;
  v10 = *a1;
  v112 = *a1 + 8;
  v110 = *a1 + 24;
  v11 = (char *)_swiftEmptyArrayStorage;
  v115 = v3;
  v116 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_45;
    v14 = (uint64_t *)(v10 + 32 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)(v10 + 32 * v13);
    result = *v17;
    v18 = v17[1];
    if (*v17 == v15 && v18 == v16)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_44;
      v20 = 0;
    }
    else
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, v15, v16, 1);
      v20 = result;
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v112 + 32 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (uint64_t *)(v10 + 32 * v9);
      result = *v26;
      v27 = v26[1];
      if (*v26 == v24 && v27 == v25)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v27, v24, v25, 1);
        if (((v20 ^ result) & 1) != 0)
          goto LABEL_36;
      }
      v22 += 4;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_155;
      if (v13 < v21)
      {
        v29 = 32 * v21;
        v30 = 32 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_158;
            v33 = (_OWORD *)(v10 + v30);
            v34 = v10 + v29;
            v35 = *(_OWORD *)(v10 + v30);
            v36 = *(_QWORD *)(v10 + v30 + 16);
            v37 = *(_QWORD *)(v10 + v30 + 24);
            v38 = *(_OWORD *)(v10 + v29 - 16);
            *v33 = *(_OWORD *)(v10 + v29 - 32);
            v33[1] = v38;
            *(_OWORD *)(v34 - 32) = v35;
            *(_QWORD *)(v34 - 16) = v36;
            *(_QWORD *)(v34 - 8) = v37;
          }
          ++v32;
          v29 -= 32;
          v30 += 32;
        }
        while (v32 < v31);
      }
LABEL_44:
      v9 = v21;
    }
LABEL_45:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_150;
      if (v9 - v13 < v114)
        break;
    }
LABEL_66:
    if (v9 < v13)
      goto LABEL_145;
    result = swift_isUniquelyReferenced_nonNull_native(v11);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1002C58A8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v11 = (char *)result;
    }
    v53 = *((_QWORD *)v11 + 2);
    v52 = *((_QWORD *)v11 + 3);
    v12 = v53 + 1;
    if (v53 >= v52 >> 1)
    {
      result = (uint64_t)sub_1002C58A8((char *)(v52 > 1), v53 + 1, 1, v11);
      v11 = (char *)result;
    }
    *((_QWORD *)v11 + 2) = v12;
    v54 = v11 + 32;
    v55 = &v11[16 * v53 + 32];
    *(_QWORD *)v55 = v13;
    *((_QWORD *)v55 + 1) = v9;
    if (v53)
    {
      v10 = v116;
      while (1)
      {
        v56 = v12 - 1;
        if (v12 >= 4)
        {
          v61 = &v54[2 * v12];
          v62 = *(v61 - 8);
          v63 = *(v61 - 7);
          v67 = __OFSUB__(v63, v62);
          v64 = v63 - v62;
          if (v67)
            goto LABEL_134;
          v66 = *(v61 - 6);
          v65 = *(v61 - 5);
          v67 = __OFSUB__(v65, v66);
          v59 = v65 - v66;
          v60 = v67;
          if (v67)
            goto LABEL_135;
          v68 = v12 - 2;
          v69 = &v54[2 * v12 - 4];
          v71 = *v69;
          v70 = v69[1];
          v67 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          if (v67)
            goto LABEL_136;
          v67 = __OFADD__(v59, v72);
          v73 = v59 + v72;
          if (v67)
            goto LABEL_138;
          if (v73 >= v64)
          {
            v91 = &v54[2 * v56];
            v93 = *v91;
            v92 = v91[1];
            v67 = __OFSUB__(v92, v93);
            v94 = v92 - v93;
            if (v67)
              goto LABEL_144;
            v84 = v59 < v94;
            goto LABEL_104;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v85 = *((_QWORD *)v11 + 4);
            v86 = *((_QWORD *)v11 + 5);
            v67 = __OFSUB__(v86, v85);
            v78 = v86 - v85;
            v79 = v67;
            goto LABEL_98;
          }
          v58 = *((_QWORD *)v11 + 4);
          v57 = *((_QWORD *)v11 + 5);
          v67 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          v60 = v67;
        }
        if ((v60 & 1) != 0)
          goto LABEL_137;
        v68 = v12 - 2;
        v74 = &v54[2 * v12 - 4];
        v76 = *v74;
        v75 = v74[1];
        v77 = __OFSUB__(v75, v76);
        v78 = v75 - v76;
        v79 = v77;
        if (v77)
          goto LABEL_139;
        v80 = &v54[2 * v56];
        v82 = *v80;
        v81 = v80[1];
        v67 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v67)
          goto LABEL_141;
        if (__OFADD__(v78, v83))
          goto LABEL_143;
        if (v78 + v83 >= v59)
        {
          v84 = v59 < v83;
LABEL_104:
          if (v84)
            v56 = v68;
          goto LABEL_106;
        }
LABEL_98:
        if ((v79 & 1) != 0)
          goto LABEL_140;
        v87 = &v54[2 * v56];
        v89 = *v87;
        v88 = v87[1];
        v67 = __OFSUB__(v88, v89);
        v90 = v88 - v89;
        if (v67)
          goto LABEL_142;
        if (v90 < v78)
          goto LABEL_15;
LABEL_106:
        v95 = v56 - 1;
        if (v56 - 1 >= v12)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v96 = v11;
        v97 = v10;
        v98 = &v54[2 * v95];
        v99 = *v98;
        v100 = &v54[2 * v56];
        v101 = v100[1];
        result = sub_1002C567C((char *)(v97 + 32 * *v98), (char *)(v97 + 32 * *v100), v97 + 32 * v101, v117);
        if (v1)
          goto LABEL_114;
        if (v101 < v99)
          goto LABEL_131;
        if (v56 > *((_QWORD *)v96 + 2))
          goto LABEL_132;
        *v98 = v99;
        v54[2 * v95 + 1] = v101;
        v102 = *((_QWORD *)v96 + 2);
        if (v56 >= v102)
          goto LABEL_133;
        v11 = v96;
        v12 = v102 - 1;
        result = (uint64_t)memmove(&v54[2 * v56], v100 + 2, 16 * (v102 - 1 - v56));
        *((_QWORD *)v96 + 2) = v102 - 1;
        v84 = v102 > 2;
        v10 = v116;
        if (!v84)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v116;
LABEL_15:
    v3 = v115;
    if (v9 >= v115)
    {
      v8 = v113;
      goto LABEL_117;
    }
  }
  if (__OFADD__(v13, v114))
    goto LABEL_153;
  if (v13 + v114 >= v3)
    v39 = v3;
  else
    v39 = v13 + v114;
  if (v39 >= v13)
  {
    if (v9 != v39)
    {
      v40 = (_QWORD *)(v110 + 32 * v9);
      do
      {
        v41 = (uint64_t *)(v10 + 32 * v9);
        v42 = *v41;
        v43 = v41[1];
        v44 = v13;
        v45 = v40;
        do
        {
          result = *(v45 - 7);
          v46 = *(v45 - 6);
          v47 = (__int128 *)(v45 - 7);
          if (result == v42 && v46 == v43)
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v46, v42, v43, 1);
          if ((result & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v50 = *v47;
          v49 = *(_OWORD *)(v45 - 5);
          *(v45 - 4) = *v45;
          v45 -= 4;
          v42 = v45[1];
          v43 = v45[2];
          v51 = v45[3];
          v47[2] = v50;
          v47[3] = v49;
          *(v45 - 3) = v42;
          *(v45 - 2) = v43;
          *(v45 - 1) = v51;
          ++v44;
        }
        while (v9 != v44);
        ++v9;
        v40 += 4;
      }
      while (v9 != v39);
      v9 = v39;
    }
    goto LABEL_66;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_1002C559C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 + 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 32 * v4);
    v10 = *v9;
    v11 = v9[1];
    v12 = v6;
    v13 = (_QWORD *)v8;
    while (1)
    {
      result = *(v13 - 7);
      v14 = *(v13 - 6);
      v15 = (__int128 *)(v13 - 7);
      v16 = result == v10 && v14 == v11;
      if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v10, v11, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v18 = *v15;
      v17 = *(_OWORD *)(v13 - 5);
      *(v13 - 4) = *v13;
      v13 -= 4;
      v10 = v13[1];
      v11 = v13[2];
      v19 = v13[3];
      v15[2] = v18;
      v15[3] = v17;
      *(v13 - 3) = v10;
      *(v13 - 2) = v11;
      *(v13 - 1) = v19;
      if (v4 == ++v12)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C567C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  BOOL v28;
  __int128 v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 31;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4)
      memmove(a4, __src, 32 * v13);
    v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32)
      goto LABEL_48;
    v20 = (char *)(a3 - 32);
    while (1)
    {
      v21 = v20 + 32;
      v22 = *((_QWORD *)v14 - 4);
      v23 = *((_QWORD *)v14 - 3);
      v24 = *((_QWORD *)v6 - 4);
      v25 = *((_QWORD *)v6 - 3);
      v26 = v6 - 32;
      v27 = v24 == v22 && v25 == v23;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v22, v23, 1) & 1) == 0)
      {
        v26 = v14 - 32;
        if (v21 != v14)
        {
          v14 -= 32;
LABEL_45:
          v29 = *((_OWORD *)v26 + 1);
          *(_OWORD *)v20 = *(_OWORD *)v26;
          *((_OWORD *)v20 + 1) = v29;
          goto LABEL_46;
        }
        v28 = v20 >= v14;
        v14 -= 32;
        if (v28)
          goto LABEL_45;
      }
      else
      {
        if (v21 != v6)
        {
          v6 -= 32;
          goto LABEL_45;
        }
        v28 = v20 >= v6;
        v6 -= 32;
        if (v28)
          goto LABEL_45;
      }
LABEL_46:
      if (v6 > v7)
      {
        v20 -= 32;
        if (v14 > v4)
          continue;
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[32 * v10] <= a4)
    memmove(a4, __dst, 32 * v10);
  v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      v15 = *((_QWORD *)v6 + 1);
      v16 = *((_QWORD *)v4 + 1);
      v17 = *(_QWORD *)v4 == *(_QWORD *)v6 && v16 == v15;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v4, v16, *(_QWORD *)v6, v15, 1) & 1) == 0)
        break;
      v18 = v6;
      v17 = v7 == v6;
      v6 += 32;
      if (!v17)
        goto LABEL_20;
LABEL_21:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_23;
    }
    v18 = v4;
    v17 = v7 == v4;
    v4 += 32;
    if (v17)
      goto LABEL_21;
LABEL_20:
    v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v18;
    *((_OWORD *)v7 + 1) = v19;
    goto LABEL_21;
  }
LABEL_23:
  v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0])
    memmove(v6, v4, 32 * ((v14 - v4) / 32));
  return 1;
}

char *sub_1002C58A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005573F8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1002C59A0(uint64_t a1)
{
  return sub_1002C58A8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1002C59B4(uint64_t a1)
{
  return sub_1002CD370(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1002C59C8(_QWORD *a1)
{
  return sub_1002CD458(0, a1[2], 0, a1);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a4;
  v44 = a5;
  v42 = a2;
  v11 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  v39 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v39 + 64);
  v16 = __chkstk_darwin(v14);
  v40 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v41 = (uint64_t)&v39 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v39 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a6);
  v21 = *(_QWORD *)(a7 + 40);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 8);
  swift_bridgeObjectRetain();
  v23 = String.init<A>(_:)(v13, a6, v21, v22);
  v25 = v24;
  _s9MusicCore6PlayerC14CommandOptionsV4uuid10Foundation4UUIDVvpfi_0();
  v26 = &v20[*(int *)(v14 + 20)];
  *(_QWORD *)v26 = v42;
  *((_QWORD *)v26 + 1) = a3;
  v27 = (uint64_t *)&v20[*(int *)(v14 + 24)];
  *v27 = v23;
  v27[1] = v25;
  if (qword_1005561A8 != -1)
    swift_once(&qword_1005561A8, sub_1002C7B24);
  v28 = qword_100557408;
  v29 = *(_QWORD *)(qword_100557408
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 16));
  v30 = v45;
  sub_1002C7BF8(v28, (uint64_t)v20, v43, v44);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 16));
  if (v30)
  {
    sub_10000E750((uint64_t)v20, _s20KeyValueRegistrationC10IdentifierVMa);
  }
  else
  {
    v31 = v41;
    sub_10029FE98((uint64_t)v20, v41);
    v32 = v40;
    sub_10000DB44((uint64_t)v20, v40, _s20KeyValueRegistrationC10IdentifierVMa);
    v33 = *(unsigned __int8 *)(v39 + 80);
    v34 = (v33 + 16) & ~v33;
    v35 = swift_allocObject(&unk_100517780, v34 + v15, v33 | 7);
    sub_10000DB44(v32, v35 + v34, _s20KeyValueRegistrationC10IdentifierVMa);
    v36 = type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    v29 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    sub_10000DB44(v31, v29 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
    v37 = (void (**)())(v29 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate);
    *v37 = sub_10029FFBC;
    v37[1] = (void (*)())v35;
  }
  return v29;
}

uint64_t sub_1002C5C7C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  _QWORD v25[4];
  uint64_t (*v26)(_QWORD *);

  v26 = a1;
  v4 = v3;
  v23 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 24 * i);
    v18 = *v16;
    v17 = v16[1];
    v19 = (void *)v16[2];
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v25[0] = *v16;
    v25[1] = v17;
    v25[2] = v19;
    v25[3] = v20;
    swift_bridgeObjectRetain();
    v21 = v19;
    swift_bridgeObjectRetain();
    v22 = v26(v25);
    if (v4)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v20);

      swift_bridgeObjectRelease(v17);
      return v18;
    }
    if ((v22 & 1) != 0)
    {
      swift_release(a3);
      return v18;
    }
    swift_bridgeObjectRelease(v20);

    result = swift_bridgeObjectRelease(v17);
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
      break;
    if (v10 >= v24)
      goto LABEL_28;
    v14 = *(_QWORD *)(v23 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
        goto LABEL_16;
      v15 = v10 + 2;
      if (v10 + 2 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
        goto LABEL_16;
      v15 = v10 + 3;
      if (v10 + 3 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
      {
LABEL_16:
        v10 = v15;
        goto LABEL_17;
      }
      v15 = v10 + 4;
      if (v10 + 4 < v24)
      {
        v14 = *(_QWORD *)(v23 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_31;
            if (v10 >= v24)
              goto LABEL_28;
            v14 = *(_QWORD *)(v23 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release(a3);
      return 0;
    }
LABEL_17:
    v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t UserDefault.init(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;

  *(_QWORD *)a7 = a2;
  v12 = type metadata accessor for UserDefault(0, a4, a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a7[*(int *)(v12 + 44)], a3, a4);
  v13 = &a7[*(int *)(v12 + 48)];
  v14 = type metadata accessor for Optional(0, a5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a1, v14);
}

uint64_t UserDefault.init<A>(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v26 = a7;
  v24 = a9;
  __chkstk_darwin(a1);
  v16 = (uint64_t *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Optional(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v20, a1, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(v16, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a3, a6);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  return UserDefault.init(wrappedValue:defaults:key:)((uint64_t)v21, v25, (uint64_t)v16, a4, a5, v26, v24);
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];

  v3 = v2;
  v22 = a2;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v6 + 24);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - v12;
  NSUserDefaults.subscript.getter(v2 + *(int *)(a1 + 44), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), v23);
  v14 = sub_10000B4C8(&qword_1005568B0);
  v15 = swift_dynamicCast(v13, v23, v14, v9, 6);
  v16 = *(_QWORD *)(v9 - 8);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v17(v13, v15 ^ 1u, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v3, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v22, &v8[*(int *)(a1 + 48)], v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    v19 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v20 = v22;
    v19(v22, v13, v9);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(v20, 0, 1, v9);
  }
}

double NSUserDefaults.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  double result;
  uint64_t v16;

  __chkstk_darwin(a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  String.init<A>(_:)(v9, a2, *(_QWORD *)(a3 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8));
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v4, "objectForKey:", v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    swift_unknownObjectRelease(v14);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1002CA4C4(a1, a2);
  v4 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002CA618(v11, (uint64_t)&v24);
  if (v25)
  {
    sub_10013BB38(&v24, &v26);
    v14 = v27;
    v15 = sub_10000D900(&v26, v27);
    v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    String.init<A>(_:)(v13, a3, *(_QWORD *)(a4 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v5, "setObject:forKey:", v16, v19);
    swift_unknownObjectRelease(v16);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
    sub_1002A17AC(a1);
    return sub_100011758(&v26);
  }
  else
  {
    sub_1002A17AC((uint64_t)&v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    String.init<A>(_:)(v13, a3, *(_QWORD *)(a4 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
    v22 = v21;
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    objc_msgSend(v5, "removeObjectForKey:", v23);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
    return sub_1002A17AC(a1);
  }
}

void (*UserDefault.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 24));
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_1002C65C0;
}

void sub_1002C65C0(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_1002CA4C4((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_1002CA4C4((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t UserDefault.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void NSUserDefaults.Suite.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, a2, a3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static NSUserDefaults.Suite.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int NSUserDefaults.Suite.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v5, a1, a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1002C67B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1002C6824(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1002C6888()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002C68F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  v5 = *a1;
  if (v5 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, *a2, v4, 0);
}

id NSUserDefaults.init(suite:)(uint64_t a1, uint64_t a2)
{
  id v3;
  NSString v4;
  id v5;

  if (!a2)
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithSuiteName:", 0);
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  swift_bridgeObjectRelease(a2);
  if (v5)

  return v5;
}

void (*NSUserDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;

  v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v9[10] = v4;
  v9[11] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v9[12] = malloc(v11);
  v9[13] = malloc(v11);
  (*(void (**)(void))(v10 + 16))();
  NSUserDefaults.subscript.getter(a2, a3, a4, v9);
  return sub_1002C6A90;
}

void sub_1002C6A90(uint64_t *a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)*a1;
  v4 = *(void **)(*a1 + 96);
  v3 = *(void **)(*a1 + 104);
  if ((a2 & 1) != 0)
  {
    v5 = v2[11];
    v7 = v2[8];
    v6 = v2[9];
    sub_1002CA618(*a1, (uint64_t)(v2 + 4));
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v4, v3, v7);
    NSUserDefaults.subscript.setter((uint64_t)(v2 + 4), (uint64_t)v4, v7, v6);
    sub_1002A17AC((uint64_t)v2);
  }
  else
  {
    NSUserDefaults.subscript.setter(*a1, v2[13], v2[8], v2[9]);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t NSUserDefaults.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v14 - v10), a1, a2);
  v12 = NSUserDefaults.subscript.getter((uint64_t)v11, AssociatedTypeWitness, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t, double))(v9 + 8))(v11, AssociatedTypeWitness, v12);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1002CA660(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void (*NSUserDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t *a1, char a2)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;

  v10 = malloc(0x70uLL);
  *a1 = v10;
  v10[10] = a5;
  v10[11] = v5;
  v10[8] = a3;
  v10[9] = a4;
  v11 = *(_QWORD *)(a3 - 8);
  v10[12] = v11;
  v10[13] = malloc(*(_QWORD *)(v11 + 64));
  (*(void (**)(void))(v11 + 16))();
  NSUserDefaults.subscript.getter(a3, a4, a5, v10);
  return sub_1002C6CFC;
}

void sub_1002C6CFC(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[12];
    v3 = (void *)v2[13];
    v5 = v2[10];
    v7 = v2[8];
    v6 = v2[9];
    sub_1002CA618(*a1, (uint64_t)(v2 + 4));
    sub_1002CA660((uint64_t)(v2 + 4), (uint64_t)v3, v7, v6, v5);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v7);
    sub_1002A17AC((uint64_t)v2);
  }
  else
  {
    v8 = v2[12];
    v3 = (void *)v2[13];
    v9 = v2[8];
    sub_1002CA660(*a1, (uint64_t)v3, v9, v2[9], v2[10]);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v3, v9);
  }
  free(v3);
  free(v2);
}

uint64_t _sSo14NSUserDefaultsC14MusicUtilitiesE8MigratorV3keyxvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t NSUserDefaults.Migrator.init(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;

  *a6 = a1;
  v8 = (char *)a6 + *(int *)(type metadata accessor for NSUserDefaults.Migrator(0, a3, a4, a5) + 44);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a2, a3);
}

uint64_t NSUserDefaults.Migrator.init<A>(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v14 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of RawRepresentable.rawValue.getter(v16, v17, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a2, a5);
  *(_QWORD *)a7 = a1;
  v19 = type metadata accessor for NSUserDefaults.Migrator(0, a3, a4, a6);
  return (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v14 + 32))(&a7[*(int *)(v19 + 44)], v16, a3);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t WitnessTable;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(id *, uint64_t);
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *);
  id v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];
  char *v82;

  v9 = v8;
  v59 = a7;
  v71 = a4;
  v74 = a3;
  v75 = a2;
  v66 = a1;
  v60 = a8;
  v72 = a6;
  v65 = *(_QWORD *)(a6 - 8);
  v11 = __chkstk_darwin(a1);
  v70 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v11);
  v62 = (id *)((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(v16 + 16);
  v73 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v14);
  v61 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v19;
  v20 = type metadata accessor for Optional(0, v19);
  v67 = *(_QWORD *)(v20 - 8);
  v68 = v20;
  v21 = __chkstk_darwin(v20);
  v64 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v82 = (char *)&v59 - v23;
  v24 = *(_QWORD *)(a5 + 24);
  v25 = type metadata accessor for Optional(0, v24);
  v26 = *(_QWORD *)(v25 - 8);
  v77 = v25;
  v78 = v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v59 - v27;
  v29 = v8 + *(int *)(a5 + 44);
  v30 = *(_QWORD *)(a5 + 32);
  NSUserDefaults.subscript.getter(v29, v17, v30, v81);
  sub_1002CA618((uint64_t)v81, (uint64_t)&v79);
  v31 = sub_10000B4C8(&qword_1005568B0);
  v32 = swift_dynamicCast(v28, &v79, v31, v24, 6);
  v33 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v28, v32 ^ 1u, 1, v24);
  sub_1002CA618((uint64_t)v81, (uint64_t)&v79);
  v34 = *((_QWORD *)&v80 + 1);
  sub_1002A17AC((uint64_t)&v79);
  if (v34 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v24) == 1)
  {
    v35 = _s8MigratorV5ErrorOMa(0, v17, v24, v30);
    WitnessTable = swift_getWitnessTable(byte_100437D00, v35);
    swift_allocError(v35, WitnessTable, 0, 0);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v37, v29, v17);
    swift_willThrow(v38);
LABEL_5:
    sub_1002A17AC((uint64_t)v81);
    return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v77);
  }
  v39 = v76;
  v75(v28);
  if (v39)
    goto LABEL_5;
  v41 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v61, v29, v17);
  v79 = 0u;
  v80 = 0u;
  NSUserDefaults.subscript.setter((uint64_t)&v79, v41, v17, v30);
  v42 = v63;
  v43 = v62;
  (*(void (**)(id *, uint64_t, uint64_t))(v63 + 16))(v62, v9, a5);
  v44 = v71;
  if (v71)
  {
    v76 = v71;
  }
  else
  {
    v45 = *v43;
    v44 = v71;
    v76 = v45;
  }
  v46 = v72;
  v47 = (uint64_t)v70;
  v49 = v67;
  v48 = v68;
  v50 = *(void (**)(id *, uint64_t))(v42 + 8);
  v51 = v44;
  v50(v43, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v47, v66, v46);
  v52 = v64;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v64, v82, v48);
  v53 = v69;
  v54 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v69) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
    v79 = 0u;
    v80 = 0u;
  }
  else
  {
    *((_QWORD *)&v80 + 1) = v53;
    v55 = sub_1000C16E0(&v79);
    (*(void (**)(_QWORD *, char *, uint64_t))(v54 + 32))(v55, v52, v53);
  }
  v56 = v60;
  v57 = v76;
  v58 = v77;
  NSUserDefaults.subscript.setter((uint64_t)&v79, v47, v72, v59);

  sub_1002A17AC((uint64_t)v81);
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v56, v82, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v58);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a6;
  v21 = a3;
  v22 = a4;
  v20 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v19 - v16;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v19 - v16), a5, a7);
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)((uint64_t)v17, a1, a2, v21, v22, AssociatedTypeWitness, v20, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
}

double NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  double result;

  v12 = *(_QWORD *)(a3 + 24);
  v13 = swift_allocObject(&unk_1005177A8, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)(a1, (void (*)(char *))sub_10029DEF4, v13, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

uint64_t (*static NSUserDefaults.ValueTransformer<>.identity.getter(uint64_t a1))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(swift_allocObject(&unk_1005177A8, 24, 7) + 16) = a1;
  return sub_10029DEF4;
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v17;

  v17 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v17 - v13), a3, a4);
  v15 = NSUserDefaults.Migrator.migrateValue<A>(to:destination:)((uint64_t)v14, a1, a2, AssociatedTypeWitness, v17, a6);
  return (*(uint64_t (**)(char *, uint64_t, double))(v12 + 8))(v14, AssociatedTypeWitness, v15);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  double v20;
  uint64_t v22;
  void *v23;

  v22 = a5;
  v23 = a2;
  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NSUserDefaults.Migrator(0, v12, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  *(_QWORD *)v18 = v5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[*(int *)(v15 + 44)], v11, a3);
  v19 = v5;
  v20 = NSUserDefaults.Migrator.migrateValue<A>(to:destination:)(a1, v23, v15, a3, a4, v22);
  return (*(uint64_t (**)(char *, uint64_t, double))(v16 + 8))(v18, v15, v20);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v14 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v14 - v11), a2, a3);
  NSUserDefaults.migrateValue<A, B>(for:to:)((uint64_t)v12, a1, AssociatedTypeWitness, v14, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

Swift::Void __swiftcall NSUserDefaults.KeyValueRegistration.invalidate()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
}

uint64_t NSUserDefaults.KeyValueRegistration.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate;
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_10000E750(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release(*(_QWORD *)(v1 + 8));
  return v0;
}

uint64_t NSUserDefaults.KeyValueRegistration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate;
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_10000E750(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release(*(_QWORD *)(v1 + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_1002C79A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005561A8 != -1)
    swift_once(&qword_1005561A8, sub_1002C7B24);
  v2 = qword_100557408;
  v3 = *(_QWORD *)(qword_100557408
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  sub_1002C81EC(v2, a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = a5;
  v20 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v19 - v15;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v19 - v15), a6, a7);
  v17 = static NSUserDefaults.observe<A>(_:in:valueChanged:)((uint64_t)v16, a2, a3, a4, v19, AssociatedTypeWitness, v20);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  return v17;
}

id sub_1002C7B24()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)_s9_ObserverCMa()), "init");
  qword_100557408 = (uint64_t)result;
  return result;
}

uint64_t sub_1002C7BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v37;
  id v38;
  NSString v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  id v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  _QWORD v64[3];
  _BYTE v65[24];
  uint64_t v66;

  v58 = a3;
  v59 = a4;
  v57 = _s9_ObserverC18HandlerAssociationVMa(0);
  v60 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = a1;
  v8 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess(a1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, v65, 0, 0);
  v9 = *v8;
  v63 = a2;
  swift_bridgeObjectRetain();
  v10 = sub_1002C5C7C((uint64_t (*)(_QWORD *))sub_1002CC78C, (uint64_t)v62, v9);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease();
  v61 = a2;
  if (v14)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000DD108(0, &qword_100557858, NSUserDefaults_ptr);
    v15 = (uint64_t *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
    v10 = *v15;
    v12 = v15[1];
    swift_bridgeObjectRetain();
    v16 = NSUserDefaults.init(suite:)(v10, v12);
    if (!v16)
    {
      v33 = sub_1002CC7A8();
      swift_allocError(&_s5ErrorON, v33, 0, 0);
      *v34 = v10;
      v34[1] = v12;
      v35 = swift_bridgeObjectRetain();
      return swift_willThrow(v35);
    }
    v14 = v16;
    swift_bridgeObjectRetain();
  }
  v17 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain();
    v18 = v14;
    swift_bridgeObjectRetain();
    v19 = sub_1002B248C(v10, v12, (uint64_t)v18);
    if ((v20 & 1) != 0)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v19);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v55 = sub_10029CF80((uint64_t)_swiftEmptyArrayStorage);
LABEL_10:
  v21 = *v8;
  if (!*(_QWORD *)(*v8 + 16))
  {
LABEL_20:
    v32 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v22 = v14;
  swift_bridgeObjectRetain();
  v23 = sub_1002B248C(v10, v12, (uint64_t)v22);
  if ((v24 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v23);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  if (!*(_QWORD *)(v25 + 16))
    goto LABEL_19;
  v27 = (uint64_t *)(v61 + *(int *)(v26 + 24));
  v28 = *v27;
  v29 = v27[1];
  swift_bridgeObjectRetain();
  v30 = sub_1002B230C(v28, v29);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v32 = *(char **)(*(_QWORD *)(v25 + 56) + 8 * v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  v37 = *((_QWORD *)v32 + 2);
  v56 = v10;
  if (!v37)
  {
    _s20KeyValueRegistrationC10IdentifierVMa(0);
    v38 = v14;
    v39 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "addObserver:forKeyPath:options:context:", v54, v39, 0, 0);

  }
  v40 = type metadata accessor for UUID(0);
  v41 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v7, v61, v40);
  v42 = &v7[*(int *)(v57 + 20)];
  v43 = v59;
  *(_QWORD *)v42 = v58;
  *((_QWORD *)v42 + 1) = v43;
  swift_retain(v43);
  if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
    v32 = (char *)sub_1002AACB4(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
  v45 = *((_QWORD *)v32 + 2);
  v44 = *((_QWORD *)v32 + 3);
  if (v45 >= v44 >> 1)
    v32 = (char *)sub_1002AACB4(v44 > 1, v45 + 1, 1, v32);
  *((_QWORD *)v32 + 2) = v45 + 1;
  sub_10000DB44((uint64_t)v7, (uint64_t)&v32[((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v45], _s9_ObserverC18HandlerAssociationVMa);
  v46 = (uint64_t *)(v41 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 24));
  v47 = *v46;
  v48 = v46[1];
  swift_bridgeObjectRetain();
  v49 = v55;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
  v64[0] = v49;
  sub_1002C9C7C((uint64_t)v32, v47, v48, isUniquelyReferenced_nonNull_native);
  v51 = v64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess(v8, v64, 33, 0);
  swift_bridgeObjectRetain();
  v52 = v14;
  v53 = swift_isUniquelyReferenced_nonNull_native(*v8);
  v66 = *v8;
  *v8 = 0x8000000000000000;
  sub_1002C9AF4(v51, v56, v12, v52, v53);
  *v8 = v66;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v64);

  return swift_bridgeObjectRelease();
}

uint64_t _s20KeyValueRegistrationC10IdentifierVMa(uint64_t a1)
{
  return sub_10001133C(a1, qword_100557810, (uint64_t)&_s20KeyValueRegistrationC10IdentifierVMn);
}

uint64_t sub_1002C8130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

uint64_t type metadata accessor for NSUserDefaults.KeyValueRegistration(uint64_t a1)
{
  return sub_10001133C(a1, qword_1005575E0, (uint64_t)&nominal type descriptor for NSUserDefaults.KeyValueRegistration);
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

uint64_t sub_1002C81EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t (*v36)(_QWORD);
  uint64_t *v37;
  void (*v38)(_QWORD *);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void (*v48)(_BYTE *, _QWORD);
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  _BYTE v53[32];
  char v54[32];
  uint64_t v55;

  v5 = _s9_ObserverC18HandlerAssociationVMa(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess(a1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, v54, 0, 0);
  v10 = *v9;
  v50 = a2;
  swift_bridgeObjectRetain();
  v48 = (void (*)(_BYTE *, _QWORD))sub_1002C5C7C((uint64_t (*)(_QWORD *))sub_1002CC7FC, (uint64_t)v49, v10);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = v2;
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    v19 = _s20KeyValueRegistrationC10IdentifierVMa(0);
    if (*(_QWORD *)(v16 + 16))
    {
      v47 = a1;
      v20 = (uint64_t *)(a2 + *(int *)(v19 + 24));
      v21 = *v20;
      v22 = v20[1];
      v46 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = sub_1002B230C(v21, v22);
      if ((v24 & 1) != 0)
      {
        v45 = v12;
        v25 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = v25;
        v26 = *(_QWORD *)(v25 + 16);
        if (v26)
        {
          v44[1] = v17;
          v27 = v25 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          v28 = *(_QWORD *)(v6 + 72);
          swift_bridgeObjectRetain();
          v29 = 0;
          while ((static UUID.== infix(_:_:)(v27, a2) & 1) == 0)
          {
            ++v29;
            v27 += v28;
            if (v26 == v29)
            {

              swift_bridgeObjectRelease_n(v25, 2);
              goto LABEL_11;
            }
          }
          swift_bridgeObjectRelease();
          v30 = v45;
          swift_bridgeObjectRetain();
          v31 = v14;
          sub_1002BD298(v29, (uint64_t)v8);
          sub_10000E750((uint64_t)v8, _s9_ObserverC18HandlerAssociationVMa);
          v32 = v55;
          if (!*(_QWORD *)(v55 + 16))
          {
            v33 = v31;
            v34 = String._bridgeToObjectiveC()();
            objc_msgSend(v33, "removeObserver:forKeyPath:", v47, v34);

          }
          swift_bridgeObjectRetain();
          v35 = v31;
          v36 = sub_1002C8B64((uint64_t)v53);
          v38 = sub_1002C861C(v52, (uint64_t)v48, v30, v35);
          v39 = *v37;
          if (*v37)
          {
            v40 = v37;
            v48 = (void (*)(_BYTE *, _QWORD))v36;
            v41 = *v46;
            v42 = v46[1];
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
            v51 = *v40;
            *v40 = 0x8000000000000000;
            sub_1002C9C7C(v32, v41, v42, isUniquelyReferenced_nonNull_native);
            *v40 = v51;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ((void (*)(_QWORD *, _QWORD))v38)(v52, 0);

            swift_bridgeObjectRelease();
            v48(v53, 0);
          }
          else
          {
            swift_bridgeObjectRelease();
            ((void (*)(_QWORD *, _QWORD))v38)(v52, 0);

            swift_bridgeObjectRelease();
            ((void (*)(_BYTE *, _QWORD))v36)(v53, 0);
          }

          swift_bridgeObjectRelease_n(v30, 2);
          return swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
LABEL_11:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL sub_1002C8590(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
  v5 = v4[1];
  if (!v3)
    return v5 == 0;
  if (!v5)
    return 0;
  if (v2 == *v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, *v4, v5, 0) & 1;
}

void (*sub_1002C861C(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain();
  v8[6] = sub_1002C9DD8(v8, a2, a3, a4);
  return sub_1002C8694;
}

void sub_1002C8694(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease(v3);

  free(v1);
}

void sub_1002C86DC(uint64_t a1, void *a2, uint64_t a3, Class isa, uint64_t a5)
{
  char *v5;
  NSString v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  objc_class *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(__int128 *);
  NSString v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[3];
  objc_super v40;
  __int128 v41;
  __int128 v42;

  v9 = a2;
  v38 = a1;
  if (!a2)
  {
LABEL_9:
    sub_1002CA618(a3, (uint64_t)&v41);
    v22 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v23 = sub_10000D900(&v41, *((uint64_t *)&v42 + 1));
      v24 = *(_QWORD *)(v22 - 8);
      __chkstk_darwin(v23);
      v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v26);
      v27 = _bridgeAnythingToObjectiveC<A>(_:)(v26, v22);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v22);
      sub_100011758(&v41);
      if (!isa)
      {
LABEL_12:
        v28 = (objc_class *)_s9_ObserverCMa();
        v40.receiver = v5;
        v40.super_class = v28;
        objc_msgSendSuper2(&v40, "observeValueForKeyPath:ofObject:change:context:", v9, v27, isa, a5);

        swift_unknownObjectRelease(v27);
LABEL_13:

        return;
      }
    }
    else
    {
      v27 = 0;
      if (!isa)
        goto LABEL_12;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_1002CC744();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_12;
  }
  sub_1002CA618(a3, (uint64_t)&v41);
  if (!*((_QWORD *)&v42 + 1))
  {
    sub_1002A17AC((uint64_t)&v41);
    goto LABEL_8;
  }
  v10 = sub_1000DD108(0, &qword_100557858, NSUserDefaults_ptr);
  if ((swift_dynamicCast(v39, &v41, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_8:
    v9 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  v11 = (void *)v39[0];
  v12 = *(_QWORD *)&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  swift_beginAccess(&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites], v39, 0, 0);
  isa = v11;
  v13 = swift_bridgeObjectRetain();
  sub_1002CA158(v13, isa);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();

  if (!v15)
    goto LABEL_16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002CA2F0(v17, v38, (uint64_t)v9);
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
    swift_bridgeObjectRelease();
  else
LABEL_16:
    v21 = _swiftEmptyArrayStorage;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  v29 = v21[2];
  if (!v29)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v30 = _s9_ObserverC18HandlerAssociationVMa(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (char *)v21 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  v33 = *(_QWORD *)(v31 + 72);
  v37 = v21;
  swift_bridgeObjectRetain();
  do
  {
    v34 = *(void (**)(__int128 *))&v32[*(int *)(v30 + 20)];
    v35 = String._bridgeToObjectiveC()();
    v36 = -[objc_class valueForKey:](isa, "valueForKey:", v35);

    if (v36)
    {
      _bridgeAnyObjectToAny(_:)(v36);
      swift_unknownObjectRelease(v36);
    }
    else
    {
      v41 = 0u;
      v42 = 0u;
    }
    v34(&v41);
    sub_1002A17AC((uint64_t)&v41);
    v32 += v33;
    --v29;
  }
  while (v29);

  swift_bridgeObjectRelease_n(v37, 2);
}

uint64_t (*sub_1002C8B64(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Int sub_1002C8BA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1002C8C24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1002C8C98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002C8D10(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (v3)
  {
    if (v5)
    {
      v7 = *a1;
      v8 = v7 == *a2 && v3 == v5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v3, *a2, v5, 0) & 1) != 0)
        goto LABEL_8;
    }
  }
  else if (!v5)
  {
LABEL_8:
    sub_1000DD108(0, (unint64_t *)&unk_1005572F0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v4, v6) & 1;
  }
  return 0;
}

id sub_1002C8D98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s9_ObserverCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NSUserDefaults.encodeValue(_:forKey:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  NSString v12;

  v2 = v1;
  v3 = a1[3];
  v4 = a1[5];
  v5 = sub_10000D900(a1, v3);
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, v3, v4);
  v10 = v9;
  swift_release(v7);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKey:", isa, v12);

  return sub_10003A628(v8, v10);
}

uint64_t NSUserDefaults.decodeValue<A>(_:forKey:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  void *v3;
  NSString v7;
  id v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _OWORD v17[2];
  _QWORD v18[4];

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v3, "valueForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_1002A1764((uint64_t)v17, (uint64_t)v18);
  if (!v18[3])
  {
    sub_1002A17AC((uint64_t)v18);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_8:
    v14 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v14, 1, a1, v9);
  }
  v11 = v16[0];
  v10 = v16[1];
  v12 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, v11, v10, a1, a2);
  sub_10003A628(v11, v10);
  v9 = swift_release(v13);
  v14 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v14, 1, a1, v9);
}

uint64_t sub_1002C93CC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_100557410);
  sub_10000D78C(v0, (uint64_t)qword_100557410);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x80000001004466B0, 0x6166654472657355, 0xEC00000073746C75);
}

uint64_t sub_1002C9448(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t result;

  v6 = (char *)a4();
  v8 = sub_1002C9498(v6, v7, a3);
  v9 = (_QWORD *)*a1;
  *(_QWORD *)*a1 = v8;
  result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

char *sub_1002C9498(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_1002C9568(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000760E0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000760E0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100011758(v12);
  return v7;
}

char *sub_1002C9568(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1002C9664(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_1002C9664(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_1002C96F8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002C97F4(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1002C97F4((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_1002C96F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1002C9790(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1002C9790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10000B4C8(&qword_100557860);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1002C97F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100557860);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_1002C98DC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 24 * v6);
        v11 = *v9;
        v10 = v9[1];
        v12 = (void *)v9[2];
        Hasher.init(_seed:)(v30);
        if (v10)
        {
          Hasher._combine(_:)(1uLL);
          v13 = v12;
          swift_bridgeObjectRetain();
          String.hash(into:)(v30, v11, v10);
        }
        else
        {
          Hasher._combine(_:)(0);
          v14 = v12;
        }
        v15 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v10);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = v17 + 24 * v3;
          v19 = (__int128 *)(v17 + 24 * v6);
          if (v3 != v6 || v18 >= (unint64_t)v19 + 24)
          {
            v20 = *v19;
            *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_QWORD *)(v21 + 8 * v3);
          v23 = (_QWORD *)(v21 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 1))
          {
            *v22 = *v23;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_1002C9AF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id result;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v6 = v5;
  v11 = *v5;
  v13 = sub_1002B248C(a2, a3, (uint64_t)a4);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_1002C4778();
LABEL_7:
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = (id)swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v24 = (uint64_t *)(v19[6] + 24 * v13);
    *v24 = a2;
    v24[1] = a3;
    v24[2] = (uint64_t)a4;
    *(_QWORD *)(v19[7] + 8 * v13) = a1;
    v25 = v19[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v19[2] = v27;
      swift_bridgeObjectRetain();
      return a4;
    }
    goto LABEL_14;
  }
  sub_1002C3F6C(v16, a5 & 1);
  v22 = sub_1002B248C(a2, a3, (uint64_t)a4);
  if ((v17 & 1) == (v23 & 1))
  {
    v13 = v22;
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s9_ObserverC16SuiteAssociationVN);
  __break(1u);
  return result;
}

uint64_t sub_1002C9C7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1002B230C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002C4944();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1002C42AC(v15, a4 & 1);
  v21 = sub_1002B230C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void (*sub_1002C9DD8(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4))(uint64_t a1)
{
  _QWORD *v4;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;

  v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  swift_bridgeObjectRetain();
  v11 = a4;
  v9[10] = sub_1002CA054(v9);
  v9[11] = sub_1002C9ED4(v9 + 4, a2, a3, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  return sub_1002C9E80;
}

void sub_1002C9E80(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;
  void *v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);

  v2(v1, 0);
  free(v1);
}

void (*sub_1002C9ED4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t **);

  v6 = v5;
  v12 = malloc(0x38uLL);
  *a1 = v12;
  v12[3] = a4;
  v12[4] = v6;
  v12[1] = a2;
  v12[2] = a3;
  v13 = *v6;
  v15 = sub_1002B248C(a2, a3, a4);
  *((_BYTE *)v12 + 48) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(*(_QWORD *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *v12 = v21;
        return sub_1002CA014;
      }
LABEL_11:
      v21 = 0;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_1002C4778();
      goto LABEL_7;
    }
    sub_1002C3F6C(v18, a5 & 1);
    v22 = sub_1002B248C(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      v15 = v22;
      v12[5] = v22;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s9_ObserverC16SuiteAssociationVN);
  __break(1u);
  return result;
}

void sub_1002CA014(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1002CA080(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (void *)(*a1)[3]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_1002CA054(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1002CA074;
}

uint64_t sub_1002CA074(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t *sub_1002CA080(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  id v16;

  v9 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 24 * a4, 1, &_s9_ObserverC16SuiteAssociationVN);
      sub_1002C98DC(a4, *a3);
    }
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v10 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v10[7] + 8 * a4) = v9;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v10[(a4 >> 6) + 8] |= 1 << a4;
  v12 = (_QWORD *)(v10[6] + 24 * a4);
  *v12 = a5;
  v12[1] = a6;
  v12[2] = a7;
  *(_QWORD *)(v10[7] + 8 * a4) = v9;
  v13 = v10[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (!v14)
  {
    v10[2] = v15;
    swift_bridgeObjectRetain();
    v16 = a7;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_1002CA158(uint64_t result, void *a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;

  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v12 >= v8)
      return 0;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v8)
        return 0;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v8)
          return 0;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v8)
            return 0;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
          {
            v14 = v12 + 4;
            if (v14 >= v8)
              return 0;
            v13 = *(_QWORD *)(v4 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v3 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_27;
                if (v3 >= v8)
                  return 0;
                v13 = *(_QWORD *)(v4 + 8 * v3);
                ++v14;
                if (v13)
                  goto LABEL_22;
              }
            }
            v3 = v14;
          }
        }
      }
    }
LABEL_22:
    v7 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v11 = *(_QWORD *)(result + 48);
    if (*(void **)(v11 + 24 * v10 + 16) == a2)
    {
      v15 = *(_QWORD *)(v11 + 24 * v10);
      swift_bridgeObjectRetain();
      v16 = a2;
      swift_bridgeObjectRetain();
      return v15;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1002CA2F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v19;

  v5 = result;
  v6 = 0;
  v7 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v19)
      return 0;
    v14 = *(_QWORD *)(v7 + 8 * v13);
    ++v6;
    if (!v14)
    {
      v6 = v13 + 1;
      if (v13 + 1 >= v19)
        return 0;
      v14 = *(_QWORD *)(v7 + 8 * v6);
      if (!v14)
      {
        v6 = v13 + 2;
        if (v13 + 2 >= v19)
          return 0;
        v14 = *(_QWORD *)(v7 + 8 * v6);
        if (!v14)
        {
          v6 = v13 + 3;
          if (v13 + 3 >= v19)
            return 0;
          v14 = *(_QWORD *)(v7 + 8 * v6);
          if (!v14)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_22:
    v16 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v12);
    v17 = *v16;
    if (*v16 == a2 && v16[1] == a3)
    {
      v17 = a2;
LABEL_29:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v17;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v16[1], a2, a3, 0);
    if ((result & 1) != 0)
      goto LABEL_29;
  }
  v15 = v13 + 4;
  if (v15 >= v19)
    return 0;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
    v6 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v19)
      return 0;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1002CA4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a2 + 16);
  __chkstk_darwin(v8);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v2 + *(int *)(a2 + 44), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v15 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v18 = 0u;
    v19 = 0u;
  }
  else
  {
    *((_QWORD *)&v19 + 1) = v5;
    v16 = sub_1000C16E0(&v18);
    (*(void (**)(_QWORD *, char *, uint64_t))(v15 + 32))(v16, v10, v5);
  }
  return NSUserDefaults.subscript.setter((uint64_t)&v18, (uint64_t)v13, v11, *(_QWORD *)(a2 + 32));
}

uint64_t sub_1002CA618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005568B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002CA660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = &v13[-v10];
  dispatch thunk of RawRepresentable.rawValue.getter(&v13[-v10], a3, a4);
  sub_1002CA618(a1, (uint64_t)v13);
  NSUserDefaults.subscript.setter((uint64_t)v13, (uint64_t)v11, AssociatedTypeWitness, a5);
  return sub_1002A17AC(a1);
}

uint64_t type metadata accessor for NSUserDefaults.Migrator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSUserDefaults.Migrator);
}

uint64_t _s8MigratorV5ErrorOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&_s8MigratorV5ErrorOMn);
}

uint64_t sub_1002CA74C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1002CA760()
{
  unint64_t result;

  result = qword_100557430[0];
  if (!qword_100557430[0])
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NSUserDefaults.Suite, &type metadata for NSUserDefaults.Suite);
    atomic_store(result, qword_100557430);
  }
  return result;
}

uint64_t sub_1002CA7A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 40);
      return 0;
    }
  }
  return result;
}

void **sub_1002CA840(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char *v20;
  void *v21;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  if (*(_DWORD *)(v8 + 84))
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = *(_QWORD *)(v8 + 64) + 1;
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = (char *)*a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 + ((v10 + ((v7 + 8) & ~v7)) & ~v9) > 0x18)
  {
    a1 = (void **)&v13[((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)];
    swift_retain(v13);
  }
  else
  {
    v16 = ~v9;
    v17 = ((unint64_t)a1 + v7 + 8) & ~v7;
    v18 = ((unint64_t)a2 + v7 + 8) & ~v7;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v20 = v13;
    v19(v17, v18, v5);
    v21 = (void *)((v17 + v10) & v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v18 + v10) & v16, 1, v4))
    {
      memcpy(v21, (const void *)((v18 + v10) & v16), v11);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(v21, (v18 + v10) & v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1002CA9A4(id *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  return result;
}

void **sub_1002CAA48(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v12 = v5;
  v11(v9, v10, v6);
  v13 = *(_QWORD *)(v7 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (void *)((v17 + v9) & ~v16);
  v19 = (const void *)((v17 + v10) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    if (*(_DWORD *)(v15 + 84))
      v20 = *(_QWORD *)(v15 + 64);
    else
      v20 = *(_QWORD *)(v15 + 64) + 1;
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  return a1;
}

void **sub_1002CAB4C(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)a1 + v10 + 8) & ~v10;
  v12 = ((unint64_t)a2 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (void *)((v17 + v11) & ~v16);
  v19 = (void *)((v17 + v12) & ~v16);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v12) = v20(v18, 1, v14);
  v21 = v20(v19, 1, v14);
  if ((_DWORD)v12)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v18, v19, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      return a1;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v18, v19, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v22 = *(_QWORD *)(v15 + 64);
  else
    v22 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v22);
  return a1;
}

_QWORD *sub_1002CAC9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (void *)((v13 + v7) & ~v12);
  v15 = (const void *)((v13 + v8) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84))
      v16 = *(_QWORD *)(v11 + 64);
    else
      v16 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

void **sub_1002CAD90(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 + v14;
  v16 = (void *)((v15 + v9) & ~v14);
  v17 = (void *)((v15 + v10) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16, 1, v12);
  v19 = v18(v17, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      return a1;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v16, v17, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  }
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t sub_1002CAEDC(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = *(_DWORD *)(v5 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_31;
  v17 = v12 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15);
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_15;
  v20 = ((v16 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    v19 = *(_DWORD *)((char *)a1 + v17);
    if (v19)
      goto LABEL_22;
LABEL_31:
    if ((v10 & 0x80000000) == 0)
    {
      v23 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
    v24 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if (v6 == v11)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
    if (v8 >= 2)
    {
      v25 = (*(uint64_t (**)(uint64_t))(v7 + 48))((v24 + v14 + v15) & ~v15);
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v20 > 0xFF)
  {
    v19 = *(unsigned __int16 *)((char *)a1 + v17);
    if (*(_WORD *)((char *)a1 + v17))
      goto LABEL_22;
    goto LABEL_31;
  }
  if (v20 < 2)
    goto LABEL_31;
LABEL_15:
  v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((_BYTE *)a1 + v17))
    goto LABEL_31;
LABEL_22:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void sub_1002CB0B8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (*(_DWORD *)(v7 + 84) <= v10)
    v11 = v10;
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v13;
  v14 = v13
      + ((*(_QWORD *)(v7 + 64)
        + *(unsigned __int8 *)(v8 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v15 = a3 >= v12;
  v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v12 < a2)
        goto LABEL_21;
      goto LABEL_28;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = &dword_100000004;
      if (v12 < a2)
      {
LABEL_21:
        v18 = ~v12 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_28:
      __asm { BR              X6 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v12 < a2)
    goto LABEL_21;
  goto LABEL_28;
}

void sub_1002CB2F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1002CB2F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

ValueMetadata *type metadata accessor for NSUserDefaults.Suite()
{
  return &type metadata for NSUserDefaults.Suite;
}

uint64_t type metadata accessor for NSUserDefaults.ValueTransformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSUserDefaults.ValueTransformer);
}

uint64_t sub_1002CB338(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 40);
    return 0;
  }
  return result;
}

void **sub_1002CB3B4(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  char *v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v15 = v9;
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_1002CB470(id *a1, uint64_t a2)
{

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void **sub_1002CB4B4(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v4;
  v10(v8, v9, v5);
  return a1;
}

void **sub_1002CB524(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_QWORD *sub_1002CB590(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void **sub_1002CB5E0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1002CB648(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1002CB71C + 4 * byte_100437ACE[(v9 - 1)]))();
}

void sub_1002CB78C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1002CB980()
{
  return type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
}

uint64_t sub_1002CB988(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = _s20KeyValueRegistrationC10IdentifierVMa(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s9_ObserverCMa()
{
  return objc_opt_self(_TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer);
}

uint64_t *sub_1002CBA20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

double sub_1002CBAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1002CBAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_1002CBB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  v11 = v8[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_1002CBBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002CBC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1002CBC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CBCA4);
}

uint64_t sub_1002CBCA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1002CBD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CBD2C);
}

uint64_t sub_1002CBD2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t _s9_ObserverC18HandlerAssociationVMa(uint64_t a1)
{
  return sub_10001133C(a1, qword_100557700, (uint64_t)&_s9_ObserverC18HandlerAssociationVMn);
}

uint64_t sub_1002CBDB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void _s9_ObserverC16SuiteAssociationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s9_ObserverC16SuiteAssociationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *_s9_ObserverC16SuiteAssociationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  return a1;
}

_QWORD *_s9_ObserverC16SuiteAssociationVwta(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *_s9_ObserverC16SuiteAssociationVMa()
{
  return &_s9_ObserverC16SuiteAssociationVN;
}

uint64_t sub_1002CBF44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 0, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_1002CBFA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1002CC054 + 4 * byte_100437ADC[(v7 - 1)]))();
}

void sub_1002CC0A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t *sub_1002CC254(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002CC300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1002CC358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1002CC3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v12[1];
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_1002CC480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1002CC4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1002CC56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CC578);
}

uint64_t sub_1002CC578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1002CC5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CC604);
}

uint64_t sub_1002CC604(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1002CC680(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100437C68;
    v4[2] = &unk_100437C80;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1002CC700()
{
  unint64_t result;

  result = qword_100557850;
  if (!qword_100557850)
  {
    result = swift_getWitnessTable(aQ_4, &_s9_ObserverC16SuiteAssociationVN);
    atomic_store(result, (unint64_t *)&qword_100557850);
  }
  return result;
}

unint64_t sub_1002CC744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100556390;
  if (!qword_100556390)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(asc_1004368CC, v1);
    atomic_store(result, (unint64_t *)&qword_100556390);
  }
  return result;
}

BOOL sub_1002CC78C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1002C8590(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1002CC7A8()
{
  unint64_t result;

  result = qword_100557868;
  if (!qword_100557868)
  {
    result = swift_getWitnessTable(byte_100437D40, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_100557868);
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

BOOL sub_1002CC7FC(uint64_t *a1)
{
  return sub_1002CC78C(a1);
}

uint64_t sub_1002CC814(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

void sub_1002CC854()
{
  qword_100557870 = (uint64_t)&off_100515458;
}

void sub_1002CC868()
{
  qword_100557878 = (uint64_t)&off_100515488;
}

void sub_1002CC87C()
{
  off_100557880 = &off_1005154B8;
}

char *sub_1002CC890()
{
  void *v0;
  char *v1;
  char *result;

  if (qword_1005561C8 != -1)
    swift_once(&qword_1005561C8, sub_1002CC87C);
  v0 = off_100557880;
  if (qword_1005561B8 != -1)
    swift_once(&qword_1005561B8, sub_1002CC854);
  swift_bridgeObjectRetain();
  v1 = (char *)swift_bridgeObjectRetain();
  result = sub_1002B5A34(v1);
  qword_100562658 = (uint64_t)v0;
  return result;
}

uint64_t sub_1002CC940()
{
  char *v0;
  int64_t v1;
  _QWORD *v2;
  Swift::String v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if (qword_1005561C8 != -1)
    swift_once(&qword_1005561C8, sub_1002CC87C);
  v0 = (char *)off_100557880;
  v1 = *((_QWORD *)off_100557880 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1002CD354(0, v1, 0);
    v2 = v0 + 40;
    do
    {
      v9 = *(v2 - 1);
      v10 = *v2;
      swift_bridgeObjectRetain_n(*v2, 2);
      v3._countAndFlagsBits = 115;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v5 = _swiftEmptyArrayStorage[2];
      v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1)
        sub_1002CD354((char *)(v4 > 1), v5 + 1, 1);
      v2 += 2;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      v6 = &_swiftEmptyArrayStorage[2 * v5];
      v6[4] = v9;
      v6[5] = v10;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if (qword_1005561C0 != -1)
    swift_once(&qword_1005561C0, sub_1002CC868);
  swift_bridgeObjectRetain();
  v7 = (char *)swift_bridgeObjectRetain();
  sub_1002B5A34(v7);
  result = swift_bridgeObjectRelease();
  qword_100562660 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t URL.replacingSchemeWithHTTP.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = sub_10000B4C8(&qword_1005573E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v2, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100011694((uint64_t)v6, &qword_1005573E0);
LABEL_9:
    v18 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v12 = URLComponents.scheme.getter(v11);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_9;
  }
  v14 = v12;
  v15 = v13;
  if (qword_1005561D8 != -1)
    swift_once(&qword_1005561D8, sub_1002CC940);
  if ((sub_10014ACA0(v14, v15, (_QWORD *)qword_100562660) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = 0x7370747468;
    v17 = 0xE500000000000000;
  }
  else
  {
    if (qword_1005561D0 != -1)
      swift_once(&qword_1005561D0, sub_1002CC890);
    v20 = sub_10014ACA0(v14, v15, (_QWORD *)qword_100562658);
    v21 = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      goto LABEL_15;
    v16 = 1886680168;
    v17 = 0xE400000000000000;
  }
  v21 = URLComponents.scheme.setter(v16, v17);
LABEL_15:
  URLComponents.url.getter(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Void __swiftcall URLComponents.appendPath(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(_QWORD *, _QWORD);
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::String v15;
  void (*v16)(_QWORD *, _QWORD);
  Swift::String v17;
  _QWORD v18[4];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = URLComponents.path.getter();
  v5 = sub_1002CCE78(v3, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v5 == 47 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      v9 = (void (*)(_QWORD *, _QWORD))URLComponents.path.modify(v18);
      v10._countAndFlagsBits = countAndFlagsBits;
      v10._object = object;
      String.append(_:)(v10);
      v9(v18, 0);
      return;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, 47, 0xE100000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v11 = sub_1002CC814(countAndFlagsBits, (unint64_t)object);
  v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    if (v11 == 47 && v13 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(47, 0xE100000000000000, v11, v13, 0);
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_12;
  }
  v18[0] = 47;
  v18[1] = 0xE100000000000000;
  v15._countAndFlagsBits = countAndFlagsBits;
  v15._object = object;
  String.append(_:)(v15);
  countAndFlagsBits = 47;
  object = (void *)0xE100000000000000;
LABEL_14:
  v16 = (void (*)(_QWORD *, _QWORD))URLComponents.path.modify(v18);
  v17._countAndFlagsBits = countAndFlagsBits;
  v17._object = object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v16(v18, 0);
}

uint64_t sub_1002CCE78(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

Swift::Void __swiftcall URLComponents.appendQueryItems(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = URLComponents.queryItems.getter(a1._rawValue);
  if (v2)
  {
    v4 = v2;
    v3 = swift_bridgeObjectRetain();
    sub_1002B5B1C(v3);
    URLComponents.queryItems.setter(v4);
  }
  else
  {
    swift_bridgeObjectRetain();
    URLComponents.queryItems.setter(a1._rawValue);
  }
}

BOOL URL.isSafariScriptURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, unint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BOOL8 v33;
  uint64_t v34;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;

  v1 = type metadata accessor for URLQueryItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v36 - v6;
  v8 = sub_10000B4C8(&qword_100557888);
  __chkstk_darwin(v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000B4C8(&qword_1005573E0);
  __chkstk_darwin(v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v0, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100011694((uint64_t)v13, &qword_1005573E0);
    return 0;
  }
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  v19 = URLComponents.queryItems.getter(v18);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return 0;
  }
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {
    v34 = 1;
    goto LABEL_24;
  }
  v37 = v17;
  v38 = v15;
  v39 = v14;
  v40 = v10;
  v21 = v19 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v22 = *(_QWORD *)(v2 + 72);
  v23 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v2 + 16);
  v36[1] = v19;
  swift_bridgeObjectRetain();
  v42 = (unint64_t)"registeredSuites";
  v41 = 0x8000000100450BC0;
  while (1)
  {
    v25 = v23(v7, v21, v1);
    v26 = URLQueryItem.name.getter(v25);
    if (v26 == 0x6E6F69746361 && v27 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      v28 = v23(v5, (unint64_t)v7, v1);
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x6E6F69746361, 0xE600000000000000, 0);
      swift_bridgeObjectRelease();
      v28 = v23(v5, (unint64_t)v7, v1);
      if ((v29 & 1) == 0)
        goto LABEL_6;
    }
    v30 = URLQueryItem.value.getter(v28);
    if (!v31)
    {
LABEL_6:
      v24 = *(void (**)(char *, uint64_t))(v2 + 8);
      v24(v5, v1);
      goto LABEL_7;
    }
    if (v30 == 0xD000000000000016 && v31 == v41)
      break;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0xD000000000000016, v42 | 0x8000000000000000, 0);
    swift_bridgeObjectRelease();
    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v5, v1);
    if ((v32 & 1) != 0)
      goto LABEL_22;
LABEL_7:
    v24(v7, v1);
    v21 += v22;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      v34 = 1;
      v10 = v40;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
LABEL_22:
  swift_bridgeObjectRelease();
  v10 = v40;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v40, v7, v1);
  v34 = 0;
LABEL_23:
  v15 = v38;
  v14 = v39;
  v17 = v37;
LABEL_24:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v34, 1, v1);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  swift_bridgeObjectRelease();
  v33 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) != 1;
  sub_100011694((uint64_t)v10, &qword_100557888);
  return v33;
}

ValueMetadata *type metadata accessor for URL.ITMSSchemes()
{
  return &type metadata for URL.ITMSSchemes;
}

char *sub_1002CD354(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002CD578(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002CD370(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100557400);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_1002CD458(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005573E8);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_1005573F0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002CD578(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100556D90);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

const char *Feature.MediaPlayer.domain.getter()
{
  return "MediaPlayer";
}

uint64_t Feature.MediaPlayer.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1002CD6B8 + 4 * asc_100437DA0[a1]))("image_decoding", 14);
}

const char *sub_1002CD6B8()
{
  return "UpgradeOnPlay";
}

const char *sub_1002CD6CC()
{
  return "QueueFA";
}

const char *sub_1002CD6E0()
{
  return "RSuntory";
}

uint64_t sub_1002CD6F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1002CD71C + 4 * byte_100437DA4[*v0]))("image_decoding", 14);
}

const char *sub_1002CD71C()
{
  return "UpgradeOnPlay";
}

const char *sub_1002CD730()
{
  return "QueueFA";
}

const char *sub_1002CD744()
{
  return "RSuntory";
}

const char *Feature.MediaControls.domain.getter()
{
  return "MediaControls";
}

const char *Feature.MediaControls.feature.getter()
{
  return "NewVolumeControlsMusic";
}

const char *Feature.MusicKit.domain.getter()
{
  return "MusicKit";
}

const char *Feature.MusicKit.feature.getter()
{
  return "yuma";
}

const char *Feature.MediaRemote.domain.getter()
{
  return "MediaRemote";
}

const char *Feature.MediaRemote.feature.getter()
{
  return "cayenne_music_bottom_player_routing";
}

unint64_t sub_1002CD7DC()
{
  unint64_t result;

  result = qword_100557890;
  if (!qword_100557890)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.MediaPlayer, &type metadata for Feature.MediaPlayer);
    atomic_store(result, (unint64_t *)&qword_100557890);
  }
  return result;
}

unint64_t sub_1002CD824()
{
  unint64_t result;

  result = qword_100557898;
  if (!qword_100557898)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.MediaControls, &type metadata for Feature.MediaControls);
    atomic_store(result, (unint64_t *)&qword_100557898);
  }
  return result;
}

unint64_t sub_1002CD86C()
{
  unint64_t result;

  result = qword_1005578A0;
  if (!qword_1005578A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.MusicKit, &type metadata for Feature.MusicKit);
    atomic_store(result, (unint64_t *)&qword_1005578A0);
  }
  return result;
}

unint64_t sub_1002CD8B4()
{
  unint64_t result;

  result = qword_1005578A8;
  if (!qword_1005578A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.MediaRemote, &type metadata for Feature.MediaRemote);
    atomic_store(result, (unint64_t *)&qword_1005578A8);
  }
  return result;
}

uint64_t _s11MediaPlayerOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002CD944 + 4 * byte_100437DAD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002CD978 + 4 * byte_100437DA8[v4]))();
}

uint64_t sub_1002CD978(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CD980(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002CD988);
  return result;
}

uint64_t sub_1002CD994(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002CD99CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002CD9A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CD9A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaPlayer()
{
  return &type metadata for Feature.MediaPlayer;
}

ValueMetadata *type metadata accessor for Feature.MediaControls()
{
  return &type metadata for Feature.MediaControls;
}

ValueMetadata *type metadata accessor for Feature.MusicKit()
{
  return &type metadata for Feature.MusicKit;
}

uint64_t _s13MediaControlsOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002CDA2C + 4 * byte_100437DB2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002CDA4C + 4 * byte_100437DB7[v4]))();
}

_BYTE *sub_1002CDA2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002CDA4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002CDA54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002CDA5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002CDA64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002CDA6C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaRemote()
{
  return &type metadata for Feature.MediaRemote;
}

const char *Feature.Music.domain.getter()
{
  return "Music";
}

uint64_t Feature.Music.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1002CDAD0 + 4 * byte_100438050[a1]))("potluck", 7);
}

const char *sub_1002CDAD0()
{
  return "dci_multi_select";
}

const char *sub_1002CDAFC()
{
  return "razzmatazz";
}

const char *sub_1002CDB24()
{
  return "symphony";
}

const char *sub_1002CDB38()
{
  return "mantis";
}

const char *sub_1002CDB4C()
{
  return "qulh";
}

const char *sub_1002CDB60()
{
  return "inline_large_title";
}

const char *sub_1002CDB74()
{
  return "image_playground_covers";
}

const char *sub_1002CDB88()
{
  return "in_with_the_new";
}

unint64_t sub_1002CDBA0()
{
  unint64_t result;

  result = qword_1005578B0;
  if (!qword_1005578B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.Music, &type metadata for Feature.Music);
    atomic_store(result, (unint64_t *)&qword_1005578B0);
  }
  return result;
}

uint64_t sub_1002CDBE4()
{
  unsigned __int8 *v0;

  return Feature.Music.feature.getter(*v0);
}

uint64_t _s5MusicOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s5MusicOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1002CDCDC + 4 * byte_100438061[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1002CDD10 + 4 * byte_10043805C[v4]))();
}

uint64_t sub_1002CDD10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CDD18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002CDD20);
  return result;
}

uint64_t sub_1002CDD2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002CDD34);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1002CDD38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CDD40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Music()
{
  return &type metadata for Feature.Music;
}

const char *Feature.Accessibility.domain.getter()
{
  return "Accessibility";
}

const char *Feature.Accessibility.feature.getter()
{
  return "HapticMusic";
}

unint64_t sub_1002CDD88()
{
  unint64_t result;

  result = qword_1005578B8;
  if (!qword_1005578B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.Accessibility, &type metadata for Feature.Accessibility);
    atomic_store(result, (unint64_t *)&qword_1005578B8);
  }
  return result;
}

uint64_t _s13AccessibilityOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002CDE0C + 4 * byte_100438108[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002CDE2C + 4 * byte_10043810D[v4]))();
}

_BYTE *sub_1002CDE0C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002CDE2C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002CDE34(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002CDE3C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002CDE44(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002CDE4C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Accessibility()
{
  return &type metadata for Feature.Accessibility;
}

uint64_t Feature.UIP.isEnabled.getter(char a1)
{
  char v1;
  char v2;
  char v3;
  _QWORD v5[3];
  ValueMetadata *v6;
  unint64_t v7;

  if ((a1 & 1) != 0)
  {
    v6 = &_s3UIPO5MusicON;
    v7 = sub_1002CDF40();
    LOBYTE(v5[0]) = 1;
    v3 = isFeatureEnabled(_:)(v5);
    sub_100011758(v5);
    if ((v3 & 1) == 0)
    {
      v2 = 0;
      return v2 & 1;
    }
    v6 = &_s3UIPO5UIKitON;
    v7 = sub_1002CDF84();
    LOBYTE(v5[0]) = 1;
    goto LABEL_6;
  }
  v6 = &_s3UIPO5MusicON;
  v7 = sub_1002CDF40();
  LOBYTE(v5[0]) = 0;
  v1 = isFeatureEnabled(_:)(v5);
  sub_100011758(v5);
  v2 = 0;
  if ((v1 & 1) != 0)
  {
    v6 = &_s3UIPO5UIKitON;
    v7 = sub_1002CDF84();
    LOBYTE(v5[0]) = 0;
LABEL_6:
    v2 = isFeatureEnabled(_:)(v5);
    sub_100011758(v5);
  }
  return v2 & 1;
}

unint64_t sub_1002CDF40()
{
  unint64_t result;

  result = qword_1005578C0;
  if (!qword_1005578C0)
  {
    result = swift_getWitnessTable(aU_2, &_s3UIPO5MusicON);
    atomic_store(result, (unint64_t *)&qword_1005578C0);
  }
  return result;
}

unint64_t sub_1002CDF84()
{
  unint64_t result;

  result = qword_1005578C8;
  if (!qword_1005578C8)
  {
    result = swift_getWitnessTable(byte_100438314, &_s3UIPO5UIKitON);
    atomic_store(result, (unint64_t *)&qword_1005578C8);
  }
  return result;
}

const char *sub_1002CDFC8()
{
  return "Music";
}

const char *sub_1002CDFDC()
{
  _BYTE *v0;

  if (*v0)
    return "uip_fluid_transitions";
  else
    return "uip_floating_tab_bar";
}

const char *sub_1002CE008()
{
  return "UIKit";
}

unint64_t sub_1002CE020()
{
  unint64_t result;

  result = qword_1005578D0;
  if (!qword_1005578D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Feature.UIP, &type metadata for Feature.UIP);
    atomic_store(result, (unint64_t *)&qword_1005578D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.UIP()
{
  return &type metadata for Feature.UIP;
}

ValueMetadata *_s3UIPO5UIKitOMa()
{
  return &_s3UIPO5UIKitON;
}

uint64_t _s3UIPOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002CE0D4 + 4 * byte_1004381C1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002CE108 + 4 * byte_1004381BC[v4]))();
}

uint64_t sub_1002CE108(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CE110(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002CE118);
  return result;
}

uint64_t sub_1002CE124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002CE12CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002CE130(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CE138(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3UIPO5MusicOMa()
{
  return &_s3UIPO5MusicON;
}

unint64_t sub_1002CE158()
{
  unint64_t result;

  result = qword_1005578D8;
  if (!qword_1005578D8)
  {
    result = swift_getWitnessTable(byte_100438284, &_s3UIPO5MusicON);
    atomic_store(result, (unint64_t *)&qword_1005578D8);
  }
  return result;
}

unint64_t sub_1002CE1A0()
{
  unint64_t result;

  result = qword_1005578E0;
  if (!qword_1005578E0)
  {
    result = swift_getWitnessTable(byte_1004382EC, &_s3UIPO5UIKitON);
    atomic_store(result, (unint64_t *)&qword_1005578E0);
  }
  return result;
}

uint64_t FeatureFlagsKey.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[5];

  v3 = a1;
  v6[3] = a1;
  v6[4] = a2;
  v4 = sub_1000C16E0(v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  LOBYTE(v3) = isFeatureEnabled(_:)(v6);
  sub_100011758(v6);
  return v3 & 1;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

uint64_t GestureRecognizerHandler.__allocating_init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 40, 7);
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(a1, a2, a3, a4);
  return v9;
}

uint64_t GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  uint64_t Strong;
  void *v12;

  v9 = swift_unknownObjectWeakInit(v4 + 16, 0);
  swift_unknownObjectWeakAssign(v9, a1);
  v10 = (_QWORD *)swift_allocObject(&unk_100518200, 40, 7);
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  *(_QWORD *)(v4 + 24) = sub_1002A1178;
  *(_QWORD *)(v4 + 32) = v10;
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v12 = (void *)Strong;
    swift_retain(v4);
    objc_msgSend(v12, "addTarget:action:", v4, "handleActionFromGestureRecognizer:");

    swift_release(v4);
  }

  return v4;
}

uint64_t sub_1002CE37C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t GestureRecognizerHandler.deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeTarget:action:", v0, "handleActionFromGestureRecognizer:");

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t GestureRecognizerHandler.__deallocating_deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeTarget:action:", v0, "handleActionFromGestureRecognizer:");

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1002CE4B8()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_1005578E8 = result;
  return result;
}

uint64_t UIGestureRecognizerHandling<>.addHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  Class isa;
  _QWORD *v23;
  _OWORD v24[2];
  _QWORD v25[4];

  v4 = v3;
  if (qword_1005561E0 != -1)
    swift_once(&qword_1005561E0, sub_1002CE4B8);
  v8 = objc_getAssociatedObject(v4, (const void *)qword_1005578E8);
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_1002A1764((uint64_t)v24, (uint64_t)v25);
  if (v25[3])
  {
    v10 = sub_10000B4C8(&qword_1005578F0);
    if (swift_dynamicCast(&v23, v25, (char *)&type metadata for Any + 8, v10, 6))
    {
      v11 = v23;
      goto LABEL_11;
    }
  }
  else
  {
    sub_1002A17AC((uint64_t)v25);
  }
  v11 = _swiftEmptyArrayStorage;
LABEL_11:
  v25[0] = v11;
  v12 = type metadata accessor for GestureRecognizerHandler();
  v13 = (_QWORD *)swift_allocObject(&unk_100518228, 40, 7);
  v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v14 = swift_allocObject(v12, 40, 7);
  v15 = v4;
  swift_retain(a2);
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(v15, (uint64_t)sub_1002CE760, (uint64_t)v13, a3);
  v16 = swift_retain(v14);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
  v18 = *(_QWORD *)((v25[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v17 = *(_QWORD *)((v25[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v18 >= v17 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
  v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v14);
  specialized Array._endMutation()(v19);
  v20 = (const void *)qword_1005578E8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v15, v20, isa, (void *)1);

  return v14;
}

uint64_t type metadata accessor for GestureRecognizerHandler()
{
  return objc_opt_self(_TtC14MusicUtilities24GestureRecognizerHandler);
}

uint64_t sub_1002CE704(void *a1, void (*a2)(_QWORD *, id), uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[3] = a4;
  v5[4] = &protocol witness table for UIGestureRecognizer;
  v5[0] = a1;
  a2(v5, objc_msgSend(a1, "state"));
  return sub_100011758(v5);
}

uint64_t sub_1002CE760(void *a1)
{
  uint64_t v1;

  return sub_1002CE704(a1, *(void (**)(_QWORD *, id))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

void UIGestureRecognizerHandling<>.removeHandler(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  Class isa;
  _QWORD *v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  if (qword_1005561E0 != -1)
    swift_once(&qword_1005561E0, sub_1002CE4B8);
  v3 = objc_getAssociatedObject(v1, (const void *)qword_1005578E8);
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1002A1764((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_1002A17AC((uint64_t)v11);
    goto LABEL_10;
  }
  v5 = sub_10000B4C8(&qword_1005578F0);
  if (!swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v5, 6))
  {
LABEL_10:
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  v6 = v9;
LABEL_11:
  swift_retain(a1);
  sub_1002CE904((uint64_t)v6, a1);
  swift_bridgeObjectRelease();
  swift_release(a1);
  v7 = (const void *)qword_1005578E8;
  type metadata accessor for GestureRecognizerHandler();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v1, v7, isa, (void *)1);

}

uint64_t sub_1002CE8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerHandling<>.addHandler(_:)(a1, a2, a3);
}

void sub_1002CE8E4(uint64_t a1)
{
  UIGestureRecognizerHandling<>.removeHandler(_:)(a1);
}

_QWORD *sub_1002CE904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v9 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if (v8 == a2)
        {
          swift_release(a2);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }
        ++v5;
        if (v9 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
    swift_retain(v8);
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

double KeyboardAvoidance.beginFrame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double KeyboardAvoidance.endFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double KeyboardAvoidance.animationDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t KeyboardAvoidance.animationCurve.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t KeyboardAvoidance.local.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t KeyboardAvoidance.animationOptions.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 72) << 16;
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t KeyboardAvoidance.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[88];

  sub_1002CFC18(a1, (uint64_t)v4);
  return sub_100011530((uint64_t)v4, a2, &qword_1005579C0);
}

void KeyboardAvoidance.animate(alongsideKeyboard:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v4 + 72) << 16;
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    v16 = a1;
    v17 = a2;
    v12 = _NSConcreteStackBlock;
    v13 = 1107296256;
    v14 = sub_10015F6F8;
    v15 = &unk_100518258;
    v9 = _Block_copy(&v12);
    v10 = v17;
    swift_retain(a2);
    swift_release(v10);
    if (a3)
    {
      v16 = a3;
      v17 = a4;
      v12 = _NSConcreteStackBlock;
      v13 = 1107296256;
      v14 = sub_1002A4D68;
      v15 = &unk_100518280;
      a3 = _Block_copy(&v12);
      v11 = v17;
      swift_retain(a4);
      swift_release(v11);
    }
    objc_msgSend((id)objc_opt_self(UIView), "animateWithDuration:delay:options:animations:completion:", v5, v9, a3, *(double *)(v4 + 64), 0.0);
    _Block_release(a3);
    _Block_release(v9);
  }
}

void KeyboardAvoidance.animate(alongsideKeyboard:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  v5 = objc_opt_self(UIView);
  v6 = *(_QWORD *)(v2 + 72) << 16;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (void *)v5;
    v8 = *(double *)(v2 + 64);
    v11[4] = a1;
    v12 = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10015F6F8;
    v11[3] = &unk_1005182A8;
    v9 = _Block_copy(v11);
    v10 = v12;
    swift_retain(a2);
    swift_release(v10);
    objc_msgSend(v7, "animateWithDuration:delay:options:animations:completion:", v6, v9, 0, v8, 0.0);
    _Block_release(v9);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.animateContentScrollView(in:)(UIViewController in)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  void *v10;
  uint64_t v11;
  objc_class *v12;
  _QWORD v13[5];
  uint64_t v14;

  v3 = swift_allocObject(&unk_1005182E0, 112, 7);
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v1 + 64);
  *(_BYTE *)(v3 + 96) = *(_BYTE *)(v1 + 80);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v5;
  *(UIViewController *)(v3 + 104) = in;
  v6 = objc_opt_self(UIView);
  v7 = *(_QWORD *)(v1 + 72) << 16;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = (void *)v6;
    v9 = *(double *)(v1 + 64);
    v13[4] = sub_1002D0110;
    v14 = v3;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10015F6F8;
    v13[3] = &unk_1005182F8;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = in.super.super.isa;
    swift_retain(v3);
    swift_release(v11);
    objc_msgSend(v8, "animateWithDuration:delay:options:animations:completion:", v7, v10, 0, v9, 0.0);
    _Block_release(v10);
    swift_release(v3);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)(UIViewController to)
{
  double *v1;
  id v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double Height;
  double MinY;
  double v21;
  CGRect v22;
  CGRect v23;

  if (-[objc_class isViewLoaded](to.super.super.isa, "isViewLoaded"))
  {
    v3 = -[objc_class view](to.super.super.isa, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "convertRect:fromView:", 0, v1[4], v1[5], v1[6], v1[7]);
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v13 = -[objc_class view](to.super.super.isa, "view");
      if (v13)
      {
        v14 = v13;
        objc_msgSend(v13, "safeAreaInsets");
        v16 = v15;

        -[objc_class additionalSafeAreaInsets](to.super.super.isa, "additionalSafeAreaInsets");
        v18 = v16 - v17;
        objc_msgSend(v4, "frame");
        Height = CGRectGetHeight(v22);
        v23.origin.x = v6;
        v23.origin.y = v8;
        v23.size.width = v10;
        v23.size.height = v12;
        MinY = CGRectGetMinY(v23);

        if (Height - MinY - v18 < 0.0)
          v21 = 0.0;
        else
          v21 = Height - MinY - v18;
        -[objc_class setAdditionalSafeAreaInsets:](to.super.super.isa, "setAdditionalSafeAreaInsets:", 0.0, 0.0, v21, 0.0);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void KeyboardAvoidance.additionalSafeAreaInsets(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v5;
  id v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double Height;
  double MinY;
  char v24;
  CGRect v25;
  CGRect v26;

  v5 = 0.0;
  if (!objc_msgSend(a1, "isViewLoaded")
    || (v6 = objc_msgSend(a1, "view")) == 0)
  {
    v24 = 1;
LABEL_8:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = v24;
    return;
  }
  v7 = v6;
  objc_msgSend(v6, "convertRect:fromView:", 0, v2[4], v2[5], v2[6], v2[7]);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = objc_msgSend(a1, "view");
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v16, "safeAreaInsets");
    v19 = v18;

    objc_msgSend(a1, "additionalSafeAreaInsets");
    v21 = v19 - v20;
    objc_msgSend(v7, "frame");
    Height = CGRectGetHeight(v25);
    v26.origin.x = v9;
    v26.origin.y = v11;
    v26.size.width = v13;
    v26.size.height = v15;
    MinY = CGRectGetMinY(v26);

    v24 = 0;
    if (Height - MinY - v21 < 0.0)
      v5 = 0.0;
    else
      v5 = Height - MinY - v21;
    goto LABEL_8;
  }
  __break(1u);
}

void KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double *v3;
  uint64_t v7;
  __int128 v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double Height;
  CGFloat x;
  CGFloat v34;
  CGFloat width;
  double v36;
  double v37;
  char v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CGFloat y;
  double v50;
  _BYTE v51[40];
  CGRect v52;
  char v53;
  _OWORD v54[2];
  char v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v7 = swift_allocObject(&unk_100518330, 48, 7);
  sub_1002D03B0(a1, (uint64_t)v51);
  sub_100011530((uint64_t)v51, (uint64_t)v54, &qword_1005579C8);
  if (v55 == 1)
  {
    swift_deallocUninitializedObject(v7, 48, 7);
LABEL_13:
    v38 = 1;
    x = 0.0;
    v34 = 0.0;
    width = 0.0;
    v39 = 0.0;
    goto LABEL_14;
  }
  v8 = v54[1];
  *(_OWORD *)(v7 + 16) = v54[0];
  *(_OWORD *)(v7 + 32) = v8;
  v9 = objc_msgSend(a1, "contentScrollViewForEdge:", 1);
  if (!v9)
  {
    v40 = v7;
    goto LABEL_12;
  }
  v10 = v9;
  v11 = objc_msgSend(a1, "view");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "window");

    if (!v13
      || (v14 = objc_msgSend(v13, "windowScene"), v13, !v14)
      || (v15 = objc_msgSend(v14, "screen"), v14, !v15))
    {
      swift_release(v7);

      goto LABEL_13;
    }
    *(_QWORD *)(v7 + 16) = 0;
    v16 = swift_allocObject(&unk_100518330, 48, 7);
    objc_msgSend(v10, "bounds");
    v18 = v17;
    v20 = v19;
    v22 = v21;
    *(double *)(v16 + 16) = v17;
    *(double *)(v16 + 24) = v19;
    *(double *)(v16 + 32) = v21;
    v23 = objc_msgSend(v15, "coordinateSpace");
    v24 = v3[4];
    v25 = v3[5];
    v26 = v3[6];
    v27 = v3[7];
    v28 = v10;
    objc_msgSend(v23, "convertRect:toCoordinateSpace:", v28, v24, v25, v26, v27);
    v30 = v29;

    swift_unknownObjectRelease(v23);
    v31 = v30 - v20;
    *(double *)(v16 + 40) = v30 - v20;
    v56.origin.x = v18;
    v56.origin.y = v20;
    v56.size.width = v22;
    v56.size.height = v30 - v20;
    Height = CGRectGetHeight(v56);
    if (CGRectGetHeight(*(CGRect *)(v7 + 16)) > Height)
    {
      x = *(double *)(v7 + 16);
      v34 = *(double *)(v7 + 24);
      width = *(double *)(v7 + 32);
      v36 = *(double *)(v7 + 40);
      v57.origin.x = v18;
      v57.origin.y = v20;
      v57.size.width = v22;
      v57.size.height = v31;
      v37 = CGRectGetHeight(v57);
      swift_release(v7);
      swift_release(v16);

      v38 = 0;
      v39 = v36 - v37;
LABEL_14:
      *(CGFloat *)a3 = x;
      *(CGFloat *)(a3 + 8) = v34;
      *(CGFloat *)(a3 + 16) = width;
      *(double *)(a3 + 24) = v39;
      *(_BYTE *)(a3 + 32) = v38;
      return;
    }
    sub_100011530(a2, (uint64_t)&v52, &qword_1005579C8);
    if ((v53 & 1) == 0)
    {
      y = v52.origin.y;
      v59 = CGRectUnion(*(CGRect *)(v7 + 16), v52);
      x = v59.origin.x;
      v34 = v59.origin.y;
      width = v59.size.width;
      v39 = v59.size.height;
      v59.origin.x = v18;
      v59.origin.y = v20;
      v59.size.width = v22;
      v59.size.height = v31;
      v50 = CGRectGetHeight(v59);
      v60.origin.x = x;
      v60.origin.y = v34;
      v60.size.width = width;
      v60.size.height = v39;
      if (CGRectGetHeight(v60) <= v50)
      {
        v61.origin.x = v18;
        v61.origin.y = v20;
        v61.size.width = v22;
        v61.size.height = v31;
        v45 = CGRectGetWidth(v61);
        v62.origin.x = x;
        v62.origin.y = v34;
        v62.size.width = width;
        v62.size.height = v39;
        if (CGRectGetWidth(v62) <= v45)
          goto LABEL_23;
      }
      v44 = y;
LABEL_22:
      x = sub_1002D04EC(v7, v16, v28, v44);
      v34 = v46;
      width = v47;
      v39 = v48;
LABEL_23:
      swift_release(v7);

      swift_release(v16);
      v38 = 0;
      goto LABEL_14;
    }
    objc_msgSend(v28, "contentOffset");
    v42 = v41;
    if (v41 > CGRectGetMinY(*(CGRect *)(v7 + 16))
      || (v58.origin.x = v18,
          v58.origin.y = v20,
          v58.size.width = v22,
          v58.size.height = v31,
          v43 = v42 + CGRectGetHeight(v58),
          CGRectGetMaxY(*(CGRect *)(v7 + 16)) > v43))
    {
      v44 = v42;
      goto LABEL_22;
    }
    swift_release(v7);

    v40 = v16;
LABEL_12:
    swift_release(v40);
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t static KeyboardAvoidance.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;

  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2)
    && CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32))
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72))
  {
    v4 = ((*(_BYTE *)(a1 + 80) & 1) == 0) ^ *(_BYTE *)(a2 + 80);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_1002CF590(uint64_t a1, uint64_t a2)
{
  CGFloat v2;
  double v3;
  CGFloat v4;
  uint64_t v5;
  int v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  CGFloat v15;
  CGFloat v16;
  CGRect v17;
  CGRect v18;

  v2 = *(double *)(a1 + 48);
  v15 = *(double *)(a1 + 40);
  v16 = *(double *)(a1 + 32);
  v4 = *(double *)(a1 + 56);
  v3 = *(double *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = *(double *)(a2 + 32);
  v8 = *(double *)(a2 + 40);
  v9 = *(double *)(a2 + 48);
  v10 = *(double *)(a2 + 56);
  v11 = *(double *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(unsigned __int8 *)(a2 + 80);
  result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if ((_DWORD)result)
  {
    v17.origin.y = v15;
    v17.origin.x = v16;
    v17.size.width = v2;
    v17.size.height = v4;
    v18.origin.x = v7;
    v18.origin.y = v8;
    v18.size.width = v9;
    v18.size.height = v10;
    result = CGRectEqualToRect(v17, v18);
    if ((_DWORD)result)
    {
      result = 0;
      if (v3 == v11)
      {
        if (v5 == v12)
          return v6 ^ v13 ^ 1u;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t KeyboardObserver.update.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain(a3);
  return a2;
}

uint64_t KeyboardObserver.init(options:update:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_retain(a3);
  v6 = swift_bridgeObjectRetain();
  sub_1002CF98C(v6, a2, a3);
  swift_bridgeObjectRelease();
  swift_release(a3);
  return a1;
}

uint64_t sub_1002CF710(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[88];
  _OWORD v13[5];
  char v14;
  _OWORD v15[5];
  char v16;

  v7 = type metadata accessor for Notification(0);
  __chkstk_darwin(v7);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v9, a1);
  sub_1002CFC18((uint64_t)v9, (uint64_t)v12);
  result = sub_100011530((uint64_t)v12, (uint64_t)v13, &qword_1005579C0);
  if (v14 != 2)
  {
    v15[2] = v13[2];
    v15[3] = v13[3];
    v15[4] = v13[4];
    v16 = v14;
    v15[0] = v13[0];
    v15[1] = v13[1];
    return a2(a4, v15);
  }
  return result;
}

uint64_t sub_1002CF808(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1002CF8A8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1002CF98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t Strong;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    v6 = sub_1002CF808(v3);
    v8 = v7;
    v10 = v9 & 1;
    v30 = v3 + 56;
    result = (_QWORD *)objc_opt_self(NSNotificationCenter);
    v28 = result;
    v29 = v3;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
    {
      if (((*(_QWORD *)(v30 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(v3 + 36) != v8)
        goto LABEL_12;
      v11 = *(char *)(*(_QWORD *)(v3 + 48) + v6);
      v12 = *(void **)*(&off_100518518 + v11);
      v13 = swift_allocObject(&unk_100518500, 33, 7);
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = a3;
      *(_BYTE *)(v13 + 32) = v11;
      v14 = type metadata accessor for NotificationObserver();
      v15 = swift_allocObject(v14, 64, 7);
      v16 = swift_unknownObjectWeakInit(v15 + 24, 0);
      *(_QWORD *)(v15 + 16) = v12;
      swift_unknownObjectWeakAssign(v16, 0);
      *(_BYTE *)(v15 + 32) = 1;
      *(_QWORD *)(v15 + 48) = sub_1002D0994;
      *(_QWORD *)(v15 + 56) = v13;
      v17 = v12;
      swift_retain(a3);
      swift_retain(v13);
      v18 = objc_msgSend(v28, "defaultCenter");
      *(_QWORD *)(v15 + 40) = v18;
      Strong = swift_unknownObjectWeakLoadStrong(v15 + 24);
      v20 = v17;
      v21 = v18;
      swift_retain(v15);
      objc_msgSend(v21, "addObserver:selector:name:object:", v15, "handleNotification:", v20, Strong);

      swift_release(v15);
      swift_unknownObjectRelease(Strong);

      swift_release(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v23 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = v15;
      v3 = v29;
      v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v24);
      specialized ContiguousArray._endMutation()(v25);
      result = (_QWORD *)sub_1002CF8A8(v6, v8, v10 & 1, v29);
      v6 = (int64_t)result;
      v8 = v26;
      v10 = v27 & 1;
      if (!--v4)
      {
        sub_1002D09A0((uint64_t)result, v26, v27 & 1);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_1002CFC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  unsigned __int8 v48;
  double v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  _QWORD v55[5];
  __int128 v56;
  __int128 v57;

  v4 = Notification.userInfo.getter(a1);
  if (!v4)
    goto LABEL_32;
  v5 = v4;
  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameBeginUserInfoKey);
  v54 = v6;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v7 = sub_1001461DC((uint64_t)v55), (v8 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10013BB48((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  v9 = sub_1000DD108(0, (unint64_t *)&qword_1005561F0, NSValue_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    goto LABEL_31;
  v10 = v53;
  objc_msgSend(v53, "CGRectValue");
  v52 = v11;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v54 = v18;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v19 = sub_1001461DC((uint64_t)v55), (v20 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v5 + 56) + 32 * v19, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10013BB48((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    goto LABEL_31;
  v21 = v53;
  objc_msgSend(v53, "CGRectValue");
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationDurationUserInfoKey);
  v54 = v30;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v31 = sub_1001461DC((uint64_t)v55), (v32 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v5 + 56) + 32 * v31, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10013BB48((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  v33 = sub_1000DD108(0, &qword_100556ED8, NSNumber_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v34 = v53;
  objc_msgSend(v53, "floatValue");
  v36 = v35;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationCurveUserInfoKey);
  v54 = v37;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v38 = sub_1001461DC((uint64_t)v55), (v39 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v5 + 56) + 32 * v38, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10013BB48((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    sub_1002A17AC((uint64_t)&v56);
    goto LABEL_32;
  }
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
    goto LABEL_31;
  v40 = v53;
  v41 = objc_msgSend(v53, "integerValue");

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardIsLocalUserInfoKey);
  v54 = v42;
  AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v43 = sub_1001461DC((uint64_t)v55), (v44 & 1) != 0))
  {
    sub_1000760E0(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10013BB48((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) != 0)
  {
    v50 = v53;
    v48 = objc_msgSend(v53, "BOOLValue");

    v49 = v36;
    v51 = type metadata accessor for Notification(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(a1, v51);
    v47 = v52;
    goto LABEL_33;
  }
LABEL_32:
  v45 = type metadata accessor for Notification(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(a1, v45);
  v41 = 0;
  v47 = 0;
  v13 = 0;
  v48 = 2;
  v15 = 0;
  v17 = 0;
  v23 = 0;
  v25 = 0;
  v27 = 0;
  v29 = 0;
  v49 = 0.0;
LABEL_33:
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v29;
  *(double *)(a2 + 64) = v49;
  *(_QWORD *)(a2 + 72) = v41;
  *(_BYTE *)(a2 + 80) = v48;
  return result;
}

uint64_t sub_1002D00D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002D00E4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002D00EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 112, 7);
}

void sub_1002D0110()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)((UIViewController)v1);
  sub_1002D0150(v1);
}

uint64_t sub_1002D0140()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_1002D0150(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;

  v1 = objc_msgSend(a1, "contentScrollView");
  if (v1)
  {
    v29 = v1;
    v2 = objc_msgSend(v1, "firstResponder");
    if (v2)
    {
      v3 = v2;
      objc_opt_self(UIView);
      v4 = swift_dynamicCastObjCClass(v3);
      if (v4)
      {
        v5 = (void *)v4;
        v6 = v3;
        v7 = objc_msgSend(v5, "superview");
        if (v7)
        {
          v8 = v7;
          sub_1000DD108(0, &qword_100557308, UIView_ptr);
          while (1)
          {
            v9 = v8;
            v10 = v29;
            v11 = static NSObject.== infix(_:_:)(v9, v10);

            if ((v11 & 1) != 0)
              break;
            objc_opt_self(UICollectionReusableView);
            if (swift_dynamicCastObjCClass(v9)
              || (objc_opt_self(UITableViewCell), swift_dynamicCastObjCClass(v9)))
            {
              v9 = v9;

              v5 = v9;
              break;
            }
            v8 = objc_msgSend(v9, "superview");

            if (!v8)
              goto LABEL_10;
          }
        }
        else
        {
LABEL_10:
          v9 = 0;
        }
        objc_msgSend(v5, "frame");
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v20 = objc_msgSend(v5, "superview");
        objc_msgSend(v29, "convertRect:fromView:", v20, v13, v15, v17, v19);
        v22 = v21;
        v24 = v23;
        v26 = v25;
        v28 = v27;

        objc_msgSend(v29, "scrollRectToVisible:animated:", 0, v22, v24, v26, v28);
        v29 = v5;
      }

    }
  }
}

void sub_1002D03B0(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = 1;
  v4 = objc_msgSend(a1, "contentScrollViewForEdge:", 1);
  v5 = 0;
  if (!v4)
    goto LABEL_7;
  v6 = v4;
  v7 = objc_msgSend(v4, "firstResponder");
  if (!v7)
  {
LABEL_6:

    v3 = 1;
LABEL_7:
    v22 = 0;
    v24 = 0;
    v26 = 0;
    goto LABEL_8;
  }
  v8 = v7;
  objc_opt_self(UIView);
  v9 = (void *)swift_dynamicCastObjCClass(v8);
  if (!v9)
  {

    goto LABEL_6;
  }
  v10 = v9;
  objc_msgSend(v9, "frame");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = objc_msgSend(v10, "superview");
  objc_msgSend(v6, "convertRect:fromView:", v19, v12, v14, v16, v18);
  v5 = v20;
  v22 = v21;
  v24 = v23;
  v26 = v25;

  v3 = 0;
LABEL_8:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v26;
  *(_BYTE *)(a2 + 32) = v3;
}

double sub_1002D04EC(uint64_t a1, uint64_t a2, void *a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];

  v8 = a1 + 16;
  v9 = a2 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  v10 = *(double *)(a1 + 16);
  swift_beginAccess(v9, v15, 0, 0);
  CGRectGetHeight(*(CGRect *)(a2 + 16));
  swift_beginAccess(v8, v14, 0, 0);
  CGRectGetHeight(*(CGRect *)(a1 + 16));
  swift_beginAccess(v8, v13, 0, 0);
  if (CGRectGetMinY(*(CGRect *)(a1 + 16)) > a4)
  {
    objc_msgSend(a3, "adjustedContentInset");
    swift_beginAccess(v8, v12, 0, 0);
    CGRectGetMaxY(*(CGRect *)(a1 + 16));
  }
  return v10;
}

unint64_t sub_1002D062C()
{
  unint64_t result;

  result = qword_1005579D0;
  if (!qword_1005579D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for KeyboardObserver.Option, &type metadata for KeyboardObserver.Option);
    atomic_store(result, (unint64_t *)&qword_1005579D0);
  }
  return result;
}

__n128 initializeWithCopy for KeyboardAvoidance(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyboardAvoidance(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyboardAvoidance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardAvoidance()
{
  return &type metadata for KeyboardAvoidance;
}

uint64_t destroy for KeyboardObserver(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_release(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for KeyboardObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_retain(v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for KeyboardObserver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for KeyboardObserver(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  *(_OWORD *)a1 = *a2;
  swift_release(a1[2]);
  v4 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardObserver()
{
  return &type metadata for KeyboardObserver;
}

uint64_t storeEnumTagSinglePayload for KeyboardObserver.Option(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1002D08F0 + 4 * byte_100438425[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1002D0924 + 4 * asc_100438420[v4]))();
}

uint64_t sub_1002D0924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002D092C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002D0934);
  return result;
}

uint64_t sub_1002D0940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002D0948);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1002D094C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002D0954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyboardObserver.Option()
{
  return &type metadata for KeyboardObserver.Option;
}

uint64_t sub_1002D0970()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1002D0994(uint64_t a1)
{
  uint64_t v1;

  return sub_1002CF710(a1, *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_1002D09A0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t Signpost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OSSignpostID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

id Signpost.log.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Signpost(0) + 20));
}

uint64_t type metadata accessor for Signpost(uint64_t a1)
{
  uint64_t result;

  result = qword_100557A38;
  if (!qword_100557A38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Signpost);
  return result;
}

uint64_t Signpost.name.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Signpost(0) + 24));
}

uint64_t Signpost.init(name:object:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;

  v30 = a3;
  v29 = a2;
  v10 = sub_10000B4C8(&qword_1005579D8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  v16 = type metadata accessor for OSSignpostID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v29 - v21;
  v23 = a5;
  swift_unknownObjectRetain(a4);
  OSSignpostID.init(log:object:)(v23, a4);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v22, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  sub_1002D0DE0((uint64_t)v15, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) == 1)
  {
    OSSignpostID.init(log:)(v23);
    sub_1002D0E28((uint64_t)v15);
    sub_1002D0E28((uint64_t)v13);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(a6, v20, v16);
  }
  else
  {
    sub_1002D0E28((uint64_t)v15);
    v24 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v24(v20, v13, v16);
    v24(a6, v20, v16);
  }
  swift_unknownObjectRelease(a4);
  v25 = type metadata accessor for Signpost(0);
  *(_QWORD *)&a6[*(int *)(v25 + 20)] = v23;
  v26 = &a6[*(int *)(v25 + 24)];
  v27 = v29;
  *(_QWORD *)v26 = a1;
  *((_QWORD *)v26 + 1) = v27;
  v26[16] = v30;
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t Signpost.init(name:id:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t result;
  char *v21;
  uint64_t v22;

  v12 = sub_10000B4C8(&qword_1005579D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OSSignpostID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002D0DE0(a4, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    OSSignpostID.init(log:)(a5);
    sub_1002D0E28(a4);
    sub_1002D0E28((uint64_t)v14);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(a6, v18, v15);
  }
  else
  {
    sub_1002D0E28(a4);
    v19 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v19(v18, v14, v15);
    v19(a6, v18, v15);
  }
  result = type metadata accessor for Signpost(0);
  *(_QWORD *)&a6[*(int *)(result + 20)] = a5;
  v21 = &a6[*(int *)(result + 24)];
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = a2;
  v21[16] = a3;
  return result;
}

uint64_t sub_1002D0DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005579D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002D0E28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_1005579D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Signpost.emit(dso:)(uint64_t a1)
{
  return sub_1002D0EA4(a1, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.emit(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_1002D0F04(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.begin(dso:)(uint64_t a1)
{
  return sub_1002D0EA4(a1, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.begin(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_1002D0F04(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.end(dso:)(uint64_t a1)
{
  return sub_1002D0EA4(a1, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_1002D0EA4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a2();
  v5 = type metadata accessor for Signpost(0);
  return os_signpost(_:dso:log:name:signpostID:)(v4, a1, *(_QWORD *)(v2 + *(int *)(v5 + 20)), *(_QWORD *)(v2 + *(int *)(v5 + 24)), *(_QWORD *)(v2 + *(int *)(v5 + 24) + 8), *(unsigned __int8 *)(v2 + *(int *)(v5 + 24) + 16), v2);
}

uint64_t Signpost.end(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_1002D0F04(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_1002D0F04(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v12 = a6();
  v13 = type metadata accessor for Signpost(0);
  v15 = a4;
  return os_signpost(_:dso:log:name:signpostID:_:_:)(v12, a1, *(_QWORD *)(v6 + *(int *)(v13 + 20)), *(_QWORD *)(v6 + *(int *)(v13 + 24)), *(_QWORD *)(v6 + *(int *)(v13 + 24) + 8), *(unsigned __int8 *)(v6 + *(int *)(v13 + 24) + 16), v6, a2, a3, v15, a5);
}

uint64_t static Signpost.interval<A>(name:log:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  id v23;
  id v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[3];
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unsigned int v38;

  v35[2] = a6;
  v36 = a5;
  v38 = a3;
  v37 = a2;
  v35[1] = a7;
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000B4C8(&qword_1005579D8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v35 - v17;
  v19 = type metadata accessor for Signpost(0);
  __chkstk_darwin(v19);
  v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
  sub_1002D0DE0((uint64_t)v18, (uint64_t)v16);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
  v23 = a4;
  v24 = v23;
  if (v22 == 1)
  {
    OSSignpostID.init(log:)(v23);
    sub_1002D0E28((uint64_t)v18);
    sub_1002D0E28((uint64_t)v16);
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v21, v12, v9);
  }
  else
  {
    sub_1002D0E28((uint64_t)v18);
    v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v26(v12, v16, v9);
    v25 = ((uint64_t (*)(char *, char *, uint64_t))v26)(v21, v12, v9);
  }
  *(_QWORD *)&v21[*(int *)(v19 + 20)] = v24;
  v27 = &v21[*(int *)(v19 + 24)];
  v28 = v37;
  *(_QWORD *)v27 = a1;
  *((_QWORD *)v27 + 1) = v28;
  v29 = v38;
  v27[16] = v38;
  v30 = static os_signpost_type_t.begin.getter(v25);
  v31 = os_signpost(_:dso:log:name:signpostID:)(v30, &_mh_execute_header, v24, a1, v28, v29, v21);
  v32 = v36(v31);
  v33 = static os_signpost_type_t.end.getter(v32);
  os_signpost(_:dso:log:name:signpostID:)(v33, &_mh_execute_header, v24, a1, v28, v29, v21);
  return sub_10016631C((uint64_t)v21);
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for OSSignpostID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_OWORD *)v11 = *(_OWORD *)v12;
    v11[16] = v12[16];
    v13 = v10;
  }
  return a1;
}

void destroy for Signpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v12 = v9;
  return a1;
}

uint64_t assignWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D14B4);
}

uint64_t sub_1002D14B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D153C);
}

uint64_t sub_1002D153C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1002D15B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for OSSignpostID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100438528;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void UnfairLock.locked<A>(_:)(void (*a1)(void))
{
  uint64_t v1;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t UnfairLock.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v1 = swift_allocObject(v0, 24, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = 0;
  return v1;
}

uint64_t UnfairLock.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = 0;
  return v0;
}

uint64_t UnfairLock.deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return v0;
}

uint64_t UnfairLock.__deallocating_deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Void __swiftcall UnfairLock.assertOwned()()
{
  uint64_t v0;

  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

Swift::Void __swiftcall UnfairLock.assertNotOwned()()
{
  uint64_t v0;

  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t type metadata accessor for UnfairLock()
{
  return objc_opt_self(_TtC14MusicUtilities10UnfairLock);
}

uint64_t WeakArray.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for WeakArray.WeakBox(0, a2, a2, a4);
  return Array.endIndex.getter(a1, v5);
}

uint64_t type metadata accessor for WeakArray.WeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray.WeakBox);
}

uint64_t WeakArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[8];

  v6 = type metadata accessor for WeakArray.WeakBox(0, a3, a3, a4);
  Array.subscript.getter(a1, a2, v6);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9, v6);
  return Strong;
}

{
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  type metadata accessor for WeakArray.WeakBox(255, a3, a3, a4);
  v7 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v7);
  RandomAccessCollection<>.indices.getter(&v15, v7, WitnessTable, &protocol witness table for Int);
  v14 = v15;
  v13 = a1;
  v9 = sub_10000B4C8(&qword_100556EA0);
  v11 = Range.contains(_:)(&v13, v9);
  result = 0;
  if ((v11 & 1) != 0)
    return WeakArray.subscript.getter(a1, a2, a3, v10);
  return result;
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t WeakArray.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[5] = a1;
  v11[2] = a2;
  v4 = type metadata accessor for Array(0);
  v6 = type metadata accessor for WeakArray.WeakBox(0, a2, a2, v5);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
  v9 = sub_1002ACD80((void (*)(char *, char *))sub_1002D1A08, (uint64_t)v11, v4, v6, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v8);
  swift_bridgeObjectRelease(a1);
  return v9;
}

uint64_t sub_1002D19BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_unknownObjectRetain(*a1);
  v4 = swift_unknownObjectWeakInit(a2, 0);
  swift_unknownObjectWeakAssign(v4, v3);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1002D1A08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002D19BC(a1, a2);
}

uint64_t WeakArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];

  v3 = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain(a1);
  swift_unknownObjectWeakInit(v7, 0);
  swift_unknownObjectWeakAssign(v7, a1);
  swift_unknownObjectRelease(a1);
  type metadata accessor for WeakArray.WeakBox(255, v3, v3, v4);
  v5 = type metadata accessor for Array(0);
  return Array.append(_:)(v7, v5);
}

uint64_t WeakArray.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[8];

  v5 = type metadata accessor for WeakArray.WeakBox(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16), a4);
  v6 = type metadata accessor for Array(0);
  Array.remove(at:)(a1, v6);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9, v5);
  return Strong;
}

uint64_t WeakArray.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  WeakArray.reap()();
  v10 = *(_QWORD *)(a2 + 16);
  v11 = a1;
  type metadata accessor for WeakArray.WeakBox(255, v10, v10, v4);
  v5 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v5);
  v7 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v5);
  return RangeReplaceableCollection<>.removeAll(where:)(sub_1002D1C50, &v9, v5, WitnessTable, v7);
}

Swift::Void __swiftcall WeakArray.reap()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WeakArray.WeakBox(255, v6, v6, v1);
  v2 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v2);
  v4 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v2);
  RangeReplaceableCollection<>.removeAll(where:)(sub_1002D1C94, &v5, v2, WitnessTable, v4);
}

uint64_t sub_1002D1C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v4 = result;
    swift_unknownObjectRelease(result);
    return v4 == v2;
  }
  return result;
}

BOOL sub_1002D1C94(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_unknownObjectWeakLoadStrong(a1);
  v2 = Strong;
  if (Strong)
    swift_unknownObjectRelease(Strong);
  return v2 == 0;
}

uint64_t WeakArray.allElements.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v5 = type metadata accessor for WeakArray(0, a2, a3, a4);
  WitnessTable = swift_getWitnessTable("Y", v5);
  return Sequence.compactMap<A>(_:)(sub_1002D1D44, v8, v5, a2, WitnessTable);
}

uint64_t sub_1002D1D44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_unknownObjectRetain(v2);
}

uint64_t type metadata accessor for WeakArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray);
}

uint64_t sub_1002D1D6C(uint64_t a1)
{
  return swift_getWitnessTable("Y", a1);
}

void *sub_1002D1D7C()
{
  return &protocol witness table for Int;
}

uint64_t sub_1002D1D88(uint64_t a1)
{
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for DefaultIndices<A>, a1);
}

uint64_t sub_1002D1D98(uint64_t a1)
{
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for Slice<A>, a1);
}

uint64_t sub_1002D1DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;

  result = WeakArray.endIndex.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3);
  *a4 = result;
  return result;
}

void (*sub_1002D1DD8(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t (*v8)(_QWORD *);
  uint64_t v9;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = sub_1002D1E68(v7, *a2, *v3, *(_QWORD *)(a3 + 16));
  v7[4] = v9;
  v7[5] = (uint64_t)v8;
  return sub_1002D1E3C;
}

void sub_1002D1E3C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

uint64_t (*sub_1002D1E68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  *a1 = WeakArray.subscript.getter(a2, a3, a4, a4);
  return sub_100129C34;
}

void sub_1002D1EB4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1002D1ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002D2174(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t sub_1002D1EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002D2174(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.<= infix(_:_:));
}

_QWORD *sub_1002D1F1C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_1002D1F34(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t sub_1002D1F4C(uint64_t a1)
{
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for IndexingIterator<A>, a1);
}

void sub_1002D1F5C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1002D1F68(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable("q", a1);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_1002D1F9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v4;

  WitnessTable = swift_getWitnessTable("q", a1);
  v4 = j___ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF(v1, a1, WitnessTable);
  swift_bridgeObjectRelease(*v1);
  return v4;
}

uint64_t sub_1002D1FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t result;
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.Index: Comparable);
  v10 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = dispatch thunk of static Comparable.<= infix(_:_:)(a2, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if ((v17 & 1) == 0)
  {
    v22 = *(void (**)(char *, uint64_t))(v11 + 8);
    v22(v14, v10);
    result = ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
    goto LABEL_5;
  }
  v19 = dispatch thunk of static Comparable.<= infix(_:_:)(&v16[*(int *)(v10 + 36)], &v14[*(int *)(v10 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  result = ((uint64_t (*)(char *, uint64_t))v20)(v16, v10);
  if ((v19 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1002D2174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t, uint64_t);

  v25 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v24 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v24 - v19;
  v21 = dispatch thunk of static Comparable.<= infix(_:_:)(a2, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, v13);
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v22 = v25(v20, &v17[*(int *)(v13 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
  if ((v22 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t WeakValuesDictionary.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  WeakValuesDictionary.init()();
  return v1;
}

_QWORD *WeakValuesDictionary.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = sub_10029D69C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v2, v3, 0, 0);
  v5 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v0[2] = Dictionary.init(dictionaryLiteral:)(v5, v2, v3, *(_QWORD *)(v1 + 96));
  return v0;
}

uint64_t WeakValuesDictionary.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v12;
  _OWORD v13[2];
  id v14[4];
  _BYTE v15[24];

  v3 = (_QWORD *)*v1;
  swift_beginAccess(v1 + 2, v15, 0, 0);
  v4 = v1[2];
  v5 = v3[10];
  v6 = sub_10029D69C();
  v7 = v3[12];
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter(v14, a1, v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  v8 = v14[0];
  if (v14[0])
  {
    v9 = objc_msgSend(v14[0], "weakObjectValue");
    if (v9)
    {
      v10 = v9;
      _bridgeAnyObjectToAny(_:)(v9);

      swift_unknownObjectRelease(v10);
    }
    else
    {

      memset(v13, 0, sizeof(v13));
    }
    sub_1002A1764((uint64_t)v13, (uint64_t)v14);
    if (v14[3])
    {
      if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, v3[11], 6) & 1) != 0)
        return v12;
    }
    else
    {
      sub_1002A17AC((uint64_t)v14);
    }
  }
  return 0;
}

void WeakValuesDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  id v19;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    v18[0] = a1;
    v11 = *(_QWORD *)(v5 + 88);
    swift_unknownObjectRetain(a1);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)(v18, v11);
    v13 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithWeakObject:", v12);
    swift_unknownObjectRelease(v12);
    v19 = v13;
    swift_beginAccess(v2 + 2, v18, 33, 0);
    v14 = sub_10029D69C();
    v15 = type metadata accessor for Dictionary(0, v6, v14, *(_QWORD *)(v5 + 96));
    Dictionary.subscript.setter(&v19, v10, v15);
    swift_endAccess(v18);
    swift_unknownObjectRelease_n(a1, 2);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  else
  {
    swift_beginAccess(v2 + 2, v18, 33, 0);
    v16 = sub_10029D69C();
    v17 = type metadata accessor for Dictionary(0, v6, v16, *(_QWORD *)(v5 + 96));
    Dictionary.removeValue(forKey:)(&v19, a2, v17);
    swift_endAccess(v18);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);

  }
}

void (*WeakValuesDictionary.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  (*(void (**)(void))(v7 + 16))();
  *v5 = WeakValuesDictionary.subscript.getter(a2);
  return sub_1002D2744;
}

void sub_1002D2744(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = **a1;
  v4 = (void *)(*a1)[4];
  v5 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v2[3] + 32))((*a1)[4], v5, v2[2]);
    v6 = swift_unknownObjectRetain(v3);
    WeakValuesDictionary.subscript.setter(v6, (uint64_t)v4);
    swift_unknownObjectRelease(*v2);
  }
  else
  {
    WeakValuesDictionary.subscript.setter(**a1, (uint64_t)v5);
  }
  free(v5);
  free(v4);
  free(v2);
}

Swift::Void __swiftcall WeakValuesDictionary.compact()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  id v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  int64_t v45;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  Swift::Bool IsNativeType;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t i;
  _QWORD *v81;
  uint64_t v82;
  _OWORD v83[2];
  _QWORD v84[4];
  char v85[24];
  uint64_t v86;

  v81 = (_QWORD *)*v0;
  v1 = v81[10];
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v74 = (char *)&v63 - v5;
  v63 = v6;
  __chkstk_darwin();
  v75 = (char *)&v63 - v7;
  v70 = sub_10029D69C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v70, "key value ", 0);
  v9 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v78 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  __chkstk_darwin();
  v76 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v77 = (char *)&v63 - v11;
  v86 = static Array._allocateUninitialized(_:)(0, v1);
  v66 = v0 + 2;
  swift_beginAccess(v0 + 2, v85, 0, 0);
  v12 = v0[2];
  v67 = v4;
  if ((v12 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaDictionary.makeIterator()(v13);
    v68 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v14 | 0x8000000000000000;
  }
  else
  {
    v18 = -1 << *(_BYTE *)(v12 + 32);
    v15 = ~v18;
    v19 = *(_QWORD *)(v12 + 64);
    v68 = v12 + 64;
    v20 = -v18;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v16 = v21 & v19;
    v17 = v12;
  }
  v72 = v17 & 0x7FFFFFFFFFFFFFFFLL;
  v65 = v15;
  v71 = (unint64_t)(v15 + 64) >> 6;
  v64 = v71 - 1;
  v22 = swift_bridgeObjectRetain();
  v23 = 0;
  v73 = (char *)&type metadata for Any + 8;
  v69 = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v17; ; v17 = i)
  {
    if ((v17 & 0x8000000000000000) != 0)
    {
      v34 = __CocoaDictionary.Iterator.next()(v22);
      if (v34)
      {
        v37 = v34;
        v38 = v35;
        v39 = v76;
        _forceBridgeFromObjectiveC<A>(_:_:)(v34, v1, v1);
        swift_unknownObjectRelease(v37);
        v40 = *(int *)(TupleTypeMetadata2 + 48);
        *(_QWORD *)&v83[0] = v38;
        swift_unknownObjectRetain(v38);
        swift_dynamicCast(v84, v83, v69, v70, 7);
        v41 = v84[0];
        v42 = v38;
        v29 = v39;
        v43 = swift_unknownObjectRelease(v42);
        *(_QWORD *)&v39[v40] = v41;
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v31 + 56))(v39, 0, 1, TupleTypeMetadata2, v43);
      }
      else
      {
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        v29 = v76;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v31 + 56))(v76, 1, 1, TupleTypeMetadata2, v36);
      }
      v33 = v23;
      v26 = v16;
    }
    else
    {
      if (v16)
      {
        v26 = (v16 - 1) & v16;
        v27 = __clz(__rbit64(v16)) | (v23 << 6);
        v28 = v23;
LABEL_17:
        v29 = v76;
        (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v76, *(_QWORD *)(v17 + 48) + *(_QWORD *)(v2 + 72) * v27, v1);
        v30 = *(void **)(*(_QWORD *)(v17 + 56) + 8 * v27);
        *(_QWORD *)&v29[*(int *)(TupleTypeMetadata2 + 48)] = v30;
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, TupleTypeMetadata2);
        v32 = v30;
        v33 = v28;
        goto LABEL_38;
      }
      v28 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return;
      }
      v33 = v23;
      if (v28 < v71)
      {
        v44 = *(_QWORD *)(v68 + 8 * v28);
        v17 = i;
        if (v44)
          goto LABEL_23;
        v33 = v23 + 1;
        if (v23 + 2 < v71)
        {
          v44 = *(_QWORD *)(v68 + 8 * (v23 + 2));
          v17 = i;
          if (v44)
          {
            v28 = v23 + 2;
LABEL_23:
            v26 = (v44 - 1) & v44;
            v27 = __clz(__rbit64(v44)) + (v28 << 6);
            goto LABEL_17;
          }
          v45 = v23 + 3;
          v33 = v23 + 2;
          if (v23 + 3 < v71)
          {
            v44 = *(_QWORD *)(v68 + 8 * v45);
            v17 = i;
            if (v44)
            {
              v28 = v23 + 3;
              goto LABEL_23;
            }
            while (1)
            {
              v28 = v45 + 1;
              if (__OFADD__(v45, 1))
                goto LABEL_57;
              if (v28 >= v71)
                break;
              v44 = *(_QWORD *)(v68 + 8 * v28);
              ++v45;
              if (v44)
                goto LABEL_23;
            }
            v33 = v64;
          }
        }
      }
      v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      v29 = v76;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v76, 1, 1, TupleTypeMetadata2);
      v26 = 0;
    }
LABEL_38:
    v46 = v77;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v29, v79);
    v47 = v46;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v46, 1, TupleTypeMetadata2) == 1)
      break;
    v48 = *(void **)&v46[*(int *)(TupleTypeMetadata2 + 48)];
    v49 = v75;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v75, v47, v1);
    v50 = objc_msgSend(v48, "weakObjectValue");
    if (v50)
    {
      v51 = v50;
      _bridgeAnyObjectToAny(_:)(v50);
      swift_unknownObjectRelease(v51);
    }
    else
    {
      memset(v83, 0, sizeof(v83));
    }
    sub_1002A1764((uint64_t)v83, (uint64_t)v84);
    if (!v84[3])
    {
      sub_1002A17AC((uint64_t)v84);
LABEL_12:
      v24 = v74;
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v74, v49, v1);
      v25 = type metadata accessor for Array(0);
      Array.append(_:)(v24, v25);

      goto LABEL_13;
    }
    if ((swift_dynamicCast(&v82, v84, v73, v81[11], 6) & 1) == 0)
      goto LABEL_12;

    swift_unknownObjectRelease(v82);
LABEL_13:
    v22 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v49, v1);
    v23 = v33;
    v16 = v26;
  }
  sub_100194204(i);
  v52 = v86;
  v53 = Array.endIndex.getter(v86, v1);
  v54 = v67;
  v55 = v70;
  v56 = v66;
  if (!v53)
    goto LABEL_55;
  v57 = 0;
  while (2)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v57, IsNativeType, v52, v1);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v54, v52+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v57, v1);
      v59 = v57 + 1;
      if (__OFADD__(v57, 1))
        break;
      goto LABEL_49;
    }
    v61 = _ArrayBuffer._getElementSlowPath(_:)(v57, v52, v1);
    if (v63 != 8)
      goto LABEL_58;
    v62 = v61;
    v84[0] = v61;
    (*(void (**)(char *, _QWORD *, uint64_t))(v2 + 16))(v54, v84, v1);
    swift_unknownObjectRelease(v62);
    v59 = v57 + 1;
    if (!__OFADD__(v57, 1))
    {
LABEL_49:
      swift_beginAccess(v56, v84, 33, 0);
      v60 = type metadata accessor for Dictionary(0, v1, v55, v81[12]);
      Dictionary.removeValue(forKey:)(v83, v54, v60);
      swift_endAccess(v84);

      (*(void (**)(char *, uint64_t))(v2 + 8))(v54, v1);
      ++v57;
      if (v59 == Array.endIndex.getter(v52, v1))
        goto LABEL_55;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_55:
  swift_bridgeObjectRelease();
}

uint64_t WeakValuesDictionary.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_1002D2F50(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 104);
}

uint64_t type metadata accessor for WeakValuesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000668D0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakValuesDictionary);
}

uint64_t sub_1002D2FA0()
{
  uint64_t result;

  result = sub_1002D2FBC();
  qword_100562670 = result;
  return result;
}

uint64_t sub_1002D2FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  id v45;
  NSURL *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  char *v51;
  uint64_t result;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  void (*v57)(uint64_t, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v62;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v58 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_QWORD *)(sub_10000B4C8(&qword_1005585E0) - 8);
  __chkstk_darwin();
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v53 - v6;
  __chkstk_darwin();
  v9 = (char *)&v53 - v8;
  __chkstk_darwin();
  v57 = (void (*)(uint64_t, char *, uint64_t))((char *)&v53 - v10);
  __chkstk_darwin();
  v12 = (char *)&v53 - v11;
  v54 = sub_1002F21F0((uint64_t)_swiftEmptyArrayStorage);
  v13 = sub_10000B4C8(&qword_1005585E8);
  v14 = *(_QWORD *)(v3 + 72);
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + 32) & ~v15;
  v60 = v14;
  v17 = swift_allocObject(v13, v16 + 3 * v14, v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_100427490;
  v55 = v16;
  v53 = v17;
  v18 = v17 + v16;
  v19 = (void *)objc_opt_self(NSBundle);
  v20 = objc_msgSend(v19, "mainBundle");
  v21 = objc_msgSend(v20, "resourceURL");

  v59 = v1;
  if (v21)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v22 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56);
    v23 = v12;
    v24 = 0;
  }
  else
  {
    v22 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56);
    v23 = v12;
    v24 = 1;
  }
  v61 = v22;
  v22((uint64_t)v23, v24, 1, v0);
  sub_1002D67F8((uint64_t)v12, v18);
  type metadata accessor for BundleFinder();
  v25 = objc_msgSend(v19, "bundleForClass:", swift_getObjCClassFromMetadata());
  v26 = objc_msgSend(v25, "resourceURL");

  if (v26)
  {
    v27 = (uint64_t)v57;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v28 = 0;
  }
  else
  {
    v28 = 1;
    v27 = (uint64_t)v57;
  }
  v29 = v61;
  v61(v27, v28, 1, v0);
  v30 = v60;
  sub_1002D67F8(v27, v18 + v60);
  v31 = v18 + 2 * v30;
  v32 = objc_msgSend(v19, "mainBundle");
  v33 = objc_msgSend(v32, "bundleURL");

  v34 = v58;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v35 = v59;
  v57 = *(void (**)(uint64_t, char *, uint64_t))(v59 + 32);
  v57(v31, v34, v0);
  v29(v31, 0, 1, v0);
  v62 = v54;
  sub_100383D74(v53);
  v36 = v62[2];
  if (v36)
  {
    v37 = &qword_1005585E0;
    v38 = (uint64_t)v62 + v55;
    v54 = v62;
    v55 = 0x8000000100451020;
    v56 = v9;
    do
    {
      sub_100011370(v38, (uint64_t)v7, v37);
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      if (v39(v7, 1, v0) == 1)
      {
        sub_1002D6840((uint64_t)v7);
        v40 = 1;
      }
      else
      {
        URL.appendingPathComponent(_:)(0xD000000000000022, v55);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v0);
        v40 = 0;
      }
      v61((uint64_t)v9, v40, 1, v0);
      sub_100011370((uint64_t)v9, (uint64_t)v5, v37);
      if (v39(v5, 1, v0) == 1)
      {
        sub_1002D6840((uint64_t)v9);
      }
      else
      {
        v41 = v7;
        v42 = v37;
        v43 = v5;
        v44 = v58;
        v57((uint64_t)v58, v43, v0);
        v45 = objc_allocWithZone((Class)NSBundle);
        URL._bridgeToObjectiveC()(v46);
        v48 = v47;
        v49 = v45;
        v35 = v59;
        v50 = objc_msgSend(v49, "initWithURL:", v48);

        v51 = v44;
        v5 = v43;
        v37 = v42;
        v7 = v41;
        v9 = v56;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v51, v0);
        sub_1002D6840((uint64_t)v9);
        if (v50)
        {
          swift_bridgeObjectRelease();
          return (uint64_t)v50;
        }
      }
      v38 += v60;
      --v36;
    }
    while (v36);
  }
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000037, 0x8000000100450FE0, "MusicCoreUI/resource_bundle_accessor.swift", 42, 2, 44, 0);
  __break(1u);
  return result;
}

void variable initialization expression of Artwork.caching(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id variable initialization expression of Artwork.decoration@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id result;

  v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v2[6];
  result = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)a1 + v5) = result;
  *(_QWORD *)((char *)a1 + v2[7]) = 1;
  return result;
}

uint64_t variable initialization expression of Artwork.size()
{
  return 0;
}

double variable initialization expression of Artwork.View._laidBounds()
{
  return 0.0;
}

uint64_t variable initialization expression of Artwork.Decoration.corner@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0((uint64_t (*)(_QWORD))&type metadata accessor for UIView.Corner, a1);
}

id variable initialization expression of Artwork.Decoration.fillColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
}

id variable initialization expression of Artwork.Placeholder.background()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
}

uint64_t variable initialization expression of Artwork.Placeholder.tint()
{
  uint64_t v0;
  id v1;

  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  v0 = qword_100558B80;
  v1 = (id)qword_100558B80;
  return v0;
}

id variable initialization expression of Artwork.Placeholder.symbolConfiguration()
{
  return objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 4);
}

double variable initialization expression of Artwork.Placeholder.imageScaleFactor()
{
  return 0.5;
}

double static CGFloat.squareAspectRatio.getter()
{
  return 1.0;
}

id variable initialization expression of Artwork.Placeholder.View.contentView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
}

unint64_t sub_1002D36C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_1005585F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain();
    sub_10003A5E4(v9, v10);
    result = sub_10013B57C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002D37E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_1005585D8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_10013B57C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002D38FC(uint64_t a1)
{
  return sub_1002D3914(a1, &qword_1005585D0);
}

unint64_t sub_1002D3908(uint64_t a1)
{
  return sub_1002D3914(a1, &qword_1005585C8);
}

unint64_t sub_1002D3914(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain();
    v11 = v10;
    result = sub_10013B57C(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002D3A28(uint64_t a1)
{
  return sub_10013A2B4(a1, &qword_100558598, &qword_1005585A0, (uint64_t (*)(uint64_t))sub_1001461D8);
}

unint64_t sub_1002D3A44(uint64_t a1)
{
  return sub_10013A2B4(a1, &qword_1005585B8, &qword_1005585C0, (uint64_t (*)(uint64_t))sub_1001461D8);
}

unint64_t sub_1002D3A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_1005585A8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    result = sub_10013B57C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002D3B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  char v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000B4C8(&qword_100558590);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_1002FA3C0(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of Lyrics.translationMap()
{
  return sub_1002D37E4((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of LyricsLoader.lyricsOperations()
{
  return sub_1002D3914((uint64_t)_swiftEmptyArrayStorage, &qword_1005585D0);
}

uint64_t variable initialization expression of LyricsLoader.accessQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000DD108(0, (unint64_t *)&qword_1005593F0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v9);
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_10001254C((unint64_t *)&unk_100558250, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_10000B4C8((uint64_t *)&unk_100559400);
  v12 = sub_1002D3E54();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100450F40, v8, v6, v3, 0);
}

unint64_t sub_1002D3E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558260;
  if (!qword_100558260)
  {
    v1 = sub_100011650((uint64_t *)&unk_100559400);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100558260);
  }
  return result;
}

id variable initialization expression of LyricsLoader.operationQueue()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v0, "setMaxConcurrentOperationCount:", 1);
  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.firstLineStartingPosition()
{
  return 60.0;
}

void variable initialization expression of SyncedLyricsViewController.Specs.selectedLinePosition(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x4028000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineSpacing()
{
  return 25.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsTopSpacing()
{
  return 15.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_1002D4AA8(a1, 0.9);
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineDelay()
{
  return 0.05;
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.font()
{
  sub_1000DD108(0, (unint64_t *)&qword_100558268, UIFont_ptr);
  return static UIFont.preferredFont(forTextStyle:weight:)(UIFontTextStyleLargeTitle, UIFontWeightBold);
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsFont()
{
  sub_1000DD108(0, (unint64_t *)&qword_100558268, UIFont_ptr);
  return static UIFont.shortEmphasizedPreferredFont(forTextStyle:)(UIFontTextStyleTitle2);
}

id variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont()
{
  return sub_1002D3FDC((double *)&UIFontWeightBold);
}

id variable initialization expression of SyncedLyricsViewController.Specs.songwritersNamesFont()
{
  return sub_1002D3FDC((double *)&UIFontWeightMedium);
}

id sub_1002D3FDC(double *a1)
{
  return objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 22.0, *a1);
}

double variable initialization expression of SyncedLyricsViewController.Specs.emphasizingScaleRange()
{
  return 1.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor()
{
  return sub_1002D47F8((SEL *)&selRef_labelColor, (uint64_t)&unk_100518F68, (uint64_t)sub_1002D4B80, (uint64_t)&unk_100518F80);
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.35);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.85);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_100518FB8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002D6B1C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100034978;
  v13[3] = &unk_100518FD0;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.4);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_100519008, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002D6B1C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100034978;
  v13[3] = &unk_100519020;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedBackgroundVocalsTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.35);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.85);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_100519058, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002D6B1C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100034978;
  v13[3] = &unk_100519070;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingBackgroundVocalsTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.65);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_1005190A8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002D6B1C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100034978;
  v13[3] = &unk_1005190C0;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedScrollTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.4);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.4);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_1005190F8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002D6B1C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100034978;
  v13[3] = &unk_100519110;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.deselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_1002D4AA8(a1, 0.98);
}

id variable initialization expression of SyncedLyricsViewController.Specs.hiddenTextColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineTapProgressFreezeDuration()
{
  return 0.1;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRadius()
{
  return 5.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRange()
{
  return 0.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientColor()
{
  return sub_1002D47F8((SEL *)&selRef_tintColor, (uint64_t)&unk_100519148, (uint64_t)sub_1002D6B1C, (uint64_t)&unk_100519160);
}

id sub_1002D47F8(SEL *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  _QWORD v19[5];
  uint64_t v20;

  v8 = (void *)objc_opt_self(UIColor);
  v9 = objc_msgSend(v8, "whiteColor");
  v10 = objc_msgSend(v8, *a1);
  v11 = objc_allocWithZone((Class)UIColor);
  v12 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v9;
  v19[4] = a3;
  v20 = v12;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100034978;
  v19[3] = a4;
  v13 = _Block_copy(v19);
  v14 = v20;
  v15 = v10;
  v16 = v9;
  v17 = objc_msgSend(v11, "initWithDynamicProvider:", v13, swift_release(v14).n128_f64[0]);

  _Block_release(v13);
  return v17;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionBackgroundVocalsGradientColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "tintColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.175);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_100519198, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v13[4] = sub_1002D6B1C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100034978;
  v13[3] = &unk_1005191B0;
  v7 = _Block_copy(v13);
  v8 = v14;
  v9 = v4;
  v10 = v2;
  v11 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release(v8).n128_f64[0]);

  _Block_release(v7);
  return v11;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientFeather()
{
  return 30.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.touchDownTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_1002D4AA8(a1, 0.95);
}

CGFloat sub_1002D4AA8@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>)
{
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;

  CGAffineTransformMakeScale(&v6, a2, a2);
  result = v6.a;
  v4 = *(_OWORD *)&v6.c;
  v5 = *(_OWORD *)&v6.tx;
  *a1 = *(_OWORD *)&v6.a;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double variable initialization expression of SyncedLyricsViewController.Specs.vocalGroupWidthCoefficient()
{
  return 0.85;
}

id variable initialization expression of SyncedLyricsViewController.Specs.highlightViewBackgroundColor()
{
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 1.0, 0.08);
}

double variable initialization expression of SyncedLyricsViewController.Specs.highlightViewMargin()
{
  return 16.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakVisualizationMinSeconds()
{
  return 7.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakViewHeight()
{
  return 40.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.syllableLift()
{
  return 2.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineFinishProgressAnimationDuration()
{
  return 0.25;
}

uint64_t sub_1002D4B54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1002D4B80(void *a1)
{
  uint64_t v1;

  return sub_100321858(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1002D4B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002D4B98(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double variable initialization expression of SyncedLyricsViewController.bottomTapAreaHeight()
{
  return Int.seconds.getter(0);
}

void *variable initialization expression of SyncedLyricsViewController.specs@<X0>(void *a1@<X8>)
{
  _BYTE v3[544];

  sub_100321D44(0, 0, v3);
  return memcpy(a1, v3, 0x219uLL);
}

id variable initialization expression of SyncedLyricsViewController.scrollView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
}

id variable initialization expression of SyncedLyricsViewController.tapFeedbackGenerator()
{
  return objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "init");
}

id variable initialization expression of LineProgressGradientView.gradientView()
{
  return sub_1002D5334((void (*)(_QWORD))type metadata accessor for LineProgressGradientView.GradientView);
}

uint64_t variable initialization expression of NoticePresenter._notice@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(type metadata accessor for Notice, a1);
}

__n128 variable initialization expression of NoticePresenter.uiKitConfiguration@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  CGFloat bottom;
  CGFloat trailing;
  __n128 result;
  __n128 v6;

  if (qword_100557EE8 != -1)
    swift_once(&qword_100557EE8, sub_10033834C);
  v2 = static NoticePresenter.defaultEdgePadding;
  v6 = *(__n128 *)&NSDirectionalEdgeInsetsZero.top;
  bottom = NSDirectionalEdgeInsetsZero.bottom;
  trailing = NSDirectionalEdgeInsetsZero.trailing;
  swift_unknownObjectWeakInit(a1, 0);
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v2;
  result = v6;
  *(__n128 *)(a1 + 24) = v6;
  *(CGFloat *)(a1 + 40) = bottom;
  *(CGFloat *)(a1 + 48) = trailing;
  return result;
}

uint64_t variable initialization expression of NoticePresentingModifier._controller()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for NoticePresenter(0);
  v1 = sub_10001254C(&qword_100558270, type metadata accessor for NoticePresenter, (uint64_t)&protocol conformance descriptor for NoticePresenter);
  return EnvironmentObject.init()(v0, v1);
}

double variable initialization expression of ArtistRazzmatazzView._rowHeight()
{
  return 75.0;
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438B50, &qword_100558278, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._colorSchemeContrast@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438B78, (uint64_t *)&unk_100558280, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View.Style.blendMode@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0((uint64_t (*)(_QWORD))&type metadata accessor for BlendMode, a1);
}

uint64_t variable initialization expression of Card.DisplayStyle._displayCornerRadius()
{
  return swift_getKeyPath(&unk_100438BA8);
}

uint64_t sub_1002D4DA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.displayCornerRadius.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1002D4DD0(uint64_t a1)
{
  return EnvironmentValues.displayCornerRadius.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t variable initialization expression of Collaboration.Flow.View._dismiss@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438BD8, &qword_10055EBC0, a1);
}

uint64_t sub_1002D4E10()
{
  return EnvironmentValues.dismiss.getter();
}

double variable initialization expression of Card.ViewController.maxRegularWidth()
{
  return 414.0;
}

uint64_t variable initialization expression of CarouselView.selectedItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = type metadata accessor for Binding(0, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of CarouselView._scrollViewProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._layoutDirection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_100438C08);
  v2 = sub_10000B4C8((uint64_t *)&unk_100558290);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t variable initialization expression of CircularProgressView._state()
{
  return 0;
}

id variable initialization expression of CircularProgressView.trackLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
}

uint64_t variable initialization expression of Collaboration.Management.Model._hasNetworkConnectivity()
{
  _QWORD v1[15];

  static ApplicationCapabilities.shared.getter((uint64_t)v1);
  sub_10015CA48(v1);
  return BYTE1(v1[0]);
}

uint64_t variable initialization expression of Collaboration.Management.Model.$__lazy_storage_$_artworkViewModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10000B4C8((uint64_t *)&unk_10055EC10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of Collaboration.Management.View._dynamicTypeSize@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438C38, &qword_1005582A0, a1);
}

uint64_t variable initialization expression of Collaboration.Management.View._openURL@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438C68, &qword_1005582A8, a1);
}

uint64_t variable initialization expression of PlaylistCurators.View._horizontalSizeClass@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438C98, &qword_1005582B0, a1);
}

uint64_t sub_1002D4FE0()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1002D5000(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;

  sub_10000B4C8(&qword_1005585B0);
  __chkstk_darwin();
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100011370(a1, (uint64_t)v3, &qword_1005585B0);
  return EnvironmentValues.horizontalSizeClass.setter(v3);
}

uint64_t variable initialization expression of Collaboration.Flow.Collaborator.artwork@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0((uint64_t (*)(_QWORD))&type metadata accessor for Artwork, a1);
}

uint64_t variable initialization expression of InlineProfileEditingView.Context._name()
{
  return 0;
}

uint64_t variable initialization expression of InlineProfileEditingView._imagePickerSourceType()
{
  return 1;
}

uint64_t variable initialization expression of MoreLabel._layoutDirection@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438C08, (uint64_t *)&unk_100558290, a1);
}

uint64_t variable initialization expression of MoreLabel._accessibilityShowButtonShapes()
{
  return swift_getKeyPath(&unk_100438CC8);
}

uint64_t variable initialization expression of LoadingView.style()
{
  return 0x10000000000;
}

id variable initialization expression of LoadingView.label()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id variable initialization expression of LoadingView.activityIndicator()
{
  return objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100);
}

uint64_t variable initialization expression of NoticeView._dismiss()
{
  return swift_getKeyPath(&unk_100438CF8);
}

UIFontTextStyle variable initialization expression of SymbolButton.Configuration.symbol@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = UIFontTextStyleSubheadline;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_100438790;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  return UIFontTextStyleSubheadline;
}

UIFontTextStyle SymbolButton.Title.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = UIFontTextStyleSubheadline;
  *(UIFontWeight *)(a1 + 24) = UIFontWeightSemibold;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return UIFontTextStyleSubheadline;
}

double variable initialization expression of SymbolButton.Configuration.material@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.customView@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.symbolToTextSpacing()
{
  return 4.0;
}

double variable initialization expression of SymbolButton.Configuration.minimumSize()
{
  return sub_1002D56C8(&qword_100558158, (uint64_t)&static SymbolButton.Configuration.platterMinimumSize);
}

CGFloat variable initialization expression of SymbolButton.Configuration.contentInsets()
{
  return NSDirectionalEdgeInsetsZero.top;
}

uint64_t variable initialization expression of SymbolButton.Configuration.accessibility()
{
  return 1;
}

uint64_t variable initialization expression of PlayIntentButtonWrapper._playIntentButtonMaterial()
{
  return swift_getKeyPath(&unk_100438D20);
}

char *variable initialization expression of PlayIntentLayoutHelper.playButton()
{
  type metadata accessor for SymbolButton(0);
  return SymbolButton.__allocating_init(intent:)(0);
}

char *variable initialization expression of PlayIntentLayoutHelper.shuffleButton()
{
  type metadata accessor for SymbolButton(0);
  return SymbolButton.__allocating_init(intent:)(1);
}

uint64_t variable initialization expression of PlayIntentLayoutHelper.configuration()
{
  return 513;
}

id variable initialization expression of QRCodeOverlayViewController.backgroundView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
}

id variable initialization expression of QRCodeOverlayViewController.qrCodeView()
{
  return sub_1002D5334((void (*)(_QWORD))type metadata accessor for QRCodeOverlayViewController.ContainerView);
}

id sub_1002D5334(void (*a1)(_QWORD))
{
  a1(0);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
}

id variable initialization expression of QRCodeOverlayViewController.logoView()
{
  NSString v0;
  id v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v1);
  return v2;
}

id variable initialization expression of QRCodeOverlayViewController.titleLabel()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
}

id variable initialization expression of QRCodeOverlayViewController.subtitleLabelEffectView()
{
  id v0;
  id v1;

  if (qword_1005580E0 != -1)
    swift_once(&qword_1005580E0, sub_1003DF154);
  v0 = objc_msgSend((id)objc_opt_self(UIVibrancyEffect), "effectForBlurEffect:", qword_1005635C8);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v0);

  return v1;
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView()
{
  return sub_1002D5580((Class *)UIImageView_ptr);
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.overlayLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
}

uint64_t variable initialization expression of QRCodeOverlayViewController.ImageViewRepresentable._foregroundColor()
{
  return swift_getKeyPath(&unk_100438D48);
}

uint64_t sub_1002D54F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.effectiveForegroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of Reactions.StackView._colorScheme@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002D552C((uint64_t)&unk_100438D78, &qword_100558318, a1);
}

uint64_t sub_1002D552C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = swift_getKeyPath(a1);
  v5 = sub_10000B4C8(a2);
  return swift_storeEnumTagMultiPayload(a3, v5, 0);
}

id variable initialization expression of SliderView.stackView()
{
  return sub_1002D5580((Class *)UIStackView_ptr);
}

id variable initialization expression of SliderView.remainingTrack()
{
  return sub_1002D5580((Class *)UIView_ptr);
}

id sub_1002D5580(Class *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(objc_allocWithZone(*a1), "init");
  v2 = UIView.forAutolayout.getter();

  return v2;
}

id variable initialization expression of SliderView.feedbackGenerator()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "initWithStyle:", 0);
}

id variable initialization expression of SliderView.trackLayoutGuide()
{
  return objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
}

id variable initialization expression of SliderView.elapsedTrackColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
}

id variable initialization expression of SliderView.remainingTrackColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
}

id variable initialization expression of SliderView.trackingColor()
{
  if (qword_100557D60 != -1)
    swift_once(&qword_100557D60, sub_1002EE010);
  return (id)static UIColor.MusicTint.normal;
}

double variable initialization expression of SymbolButton.hitRectMinimumSize()
{
  return sub_1002D56C8(&qword_100558160, (uint64_t)&static SymbolButton.Configuration.hitRectMinimumSize);
}

double sub_1002D56C8(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

id variable initialization expression of SymbolButton.containerView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIView), "init");
}

id variable initialization expression of SymbolButton.materialView()
{
  objc_class *v0;
  id v1;
  objc_super v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = 1;
  v0 = (objc_class *)type metadata accessor for SymbolButton.MaterialView();
  v5 = 0u;
  v6 = 0u;
  v7 = 0;
  v3.receiver = objc_allocWithZone(v0);
  v3.super_class = v0;
  v1 = objc_msgSendSuper2(&v3, "initWithEffect:", 0);
  sub_1003FA6B0((uint64_t)&v4);

  return v1;
}

id variable initialization expression of SymbolButton.backgroundView()
{
  double v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _BYTE v6[24];

  if (qword_100558138 != -1)
    swift_once(&qword_100558138, sub_1003F5478);
  swift_beginAccess(&static SymbolButton.Background.clear, v6, 0, 0);
  v0 = *(double *)&static SymbolButton.Background.clear;
  v1 = (void *)qword_100563758;
  v2 = qword_100563760;
  v3 = qword_100563768;
  objc_allocWithZone((Class)type metadata accessor for SymbolButton.BackgroundView());
  swift_bridgeObjectRetain();
  v4 = v1;
  return sub_1003FAA9C(v1, v0, v2, v3);
}

uint64_t variable initialization expression of SymbolButton.$__lazy_storage_$_metrics@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(type metadata accessor for SymbolButton.Metrics, a1);
}

double variable initialization expression of SymbolButton.Update.animationOptions()
{
  return 0.0;
}

double variable initialization expression of SymbolButton.Update.AnimationOptions.relativeStartTime()
{
  return 0.0;
}

UIFontTextStyle variable initialization expression of SymbolButton.Symbol.style()
{
  return UIFontTextStyleSubheadline;
}

uint64_t variable initialization expression of SymbolButton.Symbol.weight()
{
  return 6;
}

uint64_t variable initialization expression of SymbolButton.Symbol.offset()
{
  return 0;
}

UIFontWeight variable initialization expression of SymbolButton.Title.weight()
{
  return UIFontWeightSemibold;
}

CGFloat variable initialization expression of SymbolButton.CustomView.insets()
{
  return UIEdgeInsetsZero.top;
}

double variable initialization expression of VerticalToggleSlider.packageDefinition@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

float variable initialization expression of VerticalToggleSlider.minLevelOffsetRatio()
{
  double v0;

  if (qword_1005581C8 != -1)
    swift_once(&qword_1005581C8, sub_1004104F8);
  v0 = *((double *)&xmmword_100560AC8 + 1);
  if (qword_1005581B8 != -1)
    swift_once(&qword_1005581B8, sub_1004104D0);
  return 1.0 / v0 * *(double *)&qword_100560AB0;
}

uint64_t variable initialization expression of VerticalToggleSlider.growAnchorPoint()
{
  return 8;
}

float variable initialization expression of VerticalToggleSlider.internalValueRange()
{
  return 0.0;
}

float variable initialization expression of VerticalToggleSlider._maxValue()
{
  return 1.0;
}

float variable initialization expression of VerticalToggleSlider._minValue()
{
  return 0.0;
}

id variable initialization expression of VerticalToggleSlider.blurEffect()
{
  if (qword_1005581A0 != -1)
    swift_once(&qword_1005581A0, sub_10040F34C);
  return objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithBlurRadius:", *(double *)&qword_100560A80);
}

double variable initialization expression of VerticalToggleSlider.shapeChange()
{
  if (qword_1005581A8 != -1)
    swift_once(&qword_1005581A8, sub_10040FC94);
  return *(double *)&xmmword_100560A88;
}

void variable initialization expression of VerticalToggleSlider.growTransform(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

id variable initialization expression of WaveformPlayIndicator.colorPalette()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "tintColor");
  v2 = objc_msgSend(v0, "labelColor");
  v3 = objc_msgSend(v2, "colorWithAlphaComponent:", 0.35);

  v4 = objc_msgSend(v0, "labelColor");
  v5 = objc_msgSend(v4, "colorWithAlphaComponent:", 0.2);

  v6 = objc_msgSend(v0, "labelColor");
  v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.6);

  return v1;
}

id variable initialization expression of WaveformPlayIndicator.waveform()
{
  return objc_msgSend((id)objc_opt_self(MRUWaveformData), "zero");
}

uint64_t variable initialization expression of WaveformPlayIndicator.cannedAnimationAsset()
{
  uint64_t v0;

  v0 = type metadata accessor for BouncyBarsAsset();
  swift_allocObject(v0, 56, 7);
  return sub_100416C74();
}

NSNumber sub_1002D5BC8()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_1002D5BD0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1002D5C20(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1002D5C74(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL sub_1002D5C98(double *a1, double *a2)
{
  return *a1 == *a2;
}

double sub_1002D5CAC@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_1002D5CB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100558580, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10043914C);
  v3 = sub_10001254C(&qword_100558588, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004390EC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D5D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100558570, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004392A4);
  v3 = sub_10001254C(&qword_100558578, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100439244);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D5DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_10001254C(&qword_100558558, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004393FC);
  v3 = sub_10001254C(&qword_100558560, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10043939C);
  v4 = sub_1002D67B4();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_1002D5E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100558678, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_10043A05C);
  v3 = sub_10001254C(&qword_100558680, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100439FFC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D5EE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C((unint64_t *)&qword_100558698, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_10043A130);
  v3 = sub_10001254C((unint64_t *)&unk_1005586A0, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100439DC4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D5F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100558688, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_10043A0EC);
  v3 = sub_10001254C(&qword_100558690, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100439ED8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D5FEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_100558538, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_10043998C);
  v3 = sub_10001254C((unint64_t *)&unk_100558540, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_10043992C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D6070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001254C(&qword_10055F270, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_100439BFC);
  v3 = sub_10001254C(&qword_100558550, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_1004395C4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002D60F4()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_1002D60FC()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_1002D612C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

__n128 initializeWithCopy for VerticalToggleSlider.ShapeChange(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583B8, (uint64_t)&unk_100519368);
}

void type metadata accessor for KeyframeAnimationOptions(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583C0, (uint64_t)&unk_100519398);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583C8, (uint64_t)&unk_1005193C0);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583D0, (uint64_t)&unk_1005193E0);
}

void _s3__C7CGColorCMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583D8, (uint64_t)&unk_100519410);
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583E0, (uint64_t)&unk_100519440);
}

void _s3__C6CTLineCMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583E8, (uint64_t)&unk_100519468);
}

void _s3__C7CTFrameCMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583F0, (uint64_t)&unk_100519498);
}

void type metadata accessor for CTFramesetter(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005583F8, (uint64_t)&unk_1005194C8);
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558400, (uint64_t)&unk_1005194F8);
}

__n128 initializeWithTake for Artwork.Content(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void _s3__C8_NSRangeVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558408, (uint64_t)&unk_100519570);
}

__n128 _s11PlaceholderVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void _s3__C17CGAffineTransformVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558410, (uint64_t)&unk_1005195F0);
}

void type metadata accessor for UIAxis(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558418, (uint64_t)&unk_100519628);
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558420, (uint64_t)&unk_100519650);
}

void _s3__C7CGPointVMa_1(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558428, (uint64_t)&unk_1005196D0);
}

void _s3__C6CGSizeVMa_2(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558430, (uint64_t)&unk_100519750);
}

void type metadata accessor for InfoKey(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558438, (uint64_t)&unk_100519778);
}

void _s3__C6CGRectVMa_1(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558440, (uint64_t)&unk_1005197F8);
}

void type metadata accessor for UIOffset(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558448, (uint64_t)&unk_100519878);
}

void type metadata accessor for SymbolScale(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558450, (uint64_t)&unk_1005198A0);
}

void type metadata accessor for SymbolWeight(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558458, (uint64_t)&unk_1005198C0);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558460, (uint64_t)&unk_1005198E0);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558468, (uint64_t)&unk_100519908);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558470, (uint64_t)&unk_100519930);
}

void _s3__C23NSDirectionalEdgeInsetsVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558478, (uint64_t)&unk_1005199B0);
}

uint64_t sub_1002D63C0()
{
  return sub_10001254C(&qword_100558480, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004390B0);
}

uint64_t sub_1002D63EC()
{
  return sub_10001254C(&qword_100558488, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100439084);
}

uint64_t sub_1002D6418()
{
  return sub_10001254C(&qword_100558490, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100439120);
}

uint64_t sub_1002D6444()
{
  return sub_10001254C(&qword_100558498, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100439208);
}

uint64_t sub_1002D6470()
{
  return sub_10001254C(&qword_1005584A0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004391DC);
}

uint64_t sub_1002D649C()
{
  return sub_10001254C(&qword_1005584A8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100439278);
}

uint64_t sub_1002D64C8()
{
  return sub_10001254C(&qword_1005584B0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100439360);
}

uint64_t sub_1002D64F4()
{
  return sub_10001254C(&qword_1005584B8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100439334);
}

uint64_t sub_1002D6520()
{
  return sub_10001254C(&qword_1005584C0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004393D0);
}

uint64_t sub_1002D654C()
{
  return sub_10001254C(&qword_1005584C8, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_100439588);
}

uint64_t sub_1002D6578()
{
  return sub_10001254C(&qword_1005584D0, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_10043955C);
}

uint64_t sub_1002D65A4()
{
  return sub_10001254C(&qword_1005584D8, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_1004396E0);
}

uint64_t sub_1002D65D0()
{
  return sub_10001254C(&qword_1005584E0, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_1004396AC);
}

uint64_t sub_1002D65FC()
{
  return sub_10001254C(&qword_1005584E8, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_10043970C);
}

uint64_t sub_1002D6628()
{
  return sub_10001254C(&qword_1005584F0, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_100439748);
}

uint64_t sub_1002D6654()
{
  return sub_10001254C(&qword_1005584F8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004398F0);
}

uint64_t sub_1002D6680()
{
  return sub_10001254C(&qword_100558500, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004398C4);
}

uint64_t sub_1002D66AC()
{
  return sub_10001254C(&qword_100558508, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100439960);
}

uint64_t sub_1002D66D8()
{
  return sub_10001254C(&qword_100558510, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100439A8C);
}

uint64_t sub_1002D6704()
{
  return sub_10001254C(&qword_100558518, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100439A58);
}

uint64_t sub_1002D6730()
{
  return sub_10001254C(&qword_100558520, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100439AB8);
}

uint64_t sub_1002D675C()
{
  return sub_10001254C(&qword_100558528, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100439AF4);
}

uint64_t sub_1002D6788()
{
  return sub_10001254C(&qword_100558530, (uint64_t (*)(uint64_t))type metadata accessor for InfoKey, (uint64_t)&unk_1004395F8);
}

unint64_t sub_1002D67B4()
{
  unint64_t result;

  result = qword_100558568;
  if (!qword_100558568)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100558568);
  }
  return result;
}

uint64_t sub_1002D67F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_1005585E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002D6840(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_1005585E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_1005585F8, (uint64_t)&unk_1005199E0);
}

void _s3__C25OpenExternalURLOptionsKeyVMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558600, (uint64_t)&unk_100519A08);
}

void type metadata accessor for CTParagraphStyle(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558608, (uint64_t)&unk_100519A30);
}

void _s3__C5CTRunCMa_0(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558610, (uint64_t)&unk_100519A60);
}

void _s3__C3KeyVMa_1(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558618, (uint64_t)&unk_100519A90);
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558620, (uint64_t)&unk_100519B10);
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
  sub_1000AF65C(a1, &qword_100558628, (uint64_t)&unk_100519B38);
}

uint64_t sub_1002D690C()
{
  return sub_10001254C(&qword_100558630, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100439D88);
}

uint64_t sub_1002D6938()
{
  return sub_10001254C(&qword_100558638, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100439D5C);
}

uint64_t sub_1002D6964()
{
  return sub_10001254C(&qword_100558640, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100439E9C);
}

uint64_t sub_1002D6990()
{
  return sub_10001254C(&qword_100558648, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100439E70);
}

uint64_t sub_1002D69BC()
{
  return sub_10001254C(&qword_100558650, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100439FC0);
}

uint64_t sub_1002D69E8()
{
  return sub_10001254C(&qword_100558658, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100439F94);
}

uint64_t sub_1002D6A14()
{
  return sub_10001254C(&qword_100558660, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_10043A030);
}

uint64_t sub_1002D6A40()
{
  return sub_10001254C(&qword_100558668, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_0, (uint64_t)&unk_100439F0C);
}

uint64_t sub_1002D6A6C()
{
  return sub_10001254C(&qword_100558670, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100439DF8);
}

void Card.ViewController.hostingController.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t Artwork.caching.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100011370(v1, a1, &qword_100558830);
}

uint64_t Artwork.caching.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10007B328(a1, v1, &qword_100558830);
}

void *Artwork.content.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  sub_1002D6B94(v1, *(void **)(v0 + 32));
  return v1;
}

id sub_1002D6B94(id result, void *a2)
{
  id v2;

  if (a2)
  {
    v2 = result;
    return a2;
  }
  return result;
}

void Artwork.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002D6BF4(*(void **)(v2 + 24), *(void **)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
}

void sub_1002D6BF4(void *a1, void *a2)
{
  if (a2)
  {

  }
}

uint64_t Artwork.decoration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_10000D964(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Artwork.Decoration);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  return sub_10001133C(a1, qword_100558940, (uint64_t)&nominal type descriptor for Artwork);
}

uint64_t type metadata accessor for Artwork.Decoration(uint64_t a1)
{
  return sub_10001133C(a1, qword_100558B10, (uint64_t)&nominal type descriptor for Artwork.Decoration);
}

uint64_t Artwork.decoration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Artwork(0) + 24);
  return sub_1002D6CB4(a1, v3);
}

uint64_t sub_1002D6CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork.Decoration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

CFRange (__swiftcall *Artwork.decoration.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork(0);
  return CFRange.init(_:);
}

uint64_t Artwork.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_100011370(v1 + *(int *)(v3 + 28), a1, &qword_100558838);
}

uint64_t Artwork.placeholder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 28), &qword_100558838);
}

CFRange (__swiftcall *Artwork.placeholder.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork(0);
  return CFRange.init(_:);
}

uint64_t Artwork.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Artwork(0) + 32));
}

uint64_t Artwork.size.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = type metadata accessor for Artwork(0);
  v10 = v4 + *(int *)(result + 32);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 24) = a4;
  return result;
}

CFRange (__swiftcall *Artwork.size.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork(0);
  return CFRange.init(_:);
}

double Artwork.init()@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  double result;

  v2 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = (_QWORD *)(a1 + v2[6]);
  v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v5 = (char *)v3 + v4[5];
  v6 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[6];
  *(_QWORD *)((char *)v3 + v7) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)v3 + v4[7]) = 1;
  v8 = (_OWORD *)(a1 + v2[7]);
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  v9 = a1 + v2[8];
  result = 0.0;
  *(_OWORD *)v9 = xmmword_1004387A0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

uint64_t static Artwork.with(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  _QWORD *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  v4 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = (_QWORD *)(a2 + v4[6]);
  v6 = (int *)type metadata accessor for Artwork.Decoration(0);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  v7 = (char *)v5 + v6[5];
  v8 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v6[6];
  *(_QWORD *)((char *)v5 + v9) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)v5 + v6[7]) = 1;
  v10 = (_OWORD *)(a2 + v4[7]);
  v10[1] = 0u;
  v10[2] = 0u;
  *v10 = 0u;
  v11 = a2 + v4[8];
  *(_OWORD *)v11 = xmmword_1004387A0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 24) = 0;
  return a1(a2);
}

char *sub_1002D7068()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  char *v4;
  uint64_t v6;

  __chkstk_darwin();
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D964(v0, (uint64_t)v2, type metadata accessor for Artwork);
  v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.View(0));
  v4 = Artwork.View.init(configuration:)((uint64_t)v2);
  sub_10001254C(&qword_1005588E0, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
  return v4;
}

uint64_t sub_1002D7110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000D964(v1, a1, type metadata accessor for Artwork);
}

char *Artwork.View.__allocating_init(configuration:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Artwork.View.init(configuration:)(a1);
}

char *Artwork.View.init(configuration:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v27;
  _QWORD v28[5];
  objc_super v29;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v6 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  v7 = objc_allocWithZone((Class)UIImageView);
  v8 = v1;
  *(_QWORD *)&v1[v6] = objc_msgSend(v7, "init");
  v9 = &v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  sub_10000D964(a1, (uint64_t)&v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], type metadata accessor for Artwork);

  v29.receiver = v8;
  v29.super_class = ObjectType;
  v10 = (char *)objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v10, "setContentMode:", 4);
  v11 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  v12 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "layer");
  objc_msgSend(v12, "setMinificationFilter:", kCAFilterTrilinear);

  v13 = objc_msgSend(*(id *)&v10[v11], "layer");
  objc_msgSend(v13, "setMagnificationFilter:", kCAFilterTrilinear);

  v14 = *(void **)&v10[v11];
  objc_msgSend(v14, "setContentMode:", 2);
  objc_msgSend(v14, "setClipsToBounds:", 1);
  objc_msgSend(v14, "setAccessibilityIgnoresInvertColors:", 1);
  objc_msgSend(v10, "addSubview:", v14);
  v15 = a1 + *(int *)(type metadata accessor for Artwork(0) + 28);
  v16 = *(void **)(v15 + 24);
  if (v16)
  {
    v17 = *(void **)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (v17)
    {
      v18 = *(void **)v15;
      v19 = *(void **)(v15 + 8);
      v20 = *(void **)(v15 + 16);
      v21 = *(_QWORD *)(v15 + 32);
      v22 = *(_QWORD *)(v15 + 40);
      v27 = *(_QWORD *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8];
      v23 = swift_getObjectType();
      v28[3] = &type metadata for Artwork.Placeholder;
      v28[4] = sub_1002DB588();
      v24 = (_QWORD *)swift_allocObject(&unk_100519D50, 64, 7);
      v28[0] = v24;
      v24[2] = v18;
      v24[3] = v19;
      v24[4] = v20;
      v24[5] = v16;
      v24[6] = v21;
      v24[7] = v22;
      sub_1002DB5D4(v18, v19, v20, v16);
      sub_1002DB5D4(v18, v19, v20, v16);
      v25 = v17;
      dispatch thunk of UIContentView.configuration.setter(v28, v23, v27);
      sub_1002DB618(v18, v19, v20, v16);

    }
  }
  sub_1002D81D8();
  sub_1002D7DAC();

  sub_10000E750(a1, type metadata accessor for Artwork);
  return v10;
}

uint64_t Artwork.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10000D964(v3, a1, type metadata accessor for Artwork);
}

uint64_t Artwork.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  _QWORD v29[5];
  _BYTE v30[24];

  v2 = v1;
  v4 = type metadata accessor for Artwork(0);
  __chkstk_darwin();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v23 - v7;
  __chkstk_darwin();
  v10 = (char *)&v23 - v9;
  v11 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v30, 0, 0);
  sub_10000D964(v11, (uint64_t)v10, type metadata accessor for Artwork);
  swift_beginAccess(v11, v29, 33, 0);
  sub_1002DB714(a1, v11);
  swift_endAccess(v29);
  sub_10000D964(v11, (uint64_t)v8, type metadata accessor for Artwork);
  v12 = _s11MusicCoreUI7ArtworkV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v10);
  sub_10000E750((uint64_t)v8, type metadata accessor for Artwork);
  if ((v12 & 1) == 0)
  {
    sub_10000D964(v11, (uint64_t)v6, type metadata accessor for Artwork);
    v13 = &v6[*(int *)(v4 + 28)];
    v14 = (void *)*((_QWORD *)v13 + 3);
    if (v14 && *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView))
    {
      v15 = *(void **)v13;
      v16 = (void *)*((_QWORD *)v13 + 1);
      v17 = (void *)*((_QWORD *)v13 + 2);
      v18 = *((_QWORD *)v13 + 4);
      v19 = *((_QWORD *)v13 + 5);
      v25 = *(id *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView);
      v26 = v18;
      v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8);
      ObjectType = swift_getObjectType();
      v29[3] = &type metadata for Artwork.Placeholder;
      v29[4] = sub_1002DB588();
      v20 = (_QWORD *)swift_allocObject(&unk_100519D50, 64, 7);
      v29[0] = v20;
      v20[2] = v15;
      v20[3] = v16;
      v20[4] = v17;
      v20[5] = v14;
      v20[6] = v26;
      v20[7] = v19;
      v24 = v17;
      sub_1002DB5D4(v15, v16, v17, v14);
      sub_1002DB5D4(v15, v16, v17, v14);
      v21 = v25;
      dispatch thunk of UIContentView.configuration.setter(v29, ObjectType, v28);
      sub_1002DB618(v15, v16, v24, v14);

    }
    sub_1002D81D8();
    sub_1002D7DAC();
    sub_10000E750((uint64_t)v6, type metadata accessor for Artwork);
  }
  sub_10000E750(a1, type metadata accessor for Artwork);
  return sub_10000E750((uint64_t)v10, type metadata accessor for Artwork);
}

void (*Artwork.View.typedConfiguration.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v6, v3, 0, 0);
  sub_10000D964(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_1002D7814;
}

void sub_1002D7814(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    sub_10000D964(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v3, type metadata accessor for Artwork);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_10000E750((uint64_t)v4, type metadata accessor for Artwork);
  }
  else
  {
    Artwork.View.typedConfiguration.setter(*(_QWORD *)(*(_QWORD *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v2);
}

id Artwork.View.currentImage.getter()
{
  uint64_t v0;

  return objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                               + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView), "image"));
}

uint64_t Artwork.View.imageDidChangeHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler, v4, 0, 0);
  v2 = *v1;
  sub_1000DB0D8(*v1, v1[1]);
  return v2;
}

uint64_t Artwork.View.imageDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_1000DB26C(v6, v7);
}

uint64_t (*Artwork.View.imageDidChangeHandler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Void __swiftcall Artwork.View.layoutSubviews()()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  uint64_t v13;
  double MaxY;
  double MaxX;
  void *v16;
  void *v17;
  char *v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v31.receiver = v0;
  v31.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v31, "layoutSubviews");
  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  objc_msgSend(v0, "bounds");
  v6.n128_u64[0] = v5;
  v8.n128_u64[0] = v7;
  v9 = Artwork.View.fittingImageSize(in:)(v6, v8);
  v11 = v10;
  v12 = (char *)objc_msgSend(v0, "contentMode") - 4;
  v13 = 3;
  switch((unint64_t)v12)
  {
    case 0uLL:
      break;
    case 1uLL:
      v13 = 1;
      break;
    case 2uLL:
      objc_msgSend(v0, "bounds");
      MaxY = CGRectGetMaxY(v32);
      v33.origin.x = v2;
      v33.origin.y = v4;
      v33.size.width = v9;
      v33.size.height = v11;
      v4 = MaxY - CGRectGetHeight(v33);
      v13 = 1;
      break;
    case 3uLL:
      goto LABEL_6;
    case 4uLL:
      objc_msgSend(v0, "bounds");
      MaxX = CGRectGetMaxX(v34);
      v35.origin.x = v2;
      v35.origin.y = v4;
      v35.size.width = v9;
      v35.size.height = v11;
      v2 = MaxX - CGRectGetWidth(v35);
LABEL_6:
      v13 = 2;
      break;
    default:
      v13 = 0;
      break;
  }
  v16 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  CGRect.centeringAlong(axes:in:)(v13, v2, v4, v9, v11);
  objc_msgSend(v16, "setFrame:");
  v17 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v17)
    objc_msgSend(v17, "setFrame:", v2, v4, v9, v11);
  v18 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  v19 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  v20 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 8];
  v21 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 16];
  v22 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 24];
  objc_msgSend(v0, "bounds");
  v37.origin.x = v23;
  v37.origin.y = v24;
  v37.size.width = v25;
  v37.size.height = v26;
  v36.origin.x = v19;
  v36.origin.y = v20;
  v36.size.width = v21;
  v36.size.height = v22;
  if (!CGRectEqualToRect(v36, v37))
  {
    objc_msgSend(v0, "bounds");
    *(_QWORD *)v18 = v27;
    *((_QWORD *)v18 + 1) = v28;
    *((_QWORD *)v18 + 2) = v29;
    *((_QWORD *)v18 + 3) = v30;
    sub_1002D7DAC();
  }
  sub_1002D81D8();
}

double Artwork.View.fittingImageSize(in:)(__n128 a1, __n128 a2)
{
  char *v2;
  double v3;
  double v4;
  id v5;
  double v6;
  void *v7;
  uint64_t v8;
  char v9;
  char v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  double v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  double v33;
  double v34;

  v3 = a2.n128_f64[0];
  v4 = a1.n128_f64[0];
  if (a1.n128_f64[0] == 0.0 && a2.n128_f64[0] == 0.0)
  {
    v5 = objc_msgSend(v2, "artworkCatalog");
    v6 = 0.0;
    if (v5)
    {
      v7 = v5;
      *(double *)&v8 = COERCE_DOUBLE(MPArtworkCatalog.originalSize.getter());
      v10 = v9;

      if ((v10 & 1) == 0)
        return *(double *)&v8;
    }
    return v6;
  }
  v11 = CGSize.aspectRatio.getter(a1, a2);
  v12 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "image");
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, "size");
    v15 = v14;
    v17 = v16;

  }
  else
  {
    v25 = objc_msgSend(v2, "artworkCatalog");
    if (!v25)
      return v4;
    v26 = v25;
    v27 = MPArtworkCatalog.originalSize.getter();
    v29 = v28;
    v31 = v30;

    if ((v31 & 1) != 0)
      return v4;
    v15 = v27;
    v17 = v29;
  }
  v18.n128_u64[0] = v15;
  v19.n128_u64[0] = v17;
  v33 = v11;
  v34 = CGSize.aspectRatio.getter(v18, v19);
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(&v34, &v33) & 1) == 0)
    return v4;
  v20.n128_u64[0] = v15;
  v21.n128_u64[0] = v17;
  if (vabdd_f64(v11, CGSize.aspectRatio.getter(v20, v21)) <= 0.1)
    return v4;
  v22.n128_u64[0] = v15;
  v23.n128_u64[0] = v17;
  v24 = CGSize.aspectRatio.getter(v22, v23);
  if (v24 <= 1.0)
  {
    v6 = v24 * v3;
    if (v24 * v3 > v4)
      return v4;
  }
  else
  {
    v6 = v4;
    if (v4 / v24 > v3)
      return v24 * v3;
  }
  return v6;
}

void sub_1002D7DAC()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  char v7;
  double v8;
  double v9;
  void *v10;
  id v11;
  id v12;
  NSString v13;
  uint64_t v14;
  id v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  char v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = objc_msgSend(v0, "artworkCatalog");
  v4 = (uint64_t)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v48, 32, 0);
  if (*(_QWORD *)(v4 + 32))
  {
    v5 = *(void **)(v4 + 32);
    v6 = v5;
  }
  else
  {
    v5 = 0;
  }
  swift_endAccess(v48);
  v7 = Optional<A>.isArtworkVisuallyIdentical(to:)((uint64_t)v5, (unint64_t)v3);

  if ((v7 & 1) == 0)
  {
    objc_msgSend(v1, "clearArtworkCatalogs");
    sub_1002D8E3C(0);
  }
  objc_msgSend(v1, "bounds");
  if (v9 == 0.0 && v8 == 0.0 || (v10 = *(void **)(v4 + 32)) == 0)
  {
    sub_1002D8E3C(0);
    objc_msgSend(v1, "setNeedsLayout");
    return;
  }
  sub_100011370(v4, (uint64_t)v48, &qword_100558830);
  sub_100011370((uint64_t)v48, (uint64_t)&v45, &qword_100558830);
  if (v46)
  {
    v11 = v10;
    swift_bridgeObjectRetain();
    sub_1002DC148((uint64_t)&v45);
  }
  else
  {
    v12 = v10;
    sub_100011694((uint64_t)&v45, &qword_100558830);
  }
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100011370((uint64_t)v48, (uint64_t)&v45, &qword_100558830);
  if (v46)
  {
    v14 = swift_weakLoadStrong(&v47);
    sub_1002DC148((uint64_t)&v45);
  }
  else
  {
    sub_100011694((uint64_t)&v45, &qword_100558830);
    v14 = 0;
  }
  objc_msgSend(v10, "setCacheIdentifier:forCacheReference:", v13, v14);

  v15 = objc_msgSend(v1, "traitCollection", swift_unknownObjectRelease(v14).n128_f64[0]);
  objc_msgSend(v15, "displayScale");
  v17 = v16;

  objc_msgSend(v10, "setDestinationScale:", v17);
  v18 = v4 + *(int *)(type metadata accessor for Artwork(0) + 32);
  v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    objc_msgSend(v1, "bounds");
    v21 = v20;
    v23 = v22;
  }
  else
  {
    v24 = *(_QWORD *)(v18 + 16);
    v25 = *(_QWORD *)v18;
    v26 = *(_BYTE *)(v18 + 24);
    objc_msgSend(v1, "bounds");
    v28 = v27;
    v30 = v29;
    sub_1002DA040(v27, v29, v25, v19);
    v21 = v31;
    sub_1002DA040(v28, v30, v24, v26);
    v23 = v32;
  }
  objc_msgSend(v10, "setFittingSize:", v21, v23);
  objc_msgSend(v10, "setRenderHint:", (unint64_t)objc_msgSend(v10, "renderHint") | 1);
  v33 = objc_msgSend(v1, "artworkCatalog");
  if (v33)
  {
    v34 = v33;
    objc_msgSend(v33, "scaledFittingSize");
    v36 = v35;
    v38 = v37;

    objc_msgSend(v10, "scaledFittingSize");
    if (v36 == v40 && v38 == v39)
    {
      v41 = objc_msgSend(v1, "artworkCatalog");

      if (v41)
      {
        sub_100011694((uint64_t)v48, &qword_100558830);

        return;
      }
    }
  }
  else
  {
    objc_msgSend(v10, "scaledFittingSize");
  }
  MPArtworkCatalog.expectedRatio.getter();
  if ((v42 & 1) == 0)
    objc_msgSend(v1, "setNeedsLayout");
  v45 = v1;
  v43 = swift_allocObject(&unk_100519F88, 32, 7);
  *(_QWORD *)(v43 + 16) = v10;
  *(_QWORD *)(v43 + 24) = ObjectType;
  v44 = v10;
  MPArtworkCatalog.setDestination<A>(_:for:completion:)((uint64_t)&v45, 1, (uint64_t)sub_1002DD40C, v43, ObjectType);

  swift_release(v43);
  sub_100011694((uint64_t)v48, &qword_100558830);
}

uint64_t sub_1002D81D8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL8 v34;
  id v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, int *);
  char *v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  id v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, int *);
  int v87;
  char *v88;
  uint64_t (*v89)(uint64_t *, uint64_t, int *);
  char v90[32];

  v1 = v0;
  sub_10000B4C8(&qword_100558B70);
  __chkstk_darwin();
  v77 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v78 = (uint64_t *)((char *)&v76 - v3);
  __chkstk_darwin();
  v85 = (char *)&v76 - v4;
  __chkstk_darwin();
  v83 = (char *)&v76 - v5;
  __chkstk_darwin();
  v81 = (uint64_t *)((char *)&v76 - v6);
  __chkstk_darwin();
  v84 = (char *)&v76 - v7;
  __chkstk_darwin();
  v89 = (uint64_t (*)(uint64_t *, uint64_t, int *))((char *)&v76 - v8);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v76 - v9);
  __chkstk_darwin();
  v12 = (char *)&v76 - v11;
  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  v76 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v82 = (uint64_t)&v76 - v14;
  __chkstk_darwin();
  v79 = (uint64_t)&v76 - v15;
  __chkstk_darwin();
  v17 = (char *)&v76 - v16;
  v18 = (int *)type metadata accessor for Artwork.Decoration(0);
  v19 = *((_QWORD *)v18 - 1);
  __chkstk_darwin();
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v23 = (char *)&v76 - v22;
  v80 = *(id *)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  objc_msgSend(v80, "frame");
  v25 = v24;
  v27 = v26;
  v28 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v90, 0, 0);
  v29 = (uint64_t)&v28[*(int *)(type metadata accessor for Artwork(0) + 24)];
  v88 = v23;
  sub_10000D964(v29, (uint64_t)v23, type metadata accessor for Artwork.Decoration);
  v30 = *(_QWORD *)(v29 + v18[7]);
  if ((v30 & 1) != 0 && v25 < v27)
  {
    sub_10000D964((uint64_t)v88, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
    v31 = (uint64_t)v89;
LABEL_6:
    sub_100011370((uint64_t)&v21[v18[5]], (uint64_t)v17, &qword_100560490);
    sub_10000E750((uint64_t)v21, type metadata accessor for Artwork.Decoration);
    v32 = type metadata accessor for UIView.Corner(0);
    v33 = 1;
    v34 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v17, 1, v32) != 1;
    sub_100011694((uint64_t)v17, &qword_100560490);
    objc_msgSend(v1, "setClipsToBounds:", v34);
    v35 = *(id *)&v88[v18[6]];
    goto LABEL_8;
  }
  sub_10000D964((uint64_t)v88, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
  v31 = (uint64_t)v89;
  if ((v30 & 2) != 0 && v27 < v25)
    goto LABEL_6;
  sub_10000E750((uint64_t)v21, type metadata accessor for Artwork.Decoration);
  objc_msgSend(v1, "setClipsToBounds:", 0);
  v35 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v33 = 0;
LABEL_8:
  objc_msgSend(v1, "setBackgroundColor:", v35);

  if (v33)
  {
    sub_10000D964((uint64_t)v88, (uint64_t)v12, type metadata accessor for Artwork.Decoration);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v19 + 56);
    v37 = v12;
    v38 = 0;
  }
  else
  {
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v19 + 56);
    v37 = v12;
    v38 = 1;
  }
  v86 = v36;
  v36((uint64_t)v37, v38, 1, v18);
  sub_100011370((uint64_t)v12, (uint64_t)v10, &qword_100558B70);
  v89 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v19 + 48);
  v39 = v89(v10, 1, v18);
  v87 = v33;
  if (v39 == 1)
  {
    v40 = v1;
    sub_100011694((uint64_t)v10, &qword_100558B70);
    v41 = 0;
    LOBYTE(v42) = 0;
    v43 = 0;
  }
  else
  {
    v41 = *v10;
    v42 = v10[1];
    v43 = (void *)v10[2];
    v44 = v43;
    v45 = v1;
    sub_10000E750((uint64_t)v10, type metadata accessor for Artwork.Decoration);
  }
  v46 = (uint64_t)v84;
  UIView.border.setter(v41, v42, v43);
  sub_100011370((uint64_t)v12, v31, &qword_100558B70);
  if (v89((uint64_t *)v31, 1, v18) == 1)
  {
    sub_100011694(v31, &qword_100558B70);
    v47 = type metadata accessor for UIView.Corner(0);
    v48 = v79;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v79, 1, 1, v47);
  }
  else
  {
    v48 = v79;
    sub_100011370(v31 + v18[5], v79, &qword_100560490);
    sub_10000E750(v31, type metadata accessor for Artwork.Decoration);
  }
  v49 = (uint64_t)v85;
  v50 = (uint64_t)v83;
  v51 = v81;
  UIView.corner.setter(v48);

  sub_100011694((uint64_t)v12, &qword_100558B70);
  if ((v87 & 1) != 0)
  {
    v52 = 1;
  }
  else
  {
    sub_10000D964((uint64_t)v88, v46, type metadata accessor for Artwork.Decoration);
    v52 = 0;
  }
  v86(v46, v52, 1, v18);
  sub_100011370(v46, (uint64_t)v51, &qword_100558B70);
  if (v89(v51, 1, v18) == 1)
  {
    v53 = v80;
    v54 = v80;
    sub_100011694((uint64_t)v51, &qword_100558B70);
    v55 = 0;
    LOBYTE(v56) = 0;
    v57 = 0;
  }
  else
  {
    v55 = *v51;
    v56 = v51[1];
    v57 = (void *)v51[2];
    v58 = v57;
    v53 = v80;
    v59 = v80;
    sub_10000E750((uint64_t)v51, type metadata accessor for Artwork.Decoration);
  }
  v60 = v87;
  UIView.border.setter(v55, v56, v57);
  sub_100011370(v46, v50, &qword_100558B70);
  if (v89((uint64_t *)v50, 1, v18) == 1)
  {
    sub_100011694(v50, &qword_100558B70);
    v61 = type metadata accessor for UIView.Corner(0);
    v62 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v82, 1, 1, v61);
  }
  else
  {
    v62 = v82;
    sub_100011370(v50 + v18[5], v82, &qword_100560490);
    sub_10000E750(v50, type metadata accessor for Artwork.Decoration);
  }
  UIView.corner.setter(v62);

  sub_100011694(v46, &qword_100558B70);
  if ((v60 & 1) != 0)
  {
    v63 = 1;
  }
  else
  {
    sub_10000D964((uint64_t)v88, v49, type metadata accessor for Artwork.Decoration);
    v63 = 0;
  }
  v86(v49, v63, 1, v18);
  v64 = *(void **)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v64)
  {
    v65 = v78;
    sub_100011370(v49, (uint64_t)v78, &qword_100558B70);
    if (v89(v65, 1, v18) == 1)
    {
      v66 = v64;
      sub_100011694((uint64_t)v65, &qword_100558B70);
      v67 = 0;
      LOBYTE(v68) = 0;
      v69 = 0;
    }
    else
    {
      v67 = *v65;
      v68 = v65[1];
      v69 = (void *)v65[2];
      v70 = v69;
      v71 = v64;
      sub_10000E750((uint64_t)v65, type metadata accessor for Artwork.Decoration);
    }
    v72 = (uint64_t)v77;
    UIView.border.setter(v67, v68, v69);
    sub_100011370(v49, v72, &qword_100558B70);
    if (v89((uint64_t *)v72, 1, v18) == 1)
    {
      sub_100011694(v72, &qword_100558B70);
      v73 = type metadata accessor for UIView.Corner(0);
      v74 = v76;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v76, 1, 1, v73);
    }
    else
    {
      v74 = v76;
      sub_100011370(v72 + v18[5], v76, &qword_100560490);
      sub_10000E750(v72, type metadata accessor for Artwork.Decoration);
    }
    UIView.corner.setter(v74);

  }
  sub_100011694(v49, &qword_100558B70);
  return sub_10000E750((uint64_t)v88, type metadata accessor for Artwork.Decoration);
}

double Artwork.View.intrinsicContentSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  _BYTE v6[24];

  v1 = v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v6, 0, 0);
  v2 = v1 + *(int *)(type metadata accessor for Artwork(0) + 32);
  if (*(_BYTE *)(v2 + 8) == 2 && *(_BYTE *)(v2 + 24) == 2)
  {
    v4.n128_u64[0] = *(_QWORD *)(v2 + 16);
    v3.n128_u64[0] = *(_QWORD *)v2;
  }
  else
  {
    v3.n128_u64[0] = 0;
    v4.n128_u64[0] = 0;
  }
  return Artwork.View.fittingImageSize(in:)(v3, v4);
}

double Artwork.View.sizeThatFits(_:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  _BYTE v15[24];

  v5 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v15, 0, 0);
  v6 = v5 + *(int *)(type metadata accessor for Artwork(0) + 32);
  v9 = *(unsigned __int8 *)(v6 + 8);
  if (v9 == 255)
  {
    v7.n128_f64[0] = a1;
    v8.n128_f64[0] = a2;
    return Artwork.View.fittingImageSize(in:)(v7, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 16);
    v12 = *(_BYTE *)(v6 + 24);
    sub_1002DA040(a1, a2, *(_QWORD *)v6, v9);
    v10 = v13;
    sub_1002DA040(a1, a2, v11, v12);
  }
  return v10;
}

double Artwork.Size.computedSize(in:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  double v10;
  double v11;

  sub_1002DA040(a5, a6, a1, a2);
  v11 = v10;
  sub_1002DA040(a5, a6, a3, a4);
  return v11;
}

void sub_1002D8E3C(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  char *v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  char v34[24];
  _QWORD v35[6];

  v2 = v1;
  v4 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  objc_msgSend(v4, "setImage:", a1);
  v5 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v34, 0, 0);
  if (*((_QWORD *)v5 + 4) && (v6 = (void *)*((_QWORD *)v5 + 3)) != 0)
    v7 = v6;
  else
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v8 = v7;
  objc_msgSend(v4, "setBackgroundColor:", v7);

  if (a1 || (v11 = objc_msgSend(v2, "artworkCatalog"), v11, !v11))
  {
    if (*((_QWORD *)v5 + 4))
    {
      v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
      if (!v9)
        goto LABEL_16;
      v10 = 1;
      goto LABEL_15;
    }
  }
  v12 = type metadata accessor for Artwork(0);
  v13 = &v5[*(int *)(v12 + 28)];
  v14 = (void *)*((_QWORD *)v13 + 3);
  if (v14)
  {
    v16 = *(void **)v13;
    v15 = (void *)*((_QWORD *)v13 + 1);
    v17 = (void *)*((_QWORD *)v13 + 2);
    v18 = *((_QWORD *)v13 + 4);
    v19 = *((_QWORD *)v13 + 5);
    v35[0] = *(_QWORD *)v13;
    v35[1] = v15;
    v35[2] = v17;
    v35[3] = v14;
    v35[4] = v18;
    v35[5] = v19;
    v20 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (!*(_QWORD *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView])
    {
      objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
      sub_1002DB5D4(v16, v15, v17, v14);
      v21 = v17;
      v22 = v14;
      v23 = v16;
      v24 = v15;
      v25 = Artwork.Placeholder.View.init(configuration:)((uint64_t)v35);
      v26 = sub_10001254C(&qword_100558B68, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
      objc_msgSend(v25, "setClipsToBounds:", 1);
      v27 = v25;
      objc_msgSend(v2, "addSubview:", v27);

      v28 = *(void **)v20;
      *(_QWORD *)v20 = v27;
      *((_QWORD *)v20 + 1) = v26;

    }
  }
  v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v9)
  {
    v10 = *(_QWORD *)&v5[*(int *)(v12 + 28) + 24] == 0;
LABEL_15:
    objc_msgSend(v9, "setHidden:", v10);
  }
LABEL_16:
  sub_1002D81D8();
  v29 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  swift_beginAccess(v29, v33, 0, 0);
  v30 = *(void (**)(uint64_t))v29;
  if (*(_QWORD *)v29)
  {
    v31 = *((_QWORD *)v29 + 1);
    v32 = swift_retain(v31);
    v30(v32);
    sub_1000DB26C((uint64_t)v30, v31);
  }
}

void sub_1002D90F0(_QWORD *a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v6 = (void *)*a1;
  v7 = swift_dynamicCastClass(*a1, a4);
  if (v7)
  {
    v8 = (void *)v7;
    v20 = v6;
    v9 = objc_msgSend(a2, "imageRepresentation");
    if (v9)
    {
      v19 = v9;
      v10 = objc_msgSend(v9, "image");
      if (v10)
      {
        v11 = v10;
        if ((objc_msgSend(v19, "isImagePrepared") & 1) != 0)
        {
          v12 = v11;
          sub_1002D8E3C((uint64_t)v11);

          objc_msgSend(v8, "setNeedsLayout");
        }
        else
        {
          v13 = (_QWORD *)swift_allocObject(&unk_100519FB0, 40, 7);
          v13[2] = a3;
          v13[3] = v11;
          v13[4] = v8;
          aBlock[4] = sub_1002DD448;
          v22 = v13;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100013BD4;
          aBlock[3] = &unk_100519FC8;
          v14 = _Block_copy(aBlock);
          v15 = v22;
          v16 = v20;
          v17 = v11;
          v18 = a3;
          objc_msgSend(v17, "prepareForDisplayWithCompletionHandler:", v14, swift_release(v15).n128_f64[0]);

          _Block_release(v14);
        }
        return;
      }

    }
    sub_1002D8E3C(0);
    objc_msgSend(v8, "setNeedsLayout");

  }
}

uint64_t sub_1002D92BC(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  _QWORD *v40;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin();
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000DD108(0, (unint64_t *)&qword_1005593F0, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21);
  v23 = (_QWORD *)swift_allocObject(&unk_10051A000, 48, 7);
  v23[2] = a2;
  v23[3] = a1;
  v23[4] = a3;
  v23[5] = a4;
  aBlock[4] = sub_1002DD474;
  v40 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015F6F8;
  aBlock[3] = &unk_10051A018;
  v24 = _Block_copy(aBlock);
  v25 = v40;
  v26 = a1;
  v27 = a3;
  v28 = a4;
  v29 = a2;
  swift_release(v25);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_10001254C((unint64_t *)&unk_10055A540, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10000B4C8(&qword_100558B58);
  v33 = sub_1002DD480();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v13, v37);
}

void sub_1002D94D0(void *a1, void *a2, void *a3, id a4)
{
  id v8;
  void *v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v8 = objc_msgSend(a4, "artworkCatalog");
  if (v8)
  {
    v9 = v8;
    sub_1000DD108(0, (unint64_t *)&qword_10055D980, MPArtworkCatalog_ptr);
    v10 = a1;
    v11 = static NSObject.== infix(_:_:)(v10, v9);

    if ((v11 & 1) != 0)
    {
      if (a2)
      {
        v12 = a2;
        sub_1002D8E3C((uint64_t)a2);

      }
      else
      {
        if (qword_100557F60 != -1)
          swift_once(&qword_100557F60, sub_100366454);
        v13 = type metadata accessor for Logger(0);
        sub_10000D78C(v13, (uint64_t)static Logger.artwork);
        v14 = a3;
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc(12, -1);
          v18 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v17 = 138412290;
          *(_QWORD *)(v17 + 4) = v14;
          *v18 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to prepare image: %@", (uint8_t *)v17, 0xCu);
          v19 = sub_10000B4C8(&qword_100558B60);
          swift_arrayDestroy(v18, 1, v19);
          swift_slowDealloc(v18, -1, -1);
          swift_slowDealloc(v17, -1, -1);

        }
        else
        {

        }
        sub_1002D8E3C((uint64_t)v14);
      }
      objc_msgSend(a4, "setNeedsLayout");
    }
  }
}

void Gradient.View.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCoreUI.View", 16, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_1002D9794@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];

  a1[3] = type metadata accessor for Artwork(0);
  a1[4] = sub_10001254C(&qword_100558890, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  v3 = sub_1000C16E0(a1);
  v4 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v4, v6, 0, 0);
  return sub_10000D964(v4, (uint64_t)v3, type metadata accessor for Artwork);
}

uint64_t sub_1002D982C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[40];

  v2 = type metadata accessor for Artwork(0);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000C53BC((uint64_t)a1, (uint64_t)v8);
  v5 = sub_10000B4C8(&qword_100558B50);
  swift_dynamicCast(v4, v8, v5, v2, 7);
  Artwork.View.typedConfiguration.setter((uint64_t)v4);
  return sub_100011758(a1);
}

void (*sub_1002D98D0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0xD0uLL);
  *a1 = v3;
  v3[23] = v1;
  v4 = type metadata accessor for Artwork(0);
  v3[24] = v4;
  v3[25] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[3] = v4;
  v3[4] = sub_10001254C(&qword_100558890, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  v5 = sub_1000C16E0(v3);
  v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v6, v3 + 20, 0, 0);
  sub_10000D964(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_1002D99A4;
}

void sub_1002D99A4(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[24];
    v3 = (void *)v2[25];
    sub_1000C53BC(*a1, (uint64_t)(v2 + 5));
    sub_1000C53BC((uint64_t)(v2 + 5), (uint64_t)(v2 + 10));
    v5 = sub_10000B4C8(&qword_100558B50);
    swift_dynamicCast(v3, v2 + 10, v5, v4, 7);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_100011758(v2 + 5);
  }
  else
  {
    v6 = v2[24];
    v3 = (void *)v2[25];
    sub_1000C53BC(*a1, (uint64_t)(v2 + 15));
    v7 = sub_10000B4C8(&qword_100558B50);
    swift_dynamicCast(v3, v2 + 15, v7, v6, 7);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
  }
  sub_100011758(v2);
  free(v3);
  free(v2);
}

uint64_t sub_1002D9A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v3);
  return UIContentView.supports(_:)(a1, ObjectType, a3);
}

double Artwork.Caching.init(reference:identifier:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  double result;

  v8 = swift_weakInit(a4 + 2, 0);
  *a4 = a2;
  a4[1] = a3;
  swift_weakAssign(v8, a1);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void Artwork.Caching.init(reference:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = swift_weakInit(a2 + 2, 0);
  swift_weakAssign(v4, a1);
  swift_release(a1);
  *a2 = 0xD00000000000001CLL;
  a2[1] = 0x8000000100451050;
}

void *Artwork.Caching.Reference.defaultIdentifier.unsafeMutableAddressor()
{
  return &static Artwork.Caching.Reference.defaultIdentifier;
}

unint64_t static Artwork.Caching.Reference.defaultIdentifier.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t Artwork.Caching.Reference.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

BOOL static Artwork.Caching.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void *Artwork.Content.init(catalog:background:)(uint64_t a1, void *a2)
{
  if (!a1)
  {

    return 0;
  }
  return a2;
}

uint64_t static Artwork.Content.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  id v8;
  id v9;

  if (a1)
  {
    if (a3)
    {
      v7 = a1;
      sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
      v8 = a3;
      v9 = v7;
      LOBYTE(v7) = static NSObject.== infix(_:_:)(v9, v8);

      if ((v7 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!a3)
  {
LABEL_4:
    sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
    return static NSObject.== infix(_:_:)(a2, a4) & 1;
  }
  return 0;
}

uint64_t sub_1002D9CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
      v6 = v5;
      v7 = v3;
      v8 = static NSObject.== infix(_:_:)(v7, v6);

      if ((v8 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v5)
  {
LABEL_4:
    sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v2, v4) & 1;
  }
  return 0;
}

uint64_t Artwork.Decoration.border.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  v2 = (id)v0[2];
  return v1;
}

void Artwork.Decoration.border.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_QWORD *)(v3 + 16) = a3;
}

uint64_t Artwork.Decoration.corner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_100011370(v1 + *(int *)(v3 + 20), a1, &qword_100560490);
}

uint64_t Artwork.Decoration.corner.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_10007B328(a1, v1 + *(int *)(v3 + 20), &qword_100560490);
}

CFRange (__swiftcall *Artwork.Decoration.corner.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork.Decoration(0);
  return CFRange.init(_:);
}

id Artwork.Decoration.fillColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 24));
}

void Artwork.Decoration.fillColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for Artwork.Decoration(0) + 24);

  *(_QWORD *)(v1 + v3) = a1;
}

CFRange (__swiftcall *Artwork.Decoration.fillColor.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork.Decoration(0);
  return CFRange.init(_:);
}

uint64_t Artwork.Decoration.fillAxes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 28));
}

uint64_t Artwork.Decoration.fillAxes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Artwork.Decoration(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

CFRange (__swiftcall *Artwork.Decoration.fillAxes.modify())(__C::_NSRange)
{
  type metadata accessor for Artwork.Decoration(0);
  return CFRange.init(_:);
}

uint64_t static Artwork.Decoration.with(_:)@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)a2 + v4[5];
  v6 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[6];
  *(_QWORD *)((char *)a2 + v7) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)a2 + v4[7]) = 1;
  return a1(a2);
}

uint64_t sub_1002DA040(double a1, double a2, uint64_t a3, char a4)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;

  if (!a4)
  {
    if (a1 != 1.79769313e308)
      return result;
    _StringGuts.grow(_:)(67);
    v12._countAndFlagsBits = 0x6F69736E656D6944;
    v12._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001004511E0;
    v13._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v13);
    v14._countAndFlagsBits = CGSize.description.getter(1.79769313e308, a2);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16._countAndFlagsBits = 0x696C61766E49203ALL;
    v16._object = (void *)0xEF68746469772064;
    String.append(_:)(v16);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 362, 0);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a4 == 1 && a2 == 1.79769313e308)
  {
    _StringGuts.grow(_:)(68);
    v5._countAndFlagsBits = 0x6F69736E656D6944;
    v5._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v5);
    v6._object = (void *)0x80000001004511E0;
    v6._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v6);
    v7._countAndFlagsBits = CGSize.description.getter(a1, 1.79769313e308);
    v8 = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v8);
    v9._countAndFlagsBits = 0xD000000000000010;
    v9._object = (void *)0x8000000100451220;
    String.append(_:)(v9);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 366, 0);
    goto LABEL_10;
  }
  return result;
}

BOOL static Artwork.Size.Dimension.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;
  _BOOL4 v5;

  if (a2)
  {
    v4 = *(double *)&a1 == *(double *)&a3;
    if (a4 != 1)
      v4 = 0;
    v5 = a4 == 2 && *(double *)&a1 == *(double *)&a3;
    if (a2 == 1)
      return v4;
    else
      return v5;
  }
  else
  {
    return !a4 && *(double *)&a1 == *(double *)&a3;
  }
}

uint64_t sub_1002DA2C0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v4 == 1 && v2 == v3)
        return 1;
    }
    else if (v4 == 2 && v2 == v3)
    {
      return 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 8) && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1002DA344(uint64_t a1, uint64_t a2)
{
  return _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_1002DA36C(uint64_t a1)
{
  return sub_1002DA3EC(a1, static Artwork.Decoration.grid, &qword_100557DD0, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_1002F0380);
}

uint64_t Artwork.Decoration.grid.unsafeMutableAddressor()
{
  return sub_1002DA730(&qword_100557CA8, (uint64_t)static Artwork.Decoration.grid, (uint64_t)sub_1002DA36C);
}

uint64_t static Artwork.Decoration.grid.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DA78C(&qword_100557CA8, (uint64_t)static Artwork.Decoration.grid, (uint64_t)sub_1002DA36C, a1);
}

uint64_t sub_1002DA3C8(uint64_t a1)
{
  return sub_1002DA3EC(a1, static Artwork.Decoration.list, &qword_100557DC8, (uint64_t)static UIView.Corner.small, (uint64_t)sub_1002F02D4);
}

uint64_t sub_1002DA3EC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t result;
  uint64_t v22;

  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_10000D924((uint64_t)v11, a2);
  v12 = (_QWORD *)sub_10000D78C((uint64_t)v11, (uint64_t)a2);
  if (qword_100557DB0 != -1)
    swift_once(&qword_100557DB0, sub_1002F0028);
  v13 = static UIView.Border.artwork;
  v14 = byte_100562928;
  v15 = *a3;
  v16 = (id)qword_100562930;
  if (v15 != -1)
    swift_once(a3, a5);
  v17 = type metadata accessor for UIView.Corner(0);
  v18 = sub_10000D78C(v17, a4);
  v19 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v10, v18, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v10, 0, 1, v17);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *v12 = v13;
  v12[1] = v14;
  v12[2] = v16;
  result = sub_1002DD3A0((uint64_t)v10, (uint64_t)v12 + v11[5]);
  *(_QWORD *)((char *)v12 + v11[6]) = v20;
  *(_QWORD *)((char *)v12 + v11[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.list.unsafeMutableAddressor()
{
  return sub_1002DA730(&qword_100557CB0, (uint64_t)static Artwork.Decoration.list, (uint64_t)sub_1002DA3C8);
}

uint64_t static Artwork.Decoration.list.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DA78C(&qword_100557CB0, (uint64_t)static Artwork.Decoration.list, (uint64_t)sub_1002DA3C8, a1);
}

uint64_t sub_1002DA5C0()
{
  uint64_t v0;
  char *v1;
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;

  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  v1 = (char *)&v10 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_10000D924((uint64_t)v2, static Artwork.Decoration.round);
  v3 = (_QWORD *)sub_10000D78C((uint64_t)v2, (uint64_t)static Artwork.Decoration.round);
  if (qword_100557DB0 != -1)
    swift_once(&qword_100557DB0, sub_1002F0028);
  v4 = static UIView.Border.artwork;
  v5 = byte_100562928;
  v6 = qword_100562930;
  static UIView.Corner.rounded.getter((id)qword_100562930);
  v7 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 0, 1, v7);
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  result = sub_1002DD3A0((uint64_t)v1, (uint64_t)v3 + v2[5]);
  *(_QWORD *)((char *)v3 + v2[6]) = v8;
  *(_QWORD *)((char *)v3 + v2[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.round.unsafeMutableAddressor()
{
  return sub_1002DA730(&qword_100557CB8, (uint64_t)static Artwork.Decoration.round, (uint64_t)sub_1002DA5C0);
}

uint64_t sub_1002DA730(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Artwork.Decoration(0);
  return sub_10000D78C(v4, a2);
}

uint64_t static Artwork.Decoration.round.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DA78C(&qword_100557CB8, (uint64_t)static Artwork.Decoration.round, (uint64_t)sub_1002DA5C0, a1);
}

uint64_t sub_1002DA78C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Artwork.Decoration(0);
  v7 = sub_10000D78C(v6, a2);
  return sub_10000D964(v7, a4, type metadata accessor for Artwork.Decoration);
}

uint64_t Artwork.Decoration.scaled(using:compatibleWith:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v4 = v3;
  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIView.Corner.Radius(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v28 - v14;
  sub_10000D964(v4, a3, type metadata accessor for Artwork.Decoration);
  if (*(_QWORD *)(v4 + 16) && *(_QWORD *)(a3 + 16))
  {
    v16 = *(_DWORD *)(v4 + 8);
    objc_msgSend(a1, "scaledValueForValue:compatibleWithTraitCollection:", a2, *(double *)v4);
    *(_QWORD *)a3 = v17;
    *(_BYTE *)(a3 + 8) = v16 & 1;
  }
  v28 = a1;
  v29 = a2;
  v18 = type metadata accessor for Artwork.Decoration(0);
  sub_100011370(v4 + *(int *)(v18 + 20), (uint64_t)v9, &qword_100560490);
  v19 = type metadata accessor for UIView.Corner(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v9, 1, v19);
  if ((_DWORD)v22 == 1)
    return sub_100011694((uint64_t)v9, &qword_100560490);
  UIView.Corner.radius.getter(v22);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v19);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v15, v10);
  if ((_DWORD)v24 != enum case for UIView.Corner.Radius.value(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v11 + 96))(v15, v10);
  result = v21((char *)(a3 + *(int *)(v18 + 20)), 1, v19);
  if (!(_DWORD)result)
  {
    v26 = v15[8];
    objc_msgSend(v28, "scaledValueForValue:compatibleWithTraitCollection:", v29, *(double *)v15);
    *(_QWORD *)v13 = v27;
    v13[8] = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v13, v25, v10);
    return UIView.Corner.radius.setter(v13);
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a2)
  {
    if (a2 == 1)
    {
      result = 0;
      if (a6 != 1)
        return result;
    }
    else
    {
      result = 0;
      if (a6 != 2)
        return result;
    }
  }
  else
  {
    result = 0;
    if (a6)
      return result;
  }
  if (*(double *)&a1 == *(double *)&a5)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        if (a8 == 1 && *(double *)&a3 == *(double *)&a7)
          return 1;
      }
      else if (a8 == 2 && *(double *)&a3 == *(double *)&a7)
      {
        return 1;
      }
    }
    else if (!a8 && *(double *)&a3 == *(double *)&a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV7CachingV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    Strong = swift_weakLoadStrong(a1 + 2);
    v11 = swift_weakLoadStrong(a2 + 2);
    v12 = v11;
    if (Strong)
    {
      swift_release(Strong);
      if (v12)
      {
        swift_release(v12);
        if (Strong == v12)
          return 1;
      }
    }
    else
    {
      if (!v11)
        return 1;
      swift_release(v11);
    }
    return 0;
  }
  return result;
}

BOOL _s11MusicCoreUI7ArtworkV10DecorationV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  id v23;
  id v24;
  char v25;
  char v26;
  char v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;

  v4 = type metadata accessor for UIView.Corner(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000B4C8(&qword_100560500);
  __chkstk_darwin();
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  v14 = (void *)a1[2];
  v15 = (void *)a2[2];
  if (v14)
  {
    if (!v15)
      return 0;
    v44 = v13;
    v45 = (uint64_t)&v40 - v11;
    v42 = v7;
    v43 = v12;
    v16 = *a1;
    v17 = v4;
    v18 = a1[1];
    v40 = *a2;
    v41 = v16;
    v19 = v5;
    v20 = v10;
    v21 = a1;
    v22 = a2[1];
    v23 = v15;
    v24 = v14;
    v25 = v18 & 1;
    v4 = v17;
    v47 = v25;
    v26 = v25;
    v27 = v22 & 1;
    a1 = v21;
    v10 = v20;
    v5 = v19;
    v46 = v27;
    LOBYTE(v19) = static UIView.Border.__derived_struct_equals(_:_:)(v41, v26, (uint64_t)v24, v40, v27, (uint64_t)v23);

    if ((v19 & 1) == 0)
      return 0;
  }
  else
  {
    v44 = v13;
    v45 = (uint64_t)&v40 - v11;
    v42 = v7;
    v43 = v12;
    if (v15)
      return 0;
  }
  v28 = (int *)type metadata accessor for Artwork.Decoration(0);
  v29 = v45;
  sub_100011370((uint64_t)a1 + v28[5], v45, &qword_100560490);
  v30 = v44;
  sub_100011370((uint64_t)a2 + v28[5], v44, &qword_100560490);
  v31 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100011370(v29, (uint64_t)v10, &qword_100560490);
  sub_100011370(v30, v31, &qword_100560490);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v32((uint64_t)v10, 1, v4) != 1)
  {
    v33 = v43;
    sub_100011370((uint64_t)v10, v43, &qword_100560490);
    if (v32(v31, 1, v4) != 1)
    {
      v41 = (uint64_t)a2;
      v34 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v42, v31, v4);
      v35 = sub_10001254C((unint64_t *)&unk_100560940, (uint64_t (*)(uint64_t))&type metadata accessor for UIView.Corner, (uint64_t)&protocol conformance descriptor for UIView.Corner);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v34, v4, v35);
      v37 = *(void (**)(char *, uint64_t))(v5 + 8);
      v37(v34, v4);
      sub_100011694(v30, &qword_100560490);
      sub_100011694(v45, &qword_100560490);
      v37((char *)v33, v4);
      sub_100011694((uint64_t)v10, &qword_100560490);
      if ((v36 & 1) == 0)
        return 0;
      goto LABEL_13;
    }
    sub_100011694(v30, &qword_100560490);
    sub_100011694(v45, &qword_100560490);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v33, v4);
LABEL_11:
    sub_100011694((uint64_t)v10, &qword_100560500);
    return 0;
  }
  sub_100011694(v30, &qword_100560490);
  sub_100011694(v29, &qword_100560490);
  if (v32(v31, 1, v4) != 1)
    goto LABEL_11;
  v41 = (uint64_t)a2;
  sub_100011694((uint64_t)v10, &qword_100560490);
LABEL_13:
  sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
  v38 = v41;
  if ((static NSObject.== infix(_:_:)(*(uint64_t *)((char *)a1 + v28[6]), *(_QWORD *)(v41 + v28[6])) & 1) != 0)
    return *(uint64_t *)((char *)a1 + v28[7]) == *(_QWORD *)(v38 + v28[7]);
  return 0;
}

uint64_t _s11MusicCoreUI7ArtworkV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  char v16;
  int *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  BOOL v43;
  void *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  _QWORD v51[6];
  void *v52;
  void *v53;
  void *v54;
  __int128 v55;
  void *v56;

  sub_100011370(a1, (uint64_t)v51, &qword_100558830);
  sub_100011370(a2, (uint64_t)v50, &qword_100558830);
  sub_100011370((uint64_t)v51, (uint64_t)&v52, &qword_100558830);
  sub_100011370((uint64_t)v50, (uint64_t)&v55, &qword_100558830);
  if (v53)
  {
    sub_100011370((uint64_t)&v52, (uint64_t)&v48, &qword_100558830);
    if (*((_QWORD *)&v55 + 1))
    {
      sub_1002DD4CC(&v55, &v46);
      if (v48 == v46
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v48, *((_QWORD *)&v48 + 1), v46, *((_QWORD *)&v46 + 1), 0) & 1) != 0)
      {
        v4 = swift_weakLoadStrong(&v49);
        v5 = swift_weakLoadStrong(&v47);
        v6 = v5;
        if (v4)
        {
          swift_release(v4);
          if (v6)
          {
            swift_release(v6);
            if (v4 == v6)
              goto LABEL_18;
          }
        }
        else
        {
          if (!v5)
          {
LABEL_18:
            sub_1002DC148((uint64_t)&v46);
            sub_100011694((uint64_t)v50, &qword_100558830);
            sub_100011694((uint64_t)v51, &qword_100558830);
            sub_1002DC148((uint64_t)&v48);
            goto LABEL_19;
          }
          swift_release(v5);
        }
      }
      sub_1002DC148((uint64_t)&v46);
      sub_100011694((uint64_t)v50, &qword_100558830);
      sub_100011694((uint64_t)v51, &qword_100558830);
      sub_1002DC148((uint64_t)&v48);
      v7 = &qword_100558830;
LABEL_16:
      sub_100011694((uint64_t)&v52, v7);
      return 0;
    }
    sub_100011694((uint64_t)v50, &qword_100558830);
    sub_100011694((uint64_t)v51, &qword_100558830);
    sub_1002DC148((uint64_t)&v48);
LABEL_12:
    v7 = (uint64_t *)&unk_100558B78;
    goto LABEL_16;
  }
  sub_100011694((uint64_t)v50, &qword_100558830);
  sub_100011694((uint64_t)v51, &qword_100558830);
  if (*((_QWORD *)&v55 + 1))
    goto LABEL_12;
LABEL_19:
  sub_100011694((uint64_t)&v52, &qword_100558830);
  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  if (!v9)
  {
    if (!v10)
      goto LABEL_33;
    return 0;
  }
  if (!v10)
    return 0;
  v11 = *(void **)(a1 + 24);
  v12 = *(void **)(a2 + 24);
  if (v11)
  {
    if (!v12)
    {
      sub_1002D6B94(*(id *)(a1 + 24), *(void **)(a1 + 32));
      sub_1002D6B94(v11, v9);
      sub_1002D6B94(0, v10);
      goto LABEL_30;
    }
    sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
    sub_1002D6B94(v11, v9);
    sub_1002D6B94(v11, v9);
    sub_1002D6B94(v12, v10);
    v13 = v12;
    v14 = v11;
    v15 = static NSObject.== infix(_:_:)(v14, v13);

    if ((v15 & 1) == 0)
    {

LABEL_30:
      sub_1002D6BF4(v11, v9);
      return 0;
    }
  }
  else
  {
    sub_1002D6B94(0, *(void **)(a1 + 32));
    sub_1002D6B94(0, v9);
    if (v12)
    {
      sub_1002D6B94(v12, v10);

      goto LABEL_30;
    }
    sub_1002D6B94(0, v10);
    v14 = 0;
    v13 = 0;
  }
  sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
  v16 = static NSObject.== infix(_:_:)(v9, v10);

  sub_1002D6BF4(v11, v9);
  if ((v16 & 1) == 0)
    return 0;
LABEL_33:
  v17 = (int *)type metadata accessor for Artwork(0);
  if (!_s11MusicCoreUI7ArtworkV10DecorationV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)(a1 + v17[6]), (uint64_t *)(a2 + v17[6])))return 0;
  v18 = v17[7];
  v19 = *(void **)(a1 + v18);
  v20 = *(void **)(a1 + v18 + 8);
  v22 = *(void **)(a1 + v18 + 16);
  v21 = *(void **)(a1 + v18 + 24);
  v24 = *(_QWORD *)(a1 + v18 + 32);
  v23 = *(_QWORD *)(a1 + v18 + 40);
  v25 = (void **)(a2 + v18);
  v27 = *v25;
  v26 = v25[1];
  v28 = v25[2];
  v29 = v25[3];
  v30 = v25[4];
  v31 = v25[5];
  if (!v21)
  {
    if (!v29)
      goto LABEL_40;
LABEL_39:
    v33 = *v25;
    v45 = *v25;
    v34 = v19;
    v35 = v25[2];
    sub_1002DB5D4(v19, v20, v22, v21);
    sub_1002DB5D4(v33, v26, v35, v29);
    sub_1002DB618(v34, v20, v22, v21);
    sub_1002DB618(v45, v26, v35, v29);
    return 0;
  }
  if (!v29)
    goto LABEL_39;
  v51[0] = v19;
  v51[1] = v20;
  v51[2] = v22;
  v51[3] = v21;
  v51[4] = v24;
  v51[5] = v23;
  v52 = v27;
  v53 = v26;
  v54 = v28;
  *(_QWORD *)&v55 = v29;
  *((_QWORD *)&v55 + 1) = v30;
  v56 = v31;
  v44 = v27;
  v32 = v19;
  v41 = v28;
  v42 = v19;
  sub_1002DB5D4(v19, v20, v22, v21);
  sub_1002DB5D4(v32, v20, v22, v21);
  sub_1002DB5D4(v44, v26, v41, v29);
  v43 = _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v51, (uint64_t)&v52);

  sub_1002DB618(v42, v20, v22, v21);
  if (!v43)
    return 0;
LABEL_40:
  v36 = v17[8];
  v37 = a1 + v36;
  v38 = *(unsigned __int8 *)(a1 + v36 + 8);
  v39 = a2 + v36;
  v40 = *(unsigned __int8 *)(v39 + 8);
  if (v38 == 255)
  {
    if (v40 != 255)
      return 0;
  }
  else if (v40 == 255
         || (_s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)v37, v38, *(_QWORD *)(v37 + 16), *(_BYTE *)(v37 + 24), *(_QWORD *)v39, v40, *(_QWORD *)(v39 + 16), *(_BYTE *)(v39 + 24)) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

unint64_t sub_1002DB588()
{
  unint64_t result;

  result = qword_100558850;
  if (!qword_100558850)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_100558850);
  }
  return result;
}

uint64_t sub_1002DB5CC()
{
  return sub_10023AA54(64);
}

id sub_1002DB5D4(id result, void *a2, void *a3, void *a4)
{
  void *v5;
  id v6;
  id v7;
  id v8;

  if (a4)
  {
    v5 = result;
    v6 = a3;
    v7 = a4;
    v8 = v5;
    return a2;
  }
  return result;
}

void sub_1002DB618(void *a1, void *a2, void *a3, void *a4)
{
  if (a4)
  {

  }
}

void _s11MusicCoreUI7ArtworkV4ViewC5coderAESgSo7NSCoderC_tcfc_0()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  char *v4;

  v1 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v3 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v4 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010044BC20, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 53, 0);
  __break(1u);
}

uint64_t sub_1002DB714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002DB758()
{
  return sub_10001254C(&qword_100558858, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
}

uint64_t type metadata accessor for Artwork.View(uint64_t a1)
{
  return sub_10001133C(a1, (uint64_t *)&unk_1005589B0, (uint64_t)&nominal type descriptor for Artwork.View);
}

uint64_t sub_1002DB798(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10001254C(&qword_100558888, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  result = sub_10001254C(&qword_100558890, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1002DB7F4()
{
  return sub_10001254C(&qword_100558898, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_1002DB820(uint64_t a1)
{
  uint64_t result;

  result = sub_10001254C(&qword_1005588E0, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  __int128 v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  char *__dst;
  uint64_t v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      swift_weakCopyInit(a1 + 2, a2 + 2);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
    }
    v9 = (void **)(a2 + 3);
    v10 = (void *)a2[4];
    if (v10)
    {
      v11 = *v9;
      a1[3] = v11;
      a1[4] = v10;
      v12 = v11;
      v13 = v10;
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)v9;
    }
    v46 = a3;
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
    v15[8] = *((_BYTE *)a2 + v14 + 8);
    v17 = *(void **)((char *)a2 + v14 + 16);
    *((_QWORD *)v15 + 2) = v17;
    v18 = (int *)type metadata accessor for Artwork.Decoration(0);
    v19 = v18[5];
    __dst = &v15[v19];
    v20 = &v16[v19];
    v21 = type metadata accessor for UIView.Corner(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    v24 = v17;
    if (v23(v20, 1, v21))
    {
      v25 = sub_10000B4C8(&qword_100560490);
      memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    v26 = v18[6];
    v27 = *(void **)&v16[v26];
    *(_QWORD *)&v15[v26] = v27;
    *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
    v28 = *(int *)(v46 + 28);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(void **)((char *)a2 + v28 + 24);
    v32 = v27;
    if (v31)
    {
      v33 = *(void **)v30;
      v34 = (void *)*((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v34;
      v35 = (void *)*((_QWORD *)v30 + 2);
      *((_QWORD *)v29 + 2) = v35;
      *((_QWORD *)v29 + 3) = v31;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      v36 = v33;
      v37 = v34;
      v38 = v35;
      v39 = v31;
    }
    else
    {
      v40 = *((_OWORD *)v30 + 1);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v40;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    }
    v41 = *(int *)(v46 + 32);
    v42 = (_OWORD *)((char *)a1 + v41);
    v43 = (_OWORD *)((char *)a2 + v41);
    *v42 = *v43;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v43 + 9);
  }
  return a1;
}

void destroy for Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_weakDestroy(a1 + 16);
  }
  if (*(_QWORD *)(a1 + 32))
  {

  }
  v4 = a1 + *(int *)(a2 + 24);

  v5 = type metadata accessor for Artwork.Decoration(0);
  v6 = v4 + *(int *)(v5 + 20);
  v7 = type metadata accessor for UIView.Corner(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = (id *)(a1 + *(int *)(a2 + 28));
  if (v9[3])
  {

  }
}

_QWORD *initializeWithCopy for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  char *__dst;
  uint64_t v44;

  v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
    swift_weakCopyInit(a1 + 2, a2 + 2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  v7 = (void **)(a2 + 3);
  v8 = (void *)a2[4];
  if (v8)
  {
    v9 = *v7;
    a1[3] = v9;
    a1[4] = v8;
    v10 = v9;
    v11 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v7;
  }
  v44 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
  v13[8] = *((_BYTE *)a2 + v12 + 8);
  v15 = *(void **)((char *)a2 + v12 + 16);
  *((_QWORD *)v13 + 2) = v15;
  v16 = (int *)type metadata accessor for Artwork.Decoration(0);
  v17 = v16[5];
  __dst = &v13[v17];
  v18 = &v14[v17];
  v19 = type metadata accessor for UIView.Corner(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v15;
  if (v21(v18, 1, v19))
  {
    v23 = sub_10000B4C8(&qword_100560490);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v24 = v16[6];
  v25 = *(void **)&v14[v24];
  *(_QWORD *)&v13[v24] = v25;
  *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
  v26 = *(int *)(v44 + 28);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(void **)((char *)a2 + v26 + 24);
  v30 = v25;
  if (v29)
  {
    v31 = *(void **)v28;
    v32 = (void *)*((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v32;
    v33 = (void *)*((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 2) = v33;
    *((_QWORD *)v27 + 3) = v29;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    v34 = v31;
    v35 = v32;
    v36 = v33;
    v37 = v29;
  }
  else
  {
    v38 = *((_OWORD *)v28 + 1);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v38;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  }
  v39 = *(int *)(v44 + 32);
  v40 = (_OWORD *)((char *)a1 + v39);
  v41 = (_OWORD *)((char *)a2 + v39);
  *v40 = *v41;
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v41 + 9);
  return a1;
}

uint64_t assignWithCopy for Artwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  int *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v75;
  _QWORD *v76;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_weakCopyAssign(a1 + 16, a2 + 2);
    }
    else
    {
      sub_1002DC148(a1);
      v7 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    swift_bridgeObjectRetain();
    swift_weakCopyInit(a1 + 16, a2 + 2);
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v8;
  }
  v9 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v9)
    {
      v10 = *(void **)(a1 + 24);
      v11 = (void *)a2[3];
      *(_QWORD *)(a1 + 24) = v11;
      v12 = v11;

      v13 = (void *)a2[4];
      v14 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v13;
      v15 = v13;

      goto LABEL_15;
    }
    sub_1002DC178((id *)(a1 + 24));
  }
  else if (v9)
  {
    v16 = (void *)a2[3];
    *(_QWORD *)(a1 + 24) = v16;
    v17 = (void *)a2[4];
    *(_QWORD *)(a1 + 32) = v17;
    v18 = v16;
    v19 = v17;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_15:
  v75 = a3;
  v76 = a2;
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20);
  *(_BYTE *)(v21 + 8) = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = (void *)*((_QWORD *)v22 + 2);
  v25 = *(void **)(v21 + 16);
  *(_QWORD *)(v21 + 16) = v24;
  v26 = v24;

  v27 = (int *)type metadata accessor for Artwork.Decoration(0);
  v28 = v27[5];
  v29 = (void *)(v21 + v28);
  v30 = &v22[v28];
  v31 = type metadata accessor for UIView.Corner(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
LABEL_20:
    v36 = sub_10000B4C8(&qword_100560490);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_21:
  v37 = v27[6];
  v38 = *(void **)&v22[v37];
  v39 = *(void **)(v21 + v37);
  *(_QWORD *)(v21 + v37) = v38;
  v40 = v38;

  *(_QWORD *)(v21 + v27[7]) = *(_QWORD *)&v22[v27[7]];
  v41 = *(int *)(v75 + 28);
  v42 = a1 + v41;
  v43 = (char *)v76 + v41;
  v44 = *(_QWORD *)(a1 + v41 + 24);
  v45 = *(_QWORD *)((char *)v76 + v41 + 24);
  if (v44)
  {
    if (v45)
    {
      v46 = *(id *)v42;
      v47 = *(void **)v43;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v48 = v47;

      v49 = *(void **)(v42 + 8);
      v50 = (void *)*((_QWORD *)v43 + 1);
      *(_QWORD *)(v42 + 8) = v50;
      v51 = v50;

      v52 = *(void **)(v42 + 16);
      v53 = (void *)*((_QWORD *)v43 + 2);
      *(_QWORD *)(v42 + 16) = v53;
      v54 = v53;

      v55 = (void *)*((_QWORD *)v43 + 3);
      v56 = *(void **)(v42 + 24);
      *(_QWORD *)(v42 + 24) = v55;
      v57 = v55;

      *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
      *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    }
    else
    {
      sub_1002DC1A8((id *)v42);
      v67 = *((_OWORD *)v43 + 1);
      v66 = *((_OWORD *)v43 + 2);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v67;
      *(_OWORD *)(v42 + 32) = v66;
    }
  }
  else if (v45)
  {
    v58 = *(void **)v43;
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v59 = (void *)*((_QWORD *)v43 + 1);
    *(_QWORD *)(v42 + 8) = v59;
    v60 = (void *)*((_QWORD *)v43 + 2);
    *(_QWORD *)(v42 + 16) = v60;
    v61 = (void *)*((_QWORD *)v43 + 3);
    *(_QWORD *)(v42 + 24) = v61;
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
    *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    v62 = v58;
    v63 = v59;
    v64 = v60;
    v65 = v61;
  }
  else
  {
    v68 = *(_OWORD *)v43;
    v69 = *((_OWORD *)v43 + 2);
    *(_OWORD *)(v42 + 16) = *((_OWORD *)v43 + 1);
    *(_OWORD *)(v42 + 32) = v69;
    *(_OWORD *)v42 = v68;
  }
  v70 = *(int *)(v75 + 32);
  v71 = (_OWORD *)(a1 + v70);
  v72 = (__int128 *)((char *)v76 + v70);
  v73 = *v72;
  *(_OWORD *)((char *)v71 + 9) = *(__int128 *)((char *)v72 + 9);
  *v71 = v73;
  return a1;
}

uint64_t sub_1002DC148(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_weakDestroy(a1 + 16);
  return a1;
}

id *sub_1002DC178(id *a1)
{

  return a1;
}

id *sub_1002DC1A8(id *a1)
{
  _s12RecipeColorsVwxx(a1);
  return a1;
}

uint64_t initializeWithTake for Artwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;

  if (*(_QWORD *)(a2 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit(a1 + 16, a2 + 16);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  v9 = (int *)type metadata accessor for Artwork.Decoration(0);
  v10 = v9[5];
  v11 = (void *)(v7 + v10);
  v12 = (const void *)(v8 + v10);
  v13 = type metadata accessor for UIView.Corner(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_10000B4C8(&qword_100560490);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_QWORD *)(v7 + v9[6]) = *(_QWORD *)(v8 + v9[6]);
  *(_QWORD *)(v7 + v9[7]) = *(_QWORD *)(v8 + v9[7]);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_OWORD *)(a1 + v16);
  v19 = (_OWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  v21 = (_OWORD *)(a1 + v17);
  v22 = (_OWORD *)(a2 + v17);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)v22 + 9);
  *v21 = *v22;
  return a1;
}

uint64_t assignWithTake for Artwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  int *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v37;
  _QWORD *v38;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      swift_weakTakeAssign(a1 + 16, a2 + 2);
      goto LABEL_8;
    }
    sub_1002DC148(a1);
  }
  else if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit(a1 + 16, a2 + 2);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
LABEL_8:
  if (*(_QWORD *)(a1 + 32))
  {
    if (a2[4])
    {
      v7 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = a2[3];

      v8 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = a2[4];

      goto LABEL_13;
    }
    sub_1002DC178((id *)(a1 + 24));
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_13:
  v37 = a3;
  v38 = a2;
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
  *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v9 + 8);
  v12 = *(void **)(a1 + v9 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)((char *)a2 + v9 + 16);

  v13 = (int *)type metadata accessor for Artwork.Decoration(0);
  v14 = v13[5];
  v15 = (void *)(v10 + v14);
  v16 = &v11[v14];
  v17 = type metadata accessor for UIView.Corner(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_18:
    v22 = sub_10000B4C8(&qword_100560490);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_19:
  v23 = v13[6];
  v24 = *(void **)(v10 + v23);
  *(_QWORD *)(v10 + v23) = *(_QWORD *)&v11[v23];

  *(_QWORD *)(v10 + v13[7]) = *(_QWORD *)&v11[v13[7]];
  v25 = *(int *)(v37 + 28);
  v26 = a1 + v25;
  v27 = (char *)v38 + v25;
  if (!*(_QWORD *)(a1 + v25 + 24))
  {
LABEL_23:
    v32 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v32;
    goto LABEL_24;
  }
  if (!*((_QWORD *)v27 + 3))
  {
    sub_1002DC1A8((id *)v26);
    goto LABEL_23;
  }
  v28 = *(id *)v26;
  *(_QWORD *)v26 = *(_QWORD *)v27;

  v29 = *(void **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = *((_QWORD *)v27 + 1);

  v30 = *(void **)(v26 + 16);
  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);

  v31 = *(void **)(v26 + 24);
  *(_QWORD *)(v26 + 24) = *((_QWORD *)v27 + 3);

LABEL_24:
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  v33 = *(int *)(v37 + 32);
  v34 = (_OWORD *)(a1 + v33);
  v35 = (_OWORD *)((char *)v38 + v33);
  *v34 = *v35;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v35 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002DC620);
}

uint64_t sub_1002DC620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for Artwork.Decoration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002DC6B4);
}

uint64_t sub_1002DC6B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for Artwork.Decoration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1002DC728(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10043A358;
  v4[1] = &unk_10043A370;
  result = type metadata accessor for Artwork.Decoration(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10043A388;
    v4[4] = &unk_10043A3A0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1002DC7B8()
{
  return type metadata accessor for Artwork.View(0);
}

uint64_t sub_1002DC7C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Artwork(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10043A370;
    v4[2] = " ";
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_10043A370;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for Artwork.Caching(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_weakDestroy(a1 + 16);
}

_QWORD *initializeWithCopy for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2 + 2;
  swift_bridgeObjectRetain();
  swift_weakCopyInit(a1 + 2, v4);
  return a1;
}

_QWORD *assignWithCopy for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  swift_weakCopyAssign(a1 + 2, a2 + 2);
  return a1;
}

_OWORD *initializeWithTake for Artwork.Caching(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *assignWithTake for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  swift_weakTakeAssign(a1 + 2, a2 + 2);
  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Caching()
{
  return &type metadata for Artwork.Caching;
}

uint64_t type metadata accessor for Artwork.Caching.Reference()
{
  return objc_opt_self(_TtCVV11MusicCoreUI7Artwork7Caching9Reference);
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork.Content(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Artwork.Content(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for Artwork.Content(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Content()
{
  return &type metadata for Artwork.Content;
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = (void *)a2[2];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a3[5];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UIView.Corner(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    v14 = v7;
    if (v13(v10, 1, v11))
    {
      v15 = sub_10000B4C8(&qword_100560490);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v19;
    *(_QWORD *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    v20 = v19;
  }
  return v4;
}

void destroy for Artwork.Decoration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UIView.Corner(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

}

uint64_t initializeWithCopy for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for UIView.Corner(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = sub_10000B4C8(&qword_100560490);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v18 = v17;
  return a1;
}

uint64_t assignWithCopy for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = (void *)a2[2];
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  v10 = a3[5];
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UIView.Corner(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10000B4C8(&qword_100560490);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[6];
  v20 = *(void **)((char *)a2 + v19);
  v21 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v22 = v20;

  *(_QWORD *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for UIView.Corner(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10000B4C8(&qword_100560490);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for UIView.Corner(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_10000B4C8(&qword_100560490);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[6];
  v17 = *(void **)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002DD0CC);
}

uint64_t sub_1002DD0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_10000B4C8(&qword_100560490);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002DD15C);
}

uint64_t sub_1002DD15C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10000B4C8(&qword_100560490);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_1002DD1DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10043A400;
  sub_1002DD26C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_1002DD26C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100560600)
  {
    v2 = type metadata accessor for UIView.Corner(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100560600);
  }
}

__n128 initializeWithCopy for Artwork.Size(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Artwork.Size(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Size(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size()
{
  return &type metadata for Artwork.Size;
}

uint64_t initializeBufferWithCopyOfBuffer for Artwork.Size.Dimension(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_1002DD388(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size.Dimension()
{
  return &type metadata for Artwork.Size.Dimension;
}

uint64_t sub_1002DD3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100560490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002DD3E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002DD40C(_QWORD *a1, void *a2)
{
  uint64_t v2;

  sub_1002D90F0(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1002DD414()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002DD448(void *a1)
{
  void **v1;

  return sub_1002D92BC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002DD454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002DD464(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002DD46C()
{
  return sub_10023AA54(48);
}

void sub_1002DD474()
{
  void **v0;

  sub_1002D94D0(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_1002DD480()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055A550;
  if (!qword_10055A550)
  {
    v1 = sub_100011650(&qword_100558B58);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10055A550);
  }
  return result;
}

_OWORD *sub_1002DD4CC(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  swift_weakTakeInit(a2 + 1, a1 + 1);
  return a2;
}

void *Artwork.Placeholder.tint.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

double Radiosity.Specs.Radiosity.blurRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Radiosity.Specs.Radiosity.blurRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

id sub_1002DD544()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  qword_100558B80 = (uint64_t)result;
  return result;
}

__n128 static Artwork.Placeholder.with(_:)@<Q0>(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  id v13;
  __int128 v14;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  v5 = (void *)qword_100558B80;
  v6 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v7 = v5;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v5;
  v12 = 0;
  v13 = objc_msgSend(v6, "configurationWithWeight:", 4);
  v14 = xmmword_1004387B0;
  a1(&v11);
  v8 = v12;
  v9 = v13;
  result = (__n128)v14;
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id Artwork.Placeholder.preferredSymbolConfiguration(in:)(double a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;
  id v7;

  if (a1 > a2)
    v3 = a1;
  else
    v3 = a2;
  if (a2 < a1)
    a1 = a2;
  if (v3 * *(double *)(v2 + 32) >= a1)
    v4 = a1;
  else
    v4 = v3 * *(double *)(v2 + 32);
  v5 = *(void **)(v2 + 24);
  v6 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", v4);
  v7 = objc_msgSend(v5, "configurationByApplyingConfiguration:", v6);

  return v7;
}

void Artwork.Placeholder.image(with:graphicsFormat:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _OWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  __n128 v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;

  v4 = (_OWORD *)v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", a1, a2, a3);
  v17 = 0;
  sub_100011530(v3, (uint64_t)&v20, &qword_100558B98);
  sub_100011530(v3 + 8, (uint64_t)&v19, &qword_100558B98);
  sub_100011530(v3 + 16, (uint64_t)&v18, &qword_100558BA0);
  v6 = *(void **)(v3 + 24);
  v7 = swift_allocObject(&unk_10051A0B0, 72, 7);
  v8 = v4[1];
  *(_OWORD *)(v7 + 16) = *v4;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v4[2];
  *(_QWORD *)(v7 + 64) = &v17;
  v9 = swift_allocObject(&unk_10051A0D8, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1002DDC1C;
  *(_QWORD *)(v9 + 24) = v7;
  v15[4] = sub_1000D75E8;
  v16 = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1001880C4;
  v15[3] = &unk_10051A0F0;
  v10 = _Block_copy(v15);
  v11 = v16;
  sub_10015CEDC(&v20);
  sub_10015CEDC(&v19);
  sub_10015CEDC(&v18);
  v12 = v6;
  swift_retain(v9);
  v13 = objc_msgSend(v5, "imageWithActions:", v10, swift_release(v11).n128_f64[0]);

  _Block_release(v10);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v9, "", 129, 60, 36, 1, v14);
  swift_release(v9);
  if ((v5 & 1) != 0)
    __break(1u);
  else
    swift_release(v7);
}

void sub_1002DD8F4(void *a1, uint64_t a2, void **a3)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  _BYTE v41[8];
  id v42;

  v6 = objc_msgSend(a1, "format");
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v15 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  objc_msgSend(v15, "setFill");

  v16 = (void *)objc_opt_self(UIBezierPath);
  v17 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
  objc_msgSend(v17, "fill");

  if (*(_QWORD *)a2)
  {
    v18 = *(id *)a2;
    objc_msgSend(v18, "setFill");
    v19 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
    objc_msgSend(v19, "fill");

  }
  if (v12 > v14)
    v20 = v12;
  else
    v20 = v14;
  if (v14 >= v12)
    v21 = v12;
  else
    v21 = v14;
  v22 = v20 * *(double *)(a2 + 32);
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  v24 = *(void **)(a2 + 24);
  v25 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", v23);
  v26 = objc_msgSend(v24, "configurationByApplyingConfiguration:", v25);

  sub_100011530(a2 + 16, (uint64_t)v41, &qword_100558BA0);
  sub_100011530((uint64_t)v41, (uint64_t)&v42, &qword_100558BA0);
  if (v42)
  {
    v27 = objc_msgSend(v42, "imageWithSymbolConfiguration:", v26);
    if (v27)
    {
      v28 = v27;
      v29 = *(void **)(a2 + 8);
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v28, "imageWithTintColor:", v30);

        v28 = v31;
      }
      objc_msgSend(v28, "size");
      v33 = v32;
      v35 = v34;
      v36 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v36, "scale");
      v38 = v37;

      CGRect.centeringAlong(axes:bounds:scale:)(3, v8, v10, v12, v14, v38, v8, v10, v33, v35);
      objc_msgSend(v28, "drawInRect:");

    }
  }
  v39 = objc_msgSend(a1, "currentImage");

  v40 = *a3;
  *a3 = v39;

}

uint64_t sub_1002DDC14()
{
  return sub_10023AA54(72);
}

void sub_1002DDC1C(void *a1)
{
  uint64_t v1;

  sub_1002DD8F4(a1, v1 + 16, *(void ***)(v1 + 64));
}

uint64_t sub_1002DDC28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002DDC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002DDC48(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

char *Artwork.Placeholder.View.__allocating_init(configuration:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)(a1);
}

char *Artwork.Placeholder.View.init(configuration:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  void *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  id v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_super v17;
  id v18;
  id v19;
  id v20;
  _OWORD v21[3];

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  v6 = objc_allocWithZone((Class)UIImageView);
  v7 = v1;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  sub_100011530(a1, (uint64_t)&v20, &qword_100558B98);
  sub_100011530(a1 + 8, (uint64_t)&v19, &qword_100558B98);
  sub_100011530(a1 + 16, (uint64_t)&v18, &qword_100558BA0);
  v8 = *(void **)(a1 + 24);
  v9 = &v7[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  v10 = *(_OWORD *)a1;
  v11 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v9 + 2) = v11;
  *(_OWORD *)v9 = v10;
  sub_10015CEDC(&v20);
  sub_10015CEDC(&v19);
  sub_10015CEDC(&v18);
  v12 = v8;

  v17.receiver = v7;
  v17.super_class = ObjectType;
  v13 = (char *)objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  v15 = v13;
  objc_msgSend(v15, "addSubview:", v14);
  memset(v21, 0, sizeof(v21));
  sub_1002DDDFC((uint64_t)v21);
  sub_1002C2300(&v20);
  sub_1002C2300(&v19);
  sub_1002C2300(&v18);

  return v15;
}

void sub_1002DDDFC(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  id v26;
  id v27;
  char v28;
  uint64_t v29;
  char v30[24];
  void *v31;
  char v32[24];
  uint64_t v33;
  double v34;
  char v35[16];
  id v36;
  uint64_t v37;

  v2 = v1;
  sub_100011530(a1, (uint64_t)v30, &qword_100558838);
  v4 = v31;
  v5 = &v1[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess(v5, &v29, 0, 0);
  v7 = *(void **)v5;
  v6 = (void *)*((_QWORD *)v5 + 1);
  v8 = (void *)*((_QWORD *)v5 + 2);
  v9 = (void *)*((_QWORD *)v5 + 3);
  v11 = *((double *)v5 + 4);
  v10 = *((double *)v5 + 5);
  if (*(_QWORD *)v5)
  {
    v12 = v8;
    v13 = v9;
    v14 = v6;
    v15 = v7;
  }
  else
  {
    v16 = (void *)objc_opt_self(UIColor);
    v12 = v8;
    v17 = v9;
    v14 = v6;
    v15 = objc_msgSend(v16, "clearColor");
    v7 = 0;
  }
  v18 = v7;
  objc_msgSend(v2, "setBackgroundColor:", v15);

  v19 = *(void **)&v2[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  objc_msgSend(v19, "setHidden:", v8 == 0);
  objc_msgSend(v19, "setImage:", v12);
  objc_msgSend(v19, "setTintColor:", v14);
  objc_msgSend(v19, "setAlpha:", v10);
  v20 = objc_msgSend(v2, "superview");

  if (!v20)
    goto LABEL_18;
  sub_100011530(a1, (uint64_t)v35, &qword_100558838);
  if (!v37)
  {
    if (!v8)
      goto LABEL_14;
    goto LABEL_17;
  }
  v21 = v36;
  v22 = v36;
  v23 = v22;
  if (!v8)
  {
    if (!v21)
      goto LABEL_14;

LABEL_17:
    objc_msgSend(v2, "setNeedsLayout");
    goto LABEL_18;
  }
  if (!v21)
    goto LABEL_17;
  sub_1000DD108(0, &qword_10055F280, UIImage_ptr);
  v24 = v12;
  v25 = static NSObject.== infix(_:_:)(v24, v23);

  if ((v25 & 1) == 0)
    goto LABEL_17;
LABEL_14:
  sub_100011530(a1, (uint64_t)v32, &qword_100558838);
  if (!v33)
    goto LABEL_17;
  if (v11 != v34)
    goto LABEL_17;
  sub_1000DD108(0, &qword_100558C70, UIImageSymbolConfiguration_ptr);
  v26 = v9;
  v27 = v4;
  v28 = static NSObject.== infix(_:_:)(v26, v27);

  if ((v28 & 1) == 0)
    goto LABEL_17;
LABEL_18:

}

void Artwork.Placeholder.View.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010044BC20, "MusicCoreUI/ArtworkPlaceholder.swift", 36, 2, 100, 0);
  __break(1u);
}

id Artwork.Placeholder.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v3, v12, 0, 0);
  v4 = *(void **)v3;
  v5 = *(void **)(v3 + 8);
  v6 = *(void **)(v3 + 16);
  v11 = *(id *)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  v7 = v4;
  v8 = v5;
  v9 = v6;
  return v11;
}

void Artwork.Placeholder.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  id v13;
  __int128 v14;
  void *v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  id v25;
  id v26;
  id v27;
  _QWORD v28[6];
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38[2];

  v3 = (__int128 *)(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration);
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v24, 1, 0);
  v4 = v3[1];
  v31 = *v3;
  v32[0] = v4;
  v32[1] = v3[2];
  v22 = *((_QWORD *)v3 + 1);
  v23 = *(_QWORD *)v3;
  v20 = *((_QWORD *)v3 + 3);
  v21 = *((_QWORD *)v3 + 2);
  v18 = *((_QWORD *)v3 + 5);
  v19 = *((_QWORD *)v3 + 4);
  sub_100011530((uint64_t)&v31, (uint64_t)&v33, &qword_100558B98);
  sub_100011530((uint64_t)&v31 + 8, (uint64_t)&v34, &qword_100558B98);
  sub_100011530((uint64_t)v32, (uint64_t)&v35, &qword_100558BA0);
  v5 = (void *)*((_QWORD *)&v32[0] + 1);
  sub_100011530(a1, (uint64_t)&v27, &qword_100558B98);
  sub_100011530(a1 + 8, (uint64_t)&v26, &qword_100558B98);
  sub_100011530(a1 + 16, (uint64_t)&v25, &qword_100558BA0);
  v6 = *(void **)(a1 + 24);
  v8 = *(void **)v3;
  v7 = (void *)*((_QWORD *)v3 + 1);
  v10 = (void *)*((_QWORD *)v3 + 2);
  v9 = (void *)*((_QWORD *)v3 + 3);
  v11 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v11;
  v3[2] = *(_OWORD *)(a1 + 32);
  sub_10015CEDC(&v33);
  sub_10015CEDC(&v34);
  sub_10015CEDC(&v35);
  v12 = v5;
  sub_10015CEDC(&v27);
  sub_10015CEDC(&v26);
  sub_10015CEDC(&v25);
  v13 = v6;

  v14 = v3[1];
  v29 = *v3;
  v30[0] = v14;
  v30[1] = v3[2];
  sub_100011530((uint64_t)&v29, (uint64_t)&v36, &qword_100558B98);
  sub_100011530((uint64_t)&v29 + 8, (uint64_t)&v37, &qword_100558B98);
  sub_100011530((uint64_t)v30, (uint64_t)v38, &qword_100558BA0);
  v15 = (void *)*((_QWORD *)&v30[0] + 1);
  sub_10015CEDC(&v36);
  sub_10015CEDC(&v37);
  sub_10015CEDC(v38);
  v16 = v15;
  v17 = _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v29, (uint64_t)&v31);
  sub_1002C2300(&v36);
  sub_1002C2300(&v37);
  sub_1002C2300(v38);

  if (!v17)
  {
    v28[0] = v23;
    v28[1] = v22;
    v28[2] = v21;
    v28[3] = v20;
    v28[4] = v19;
    v28[5] = v18;
    sub_1002DDDFC((uint64_t)v28);
  }
  sub_1002C2300(&v27);
  sub_1002C2300(&v26);
  sub_1002C2300(&v25);

  sub_1002C2300(&v33);
  sub_1002C2300(&v34);
  sub_1002C2300(&v35);

}

void (*Artwork.Placeholder.View.typedConfiguration.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = malloc(0xC8uLL);
  *a1 = v3;
  v3[24] = v1;
  v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v3 + 18, 0, 0);
  v5 = *(void **)v4;
  v6 = *(void **)(v4 + 8);
  v7 = *(void **)(v4 + 16);
  v8 = *(void **)(v4 + 24);
  v3[6] = *(_QWORD *)v4;
  v3[7] = v6;
  v3 += 6;
  v3[2] = v7;
  v3[3] = v8;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v4 + 32);
  v9 = v7;
  v10 = v8;
  v11 = v5;
  v12 = v6;
  return sub_1002DE56C;
}

void sub_1002DE56C(uint64_t *a1, char a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *a1;
  v3 = (_OWORD *)(*a1 + 48);
  v4 = *(_OWORD *)(*a1 + 64);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_OWORD *)(v2 + 32) = v3[2];
    sub_100011530(v2, v2 + 168, &qword_100558B98);
    sub_100011530(v2 + 8, v2 + 176, &qword_100558B98);
    sub_100011530(v2 + 16, v2 + 184, &qword_100558BA0);
    v5 = *(void **)(v2 + 24);
    sub_10015CEDC((id *)(v2 + 168));
    sub_10015CEDC((id *)(v2 + 176));
    sub_10015CEDC((id *)(v2 + 184));
    v6 = v5;
    Artwork.Placeholder.View.typedConfiguration.setter(v2);
    v7 = *(void **)(v2 + 48);
    v8 = *(void **)(v2 + 56);
    v9 = *(void **)(v2 + 64);

  }
  else
  {
    *(_OWORD *)(v2 + 96) = *v3;
    *(_OWORD *)(v2 + 112) = v4;
    *(_OWORD *)(v2 + 128) = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter(v2 + 96);
  }
  free((void *)v2);
}

Swift::Void __swiftcall Artwork.Placeholder.View.layoutSubviews()()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  id v26;
  id v27;
  id v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char v45[24];
  objc_super v46;

  v46.receiver = v0;
  v46.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v46, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  v2 = &v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess(&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration], v45, 0, 0);
  v3 = *(void **)v2;
  v4 = (void *)*((_QWORD *)v2 + 1);
  v5 = (void *)*((_QWORD *)v2 + 3);
  v6 = *((double *)v2 + 4);
  v7 = *((id *)v2 + 2);
  v8 = v5;
  v9 = v3;
  v10 = v4;
  objc_msgSend(v0, "bounds");
  if (v11 > v12)
    v13 = v11;
  else
    v13 = v12;
  if (v12 >= v11)
    v14 = v11;
  else
    v14 = v12;
  v15 = v6 * v13;
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v18 = objc_msgSend(v17, "configurationWithPointSize:", v16);
  v19 = objc_msgSend(v8, "configurationByApplyingConfiguration:", v18);

  objc_msgSend(v1, "setPreferredSymbolConfiguration:", v19);
  if (objc_msgSend((id)objc_opt_self(UIView), "_isInAnimationBlock")
    && (v20 = *((_QWORD *)v2 + 2)) != 0)
  {
    v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v20);
    v22 = *(void **)v2;
    v23 = (void *)*((_QWORD *)v2 + 1);
    v24 = (void *)*((_QWORD *)v2 + 3);
    v25 = *((double *)v2 + 4);
    v26 = *((id *)v2 + 2);
    v27 = v24;
    v28 = v22;
    v29 = v23;
    objc_msgSend(v0, "bounds");
    if (v30 > v31)
      v32 = v30;
    else
      v32 = v31;
    if (v31 >= v30)
      v33 = v30;
    else
      v33 = v31;
    v34 = v25 * v32;
    if (v34 >= v33)
      v34 = v33;
    v35 = objc_msgSend(v17, "configurationWithPointSize:", v34);
    v36 = objc_msgSend(v27, "configurationByApplyingConfiguration:", v35);

    objc_msgSend(v21, "setPreferredSymbolConfiguration:", v36);
    objc_msgSend(v1, "setContentMode:", 1);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v21, "sizeThatFits:", v37, v38);
    CGRect.centeringAlong(axes:in:)(3, 0.0, 0.0, v39, v40);
    objc_msgSend(v1, "setFrame:");

  }
  else
  {
    objc_msgSend(v1, "setContentMode:", 4);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v1, "sizeThatFits:", v41, v42);
    CGRect.centeringAlong(axes:in:)(3, 0.0, 0.0, v43, v44);
    objc_msgSend(v1, "setFrame:");
  }
}

char *sub_1002DEA5C(_OWORD *a1)
{
  objc_class *v1;
  __int128 v2;
  id v3;
  _OWORD v5[3];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v5[2] = a1[2];
  v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)((uint64_t)v5);
}

id sub_1002DEAA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v3, v12, 0, 0);
  v4 = *(void **)v3;
  v11 = *(id *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(void **)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  v7 = v5;
  v8 = v6;
  v9 = v4;
  return v11;
}

void sub_1002DEB18(_OWORD *a1)
{
  __int128 v1;
  _OWORD v2[3];

  v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  v2[2] = a1[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
}

void (*sub_1002DEB48(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Artwork.Placeholder.View.typedConfiguration.modify(v2);
  return sub_100193CCC;
}

id sub_1002DEB8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v12;
  _BYTE v13[24];

  a1[3] = (uint64_t)&type metadata for Artwork.Placeholder;
  a1[4] = sub_1002DB588();
  v3 = swift_allocObject(&unk_10051A1B8, 64, 7);
  *a1 = v3;
  v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v13, 0, 0);
  v5 = *(void **)v4;
  v12 = *(id *)(v4 + 8);
  v6 = *(void **)(v4 + 16);
  v7 = *(void **)(v4 + 24);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 24) = v12;
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v4 + 32);
  v8 = v6;
  v9 = v7;
  v10 = v5;
  return v12;
}

uint64_t sub_1002DEC34(_QWORD *a1)
{
  uint64_t v2;
  _OWORD v4[3];
  _BYTE v5[40];
  _OWORD v6[3];

  sub_1000C53BC((uint64_t)a1, (uint64_t)v5);
  v2 = sub_10000B4C8(&qword_100558B50);
  swift_dynamicCast(v4, v5, v2, &type metadata for Artwork.Placeholder, 7);
  v6[0] = v4[0];
  v6[1] = v4[1];
  v6[2] = v4[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v6);
  return sub_100011758(a1);
}

void (*sub_1002DECAC(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = malloc(0x128uLL);
  *a1 = v3;
  v3[36] = v1;
  v3[26] = &type metadata for Artwork.Placeholder;
  v3[27] = sub_1002DB588();
  v4 = swift_allocObject(&unk_10051A1B8, 64, 7);
  v3[23] = v4;
  v5 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v5, v3 + 33, 0, 0);
  v6 = *(void **)v5;
  v7 = *(void **)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  v9 = *(void **)(v5 + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)v5;
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v5 + 32);
  v10 = v8;
  v11 = v9;
  v12 = v6;
  v13 = v7;
  return sub_1002DED74;
}

void sub_1002DED74(void **a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v2 = *a1;
  v3 = (char *)*a1 + 96;
  v4 = (uint64_t)*a1 + 144;
  v5 = (char *)*a1 + 184;
  if ((a2 & 1) != 0)
  {
    sub_1000C53BC((uint64_t)*a1 + 184, (uint64_t)(v2 + 14));
    sub_1000C53BC((uint64_t)(v2 + 14), v4);
    v6 = sub_10000B4C8(&qword_100558B50);
    swift_dynamicCast(v3, v4, v6, &type metadata for Artwork.Placeholder, 7);
    v7 = v3[1];
    *v2 = *v3;
    v2[1] = v7;
    v2[2] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
    sub_100011758((_QWORD *)v2 + 28);
  }
  else
  {
    sub_1000C53BC((uint64_t)*a1 + 184, v4);
    v8 = sub_10000B4C8(&qword_100558B50);
    swift_dynamicCast(v3, v4, v8, &type metadata for Artwork.Placeholder, 7);
    v9 = v3[1];
    v2[3] = *v3;
    v2[4] = v9;
    v2[5] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)(v2 + 3));
  }
  sub_100011758(v5);
  free(v2);
}

char *sub_1002DEE80()
{
  __int128 *v0;
  __int128 v1;
  void *v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[2];
  id v10;
  id v11;
  id v12;

  v1 = v0[1];
  v8 = *v0;
  v9[0] = v1;
  v9[1] = v0[2];
  sub_100011530((uint64_t)&v8, (uint64_t)&v10, &qword_100558B98);
  sub_100011530((uint64_t)&v8 + 8, (uint64_t)&v11, &qword_100558B98);
  sub_100011530((uint64_t)v9, (uint64_t)&v12, &qword_100558BA0);
  v2 = (void *)*((_QWORD *)&v9[0] + 1);
  v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
  sub_10015CEDC(&v10);
  sub_10015CEDC(&v11);
  sub_10015CEDC(&v12);
  v4 = v2;
  v5 = Artwork.Placeholder.View.init(configuration:)((uint64_t)&v8);
  sub_1002E1E58(&qword_100558B68, v6, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, protocol conformance descriptor for Artwork.Placeholder.View);
  return v5;
}

id sub_1002DEF5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v2 = *(void **)v1;
  v9 = *(id *)(v1 + 8);
  v3 = *(void **)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  v5 = v3;
  v6 = v4;
  v7 = v2;
  return v9;
}

BOOL sub_1002DEFB0(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v8);
}

double sub_1002DEFF4()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "blackColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.1);

  v3 = objc_msgSend(v0, "whiteColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.12);

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v5);

  v7 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.nowPlaying = (uint64_t)v2;
  unk_1005626E0 = v4;
  qword_1005626E8 = (uint64_t)v6;
  unk_1005626F0 = v7;
  result = 0.46;
  xmmword_1005626F8 = xmmword_1004387C0;
  return result;
}

uint64_t *Artwork.Placeholder.nowPlaying.unsafeMutableAddressor()
{
  if (qword_100557CC8 != -1)
    swift_once(&qword_100557CC8, sub_1002DEFF4);
  return &static Artwork.Placeholder.nowPlaying;
}

id static Artwork.Placeholder.nowPlaying.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CC8 != -1)
    swift_once(&qword_100557CC8, sub_1002DEFF4);
  v2 = (void *)static Artwork.Placeholder.nowPlaying;
  v3 = (void *)unk_1005626E0;
  v5 = (void *)qword_1005626E8;
  v4 = unk_1005626F0;
  v10 = (id)unk_1005626F0;
  *(_QWORD *)a1 = static Artwork.Placeholder.nowPlaying;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005626F8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double sub_1002DF1E8()
{
  void *v0;
  id v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "tertiarySystemFillColor");
  v2 = objc_msgSend(v0, "quaternaryLabelColor");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v3);

  v5 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.miniPlayer = (uint64_t)v1;
  unk_100562710 = v2;
  qword_100562718 = (uint64_t)v4;
  unk_100562720 = v5;
  result = 0.46;
  xmmword_100562728 = xmmword_1004387C0;
  return result;
}

uint64_t *Artwork.Placeholder.miniPlayer.unsafeMutableAddressor()
{
  if (qword_100557CD0 != -1)
    swift_once(&qword_100557CD0, sub_1002DF1E8);
  return &static Artwork.Placeholder.miniPlayer;
}

id static Artwork.Placeholder.miniPlayer.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CD0 != -1)
    swift_once(&qword_100557CD0, sub_1002DF1E8);
  v2 = (void *)static Artwork.Placeholder.miniPlayer;
  v3 = (void *)unk_100562710;
  v5 = (void *)qword_100562718;
  v4 = unk_100562720;
  v10 = (id)unk_100562720;
  *(_QWORD *)a1 = static Artwork.Placeholder.miniPlayer;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_100562728;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

void static Artwork.Placeholder.device(representing:basedOn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  char v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a2 + 24);
  v9 = (void *)objc_opt_self(MPAVRoutingController);
  v10 = v7;
  v11 = v8;
  v12 = v6;
  v13 = objc_msgSend(v9, "_symbolImageForRoute:", a1);
  v14 = v13;
  if (v7)
  {
    v32 = v6;
    v15 = (void *)objc_opt_self(UIColor);
    v16 = v10;
    v17 = v14;
    v18 = objc_msgSend(v15, "secondaryLabelColor");
    sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
    v19 = static NSObject.== infix(_:_:)(v18, v16);

    if ((v19 & 1) != 0)
    {

      v20 = objc_msgSend(v15, "labelColor");
    }
    else
    {
      v24 = v16;
      v25 = objc_msgSend(v15, "tertiaryLabelColor");
      v26 = static NSObject.== infix(_:_:)(v25, v24);

      if ((v26 & 1) != 0)
      {

        v20 = objc_msgSend(v15, "secondaryLabelColor");
      }
      else
      {
        v23 = v24;
        v27 = objc_msgSend(v15, "quaternaryLabelColor");
        v28 = static NSObject.== infix(_:_:)(v27, v23);

        if ((v28 & 1) == 0)
        {
LABEL_12:
          v6 = v32;
          goto LABEL_13;
        }

        v20 = objc_msgSend(v15, "tertiaryLabelColor");
      }
    }
    v23 = v20;
    goto LABEL_12;
  }
  v21 = qword_100557CC0;
  v22 = v13;
  if (v21 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  v23 = (id)qword_100558B80;
LABEL_13:
  v29 = *(_QWORD *)(a2 + 40);
  v30 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithHierarchicalColor:", v23);
  v31 = objc_msgSend(v11, "configurationByApplyingConfiguration:", v30);

  *a3 = v6;
  a3[1] = v7;
  a3[2] = v14;
  a3[3] = v31;
  a3[4] = 0x3FE0000000000000;
  a3[5] = v29;
}

id sub_1002DF63C()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  static Artwork.Placeholder.music = (uint64_t)v3;
  unk_100562740 = qword_100558B80;
  qword_100562748 = (uint64_t)v1;
  unk_100562750 = v2;
  xmmword_100562758 = xmmword_1004387D0;
  return (id)qword_100558B80;
}

uint64_t *Artwork.Placeholder.music.unsafeMutableAddressor()
{
  if (qword_100557CD8 != -1)
    swift_once(&qword_100557CD8, sub_1002DF63C);
  return &static Artwork.Placeholder.music;
}

id static Artwork.Placeholder.music.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CD8 != -1)
    swift_once(&qword_100557CD8, sub_1002DF63C);
  v2 = (void *)static Artwork.Placeholder.music;
  v3 = (void *)unk_100562740;
  v5 = (void *)qword_100562748;
  v4 = unk_100562750;
  v10 = (id)unk_100562750;
  *(_QWORD *)a1 = static Artwork.Placeholder.music;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_100562758;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_1002DF800()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 5);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  static Artwork.Placeholder.musicVideo = (uint64_t)v3;
  unk_100562770 = qword_100558B80;
  qword_100562778 = (uint64_t)v1;
  unk_100562780 = v2;
  xmmword_100562788 = xmmword_1004387B0;
  return (id)qword_100558B80;
}

uint64_t *Artwork.Placeholder.musicVideo.unsafeMutableAddressor()
{
  if (qword_100557CE0 != -1)
    swift_once(&qword_100557CE0, sub_1002DF800);
  return &static Artwork.Placeholder.musicVideo;
}

id static Artwork.Placeholder.musicVideo.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CE0 != -1)
    swift_once(&qword_100557CE0, sub_1002DF800);
  v2 = (void *)static Artwork.Placeholder.musicVideo;
  v3 = (void *)unk_100562770;
  v5 = (void *)qword_100562778;
  v4 = unk_100562780;
  v10 = (id)unk_100562780;
  *(_QWORD *)a1 = static Artwork.Placeholder.musicVideo;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_100562788;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_1002DF9D4()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 5);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  static Artwork.Placeholder.tv = (uint64_t)v3;
  unk_1005627A0 = qword_100558B80;
  qword_1005627A8 = (uint64_t)v1;
  unk_1005627B0 = v2;
  xmmword_1005627B8 = xmmword_1004387B0;
  return (id)qword_100558B80;
}

uint64_t *Artwork.Placeholder.tv.unsafeMutableAddressor()
{
  if (qword_100557CE8 != -1)
    swift_once(&qword_100557CE8, sub_1002DF9D4);
  return &static Artwork.Placeholder.tv;
}

id static Artwork.Placeholder.tv.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CE8 != -1)
    swift_once(&qword_100557CE8, sub_1002DF9D4);
  v2 = (void *)static Artwork.Placeholder.tv;
  v3 = (void *)unk_1005627A0;
  v5 = (void *)qword_1005627A8;
  v4 = unk_1005627B0;
  v10 = (id)unk_1005627B0;
  *(_QWORD *)a1 = static Artwork.Placeholder.tv;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005627B8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_1002DFB90()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 4);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  static Artwork.Placeholder.microphone = (uint64_t)v3;
  unk_1005627D0 = qword_100558B80;
  qword_1005627D8 = (uint64_t)v1;
  unk_1005627E0 = v2;
  xmmword_1005627E8 = xmmword_1004387C0;
  return (id)qword_100558B80;
}

uint64_t *Artwork.Placeholder.microphone.unsafeMutableAddressor()
{
  if (qword_100557CF0 != -1)
    swift_once(&qword_100557CF0, sub_1002DFB90);
  return &static Artwork.Placeholder.microphone;
}

id static Artwork.Placeholder.microphone.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CF0 != -1)
    swift_once(&qword_100557CF0, sub_1002DFB90);
  v2 = (void *)static Artwork.Placeholder.microphone;
  v3 = (void *)unk_1005627D0;
  v5 = (void *)qword_1005627D8;
  v4 = unk_1005627E0;
  v10 = (id)unk_1005627E0;
  *(_QWORD *)a1 = static Artwork.Placeholder.microphone;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005627E8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_1002DFD5C()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_100557CC0 != -1)
    swift_once(&qword_100557CC0, sub_1002DD544);
  static Artwork.Placeholder.person = (uint64_t)v3;
  unk_100562800 = qword_100558B80;
  qword_100562808 = (uint64_t)v1;
  unk_100562810 = v2;
  xmmword_100562818 = xmmword_1004387B0;
  return (id)qword_100558B80;
}

uint64_t *Artwork.Placeholder.person.unsafeMutableAddressor()
{
  if (qword_100557CF8 != -1)
    swift_once(&qword_100557CF8, sub_1002DFD5C);
  return &static Artwork.Placeholder.person;
}

id static Artwork.Placeholder.person.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557CF8 != -1)
    swift_once(&qword_100557CF8, sub_1002DFD5C);
  v2 = (void *)static Artwork.Placeholder.person;
  v3 = (void *)unk_100562800;
  v5 = (void *)qword_100562808;
  v4 = unk_100562810;
  v10 = (id)unk_100562810;
  *(_QWORD *)a1 = static Artwork.Placeholder.person;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_100562818;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double sub_1002DFF2C()
{
  NSString v0;
  id v1;
  id v2;
  double result;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.newPlaylist = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  unk_100562830 = 0;
  qword_100562838 = (uint64_t)v1;
  unk_100562840 = v2;
  result = 0.5;
  xmmword_100562848 = xmmword_1004387B0;
  return result;
}

uint64_t *Artwork.Placeholder.newPlaylist.unsafeMutableAddressor()
{
  if (qword_100557D00 != -1)
    swift_once(&qword_100557D00, sub_1002DFF2C);
  return &static Artwork.Placeholder.newPlaylist;
}

id static Artwork.Placeholder.newPlaylist.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_100557D00 != -1)
    swift_once(&qword_100557D00, sub_1002DFF2C);
  v2 = (void *)static Artwork.Placeholder.newPlaylist;
  v3 = (void *)unk_100562830;
  v5 = (void *)qword_100562838;
  v4 = unk_100562840;
  v10 = (id)unk_100562840;
  *(_QWORD *)a1 = static Artwork.Placeholder.newPlaylist;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_100562848;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double static Artwork.Placeholder.playlist(ofType:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  __int128 v11;
  double result;
  _OWORD v13[2];
  __int128 v14;

  sub_10000B4C8(&qword_100558BB8);
  __chkstk_darwin();
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist.Variant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MPModelPlaylistType.variant.getter(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Playlist.Variant.regular(_:), v6);
    sub_1002E1764((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  }
  v10 = sub_1002E17A4((uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v10);
  v11 = v13[1];
  *a2 = v13[0];
  a2[1] = v11;
  result = *(double *)&v14;
  a2[2] = v14;
  return result;
}

double static Artwork.Placeholder.playlist(withVariant:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  sub_1002E17A4(a1, (uint64_t)v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

__n128 Artwork.Placeholder.withSolidBackgroundColor()@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 *v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  __n128 result;
  void *v22;

  v2 = v1;
  v4 = (void *)v1[1].n128_u64[0];
  v5 = (void *)v1[1].n128_u64[1];
  v6 = (id)v1->n128_u64[0];
  v7 = (void *)v1->n128_u64[1];
  if (v1->n128_u64[0])
  {
    v8 = (void *)objc_opt_self(UIColor);
    v22 = v4;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = objc_msgSend(v8, "secondarySystemFillColor");
    sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
    v14 = static NSObject.== infix(_:_:)(v13, v11);

    if ((v14 & 1) != 0)
    {
      if (qword_100557D08 != -1)
        swift_once(&qword_100557D08, sub_1002E04DC);
      v6 = (id)qword_100558B88;

      v4 = v22;
    }
    else
    {
      v18 = v11;
      v19 = objc_msgSend(v8, "tertiarySystemFillColor");
      v20 = static NSObject.== infix(_:_:)(v19, v18);

      v4 = v22;
      if ((v20 & 1) != 0)
      {
        if (qword_100557D10 != -1)
          swift_once(&qword_100557D10, sub_1002E050C);
        v6 = (id)qword_100558B90;

      }
    }
  }
  else
  {
    v15 = v4;
    v16 = v5;
    v17 = v7;
  }
  a1->n128_u64[0] = (unint64_t)v6;
  a1->n128_u64[1] = (unint64_t)v7;
  a1[1].n128_u64[0] = (unint64_t)v4;
  a1[1].n128_u64[1] = (unint64_t)v5;
  result = v2[2];
  a1[2] = result;
  return result;
}

id Artwork.Placeholder.withBackground(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v3 = *(void **)(v2 + 8);
  v4 = *(void **)(v2 + 16);
  v9 = *(id *)(v2 + 24);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  v5 = a1;
  v6 = v3;
  v7 = v4;
  return v9;
}

id Artwork.Placeholder.withScaleFactor(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v11;

  v3 = *(void **)v2;
  v4 = *(void **)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  v11 = *(id *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  return v11;
}

id Artwork.Placeholder.withTint(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  v4 = *(void **)v2;
  v5 = *(void **)(v2 + 16);
  v10 = *(id *)(v2 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  v6 = v4;
  v7 = a1;
  v8 = v5;
  return v10;
}

void sub_1002E04DC(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002E04F8, (uint64_t)&unk_10051A1D0, &qword_100558B88);
}

id sub_1002E04F8(void *a1)
{
  return sub_1002E05E0(a1, 38, 41, 233, 234);
}

void sub_1002E050C(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002E05CC, (uint64_t)&unk_10051A1F8, &qword_100558B90);
}

void sub_1002E0528(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;

  v7 = objc_allocWithZone((Class)UIColor);
  v10[4] = a2;
  v11 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100034978;
  v10[3] = a3;
  v8 = _Block_copy(v10);
  v9 = objc_msgSend(v7, "initWithDynamicProvider:", v8);
  _Block_release(v8);
  swift_release(v11);
  *a4 = v9;
}

id sub_1002E05CC(void *a1)
{
  return sub_1002E05E0(a1, 44, 46, 245, 245);
}

id sub_1002E05E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = objc_msgSend(a1, "userInterfaceStyle");
  sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
  if (v9 == (id)2)
  {
    v10 = a2;
    v11 = a2;
    v12 = a3;
  }
  else
  {
    v10 = a4;
    v11 = a4;
    v12 = a5;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v10, v11, v12, 1.0);
}

double sub_1002E0798()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  void *v5;
  id v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  Class v10;
  id v11;
  unsigned int v12;
  id v13;
  void *v14;
  double v15;
  char v16;

  v1 = sub_10000B4C8(&qword_1005593D0);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100424BB0;
  *(_QWORD *)(v2 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongHasVideo);
  *(_QWORD *)(v2 + 40) = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = (void *)objc_opt_self(MPPropertySet);
  v6 = objc_msgSend(v5, "propertySetWithProperties:", isa);

  LODWORD(isa) = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v6);
  v7 = 1.0;
  if ((_DWORD)isa && objc_msgSend(v0, "hasVideo"))
  {
    if (qword_100557D18 != -1)
      swift_once(&qword_100557D18, sub_1002E0B00);
    v7 = *(double *)&static Artwork.Size.musicVideoAspectRatio;
    v8 = swift_allocObject(v1, 48, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100424BB0;
    *(_QWORD *)(v8 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongArtwork);
    *(_QWORD *)(v8 + 40) = v9;
    v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v5, "propertySetWithProperties:", v10);

    v12 = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v11);
    if (v12)
    {
      v13 = objc_msgSend(v0, "artworkCatalog");
      if (v13)
      {
        v14 = v13;
        v15 = COERCE_DOUBLE(MPArtworkCatalog.expectedRatio.getter());
        if ((v16 & 1) == 0 && v15 < 1.0)
        {
          if (qword_100557D20 != -1)
            swift_once(&qword_100557D20, sub_1002E0B38);
          v7 = *(double *)&static Artwork.Size.verticalMusicVideoAspectRatio;
        }

      }
    }
  }
  return v7;
}

uint64_t *Artwork.Size.musicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_100557D18 != -1)
    swift_once(&qword_100557D18, sub_1002E0B00);
  return &static Artwork.Size.musicVideoAspectRatio;
}

uint64_t *Artwork.Size.verticalMusicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_100557D20 != -1)
    swift_once(&qword_100557D20, sub_1002E0B38);
  return &static Artwork.Size.verticalMusicVideoAspectRatio;
}

id static MPModelPlaylist.artworkPlaceholderImage(for:)()
{
  return sub_1002E1A64();
}

id MPModelPlaylist.artworkPlaceholderImage.getter()
{
  void *v0;
  NSString v2;
  id v3;

  if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistType))
  {
    objc_msgSend(v0, "type");
    return sub_1002E1A64();
  }
  else
  {
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v2);

    return v3;
  }
}

void sub_1002E0B00()
{
  static Artwork.Size.musicVideoAspectRatio = 0x3FFC71C71C71C71CLL;
}

double static Artwork.Size.musicVideoAspectRatio.getter()
{
  return sub_1002E0B64(&qword_100557D18, (uint64_t)&static Artwork.Size.musicVideoAspectRatio);
}

void sub_1002E0B38()
{
  static Artwork.Size.verticalMusicVideoAspectRatio = 0x3FE2000000000000;
}

double static Artwork.Size.verticalMusicVideoAspectRatio.getter()
{
  return sub_1002E0B64(&qword_100557D20, (uint64_t)&static Artwork.Size.verticalMusicVideoAspectRatio);
}

double sub_1002E0B64(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

double sub_1002E0B9C(uint64_t a1)
{
  return sub_1002E0C40(a1, &qword_100557D18, (double *)&static Artwork.Size.musicVideoAspectRatio, &static Artwork.Size.videoAspectRatio, (uint64_t)sub_1002E0B00);
}

_QWORD *Artwork.Size.videoAspectRatio.unsafeMutableAddressor()
{
  if (qword_100557D28 != -1)
    swift_once(&qword_100557D28, sub_1002E0B9C);
  return &static Artwork.Size.videoAspectRatio;
}

double static Artwork.Size.videoAspectRatio.getter()
{
  return sub_1002E0B64(&qword_100557D28, (uint64_t)&static Artwork.Size.videoAspectRatio);
}

double sub_1002E0C1C(uint64_t a1)
{
  return sub_1002E0C40(a1, &qword_100557D20, (double *)&static Artwork.Size.verticalMusicVideoAspectRatio, &static Artwork.Size.verticalVideoAspectRatio, (uint64_t)sub_1002E0B38);
}

double sub_1002E0C40(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t a5)
{
  double result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = *a3;
  *a4 = *(_QWORD *)a3;
  return result;
}

_QWORD *Artwork.Size.verticalVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_100557D30 != -1)
    swift_once(&qword_100557D30, sub_1002E0C1C);
  return &static Artwork.Size.verticalVideoAspectRatio;
}

double static Artwork.Size.verticalVideoAspectRatio.getter()
{
  return sub_1002E0B64(&qword_100557D30, (uint64_t)&static Artwork.Size.verticalVideoAspectRatio);
}

void MPModelObject.artworkPlaceholder.getter(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  double v32;
  _QWORD v33[6];

  sub_10000B4C8(&qword_100558BB8);
  __chkstk_darwin();
  v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist.Variant(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self(MPModelGenericObject);
  v9 = swift_dynamicCastObjCClass(v1);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = v1;
    v12 = objc_msgSend(v10, "anyObject");
    if (v12)
    {
      v13 = v12;
      MPModelObject.artworkPlaceholder.getter(v33);

LABEL_20:
      v21 = v33[4];
      v22 = v33[5];
      v20 = (void *)v33[2];
      v24 = (id)v33[3];
      v17 = (void *)v33[0];
      v18 = (void *)v33[1];
      goto LABEL_21;
    }
LABEL_8:
    if (qword_100557CD8 != -1)
      swift_once(&qword_100557CD8, sub_1002DF63C);
    v17 = (void *)static Artwork.Placeholder.music;
    v18 = (void *)unk_100562740;
    v20 = (void *)qword_100562748;
    v19 = (void *)unk_100562750;
    v22 = *((_QWORD *)&xmmword_100562758 + 1);
    v21 = xmmword_100562758;
    v23 = (id)qword_100562748;
    v24 = v19;
    v25 = v17;
    v26 = v18;

    goto LABEL_21;
  }
  objc_opt_self(MPModelPlaylist);
  v14 = swift_dynamicCastObjCClass(v1);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = MPModelPropertyPlaylistType;
    v11 = v1;
    if (objc_msgSend(v15, "hasLoadedValueForKey:", v16))
    {
      MPModelPlaylistType.variant.getter((uint64_t)objc_msgSend(v15, "type"), (uint64_t)v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Playlist.Variant.regular(_:), v5);
        sub_1002E1764((uint64_t)v4);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      }
      v32 = sub_1002E17A4((uint64_t)v8, (uint64_t)v33);
      (*(void (**)(char *, uint64_t, double))(v6 + 8))(v8, v5, v32);

      goto LABEL_20;
    }
    goto LABEL_8;
  }
  objc_opt_self(MPModelRecordLabel);
  if (swift_dynamicCastObjCClass(v1)
    || (objc_opt_self(MPModelArtist), swift_dynamicCastObjCClass(v1))
    || (objc_opt_self(MPModelCurator), swift_dynamicCastObjCClass(v1)))
  {
    if (qword_100557CF0 != -1)
      swift_once(&qword_100557CF0, sub_1002DFB90);
    v27 = &static Artwork.Placeholder.microphone;
  }
  else
  {
    objc_opt_self(MPModelPerson);
    if (swift_dynamicCastObjCClass(v1))
    {
      if (qword_100557CF8 != -1)
        swift_once(&qword_100557CF8, sub_1002DFD5C);
      v27 = &static Artwork.Placeholder.person;
    }
    else
    {
      objc_opt_self(MPModelMovie);
      if (swift_dynamicCastObjCClass(v1)
        || (objc_opt_self(MPModelTVShow), swift_dynamicCastObjCClass(v1))
        || (objc_opt_self(MPModelTVEpisode), swift_dynamicCastObjCClass(v1))
        || (objc_opt_self(MPModelTVSeason), swift_dynamicCastObjCClass(v1)))
      {
        if (qword_100557CE8 != -1)
          swift_once(&qword_100557CE8, sub_1002DF9D4);
        v27 = &static Artwork.Placeholder.tv;
      }
      else
      {
        if (qword_100557CD8 != -1)
          swift_once(&qword_100557CD8, sub_1002DF63C);
        v27 = &static Artwork.Placeholder.music;
      }
    }
  }
  v17 = (void *)*v27;
  v18 = (void *)v27[1];
  v20 = (void *)v27[2];
  v28 = (void *)v27[3];
  v21 = v27[4];
  v22 = v27[5];
  v29 = v20;
  v24 = v28;
  v30 = v17;
  v31 = v18;
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v20;
  a1[3] = v24;
  a1[4] = v21;
  a1[5] = v22;
}

id GenericMusicItem.artworkPlaceholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t *v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id result;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t (*v32)(char *, uint64_t);
  id v33;
  id v34;
  id v35;
  void *v36;
  uint64_t (*v37)(char *, uint64_t);
  id v38;
  id v39;
  id v40;
  double v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[4];
  __int128 v46;

  v2 = v1;
  sub_10000B4C8(&qword_100558BB8);
  __chkstk_darwin();
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist.Variant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Playlist(0);
  v10 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin();
  v42 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GenericMusicItem(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v2, v12);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for GenericMusicItem.artist(_:))
    goto LABEL_2;
  if (v16 == enum case for GenericMusicItem.composer(_:) || v16 == enum case for GenericMusicItem.curator(_:))
    goto LABEL_10;
  if (v16 == enum case for GenericMusicItem.musicMovie(_:))
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (qword_100557CE8 != -1)
      swift_once(&qword_100557CE8, sub_1002DF9D4);
    v17 = &static Artwork.Placeholder.tv;
    goto LABEL_17;
  }
  if (v16 != enum case for GenericMusicItem.playlist(_:))
  {
    if (v16 == enum case for GenericMusicItem.recordLabel(_:))
    {
LABEL_2:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      if (qword_100557CF0 != -1)
        swift_once(&qword_100557CF0, sub_1002DFB90);
      v17 = &static Artwork.Placeholder.microphone;
LABEL_17:
      v19 = (void *)*v17;
      v20 = (void *)v17[1];
      v22 = (void *)v17[2];
      v21 = (void *)v17[3];
      v44 = *((_OWORD *)v17 + 2);
      v23 = v22;
      v24 = v21;
      v25 = v19;
      result = v20;
      goto LABEL_18;
    }
    if (v16 != enum case for GenericMusicItem.socialProfile(_:))
    {
      if (v16 != enum case for GenericMusicItem.tvEpisode(_:)
        && v16 != enum case for GenericMusicItem.tvSeason(_:)
        && v16 != enum case for GenericMusicItem.tvShow(_:))
      {
        if (qword_100557CD8 != -1)
          swift_once(&qword_100557CD8, sub_1002DF63C);
        v19 = (void *)static Artwork.Placeholder.music;
        v20 = (void *)unk_100562740;
        v22 = (void *)qword_100562748;
        v36 = (void *)unk_100562750;
        v44 = xmmword_100562758;
        v37 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v38 = (id)static Artwork.Placeholder.music;
        v39 = v20;
        v40 = v22;
        v24 = v36;
        result = (id)v37(v15, v12);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (qword_100557CF8 != -1)
      swift_once(&qword_100557CF8, sub_1002DFD5C);
    v17 = &static Artwork.Placeholder.person;
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
  v28 = v43;
  v29 = v42;
  v30 = (*(uint64_t (**)(void))(v10 + 32))();
  Playlist.variant.getter(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v41 = sub_1002E17A4((uint64_t)v9, (uint64_t)v45);
    (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v41);
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v29, v28);
    v27 = v46;
    v22 = (void *)v45[2];
    v24 = (id)v45[3];
    v19 = (void *)v45[0];
    v20 = (void *)v45[1];
    goto LABEL_19;
  }
  sub_1002E1764((uint64_t)v5);
  if (qword_100557CD8 != -1)
    swift_once(&qword_100557CD8, sub_1002DF63C);
  v19 = (void *)static Artwork.Placeholder.music;
  v20 = (void *)unk_100562740;
  v22 = (void *)qword_100562748;
  v31 = (void *)unk_100562750;
  v44 = xmmword_100562758;
  v32 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v33 = (id)static Artwork.Placeholder.music;
  v34 = v20;
  v35 = v22;
  v24 = v31;
  result = (id)v32(v29, v28);
LABEL_18:
  v27 = v44;
LABEL_19:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v24;
  *(_OWORD *)(a1 + 32) = v27;
  return result;
}

BOOL _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (!v5)
      return 0;
    sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
    v6 = v5;
    v7 = v4;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10)
      return 0;
    sub_1000DD108(0, (unint64_t *)&qword_100560950, UIColor_ptr);
    v11 = v10;
    v12 = v9;
    v13 = static NSObject.== infix(_:_:)(v12, v11);

    if ((v13 & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v14 = *(void **)(a1 + 16);
  v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15)
      return 0;
    sub_1000DD108(0, &qword_10055F280, UIImage_ptr);
    v16 = v15;
    v17 = v14;
    v18 = static NSObject.== infix(_:_:)(v17, v16);

    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32))
  {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return 0;
}

uint64_t sub_1002E1764(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100558BB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1002E17A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  id v16;
  int v17;
  NSString v18;
  id v19;
  id v20;
  double result;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Playlist.Variant(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v22 - v8;
  v10 = enum case for Playlist.Variant.folder(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))((char *)&v22 - v8, enum case for Playlist.Variant.folder(_:), v4);
  v11 = sub_1002E1E58(&qword_100558C68, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (const char *)&protocol conformance descriptor for Playlist.Variant);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v4, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, v4, v11);
  v13 = v22;
  v12 = v23;
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v9, v4);
  v15 = 0;
  if (v12 != v13)
  {
    if (qword_100557CC0 != -1)
      swift_once(&qword_100557CC0, sub_1002DD544);
    v15 = qword_100558B80;
    v16 = (id)qword_100558B80;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v17 != enum case for Playlist.Variant.smart(_:) && v17 != enum case for Playlist.Variant.genius(_:) && v17 != v10)
    v14(v7, v4);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v18);

  v20 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  *(_QWORD *)a2 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v20;
  result = 0.4;
  *(_OWORD *)(a2 + 32) = xmmword_1004387D0;
  return result;
}

id sub_1002E1A64()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  return v1;
}

unint64_t sub_1002E1B38()
{
  unint64_t result;

  result = qword_100558BC0;
  if (!qword_100558BC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_100558BC0);
  }
  return result;
}

uint64_t sub_1002E1B7C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1002E1E58(&qword_100558B68, a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, protocol conformance descriptor for Artwork.Placeholder.View);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Artwork.Placeholder.View()
{
  return objc_opt_self(_TtCVV11MusicCoreUI7Artwork11Placeholder4View);
}

uint64_t sub_1002E1BD8(uint64_t a1, uint64_t a2)
{
  return sub_1002E1E58(&qword_100558C08, a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, protocol conformance descriptor for Artwork.Placeholder.View);
}

unint64_t sub_1002E1C04(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1002E1C30();
  result = sub_1002DB588();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002E1C30()
{
  unint64_t result;

  result = qword_100558C38;
  if (!qword_100558C38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_100558C38);
  }
  return result;
}

uint64_t _s11PlaceholderVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t _s11PlaceholderVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t _s11PlaceholderVwta(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

uint64_t _s11PlaceholderVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s11PlaceholderVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Placeholder()
{
  return &type metadata for Artwork.Placeholder;
}

uint64_t sub_1002E1E50()
{
  return sub_10023AA54(64);
}

uint64_t sub_1002E1E58(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), const char *a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

__n128 CAPackageDefinition.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 CAPackageDefinition.transform.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 56) = result;
  return result;
}

__n128 CAPackageDefinition.init(name:bundle:transform:states:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __n128 result;

  v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_OWORD *)(a6 + 40) = v6;
  result = *(__n128 *)(a4 + 32);
  *(__n128 *)(a6 + 56) = result;
  *(_QWORD *)(a6 + 72) = a5;
  return result;
}

__n128 CAPackageDefinition.scaled(byX:y:)@<Q0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v3;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGFloat tx;
  CGFloat ty;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGAffineTransform v20;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v15 = *(_OWORD *)(v3 + 40);
  v17 = *(_OWORD *)(v3 + 24);
  v5 = *(double *)(v3 + 56);
  v6 = *(double *)(v3 + 64);
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 72);
  v19 = *(_OWORD *)(v3 + 8);
  CGAffineTransformMakeScale(&t1, a2, a3);
  v9 = *(_OWORD *)&t1.a;
  v10 = *(_OWORD *)&t1.c;
  v11 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v17;
  *(_OWORD *)&t1.c = v15;
  t1.tx = v5;
  t1.ty = v6;
  *(_OWORD *)&t2.a = v9;
  *(_OWORD *)&t2.c = v10;
  *(_OWORD *)&t2.tx = v11;
  CGAffineTransformConcat(&v20, &t1, &t2);
  v16 = *(__n128 *)&v20.c;
  v18 = *(_OWORD *)&v20.a;
  tx = v20.tx;
  ty = v20.ty;
  sub_1002E1FC4(v3);
  *(_QWORD *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v19;
  *(_OWORD *)(a1 + 24) = v18;
  result = v16;
  *(__n128 *)(a1 + 40) = v16;
  *(CGFloat *)(a1 + 56) = tx;
  *(CGFloat *)(a1 + 64) = ty;
  *(_QWORD *)(a1 + 72) = v8;
  return result;
}

uint64_t sub_1002E1FC4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1002E200C(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t *)v8, (uint64_t)v9) & 1;
}

void *sub_1002E2064()
{
  uint64_t v0;
  void *result;

  v0 = _s16PackageDataCacheCMa();
  swift_allocObject(v0, 32, 7);
  result = (void *)sub_1002E247C();
  off_100558C78 = result;
  return result;
}

double sub_1002E20A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  __chkstk_darwin();
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + 24);
  v16 = (_QWORD *)swift_allocObject(&unk_10051A398, 56, 7);
  v16[2] = v4;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a1;
  v16[6] = a2;
  aBlock[4] = sub_1002E3248;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015F6F8;
  aBlock[3] = &unk_10051A3B0;
  v17 = _Block_copy(aBlock);
  v18 = v15;
  swift_retain(v4);
  swift_bridgeObjectRetain();
  v19 = sub_10003A5E4(a1, a2);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_10001254C((unint64_t *)&unk_10055A540, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10000B4C8(&qword_100558B58);
  v22 = sub_1001630EC((unint64_t *)&qword_10055A550, &qword_100558B58);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  *(_QWORD *)&result = swift_release(v29).n128_u64[0];
  return result;
}

uint64_t sub_1002E22C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v13[24];

  swift_beginAccess(a1 + 16, v13, 33, 0);
  swift_bridgeObjectRetain();
  sub_10003A5E4(a4, a5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_100308C80(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 16) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess(v13);
}

uint64_t sub_1002E2384(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[24];

  swift_beginAccess(a2 + 16, v17, 0, 0);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_10013B57C(a3, a4);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      v12 = *v11;
      v13 = v11[1];
      sub_10003A5E4(*v11, v13);
    }
    else
    {
      v12 = 0;
      v13 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
    v13 = 0xF000000000000000;
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = v12;
  a1[1] = v13;
  return sub_10009FCF0(v14, v15);
}

uint64_t sub_1002E2450()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1002E247C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v1 = v0;
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_1002D36C0((uint64_t)_swiftEmptyArrayStorage);
  v10 = sub_1000DD108(0, (unint64_t *)&qword_1005593F0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10001254C((unint64_t *)&unk_100558250, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10000B4C8((uint64_t *)&unk_100559400);
  v13 = sub_1001630EC((unint64_t *)&qword_100558260, (uint64_t *)&unk_100559400);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v5, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000001004513B0, v9, v7, v4, 0);
  return v1;
}

char *CAPackage.init(definition:)(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  __n128 v16;
  __int128 v17;
  uint64_t *v18;
  id v19;
  NSString v20;
  NSString v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  Class v31;
  uint64_t *v32;
  id v33;
  id v34;
  char *v35;
  id v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  void *ObjCClassFromMetadata;
  unint64_t v44;
  Class isa;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  id aBlock[5];
  uint64_t v57;
  __int128 v58;

  sub_10000B4C8(&qword_1005585E0);
  __chkstk_darwin();
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin();
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v50 = (char *)&v49 - v6;
  if (qword_100557D38 != -1)
    swift_once(&qword_100557D38, sub_1002E2064);
  v7 = off_100558C78;
  v8 = *a1;
  v9 = a1[1];
  v55 = a1;
  v58 = xmmword_1004387E0;
  v10 = (void *)*((_QWORD *)off_100558C78 + 3);
  v11 = (_QWORD *)swift_allocObject(&unk_10051A298, 48, 7);
  v11[2] = &v58;
  v11[3] = v7;
  v53 = v8;
  v11[4] = v8;
  v11[5] = v9;
  v12 = swift_allocObject(&unk_10051A2C0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_1002E2FA8;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_1000D75E8;
  v57 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100185F2C;
  aBlock[3] = &unk_10051A2D8;
  v13 = _Block_copy(aBlock);
  v14 = v57;
  v15 = v10;
  swift_retain(v7);
  swift_bridgeObjectRetain();
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v15, v13);

  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v12, "", 129, 53, 35, 1, v16);
  swift_release(v12);
  if ((v13 & 1) != 0)
    __break(1u);
  v17 = v58;
  swift_release(v11);
  if (*((_QWORD *)&v17 + 1) >> 60 == 15)
  {
    v18 = v55;
    v19 = (id)v55[2];
    v20 = String._bridgeToObjectiveC()();
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v19, "URLForResource:withExtension:", v20, v21);

    if (v22)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

      v23 = v54;
      v24 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      v25 = v52;
      v24(v3, v5, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v3, 0, 1, v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v3, 1, v25) != 1)
      {
        v26 = v50;
        v24(v50, v3, v25);
        v27 = v51;
        v28 = Data.init(contentsOf:options:)(v26, 0);
        if (v27)
        {

          sub_1002E2FDC(v18);
          (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v25);
        }
        else
        {
          v41 = v28;
          v42 = v29;
          sub_1002E20A0(v28, v29, v53, v9);
          ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
          v44 = v42;
          isa = Data._bridgeToObjectiveC()().super.isa;
          aBlock[0] = 0;
          v3 = (char *)objc_msgSend(ObjCClassFromMetadata, "packageWithData:type:options:error:", isa, kCAPackageTypeArchive, 0, aBlock);

          v46 = aBlock[0];
          if (v3)
          {
            v47 = aBlock[0];
          }
          else
          {
            v3 = (char *)aBlock[0];
            _convertNSErrorToError(_:)(v46);

            swift_willThrow(v48);
          }

          sub_10003A628(v41, v44);
          sub_1002E2FDC(v18);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v25);
        }
        return v3;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v3, 1, 1, v52);
    }
    sub_1002D6840((uint64_t)v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
    v3 = v35;
    v36 = objc_allocWithZone((Class)NSError);
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, -1002, 0);

    swift_willThrow(v38);
    sub_1002E2FDC(v18);

    return v3;
  }
  v30 = (void *)swift_getObjCClassFromMetadata();
  v31 = Data._bridgeToObjectiveC()().super.isa;
  aBlock[0] = 0;
  v3 = (char *)objc_msgSend(v30, "packageWithData:type:options:error:", v31, kCAPackageTypeArchive, 0, aBlock);

  v32 = v55;
  v33 = aBlock[0];
  if (v3)
  {
    v34 = aBlock[0];
  }
  else
  {
    v3 = (char *)aBlock[0];
    _convertNSErrorToError(_:)(v33);

    swift_willThrow(v39);
  }
  sub_1002E2FDC(v32);
  sub_10009FCF0(v17, *((unint64_t *)&v17 + 1));
  return v3;
}

id static CAPackageDefinition.play.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_1005187E0, a1);
}

id static CAPackageDefinition.pause.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_100518810, a1);
}

id static CAPackageDefinition.stop.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_100518840, a1);
}

id static CAPackageDefinition.skipForward.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0x4264726177726F46, 0xEF647261776B6361, (uint64_t)&off_100518870, a1);
}

id static CAPackageDefinition.skipBackward.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  id v6;
  CGAffineTransform v7;

  if (qword_100557CA0 != -1)
    swift_once(&qword_100557CA0, sub_1002D2FA0);
  v6 = (id)qword_100562670;
  CGAffineTransformMakeScale(&v7, -1.0, 1.0);
  v2 = *(_OWORD *)&v7.a;
  v3 = *(_OWORD *)&v7.c;
  v4 = *(_OWORD *)&v7.tx;
  *(_QWORD *)a1 = 0x4264726177726F46;
  *(_QWORD *)(a1 + 8) = 0xEF647261776B6361;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = &off_1005188D0;
  return v6;
}

id static CAPackageDefinition.favorite.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0x657469726F766146, 0xE800000000000000, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteDark.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0x657469726F766146, 0xEC0000006B726144, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastDark.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0xD000000000000018, 0x8000000100451300, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastLight.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002E2E2C(0xD000000000000019, 0x8000000100451320, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id sub_1002E2E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;

  if (qword_100557CA0 != -1)
    swift_once(&qword_100557CA0, sub_1002D2FA0);
  v8 = (void *)qword_100562670;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v8;
  a4[3] = 0x3FF0000000000000;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = 0x3FF0000000000000;
  a4[7] = 0;
  a4[8] = 0;
  a4[9] = a3;
  return v8;
}

uint64_t _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[3];
  _OWORD v12[3];

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0) & 1) == 0)
    return 0;
  sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1[2], *(_QWORD *)(a2 + 16)) & 1) == 0)
    return 0;
  v8 = *(_OWORD *)(a1 + 5);
  v12[0] = *(_OWORD *)(a1 + 3);
  v12[1] = v8;
  v12[2] = *(_OWORD *)(a1 + 7);
  v9 = *(_OWORD *)(a2 + 40);
  v11[0] = *(_OWORD *)(a2 + 24);
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a2 + 56);
  if ((static CGAffineTransform.== infix(_:_:)(v12, v11) & 1) != 0)
    return sub_1002F2B54((_QWORD *)a1[9], *(_QWORD **)(a2 + 72));
  else
    return 0;
}

uint64_t sub_1002E2F7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E2FA8()
{
  uint64_t v0;

  return sub_1002E2384(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1002E2FB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E2FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002E2FD4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

_QWORD *sub_1002E2FDC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  v3 = (void *)a1[2];
  swift_bridgeObjectRelease(a1[9]);

  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t destroy for CAPackageDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
}

uint64_t initializeWithCopy for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  v5 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAPackageDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v8 = a2[9];
  v9 = a1[9];
  a1[9] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for CAPackageDefinition()
{
  return &type metadata for CAPackageDefinition;
}

uint64_t _s16PackageDataCacheCMa()
{
  return objc_opt_self(_TtCE11MusicCoreUICSo9CAPackageP33_5B7A704C3FBBA94F30354653B0D2FAF216PackageDataCache);
}

uint64_t sub_1002E3214()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease();
  sub_10003A628(v0[5], v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002E3248()
{
  uint64_t v0;

  return sub_1002E22C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

id CoreAnimationPackageView.__allocating_init(definition:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CoreAnimationPackageView.init(definition:)(a1);
}

id CoreAnimationPackageView.init(definition:)(uint64_t a1)
{
  char *v1;
  char *v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  id v7;
  id v8;
  uint64_t v9;
  objc_super v11;

  swift_getObjectType();
  v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;
  v4 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  v5 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *((_OWORD *)v4 + 1) = v6;
  sub_1002E1FC4(a1);
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  v7 = objc_msgSendSuper2(&v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_1002E39F4();
  CoreAnimationPackageView.reset()();
  sub_1000DD108(0, &qword_100558DA8, UITraitCollection_ptr);
  v8 = v7;
  static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  v9 = UIView.registerForTraitChanges<A>(_:handler:)();
  sub_1002E2FDC((_QWORD *)a1);
  swift_unknownObjectRelease(v9);
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for CoreAnimationPackageView()
{
  return objc_opt_self(_TtC11MusicCoreUI24CoreAnimationPackageView);
}

void sub_1002E3448(uint64_t *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22[24];
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[3];
  _OWORD v26[4];

  v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess(&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v22, 0, 0);
  v4 = *((_QWORD *)v3 + 1);
  v5 = (void *)*((_QWORD *)v3 + 2);
  v20 = *(_OWORD *)(v3 + 40);
  v21 = *(_OWORD *)(v3 + 24);
  v19 = *(_OWORD *)(v3 + 56);
  v6 = (_QWORD *)*((_QWORD *)v3 + 9);
  v7 = *a1;
  v8 = a1[1];
  v9 = *(_QWORD *)v3 == *a1 && v4 == v8;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v3, v4, *a1, a1[1], 0) & 1) != 0)
  {
    sub_1000DD108(0, (unint64_t *)&qword_100559510, NSObject_ptr);
    v10 = a1[2];
    swift_bridgeObjectRetain();
    v11 = v5;
    swift_bridgeObjectRetain();
    if ((static NSObject.== infix(_:_:)(v11, v10) & 1) != 0
      && (v26[0] = v21,
          v26[1] = v20,
          v26[2] = v19,
          v12 = *(_OWORD *)(a1 + 5),
          v24[0] = *(_OWORD *)(a1 + 3),
          v24[1] = v12,
          v24[2] = *(_OWORD *)(a1 + 7),
          (static CGAffineTransform.== infix(_:_:)(v26, v24) & 1) != 0))
    {
      v13 = sub_1002F2B54(v6, (_QWORD *)a1[9]);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        return;
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  v14 = *((_QWORD *)v3 + 1);
  v15 = *(_QWORD *)v3 == v7 && v14 == v8;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v3, v14, v7, v8, 0) & 1) == 0)
    sub_1002E39F4();
  v16 = *(_OWORD *)(v3 + 40);
  v25[0] = *(_OWORD *)(v3 + 24);
  v17 = *(_OWORD *)(v3 + 56);
  v25[1] = v16;
  v25[2] = v17;
  v18 = *(_OWORD *)(a1 + 5);
  v23[0] = *(_OWORD *)(a1 + 3);
  v23[1] = v18;
  v23[2] = *(_OWORD *)(a1 + 7);
  if ((static CGAffineTransform.== infix(_:_:)(v25, v23) & 1) == 0)
    objc_msgSend(v1, "setNeedsLayout");
  CoreAnimationPackageView.reset()();
}

uint64_t CoreAnimationPackageView.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE v9[24];

  v3 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess(v3, v9, 0, 0);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 56);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  v7 = v5;
  return swift_bridgeObjectRetain();
}

_QWORD *CoreAnimationPackageView.definition.setter(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[24];
  _OWORD v11[5];

  v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, v10, 1, 0);
  v4 = v3[1];
  v5 = v3[3];
  v11[2] = v3[2];
  v11[3] = v5;
  v11[4] = v3[4];
  v11[0] = *v3;
  v11[1] = v4;
  v6 = (void *)*((_QWORD *)v3 + 2);
  v7 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v7;
  v8 = *(_OWORD *)(a1 + 64);
  v3[3] = *(_OWORD *)(a1 + 48);
  v3[4] = v8;
  v3[2] = *(_OWORD *)(a1 + 32);
  sub_1002E1FC4((uint64_t)v11);
  sub_1002E1FC4(a1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1002E3448((uint64_t *)v11);
  sub_1002E2FDC((_QWORD *)a1);
  return sub_1002E2FDC(v11);
}

void (*CoreAnimationPackageView.definition.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = (char *)malloc(0x118uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  *((_QWORD *)v3 + 33) = v1;
  *((_QWORD *)v3 + 34) = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3 + 240, 1, 0);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(void **)(v5 + 16);
  *((_QWORD *)v3 + 20) = *(_QWORD *)v5;
  *((_QWORD *)v3 + 21) = v6;
  v3 += 160;
  v8 = *(_QWORD *)(v5 + 72);
  *((_QWORD *)v3 + 2) = v7;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v5 + 24);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(v5 + 56);
  *((_QWORD *)v3 + 9) = v8;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  return sub_1002E383C;
}

void sub_1002E383C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  id v25;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 160);
  v4 = *(_QWORD *)(*a1 + 168);
  v5 = *(void **)(*a1 + 176);
  v7 = *(_QWORD *)(*a1 + 184);
  v6 = *(_QWORD *)(*a1 + 192);
  v9 = *(_QWORD *)(*a1 + 200);
  v8 = *(_QWORD *)(*a1 + 208);
  v11 = *(_QWORD *)(*a1 + 216);
  v10 = *(_QWORD *)(*a1 + 224);
  v12 = *(_QWORD *)(*a1 + 232);
  v13 = *(_QWORD *)(*a1 + 264) + *(_QWORD *)(*a1 + 272);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v13;
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_OWORD *)(v13 + 32);
    v16 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 64) = v16;
    *(_OWORD *)(v2 + 16) = v14;
    *(_OWORD *)(v2 + 32) = v15;
    v17 = *(void **)(v13 + 16);
    *(_QWORD *)v13 = v3;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    swift_bridgeObjectRetain_n(v4, 2);
    v18 = v5;
    swift_bridgeObjectRetain_n(v12, 2);
    v19 = v18;
    sub_1002E1FC4(v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_1002E3448((uint64_t *)v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_1002E2FDC((_QWORD *)v2);
    v20 = *(void **)(v2 + 176);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v13;
    v21 = *(_OWORD *)(v13 + 16);
    v22 = *(_OWORD *)(v13 + 32);
    v23 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 144) = v23;
    *(_OWORD *)(v2 + 96) = v21;
    *(_OWORD *)(v2 + 112) = v22;
    v24 = *(void **)(v13 + 16);
    *(_QWORD *)v13 = v3;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    sub_1002E1FC4(v2 + 80);
    swift_bridgeObjectRetain();
    v25 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_1002E3448((uint64_t *)(v2 + 80));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_1002E2FDC((_QWORD *)(v2 + 80));
  }
  free((void *)v2);
}

void sub_1002E39F4()
{
  char *v0;
  char *v1;
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  id v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50[2];
  char v51[24];
  _OWORD v52[5];

  v1 = v0;
  sub_1000DD108(0, &qword_100558E00, CAPackage_ptr);
  v2 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v51, 0, 0);
  v3 = *((_OWORD *)v2 + 2);
  v4 = *((_OWORD *)v2 + 3);
  v5 = *(_OWORD *)v2;
  v52[1] = *((_OWORD *)v2 + 1);
  v52[2] = v3;
  v6 = *((_OWORD *)v2 + 4);
  v52[3] = v4;
  v52[4] = v6;
  v52[0] = v5;
  sub_1002E1FC4((uint64_t)v52);
  v7 = CAPackage.init(definition:)((uint64_t *)v52);
  v26 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = v7;
  v27 = v7;

  v28 = objc_msgSend(v27, "rootLayer");
  if (v28)
  {
    v29 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = v28;
    v30 = v28;
    objc_msgSend(v29, "removeFromSuperlayer");

    v31 = objc_msgSend(objc_allocWithZone((Class)CAStateController), "initWithLayer:", v30);
    v32 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = v31;

    objc_msgSend(v30, "removeFromSuperlayer");
    objc_msgSend(v30, "setGeometryFlipped:", objc_msgSend(v27, "isGeometryFlipped"));
    v33 = objc_msgSend(v1, "layer");
    objc_msgSend(v33, "addSublayer:", v30);

    v34 = objc_msgSend(v1, "layer");
    objc_msgSend(v34, "bounds");
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;

    objc_msgSend(v30, "setPosition:", CGRect.center.getter(v36, v38, v40, v42));
    sub_1002E4CC4();

  }
  else
  {
    v43 = sub_1002E5D04();
    v44 = swift_allocError(&type metadata for CoreAnimationPackageView.Error, v43, 0, 0);
    swift_willThrow(v44);

    if (qword_100557D48 != -1)
      swift_once(&qword_100557D48, sub_1002E62B8);
    v8 = type metadata accessor for Logger(0);
    sub_10000D78C(v8, (uint64_t)qword_100562880);
    v9 = v1;
    swift_errorRetain(v44);
    v10 = v9;
    v11 = swift_errorRetain(v44);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v50[0] = v15;
      *(_DWORD *)v14 = 136446466;
      v16 = *((_QWORD *)v2 + 1);
      v17 = (void *)*((_QWORD *)v2 + 2);
      v18 = *((_QWORD *)v2 + 9);
      v45[0] = *(_QWORD *)v2;
      v45[1] = v16;
      v45[2] = v17;
      v19 = *(_OWORD *)(v2 + 40);
      v46 = *(_OWORD *)(v2 + 24);
      v47 = v19;
      v48 = *(_OWORD *)(v2 + 56);
      v49 = v18;
      swift_bridgeObjectRetain();
      v20 = v17;
      swift_bridgeObjectRetain();
      v21 = (char *)String.init<A>(describing:)(v45, &type metadata for CAPackageDefinition);
      *(_QWORD *)(v14 + 4) = sub_1002E9B3C(v21, v22, v50);

      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      v45[0] = v44;
      swift_errorRetain(v44);
      v23 = sub_10000B4C8(&qword_1005593C0);
      v24 = (char *)String.init<A>(describing:)(v45, v23);
      *(_QWORD *)(v14 + 14) = sub_1002E9B3C(v24, v25, v50);
      swift_bridgeObjectRelease();
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to load CAPackage with definition=%{public}s. Error=%{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v44);
    }
    else
    {
      swift_errorRelease(v44);

      swift_errorRelease(v44);
      swift_errorRelease(v44);

    }
  }
}

void sub_1002E3E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void **v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  unsigned int v21;
  double v22;
  _BYTE v23[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v23, 0, 0);
  v6 = v5[1];
  if (v6)
  {
    v7 = *v5;
    if (a2)
    {
      v8 = v7 == a1 && v6 == a2;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a1, a2, 0) & 1) != 0)
        return;
    }
    v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    v10 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v10)
      return;
    v11 = v10;
    swift_bridgeObjectRetain();
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    if (!a2)
      return;
    v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    v13 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v13)
      return;
    v11 = v13;
    v12 = 0;
  }
  v14 = objc_msgSend(v11, "stateWithName:", v12);

  if (v14)
  {
    v15 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
    if (v15)
    {
      v16 = *v9;
      v17 = (void *)objc_opt_self(UIView);
      v18 = v16;
      v19 = v15;
      v20 = v14;
      v21 = objc_msgSend(v17, "areAnimationsEnabled");
      LODWORD(v22) = 0;
      if (v21)
        *(float *)&v22 = 1.0;
      objc_msgSend(v19, "setState:ofLayer:transitionSpeed:", v20, v18, v22);

    }
  }
}

uint64_t CoreAnimationPackageView.stateName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CoreAnimationPackageView.stateName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  sub_1002E3E5C(v6, v7);
  return swift_bridgeObjectRelease();
}

void (*CoreAnimationPackageView.stateName.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName;
  v3[5] = v1;
  v3[6] = v4;
  v5 = (_QWORD *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = v5[1];
  v3[3] = *v5;
  v3[4] = v6;
  swift_bridgeObjectRetain();
  return sub_1002E413C;
}

void sub_1002E413C(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = (uint64_t *)(v5 + v4);
  v9 = *v7;
  v8 = v7[1];
  *v7 = v3;
  v7[1] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1002E3E5C(v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002E3E5C(v9, v8);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

void *CoreAnimationPackageView.foregroundColor.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CoreAnimationPackageView.foregroundColor.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  Class v5;
  void *v6;
  id v7;
  Class isa;
  _BYTE v9[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor, v9, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  if (*v3)
  {
    sub_1002E4CC4();
  }
  else
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (v6)
    {
      v7 = v6;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v7, "setFilters:", isa);

      v5 = isa;
    }
  }

}

void (*CoreAnimationPackageView.foregroundColor.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return sub_1002E4328;
}

void sub_1002E4328(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    if (*(_QWORD *)(v4 + v3[4]))
    {
      sub_1002E4CC4();
    }
    else
    {
      v5 = *(void **)(v4 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
      if (v5)
      {
        v6 = v5;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v6, "setFilters:", isa);

      }
    }
  }
  free(v3);
}

Swift::Void __swiftcall CoreAnimationPackageView.reset()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, v19, 0, 0);
  v2 = *(_QWORD **)(v1 + 72);
  if (v2[2])
  {
    v4 = v2[4];
    v3 = v2[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, &v18, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = v4;
  v5[1] = v3;
  sub_1002E3E5C(v6, v7);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_bridgeObjectRetain();
  v13 = swift_unknownObjectRetain_n(v11, 2, v12);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v10);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  swift_release(v14);
  if (v15 == v9 - (v9 != 0))
  {
    v16 = (_QWORD *)swift_dynamicCastClass(v8, v10);
    if (!v16)
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1002E50D8(v8, v8 + 32, v9 != 0, (2 * v9) | 1);
    v16 = v17;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates) = v16;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CoreAnimationPackageView.set(stateName:forSublayer:)(Swift::String stateName, Swift::String forSublayer)
{
  uint64_t v2;
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  unsigned int v16;
  double v17;
  id v18;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
  if (v3)
  {
    object = forSublayer._object;
    countAndFlagsBits = forSublayer._countAndFlagsBits;
    v6 = objc_msgSend(v3, "sublayers");
    if (v6)
    {
      v7 = v6;
      v8 = sub_1000DD108(0, &qword_100558DB0, CALayer_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

      swift_bridgeObjectRetain();
      v18 = sub_1002E5474(v9, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18)
      {
        v10 = String._bridgeToObjectiveC()();
        v11 = objc_msgSend(v18, "stateWithName:", v10);

        if (v11)
        {
          v12 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
          if (v12)
          {
            v13 = (void *)objc_opt_self(UIView);
            v14 = v12;
            v15 = v11;
            v11 = v18;
            v16 = objc_msgSend(v13, "areAnimationsEnabled");
            LODWORD(v17) = 0;
            if (v16)
              *(float *)&v17 = 1.0;
            objc_msgSend(v14, "setState:ofLayer:transitionSpeed:", v15, v11, v17, v18);

          }
        }

      }
    }
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.advanceState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16)
    || (v4 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition,
        swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, &v10, 0, 0),
        *v2 = *(_QWORD *)(v4 + 72),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        v3 = *v2,
        *(_QWORD *)(*v2 + 16)))
  {
    v6 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    swift_bridgeObjectRetain();
    sub_1002E5604(0, 1);
    v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
    swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v11, 1, 0);
    v8 = *v7;
    v9 = v7[1];
    *v7 = v6;
    v7[1] = v5;
    sub_1002E3E5C(v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.startCyclingThroughStates(with:)(Swift::Double with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  double v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v3 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer);
  if (!v4 || (objc_msgSend(v4, "timeInterval"), v5 != with))
  {
    v6 = (void *)objc_opt_self(NSTimer);
    v7 = swift_allocObject(&unk_10051A3F8, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16);
    v12[4] = sub_1002E573C;
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100133CF8;
    v12[3] = &unk_10051A410;
    v8 = _Block_copy(v12);
    swift_release(v13);
    v9 = objc_msgSend(v6, "scheduledTimerWithTimeInterval:repeats:block:", 1, v8, with);
    _Block_release(v8);
    v10 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = v9;
    v11 = v9;
    objc_msgSend(v10, "invalidate");

  }
}

void sub_1002E4910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    CoreAnimationPackageView.advanceState()();

  }
}

Swift::Void __swiftcall CoreAnimationPackageView.stopCyclingThroughStates()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer))
  {
    CoreAnimationPackageView.reset()();
    v2 = *(void **)(v0 + v1);
    v3 = v2;
    *(_QWORD *)(v0 + v1) = 0;
    objc_msgSend(v2, "invalidate");

  }
}

Swift::Void __swiftcall CoreAnimationPackageView.layoutSubviews()()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  double v20;
  double v21;
  double Height;
  double v23;
  CGFloat m21;
  CGFloat m22;
  char *v26;
  __int128 v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  CGFloat rect;
  __int128 v39;
  __int128 v40;
  CATransform3D t1;
  CGAffineTransform v42;
  CGAffineTransform t2;
  char v44[24];
  objc_super v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v45.receiver = v0;
  v45.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  objc_msgSendSuper2(&v45, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, "layer");
    objc_msgSend(v3, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    objc_msgSend(v2, "bounds");
    v37 = v12;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v46.origin.x = v5;
    v46.origin.y = v7;
    v46.size.width = v9;
    v46.size.height = v11;
    Width = CGRectGetWidth(v46);
    v47.origin.x = v5;
    v47.origin.y = v7;
    v47.size.width = v9;
    rect = v11;
    v47.size.height = v11;
    v20 = Width / CGRectGetHeight(v47);
    v48.origin.x = v37;
    v48.origin.y = v14;
    v48.size.width = v16;
    v48.size.height = v18;
    v21 = CGRectGetWidth(v48);
    v49.origin.x = v37;
    v49.origin.y = v14;
    v49.size.width = v16;
    v49.size.height = v18;
    if (v20 >= v21 / CGRectGetHeight(v49))
    {
      v52.origin.x = v5;
      v52.origin.y = v7;
      v52.size.width = v9;
      v52.size.height = rect;
      Height = CGRectGetHeight(v52);
      v53.origin.x = v37;
      v53.origin.y = v14;
      v53.size.width = v16;
      v53.size.height = v18;
      v23 = CGRectGetHeight(v53);
    }
    else
    {
      v50.origin.x = v5;
      v50.origin.y = v7;
      v50.size.width = v9;
      v50.size.height = rect;
      Height = CGRectGetWidth(v50);
      v51.origin.x = v37;
      v51.origin.y = v14;
      v51.size.width = v16;
      v51.size.height = v18;
      v23 = CGRectGetWidth(v51);
    }
    CGAffineTransformMakeScale((CGAffineTransform *)&t1, Height / v23, Height / v23);
    v39 = *(_OWORD *)&t1.m13;
    v40 = *(_OWORD *)&t1.m11;
    m21 = t1.m21;
    m22 = t1.m22;
    v26 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
    swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v44, 0, 0);
    *(_OWORD *)&t1.m11 = v40;
    *(_OWORD *)&t1.m13 = v39;
    t1.m21 = m21;
    t1.m22 = m22;
    v27 = *(_OWORD *)(v26 + 40);
    *(_OWORD *)&t2.a = *(_OWORD *)(v26 + 24);
    *(_OWORD *)&t2.c = v27;
    *(_OWORD *)&t2.tx = *(_OWORD *)(v26 + 56);
    CGAffineTransformConcat(&v42, (CGAffineTransform *)&t1, &t2);
    t2 = v42;
    CATransform3DMakeAffineTransform(&t1, &t2);
    objc_msgSend(v2, "setTransform:", &t1);
    v28 = objc_msgSend(v0, "layer");
    objc_msgSend(v28, "bounds");
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    objc_msgSend(v2, "setPosition:", CGRect.center.getter(v30, v32, v34, v36));
  }
}

id sub_1002E4CC4()
{
  char *v0;
  void *v1;
  void **v2;
  double v3;
  void *v4;
  id v5;
  Class v6;
  NSString v7;
  id v8;
  Class isa;
  Class v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  Class v19;
  void *v20;
  _BYTE v22[24];

  v1 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v1, "begin");
  objc_msgSend(v1, "setDisableActions:", 1);
  v2 = (void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor];
  *(_QWORD *)&v3 = swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor], v22, 0, 0).n128_u64[0];
  v4 = *v2;
  if (*v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorMonochrome);
    v5 = objc_allocWithZone((Class)CAFilter);
    v6 = v4;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v5, "initWithType:", v7);

    isa = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v8, "setValue:forKey:", isa, kCAFilterInputBias);

    v10 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v8, "setValue:forKey:", v10, kCAFilterInputAmount);

    v11 = objc_msgSend(v0, "traitCollection");
    v12 = -[objc_class resolvedColorWithTraitCollection:](v6, "resolvedColorWithTraitCollection:", v11);

    v13 = objc_msgSend(v12, "CGColor");
    objc_msgSend(v8, "setValue:forKey:", v13, kCAFilterInputColor);

    v14 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    if (v14)
    {
      v15 = sub_10000B4C8(&qword_100558DF0);
      v16 = swift_allocObject(v15, 64, 7);
      *(_OWORD *)(v16 + 16) = xmmword_100424BB0;
      *(_QWORD *)(v16 + 56) = sub_1000DD108(0, (unint64_t *)&qword_100558DF8, CAFilter_ptr);
      *(_QWORD *)(v16 + 32) = v8;
      v17 = v14;
      v18 = v8;
      v19 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v17, "setFilters:", v19);

    }
    goto LABEL_6;
  }
  v20 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v20)
  {
    v8 = v20;
    v6 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "setFilters:", v6);
LABEL_6:

  }
  return objc_msgSend(v1, "commit", v3);
}

void CoreAnimationPackageView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCoreUI.CoreAnimationPackageView", 36, "init(frame:)", 12, 0);
  __break(1u);
}

id CoreAnimationPackageView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1002E50D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy(v8 + 4);
        return;
      }
    }
    else
    {
      v7 = sub_10000B4C8(&qword_1005593D0);
      v8 = (_QWORD *)swift_allocObject(v7, 16 * v5 + 32, 7);
      v9 = j__malloc_size(v8);
      v10 = v9 - 32;
      if (v9 < 32)
        v10 = v9 - 17;
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1002E51A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v15;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_14;
  if (v5)
  {
    if (v5 <= 0)
    {
      v12 = _swiftEmptyArrayStorage;
      if (v4 != a3)
        goto LABEL_10;
    }
    else
    {
      v7 = sub_10000B4C8(&qword_100558DE8);
      v8 = *(_QWORD *)(type metadata accessor for PlaylistCurators.Curator(0) - 8);
      v9 = *(_QWORD *)(v8 + 72);
      v10 = *(unsigned __int8 *)(v8 + 80);
      v11 = (v10 + 32) & ~v10;
      v12 = (_QWORD *)swift_allocObject(v7, v11 + v9 * v5, v10 | 7);
      v13 = j__malloc_size(v12);
      if (!v9)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v13 - v11 == 0x8000000000000000 && v9 == -1)
        goto LABEL_16;
      v12[2] = v5;
      v12[3] = 2 * ((uint64_t)(v13 - v11) / v9);
      if (v4 != a3)
      {
LABEL_10:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlaylistCurators.Curator(0) - 8) + 80);
        swift_arrayInitWithCopy((char *)v12 + ((v15 + 32) & ~v15));
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

_QWORD *sub_1002E52C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000B4C8(&qword_100558DE0);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_1002C3858(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_100194204(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

id sub_1002E5398()
{
  return sub_1002E4CC4();
}

void sub_1002E53B8()
{
  char *v0;
  char *v1;

  v1 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010044BC20, "MusicCoreUI/CoreAnimationPackageView.swift", 42, 2, 30, 0);
  __break(1u);
}

void *sub_1002E5474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "name");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1002E5604(uint64_t result, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1002F8194(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy(&v4[16 * v6 + 32], v7, &type metadata for String);
  if (!v7)
    goto LABEL_19;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = &v4[16 * a2 + 32];
  if (v6 != a2 || &v4[16 * v6 + 32] >= &v15[16 * v14])
    result = (uint64_t)memmove(&v4[16 * v6 + 32], v15, 16 * v14);
  v16 = *((_QWORD *)v4 + 2);
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    *((_QWORD *)v4 + 2) = v17;
LABEL_19:
    *v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1002E5718()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002E573C(uint64_t a1)
{
  uint64_t v1;

  sub_1002E4910(a1, v1);
}

uint64_t sub_1002E5744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002E5754(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1002E575C(uint64_t a1, uint64_t a2)
{
  return sub_1002E5A28(a1, a2, (unint64_t *)&qword_10055A4C0, (unint64_t *)UIViewPropertyAnimator_ptr);
}

uint64_t sub_1002E5770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v5 < 0)
    v23 = v5;
  else
    v23 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease();
  if (v7 < v2)
    goto LABEL_33;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease();
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_36:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_41;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  v15 = type metadata accessor for SyncedLyricsLineView();
  result = swift_arrayDestroy(v14, v5, v15);
  if (!v6)
    return specialized Array._endMutation()(result);
  v17 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = v18 - v2;
    if (!__OFSUB__(v18, v2))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v17 < 0)
    v26 = *v3;
  else
    v26 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  result = swift_bridgeObjectRelease();
  v19 = v27 - v2;
  if (__OFSUB__(v27, v2))
    goto LABEL_51;
LABEL_21:
  v20 = (char *)(v13 + 8 * v2);
  if (v4 != v2 || v14 >= &v20[8 * v19])
    result = (uint64_t)memmove(v14, v20, 8 * v19);
  v2 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
LABEL_52:
    if (v2 < 0)
      v28 = v2;
    else
      v28 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    result = swift_bridgeObjectRelease();
    v22 = v29 + v6;
    if (!__OFADD__(v29, v6))
      goto LABEL_26;
    goto LABEL_57;
  }
  v21 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v22 = v21 + v6;
  if (!__OFADD__(v21, v6))
  {
LABEL_26:
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v22;
    return specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_1002E5A14(uint64_t a1, uint64_t a2)
{
  return sub_1002E5A28(a1, a2, (unint64_t *)&qword_10055CDB0, (unint64_t *)UIView_ptr);
}

uint64_t sub_1002E5A28(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a4;
    v7 = a3;
    v4 = a2;
    v6 = a1;
    v8 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v8 < 0)
    v27 = v8;
  else
    v27 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease();
  if (v11 < v4)
    goto LABEL_33;
LABEL_4:
  v8 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v10 = (unint64_t *)(v6 - v4);
  if (__OFSUB__(0, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v11 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = v12 - v8;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v11 < 0)
      v29 = v11;
    else
      v29 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease();
    v11 = *v5;
    goto LABEL_15;
  }
LABEL_36:
  if (v11 < 0)
    v28 = v11;
  else
    v28 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease();
  v13 = (uint64_t)v10 + v12;
  if (__OFADD__(v12, v10))
    goto LABEL_41;
LABEL_8:
  v11 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v11;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v11 & 0x8000000000000000) == 0
    && (v11 & 0x4000000000000000) == 0)
  {
    v15 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  v34 = v8;
  v8 = (uint64_t)v10;
  v10 = v7;
  v7 = v9;
  if ((unint64_t)v11 >> 62)
    goto LABEL_42;
  v16 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  *v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v16, 1, v11);
  swift_bridgeObjectRelease();
  v15 = *v5 & 0xFFFFFFFFFFFFFF8;
  v9 = v7;
  v7 = v10;
  v10 = (unint64_t *)v8;
  v8 = v34;
LABEL_18:
  v17 = v15 + 32;
  v18 = (char *)(v15 + 32 + 8 * v6);
  v19 = sub_1000DD108(0, v7, v9);
  result = swift_arrayDestroy(v18, v8, v19);
  if (!v10)
    return specialized Array._endMutation()(result);
  v21 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v4;
    if (!__OFSUB__(v22, v4))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v21 < 0)
    v30 = *v5;
  else
    v30 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  result = swift_bridgeObjectRelease();
  v23 = v31 - v4;
  if (__OFSUB__(v31, v4))
    goto LABEL_51;
LABEL_21:
  v24 = (char *)(v17 + 8 * v4);
  if (v6 != v4 || v18 >= &v24[8 * v23])
    result = (uint64_t)memmove(v18, v24, 8 * v23);
  v4 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
LABEL_52:
    if (v4 < 0)
      v32 = v4;
    else
      v32 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    result = swift_bridgeObjectRelease();
    v26 = (char *)v10 + v33;
    if (!__OFADD__(v33, v10))
      goto LABEL_26;
    goto LABEL_57;
  }
  v25 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v26 = (char *)v10 + v25;
  if (!__OFADD__(v25, v10))
  {
LABEL_26:
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
    return specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

unint64_t sub_1002E5D04()
{
  unint64_t result;

  result = qword_100558E08;
  if (!qword_100558E08)
  {
    result = swift_getWitnessTable(byte_10043A648, &type metadata for CoreAnimationPackageView.Error);
    atomic_store(result, (unint64_t *)&qword_100558E08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CoreAnimationPackageView.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002E5D8C + 4 * asc_10043A5A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002E5DAC + 4 * byte_10043A5A5[v4]))();
}

_BYTE *sub_1002E5D8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002E5DAC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002E5DB4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002E5DBC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002E5DC4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002E5DCC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CoreAnimationPackageView.Error()
{
  return &type metadata for CoreAnimationPackageView.Error;
}

unint64_t sub_1002E5DEC()
{
  unint64_t result;

  result = qword_100558E10;
  if (!qword_100558E10)
  {
    result = swift_getWitnessTable(byte_10043A620, &type metadata for CoreAnimationPackageView.Error);
    atomic_store(result, (unint64_t *)&qword_100558E10);
  }
  return result;
}

id sub_1002E5E30()
{
  if (qword_100557CA0 != -1)
    swift_once(&qword_100557CA0, sub_1002D2FA0);
  static NSBundle.musicCoreUIBundle = qword_100562670;
  return (id)qword_100562670;
}

uint64_t *NSBundle.musicCoreUIBundle.unsafeMutableAddressor()
{
  if (qword_100557D40 != -1)
    swift_once(&qword_100557D40, sub_1002E5E30);
  return &static NSBundle.musicCoreUIBundle;
}

id static NSBundle.musicCoreUIBundle.getter()
{
  if (qword_100557D40 != -1)
    swift_once(&qword_100557D40, sub_1002E5E30);
  return (id)static NSBundle.musicCoreUIBundle;
}

void MusicLibrary.ActionableState.updateSymbolConfiguration(from:traitCollection:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v7;
  char *v8;
  unsigned int v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  double v20;
  __int128 v21;
  id v22;
  NSString *v23;
  CGFloat bottom;
  CGFloat right;
  __int128 v26;

  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100558158 != -1)
    swift_once(&qword_100558158, sub_1003FC030);
  v9 = a4;
  v10 = static SymbolButton.Configuration.platterMinimumSize;
  v11 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  *(_OWORD *)(a1 + v11[13]) = v10;
  static UIView.Corner.rounded.getter(v11);
  v12 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_1002E6214((uint64_t)v8, a1 + v11[9]);
  v13 = a1 + v11[10];
  if (*(_QWORD *)v13)
  {
    v14 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)&UIEdgeInsetsZero.top;
    *(_OWORD *)(v13 + 24) = v14;
  }

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 56) = 2;
  objc_storeStrong((id *)(a1 + 24), UIFontTextStyleSubheadline);
  *(_QWORD *)(a1 + 48) = 6;
  switch(v9 >> 8)
  {
    case 2u:
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_16;
    case 3u:
      swift_bridgeObjectRelease();
      *(_OWORD *)a1 = xmmword_100438810;
      *(_QWORD *)(a1 + 48) = 7;
      goto LABEL_16;
    case 4u:
      swift_bridgeObjectRelease();
      v21 = xmmword_100438800;
      goto LABEL_15;
    case 5u:
      swift_bridgeObjectRelease();
      v21 = xmmword_1004387F0;
      goto LABEL_15;
    default:
      if ((v9 & 0x100) != 0)
      {
        swift_bridgeObjectRelease();
        v21 = xmmword_100438820;
LABEL_15:
        *(_OWORD *)a1 = v21;
LABEL_16:
        sub_1002E625C(*(void **)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(void **)(v13 + 48));
        *(_QWORD *)(v13 + 48) = 0;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)v13 = 0u;
      }
      else
      {
        v15 = *(void **)v13;
        if (*(_QWORD *)v13
          && (v16 = type metadata accessor for CircularProgressView(), (v17 = swift_dynamicCastClass(v15, v16)) != 0))
        {
          v18 = (char *)v17;
          v19 = v15;
        }
        else
        {
          v22 = objc_allocWithZone((Class)type metadata accessor for CircularProgressView());
          v18 = CircularProgressView.init(size:)(0.0, 0.0);
        }
        CircularProgressView.setState(_:animated:)(a3, v9 & 1, 1, v20);
        sub_1002E6288(*(_QWORD *)(a1 + 192), *(void **)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216));
        *(_OWORD *)(a1 + 192) = xmmword_100427F70;
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        swift_bridgeObjectRelease();
        *(_OWORD *)a1 = xmmword_100438830;
        *(_QWORD *)(a1 + 56) = 1;
        v23 = UIFontTextStyleFootnote;

        *(_QWORD *)(a1 + 24) = v23;
        v26 = *(_OWORD *)&UIEdgeInsetsZero.top;
        bottom = UIEdgeInsetsZero.bottom;
        right = UIEdgeInsetsZero.right;
        sub_1002E625C(*(void **)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(void **)(v13 + 48));
        *(_QWORD *)v13 = v18;
        *(_OWORD *)(v13 + 8) = v26;
        *(CGFloat *)(v13 + 24) = bottom;
        *(CGFloat *)(v13 + 32) = right;
        *(_OWORD *)(v13 + 40) = xmmword_100438760;
      }
      return;
  }
}

uint64_t sub_1002E6214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100560490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1002E625C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1)
  {

  }
}

uint64_t sub_1002E6288(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != (void *)1)
  {

    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1002E62B8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_100562880);
  sub_10000D78C(v0, (uint64_t)qword_100562880);
  sub_1002E6330();
  v1 = OS_os_log.init(musicCategory:)(0x726F43636973754DLL, 0xEB00000000495565);
  return Logger.init(_:)(v1);
}

unint64_t sub_1002E6330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558E18;
  if (!qword_100558E18)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100558E18);
  }
  return result;
}

uint64_t ArtworkImageViewModelAttributeProviding.cropStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  static Artwork.CropStyle.boundedBox.getter();
  v2 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_1002E63AC@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_10000B4C8(&qword_100558E20);
  __chkstk_darwin();
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin();
  v16 = (char *)&v23 - v15;
  a1(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100011694((uint64_t)v9, (uint64_t *)&unk_10055E870);
    v17 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v16, v9, v10);
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    a2(v20);
    v21 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 0, 1, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v19(a3, v13, v10);
    v22 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_1002E6A68((uint64_t)v7, (uint64_t)&a3[*(int *)(v22 + 20)]);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 0, 1, v22);
  }
}

uint64_t sub_1002E65BC@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E65D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];

  sub_10000B4C8(&qword_100558E20);
  __chkstk_darwin();
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Artwork(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v11 = &v21[-v10];
  v12 = sub_10000B4C8(&qword_100558E58);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  v14 = swift_release(v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 48))(v5, 1, v6, v14) == 1)
  {
    sub_100011694((uint64_t)v5, (uint64_t *)&unk_10055E870);
    v15 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
    v17(v11, v5, v6);
    v18 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v9, v11, v6);
    static Artwork.CropStyle.boundedBox.getter(v18);
    v19 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v3, 0, 1, v19);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v11, v6);
    v17(a1, v9, v6);
    v20 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_1002E6A68((uint64_t)v3, (uint64_t)&a1[*(int *)(v20 + 20)]);
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
  }
}

uint64_t ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000B4C8(&qword_100558E20);
  __chkstk_darwin();
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v21 - v14;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100011694((uint64_t)v9, (uint64_t *)&unk_10055E870);
    v16 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
  else
  {
    v22 = a1;
    v18 = a3;
    v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v15, v9, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v15, v10);
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(v22, a2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    v19(v18, v13, v10);
    v20 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_1002E6A68((uint64_t)v7, (uint64_t)&v18[*(int *)(v20 + 20)]);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
  }
}

uint64_t sub_1002E6A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100558E20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E6AB4@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E7F78((void (*)(void))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E6AC0@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

double sub_1002E6AE4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_10000B4C8(&qword_100558E58);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1002E6BB0@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E6BD8@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&EditorialItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E6C00@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&Genre.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E6C28@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E6C4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for Artwork(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin();
  v10 = (char *)&v16 - v9;
  Playlist.artwork.getter(v8);
  sub_100011370((uint64_t)v10, (uint64_t)v7, (uint64_t *)&unk_10055E870);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    v11 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
    v12 = type metadata accessor for ArtworkImage.ViewModel(0);
    v13 = a1 + *(int *)(v12 + 20);
    static Artwork.CropStyle.squareCenterCrop.getter(v12);
    v14 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 0, 1, v12);
  }
  return sub_100011694((uint64_t)v10, (uint64_t *)&unk_10055E870);
}

uint64_t Playlist.artworkViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = a1;
  sub_10000B4C8(&qword_100558E20);
  __chkstk_darwin();
  v66 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Artwork(0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  __chkstk_darwin();
  v65 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v70 = (char *)&v64 - v5;
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v69 = (char *)&v64 - v8;
  __chkstk_darwin();
  v10 = (char *)&v64 - v9;
  __chkstk_darwin();
  v12 = (char *)&v64 - v11;
  v13 = type metadata accessor for Playlist(0);
  v73 = *(_QWORD *)(v13 - 8);
  v74 = v13;
  __chkstk_darwin();
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v16 = (char *)&v64 - v15;
  sub_10000B4C8((uint64_t *)&unk_10055EC10);
  __chkstk_darwin();
  v67 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v64 - v18;
  sub_10000B4C8(&qword_100558BB8);
  __chkstk_darwin();
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin();
  v24 = (char *)&v64 - v23;
  Playlist.variant.getter(v22);
  v25 = type metadata accessor for Playlist.Variant(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    goto LABEL_2;
  sub_100011370((uint64_t)v24, (uint64_t)v21, &qword_100558BB8);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v21, v25);
  if (v28 != enum case for Playlist.Variant.regular(_:) && v28 != enum case for Playlist.Variant.smart(_:))
  {
    if (v28 == enum case for Playlist.Variant.genius(_:))
      goto LABEL_2;
    if (v28 == enum case for Playlist.Variant.favoriteSongs(_:))
      goto LABEL_7;
    if (v28 == enum case for Playlist.Variant.folder(_:))
      goto LABEL_14;
    if (v28 != enum case for Playlist.Variant.subscribed(_:))
    {
      if (v28 != enum case for Playlist.Variant.admin(_:))
      {
        if (v28 == enum case for Playlist.Variant.personalMix(_:))
        {
          v48 = (uint64_t)v69;
          Playlist.editorialArtwork.getter();
          sub_100011370(v48, (uint64_t)v7, (uint64_t *)&unk_10055E870);
          v50 = v71;
          v49 = v72;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v7, 1, v72) == 1)
          {
            v51 = type metadata accessor for ArtworkImage.ViewModel(0);
            v52 = (uint64_t)v67;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v67, 1, 1, v51);
          }
          else
          {
            v53 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
            v54 = v70;
            v53(v70, v7, v49);
            v55 = v65;
            v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v50 + 16))(v65, v54, v49);
            v57 = (uint64_t)v66;
            static Artwork.CropStyle.featuredContentCrop170T100B.getter(v56);
            v58 = type metadata accessor for Artwork.CropStyle(0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
            v52 = (uint64_t)v67;
            v53(v67, v55, v49);
            v51 = type metadata accessor for ArtworkImage.ViewModel(0);
            sub_1002E6A68(v57, v52 + *(int *)(v51 + 20));
            (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v49);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v52, 0, 1, v51);
          }
          v60 = v74;
          v59 = v75;
          v61 = v73;
          v62 = v68;
          sub_100011694(v48, (uint64_t *)&unk_10055E870);
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v62, v1, v60);
          type metadata accessor for ArtworkImage.ViewModel(0);
          v63 = *(_QWORD *)(v51 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v52, 1, v51) == 1)
          {
            sub_1002E6C4C(v59);
            (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
            sub_100011694(v52, (uint64_t *)&unk_10055EC10);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
            sub_1002E7560(v52, v59);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v51);
          }
          goto LABEL_15;
        }
        (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v25);
LABEL_14:
        v47 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v75, 1, 1, v47);
LABEL_15:
        v44 = &qword_100558BB8;
        v45 = (uint64_t)v24;
        return sub_100011694(v45, v44);
      }
LABEL_2:
      sub_100011694((uint64_t)v24, &qword_100558BB8);
      return sub_1002E6C4C(v75);
    }
  }
LABEL_7:
  sub_100011694((uint64_t)v24, &qword_100558BB8);
  sub_1002E6C4C((uint64_t)v19);
  v29 = v73;
  v30 = v1;
  v31 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v16, v30, v74);
  v32 = type metadata accessor for ArtworkImage.ViewModel(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v19, 1, v32) == 1)
  {
    Playlist.tracksTiledArtwork.getter();
    sub_100011370((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_10055E870);
    v35 = v71;
    v34 = v72;
    v36 = 1;
    v37 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v10, 1, v72) == 1;
    v38 = v75;
    if (!v37)
    {
      v39 = v70;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v70, v10, v34);
      v40 = v39;
      v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 16))(v75, v39, v34);
      v42 = v75 + *(int *)(v32 + 20);
      static Artwork.CropStyle.boundedBox.getter(v41);
      v43 = type metadata accessor for Artwork.CropStyle(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v34);
      v38 = v75;
      v36 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v38, v36, 1, v32);
    sub_100011694((uint64_t)v12, (uint64_t *)&unk_10055E870);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v74);
    v44 = (uint64_t *)&unk_10055EC10;
    v45 = (uint64_t)v19;
    return sub_100011694(v45, v44);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v31);
  v46 = v75;
  sub_1002E7560((uint64_t)v19, v75);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v46, 0, 1, v32);
}

uint64_t sub_1002E7560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ArtworkImage.ViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E75B0@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E75D8@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&Playlist.Entry.InternalItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E7600@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&RadioShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t RecentlyAddedMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v49 = a1;
  v1 = type metadata accessor for UploadedVideo(0);
  v38 = *(_QWORD *)(v1 - 8);
  v39 = v1;
  __chkstk_darwin();
  v37 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MusicVideo(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin();
  v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TVSeason(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin();
  v40 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  __chkstk_darwin();
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicMovie(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Album(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RecentlyAddedMusicItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v48, v18);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v22 == enum case for RecentlyAddedMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v21, v14);
    sub_1002E63AC((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v49);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v24 = v49;
  if (v22 == enum case for RecentlyAddedMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v21, v10);
    sub_1002E63AC((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v26 = v45;
    v25 = v46;
    v27 = v47;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v21, v47);
    sub_1002E63AC((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v27);
  }
  v28 = v49;
  if (v22 == enum case for RecentlyAddedMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v30 = v43;
    v29 = v44;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v9, v21, v44);
    Playlist.artworkViewModel.getter((uint64_t)v24);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v9, v29);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v31 = v40;
    v32 = v41;
    v33 = v42;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v21, v42);
    v34 = (void (*)(uint64_t))&TVSeason.artwork.getter;
LABEL_13:
    sub_1002E63AC(v34, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    v31 = v37;
    v32 = v38;
    v33 = v39;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v21, v39);
    v34 = (void (*)(uint64_t))&UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  v35 = type metadata accessor for ArtworkImage.ViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v24, 1, 1, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t sub_1002E7A9C@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&RecordLabel.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E7AC4@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E7AF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E7F78((void (*)(void))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_1002E7AFC@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&SocialProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_1002E7B24@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&Station.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t TVEpisode.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(char *, _QWORD, uint64_t, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v33 = a1;
  sub_10000B4C8(&qword_100558E20);
  __chkstk_darwin();
  v2 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v32 - v5;
  v7 = type metadata accessor for Artwork(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v32 - v11;
  v13 = __chkstk_darwin();
  v15 = (char *)&v32 - v14;
  TVEpisode.previewArtwork.getter(v13);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v16(v6, 1, v7) == 1)
  {
    v17 = sub_100011694((uint64_t)v6, (uint64_t *)&unk_10055E870);
    TVEpisode.artwork.getter(v17);
    v18 = v16(v4, 1, v7);
    v19 = v33;
    if (v18 == 1)
    {
      sub_100011694((uint64_t)v4, (uint64_t *)&unk_10055E870);
      v20 = type metadata accessor for ArtworkImage.ViewModel(0);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    }
    v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v29(v10, v4, v7);
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v7);
    static Artwork.CropStyle.boundedBox.getter(v30);
    v31 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v2, 0, 1, v31);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v29(v19, v12, v7);
    v26 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_1002E6A68((uint64_t)v2, (uint64_t)&v19[*(int *)(v26 + 20)]);
    v27 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = v19;
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v22(v15, v6, v7);
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v12, v15, v7);
    static Artwork.CropStyle.boundedBox.getter(v23);
    v24 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v2, 0, 1, v24);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    v25 = v33;
    v22(v33, v12, v7);
    v26 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_1002E6A68((uint64_t)v2, (uint64_t)&v25[*(int *)(v26 + 20)]);
    v27 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = v25;
  }
  return v27(v28, 0, 1, v26);
}

uint64_t sub_1002E7E70@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&TVShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E7E98@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&TVSeason.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E7EC0@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_1002E7EE8@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&UploadedAudio.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t _s8MusicKit7StationV0A6CoreUIE9cropStyleAA7ArtworkV0aB8InternalE04CropG0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  static Artwork.CropStyle.specificRectangle.getter();
  v2 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_1002E7F50@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&UserProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_1002E7F78@<X0>(void (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  a1();
  v3 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

uint64_t sub_1002E7FB8@<X0>(char *a1@<X8>)
{
  return sub_1002E63AC((void (*)(uint64_t))&CreditArtist.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t Track.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v2 = v1;
  v20 = a1;
  v3 = type metadata accessor for MusicVideo(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Song(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Track(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v2, v11);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    sub_1002E63AC((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v17 = v20;
    if (v15 == enum case for Track.musicVideo(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v14, v3);
      sub_1002E63AC((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v17);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      v18 = type metadata accessor for ArtworkImage.ViewModel(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t GenericMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t);
  char *v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(uint64_t);
  char *v56;
  char *v57;
  void (*v58)(uint64_t);
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;

  v129 = a1;
  v1 = type metadata accessor for CreditArtist(0);
  v127 = *(_QWORD *)(v1 - 8);
  v128 = v1;
  __chkstk_darwin();
  v126 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for SocialProfile(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin();
  v100 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for UploadedVideo(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin();
  v79 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for UploadedAudio(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin();
  v82 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for TVShow(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin();
  v85 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for TVSeason(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin();
  v88 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for TVEpisode(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin();
  v91 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for RecordLabel(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin();
  v103 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for RadioShow(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin();
  v106 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Station(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin();
  v94 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for Song(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin();
  v97 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for Playlist(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin();
  v109 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MusicVideo(0);
  v113 = *(_QWORD *)(v14 - 8);
  v114 = v14;
  __chkstk_darwin();
  v112 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MusicMovie(0);
  v116 = *(_QWORD *)(v16 - 8);
  v117 = v16;
  __chkstk_darwin();
  v115 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Genre(0);
  v119 = *(_QWORD *)(v18 - 8);
  v120 = v18;
  __chkstk_darwin();
  v118 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for EditorialItem(0);
  v122 = *(_QWORD *)(v20 - 8);
  v123 = v20;
  __chkstk_darwin();
  v121 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Curator(0);
  v124 = *(_QWORD *)(v22 - 8);
  v125 = v22;
  __chkstk_darwin();
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Artist(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v28 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Album(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin();
  v32 = (char *)&v77 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for GenericMusicItem(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin();
  v78 = (char *)&v77 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v37 = (char *)&v77 - v36;
  v77 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v77((char *)&v77 - v36, v130, v33);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v37, v33);
  if (v38 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v37, v29);
    sub_1002E63AC((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v129);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  }
  v40 = v129;
  if (v38 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v37, v25);
    sub_1002E65D0(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  if (v38 == enum case for GenericMusicItem.composer(_:))
  {
    v41 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v37, v33);
  }
  if (v38 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v42 = v126;
    v43 = v127;
    v44 = v128;
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v126, v37, v128);
    v45 = (void (*)(uint64_t))&CreditArtist.artwork.getter;
LABEL_13:
    v51 = (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter;
LABEL_14:
    sub_1002E63AC(v45, v51, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  if (v38 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v46 = v124;
    v47 = v37;
    v48 = v125;
    (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v24, v47, v125);
    sub_1002E63AC((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v40);
    v49 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v50 = v24;
    return v49(v50, v48);
  }
  if (v38 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v42 = v121;
    v43 = v122;
    v44 = v123;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v121, v37, v123);
    v45 = (void (*)(uint64_t))&EditorialItem.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v118;
    v52 = v119;
    v54 = v37;
    v48 = v120;
    (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v54, v120);
    v55 = (void (*)(uint64_t))&Genre.artwork.getter;
LABEL_22:
    v58 = (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter;
LABEL_23:
    sub_1002E63AC(v55, v58, v40);
LABEL_24:
    v49 = *(uint64_t (**)(char *, uint64_t))(v52 + 8);
    v50 = v53;
    return v49(v50, v48);
  }
  if (v38 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v115;
    v52 = v116;
    v56 = v37;
    v48 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v56, v117);
    v55 = (void (*)(uint64_t))&MusicMovie.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v53 = v112;
    v52 = v113;
    v57 = v37;
    v48 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v112, v57, v114);
    v55 = (void (*)(uint64_t))&MusicVideo.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v52 = v110;
    v53 = v109;
    v59 = v37;
    v48 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v59, v111);
    Playlist.artworkViewModel.getter((uint64_t)v40);
    goto LABEL_24;
  }
  if (v38 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v52 = v107;
    v53 = v106;
    v60 = v37;
    v48 = v108;
    (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v60, v108);
    v55 = (void (*)(uint64_t))&RadioShow.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v52 = v104;
    v53 = v103;
    v61 = v37;
    v48 = v105;
    (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v103, v61, v105);
    v55 = (void (*)(uint64_t))&RecordLabel.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v52 = v101;
    v53 = v100;
    v62 = v37;
    v48 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v100, v62, v102);
    v55 = (void (*)(uint64_t))&SocialProfile.artwork.getter;
    v58 = (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_23;
  }
  if (v38 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v52 = v98;
    v53 = v97;
    v63 = v37;
    v48 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v63, v99);
    v55 = (void (*)(uint64_t))&Song.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v95;
    v42 = v94;
    v44 = v96;
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v37, v96);
    v45 = (void (*)(uint64_t))&Station.artwork.getter;
    v51 = (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_14;
  }
  if (v38 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v92;
    v42 = v91;
    v44 = v93;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v37, v93);
    TVEpisode.artworkViewModel.getter(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  if (v38 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v89;
    v42 = v88;
    v44 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v37, v90);
    v45 = (void (*)(uint64_t))&TVSeason.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v86;
    v42 = v85;
    v44 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v37, v87);
    v45 = (void (*)(uint64_t))&TVShow.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v83;
    v42 = v82;
    v44 = v84;
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v37, v84);
    v45 = (void (*)(uint64_t))&UploadedAudio.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    v43 = v80;
    v42 = v79;
    v44 = v81;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v37, v81);
    v45 = (void (*)(uint64_t))&UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v37, v33);
    swift_bridgeObjectRelease();
    v64 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v40, 1, 1, v64);
  }
  else
  {
    if (qword_100557F60 != -1)
      swift_once(&qword_100557F60, sub_100366454);
    v65 = type metadata accessor for Logger(0);
    sub_10000D78C(v65, (uint64_t)static Logger.artwork);
    v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v77)(v78, v130, v33);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.fault.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc(22, -1);
      v130 = swift_slowAlloc(64, -1);
      v131 = v130;
      *(_DWORD *)v69 = 136315394;
      *(_QWORD *)(v69 + 4) = sub_1002E9B3C((char *)0xD000000000000010, (char *)0x8000000100451500, &v131);
      *(_WORD *)(v69 + 12) = 2080;
      v70 = sub_1002E9F40();
      v71 = v78;
      v72 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v33, v70);
      *(_QWORD *)(v69 + 14) = sub_1002E9B3C(v72, v73, &v131);
      swift_bridgeObjectRelease();
      v74 = *(void (**)(char *, uint64_t))(v34 + 8);
      v74(v71, v33);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Unhandled case for %s: %s", (uint8_t *)v69, 0x16u);
      v75 = v130;
      swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v69, -1, -1);
    }
    else
    {
      v74 = *(void (**)(char *, uint64_t))(v34 + 8);
      v74(v78, v33);
    }

    v76 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v40, 1, 1, v76);
    return ((uint64_t (*)(char *, uint64_t))v74)(v37, v33);
  }
}

uint64_t ArtworkImage.ViewModel.image(for:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 32) = v2;
  *(double *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  v4 = sub_10000B4C8(&qword_100558E20);
  *(_QWORD *)(v3 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Artwork.CropStyle(0);
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v3 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 80) = v8;
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002E91B8, 0, 0);
}

uint64_t sub_1002E91B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), v4, *(_QWORD *)(v0 + 72));
  v5 = type metadata accessor for ArtworkImage.ViewModel(0);
  sub_100011370(v4 + *(int *)(v5 + 20), v3, &qword_100558E20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_100557F50 != -1)
      swift_once(&qword_100557F50, sub_100366284);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 48);
    v10 = sub_10000D78C(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_100011694(v9, &qword_100558E20);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  if (qword_100557F58 != -1)
    swift_once(&qword_100557F58, sub_1003662F0);
  v11 = type metadata accessor for Artwork.ImageFormat(0);
  v12 = sub_10000D78C(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  v13 = (_QWORD *)swift_task_alloc(dword_100558E3C);
  *(_QWORD *)(v0 + 96) = v13;
  *v13 = v0;
  v13[1] = sub_1002E9328;
  return Artwork.image(for:cropStyle:format:)(*(_QWORD *)(v0 + 64), v12, *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1002E9328(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 96);
  v5 = *v2;
  *(_QWORD *)(v5 + 104) = v1;
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v5 + 80);
  v6 = *(_QWORD *)(v5 + 88);
  v9 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(v5 + 72);
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_QWORD *)(v5 + 56);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 64), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_1002E9424, 0, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 40);
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 64), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_1002E9424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Artwork.image(for:cropStyle:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  v6 = sub_10000B4C8(&qword_100558E40);
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000B4C8(&qword_100558E20);
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002E94F8, 0, 0);
}

uint64_t sub_1002E94F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v5, "displayScale");
  v7 = v6;

  v8 = type metadata accessor for Artwork.CropStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  v10 = type metadata accessor for Artwork.ImageFormat(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v3, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v1, 0, 1, v10);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)[1]);
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = sub_1002E9634;
  return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 56), 0, 0, *(double *)(v0 + 16), *(double *)(v0 + 24), 1.0 / v7);
}

uint64_t sub_1002E9634(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *v2;
  *(_QWORD *)(v5 + 80) = v1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 64);
  sub_100011694(v6, &qword_100558E40);
  sub_100011694(v7, &qword_100558E20);
  if (v1)
    return swift_task_switch(sub_1002E96E8, 0, 0);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1002E96E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E9724(double a1, double a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100558E34);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10005F4D4;
  return ArtworkImage.ViewModel.image(for:)(a1, a2);
}

uint64_t ArtworkImageFetching<>.image(for:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  v6 = sub_10000B4C8(&qword_100558E20);
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Artwork.CropStyle(0);
  *(_QWORD *)(v5 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v5 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 96) = v10;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002E9834, 0, 0);
}

uint64_t sub_1002E9834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_100557F50 != -1)
      swift_once(&qword_100557F50, sub_100366284);
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    v10 = sub_10000D78C(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_100011694(v9, &qword_100558E20);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  if (qword_100557F58 != -1)
    swift_once(&qword_100557F58, sub_1003662F0);
  v11 = type metadata accessor for Artwork.ImageFormat(0);
  v12 = sub_10000D78C(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  v13 = (_QWORD *)swift_task_alloc(dword_100558E3C);
  *(_QWORD *)(v0 + 112) = v13;
  *v13 = v0;
  v13[1] = sub_1002E99A4;
  return Artwork.image(for:cropStyle:format:)(*(_QWORD *)(v0 + 80), v12, *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1002E99A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v5 + 96);
  v6 = *(_QWORD *)(v5 + 104);
  v9 = *(_QWORD *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 88);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(_QWORD *)(v5 + 72);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 80), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_1002E9AA0, 0, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 56);
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 80), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_1002E9AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E9AEC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t result;

  v6 = (char *)a4();
  v8 = sub_1002E9B3C(v6, v7, a3);
  v9 = (_QWORD *)*a1;
  *(_QWORD *)*a1 = v8;
  result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

char *sub_1002E9B3C(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_1002E9C0C(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000760E0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000760E0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100011758(v12);
  return v7;
}

char *sub_1002E9C0C(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1002E9D08(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_1002E9D08(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_1002E9D9C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1002E9E34(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1002E9E34((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_1002E9D9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100308AA0(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *sub_1002E9E34(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100558E60);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1002E9F1C(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _typeName(_:qualified:)(v1, 0);
}

unint64_t sub_1002E9F40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558E28;
  if (!qword_100558E28)
  {
    v1 = type metadata accessor for GenericMusicItem(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for GenericMusicItem, v1);
    atomic_store(result, (unint64_t *)&qword_100558E28);
  }
  return result;
}

Swift::Bool __swiftcall Text.StringOption.evaluate(_:)(Swift::String a1)
{
  uint64_t v1;

  v1 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  return v1 != 0;
}

uint64_t Text.init(optional:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD v10[3];

  if (!a2)
  {
    v7 = a3;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1002EAFA0(a3, a1, a2);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  if ((v6 & 1) == 0)
  {
    v7 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  v10[0] = a1;
  v10[1] = a2;
  v9 = sub_1002EB09C();
  return Text.init<A>(_:)(v10, &type metadata for String, v9);
}

uint64_t static Edge.Set.on(_:)(unsigned int a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v2 = Edge.Set.init(rawValue:)(0);
  v3 = static Axis.Set.horizontal.getter();
  v4 = ((uint64_t (*)(void))Axis.Set.init(rawValue:))();
  if (Axis.Set.init(rawValue:)(v4 & a1) == v3)
  {
    v5 = static Edge.Set.leading.getter();
    v6 = static Edge.Set.trailing.getter();
    v7 = Edge.Set.init(rawValue:)(0);
    v8 = Edge.Set.init(rawValue:)(v7);
    if (Edge.Set.init(rawValue:)(v8 & v5) != v5)
      v7 = Edge.Set.init(rawValue:)(v7 | v5);
    v9 = Edge.Set.init(rawValue:)(v7);
    if (Edge.Set.init(rawValue:)(v9 & v6) != v6)
      LODWORD(v7) = Edge.Set.init(rawValue:)(v7 | v6);
    v10 = Edge.Set.init(rawValue:)(v2);
    if (Edge.Set.init(rawValue:)(v10 & v7) != v7)
      v2 = Edge.Set.init(rawValue:)(v7 | v2);
  }
  v11 = static Axis.Set.vertical.getter();
  v12 = v11;
  v13 = Axis.Set.init(rawValue:)(v11);
  if (Axis.Set.init(rawValue:)(v13 & a1) != v12)
    return v2;
  v14 = static Edge.Set.top.getter();
  v15 = static Edge.Set.bottom.getter();
  v16 = Edge.Set.init(rawValue:)(0);
  v17 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v17 & v14) != v14)
    v16 = Edge.Set.init(rawValue:)(v16 | v14);
  v18 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v18 & v15) != v15)
    LODWORD(v16) = Edge.Set.init(rawValue:)(v16 | v15);
  v19 = Edge.Set.init(rawValue:)(v2);
  if (Edge.Set.init(rawValue:)(v19 & v16) != v16)
    return Edge.Set.init(rawValue:)(v16 | v2);
  else
    return v2;
}

double EdgeInsets.init(_:length:)(uint64_t a1, double a2)
{
  unsigned int v3;
  unsigned int v4;

  if ((a1 & 1) != 0)
    v3 = static Axis.Set.vertical.getter(a1);
  else
    v3 = static Axis.Set.horizontal.getter();
  v4 = static Edge.Set.on(_:)(v3);
  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v4, a2);
}

double EdgeInsets.init(_:length:)(unsigned int a1, double a2)
{
  unsigned int v3;

  v3 = static Edge.Set.on(_:)(a1);
  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v3, a2);
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

void EdgeInsets.affecting(_:)(uint64_t a1)
{
  unsigned int v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;

  v2 = static Edge.Set.all.getter(a1);
  _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v2, 0.0);
  v3 = 0;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    while (v7)
      v7 &= v7 - 1;
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v8)
      return;
    v10 = *(_QWORD *)(v4 + 8 * v9);
    ++v3;
    if (!v10)
    {
      v3 = v9 + 1;
      if (v9 + 1 >= v8)
        return;
      v10 = *(_QWORD *)(v4 + 8 * v3);
      if (!v10)
      {
        v3 = v9 + 2;
        if (v9 + 2 >= v8)
          return;
        v10 = *(_QWORD *)(v4 + 8 * v3);
        if (!v10)
        {
          v3 = v9 + 3;
          if (v9 + 3 >= v8)
            return;
          v10 = *(_QWORD *)(v4 + 8 * v3);
          if (!v10)
          {
            v3 = v9 + 4;
            if (v9 + 4 >= v8)
              return;
            v10 = *(_QWORD *)(v4 + 8 * v3);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_23:
    v7 = (v10 - 1) & v10;
  }
  v11 = v9 + 5;
  if (v11 >= v8)
    return;
  v10 = *(_QWORD *)(v4 + 8 * v11);
  if (v10)
  {
    v3 = v11;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v3 >= v8)
      return;
    v10 = *(_QWORD *)(v4 + 8 * v3);
    ++v11;
    if (v10)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
}

double EdgeInsets.affecting(_:)(char a1)
{
  char v1;
  uint64_t v2;
  uint64_t inited;
  Swift::Int v4;
  double v5;
  double v6;
  _BYTE v8[40];

  v1 = a1 & 1;
  v2 = sub_10000B4C8(&qword_100558E68);
  inited = swift_initStackObject(v2, v8);
  *(_OWORD *)(inited + 16) = xmmword_100424BB0;
  *(_BYTE *)(inited + 32) = v1;
  v4 = sub_1002EB1A8(inited);
  swift_setDeallocating(inited);
  EdgeInsets.affecting(_:)(v4);
  v6 = v5;
  swift_bridgeObjectRelease();
  return v6;
}

double EdgeInsets.value(for:)(char a1, double a2, double a3, double a4, double a5)
{
  double result;
  double v6;

  result = a2 + a4;
  v6 = a3 + a5;
  if ((a1 & 1) == 0)
    return v6;
  return result;
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

double sub_1002EA4C4()
{
  double result;

  result = 0.0;
  static EdgeInsets.zero = 0u;
  *(_OWORD *)&qword_1005628A8 = 0u;
  return result;
}

__int128 *EdgeInsets.zero.unsafeMutableAddressor()
{
  if (qword_100557D50 != -1)
    swift_once(&qword_100557D50, sub_1002EA4C4);
  return &static EdgeInsets.zero;
}

double static EdgeInsets.zero.getter()
{
  if (qword_100557D50 != -1)
    swift_once(&qword_100557D50, sub_1002EA4C4);
  return *(double *)&static EdgeInsets.zero;
}

double CGSize.length(for:)(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

BOOL CGSize.fitsWithin(_:)(double a1, double a2, double a3, double a4)
{
  return a4 <= a2 && a3 <= a1;
}

BOOL Axis.orthogonal.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.isOrthogonal(to:)(char a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 1;
  }
  else if ((a1 & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t Optional<A>.isOrthogonal(to:)(char a1, char a2)
{
  if (a2 == 2)
    return 1;
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 1;
  }
  else if ((a1 & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t Axis.Set.init(_:)(char a1)
{
  if ((a1 & 1) != 0)
    return static Axis.Set.vertical.getter();
  else
    return static Axis.Set.horizontal.getter();
}

uint64_t View.always(perform:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  a1();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
}

double DynamicTypeSize.scaledValue(_:relativeTo:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  uint64_t v15;

  sub_10000B4C8(&qword_100558E70);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", a1);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v2, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  v10 = (void *)UIContentSizeCategory.init(_:)(v6);
  v11 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v10);
  objc_msgSend(v7, "scaledValueForValue:compatibleWithTraitCollection:", v11, a2);
  v13 = v12;

  return v13;
}

uint64_t static Color.random(opacity:)(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100146A70(0x20000000000001uLL);
  if (v6 == 0x20000000000000)
    v7 = 1.0;
  else
    v7 = (double)v6 * 1.11022302e-16 * 0.5 + 0.5;
  v8 = sub_100146A70(0x20000000000001uLL);
  if (v8 == 0x20000000000000)
    v9 = 1.0;
  else
    v9 = (double)v8 * 1.11022302e-16 * 0.5 + 0.5;
  v10 = sub_100146A70(0x20000000000001uLL);
  if (v10 == 0x20000000000000)
    v11 = 1.0;
  else
    v11 = (double)v10 * 1.11022302e-16 * 0.5 + 0.5;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  return Color.init(_:red:green:blue:opacity:)(v5, v7, v9, v11, a1);
}

uint64_t RoundedRectangle.outset(horizontal:vertical:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int *v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for LayoutDirection(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v21 - v12;
  type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D964(v4, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v16 = enum case for LayoutDirection.leftToRight(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v17(v13, enum case for LayoutDirection.leftToRight(_:), v8);
  sub_10000D964((uint64_t)v15, a1, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v18 = (int *)_s21OmnidirectionalOutsetVMa(0);
  *(double *)(a1 + v18[5]) = a3;
  *(double *)(a1 + v18[6]) = a2;
  *(double *)(a1 + v18[7]) = a3;
  *(double *)(a1 + v18[8]) = a2;
  v17(v11, v16, v8);
  LOBYTE(v16) = static LayoutDirection.== infix(_:_:)(v13, v11);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v13, v8);
  sub_1002EB350((uint64_t)v15);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v8);
  *(_QWORD *)(a1 + v18[9]) = (v16 & 1) == 0;
  return result;
}

uint64_t RoundedRectangle.outset(top:leading:bottom:trailing:layoutDirection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;

  v7 = v6;
  v14 = type metadata accessor for LayoutDirection(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v25 - v18;
  type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D964(v7, (uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a1, v14);
  sub_10000D964((uint64_t)v21, a2, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v22 = (int *)_s21OmnidirectionalOutsetVMa(0);
  *(double *)(a2 + v22[5]) = a3;
  *(double *)(a2 + v22[6]) = a4;
  *(double *)(a2 + v22[7]) = a5;
  *(double *)(a2 + v22[8]) = a6;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for LayoutDirection.leftToRight(_:), v14);
  LOBYTE(a1) = static LayoutDirection.== infix(_:_:)(v19, v17);
  v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v19, v14);
  sub_1002EB350((uint64_t)v21);
  result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v14);
  *(_QWORD *)(a2 + v22[9]) = (a1 & 1) == 0;
  return result;
}

double sub_1002EABF4@<D0>(int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  double result;

  v5 = v3;
  sub_10000D964(v5, a2, _s21OmnidirectionalOutsetVMa);
  v8 = a1[6];
  *(double *)(a2 + a1[5]) = *(double *)(a2 + a1[5]) - a3;
  *(double *)(a2 + v8) = *(double *)(a2 + v8) - a3;
  v9 = a1[8];
  *(double *)(a2 + a1[7]) = *(double *)(a2 + a1[7]) - a3;
  result = *(double *)(a2 + v9) - a3;
  *(double *)(a2 + v9) = result;
  return result;
}

double sub_1002EAC6C@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  char v27;

  v4 = v2;
  v6 = type metadata accessor for RoundedCornerStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect.outset(by:for:)(*(double *)((char *)v4 + a1[5]), *(double *)((char *)v4 + a1[6]), *(double *)((char *)v4 + a1[7]), *(double *)((char *)v4 + a1[8]));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = *v4;
  v22 = v4[1];
  sub_10000D964((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, &v12[*(int *)(v10 + 20)], v6);
  Path.init(roundedRect:cornerSize:style:)(v26, v9, v14, v16, v18, v20, v21, v22);
  result = *(double *)v26;
  v24 = v26[1];
  *(_OWORD *)a2 = v26[0];
  *(_OWORD *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 32) = v27;
  return result;
}

uint64_t sub_1002EAE08()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_1002EAE20(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100193CCC;
}

uint64_t sub_1002EAE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10001254C(&qword_100558F50, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AB48);
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1002EAEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10001254C(&qword_100558F50, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AB48);
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1002EAF50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001254C(&qword_100558F50, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AB48);
  return Shape.body.getter(a1, v2);
}

uint64_t sub_1002EAFA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;

  v3 = 0;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 24);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v11 = a2 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    if (!v9)
    {
      v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v12 >= v10)
        return 1;
      v9 = *(_QWORD *)(result + 8 * v12);
      ++v3;
      if (!v9)
      {
        v3 = v12 + 1;
        if (v12 + 1 >= v10)
          return 1;
        v9 = *(_QWORD *)(result + 8 * v3);
        if (!v9)
        {
          v3 = v12 + 2;
          if (v12 + 2 >= v10)
            return 1;
          v9 = *(_QWORD *)(result + 8 * v3);
          if (!v9)
          {
            v3 = v12 + 3;
            if (v12 + 3 >= v10)
              return 1;
            v9 = *(_QWORD *)(result + 8 * v3);
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_7:
    v9 &= v9 - 1;
    if (!v11)
      return 0;
  }
  v13 = v12 + 4;
  if (v13 >= v10)
    return 1;
  v9 = *(_QWORD *)(result + 8 * v13);
  if (v9)
  {
    v3 = v13;
    goto LABEL_7;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v10)
      return 1;
    v9 = *(_QWORD *)(result + 8 * v3);
    ++v13;
    if (v9)
      goto LABEL_7;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_1002EB09C()
{
  unint64_t result;

  result = qword_10055D8E0;
  if (!qword_10055D8E0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10055D8E0);
  }
  return result;
}

double _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(unsigned int a1, double a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v4 = static Edge.Set.top.getter();
  v5 = v4;
  v6 = Edge.Set.init(rawValue:)(v4);
  if (Edge.Set.init(rawValue:)(v6 & a1) == v5)
    v7 = a2;
  else
    v7 = 0.0;
  v8 = static Edge.Set.leading.getter();
  v9 = Edge.Set.init(rawValue:)(v8);
  Edge.Set.init(rawValue:)(v9 & a1);
  v10 = static Edge.Set.bottom.getter();
  v11 = Edge.Set.init(rawValue:)(v10);
  Edge.Set.init(rawValue:)(v11 & a1);
  v12 = static Edge.Set.trailing.getter();
  v13 = Edge.Set.init(rawValue:)(v12);
  Edge.Set.init(rawValue:)(v13 & a1);
  return v7;
}

Swift::Int sub_1002EB1A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt8 v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000B4C8(&qword_100558F90);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v21);
      v8 = Axis.rawValue.getter(v7);
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = Axis.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
        result = Axis.rawValue.getter(v7);
        if (v15 == result)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v17 = Axis.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
          result = Axis.rawValue.getter(v7);
          if (v17 == result)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v11) = v7;
      v18 = *(_QWORD *)(v3 + 16);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v20;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t _s21OmnidirectionalOutsetVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100558EE0;
  if (!qword_100558EE0)
    return swift_getSingletonMetadata(a1, &_s21OmnidirectionalOutsetVMn);
  return result;
}

uint64_t sub_1002EB350(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002EB390()
{
  unint64_t result;

  result = qword_100558E78;
  if (!qword_100558E78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Text.StringOption, &type metadata for Text.StringOption);
    atomic_store(result, (unint64_t *)&qword_100558E78);
  }
  return result;
}

uint64_t _s12StringOptionOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002EB414 + 4 * byte_10043A9F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002EB434 + 4 * byte_10043A9F5[v4]))();
}

_BYTE *sub_1002EB414(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002EB434(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002EB43C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002EB444(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002EB44C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002EB454(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Text.StringOption()
{
  return &type metadata for Text.StringOption;
}

uint64_t sub_1002EB470()
{
  return sub_10001254C(&qword_100558E80, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AB98);
}

uint64_t *sub_1002EB49C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    v12 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_1002EB570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v2 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_OWORD *sub_1002EB5B4(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_1002EB65C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_1002EB714(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_1002EB7BC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_1002EB864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EB870);
}

uint64_t sub_1002EB870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1002EB8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EB8B8);
}

uint64_t sub_1002EB8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1002EB8F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for RoundedRectangle(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1002EB978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558F28;
  if (!qword_100558F28)
  {
    v1 = sub_100011650(&qword_100558F30);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100558F28);
  }
  return result;
}

unint64_t sub_1002EB9C8()
{
  unint64_t result;

  result = qword_100558F38;
  if (!qword_100558F38)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100558F38);
  }
  return result;
}

uint64_t sub_1002EBA0C()
{
  return sub_10001254C(&qword_100558F40, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AAF8);
}

uint64_t sub_1002EBA38()
{
  return sub_10001254C(&qword_100558F48, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AAA8);
}

uint64_t sub_1002EBA64()
{
  return sub_10001254C(&qword_100558F50, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AB48);
}

uint64_t sub_1002EBA90()
{
  return sub_10001254C(&qword_100558E80, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_10043AB98);
}

Swift::Int sub_1002EBABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  Swift::UInt64 v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000B4C8(&qword_100558F80);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(double *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v20);
      Hasher._combine(_:)(0);
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = *(_QWORD *)&v7;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(double *)(v15 + 8 * v11) == v7)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(double *)(v15 + 8 * v11) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(double *)(v15 + 8 * v11) = v7;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1002EBC10(uint64_t a1)
{
  sub_1002EBC44(a1, (uint64_t *)&unk_10055E1E0, (void (*)(_QWORD))sub_1002EC358);
}

Swift::Int sub_1002EBC24(uint64_t a1)
{
  return sub_1002EC21C(a1, &qword_100558F58);
}

void sub_1002EBC30(uint64_t a1)
{
  sub_1002EBC44(a1, &qword_10055DB00, (void (*)(_QWORD))type metadata accessor for SyncedLyricsLineView);
}

void sub_1002EBC44(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  id v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v4 = a1;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_10000B4C8(a2);
      v7 = (_QWORD *)static _SetStorage.allocate(capacity:)(v6);
      if (!v5)
        goto LABEL_4;
LABEL_11:
      if (v4 < 0)
        v10 = v4;
      else
        v10 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease();
      if (!v8)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
  }
  v7 = &_swiftEmptySetSingleton;
  if (v5)
    goto LABEL_11;
LABEL_4:
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    return;
LABEL_15:
  v11 = (char *)(v7 + 7);
  v48 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v12 = 0;
    v45 = v4;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v4);
      v14 = __OFADD__(v12++, 1);
      if (v14)
      {
        __break(1u);
        goto LABEL_43;
      }
      v15 = v13;
      v16 = NSObject._rawHashValue(seed:)(v7[5]);
      v17 = -1 << *((_BYTE *)v7 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      v20 = *(_QWORD *)&v11[8 * (v18 >> 6)];
      v21 = 1 << v18;
      if (((1 << v18) & v20) != 0)
      {
        a3(0);
        v22 = *(id *)(v7[6] + 8 * v18);
        v23 = static NSObject.== infix(_:_:)(v22, v15);

        if ((v23 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v15);
          v4 = v45;
          goto LABEL_18;
        }
        v24 = ~v17;
        while (1)
        {
          v18 = (v18 + 1) & v24;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)&v11[8 * (v18 >> 6)];
          v21 = 1 << v18;
          if ((v20 & (1 << v18)) == 0)
            break;
          v25 = *(id *)(v7[6] + 8 * v18);
          v26 = static NSObject.== infix(_:_:)(v25, v15);

          if ((v26 & 1) != 0)
            goto LABEL_17;
        }
        v4 = v45;
      }
      *(_QWORD *)&v11[8 * v19] = v21 | v20;
      *(_QWORD *)(v7[6] + 8 * v18) = v15;
      v27 = v7[2];
      v14 = __OFADD__(v27, 1);
      v28 = v27 + 1;
      if (v14)
        goto LABEL_44;
      v7[2] = v28;
LABEL_18:
      if (v12 == v48)
        return;
    }
  }
  v29 = 0;
  v46 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v29 != v46)
  {
    v30 = v7[5];
    v31 = *(id *)(v4 + 32 + 8 * v29);
    v32 = NSObject._rawHashValue(seed:)(v30);
    v33 = -1 << *((_BYTE *)v7 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
    v37 = 1 << v34;
    if (((1 << v34) & v36) != 0)
    {
      a3(0);
      v38 = *(id *)(v7[6] + 8 * v34);
      v39 = static NSObject.== infix(_:_:)(v38, v31);

      if ((v39 & 1) != 0)
        goto LABEL_30;
      v40 = ~v33;
      v34 = (v34 + 1) & v40;
      v35 = v34 >> 6;
      v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
      v37 = 1 << v34;
      if ((v36 & (1 << v34)) != 0)
      {
        while (1)
        {
          v41 = *(id *)(v7[6] + 8 * v34);
          v42 = static NSObject.== infix(_:_:)(v41, v31);

          if ((v42 & 1) != 0)
            break;
          v34 = (v34 + 1) & v40;
          v35 = v34 >> 6;
          v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
          v37 = 1 << v34;
          if ((v36 & (1 << v34)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v8 = v48;
        goto LABEL_31;
      }
LABEL_38:
      v8 = v48;
    }
    *(_QWORD *)&v11[8 * v35] = v37 | v36;
    *(_QWORD *)(v7[6] + 8 * v34) = v31;
    v43 = v7[2];
    v14 = __OFADD__(v43, 1);
    v44 = v43 + 1;
    if (v14)
      goto LABEL_45;
    v7[2] = v44;
LABEL_31:
    if (++v29 == v8)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

void *sub_1002EBFA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void *result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v29 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_10000B4C8(&qword_100558F60);
    v9 = static _SetStorage.allocate(capacity:)(v8);
    v10 = 0;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v30 = v8;
    v31 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v34 = v9 + 56;
    while (1)
    {
      v32 = v10;
      v33(v7, v31 + v12 * v10, v2);
      v13 = *(_QWORD *)(v9 + 40);
      v14 = sub_10001254C(&qword_100558F68, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v2, v14);
      v16 = ~(-1 << *(_BYTE *)(v9 + 32));
      v17 = v15 & v16;
      v18 = (v15 & (unint64_t)v16) >> 6;
      v19 = *(_QWORD *)(v34 + 8 * v18);
      v20 = 1 << (v15 & v16);
      if ((v20 & v19) != 0)
      {
        do
        {
          v33(v5, *(_QWORD *)(v9 + 48) + v17 * v12, v2);
          v21 = sub_10001254C(&qword_100558F70, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v22 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v7, v2, v21);
          v23 = v3;
          v24 = *(void (**)(char *, uint64_t))(v3 + 8);
          v24(v5, v2);
          if ((v22 & 1) != 0)
          {
            v24(v7, v2);
            v3 = v23;
            v8 = v30;
            goto LABEL_4;
          }
          v17 = (v17 + 1) & v16;
          v18 = v17 >> 6;
          v19 = *(_QWORD *)(v34 + 8 * (v17 >> 6));
          v20 = 1 << v17;
          v3 = v23;
        }
        while ((v19 & (1 << v17)) != 0);
        v8 = v30;
      }
      *(_QWORD *)(v34 + 8 * v18) = v20 | v19;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v17 * v12, v7, v2);
      v26 = *(_QWORD *)(v9 + 16);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        break;
      *(_QWORD *)(v9 + 16) = v28;
LABEL_4:
      v10 = v32 + 1;
      if (v32 + 1 == v8)
        return (void *)v9;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_1002EC210(uint64_t a1)
{
  return sub_1002EC21C(a1, &qword_100558F78);
}

Swift::Int sub_1002EC21C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000B4C8(a2);
    v4 = static _SetStorage.allocate(capacity:)(v2);
    v5 = 0;
    v6 = v4 + 56;
    v7 = a1 + 32;
    while (1)
    {
      v8 = *(unsigned __int8 *)(v7 + v5);
      Hasher.init(_seed:)(v20);
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v4 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v4 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(unsigned __int8 *)(v15 + v11) == (_DWORD)v8)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(unsigned __int8 *)(v15 + v11) == (_DWORD)v8)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v8;
      v17 = *(_QWORD *)(v4 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v4 + 16) = v19;
LABEL_3:
      if (++v5 == v2)
        return v4;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_1002EC358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558F88;
  if (!qword_100558F88)
  {
    v1 = objc_opt_self(MSVLyricsAgent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100558F88);
  }
  return result;
}

uint64_t sub_1002EC394()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, qword_1005628B8);
  sub_10000D78C(v0, (uint64_t)qword_1005628B8);
  return static Logger.music(_:)(0x75426C6F626D7953, 0xEC0000006E6F7474);
}

unint64_t SymbolButton.Configuration.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  double v12;
  double v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  int v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  void *v33;
  void *v34;
  double v35;
  char v36;
  uint64_t v37;
  void *v38;
  double v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  char v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  id v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  void *v76;
  void *v77;
  void *v78;
  double v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  id v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  Swift::String v108;
  void *v109;
  uint64_t v110;
  double v111;
  id v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  id v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  void *v122;
  int v123;
  uint64_t v124;
  id v125;
  id v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  int *v130;
  uint64_t v131;
  id v132;
  void (**v133)(char *, uint64_t, id);
  Swift::String v134;
  char *v135;
  char *v136;
  Swift::String v137;
  Swift::String v138;
  void *v139;
  Swift::String v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  id v145;
  Swift::String v146;
  id v147;
  id v148;
  id v149;
  uint64_t v150;
  void *v151;
  void *v152;
  Swift::String v153;
  Swift::String v154;
  id v155;
  id v156;
  id v157;
  uint64_t v158;
  void *v159;
  void *v160;
  Swift::String v161;
  Swift::String v162;
  void (**v163)(char *, uint64_t, id);
  void (**v164)(char *, uint64_t, id);
  id v165;
  uint64_t v166;
  void *v167;
  void *v168;
  Swift::String v169;
  Swift::String v170;
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;
  Swift::String v174;
  Swift::String v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  id v184;
  id v185;
  Swift::String v186;
  Swift::String v187;
  uint64_t v188;
  Swift::String v189;
  uint64_t *v190;
  void *v191;
  Swift::String v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  id v196;
  Swift::String v197;
  Swift::String v198;
  Swift::String v199;
  Swift::String v200;
  Swift::String v201;
  id v202;
  Swift::String v203;
  Swift::String v204;
  Swift::String v205;
  unsigned __int8 *v206;
  int v207;
  void *v208;
  void *v209;
  int v210;
  Swift::String v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  Swift::String v215;
  id v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  Swift::String v220;
  Swift::String v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  Swift::String v226;
  Swift::String v227;
  Swift::String v228;
  Swift::String v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  Swift::String v233;
  Swift::String v234;
  Swift::String v235;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  char *v244;
  char *v245;
  uint64_t v246;
  void (**v247)(char *, uint64_t, id);
  id v248;
  uint64_t v249;
  int *v250;
  Swift::String v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  Swift::String v256;
  unint64_t v257;
  unint64_t v258;

  v1 = v0;
  sub_10000B4C8(&qword_100560490);
  __chkstk_darwin();
  v246 = (uint64_t)&v237 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)type metadata accessor for UIView.Corner(0);
  v247 = (void (**)(char *, uint64_t, id))*(v3 - 1);
  v248 = v3;
  __chkstk_darwin();
  v244 = (char *)&v237 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v245 = (char *)&v237 - v5;
  v257 = 0xD00000000000001CLL;
  v258 = 0x8000000100451520;
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0xD000000000000017;
  v251._object = (void *)0x8000000100451540;
  v6 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  v7._countAndFlagsBits = Double.description.getter(*(double *)(v0 + v6[12]));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0x6D756D696E696D20;
  v251._object = (void *)0xEF203A20657A6953;
  v9._countAndFlagsBits = CGSize.description.getter(*(double *)(v1 + v6[13]), *(double *)(v1 + v6[13] + 8));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v11 = v0 + v6[14];
  if ((*(_BYTE *)(v11 + 16) & 1) == 0)
  {
    v13 = *(double *)v11;
    v12 = *(double *)(v11 + 8);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000014;
    v251._object = (void *)0x8000000100451900;
    v14._countAndFlagsBits = CGSize.description.getter(v13, v12);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 10;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
  }
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v256._countAndFlagsBits = 0xD000000000000011;
  v256._object = (void *)0x8000000100451560;
  v16 = v0 + v6[15];
  v17 = *(_OWORD *)(v16 + 16);
  v251 = *(Swift::String *)v16;
  v252 = v17;
  _s3__C23NSDirectionalEdgeInsetsVMa_0(0);
  v19._countAndFlagsBits = String.init<A>(describing:)(&v251, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 10;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  String.append(_:)(v256);
  swift_bridgeObjectRelease();
  v21 = *(unsigned __int8 *)(v0 + v6[19]);
  if (v21 == 2)
  {
    v22._countAndFlagsBits = 0xD00000000000001ALL;
    v22._object = (void *)0x8000000100451580;
    String.append(_:)(v22);
  }
  else
  {
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000010;
    v251._object = (void *)0x80000001004518E0;
    if ((v21 & 1) != 0)
      v23 = 1702195828;
    else
      v23 = 0x65736C6166;
    if ((v21 & 1) != 0)
      v24 = 0xE400000000000000;
    else
      v24 = 0xE500000000000000;
    v25 = v24;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 10;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
  }
  v251._countAndFlagsBits = 0x3A206168706C6120;
  v251._object = (void *)0xE900000000000020;
  v27._countAndFlagsBits = Double.description.getter(*(double *)(v0 + v6[17]));
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 10;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0x203A20746E697420;
  v251._object = (void *)0xE800000000000000;
  v250 = v6;
  v256._countAndFlagsBits = *(_QWORD *)(v0 + v6[18]);
  v29 = (id)v256._countAndFlagsBits;
  v249 = sub_10000B4C8(&qword_100558B98);
  v30._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 10;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v32 = *(void **)(v0 + 8);
  if (v32)
  {
    v33 = *(void **)(v0 + 16);
    v34 = *(void **)(v0 + 24);
    v35 = *(double *)(v0 + 32);
    v36 = *(_BYTE *)(v0 + 40);
    v37 = *(_QWORD *)(v0 + 48);
    v241 = *(_QWORD *)(v0 + 56);
    v239 = *(_QWORD *)(v0 + 64);
    v238 = *(void **)(v0 + 72);
    LODWORD(v242) = *(unsigned __int8 *)(v0 + 80);
    v38 = *(void **)(v0 + 96);
    v240 = *(_QWORD *)(v0 + 88);
    v39 = *(double *)(v0 + 104);
    v243 = *(id *)(v0 + 112);
    v40 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = 0x6D7953209480E220;
    v41._object = (void *)0xAE000A7B206C6F62;
    String.append(_:)(v41);
    v251._countAndFlagsBits = 0x656D616E20202020;
    v251._object = (void *)0xEB00000000203A20;
    v42._countAndFlagsBits = v40;
    v42._object = v32;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 10;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v33)
    {
      v44 = objc_msgSend(v33, "bundlePath");
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v47 = v46;

      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v251, "    bundle : ");
      HIWORD(v251._object) = -4864;
      v48._countAndFlagsBits = v45;
      v48._object = v47;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._countAndFlagsBits = 10;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v251, "    style : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v256._countAndFlagsBits = (uint64_t)v34;
    type metadata accessor for TextStyle(0);
    v51 = v50;
    v52 = v34;
    v53._countAndFlagsBits = String.init<A>(describing:)(&v256, v51);
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._countAndFlagsBits = 10;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000014;
      v251._object = (void *)0x80000001004518C0;
      v55._countAndFlagsBits = Double.description.getter(v35);
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 10;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    weight : ");
    HIWORD(v251._object) = -4864;
    v256._countAndFlagsBits = v37;
    type metadata accessor for SymbolWeight(0);
    v58._countAndFlagsBits = String.init<A>(describing:)(&v256, v57);
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 10;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    scale : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v256._countAndFlagsBits = v241;
    type metadata accessor for SymbolScale(0);
    v61._countAndFlagsBits = String.init<A>(describing:)(&v256, v60);
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 10;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v63 = v242;
    if ((_DWORD)v242 != 255)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v256, "    offset : ");
      HIWORD(v256._object) = -4864;
      v251._countAndFlagsBits = v239;
      v251._object = v238;
      LOBYTE(v252) = v63 & 1;
      v64 = sub_10000B4C8(&qword_1005609B0);
      v65._countAndFlagsBits = String.init<A>(describing:)(&v251, v64);
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 10;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      String.append(_:)(v256);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v67._countAndFlagsBits = Double.description.getter(v39);
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._countAndFlagsBits = 10;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v243;
    v69 = v243;
    v70._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 10;
    v71._object = (void *)0xE100000000000000;
    String.append(_:)(v71);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v38)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000018;
      v251._object = (void *)0x80000001004518A0;
      v72._countAndFlagsBits = v240;
      v72._object = v38;
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._countAndFlagsBits = 10;
      v73._object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v74._countAndFlagsBits = 687392;
    v74._object = (void *)0xE300000000000000;
    String.append(_:)(v74);
  }
  else
  {
    v75._object = (void *)0x80000001004515A0;
    v75._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v75);
  }
  v76 = *(void **)(v1 + 128);
  if (v76)
  {
    v77 = *(void **)(v1 + 160);
    v242 = *(_QWORD *)(v1 + 152);
    LODWORD(v243) = *(unsigned __int8 *)(v1 + 184);
    v78 = *(void **)(v1 + 176);
    v79 = *(double *)(v1 + 168);
    v80 = *(_QWORD *)(v1 + 144);
    v81 = *(void **)(v1 + 136);
    v82 = *(_QWORD *)(v1 + 120);
    swift_bridgeObjectRetain();
    v83._object = (void *)0xAD00000A7B20656CLL;
    v83._countAndFlagsBits = 0x746954209480E220;
    String.append(_:)(v83);
    v251._countAndFlagsBits = 0x7478657420202020;
    v251._object = (void *)0xEB00000000203A20;
    v84._countAndFlagsBits = v82;
    v84._object = v76;
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    v85._countAndFlagsBits = 10;
    v85._object = (void *)0xE100000000000000;
    String.append(_:)(v85);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    style : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v256._countAndFlagsBits = (uint64_t)v81;
    type metadata accessor for TextStyle(0);
    v87 = v86;
    v88 = v81;
    v89._countAndFlagsBits = String.init<A>(describing:)(&v256, v87);
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    v90._countAndFlagsBits = 10;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    weight : ");
    HIWORD(v251._object) = -4864;
    v256._countAndFlagsBits = v80;
    type metadata accessor for Weight(0);
    v92._countAndFlagsBits = String.init<A>(describing:)(&v256, v91);
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    v93._countAndFlagsBits = 10;
    v93._object = (void *)0xE100000000000000;
    String.append(_:)(v93);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v94._countAndFlagsBits = Double.description.getter(v79);
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    v95._countAndFlagsBits = 10;
    v95._object = (void *)0xE100000000000000;
    String.append(_:)(v95);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v78;
    v96 = v78;
    v97._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v97);
    swift_bridgeObjectRelease();
    v98._countAndFlagsBits = 10;
    v98._object = (void *)0xE100000000000000;
    String.append(_:)(v98);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    hidden : ");
    HIWORD(v251._object) = -4864;
    if ((_DWORD)v243)
      v99 = 1702195828;
    else
      v99 = 0x65736C6166;
    if ((_DWORD)v243)
      v100 = 0xE400000000000000;
    else
      v100 = 0xE500000000000000;
    v101 = v100;
    String.append(_:)(*(Swift::String *)&v99);
    swift_bridgeObjectRelease();
    v102._countAndFlagsBits = 10;
    v102._object = (void *)0xE100000000000000;
    String.append(_:)(v102);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v77)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000018;
      v251._object = (void *)0x80000001004518A0;
      v103._countAndFlagsBits = v242;
      v103._object = v77;
      String.append(_:)(v103);
      swift_bridgeObjectRelease();
      v104._countAndFlagsBits = 10;
      v104._object = (void *)0xE100000000000000;
      String.append(_:)(v104);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v105 = 687392;
    v106 = 0xE300000000000000;
  }
  else
  {
    v105 = 0x1000000000000011;
    v106 = 0x80000001004515C0;
  }
  String.append(_:)(*(Swift::String *)&v105);
  v107 = *(void **)(v1 + 200);
  if (v107 == (void *)1)
  {
    v108._countAndFlagsBits = 0x1000000000000016;
    v108._object = (void *)0x80000001004515E0;
    String.append(_:)(v108);
  }
  else
  {
    v110 = *(_QWORD *)(v1 + 208);
    v109 = *(void **)(v1 + 216);
    v111 = *(double *)(v1 + 192);
    swift_bridgeObjectRetain();
    v112 = v107;
    v113._object = (void *)0x8000000100451880;
    v113._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v113);
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v114._countAndFlagsBits = Double.description.getter(v111);
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    v115._countAndFlagsBits = 10;
    v115._object = (void *)0xE100000000000000;
    String.append(_:)(v115);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v107;
    v116 = v112;
    v117._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v117);
    swift_bridgeObjectRelease();
    v118._countAndFlagsBits = 10;
    v118._object = (void *)0xE100000000000000;
    String.append(_:)(v118);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    if (v109)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000018;
      v251._object = (void *)0x80000001004518A0;
      v119._countAndFlagsBits = v110;
      v119._object = v109;
      String.append(_:)(v119);
      swift_bridgeObjectRelease();
      v120._countAndFlagsBits = 10;
      v120._object = (void *)0xE100000000000000;
      String.append(_:)(v120);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v121._countAndFlagsBits = 687392;
    v121._object = (void *)0xE300000000000000;
    String.append(_:)(v121);
    swift_bridgeObjectRelease();

  }
  v122 = *(void **)(v1 + 288);
  if (v122)
  {
    v123 = *(_DWORD *)(v1 + 280);
    v124 = *(_QWORD *)(v1 + 272);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    v125 = v122;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v256._countAndFlagsBits = 0x726F42209480E220;
    v256._object = (void *)0xAE00203A20726564;
    v251._countAndFlagsBits = v124;
    LOBYTE(v251._object) = v123 & 1;
    *(_QWORD *)&v252 = v125;
    v126 = v125;
    v127._countAndFlagsBits = String.init<A>(describing:)(&v251, &type metadata for UIView.Border);
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    v128._countAndFlagsBits = 10;
    v128._object = (void *)0xE100000000000000;
    String.append(_:)(v128);
    String.append(_:)(v256);

    swift_bridgeObjectRelease();
  }
  else
  {
    v129._object = (void *)0x8000000100451600;
    v129._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v129);
  }
  v130 = v250;
  v131 = v246;
  sub_1002EDF48(v1 + v250[9], v246);
  v133 = v247;
  v132 = v248;
  if (((unsigned int (*)(uint64_t, uint64_t, id))v247[6])(v131, 1, v248) == 1)
  {
    sub_1002EDF90(v131);
    v134._object = (void *)0x8000000100451620;
    v134._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v134);
  }
  else
  {
    v135 = v245;
    v133[4](v245, v131, v132);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x726F43209480E220;
    v251._object = (void *)0xAE00203A2072656ELL;
    v136 = v244;
    v133[2](v244, (uint64_t)v135, v132);
    v137._countAndFlagsBits = String.init<A>(describing:)(v136, v132);
    String.append(_:)(v137);
    swift_bridgeObjectRelease();
    v138._countAndFlagsBits = 10;
    v138._object = (void *)0xE100000000000000;
    String.append(_:)(v138);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    ((void (*)(char *, id))v133[1])(v135, v132);
  }
  v139 = *(void **)(v1 + 224);
  if (v139 == (void *)1)
  {
    v140._countAndFlagsBits = 0x1000000000000014;
    v140._object = (void *)0x8000000100451640;
    String.append(_:)(v140);
  }
  else
  {
    v142 = *(void **)(v1 + 232);
    v141 = *(void **)(v1 + 240);
    v143 = *(void **)(v1 + 264);
    v246 = *(_QWORD *)(v1 + 256);
    v144 = *(unsigned __int8 *)(v1 + 248);
    swift_bridgeObjectRetain();
    v145 = v139;
    v248 = v142;
    v247 = v141;
    v146._countAndFlagsBits = 0x1000000000000010;
    v146._object = (void *)0x8000000100451800;
    String.append(_:)(v146);
    if (v139)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v147 = v145;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000017;
      v251._object = (void *)0x8000000100451860;
      v148 = v147;
      v149 = objc_msgSend(v148, "description");
      v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
      v152 = v151;

      v153._countAndFlagsBits = v150;
      v153._object = v152;
      String.append(_:)(v153);
      swift_bridgeObjectRelease();
      v154._countAndFlagsBits = 10;
      v154._object = (void *)0xE100000000000000;
      String.append(_:)(v154);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
    }
    if (v142)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v155 = v248;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000017;
      v251._object = (void *)0x8000000100451840;
      v156 = v155;
      v157 = objc_msgSend(v156, "description");
      v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      v160 = v159;

      v161._countAndFlagsBits = v158;
      v161._object = v160;
      String.append(_:)(v161);
      swift_bridgeObjectRelease();
      v162._countAndFlagsBits = 10;
      v162._object = (void *)0xE100000000000000;
      String.append(_:)(v162);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
    }
    if (v141)
    {
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v163 = v247;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000014;
      v251._object = (void *)0x8000000100451820;
      v164 = v163;
      v165 = objc_msgSend(v164, "description");
      v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      v168 = v167;

      v169._countAndFlagsBits = v166;
      v169._object = v168;
      String.append(_:)(v169);
      swift_bridgeObjectRelease();
      v170._countAndFlagsBits = 10;
      v170._object = (void *)0xE100000000000000;
      String.append(_:)(v170);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
    }
    v130 = v250;
    if (v144 != 2)
    {
      strcpy((char *)&v251, "    color : ");
      BYTE5(v251._object) = 0;
      HIWORD(v251._object) = -5120;
      LOBYTE(v256._countAndFlagsBits) = v144 & 1;
      v171._countAndFlagsBits = String.init<A>(describing:)(&v256, &type metadata for SymbolButton.Material.Color);
      String.append(_:)(v171);
      swift_bridgeObjectRelease();
      v172._countAndFlagsBits = 10;
      v172._object = (void *)0xE100000000000000;
      String.append(_:)(v172);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    if (v143)
    {
      strcpy((char *)&v251, "    group : ");
      BYTE5(v251._object) = 0;
      HIWORD(v251._object) = -5120;
      swift_bridgeObjectRetain();
      v173._countAndFlagsBits = v246;
      v173._object = v143;
      String.append(_:)(v173);
      swift_bridgeObjectRelease();
      v174._countAndFlagsBits = 10;
      v174._object = (void *)0xE100000000000000;
      String.append(_:)(v174);
      String.append(_:)(v251);
      swift_bridgeObjectRelease();
    }
    v175._countAndFlagsBits = 687392;
    v175._object = (void *)0xE300000000000000;
    String.append(_:)(v175);
    swift_bridgeObjectRelease();

  }
  v176 = v1 + v130[10];
  v177 = *(void **)v176;
  if (*(_QWORD *)v176)
  {
    v179 = *(_QWORD *)(v176 + 40);
    v178 = *(void **)(v176 + 48);
    v181 = *(_QWORD *)(v176 + 24);
    v180 = *(_QWORD *)(v176 + 32);
    v182 = *(void **)(v176 + 8);
    v183 = *(_QWORD *)(v176 + 16);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    sub_1002EDFE0(v177, (uint64_t)v182, v183, v181, v180, v179, v178);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v256._countAndFlagsBits = 0x1000000000000013;
    v256._object = (void *)0x80000001004517E0;
    v251._countAndFlagsBits = (uint64_t)v177;
    v251._object = v182;
    *(_QWORD *)&v252 = v183;
    *((_QWORD *)&v252 + 1) = v181;
    v253 = v180;
    v254 = v179;
    v255 = v178;
    v184 = v178;
    v185 = v177;
    v186._countAndFlagsBits = String.init<A>(describing:)(&v251, &type metadata for SymbolButton.CustomView);
    String.append(_:)(v186);
    swift_bridgeObjectRelease();
    v187._countAndFlagsBits = 10;
    v187._object = (void *)0xE100000000000000;
    String.append(_:)(v187);
    String.append(_:)(v256);
    swift_bridgeObjectRelease();
    v188 = v179;
    v130 = v250;
    sub_1002E625C(v177, (uint64_t)v182, v183, v181, v180, v188, v178);
  }
  else
  {
    v189._countAndFlagsBits = 0x1000000000000017;
    v189._object = (void *)0x8000000100451660;
    String.append(_:)(v189);
  }
  v190 = (uint64_t *)(v1 + v130[11]);
  v191 = (void *)v190[2];
  if (v191 == (void *)1)
  {
    v192._countAndFlagsBits = 0x1000000000000011;
    v192._object = (void *)0x8000000100451680;
    String.append(_:)(v192);
  }
  else
  {
    v194 = *v190;
    v193 = v190[1];
    v195 = *(double *)v190;
    v196 = v191;
    v197._countAndFlagsBits = 0x646142209480E220;
    v197._object = (void *)0xAD00000A7B206567;
    String.append(_:)(v197);
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000014;
    v251._object = (void *)0x80000001004517C0;
    v198._countAndFlagsBits = Double.description.getter(v195);
    String.append(_:)(v198);
    swift_bridgeObjectRelease();
    v199._countAndFlagsBits = 10;
    v199._object = (void *)0xE100000000000000;
    String.append(_:)(v199);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    strcpy((char *)&v251, "    alpha : ");
    BYTE5(v251._object) = 0;
    HIWORD(v251._object) = -5120;
    v200._countAndFlagsBits = Double.description.getter(*(double *)&v193);
    String.append(_:)(v200);
    swift_bridgeObjectRelease();
    v201._countAndFlagsBits = 10;
    v201._object = (void *)0xE100000000000000;
    String.append(_:)(v201);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0x746E697420202020;
    v251._object = (void *)0xEB00000000203A20;
    v256._countAndFlagsBits = (uint64_t)v191;
    v202 = v196;
    v203._countAndFlagsBits = String.init<A>(describing:)(&v256, v249);
    String.append(_:)(v203);
    swift_bridgeObjectRelease();
    v204._countAndFlagsBits = 10;
    v204._object = (void *)0xE100000000000000;
    String.append(_:)(v204);
    String.append(_:)(v251);
    swift_bridgeObjectRelease();
    v205._countAndFlagsBits = 687392;
    v205._object = (void *)0xE300000000000000;
    String.append(_:)(v205);
    sub_1002EDFD0(v194, v193, v191);
  }
  v206 = (unsigned __int8 *)(v1 + v250[16]);
  v207 = *v206;
  v208 = (void *)*((_QWORD *)v206 + 1);
  v209 = (void *)*((_QWORD *)v206 + 2);
  v210 = v206[24];
  v211._countAndFlagsBits = 0x1000000000000015;
  v211._object = (void *)0x80000001004516A0;
  String.append(_:)(v211);
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0xD00000000000001BLL;
  v251._object = (void *)0x80000001004516C0;
  if (v207)
    v212 = 1702195828;
  else
    v212 = 0x65736C6166;
  if (v207)
    v213 = 0xE400000000000000;
  else
    v213 = 0xE500000000000000;
  v214 = v213;
  String.append(_:)(*(Swift::String *)&v212);
  swift_bridgeObjectRelease();
  v215._countAndFlagsBits = 10;
  v215._object = (void *)0xE100000000000000;
  String.append(_:)(v215);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  if (v208)
  {
    v251._countAndFlagsBits = 0;
    v251._object = (void *)0xE000000000000000;
    v216 = v208;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v251._countAndFlagsBits = 0xD000000000000021;
    v251._object = (void *)0x8000000100451790;
    v256._countAndFlagsBits = (uint64_t)v216;
    type metadata accessor for UIContentSizeCategory(0);
    v218 = v217;
    v219 = v216;
    v220._countAndFlagsBits = String.init<A>(describing:)(&v256, v218);
    String.append(_:)(v220);
    swift_bridgeObjectRelease();
    v221._countAndFlagsBits = 10;
    v221._object = (void *)0xE100000000000000;
    String.append(_:)(v221);
    String.append(_:)(v251);

    swift_bridgeObjectRelease();
    if (v209)
    {
LABEL_72:
      v251._countAndFlagsBits = 0;
      v251._object = (void *)0xE000000000000000;
      v222 = v209;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v251._countAndFlagsBits = 0xD000000000000021;
      v251._object = (void *)0x8000000100451760;
      v256._countAndFlagsBits = (uint64_t)v222;
      type metadata accessor for UIContentSizeCategory(0);
      v224 = v223;
      v225 = v222;
      v226._countAndFlagsBits = String.init<A>(describing:)(&v256, v224);
      String.append(_:)(v226);
      swift_bridgeObjectRelease();
      v227._countAndFlagsBits = 10;
      v227._object = (void *)0xE100000000000000;
      String.append(_:)(v227);
      String.append(_:)(v251);

      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
  }
  else
  {
    v228._countAndFlagsBits = 0xD00000000000002DLL;
    v228._object = (void *)0x80000001004516E0;
    String.append(_:)(v228);
    if (v209)
      goto LABEL_72;
  }
  v229._countAndFlagsBits = 0xD00000000000002DLL;
  v229._object = (void *)0x8000000100451710;
  String.append(_:)(v229);
LABEL_75:
  v251._countAndFlagsBits = 0;
  v251._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v251._countAndFlagsBits = 0xD00000000000001ELL;
  v251._object = (void *)0x8000000100451740;
  if (v210)
    v230 = 1702195828;
  else
    v230 = 0x65736C6166;
  if (v210)
    v231 = 0xE400000000000000;
  else
    v231 = 0xE500000000000000;
  v232 = v231;
  String.append(_:)(*(Swift::String *)&v230);
  swift_bridgeObjectRelease();
  v233._countAndFlagsBits = 10;
  v233._object = (void *)0xE100000000000000;
  String.append(_:)(v233);
  String.append(_:)(v251);
  swift_bridgeObjectRelease();
  v234._countAndFlagsBits = 687392;
  v234._object = (void *)0xE300000000000000;
  String.append(_:)(v234);
  v235._countAndFlagsBits = 41;
  v235._object = (void *)0xE100000000000000;
  String.append(_:)(v235);
  return v257;
}

uint64_t sub_1002EDF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100560490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002EDF90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100560490);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1002EDFD0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 != (void *)1)

}

id sub_1002EDFE0(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v7;
  id v8;

  if (result)
  {
    v8 = result;
    v7 = a7;
    return v8;
  }
  return result;
}

void sub_1002EE010(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002EE02C, (uint64_t)&unk_10051ABD8, &static UIColor.MusicTint.normal);
}

id sub_1002EE02C(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_1002EEB70();
    v5 = 1.0;
    v6 = 250;
    if (v4 == (id)1)
    {
      v7 = 88;
      v8 = 106;
    }
    else
    {
      v7 = 45;
      v8 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 204;
      v7 = 0;
      v8 = 20;
    }
    else
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 250;
      v7 = 35;
      v8 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100451940, "MusicCoreUI/TintColor.swift", 27, 2, 23, 0);
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_100557D60 != -1)
    swift_once(&qword_100557D60, sub_1002EE010);
  return &static UIColor.MusicTint.normal;
}

id static UIColor.MusicTint.normal.getter()
{
  return sub_100159824(&qword_100557D60, (id *)&static UIColor.MusicTint.normal);
}

void sub_1002EE1AC(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002EE1C8, (uint64_t)&unk_10051ABB0, &static UIColor.MusicTint.rollover);
}

id sub_1002EE1C8(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_1002EEB70();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 138;
      v8 = 156;
    }
    else
    {
      v7 = 95;
      v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 162;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 198;
      v7 = 0;
      v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100451940, "MusicCoreUI/TintColor.swift", 27, 2, 32, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_100557D68 != -1)
    swift_once(&qword_100557D68, sub_1002EE1AC);
  return &static UIColor.MusicTint.rollover;
}

id static UIColor.MusicTint.rollover.getter()
{
  return sub_100159824(&qword_100557D68, (id *)&static UIColor.MusicTint.rollover);
}

void sub_1002EE348(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002EE364, (uint64_t)&unk_10051AB88, &static UIColor.MusicTint.pressed);
}

id sub_1002EE364(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_1002EEB70();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 113;
      v8 = 131;
    }
    else
    {
      v7 = 70;
      v8 = 97;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 187;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 224;
      v7 = 9;
      v8 = 33;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100451940, "MusicCoreUI/TintColor.swift", 27, 2, 41, 0);
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_100557D70 != -1)
    swift_once(&qword_100557D70, sub_1002EE348);
  return &static UIColor.MusicTint.pressed;
}

id static UIColor.MusicTint.pressed.getter()
{
  return sub_100159824(&qword_100557D70, (id *)&static UIColor.MusicTint.pressed);
}

void sub_1002EE4E4(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002EE500, (uint64_t)&unk_10051AB60, &static UIColor.MusicTint.deepPressed);
}

id sub_1002EE500(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_1002EEB70();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 138;
      v8 = 156;
    }
    else
    {
      v7 = 95;
      v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 162;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_1002EEB70();
      v5 = 1.0;
      v6 = 198;
      v7 = 0;
      v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100451940, "MusicCoreUI/TintColor.swift", 27, 2, 50, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_100557D78 != -1)
    swift_once(&qword_100557D78, sub_1002EE4E4);
  return &static UIColor.MusicTint.deepPressed;
}

id static UIColor.MusicTint.deepPressed.getter()
{
  return sub_100159824(&qword_100557D78, (id *)&static UIColor.MusicTint.deepPressed);
}

void sub_1002EE680(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002EE69C, (uint64_t)&unk_10051AB38, &static UIColor.MusicTint.disabled);
}

id sub_1002EE69C(void *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_1002EEB70();
    v5 = 250;
    if (v4 == (id)1)
    {
      v6 = 88;
      v7 = 106;
    }
    else
    {
      v6 = 45;
      v7 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_1002EEB70();
      v5 = 214;
      v6 = 0;
      v7 = 23;
    }
    else
    {
      sub_1002EEB70();
      v5 = 250;
      v6 = 35;
      v7 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100451940, "MusicCoreUI/TintColor.swift", 27, 2, 59, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_100557D80 != -1)
    swift_once(&qword_100557D80, sub_1002EE680);
  return &static UIColor.MusicTint.disabled;
}

id static UIColor.MusicTint.disabled.getter()
{
  return sub_100159824(&qword_100557D80, (id *)&static UIColor.MusicTint.disabled);
}

uint64_t sub_1002EE834(uint64_t a1)
{
  return sub_1002EEA90(a1, &qword_100557D60, (id *)&static UIColor.MusicTint.normal, &static Color.MusicTint.normal, (uint64_t)sub_1002EE010);
}

uint64_t *Color.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_100557D88 != -1)
    swift_once(&qword_100557D88, sub_1002EE834);
  return &static Color.MusicTint.normal;
}

uint64_t static Color.MusicTint.normal.getter()
{
  return sub_1002EE934(&qword_100557D88, &static Color.MusicTint.normal, (uint64_t)sub_1002EE834);
}

uint64_t sub_1002EE8B4(uint64_t a1)
{
  return sub_1002EEA90(a1, &qword_100557D68, (id *)&static UIColor.MusicTint.rollover, &static Color.MusicTint.rollover, (uint64_t)sub_1002EE1AC);
}

uint64_t *Color.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_100557D90 != -1)
    swift_once(&qword_100557D90, sub_1002EE8B4);
  return &static Color.MusicTint.rollover;
}

uint64_t static Color.MusicTint.rollover.getter()
{
  return sub_1002EE934(&qword_100557D90, &static Color.MusicTint.rollover, (uint64_t)sub_1002EE8B4);
}

uint64_t sub_1002EE934(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return swift_retain(*a2);
}

uint64_t sub_1002EE96C(uint64_t a1)
{
  return sub_1002EEA90(a1, &qword_100557D70, (id *)&static UIColor.MusicTint.pressed, &static Color.MusicTint.pressed, (uint64_t)sub_1002EE348);
}

uint64_t *Color.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_100557D98 != -1)
    swift_once(&qword_100557D98, sub_1002EE96C);
  return &static Color.MusicTint.pressed;
}

uint64_t static Color.MusicTint.pressed.getter()
{
  return sub_1002EE934(&qword_100557D98, &static Color.MusicTint.pressed, (uint64_t)sub_1002EE96C);
}

uint64_t sub_1002EE9EC(uint64_t a1)
{
  return sub_1002EEA90(a1, &qword_100557D78, (id *)&static UIColor.MusicTint.deepPressed, &static Color.MusicTint.deepPressed, (uint64_t)sub_1002EE4E4);
}

uint64_t *Color.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_100557DA0 != -1)
    swift_once(&qword_100557DA0, sub_1002EE9EC);
  return &static Color.MusicTint.deepPressed;
}

uint64_t static Color.MusicTint.deepPressed.getter()
{
  return sub_1002EE934(&qword_100557DA0, &static Color.MusicTint.deepPressed, (uint64_t)sub_1002EE9EC);
}

uint64_t sub_1002EEA6C(uint64_t a1)
{
  return sub_1002EEA90(a1, &qword_100557D80, (id *)&static UIColor.MusicTint.disabled, &static Color.MusicTint.disabled, (uint64_t)sub_1002EE680);
}

uint64_t sub_1002EEA90(uint64_t a1, _QWORD *a2, id *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = Color.init(_:)(*a3);
  *a4 = result;
  return result;
}

uint64_t *Color.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_100557DA8 != -1)
    swift_once(&qword_100557DA8, sub_1002EEA6C);
  return &static Color.MusicTint.disabled;
}

uint64_t static Color.MusicTint.disabled.getter()
{
  return sub_1002EE934(&qword_100557DA8, &static Color.MusicTint.disabled, (uint64_t)sub_1002EEA6C);
}

ValueMetadata *type metadata accessor for UIColor.MusicTint()
{
  return &type metadata for UIColor.MusicTint;
}

ValueMetadata *type metadata accessor for Color.MusicTint()
{
  return &type metadata for Color.MusicTint;
}

uint64_t sub_1002EEB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002EEB68(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_1002EEB70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100560950;
  if (!qword_100560950)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100560950);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaLibrary:)(MPMediaLibrary_optional mediaLibrary)
{
  Class isa;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  NSString v6;
  id v7;
  UITraitCollection result;
  void *ObjCClassFromMetadata;
  Class v10;
  id v11;

  isa = mediaLibrary.value.super.isa;
  v2 = sub_10000B4C8(&qword_100559390);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100424B90;
  v4 = (void *)objc_opt_self(UITraitCollection);
  v5 = isa;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "_traitCollectionWithValue:forTraitNamed:", v5, v6);

  if (v7)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(_QWORD *)(v3 + 32) = v7;
    specialized Array._endMutation()(ObjCClassFromMetadata);
    sub_1000DD108(0, &qword_100558DA8, UITraitCollection_ptr);
    v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", v10);

    return (UITraitCollection)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UITraitCollection.mediaLibrary.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1002EEE28((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_1000DD108(0, &qword_100559580, MPMediaLibrary_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return (id)v5;
  }
  else
  {
    sub_1002EEE70((uint64_t)v7);
  }
  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_1002EEE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_10055A570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002EEE70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_10055A570);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

UITraitCollection __swiftcall UITraitCollection.init(legacyLibraryFilter:)(__C::MPMediaLibraryFilteringOptions legacyLibraryFilter)
{
  UITraitCollection result;

  sub_1002EF228(legacyLibraryFilter.rawValue);
  return result;
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.legacyLibraryFilter.getter()
{
  return sub_1002EF394();
}

BOOL UITraitCollection.isMediaPicker.getter()
{
  void *v0;
  void *v1;

  v0 = (void *)UITraitCollection.mediaPickerConfiguration.getter();
  v1 = v0;
  if (v0)

  return v1 != 0;
}

uint64_t UITraitCollection.mediaPickerConfiguration.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1002EEE28((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_1000DD108(0, &qword_100558FA0, MPMediaPickerConfiguration_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_1002EEE70((uint64_t)v7);
    return 0;
  }
}

uint64_t UITraitCollection.init(mediaPickerConfiguration:)(void *a1)
{
  void *v2;
  id v3;
  NSString v4;
  id v5;
  __C::MPMediaLibraryFilteringOptions v6;
  Class isa;
  void *ObjCClassFromMetadata;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_class *v12;
  Class v13;
  id v14;
  uint64_t result;

  v2 = (void *)objc_opt_self(UITraitCollection);
  v3 = a1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "_traitCollectionWithValue:forTraitNamed:", v3, v4);

  if (v5)
  {
    v6.rawValue = *(_QWORD *)MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor();
    if (!objc_msgSend(v3, "showsItemsWithProtectedAssets"))
      v6.rawValue |= 0x20;
    if (!objc_msgSend(v3, "showsCloudItems"))
      v6.rawValue |= 2;
    sub_1000DD108(0, &qword_100558DA8, UITraitCollection_ptr);
    isa = UITraitCollection.init(mediaPickerLibraryFilter:)(v6).super.isa;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v9 = sub_10000B4C8(&qword_100559390);
    v10 = swift_allocObject(v9, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100428070;
    *(_QWORD *)(v10 + 32) = v5;
    *(_QWORD *)(v10 + 40) = isa;
    specialized Array._endMutation()(v10);
    v11 = v5;
    v12 = isa;
    v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", v13);

    return (uint64_t)v14;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003CLL, 0x8000000100451A40, "MusicCoreUI/UIKit+MediaPlayer.swift", 35, 2, 51, 0);
    __break(1u);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaPickerLibraryFilter:)(__C::MPMediaLibraryFilteringOptions mediaPickerLibraryFilter)
{
  UITraitCollection result;

  sub_1002EF228(mediaPickerLibraryFilter.rawValue);
  return result;
}

void sub_1002EF228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;
  void *ObjCClassFromMetadata;
  Class isa;

  v2 = sub_10000B4C8(&qword_100559390);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100424B90;
  v4 = (void *)objc_opt_self(UITraitCollection);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "_traitCollectionWithValue:forTraitNamed:", v5, v6);

  if (v7)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(_QWORD *)(v3 + 32) = v7;
    specialized Array._endMutation()(ObjCClassFromMetadata);
    sub_1000DD108(0, &qword_100558DA8, UITraitCollection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", isa);

  }
  else
  {
    __break(1u);
  }
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.mediaPickerLibraryFilter.getter()
{
  return sub_1002EF394();
}

__C::MPMediaLibraryFilteringOptions sub_1002EF394()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  NSNumber_optional v4;
  objc_class *v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_1002EEE28((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v3 = sub_1000DD108(0, &qword_100558F98, NSNumber_ptr);
    if (swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, v3, 6))
      v4.value.super.super.isa = v6;
    else
      v4.value.super.super.isa = 0;
  }
  else
  {
    sub_1002EEE70((uint64_t)v8);
    v4.value.super.super.isa = 0;
  }
  return MPMediaLibraryFilteringOptions.init(_:)(v4);
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.combinedLibraryRequestFilter.getter()
{
  Swift::UInt rawValue;

  rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  return (__C::MPMediaLibraryFilteringOptions)(UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue);
}

uint64_t UITraitCollection.configure<A, B>(libraryRequest:)(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  Swift::UInt rawValue;
  Swift::UInt v11;

  v2 = objc_msgSend(a1, "mediaLibrary");
  v3 = UITraitCollection.mediaLibrary.getter();
  v4 = v3;
  if (v2)
  {
    sub_1000DD108(0, &qword_100559580, MPMediaLibrary_ptr);
    v5 = v2;
    v6 = static NSObject.== infix(_:_:)(v5, v4);

    if ((v6 & 1) != 0)
    {
      v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {

  }
  v8 = UITraitCollection.mediaLibrary.getter();
  objc_msgSend(a1, "setMediaLibrary:", v8);

  v7 = 1;
LABEL_6:
  v9 = (unint64_t)objc_msgSend(a1, "filteringOptions");
  rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  if (((UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue) & ~v9) != 0)
  {
    v11 = UITraitCollection.legacyLibraryFilter.getter().rawValue;
    objc_msgSend(a1, "setFilteringOptions:", UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | v11 | (unint64_t)objc_msgSend(a1, "filteringOptions"));
    return 1;
  }
  return v7;
}

void static UIButton.Configuration.barButtonConfiguration(imageName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  swift_bridgeObjectRetain();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  if (v14)
  {
    v15 = objc_msgSend(v14, "imageWithConfiguration:", v12);

  }
  else
  {
    v15 = 0;
  }
  UIButton.Configuration.image.setter(v15);
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  UIButton.Configuration.baseBackgroundColor.setter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v3);
  UIButton.Configuration.buttonSize.setter(v6);

}

void static UIButton.Configuration.selectedBarButtonConfiguration(imageName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;

  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  swift_bridgeObjectRetain();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  if (v14)
  {
    v15 = objc_msgSend(v14, "imageWithConfiguration:", v12);

  }
  else
  {
    v15 = 0;
  }
  UIButton.Configuration.image.setter(v15);
  v16 = (void *)objc_opt_self(UIColor);
  UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v16, "tintColor"));
  UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v16, "systemBackgroundColor"));
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v3);
  UIButton.Configuration.buttonSize.setter(v6);

}

id static UIButton.contextBarButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  NSString v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  id v29;
  NSString v30;
  id v31;
  NSString v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v41 = (char *)&v34 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for String.LocalizationValue(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin();
  v39 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v3 = (char *)&v34 - v2;
  v4 = type metadata accessor for UIButton.Configuration.Size(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin();
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UIButton.Configuration(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin();
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin();
  v16 = (char *)&v34 - v15;
  static UIButton.Configuration.gray()(v14);
  v17 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v18);

  if (v19)
  {
    v20 = objc_msgSend(v19, "imageWithConfiguration:", v17);

  }
  else
  {
    v20 = 0;
  }
  sub_1002EFDFC();
  UIButton.Configuration.image.setter(v20);
  v21 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  UIButton.Configuration.baseBackgroundColor.setter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v38);
  UIButton.Configuration.buttonSize.setter(v6);

  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v16, v13, v36);
  v22 = (void *)UIButton.init(configuration:primaryAction:)(v16, 0);
  objc_msgSend(v22, "setShowsMenuAsPrimaryAction:", 1);
  String.LocalizationValue.init(stringLiteral:)(1701998413, 0xE400000000000000);
  v24 = v39;
  v23 = v40;
  v25 = v42;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v3, v42);
  if (qword_100557CA0 != -1)
    swift_once(&qword_100557CA0, sub_1002D2FA0);
  v26 = qword_100562670;
  v27 = (id)qword_100562670;
  v28 = v41;
  static Locale.current.getter(v27);
  String.init(localized:table:bundle:locale:comment:)(v24, 0, 0, v26, v28, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v25);
  v29 = v22;
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setAccessibilityLabel:", v30);

  v31 = v29;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v31, "setLargeContentTitle:", v32);

  objc_msgSend(v31, "setShowsLargeContentViewer:", 1);
  return v31;
}

unint64_t sub_1002EFDFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100558FA8;
  if (!qword_100558FA8)
  {
    v1 = objc_opt_self(UIButton);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100558FA8);
  }
  return result;
}

uint64_t UITraitCollection.isAccessibilitySizeCategory.getter()
{
  void *v0;
  id v1;
  char v2;

  v1 = objc_msgSend(v0, "preferredContentSizeCategory");
  v2 = UIContentSizeCategory.isAccessibilityCategory.getter();

  return v2 & 1;
}

Swift::Bool __swiftcall UIViewController.scrollToTopIfPossible()()
{
  void *v0;
  id v1;
  void *v2;
  unsigned __int8 v3;

  v1 = objc_msgSend(v0, "contentScrollView");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "_scrollToTopIfPossible:", 1);

  return v3;
}

Swift::Bool __swiftcall UIViewController.focusOnSearchBarIfPossible()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  unsigned int v4;
  id v5;
  unsigned __int8 v6;

  v1 = objc_msgSend(v0, "navigationItem");
  v2 = objc_msgSend(v1, "searchController");

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, "searchBar");
  v4 = objc_msgSend(v3, "canBecomeFirstResponder");

  if (v4)
  {
    v5 = objc_msgSend(v2, "searchBar");
    v6 = objc_msgSend(v5, "becomeFirstResponder");

    v2 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t *UIView.Border.artwork.unsafeMutableAddressor()
{
  if (qword_100557DB0 != -1)
    swift_once(&qword_100557DB0, sub_1002F0028);
  return &static UIView.Border.artwork;
}

uint64_t UIView.Corner.medium.unsafeMutableAddressor()
{
  return sub_1002F05A0(&qword_100557DD0, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_1002F0380);
}

uint64_t UIView.Corner.small.unsafeMutableAddressor()
{
  return sub_1002F05A0(&qword_100557DC8, (uint64_t)static UIView.Corner.small, (uint64_t)sub_1002F02D4);
}

void sub_1002F0028()
{
  id v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v0 = objc_allocWithZone((Class)UIColor);
  v5[4] = sub_1002F00EC;
  v6 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100034978;
  v5[3] = &unk_10051AC00;
  v1 = _Block_copy(v5);
  objc_msgSend(v0, "initWithDynamicProvider:", v1);
  _Block_release(v1);
  swift_release(v6);
  UIView.Border.init(thickness:color:)();
  static UIView.Border.artwork = v2;
  byte_100562928 = v3 & 1;
  qword_100562930 = v4;
}

id sub_1002F00EC(void *a1)
{
  id v1;
  id v2;
  double v3;

  v1 = objc_msgSend(a1, "userInterfaceStyle");
  v2 = objc_allocWithZone((Class)UIColor);
  v3 = 0.0;
  if (v1 == (id)2)
    v3 = 1.0;
  return objc_msgSend(v2, "initWithWhite:alpha:", v3, 0.1);
}

uint64_t static UIView.Border.artwork.getter()
{
  uint64_t v0;
  id v1;

  if (qword_100557DB0 != -1)
    swift_once(&qword_100557DB0, sub_1002F0028);
  v0 = static UIView.Border.artwork;
  v1 = (id)qword_100562930;
  return v0;
}

void sub_1002F01AC()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  byte_100558FB0 = v1 == (id)6;
}

uint64_t sub_1002F020C()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10000D924(v0, static UIView.Corner.extraSmall);
  sub_10000D78C(v0, (uint64_t)static UIView.Corner.extraSmall);
  if (qword_100557DB8 != -1)
    swift_once(&qword_100557DB8, sub_1002F01AC);
  v1 = 3.0;
  if (byte_100558FB0)
    v1 = 6.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.extraSmall.unsafeMutableAddressor()
{
  return sub_1002F05A0(&qword_100557DC0, (uint64_t)static UIView.Corner.extraSmall, (uint64_t)sub_1002F020C);
}

uint64_t static UIView.Corner.extraSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002F05FC(&qword_100557DC0, (uint64_t)static UIView.Corner.extraSmall, (uint64_t)sub_1002F020C, a1);
}

uint64_t sub_1002F02D4()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10000D924(v0, static UIView.Corner.small);
  sub_10000D78C(v0, (uint64_t)static UIView.Corner.small);
  if (qword_100557DB8 != -1)
    swift_once(&qword_100557DB8, sub_1002F01AC);
  v1 = 5.0;
  if (byte_100558FB0)
    v1 = 8.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t static UIView.Corner.small.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002F05FC(&qword_100557DC8, (uint64_t)static UIView.Corner.small, (uint64_t)sub_1002F02D4, a1);
}

uint64_t sub_1002F0380()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10000D924(v0, static UIView.Corner.medium);
  sub_10000D78C(v0, (uint64_t)static UIView.Corner.medium);
  if (qword_100557DB8 != -1)
    swift_once(&qword_100557DB8, sub_1002F01AC);
  v1 = 8.0;
  if (byte_100558FB0)
    v1 = 10.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t static UIView.Corner.medium.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002F05FC(&qword_100557DD0, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_1002F0380, a1);
}

uint64_t sub_1002F042C()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10000D924(v0, static UIView.Corner.large);
  sub_10000D78C(v0, (uint64_t)static UIView.Corner.large);
  if (qword_100557DB8 != -1)
    swift_once(&qword_100557DB8, sub_1002F01AC);
  v1 = 10.0;
  if (byte_100558FB0)
    v1 = 16.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.large.unsafeMutableAddressor()
{
  return sub_1002F05A0(&qword_100557DD8, (uint64_t)static UIView.Corner.large, (uint64_t)sub_1002F042C);
}

uint64_t static UIView.Corner.large.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002F05FC(&qword_100557DD8, (uint64_t)static UIView.Corner.large, (uint64_t)sub_1002F042C, a1);
}

uint64_t sub_1002F04F4()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10000D924(v0, static UIView.Corner.extraLarge);
  sub_10000D78C(v0, (uint64_t)static UIView.Corner.extraLarge);
  if (qword_100557DB8 != -1)
    swift_once(&qword_100557DB8, sub_1002F01AC);
  v1 = 14.0;
  if (byte_100558FB0)
    v1 = 24.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.extraLarge.unsafeMutableAddressor()
{
  return sub_1002F05A0(&qword_100557DE0, (uint64_t)static UIView.Corner.extraLarge, (uint64_t)sub_1002F04F4);
}

uint64_t sub_1002F05A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for UIView.Corner(0);
  return sub_10000D78C(v4, a2);
}

uint64_t static UIView.Corner.extraLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002F05FC(&qword_100557DE0, (uint64_t)static UIView.Corner.extraLarge, (uint64_t)sub_1002F04F4, a1);
}

uint64_t sub_1002F05FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for UIView.Corner(0);
  v7 = sub_10000D78C(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_1002F0664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002F0674(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_1002F067C(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002F0698, (uint64_t)&unk_10051AC70, &static HI.Color.prominentTextColor);
}

id sub_1002F0698(void *a1)
{
  return sub_1002F0730(a1, 224, 9, 33);
}

_QWORD *HI.Color.prominentTextColor.unsafeMutableAddressor()
{
  if (qword_100557DE8 != -1)
    swift_once(&qword_100557DE8, sub_1002F067C);
  return &static HI.Color.prominentTextColor;
}

id static HI.Color.prominentTextColor.getter()
{
  return sub_100159824(&qword_100557DE8, (id *)&static HI.Color.prominentTextColor);
}

void sub_1002F0704(uint64_t a1)
{
  sub_1002E0528(a1, (uint64_t)sub_1002F0720, (uint64_t)&unk_10051AC48, &static HI.Color.prominentBackgroundColor);
}

id sub_1002F0720(void *a1)
{
  return sub_1002F0730(a1, 250, 35, 59);
}

id sub_1002F0730(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = objc_msgSend(a1, "userInterfaceStyle");
  sub_1002EEB70();
  if (v7 == (id)2)
  {
    v8 = 250;
    v9 = 45;
    v10 = 72;
  }
  else
  {
    v8 = a2;
    v9 = a3;
    v10 = a4;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v8, v9, v10, 1.0);
}

_QWORD *HI.Color.prominentBackgroundColor.unsafeMutableAddressor()
{
  if (qword_100557DF0 != -1)
    swift_once(&qword_100557DF0, sub_1002F0704);
  return &static HI.Color.prominentBackgroundColor;
}

id static HI.Color.prominentBackgroundColor.getter()
{
  return sub_100159824(&qword_100557DF0, (id *)&static HI.Color.prominentBackgroundColor);
}

ValueMetadata *type metadata accessor for HI.Color()
{
  return &type metadata for HI.Color;
}

uint64_t sub_1002F0814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1002F0824(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double HI.SizeClass.rawValue.getter(char a1)
{
  return dbl_10043B040[a1];
}

double HI.SizeClass.gutter.getter(char a1)
{
  return dbl_10043AF20[a1];
}

double HI.SizeClass.margin.getter(char a1)
{
  return dbl_10043AF60[a1];
}

double HI.SizeClass.peek.getter()
{
  return 36.0;
}

_UNKNOWN **static HI.SizeClass.allCases.getter()
{
  return &off_100518930;
}

BOOL sub_1002F0894(char *a1, char *a2)
{
  return sub_1002F26B4(*a1, *a2);
}

uint64_t sub_1002F08A0@<X0>(double *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(*a1);
  *a2 = result;
  return result;
}

double sub_1002F08C8@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = dbl_10043B040[*v1];
  *a1 = result;
  return result;
}

void sub_1002F08E0(_QWORD *a1@<X8>)
{
  *a1 = &off_100518930;
}

BOOL sub_1002F08F0(char *a1, char *a2)
{
  return _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(*a1, *a2);
}

BOOL sub_1002F08FC(char *a1, char *a2)
{
  return sub_1002F0908(*a1, *a2);
}

BOOL sub_1002F0908(char a1, char a2)
{
  return dbl_10043B040[a2] >= dbl_10043B040[a1];
}

BOOL sub_1002F092C(char *a1, char *a2)
{
  return sub_1002F0938(*a1, *a2);
}

BOOL sub_1002F0938(char a1, char a2)
{
  return dbl_10043B040[a1] >= dbl_10043B040[a2];
}

BOOL sub_1002F095C(char *a1, char *a2)
{
  return sub_1002F0968(*a1, *a2);
}

BOOL sub_1002F0968(char a1, char a2)
{
  return dbl_10043B040[a2] < dbl_10043B040[a1];
}

Swift::Int sub_1002F098C()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1002F09D8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1002F09D0(uint64_t a1)
{
  char *v1;

  sub_1002F09D8(a1, *v1);
}

void sub_1002F09D8(uint64_t a1, char a2)
{
  Hasher._combine(_:)(qword_10043B000[a2]);
}

uint64_t sub_1002F0A08(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD000000000000015;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD000000000000014;
      v4 = 0x8000000100450F00;
    }
    else
    {
      v4 = 0x8000000100450F20;
    }
  }
  else
  {
    v4 = 0x8000000100450EE0;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1002F0A84()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1002F09D8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1002F0AC4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_1002F0AE0 + 4 * byte_10043AC30[a3]))();
}

double sub_1002F0AE0(char a1)
{
  return dbl_10043AFA0[a1];
}

uint64_t sub_1002F0B70(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_1002F0B6C + 4 * byte_10043AC40[a1]))(3.0);
}

double sub_1002F0B90()
{
  return 6.0;
}

uint64_t sub_1002F0B98(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_1002F0B6C + 4 * byte_10043AC3C[a1]))(7.0);
}

double sub_1002F0BB8(uint64_t a1, char a2)
{
  double result;

  result = 4.0;
  if ((a2 & 1) != 0)
    return 7.0;
  return result;
}

uint64_t sub_1002F0BCC(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_1002F0B6C + 4 * byte_10043AC38[a1]))(5.0);
}

double sub_1002F0BEC()
{
  return 10.0;
}

double sub_1002F0BF4()
{
  return 2.0;
}

double sub_1002F0BFC(uint64_t a1, char a2)
{
  double result;

  if ((a2 & 1) != 0)
    return 4.0;
  return result;
}

double sub_1002F0C0C()
{
  return 4.0;
}

double sub_1002F0C14()
{
  return 7.0;
}

double sub_1002F0C1C(uint64_t a1, char a2)
{
  double result;

  result = 5.0;
  if ((a2 & 1) != 0)
    return 9.0;
  return result;
}

double sub_1002F0C30()
{
  return 8.0;
}

double sub_1002F0C38(uint64_t a1, char a2)
{
  double result;

  result = 6.0;
  if ((a2 & 1) != 0)
    return 28.0;
  return result;
}

double sub_1002F0C4C()
{
  return 12.0;
}

double sub_1002F0C54(uint64_t a1, char a2)
{
  double result;

  result = 7.0;
  if ((a2 & 1) != 0)
    return 15.0;
  return result;
}

double sub_1002F0C68(char a1, char a2, char a3)
{
  double result;

  switch(a3)
  {
    case 1:
      if (a1 != 3)
        return 1.0;
      result = 3.0;
      if ((a2 & 1) == 0)
        return 1.0;
      return result;
    case 2:
      if (!a1)
        goto LABEL_11;
      return 1.0;
    case 5:
    case 7:
      if (a1 != 3)
        return 1.0;
      goto LABEL_11;
    case 6:
      if (a1 != 3)
      {
        if (!a1)
        {
LABEL_11:
          result = 2.0;
          if ((a2 & 1) != 0)
            return result;
        }
        return 1.0;
      }
      result = 5.0;
      if ((a2 & 1) == 0)
        return 1.0;
      return result;
    default:
      return 1.0;
  }
}

_UNKNOWN **static HI.Grid.Variant.allCases.getter()
{
  return &off_100518958;
}

void sub_1002F0CFC(_QWORD *a1@<X8>)
{
  *a1 = &off_100518980;
}

uint64_t Lyrics.TextLine.agentAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Lyrics.TextLine.direction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t Lyrics.TextLine.lyricsDirection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

double Lyrics.TextLine.primaryVocalsStartTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double Lyrics.TextLine.primaryVocalsEndTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void HI.Grid.Metrics.init(width:variant:swiping:isAccessibilitySize:)(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v10;
  double v11;
  char v12;
  unsigned __int8 v13;
  double v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  BOOL v29;

  if (a5 <= 374.0)
  {
    v13 = 0;
    v10 = 10.0;
    v11 = 16.0;
    goto LABEL_19;
  }
  v10 = 12.0;
  v11 = 20.0;
  if (a5 <= 500.0)
  {
    v13 = 1;
    goto LABEL_19;
  }
  if (a5 <= 726.0)
  {
    v13 = 2;
    goto LABEL_19;
  }
  v10 = 20.0;
  if (a5 <= 981.0)
  {
    v13 = 3;
LABEL_18:
    v11 = 34.0;
    goto LABEL_19;
  }
  if (a5 <= 1194.0)
  {
    v13 = 4;
    goto LABEL_18;
  }
  if (a5 <= 2500.0)
    v12 = 6;
  else
    v12 = 7;
  if (a5 > 1500.0)
    v13 = v12;
  else
    v13 = 5;
  v11 = 34.0;
LABEL_19:
  v14 = a5 - (v11 + v11);
  if ((a3 & 1) != 0)
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v15, "scaledValueForValue:", 1.0);
    v17 = v16;

    sub_1002F0AC4(a1, a2 & 1, v13);
    v19 = round(v18 * (1.0 / (v17 * 0.7)));
  }
  else
  {
    sub_1002F0AC4(a1, a2 & 1, v13);
    v19 = v20;
  }
  v21 = a2 & 1;
  v22 = sub_1002F0C68(a1, v21, v13);
  v23 = v22 * ((v14 - v10 * (v19 + -1.0)) / v19);
  v24 = v22 + -1.0;
  v25 = v10 * v24;
  v26 = v24 <= 0.0;
  v27 = -0.0;
  if (!v26)
    v27 = v25;
  v28 = v27 + v23;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v11;
  *(_BYTE *)(a4 + 24) = v13;
  v29 = v19 == 1.0 || v28 > 300.0;
  *(_BYTE *)(a4 + 25) = a1;
  *(_BYTE *)(a4 + 26) = v21;
  *(double *)(a4 + 32) = v14;
  *(double *)(a4 + 40) = v19;
  if ((a3 & 1) == 0)
    v29 = 0;
  *(double *)(a4 + 48) = v28;
  *(_BYTE *)(a4 + 56) = v29;
}

void HI.Grid.Metrics.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((*(_QWORD *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)(v0 + 8);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((*(_QWORD *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)(v0 + 16);
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(qword_10043B000[*(char *)(v0 + 24)]);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 25));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 26) & 1);
  if ((*(_QWORD *)(v0 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v0 + 32);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v0 + 40);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((*(_QWORD *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)(v0 + 48);
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 56) & 1);
}

Swift::Int HI.Grid.Metrics.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  HI.Grid.Metrics.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_1002F10B0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  HI.Grid.Metrics.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1002F10E8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v5, (uint64_t)v7) & 1;
}

void *HI.IndexBar.NumberOfItemsRequirement.artists.unsafeMutableAddressor()
{
  return &static HI.IndexBar.NumberOfItemsRequirement.artists;
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.artists.getter()
{
  return 50;
}

void *HI.IndexBar.NumberOfItemsRequirement.default.unsafeMutableAddressor()
{
  return &static HI.IndexBar.NumberOfItemsRequirement.default;
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.default.getter()
{
  return 100;
}

double sub_1002F1168()
{
  double result;

  result = 12.0;
  static Corner.search = xmmword_100438840;
  byte_1005629D0 = 0;
  return result;
}

__int128 *Corner.search.unsafeMutableAddressor()
{
  if (qword_100557DF8 != -1)
    swift_once(&qword_100557DF8, sub_1002F1168);
  return &static Corner.search;
}

uint64_t static Corner.search.getter()
{
  if (qword_100557DF8 != -1)
    swift_once(&qword_100557DF8, sub_1002F1168);
  return static Corner.search;
}

double sub_1002F120C()
{
  double result;

  result = 16.0;
  static Corner.featured = xmmword_100438850;
  byte_1005629F0 = 0;
  return result;
}

__int128 *Corner.featured.unsafeMutableAddressor()
{
  if (qword_100557E00 != -1)
    swift_once(&qword_100557E00, sub_1002F120C);
  return &static Corner.featured;
}

uint64_t static Corner.featured.getter()
{
  if (qword_100557E00 != -1)
    swift_once(&qword_100557E00, sub_1002F120C);
  return static Corner.featured;
}

void sub_1002F12B0()
{
  static HI.HoverOutset.list = 0x4024000000000000;
}

uint64_t *HI.HoverOutset.list.unsafeMutableAddressor()
{
  if (qword_100557E08 != -1)
    swift_once(&qword_100557E08, sub_1002F12B0);
  return &static HI.HoverOutset.list;
}

double static HI.HoverOutset.list.getter()
{
  return sub_1002E0B64(&qword_100557E08, (uint64_t)&static HI.HoverOutset.list);
}

void sub_1002F131C()
{
  static HI.HoverOutset.grid = 0x4028000000000000;
}

uint64_t *HI.HoverOutset.grid.unsafeMutableAddressor()
{
  if (qword_100557E10 != -1)
    swift_once(&qword_100557E10, sub_1002F131C);
  return &static HI.HoverOutset.grid;
}

double static HI.HoverOutset.grid.getter()
{
  return sub_1002E0B64(&qword_100557E10, (uint64_t)&static HI.HoverOutset.grid);
}

void sub_1002F1388()
{
  static HI.HoverOutset.text = 0x4010000000000000;
}

uint64_t *HI.HoverOutset.text.unsafeMutableAddressor()
{
  if (qword_100557E18 != -1)
    swift_once(&qword_100557E18, sub_1002F1388);
  return &static HI.HoverOutset.text;
}

double static HI.HoverOutset.text.getter()
{
  return sub_1002E0B64(&qword_100557E18, (uint64_t)&static HI.HoverOutset.text);
}

void sub_1002F13F4()
{
  static HI.BottomPlayer.Ornament.overlappingHeight = Int.seconds.getter(20);
}

uint64_t *HI.BottomPlayer.Ornament.overlappingHeight.unsafeMutableAddressor()
{
  if (qword_100557E20 != -1)
    swift_once(&qword_100557E20, sub_1002F13F4);
  return &static HI.BottomPlayer.Ornament.overlappingHeight;
}

double static HI.BottomPlayer.Ornament.overlappingHeight.getter()
{
  return sub_1002E0B64(&qword_100557E20, (uint64_t)&static HI.BottomPlayer.Ornament.overlappingHeight);
}

double sub_1002F1470()
{
  double result;

  if (qword_100557E20 != -1)
    swift_once(&qword_100557E20, sub_1002F13F4);
  result = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  static HI.BottomPlayer.Ornament.offset = 0;
  *(double *)&qword_100562A20 = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  return result;
}

uint64_t *HI.BottomPlayer.Ornament.offset.unsafeMutableAddressor()
{
  if (qword_100557E28 != -1)
    swift_once(&qword_100557E28, sub_1002F1470);
  return &static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.Ornament.offset.getter()
{
  if (qword_100557E28 != -1)
    swift_once(&qword_100557E28, sub_1002F1470);
  return *(double *)&static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.size(dynamicTypeSize:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v15;

  sub_10000B4C8(&qword_100558E70);
  __chkstk_darwin();
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v15 - v8;
  sub_1002F1A40(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1002F1A88((uint64_t)v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v3, v4);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.accessibility1(_:), v4);
    v10 = sub_1002F1AC8();
    v11 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v7, v4, v10);
    v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v7, v4);
    v12(v9, v4);
    if ((v11 & 1) == 0)
      return 924.0;
  }
  return 784.0;
}

void sub_1002F16C4()
{
  static HI.BottomPlayer.buttonSpacing = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.buttonSpacing.unsafeMutableAddressor()
{
  if (qword_100557E30 != -1)
    swift_once(&qword_100557E30, sub_1002F16C4);
  return &static HI.BottomPlayer.buttonSpacing;
}

double static HI.BottomPlayer.buttonSpacing.getter()
{
  return sub_1002E0B64(&qword_100557E30, (uint64_t)&static HI.BottomPlayer.buttonSpacing);
}

void sub_1002F1740()
{
  static HI.BottomPlayer.contentHorizontalPadding = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.contentHorizontalPadding.unsafeMutableAddressor()
{
  if (qword_100557E38 != -1)
    swift_once(&qword_100557E38, sub_1002F1740);
  return &static HI.BottomPlayer.contentHorizontalPadding;
}

double static HI.BottomPlayer.contentHorizontalPadding.getter()
{
  return sub_1002E0B64(&qword_100557E38, (uint64_t)&static HI.BottomPlayer.contentHorizontalPadding);
}

uint64_t _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && dbl_10043B040[*(char *)(a1 + 24)] == dbl_10043B040[*(char *)(a2 + 24)]
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && ((*(unsigned __int8 *)(a1 + 26) ^ *(unsigned __int8 *)(a2 + 26)) & 1) == 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    return (((*(_BYTE *)(a1 + 56) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 56)) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(char a1, char a2)
{
  return dbl_10043B040[a1] < dbl_10043B040[a2];
}

uint64_t _s11MusicCoreUI2HIO9SizeClassOyAE0B8Graphics7CGFloatVcfC_0(double a1)
{
  int v1;
  unsigned int v2;

  if (a1 <= 374.0)
    return 0;
  if (a1 <= 500.0)
    return 1;
  if (a1 <= 726.0)
    return 2;
  if (a1 <= 981.0)
    return 3;
  if (a1 > 2500.0)
    v1 = 7;
  else
    v1 = 6;
  if (a1 > 1500.0)
    v2 = v1;
  else
    v2 = 5;
  if (a1 > 1194.0)
    return v2;
  else
    return 4;
}

uint64_t _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(double a1)
{
  int v2;
  unsigned int v3;

  if (a1 == 374.0)
    return 0;
  if (a1 == 500.0)
    return 1;
  if (a1 == 726.0)
    return 2;
  if (a1 == 981.0)
    return 3;
  if (a1 == 1194.0)
    return 4;
  if (a1 == 2501.0)
    v2 = 7;
  else
    v2 = 8;
  if (a1 == 2500.0)
    v3 = 6;
  else
    v3 = v2;
  if (a1 == 1500.0)
    return 5;
  else
    return v3;
}

uint64_t sub_1002F1A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000B4C8(&qword_100558E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002F1A88(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000B4C8(&qword_100558E70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002F1AC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10055D940;
  if (!qword_10055D940)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_10055D940);
  }
  return result;
}

uint64_t sub_1002F1B10()
{
  return sub_100229190(&qword_100558FB8, &qword_100558FC0);
}

unint64_t sub_1002F1B38()
{
  unint64_t result;

  result = qword_100558FC8;
  if (!qword_100558FC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HI.SizeClass, &type metadata for HI.SizeClass);
    atomic_store(result, (unint64_t *)&qword_100558FC8);
  }
  return result;
}

uint64_t sub_1002F1B7C()
{
  return sub_100229190(&qword_100558FD0, &qword_100558FD8);
}

unint64_t sub_1002F1BA4()
{
  unint64_t result;

  result = qword_100558FE0;
  if (!qword_100558FE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HI.Grid.Variant, &type metadata for HI.Grid.Variant);
    atomic_store(result, (unint64_t *)&qword_100558FE0);
  }
  return result;
}

unint64_t sub_1002F1BEC()
{
  unint64_t result;

  result = qword_100558FE8;
  if (!qword_100558FE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HI.Grid.Metrics, &type metadata for HI.Grid.Metrics);
    atomic_store(result, (unint64_t *)&qword_100558FE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI()
{
  return &type metadata for HI;
}

_BYTE *initializeBufferWithCopyOfBuffer for TextBadge(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for HI.SizeClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1002F1C98 + 4 * byte_10043AC58[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1002F1CCC + 4 * byte_10043AC53[v4]))();
}

uint64_t sub_1002F1CCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F1CD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F1CDCLL);
  return result;
}

uint64_t sub_1002F1CE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F1CF0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1002F1CF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F1CFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.SizeClass()
{
  return &type metadata for HI.SizeClass;
}

ValueMetadata *type metadata accessor for HI.Grid()
{
  return &type metadata for HI.Grid;
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002F1D74 + 4 * byte_10043AC62[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002F1DA8 + 4 * byte_10043AC5D[v4]))();
}

uint64_t sub_1002F1DA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F1DB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F1DB8);
  return result;
}

uint64_t sub_1002F1DC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F1DCCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002F1DD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F1DD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Variant()
{
  return &type metadata for HI.Grid.Variant;
}

__n128 initializeWithCopy for HI.Grid.Metrics(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HI.Grid.Metrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 26);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 26) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Metrics()
{
  return &type metadata for HI.Grid.Metrics;
}

ValueMetadata *type metadata accessor for HI.IndexBar()
{
  return &type metadata for HI.IndexBar;
}

ValueMetadata *type metadata accessor for HI.IndexBar.NumberOfItemsRequirement()
{
  return &type metadata for HI.IndexBar.NumberOfItemsRequirement;
}

ValueMetadata *type metadata accessor for HI.HoverOutset()
{
  return &type metadata for HI.HoverOutset;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer()
{
  return &type metadata for HI.BottomPlayer;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer.Ornament()
{
  return &type metadata for HI.BottomPlayer.Ornament;
}

void sub_1002F1F18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v5, "userInterfaceIdiom");

  __asm { BR              X10 }
}

double static HI.Modal.modalSize(modalType:sceneSize:navigationBarHeight:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;

  sub_1002F1F18(a2, a3, a4 & 1, a1);
  return result;
}

unint64_t sub_1002F20D0()
{
  unint64_t result;

  result = qword_100558FF0;
  if (!qword_100558FF0)
  {
    result = swift_getWitnessTable("\r", &type metadata for HI.Modal.ModalType);
    atomic_store(result, (unint64_t *)&qword_100558FF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal()
{
  return &type metadata for HI.Modal;
}

uint64_t _s5ModalO9ModalTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002F2170 + 4 * byte_10043B085[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002F21A4 + 4 * byte_10043B080[v4]))();
}

uint64_t sub_1002F21A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F21AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F21B4);
  return result;
}

uint64_t sub_1002F21C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F21C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002F21CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F21D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal.ModalType()
{
  return &type metadata for HI.Modal.ModalType;
}

_QWORD *sub_1002F21F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000B4C8(&qword_1005585E0);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_1002F9370(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v12(v5, v11, v2);
      swift_dynamicCast(v8, v5, v2, v18, 7);
      v10 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_1002F9370(0, v10[2] + 1, 1);
        v10 = v19;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1002F9370(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_100011530((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_1005585E0);
      v11 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_1002F23B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, isa);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1002F2458(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v25 = _swiftEmptyArrayStorage;
    sub_1002F93E0(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (_QWORD *)(a1 + 128);
    do
    {
      v5 = *(v4 - 12);
      v6 = *(v4 - 11);
      v19 = *(v4 - 10);
      v7 = *((_BYTE *)v4 - 72);
      v8 = *((_BYTE *)v4 - 71);
      v18 = *((_BYTE *)v4 - 70);
      v9 = *(v4 - 8);
      v10 = *(v4 - 7);
      v11 = *(v4 - 6);
      v17 = *(v4 - 5);
      v20 = *((_OWORD *)v4 - 1);
      v21 = *((_OWORD *)v4 - 2);
      v12 = *v4;
      v13 = v2[2];
      v14 = v2[3];
      v25 = v2;
      swift_bridgeObjectRetain();
      swift_retain(v21);
      swift_retain(v20);
      swift_retain(v12);
      if (v13 >= v14 >> 1)
      {
        sub_1002F93E0((_QWORD *)(v14 > 1), v13 + 1, 1);
        v2 = v25;
      }
      v23 = &type metadata for Lyrics.TextLine;
      v24 = &protocol witness table for Lyrics.TextLine;
      v15 = swift_allocObject(&unk_10051B188, 120, 7);
      *(_QWORD *)&v22 = v15;
      *(_QWORD *)(v15 + 16) = v5;
      *(_QWORD *)(v15 + 24) = v6;
      *(_QWORD *)(v15 + 32) = v19;
      *(_BYTE *)(v15 + 40) = v7;
      *(_BYTE *)(v15 + 41) = v8;
      *(_BYTE *)(v15 + 42) = v18;
      *(_QWORD *)(v15 + 48) = v9;
      *(_QWORD *)(v15 + 56) = v10;
      *(_QWORD *)(v15 + 64) = v11;
      *(_QWORD *)(v15 + 72) = v17;
      *(_OWORD *)(v15 + 80) = v21;
      *(_OWORD *)(v15 + 96) = v20;
      *(_QWORD *)(v15 + 112) = v12;
      v2[2] = v13 + 1;
      sub_1000B47A8(&v22, (uint64_t)&v2[5 * v13 + 4]);
      v4 += 13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1002F2608(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756E6576;
  else
    v3 = 0x652D6D617A616873;
  if (v2)
    v4 = 0xED000073746E6576;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756E6576;
  else
    v5 = 0x652D6D617A616873;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xED000073746E6576;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

BOOL sub_1002F26B4(char a1, char a2)
{
  return dbl_10043B8F8[a1] == dbl_10043B8F8[a2];
}

uint64_t sub_1002F26D8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000015;
  v3 = 0x8000000100450EE0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000014;
    else
      v5 = 0xD000000000000015;
    if (v4 == 1)
      v6 = 0x8000000100450F00;
    else
      v6 = 0x8000000100450F20;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD000000000000015;
    v6 = 0x8000000100450EE0;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v2 = 0xD000000000000014;
    v3 = 0x8000000100450F00;
  }
  else
  {
    v3 = 0x8000000100450F20;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_1002F27CC(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 1701667182;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x73736572646461;
    else
      v4 = 7300455;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE300000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x73736572646461;
      else
        v2 = 7300455;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE300000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701667182;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v4 != 1701667182)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1002F28C4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756E6576;
  else
    v3 = 0x73747369747261;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756E6576;
  else
    v5 = 0x73747369747261;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1002F2964(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1701669236;
  else
    v2 = 1701667182;
  if ((a2 & 1) != 0)
    v3 = 1701669236;
  else
    v3 = 1701667182;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

uint64_t sub_1002F29CC(uint64_t a1, uint64_t a2)
{
  return sub_1001539C4(a1, a2, (uint64_t)&qword_100560950, UIColor_ptr);
}

BOOL sub_1002F29E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_1002F2A4C(uint64_t a1, uint64_t a2)
{
  return sub_1001539C4(a1, a2, (uint64_t)&qword_100559290, CAMediaTimingFunction_ptr);
}

uint64_t sub_1002F2A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t *i;
  int32x2_t v5;
  float64_t v6;
  float64_t v7;
  float64_t v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (float64x2_t *)(a2 + 80);
    for (i = (float64x2_t *)(a1 + 80); ; i = (float64x2_t *)((char *)i + 56))
    {
      v5 = vmovn_s64(vceqq_f64(i[-3], v3[-3]));
      if ((v5.i32[0] & v5.i32[1] & 1) == 0)
        break;
      v6 = i[-2].f64[0];
      v7 = i[-2].f64[1];
      v9 = i[-1].f64[0];
      v8 = i[-1].f64[1];
      v10 = i->f64[0];
      v11 = v3[-2].f64[0];
      v12 = v3[-2].f64[1];
      v14 = v3[-1].f64[0];
      v13 = v3[-1].f64[1];
      v15 = v3->f64[0];
      if (*(_QWORD *)&v6 == *(_QWORD *)&v11 && *(_QWORD *)&v7 == *(_QWORD *)&v12)
      {
        result = 0;
      }
      else
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v6, *(_QWORD *)&v7, *(_QWORD *)&v11, *(_QWORD *)&v12, 0);
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
      if (*(_QWORD *)&v9 != *(_QWORD *)&v14 || *(_QWORD *)&v8 != *(_QWORD *)&v13 || *(_QWORD *)&v10 != *(_QWORD *)&v15)
        return result;
      v3 = (float64x2_t *)((char *)v3 + 56);
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1002F2B54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI16PlaylistCuratorsO4ViewV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for Artwork(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B4C8((uint64_t *)&unk_10055E870);
  __chkstk_darwin();
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000B4C8(&qword_100559298);
  __chkstk_darwin();
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlaylistCurators.Curator(0);
  __chkstk_darwin();
  v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin();
  v17 = (uint64_t *)((char *)&v36 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 == *(_QWORD *)(a2 + 16))
  {
    v42 = v9;
    if (!v18 || a1 == a2)
      return 1;
    v40 = a1;
    v41 = v14;
    v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = *(_QWORD *)(v15 + 72);
    v37 = v6;
    v38 = v20;
    v39 = a2;
    while (1)
    {
      sub_1003015B0(a1 + v19, (uint64_t)v17);
      sub_1003015B0(a2 + v19, (uint64_t)v13);
      v21 = v17[1];
      v22 = v13[1];
      v23 = *v17 == *v13 && v21 == v22;
      if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v21, *v13, v22, 0) & 1) == 0)
        break;
      v24 = *(int *)(v41 + 20);
      v25 = (uint64_t)v13 + v24;
      v26 = (uint64_t)&v11[*(int *)(v42 + 48)];
      sub_100011370((uint64_t)v17 + v24, (uint64_t)v11, (uint64_t *)&unk_10055E870);
      sub_100011370(v25, v26, (uint64_t *)&unk_10055E870);
      v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      if (v27((uint64_t)v11, 1, v4) == 1)
      {
        if (v27(v26, 1, v4) != 1)
          goto LABEL_19;
        sub_100011694((uint64_t)v11, (uint64_t *)&unk_10055E870);
      }
      else
      {
        sub_100011370((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_10055E870);
        if (v27(v26, 1, v4) == 1)
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v4);
LABEL_19:
          sub_100011694((uint64_t)v11, &qword_100559298);
          break;
        }
        v28 = v43;
        v29 = v8;
        v30 = v37;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v37, v26, v4);
        v31 = sub_10001254C(&qword_10055DCA0, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
        v32 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v30, v4, v31);
        v33 = *(void (**)(char *, uint64_t))(v28 + 8);
        v34 = v30;
        v8 = v29;
        v33(v34, v4);
        v33(v29, v4);
        sub_100011694((uint64_t)v11, (uint64_t *)&unk_10055E870);
        if ((v32 & 1) == 0)
          break;
      }
      sub_1003015F4((uint64_t)v13);
      sub_1003015F4((uint64_t)v17);
      a2 = v39;
      v19 += v38;
      --v18;
      a1 = v40;
      if (!v18)
        return 1;
    }
    sub_1003015F4((uint64_t)v13);
    sub_1003015F4((uint64_t)v17);
  }
  return 0;
}

Swift::Int sub_1002F2F78(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000015;
  Hasher.init(_seed:)(v6);
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD000000000000014;
      v4 = 0x8000000100450F00;
    }
    else
    {
      v4 = 0x8000000100450F20;
    }
  }
  else
  {
    v4 = 0x8000000100450EE0;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double TimedElement.duration.getter(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(double (**)(void))(a2 + 16))();
  return v4 - (*(double (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

void TimedElement.timeRange.getter(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(double (**)(void))(a2 + 8))();
  if (v4 > (*(double (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2))
    __break(1u);
}

double Lyrics.Word.startTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v1 + 16))
    return *(double *)(v1 + 32);
  else
    return 0.0;
}

double Lyrics.Word.endTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
    return *(double *)(v1 + 56 * v2 - 16);
  else
    return 0.0;
}

uint64_t Lyrics.Word.range.getter()
{
  uint64_t v0;

  return sub_1002FCA74(*(_QWORD *)(v0 + 16));
}

uint64_t Lyrics.Word.emphasis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

double Lyrics.Word.Emphasis.factor.getter(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 0.0;
  return result;
}

void Lyrics.Word.Emphasis.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt64 v4;

  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a2;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
}

uint64_t static Lyrics.Word.Emphasis.__derived_enum_equals(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  char v4;

  if (((a2 | a4) & 1) != 0)
    v4 = a2 & a4;
  else
    v4 = *(double *)&a1 == *(double *)&a3;
  return v4 & 1;
}

Swift::Int Lyrics.Word.Emphasis.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Swift::UInt64 v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1002F320C()
{
  uint64_t v0;

  return Lyrics.Word.Emphasis.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_1002F3218()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)v0;
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v2 = v1;
    else
      v2 = 0;
    Hasher._combine(_:)(v2);
  }
}

Swift::Int sub_1002F3264()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  Swift::UInt64 v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v5);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v1;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002F32CC(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

void Lyrics.Word.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8[2];
  Swift::UInt64 v9;
  char v10;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease();
  v5 = v1[2];
  swift_bridgeObjectRetain();
  sub_1002FC830(a1, v5);
  swift_bridgeObjectRelease();
  sub_1001DDE90(v1 + 3, (uint64_t)v8);
  sub_1001DDE90(v8, (uint64_t)&v9);
  if (v10 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = v9;
    Hasher._combine(_:)(1uLL);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v6;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
}

uint64_t static Lyrics.Word.__derived_struct_equals(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  double v10;
  uint64_t v11[2];
  uint64_t v12[2];
  double v13;
  char v14;
  double v15;
  char v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    if ((sub_1002F2A60(a1[2], a2[2]) & 1) != 0)
    {
      sub_1001DDE90(a1 + 3, (uint64_t)v12);
      sub_1001DDE90(a2 + 3, (uint64_t)v11);
      sub_1001DDE90(v12, (uint64_t)&v13);
      if (v14 == 1)
      {
        sub_1001DDE90(v11, (uint64_t)&v15);
        if ((v16 & 1) != 0)
          return 1;
      }
      else
      {
        v10 = v13;
        sub_1001DDE90(v11, (uint64_t)&v15);
        if ((v16 & 1) == 0 && v10 == v15)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int Lyrics.Word.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Lyrics.Word.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1002F34DC()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  char v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v3);
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_1002F352C(uint64_t a1)
{
  Lyrics.Word.hash(into:)(a1);
}

Swift::Int sub_1002F3564()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  char v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v3);
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t sub_1002F35B0(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  BOOL v13;
  char v14;
  uint64_t result;
  int v16;
  int v17;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(double *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = *(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v9;
  if (v13
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v9, 0),
        result = 0,
        (v14 & 1) != 0))
  {
    v16 = sub_1002F2A60(v6, v10);
    v17 = v16 ^ 1 | v8;
    if (((v17 | v12) & 1) != 0)
      return v16 & v12 & v17;
    else
      return v7 == v11;
  }
  return result;
}

uint64_t Lyrics.TextLine.BackgroundVocals.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Lyrics.Syllable.wordLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void Lyrics.Syllable.hash(into:)(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 *v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt v8;

  v2 = v1;
  if ((*v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2[1];
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = v2[2];
  v7 = v2[3];
  sub_1002FCAB4((uint64_t)v2);
  String.hash(into:)(a1, v6, v7);
  sub_100139420((uint64_t)v2);
  v8 = v2[5];
  Hasher._combine(_:)(v2[4]);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v2[6]);
}

Swift::Int Lyrics.Syllable.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  _QWORD v8[9];

  v1 = v0;
  Hasher.init(_seed:)(v8);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[1];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = v0[2];
  v5 = v1[3];
  sub_1002FCAB4((uint64_t)v1);
  String.hash(into:)(v8, v4, v5);
  sub_100139420((uint64_t)v1);
  v6 = v1[5];
  Hasher._combine(_:)(v1[4]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1[6]);
  return Hasher._finalize()();
}

Swift::Int sub_1002F37A4()
{
  return Lyrics.Syllable.hashValue.getter();
}

void sub_1002F37E4(uint64_t a1)
{
  Lyrics.Syllable.hash(into:)(a1);
}

Swift::Int sub_1002F3824()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  Hasher.init(_seed:)(v11);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v1;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain();
  String.hash(into:)(v11, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

BOOL sub_1002F38E0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t Lyrics.TextLine.words.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t Lyrics.TextLine.text.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t Lyrics.TextLine.backgroundVocals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[8];

  (*(void (**)(_QWORD *__return_ptr))(v1 + 88))(v4);
  return sub_100011530((uint64_t)v4, a1, &qword_100558FF8);
}

uint64_t Lyrics.TextLine.backgroundText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3[8];
  _BYTE v4[16];
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 88))(v3);
  sub_100011530((uint64_t)v3, (uint64_t)v4, &qword_100558FF8);
  if (!v6)
    return 0;
  v1 = v5;
  swift_bridgeObjectRetain();
  sub_1002FCADC(v3);
  return v1;
}

uint64_t Lyrics.TextLine.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v1._object = (void *)0x8000000100451AA0;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x6954747261747320;
  v4._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)v0);
  v5._countAndFlagsBits = 0x656D6954646E6520;
  v5._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v5);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 8));
  v6._countAndFlagsBits = 0x3D7478657420;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = (*(uint64_t (**)(void))(v0 + 56))();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  return v10[0];
}

uint64_t Lyrics.TextLine.textAlignment.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 26) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 24) & 1) == 0)
      return 2;
  }
  else if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    return 2;
  }
  return 0;
}

_UNKNOWN **static Lyrics.Capability.allCases.getter()
{
  return &off_1005189A8;
}

uint64_t Lyrics.TextLine.init(lineIndex:startTime:endTime:primaryVocalsStartTime:primaryVocalsEndTime:agentAlignment:direction:lyricsDirection:capabilities:localizedTextProvider:localizedWordsProvider:localizedBackgroundVocalsProvider:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, __int128 a14, uint64_t a15)
{
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(_QWORD *)(a9 + 16) = result;
  *(_BYTE *)(a9 + 24) = a2 & 1;
  *(_BYTE *)(a9 + 25) = a3 & 1;
  *(_BYTE *)(a9 + 26) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(double *)(a9 + 40) = a12;
  *(double *)(a9 + 48) = a13;
  *(_QWORD *)(a9 + 56) = a6;
  *(_QWORD *)(a9 + 64) = a7;
  *(_QWORD *)(a9 + 72) = a8;
  *(_OWORD *)(a9 + 80) = a14;
  *(_QWORD *)(a9 + 96) = a15;
  return result;
}

uint64_t Lyrics.TextLine.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  if ((*(_QWORD *)v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  v5 = (*(uint64_t (**)(void))(v1 + 56))();
  v7 = v6;
  String.hash(into:)(a1, v5, v6);
  return swift_bridgeObjectRelease(v7);
}

uint64_t Lyrics.TextLine.BackgroundVocals.direction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Lyrics.TextLine.BackgroundVocals.words.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Int Lyrics.TextLine.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Lyrics.TextLine.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1002F3CB4()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 26) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    return 0;
  }
  return 2;
}

Swift::Int sub_1002F3CDC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Lyrics.TextLine.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1002F3D18(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  uint64_t v12;
  _OWORD v13[6];
  uint64_t v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0((uint64_t)v11, (uint64_t)v13) & 1;
}

double Lyrics.InstrumentalLine.endTime.getter(double a1, double a2)
{
  return a2;
}

uint64_t Lyrics.InstrumentalLine.lyricsDirection.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t Lyrics.InstrumentalLine.textAlignment.getter(uint64_t a1, char a2)
{
  return 2 * (a2 & 1u);
}

uint64_t Lyrics.InstrumentalLine.debugDescription.getter(double a1, double a2)
{
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v4._object = (void *)0x8000000100451AC0;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6954747261747320;
  v7._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v7);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  v8._countAndFlagsBits = 0x656D6954646E6520;
  v8._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v8);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
  return v10[0];
}

uint64_t Lyrics.SongwritersLine.textAlignment.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 24))
    return 2;
  else
    return 0;
}

uint64_t sub_1002F3ED4()
{
  uint64_t v0;

  return Lyrics.InstrumentalLine.debugDescription.getter(*(double *)(v0 + 8), *(double *)(v0 + 16));
}

uint64_t Lyrics.SongwritersLine.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  v1._object = (void *)0x8000000100451AE0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 8));
  v4._countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 16));
  v5._countAndFlagsBits = 0x697277676E6F7320;
  v5._object = (void *)0xED00003D73726574;
  String.append(_:)(v5);
  v6 = swift_bridgeObjectRetain();
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_1002FCB44(v0);
  return v9[0];
}

uint64_t sub_1002F4054()
{
  return Lyrics.SongwritersLine.debugDescription.getter();
}

uint64_t Lyrics.originalLines.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.availableLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

double Lyrics.leadingSilence.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t Lyrics.vocalistsType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Lyrics.songwriters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.currentLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 112, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Lyrics.currentLanguage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 112, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*Lyrics.currentLanguage.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Lyrics.staticText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 136);
  }
  else
  {
    v1 = sub_1002F41F4(v0);
    *(_QWORD *)(v0 + 136) = v1;
    *(_QWORD *)(v0 + 144) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002F41F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t countAndFlagsBits;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35[8];
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(a1 + 32);
  v33 = 0;
  v34 = 0xE000000000000000;
  v30 = *(_QWORD *)(v1 + 16);
  if (v30)
  {
    v28 = v1;
    v29 = v1 + 32;
    swift_bridgeObjectRetain_n(v1, 2);
    v2 = 0;
    do
    {
      v6 = *(_QWORD *)(v29 + 8 * v2);
      v3 = v33;
      v4 = v34;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v31 = v2;
        swift_bridgeObjectRetain_n(v6, 2);
        swift_bridgeObjectRetain();
        v8 = (uint64_t *)(v6 + 128);
        do
        {
          v16 = (uint64_t (*)(uint64_t))*(v8 - 5);
          v17 = *(v8 - 4);
          v19 = *(v8 - 2);
          v18 = (void (*)(uint64_t *__return_ptr))*(v8 - 1);
          v20 = *v8;
          swift_bridgeObjectRetain();
          swift_retain(v17);
          swift_retain(v19);
          v21 = swift_retain(v20);
          if ((v34 & 0xF00000000000000) != 0)
          {
            v22._countAndFlagsBits = 10;
            v22._object = (void *)0xE100000000000000;
            String.append(_:)(v22);
          }
          v23 = v16(v21);
          v25 = v24;
          v18(v35);
          sub_100011530((uint64_t)v35, (uint64_t)v36, &qword_100558FF8);
          v12 = v38;
          v32 = v19;
          if (v38)
          {
            v9 = v37;
            swift_bridgeObjectRetain();
            sub_1002FCADC(v35);
            v10._countAndFlagsBits = v9;
            v10._object = (void *)v12;
            String.append(_:)(v10);
            v11._countAndFlagsBits = 41;
            v11._object = (void *)0xE100000000000000;
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
            v12 = 40;
            v13 = (void *)0xE100000000000000;
          }
          else
          {
            v13 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          v14._countAndFlagsBits = v12;
          v14._object = v13;
          String.append(_:)(v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15._countAndFlagsBits = v23;
          v15._object = v25;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release(v17);
          swift_release(v32);
          swift_release(v20);
          v8 += 13;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v33;
        v4 = v34;
        v2 = v31;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      ++v2;
      v33 = v3;
      v34 = v4;
      v5._countAndFlagsBits = 10;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
    while (v2 != v30);
    swift_bridgeObjectRelease_n(v28, 2);
  }
  countAndFlagsBits = String.trim()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t Lyrics.staticText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*Lyrics.staticText.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Lyrics.staticText.getter();
  a1[1] = v3;
  return sub_1002F44D0;
}

uint64_t sub_1002F44D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 136) = v3;
  *(_QWORD *)(v1 + 144) = v2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t Lyrics.alignment(for:default:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(v3 + 96))
  {
    v4 = a1[3];
    v5 = a1[4];
    sub_10000D900(a1, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  }
  else
  {
    sub_1000C53BC((uint64_t)a1, (uint64_t)v11);
    if ((a3 & 1) != 0)
    {
      v9 = v12;
      v10 = v13;
      sub_10000D900(v11, v12);
      a2 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    }
    sub_100011758(v11);
    return a2;
  }
}

double *Lyrics.originalLine(for:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = 0uLL;
  if (!v4)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    goto LABEL_21;
  }
  v6 = result;
  v33 = a2;
  v7 = *result;
  swift_bridgeObjectRetain_n(v3, 2);
  v8 = 0;
  while (1)
  {
    v9 = v3 + v8;
    v10 = *(_OWORD *)(v3 + v8 + 32);
    if (*(double *)&v10 != v7 || *((double *)&v10 + 1) != v6[1])
      goto LABEL_3;
    v40 = *(_QWORD *)(v9 + 48);
    v36 = *(unsigned __int8 *)(v9 + 56);
    v34 = *(unsigned __int8 *)(v9 + 57);
    v35 = *(unsigned __int8 *)(v9 + 58);
    v37 = *(_OWORD *)(v3 + v8 + 32);
    v38 = *(_OWORD *)(v9 + 72);
    v11 = *(uint64_t (**)(_QWORD))(v9 + 88);
    v43 = *(_OWORD *)(v9 + 112);
    v44 = *(_OWORD *)(v9 + 96);
    v12 = *(_QWORD *)(v9 + 128);
    v42 = *(_QWORD *)(v9 + 64);
    swift_bridgeObjectRetain();
    swift_retain(v44);
    swift_retain(v43);
    v41 = v12;
    v13 = swift_retain(v12);
    v39 = v11;
    v14 = v11(v13);
    v16 = v15;
    v17 = (*((uint64_t (**)(void))v6 + 7))();
    if (v14 == v17 && v16 == v18)
    {
      swift_bridgeObjectRelease_n(v3, 2);
      goto LABEL_16;
    }
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) != 0)
      break;
    swift_release(v41);
    swift_release(v43);
    swift_release(v44);
    swift_bridgeObjectRelease(v42);
LABEL_3:
    v8 += 104;
    if (!--v4)
    {
      result = (double *)swift_bridgeObjectRelease_n(v3, 2);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      a2 = v33;
      v5 = 0uLL;
      goto LABEL_21;
    }
  }
  v16 = v3;
LABEL_16:
  result = (double *)swift_bridgeObjectRelease_n(v16, 2);
  v30 = 256;
  if (!v34)
    v30 = 0;
  v31 = v30 | v36;
  v32 = 0x10000;
  if (!v35)
    v32 = 0;
  v23 = v31 | v32;
  v5 = v37;
  v27 = v38;
  a2 = v33;
  v25 = v39;
  v22 = v40;
  v26 = v41;
  v24 = v42;
  v29 = v43;
  v28 = v44;
LABEL_21:
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v24;
  *(_OWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 56) = v25;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v29;
  *(_QWORD *)(a2 + 96) = v26;
  return result;
}

void sub_1002F47F4(_QWORD *a1@<X8>)
{
  *a1 = &off_1005189D0;
}

NLLanguage sub_1002F4804()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;

  v0 = sub_10000B4C8(&qword_100559358);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100424BA0;
  *(_QWORD *)(v1 + 32) = NLLanguageArabic;
  *(_QWORD *)(v1 + 40) = NLLanguageHebrew;
  qword_100562A38 = v1;
  v2 = NLLanguageArabic;
  return NLLanguageHebrew;
}

NLLanguage sub_1002F4870()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  NSString *v3;

  v0 = sub_10000B4C8(&qword_100559358);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100427490;
  *(_QWORD *)(v1 + 32) = NLLanguageJapanese;
  *(_QWORD *)(v1 + 40) = NLLanguageSimplifiedChinese;
  *(_QWORD *)(v1 + 48) = NLLanguageTraditionalChinese;
  qword_100562A40 = v1;
  v2 = NLLanguageJapanese;
  v3 = NLLanguageSimplifiedChinese;
  return NLLanguageTraditionalChinese;
}

uint64_t Lyrics.audioAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

void Lyrics.AudioAttribute.hash(into:)(double a1)
{
  Swift::UInt64 v2;

  Hasher._combine(_:)(0);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

BOOL static Lyrics.AudioAttribute.__derived_enum_equals(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

Swift::Int Lyrics.AudioAttribute.hashValue.getter(double a1)
{
  Swift::UInt64 v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1002F49AC()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1002F4A00()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1002F4A40()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Lyrics.spatialOffset.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (1 << v2 < 64)
    v3 = ~(-1 << (1 << v2));
  if ((v3 & *(_QWORD *)(v1 + 56)) == 0)
  {
    v4 = v2 & 0x3F;
    if (v4 > 6
      && !*(_QWORD *)(v1 + 64)
      && v4 >= 8
      && !*(_QWORD *)(v1 + 72)
      && !*(_QWORD *)(v1 + 80)
      && v4 >= 9
      && !*(_QWORD *)(v1 + 88))
    {
      v5 = (unint64_t)((1 << v2) + 63) >> 6;
      if (v5 <= 5)
        v5 = 5;
      v6 = v5 - 5;
      v7 = (uint64_t *)(v1 + 96);
      v8 = 256;
      do
      {
        if (!v6)
          break;
        v9 = *v7++;
        --v6;
        v8 += 64;
      }
      while (!v9);
    }
  }
}

uint64_t Lyrics.__allocating_init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 160, 7);
  Lyrics.init(identifier:songInfo:)(a1, a2, a3);
  return v7;
}

uint64_t Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  double v42;
  void *v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t inited;
  void *v49;
  _QWORD *v50;
  void *v51;
  id v52;
  char v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  int64_t v78;
  unint64_t v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  id v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  int64_t v120;
  char *isUniquelyReferenced_nonNull_native;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  void *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  char v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  int64_t v146;
  char *v147;
  _UNKNOWN **v148;
  double v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  double v154;
  double v155;
  int v156;
  int v157;
  int v158;
  char **v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  __int128 v176;
  double v177;
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  id v186;
  void *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t result;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  BOOL *v209;
  uint64_t v210;
  char *v211;
  _BOOL4 v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  __int128 v219;
  _UNKNOWN **v220;
  char *v221;
  int64_t v222;
  void *v223;
  __int128 v224;
  __int128 v225;
  char v226[40];
  __int128 v227;
  ValueMetadata *v228;
  _UNKNOWN **v229;
  _QWORD *v230;
  char v231[12];
  char v232[8];

  *(_QWORD *)&v224 = type metadata accessor for Locale.Language(0);
  v222 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin();
  v221 = (char *)&v204 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[14] = 0;
  v8 = v3 + 14;
  v3[15] = 0;
  v9 = sub_1002D37E4((uint64_t)_swiftEmptyArrayStorage);
  v206 = v3;
  v3[16] = v9;
  v10 = v3 + 16;
  v3[17] = 0;
  v3[18] = 0;
  v3[2] = a1;
  v3[3] = a2;
  v223 = a3;
  v11 = objc_msgSend(a3, "language");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = v206;
  v206[8] = v13;
  v16[9] = v15;
  v17 = v223;
  v18 = objc_msgSend(v223, "availableTranslations");
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);

  v16[10] = v19;
  v21 = v16[8];
  v20 = v16[9];
  swift_beginAccess(v8, v232, 1, 0);
  v16[14] = v21;
  v16[15] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = sub_1002D37E4((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(v10, v231, 1, 0);
  v16[16] = v22;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, "leadingSilence");
  v16[11] = v23;
  v24 = objc_msgSend(v17, "songwriters");
  v205 = sub_1000DD108(0, &qword_100559000, MSVLyricsSongWriter_ptr);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v205);

  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v40 = v25;
    else
      v40 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease();
    v28 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v26)
    goto LABEL_19;
LABEL_6:
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_1002F93A8(0, v26 & ~(v26 >> 63), 0);
  if (v26 < 0)
  {
    __break(1u);
LABEL_113:
    if (v25 < 0)
      v139 = v25;
    else
      v139 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v108 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease();
    if (!v108)
      goto LABEL_117;
LABEL_73:
    if (v108 < 1)
    {
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    *(_QWORD *)&v225 = v16;
    v109 = 0;
    v110 = (char *)_swiftEmptyArrayStorage;
    v213 = _swiftEmptyArrayStorage;
    while (1)
    {
      if ((v25 & 0xC000000000000001) != 0)
        v111 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v109, v25);
      else
        v111 = *(id *)(v25 + 8 * v109 + 32);
      v112 = v111;
      v113 = objc_msgSend(v111, "lines");
      v114 = sub_1000DD108(0, &qword_100559018, MSVLyricsLine_ptr);
      v115 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v113, v114);

      sub_1002FEFCC(v115, v207, v208, v209, v223, v212, (uint64_t)v220, v210);
      v117 = v116;
      swift_bridgeObjectRelease();
      v118 = *(_QWORD *)(v117 + 16);
      v119 = *((_QWORD *)v110 + 2);
      v120 = v119 + v118;
      if (__OFADD__(v119, v118))
        goto LABEL_101;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v110);
      v122 = v110;
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v120 <= *((_QWORD *)v110 + 3) >> 1)
      {
        if (!*(_QWORD *)(v117 + 16))
          goto LABEL_90;
      }
      else
      {
        if (v119 <= v120)
          v126 = v119 + v118;
        else
          v126 = v119;
        v122 = sub_1002F860C(isUniquelyReferenced_nonNull_native, v126, 1, v110);
        if (!*(_QWORD *)(v117 + 16))
        {
LABEL_90:
          v110 = v122;
          if (v118)
            goto LABEL_102;
          goto LABEL_91;
        }
      }
      v123 = *((_QWORD *)v122 + 2);
      if ((*((_QWORD *)v122 + 3) >> 1) - v123 < v118)
        goto LABEL_103;
      v110 = v122;
      swift_arrayInitWithCopy(&v122[104 * v123 + 32]);
      if (v118)
      {
        v124 = *((_QWORD *)v110 + 2);
        v77 = __OFADD__(v124, v118);
        v125 = v124 + v118;
        if (v77)
          goto LABEL_105;
        *((_QWORD *)v110 + 2) = v125;
      }
LABEL_91:
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v213) & 1) == 0)
        v213 = sub_1002F8AA4(0, v213[2] + 1, 1, v213, &qword_100559020, &qword_1005592E8);
      v128 = v213[2];
      v127 = v213[3];
      if (v128 >= v127 >> 1)
        v213 = sub_1002F8AA4((_QWORD *)(v127 > 1), v128 + 1, 1, v213, &qword_100559020, &qword_1005592E8);
      ++v109;
      v129 = v213;
      v213[2] = v128 + 1;
      v129[v128 + 4] = v117;

      if (v108 == v109)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = (_QWORD *)v225;
        goto LABEL_118;
      }
    }
  }
  v220 = (_UNKNOWN **)v10;
  v27 = 0;
  v28 = (_QWORD *)v227;
  *(_QWORD *)&v225 = v25 & 0xC000000000000001;
  v29 = v25;
  v30 = v26;
  do
  {
    if ((_QWORD)v225)
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
    else
      v31 = *(id *)(v25 + 8 * v27 + 32);
    v32 = v31;
    v33 = objc_msgSend(v31, "name");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    *(_QWORD *)&v227 = v28;
    v38 = v28[2];
    v37 = v28[3];
    if (v38 >= v37 >> 1)
    {
      sub_1002F93A8((char *)(v37 > 1), v38 + 1, 1);
      v28 = (_QWORD *)v227;
    }
    ++v27;
    v28[2] = v38 + 1;
    v39 = &v28[2 * v38];
    v39[4] = v34;
    v39[5] = v36;
    v25 = v29;
  }
  while (v30 != v27);
  swift_bridgeObjectRelease();
  v10 = v220;
LABEL_20:
  v206[13] = v28;
  v41 = objc_msgSend(v223, "audioAttributes");
  if (v41)
  {
    v43 = v41;
    v44 = &selRef_superview;
    if ((objc_msgSend(v41, "isSpatialRole") & 1) != 0)
    {
      objc_msgSend(v43, "lyricsOffset");
      v46 = v45;

      v47 = sub_10000B4C8(&qword_100559028);
      inited = swift_initStackObject(v47, v226);
      *(_OWORD *)(inited + 16) = xmmword_100424BB0;
      *(_QWORD *)(inited + 32) = v46;
      v49 = (void *)sub_1002EBABC(inited);
      *(_QWORD *)&v42 = swift_setDeallocating(inited).n128_u64[0];
    }
    else
    {

      v49 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    v49 = &_swiftEmptySetSingleton;
    v44 = &selRef_superview;
  }
  v50 = v206;
  v206[19] = v49;
  v51 = v223;
  v52 = objc_msgSend(v223, "type", v42);
  v53 = v52 == (id)1;
  if (v52 == (id)2)
    v53 = 2;
  *((_BYTE *)v50 + 56) = v53;
  v210 = swift_allocObject(&unk_10051B0E8, 24, 7);
  v204 = v210 + 16;
  swift_weakInit(v210 + 16, 0);
  v209 = (BOOL *)swift_allocObject(&unk_10051B110, 17, 7);
  v209[16] = 0;
  v208 = swift_allocObject(&unk_10051B138, 24, 7);
  *(_QWORD *)(v208 + 16) = 0;
  v54 = objc_msgSend(v51, v44[193]);
  if (v54)
  {
    v55 = v54;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v58 = v57;

    swift_bridgeObjectRetain();
    v59 = v221;
    v60 = Locale.Language.init(identifier:)(v56, v58);
    v212 = Locale.Language.characterDirection.getter(v60) == 2;
    (*(void (**)(char *, _QWORD))(v222 + 8))(v59, v224);
    swift_bridgeObjectRelease();
  }
  else
  {
    v212 = 0;
  }
  v61 = objc_msgSend(v223, v44[193]);
  if (v61)
  {
    v62 = v61;
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v65 = v64;

  }
  else
  {
    v63 = 0;
    v65 = 0;
  }
  v220 = sub_1002FCBC4(v63, v65);
  swift_bridgeObjectRelease();
  v66 = objc_msgSend(v223, "translationsMap");
  v67 = sub_10000B4C8(&qword_100559008);
  v68 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v66, &type metadata for String, v67, &protocol witness table for String);

  v69 = 0;
  v70 = *(_QWORD *)(v68 + 64);
  v221 = (char *)(v68 + 64);
  *(_QWORD *)&v224 = v68;
  v71 = 1 << *(_BYTE *)(v68 + 32);
  v72 = -1;
  if (v71 < 64)
    v72 = ~(-1 << v71);
  v73 = v72 & v70;
  v222 = (unint64_t)(v71 + 63) >> 6;
  while (1)
  {
    if (v73)
    {
      v75 = __clz(__rbit64(v73));
      v73 &= v73 - 1;
      *(_QWORD *)&v225 = v69;
      v76 = v75 | (v69 << 6);
      goto LABEL_51;
    }
    v77 = __OFADD__(v69, 1);
    v78 = v69 + 1;
    if (v77)
      goto LABEL_100;
    if (v78 >= v222)
      break;
    v79 = *(_QWORD *)&v221[8 * v78];
    if (!v79)
    {
      v80 = v78 + 1;
      if (v78 + 1 >= v222)
        break;
      v79 = *(_QWORD *)&v221[8 * v80];
      if (!v79)
      {
        v80 = v78 + 2;
        if (v78 + 2 >= v222)
          break;
        v79 = *(_QWORD *)&v221[8 * v80];
        if (!v79)
        {
          v80 = v78 + 3;
          if (v78 + 3 >= v222)
            break;
          v79 = *(_QWORD *)&v221[8 * v80];
          if (!v79)
          {
            while (1)
            {
              v78 = v80 + 1;
              if (__OFADD__(v80, 1))
                goto LABEL_104;
              if (v78 >= v222)
                goto LABEL_66;
              v79 = *(_QWORD *)&v221[8 * v78];
              ++v80;
              if (v79)
                goto LABEL_50;
            }
          }
        }
      }
      v78 = v80;
    }
LABEL_50:
    v73 = (v79 - 1) & v79;
    *(_QWORD *)&v225 = v78;
    v76 = __clz(__rbit64(v79)) + (v78 << 6);
LABEL_51:
    v81 = (uint64_t *)(*(_QWORD *)(v224 + 48) + 16 * v76);
    v82 = *v81;
    v83 = v81[1];
    swift_bridgeObjectRetain_n(v83, 2);
    v84 = v223;
    v85 = swift_bridgeObjectRetain();
    v86 = sub_1002FEC54(v85, v84, v82, v83);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_beginAccess(v10, &v227, 33, 0);
    v87 = swift_isUniquelyReferenced_nonNull_native(*v10);
    v230 = (_QWORD *)*v10;
    v88 = v230;
    v89 = v10;
    *v10 = 0x8000000000000000;
    v91 = sub_10013B57C(v82, v83);
    v92 = v88[2];
    v93 = (v90 & 1) == 0;
    v94 = v92 + v93;
    if (__OFADD__(v92, v93))
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v95 = v90;
    if (v88[3] >= v94)
    {
      if ((v87 & 1) != 0)
      {
        if ((v90 & 1) != 0)
          goto LABEL_36;
      }
      else
      {
        sub_1002FBA04();
        v88 = v230;
        if ((v95 & 1) != 0)
          goto LABEL_36;
      }
    }
    else
    {
      sub_1002FAA6C(v94, v87);
      v88 = v230;
      v96 = sub_10013B57C(v82, v83);
      if ((v95 & 1) != (v97 & 1))
        goto LABEL_179;
      v91 = v96;
      if ((v95 & 1) != 0)
      {
LABEL_36:
        v74 = v88[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v74 + 8 * v91) = v86;
        goto LABEL_37;
      }
    }
    v88[(v91 >> 6) + 8] |= 1 << v91;
    v98 = (uint64_t *)(v88[6] + 16 * v91);
    *v98 = v82;
    v98[1] = v83;
    *(_QWORD *)(v88[7] + 8 * v91) = v86;
    v99 = v88[2];
    v77 = __OFADD__(v99, 1);
    v100 = v99 + 1;
    if (v77)
      goto LABEL_99;
    v88[2] = v100;
    swift_bridgeObjectRetain();
LABEL_37:
    v10 = v89;
    *v89 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(&v227);
    v69 = v225;
  }
LABEL_66:
  swift_release(v224);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
LABEL_67:
    v101 = &_swiftEmptySetSingleton;
    goto LABEL_68;
  }
LABEL_106:
  if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    goto LABEL_67;
  sub_1002EBC10((uint64_t)_swiftEmptyArrayStorage);
  v101 = v137;
LABEL_68:
  v102 = swift_allocObject(&unk_10051B160, 24, 7);
  v207 = v102;
  *(_QWORD *)(v102 + 16) = v101;
  v16 = (_QWORD *)(v102 + 16);
  v103 = objc_msgSend(v223, "lyricsSections");
  v104 = sub_1000DD108(0, &qword_100559010, MSVLyricsSection_ptr);
  v105 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v103, v104);

  if ((unint64_t)v105 >> 62)
  {
    if (v105 < 0)
      v138 = v105;
    else
      v138 = v105 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v106 = _CocoaArrayWrapper.endIndex.getter(v138);
    swift_bridgeObjectRelease();
  }
  else
  {
    v106 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v106 <= 0)
  {
    v130 = v223;
    v131 = objc_msgSend(v223, "lyricsLines");
    v132 = sub_1000DD108(0, &qword_100559018, MSVLyricsLine_ptr);
    v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v131, v132);

    sub_1002FEFCC(v133, v207, v208, v209, v130, v212, (uint64_t)v220, v210);
    v110 = v134;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135 = sub_10000B4C8(&qword_100559020);
    v136 = swift_allocObject(v135, 40, 7);
    *(_OWORD *)(v136 + 16) = xmmword_100424BB0;
    v213 = (_QWORD *)v136;
    *(_QWORD *)(v136 + 32) = v110;
    swift_bridgeObjectRetain();
    goto LABEL_118;
  }
  v107 = objc_msgSend(v223, "lyricsSections");
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v107, v104);

  if ((unint64_t)v25 >> 62)
    goto LABEL_113;
  v108 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v108)
    goto LABEL_73;
LABEL_117:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v110 = (char *)_swiftEmptyArrayStorage;
  v213 = _swiftEmptyArrayStorage;
LABEL_118:
  swift_beginAccess(v16, &v230, 0, 0);
  v140 = swift_bridgeObjectRetain();
  v142 = sub_1002FFCDC(v140, v141);
  swift_bridgeObjectRelease();
  v143 = v206;
  *((_BYTE *)v206 + 96) = v142;
  v143[6] = v110;
  v144 = *((_QWORD *)v110 + 2);
  v211 = v110;
  if (v144)
  {
    v145 = *((_QWORD *)v110 + 16);
    v146 = *((_QWORD *)v110 + 14);
    v147 = (char *)*((_QWORD *)v110 + 12);
    v148 = (_UNKNOWN **)*((_QWORD *)v110 + 8);
    v149 = *((double *)v110 + 4);
    v150 = *((double *)v110 + 5);
    swift_bridgeObjectRetain_n(v110, 2);
    v220 = v148;
    swift_bridgeObjectRetain();
    v221 = v147;
    swift_retain(v147);
    v222 = v146;
    swift_retain(v146);
    swift_retain(v145);
    v151 = 0;
    v152 = 0;
    v153 = _swiftEmptyArrayStorage;
    while (1)
    {
      v155 = *(double *)&v211[v151 + 32];
      v154 = *(double *)&v211[v151 + 40];
      v156 = v211[v151 + 56];
      v157 = v211[v151 + 57];
      v158 = v211[v151 + 58];
      v159 = *(char ***)&v211[v151 + 64];
      v160 = *(_OWORD *)&v211[v151 + 72];
      v161 = *(_QWORD *)&v211[v151 + 88];
      v225 = *(_OWORD *)&v211[v151 + 96];
      v224 = *(_OWORD *)&v211[v151 + 112];
      v162 = *(_QWORD *)&v211[v151 + 128];
      v219 = v160;
      v218 = v156;
      v217 = v157;
      v216 = v158;
      v215 = v161;
      if (v152 || v149 <= 7.0)
      {
        if (v155 - v150 <= 7.0)
        {
          swift_bridgeObjectRetain();
          swift_retain(v225);
          swift_retain(v224);
          swift_retain(v162);
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_retain(v225);
          swift_retain(v224);
          swift_retain(v162);
          if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
            v153 = sub_1002F8728(0, v153[2] + 1, 1, v153);
          v167 = v153[2];
          v166 = v153[3];
          v168 = v167 + 1;
          if (v167 >= v166 >> 1)
            v153 = sub_1002F8728((_QWORD *)(v166 > 1), v167 + 1, 1, v153);
          v228 = &type metadata for Lyrics.InstrumentalLine;
          v229 = &protocol witness table for Lyrics.InstrumentalLine;
          v169 = swift_allocObject(&unk_10051B1D8, 48, 7);
          *(_QWORD *)&v227 = v169;
          *(_QWORD *)(v169 + 16) = v152;
          *(double *)(v169 + 24) = v150 + 0.1;
          *(double *)(v169 + 32) = v155;
          *(_BYTE *)(v169 + 40) = v212;
          v153[2] = v168;
          sub_1000B47A8(&v227, (uint64_t)&v153[5 * v167 + 4]);
          v77 = __OFADD__(v152++, 1);
          if (v77)
            goto LABEL_168;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain(v225);
        swift_retain(v224);
        swift_retain(v162);
        if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
          v153 = sub_1002F8728(0, v153[2] + 1, 1, v153);
        v164 = v153[2];
        v163 = v153[3];
        if (v164 >= v163 >> 1)
          v153 = sub_1002F8728((_QWORD *)(v163 > 1), v164 + 1, 1, v153);
        v228 = &type metadata for Lyrics.InstrumentalLine;
        v229 = &protocol witness table for Lyrics.InstrumentalLine;
        v165 = swift_allocObject(&unk_10051B1D8, 48, 7);
        *(_QWORD *)&v227 = v165;
        *(_QWORD *)(v165 + 16) = 0;
        *(_QWORD *)(v165 + 24) = 0;
        *(double *)(v165 + 32) = v149;
        *(_BYTE *)(v165 + 40) = v212;
        v153[2] = v164 + 1;
        sub_1000B47A8(&v227, (uint64_t)&v153[5 * v164 + 4]);
        v152 = 1;
      }
      v214 = v144;
      swift_bridgeObjectRetain_n(v159, 2);
      v168 = v225;
      swift_retain_n(v225, 2);
      v170 = v224;
      swift_retain_n(v224, 2);
      swift_retain_n(v162, 2);
      v171 = v145;
      if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
        v153 = sub_1002F8728(0, v153[2] + 1, 1, v153);
      v173 = v153[2];
      v172 = v153[3];
      v174 = v153;
      if (v173 >= v172 >> 1)
        v174 = sub_1002F8728((_QWORD *)(v172 > 1), v173 + 1, 1, v153);
      v228 = &type metadata for Lyrics.TextLine;
      v229 = &protocol witness table for Lyrics.TextLine;
      v175 = swift_allocObject(&unk_10051B188, 120, 7);
      *(_QWORD *)&v227 = v175;
      *(double *)(v175 + 16) = v155;
      *(double *)(v175 + 24) = v154;
      *(_QWORD *)(v175 + 32) = v152;
      *(_BYTE *)(v175 + 40) = v218;
      *(_BYTE *)(v175 + 41) = v217;
      *(_BYTE *)(v175 + 42) = v216;
      *(_QWORD *)(v175 + 48) = v159;
      *(_OWORD *)(v175 + 56) = v219;
      *(_QWORD *)(v175 + 72) = v215;
      v176 = v224;
      *(_OWORD *)(v175 + 80) = v225;
      *(_OWORD *)(v175 + 96) = v176;
      *(_QWORD *)(v175 + 112) = v162;
      v174[2] = v173 + 1;
      v153 = v174;
      sub_1000B47A8(&v227, (uint64_t)&v174[5 * v173 + 4]);
      swift_bridgeObjectRelease();
      swift_release(v221);
      swift_release(v222);
      swift_release(v171);
      swift_bridgeObjectRelease();
      swift_release(v168);
      swift_release(v170);
      swift_release(v162);
      v77 = __OFADD__(v152++, 1);
      if (v77)
        break;
      v151 += 104;
      v149 = v155;
      v150 = v154;
      v220 = (_UNKNOWN **)v159;
      v221 = (char *)v168;
      v222 = v170;
      v145 = v162;
      v144 = v214 - 1;
      if (v214 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release(v168);
        swift_release(v170);
        *(_QWORD *)&v177 = swift_release(v162).n128_u64[0];
        goto LABEL_144;
      }
    }
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    if (v168 < 0)
      v202 = v168;
    else
      v202 = v168 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v179 = _CocoaArrayWrapper.endIndex.getter(v202);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v152 = 0;
    v153 = _swiftEmptyArrayStorage;
    v154 = 0.0;
LABEL_144:
    v159 = &selRef_superview;
    v178 = objc_msgSend(v223, "songwriters", v177);
    v168 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v178, v205);

    if ((unint64_t)v168 >> 62)
      goto LABEL_169;
    v179 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v179)
  {
    swift_bridgeObjectRelease();
    v195 = v204;
    goto LABEL_166;
  }
  v180 = objc_msgSend(v223, v159[403]);
  v181 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v180, v205);

  if ((unint64_t)v181 >> 62)
  {
    if (v181 < 0)
      v203 = v181;
    else
      v203 = v181 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v182 = _CocoaArrayWrapper.endIndex.getter(v203);
    swift_bridgeObjectRelease();
  }
  else
  {
    v182 = *(_QWORD *)((v181 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v224 = v153;
  if (!v182)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v184 = _swiftEmptyArrayStorage;
    goto LABEL_161;
  }
  *(_QWORD *)&v227 = _swiftEmptyArrayStorage;
  sub_1002F93A8(0, v182 & ~(v182 >> 63), 0);
  if (v182 < 0)
    goto LABEL_178;
  v183 = 0;
  v184 = (_QWORD *)v227;
  *(_QWORD *)&v225 = v181 & 0xC000000000000001;
  v185 = v181;
  do
  {
    if ((_QWORD)v225)
      v186 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v183, v181);
    else
      v186 = *(id *)(v181 + 8 * v183 + 32);
    v187 = v186;
    v188 = objc_msgSend(v186, "name");
    v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
    v191 = v190;

    *(_QWORD *)&v227 = v184;
    v193 = v184[2];
    v192 = v184[3];
    if (v193 >= v192 >> 1)
    {
      sub_1002F93A8((char *)(v192 > 1), v193 + 1, 1);
      v184 = (_QWORD *)v227;
    }
    ++v183;
    v184[2] = v193 + 1;
    v194 = &v184[2 * v193];
    v194[4] = v189;
    v194[5] = v191;
    v181 = v185;
  }
  while (v182 != v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_161:
  v196 = swift_isUniquelyReferenced_nonNull_native(v224);
  v195 = v204;
  if ((v196 & 1) == 0)
    *(_QWORD *)&v224 = sub_1002F8728(0, *(_QWORD *)(v224 + 16) + 1, 1, (_QWORD *)v224);
  v198 = *(_QWORD *)(v224 + 16);
  v197 = *(_QWORD *)(v224 + 24);
  if (v198 >= v197 >> 1)
    *(_QWORD *)&v224 = sub_1002F8728((_QWORD *)(v197 > 1), v198 + 1, 1, (_QWORD *)v224);
  v228 = &type metadata for Lyrics.SongwritersLine;
  v229 = &protocol witness table for Lyrics.SongwritersLine;
  v199 = swift_allocObject(&unk_10051B1B0, 56, 7);
  *(_QWORD *)&v227 = v199;
  *(_QWORD *)(v199 + 16) = v152;
  *(double *)(v199 + 24) = v154;
  *(_QWORD *)(v199 + 32) = 0x7FF0000000000000;
  *(_BYTE *)(v199 + 40) = v212;
  *(_QWORD *)(v199 + 48) = v184;
  v153 = (_QWORD *)v224;
  *(_QWORD *)(v224 + 16) = v198 + 1;
  sub_1000B47A8(&v227, (uint64_t)&v153[5 * v198 + 4]);
LABEL_166:

  v200 = v206;
  v206[4] = v213;
  v200[5] = v153;
  swift_beginAccess(v195, &v227, 1, 0);
  swift_weakAssign(v195, v200);
  swift_release(v207);
  swift_release(v208);
  swift_release(v209);
  swift_release(v210);
  return (uint64_t)v200;
}

_QWORD *sub_1002F6340(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1002F93A8(0, v1, 0);
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
      v6 = v5;
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_1002F93A8((char *)(v7 > 1), v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

BOOL sub_1002F6418(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t sub_1002F642C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[24];
  char v36[24];
  char v37[32];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v37, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    goto LABEL_19;
  v9 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v36, 0, 0);
  v10 = v9[15];
  if (!v10
    || ((v11 = v9[9]) != 0 ? (v12 = a3 == 0) : (v12 = 1),
        v12
     || ((v13 = v9[14], v14 = v9[8], v13 == v14) ? (v15 = v10 == v11) : (v15 = 0),
         v15
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v9[14], v9[15], v14, v11, 0) & 1) != 0
      || (swift_beginAccess(v9 + 16, v35, 0, 0), v16 = v9[16], !*(_QWORD *)(v16 + 16)))))
  {
    swift_release(v9);
LABEL_19:
    swift_bridgeObjectRetain();
    return a4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_10013B57C(v13, v10);
  if ((v18 & 1) == 0)
  {
    swift_release(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_10013B57C(a2, a3), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release(v9);
    goto LABEL_23;
  }
  v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 88 * v20);
  v24 = v22[2];
  v23 = v22[3];
  v25 = v22[5];
  v33 = v22[1];
  v34 = v22[4];
  v27 = v22[6];
  v26 = v22[7];
  v31 = v22[8];
  v32 = v22[9];
  v29 = *v22;
  v30 = v22[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10030180C(v23, v34, v25, v27);
  swift_bridgeObjectRelease();
  swift_release(v9);
  if (!v33)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  a4 = v29;
  sub_10030183C(v29, v33, v24, v23, v34, v25, v27, v26, v31, v32, v30);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_1002F669C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    goto LABEL_16;
  v9 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v33, 0, 0);
  v10 = v9[15];
  if (!v10)
    goto LABEL_15;
  v11 = v9[9];
  if (!v11)
    goto LABEL_15;
  if (!a3)
    goto LABEL_15;
  v12 = v9[14];
  v13 = v9[8];
  if (v12 == v13 && v10 == v11)
    goto LABEL_15;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v9[14], v9[15], v13, v11, 0) & 1) != 0)
    goto LABEL_15;
  swift_beginAccess(v9 + 16, v32, 0, 0);
  v14 = v9[16];
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_10013B57C(v12, v10);
  if ((v16 & 1) == 0)
  {
    swift_release(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    v26 = (uint64_t *)(a4 + 16);
    swift_beginAccess(v26, v34, 0, 0);
    v21 = *v26;
    swift_bridgeObjectRetain();
    return v21;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v17 + 16) || (v18 = sub_10013B57C(a2, a3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release(v9);
    goto LABEL_16;
  }
  v20 = (_QWORD *)(*(_QWORD *)(v17 + 56) + 88 * v18);
  v21 = v20[2];
  v22 = v20[3];
  v23 = v20[4];
  v24 = v20[5];
  v25 = v20[6];
  v31 = v20[8];
  v29 = v20[9];
  v30 = v20[7];
  v28 = v20[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10030180C(v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v9);
  swift_bridgeObjectRelease();
  sub_1002FCB14(v22, v23, v24, v25, v30, v31, v29, v28);
  return v21;
}

uint64_t sub_1002F68F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t Strong;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (!Strong)
    goto LABEL_16;
  v11 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v33, 0, 0);
  v12 = v11[15];
  if (!v12)
    goto LABEL_15;
  v13 = v11[9];
  if (!v13)
    goto LABEL_15;
  if (!a3)
    goto LABEL_15;
  v14 = v11[14];
  v15 = v11[8];
  if (v14 == v15 && v12 == v13)
    goto LABEL_15;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11[14], v11[15], v15, v13, 0) & 1) != 0)
    goto LABEL_15;
  swift_beginAccess(v11 + 16, v32, 0, 0);
  v16 = v11[16];
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_10013B57C(v14, v12);
  if ((v18 & 1) == 0)
  {
    swift_release(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess(a4 + 2, v34, 0, 0);
    v23 = a4[2];
    v24 = a4[3];
    v25 = a4[4];
    v26 = a4[5];
    v27 = a4[6];
    v28 = a4[7];
    v30 = a4[8];
    v29 = a4[9];
    result = sub_10030180C(v23, v24, v25, v26);
    goto LABEL_17;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_10013B57C(a2, a3), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release(v11);
    goto LABEL_16;
  }
  v22 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 88 * v20);
  v23 = v22[3];
  v24 = v22[4];
  v25 = v22[5];
  v26 = v22[6];
  v27 = v22[7];
  v28 = v22[8];
  v30 = v22[9];
  v29 = v22[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10030180C(v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v11);
  sub_10030180C(v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_1002FCB14(v23, v24, v25, v26, v27, v28, v30, v29);
LABEL_17:
  *a5 = v23;
  a5[1] = v24;
  a5[2] = v25;
  a5[3] = v26;
  a5[4] = v27;
  a5[5] = v28;
  a5[6] = v30;
  a5[7] = v29;
  return result;
}

void Lyrics.line(before:useOriginalLines:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if ((a1 & 1) != 0)
  {
    v6 = sub_1002F2458(*(_QWORD *)(v3 + 48));
    v7 = v6[2];
    if (!v7)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD **)(v3 + 40);
    swift_bridgeObjectRetain();
    v7 = v6[2];
    if (!v7)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return;
    }
  }
  v8 = v6 + 4;
  sub_1000C53BC((uint64_t)(v6 + 4), (uint64_t)&v29);
  v10 = *((_QWORD *)&v30 + 1);
  v9 = v31;
  sub_10000D900(&v29, *((uint64_t *)&v30 + 1));
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  sub_100011758(&v29);
  if (v11 > a3)
    goto LABEL_6;
  v12 = 0;
  v13 = v7 - 1;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v14 = v13;
  while (!__OFSUB__(v14, v12))
  {
    v15 = v12 + (v14 - v12) / 2;
    if (__OFADD__(v12, (v14 - v12) / 2))
      goto LABEL_25;
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (v15 >= v6[2])
      goto LABEL_27;
    sub_1000C53BC((uint64_t)&v8[5 * v15], (uint64_t)v26);
    v17 = v27;
    v16 = v28;
    sub_10000D900(v26, v27);
    v18 = (*(double (**)(uint64_t))(*(_QWORD *)(v16 + 8) + 8))(v17);
    v19 = v18;
    if ((uint64_t)v15 >= v13)
    {
      v22 = INFINITY;
      if (v18 > a3)
        goto LABEL_8;
    }
    else
    {
      if (v15 + 1 >= v6[2])
        goto LABEL_28;
      sub_1000C53BC((uint64_t)&v8[5 * v15 + 5], (uint64_t)v23);
      v21 = v24;
      v20 = v25;
      sub_10000D900(v23, v24);
      v22 = (*(double (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
      sub_100011758(v23);
      if (v19 > a3)
      {
LABEL_8:
        v14 = v15 - 1;
        goto LABEL_9;
      }
    }
    if (v22 >= a3)
    {
      sub_100011694((uint64_t)&v29, &qword_10055A360);
      swift_bridgeObjectRelease();
      sub_1000C53BC((uint64_t)v26, (uint64_t)&v29);
      sub_100011758(v26);
      goto LABEL_23;
    }
    v12 = v15 + 1;
LABEL_9:
    sub_100011758(v26);
    if (v14 < v12)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      sub_100011530((uint64_t)&v29, a2, &qword_10055A360);
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t Lyrics.line(after:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[3];
  v5 = a1[4];
  sub_10000D900(a1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v7 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 40);
    if (v7 >= *(_QWORD *)(v8 + 16))
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
    if ((v7 & 0x8000000000000000) == 0)
      return sub_1000C53BC(v8 + 40 * v7 + 32, a2);
  }
  __break(1u);
  return result;
}

BOOL sub_1002F6E9C(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  __C::_NSRange v12;

  objc_msgSend(*a1, "characterRange");
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  v10._countAndFlagsBits = a4;
  v10._object = a5;
  v12 = _NSRange.convert(from:to:preserveLength:)(v9, v10, 1);
  if (!v11)
    return _NSRange.contains(_:)(v12);
  swift_errorRelease(v11);
  return 0;
}

BOOL sub_1002F6F3C(id *a1, char *a2, void *a3, char *a4, void *a5)
{
  id v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  __C::_NSRange v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *a1;
  objc_msgSend(*a1, "characterRange");
  v10._countAndFlagsBits = (uint64_t)a2;
  v10._object = a3;
  v11._countAndFlagsBits = (uint64_t)a4;
  v11._object = a5;
  v13 = _NSRange.convert(from:to:preserveLength:)(v10, v11, 0);
  if (!v12)
    return _NSRange.intersects(_:)(v13);
  if (qword_100557E50 != -1)
    swift_once(&qword_100557E50, sub_1002F7F50);
  v14 = type metadata accessor for Logger(0);
  sub_10000D78C(v14, (uint64_t)static Logger.lyrics);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v12);
  v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v12);
  v16 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(42, -1);
    v25 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(96, -1);
    v27 = v26;
    *(_DWORD *)v19 = 136446978;
    v20 = (char *)_NSRange.description.getter(objc_msgSend(v16, "characterRange"));
    *(_QWORD *)(v19 + 4) = sub_1002E9B3C(v20, v21, &v27);

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 14) = sub_1002E9B3C(a4, (char *)a5, &v27);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v19 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 24) = sub_1002E9B3C(a2, (char *)a3, &v27);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v19 + 32) = 2114;
    swift_errorRetain(v12);
    v22 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(_QWORD *)(v19 + 34) = v22;
    *v25 = v22;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "    Wasn't able to convert syllable range from primaryVocalText to lyricsText indicating a parsing issue.\n    MSVLyricsWord.characterRange=%{public}s\n    primaryVocalsText=%{public}s\n    lyricsText=%{public}s\n    thrownError=%{public}@", (uint8_t *)v19, 0x2Au);
    v23 = sub_10000B4C8(&qword_100558B60);
    swift_arrayDestroy(v25, 1, v23);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v26, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    swift_errorRelease(v12);
  }
  else
  {
    swift_errorRelease(v12);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a5, 2);

    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  return 0;
}

uint64_t Logger.lyrics.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_100557E50 != -1)
    swift_once(&qword_100557E50, sub_1002F7F50);
  v0 = type metadata accessor for Logger(0);
  return sub_10000D78C(v0, (uint64_t)static Logger.lyrics);
}

void sub_1002F72C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000DD108(0, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
    v5 = sub_100301630();
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v33 = v35[1];
    v7 = v35[2];
    v8 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = 0;
  }
  v31 = v7;
  v32 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v14 = v8;
    if (v1 < 0)
    {
      v17 = __CocoaSet.Iterator.next()(v6);
      if (!v17)
        goto LABEL_40;
      v18 = v17;
      v34 = v17;
      v19 = sub_1000DD108(0, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v20 = v36;
      *(_QWORD *)&v21 = swift_unknownObjectRelease(v18).n128_u64[0];
      if (!v20)
        goto LABEL_40;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v8 << 6);
LABEL_34:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_40;
LABEL_35:
    v25 = objc_msgSend(v20, "type", v21, v31);
    if (v25)
    {
      v26 = v25;
      v27 = v1;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v30 = v29;

      if (v28 == 0x70756F7267 && v30 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
        v1 = v27;
LABEL_40:
        sub_100194204(v1);
        return;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0x70756F7267, 0xE500000000000000, 0);

      v6 = (_QWORD *)swift_bridgeObjectRelease();
      v1 = v27;
      if ((v13 & 1) != 0)
        goto LABEL_40;
    }
    else
    {

    }
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v32)
      goto LABEL_40;
    v23 = *(_QWORD *)(v33 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v32)
        goto LABEL_40;
      v23 = *(_QWORD *)(v33 + 8 * v8);
      if (!v23)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v32)
          goto LABEL_40;
        v23 = *(_QWORD *)(v33 + 8 * v8);
        if (!v23)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v32)
            goto LABEL_40;
          v23 = *(_QWORD *)(v33 + 8 * v8);
          if (!v23)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v32)
              goto LABEL_40;
            v23 = *(_QWORD *)(v33 + 8 * v8);
            if (!v23)
            {
              v24 = v14 + 6;
              while (v32 != v24)
              {
                v23 = *(_QWORD *)(v33 + 8 * v24++);
                if (v23)
                {
                  v8 = v24 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

void sub_1002F7648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000DD108(0, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
    v5 = sub_100301630();
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v33 = v35[1];
    v7 = v35[2];
    v8 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = 0;
  }
  v31 = v7;
  v32 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v14 = v8;
    if (v1 < 0)
    {
      v17 = __CocoaSet.Iterator.next()(v6);
      if (!v17)
        goto LABEL_40;
      v18 = v17;
      v34 = v17;
      v19 = sub_1000DD108(0, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v20 = v36;
      *(_QWORD *)&v21 = swift_unknownObjectRelease(v18).n128_u64[0];
      if (!v20)
        goto LABEL_40;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v8 << 6);
LABEL_34:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_40;
LABEL_35:
    v25 = objc_msgSend(v20, "type", v21, v31);
    if (v25)
    {
      v26 = v25;
      v27 = v1;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v30 = v29;

      if (v28 == 0x726568746FLL && v30 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
        v1 = v27;
LABEL_40:
        sub_100194204(v1);
        return;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0x726568746FLL, 0xE500000000000000, 0);

      v6 = (_QWORD *)swift_bridgeObjectRelease();
      v1 = v27;
      if ((v13 & 1) != 0)
        goto LABEL_40;
    }
    else
    {

    }
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v32)
      goto LABEL_40;
    v23 = *(_QWORD *)(v33 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v32)
        goto LABEL_40;
      v23 = *(_QWORD *)(v33 + 8 * v8);
      if (!v23)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v32)
          goto LABEL_40;
        v23 = *(_QWORD *)(v33 + 8 * v8);
        if (!v23)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v32)
            goto LABEL_40;
          v23 = *(_QWORD *)(v33 + 8 * v8);
          if (!v23)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v32)
              goto LABEL_40;
            v23 = *(_QWORD *)(v33 + 8 * v8);
            if (!v23)
            {
              v24 = v14 + 6;
              while (v32 != v24)
              {
                v23 = *(_QWORD *)(v33 + 8 * v24++);
                if (v23)
                {
                  v8 = v24 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

_QWORD *Lyrics.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return v0;
}

uint64_t Lyrics.__deallocating_deinit()
{
  uint64_t v0;

  Lyrics.deinit();
  return swift_deallocClassInstance(v0, 160, 7);
}

id sub_1002F7A54(id *a1)
{
  return objc_msgSend(*a1, "isBackgroundVocal");
}

id sub_1002F7A84()
{
  id *v0;

  return objc_msgSend(*v0, "startTime");
}

id sub_1002F7A94()
{
  id *v0;

  return objc_msgSend(*v0, "endTime");
}

uint64_t MSVLyricsAgent.isEqual(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _BYTE v50[24];
  uint64_t v51;

  sub_100011370(a1, (uint64_t)v50, &qword_10055A570);
  if (!v51)
  {
    sub_100011694((uint64_t)v50, &qword_10055A570);
    goto LABEL_46;
  }
  v2 = sub_1000DD108(0, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
  if ((swift_dynamicCast(&v49, v50, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_46:
    v36 = 0;
    return v36 & 1;
  }
  v3 = v49;
  v4 = objc_msgSend(v1, "type");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(v3, "type");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    if (v8)
    {
      if (!v13)
        goto LABEL_44;
      if (v6 == v11 && v8 == v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v13, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v13)
    {
      goto LABEL_44;
    }
  }
  else if (v8)
  {
    goto LABEL_44;
  }
  v15 = objc_msgSend(v1, "name");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = objc_msgSend(v3, "name");
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    if (v19)
    {
      if (!v24)
        goto LABEL_44;
      if (v17 == v22 && v19 == v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v22, v24, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v24)
    {
      goto LABEL_44;
    }
  }
  else if (v19)
  {
    goto LABEL_44;
  }
  v26 = objc_msgSend(v1, "artistID");
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0;
  }
  v31 = objc_msgSend(v3, "artistID");
  if (!v31)
  {
    if (v30)
      goto LABEL_44;
    goto LABEL_49;
  }
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v35 = v34;

  if (!v30)
  {
    if (v35)
      goto LABEL_44;
    goto LABEL_49;
  }
  if (!v35)
    goto LABEL_44;
  if (v28 == v33 && v30 == v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v33, v35, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
LABEL_51:

    goto LABEL_46;
  }
LABEL_49:
  v39 = objc_msgSend(v1, "identifier");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v44 = objc_msgSend(v3, "identifier");
  if (!v44)
  {
    if (!v43)
    {

      v36 = 1;
      return v36 & 1;
    }
    goto LABEL_44;
  }
  v45 = v44;
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v48 = v47;

  if (!v43)
  {

    if (!v48)
    {
      v36 = 1;
      return v36 & 1;
    }
    goto LABEL_45;
  }
  if (!v48)
  {
LABEL_44:

LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if (v41 == v46 && v43 == v48)
    v36 = 1;
  else
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v46, v48, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v36 & 1;
}

uint64_t sub_1002F7F50()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000D924(v0, static Logger.lyrics);
  sub_10000D78C(v0, (uint64_t)static Logger.lyrics);
  return static Logger.music(_:)(0x73636972794CLL, 0xE600000000000000);
}

uint64_t static Logger.lyrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100557E50 != -1)
    swift_once(&qword_100557E50, sub_1002F7F50);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D78C(v2, (uint64_t)static Logger.lyrics);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

size_t sub_1002F8018(size_t result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000B4C8(&qword_1005585E8);
  v11 = *(_QWORD *)(sub_10000B4C8(&qword_1005585E0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (char *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  *((_QWORD *)v15 + 2) = v8;
  *((_QWORD *)v15 + 3) = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(_QWORD *)(sub_10000B4C8(&qword_1005585E0) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = &v15[v18];
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v19 >= &a4[v18 + *(_QWORD *)(v17 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v19);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v19);
    }
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v19);
  }
  swift_bridgeObjectRelease();
  return (size_t)v15;
}

char *sub_1002F8194(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005593D0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F8294(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559338);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559340);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F83C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559348);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559350);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002F84FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559330);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002F860C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005592F0);
    v11 = (char *)swift_allocObject(v10, 104 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[104 * v8])
      memmove(v13, v14, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F8728(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005592D8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_1005592E0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F885C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559228);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[8 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559230);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_1002F897C(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1000DFA94(a1, a2, a3, a4, &qword_1005592A0, type metadata accessor for Razzmatazz);
}

char *sub_1002F8990(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005592D0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F8A90(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1002F8AA4(a1, a2, a3, a4, &qword_1005592B8, &qword_1005592C0);
}

_QWORD *sub_1002F8AA4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10000B4C8(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[v11 + 4])
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(a6);
    swift_arrayInitWithCopy(v14 + 4);
  }
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1002F8BC8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005592A8);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_1005592B0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_1002F8CE8(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1000DFA94(a1, a2, a3, a4, &qword_100559208, (uint64_t (*)(_QWORD))&type metadata accessor for Playlist.Collaborator);
}

char *sub_1002F8CFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559280);
    v11 = (char *)swift_allocObject(v10, 120 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 120);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[120 * v8])
      memmove(v13, v14, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002F8E14(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559270);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002F8F2C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559250);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F902C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559258);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559260);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_1002F914C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559240);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559248);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1002F926C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100558DF0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_1002F9370(size_t a1, int64_t a2, char a3)
{
  char **v3;
  size_t result;

  result = sub_1002F94FC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

char *sub_1002F938C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002F9678(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002F93A8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002F977C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002F93C4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002F987C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1002F93E0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1002F998C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002F93FC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002F9AC0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002F9418(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002F9BDC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1002F9434(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1002F9CD4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1002F9450(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002F9DF4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1002F946C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1002F9EEC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1002F9488(size_t a1, int64_t a2, char a3)
{
  char **v3;
  size_t result;

  result = sub_1002FA00C(a1, a2, a3, *v3, &qword_1005592A0, type metadata accessor for Razzmatazz);
  *v3 = (char *)result;
  return result;
}

size_t sub_1002F94B4(size_t a1, int64_t a2, char a3)
{
  char **v3;
  size_t result;

  result = sub_1002FA00C(a1, a2, a3, *v3, &qword_1005592C8, (uint64_t (*)(_QWORD))&type metadata accessor for Artist);
  *v3 = (char *)result;
  return result;
}

char *sub_1002F94E0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1002FA268(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1002F94FC(size_t result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000B4C8(&qword_1005585E8);
  v11 = *(_QWORD *)(sub_10000B4C8(&qword_1005585E0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (char *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  *((_QWORD *)v15 + 2) = v8;
  *((_QWORD *)v15 + 3) = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(_QWORD *)(sub_10000B4C8(&qword_1005585E0) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = &v15[v18];
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v19 >= &a4[v18 + *(_QWORD *)(v17 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v19);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v19);
    }
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v19);
  }
  swift_release(a4);
  return (size_t)v15;
}

char *sub_1002F9678(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100558DF0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002F977C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005593D0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002F987C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559330);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_1002F998C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_1005592D8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_1005592E0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002F9AC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559328);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002F9BDC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559238);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_1002F9CD4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559228);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[8 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559230);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002F9DF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559210);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_1002F9EEC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559218);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_10000B4C8(&qword_100559220);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

size_t sub_1002FA00C(size_t result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000B4C8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (char *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  *((_QWORD *)v18 + 2) = v11;
  *((_QWORD *)v18 + 3) = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = *(_QWORD *)(a6(0) - 8);
  v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v22 = &v18[v21];
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v22 >= &a4[v21 + *(_QWORD *)(v20 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v22);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v22);
    }
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v22);
  }
  swift_release(a4);
  return (size_t)v18;
}

char *sub_1002FA180(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100558DE0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_1002FA268(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000B4C8(&qword_100559268);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

unint64_t sub_1002FA368(unsigned __int8 *a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  PlaylistCovers.Cover.Representation.hash(into:)((uint64_t)v4);
  v2 = Hasher._finalize()();
  return sub_1002FA478(a1, v2);
}

unint64_t sub_1002FA3C0(char a1)
{
  unint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v2 = 0xD000000000000015;
  Hasher.init(_seed:)(v6);
  if (a1)
  {
    if (a1 == 1)
    {
      v2 = 0xD000000000000014;
      v3 = 0x8000000100450F00;
    }
    else
    {
      v3 = 0x8000000100450F20;
    }
  }
  else
  {
    v3 = 0x8000000100450EE0;
  }
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease();
  v4 = Hasher._finalize()();
  return sub_1002FA5C0(a1, v4);
}

unint64_t sub_1002FA478(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v19[3];
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48) + 56 * i;
    v9 = *(_OWORD *)(v7 + 16);
    v8 = *(_OWORD *)(v7 + 32);
    v10 = *(_OWORD *)v7;
    v22 = *(_QWORD *)(v7 + 48);
    v21[1] = v9;
    v21[2] = v8;
    v21[0] = v10;
    sub_100230FC4((uint64_t)v21);
    v11 = static PlaylistCovers.Cover.Representation.== infix(_:_:)((unsigned __int8 *)v21, a1);
    sub_100231018((uint64_t)v21);
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      for (i = (i + 1) & v12; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
      {
        v13 = *(_QWORD *)(v2 + 48) + 56 * i;
        v15 = *(_OWORD *)(v13 + 16);
        v14 = *(_OWORD *)(v13 + 32);
        v16 = *(_OWORD *)v13;
        v20 = *(_QWORD *)(v13 + 48);
        v19[1] = v15;
        v19[2] = v14;
        v19[0] = v16;
        sub_100230FC4((uint64_t)v19);
        v17 = static PlaylistCovers.Cover.Representation.== infix(_:_:)((unsigned __int8 *)v19, a1);
        sub_100231018((uint64_t)v19);
        if ((v17 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1002FA5C0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v14 = ~v3;
    while (1)
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v4);
      if (v5 == 1)
        v6 = 0xD000000000000014;
      else
        v6 = 0xD000000000000015;
      if (v5 == 1)
        v7 = 0x8000000100450F00;
      else
        v7 = 0x8000000100450F20;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v8 = v6;
      else
        v8 = 0xD000000000000015;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v9 = v7;
      else
        v9 = 0x8000000100450EE0;
      if (a1)
      {
        if (a1 == 1)
          v10 = 0xD000000000000014;
        else
          v10 = 0xD000000000000015;
        if (a1 == 1)
          v11 = 0x8000000100450F00;
        else
          v11 = 0x8000000100450F20;
        if (v8 != v10)
          goto LABEL_26;
      }
      else
      {
        v11 = 0x8000000100450EE0;
        v10 = 0xD000000000000015;
        if (v8 != 0xD000000000000015)
          goto LABEL_26;
      }
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        return v4;
      }
LABEL_26:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v14;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

void sub_1002FA760(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_1005585F0);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v25 = v38[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_10003A5E4(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

void sub_1002FAA6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_1005585D8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002FAD80(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_1005585D0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002FB08C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100559288);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10013BB38((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_10013BDE4(v25, (uint64_t)&v39);
      sub_1000760E0(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10013BB38(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002FB3A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  int64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  _QWORD v71[9];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000B4C8(&qword_100559278);
  v54 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v52 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v50 = v2;
  v51 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  v53 = v5;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v55 = v13;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v51)
      break;
    v25 = v52;
    v26 = v52[v24];
    v27 = v13 + 1;
    if (!v26)
    {
      v27 = v24 + 1;
      if (v24 + 1 >= v51)
        goto LABEL_36;
      v26 = v52[v27];
      if (!v26)
      {
        v28 = v24 + 2;
        if (v28 >= v51)
        {
LABEL_36:
          swift_release(v5);
          v3 = v50;
          if ((v54 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v52[v28];
        if (!v26)
        {
          while (1)
          {
            v27 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v27 >= v51)
              goto LABEL_36;
            v26 = v52[v27];
            ++v28;
            if (v26)
              goto LABEL_33;
          }
        }
        v27 = v28;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v55 = v27;
    v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_34:
    v33 = *(_QWORD *)(v5 + 56);
    v34 = *(_QWORD *)(v5 + 48) + 56 * v23;
    v35 = *(_BYTE *)v34;
    v37 = *(void **)(v34 + 8);
    v36 = *(void **)(v34 + 16);
    v39 = *(void **)(v34 + 24);
    v38 = *(void **)(v34 + 32);
    v41 = *(void **)(v34 + 40);
    v40 = *(void **)(v34 + 48);
    v42 = v33 + 120 * v23;
    v56 = *(void **)v42;
    v57 = *(_QWORD *)(v42 + 8);
    v58 = *(void **)(v42 + 16);
    v59 = *(void **)(v42 + 24);
    v69 = *(void **)(v42 + 48);
    v70 = *(void **)(v42 + 40);
    v67 = *(_QWORD *)(v42 + 64);
    v68 = *(void **)(v42 + 56);
    v65 = *(_QWORD *)(v42 + 80);
    v66 = *(_QWORD *)(v42 + 72);
    v63 = *(_QWORD *)(v42 + 96);
    v64 = *(_QWORD *)(v42 + 88);
    v62 = *(_QWORD *)(v42 + 104);
    v60 = *(void **)(v42 + 32);
    v61 = *(_QWORD *)(v42 + 112);
    if ((v54 & 1) == 0)
    {
      v43 = v37;
      v44 = v36;
      v45 = v39;
      v46 = v38;
      v47 = v41;
      v48 = v40;
      sub_1003014D8(v56, v57, v58, v59, v60, v70, v69, v68);
      sub_100301558(v65, v64, v63, v62, v61);
    }
    LOBYTE(v72) = v35;
    *((_QWORD *)&v72 + 1) = v37;
    *(_QWORD *)&v73 = v36;
    *((_QWORD *)&v73 + 1) = v39;
    *(_QWORD *)&v74 = v38;
    *((_QWORD *)&v74 + 1) = v41;
    v75 = v40;
    Hasher.init(_seed:)(v71);
    PlaylistCovers.Cover.Representation.hash(into:)((uint64_t)v71);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v5 = v53;
      v13 = v55;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v15) >> 6;
      v5 = v53;
      v13 = v55;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v17 == v30;
        if (v17 == v30)
          v17 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v8 + 48) + 56 * v18;
    v20 = v73;
    *(_OWORD *)v19 = v72;
    *(_OWORD *)(v19 + 16) = v20;
    *(_OWORD *)(v19 + 32) = v74;
    *(_QWORD *)(v19 + 48) = v75;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 120 * v18);
    *v21 = v56;
    v21[1] = v57;
    v21[2] = v58;
    v21[3] = v59;
    v21[4] = v60;
    v21[5] = v70;
    v21[6] = v69;
    v21[7] = v68;
    v21[8] = v67;
    v21[9] = v66;
    v21[10] = v65;
    v21[11] = v64;
    v21[12] = v63;
    v21[13] = v62;
    v21[14] = v61;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v50;
  v25 = v52;
  if ((v54 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v49 = 1 << *(_BYTE *)(v5 + 32);
  if (v49 >= 64)
    bzero(v25, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v49;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

unint64_t sub_1002FB7F8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void sub_1002FB840()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10000B4C8(&qword_1005585F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    sub_10003A5E4(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002FBA04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10000B4C8(&qword_1005585D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v6 = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v8)
  {
    memmove(v6, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002FBBB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10000B4C8(&qword_1005585D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002FBD68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10000B4C8(&qword_100559288);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10013BDE4(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_1000760E0(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_10013BB38(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002FBF4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void *__src;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  sub_10000B4C8(&qword_100559278);
  v41 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v39 = v1;
    v40 = v3;
    swift_release(v39);
    *v41 = v40;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  v6 = v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5;
  v45 = v3;
  if (v6)
  {
    memmove(v4, __src, 8 * v5);
    v3 = v45;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v43 = (unint64_t)(v8 + 63) >> 6;
  v44 = v1;
  while (1)
  {
    if (v10)
    {
      v46 = (v10 - 1) & v10;
      v47 = v7;
      v11 = __clz(__rbit64(v10)) | (v7 << 6);
      v1 = v44;
      v3 = v45;
      goto LABEL_12;
    }
    v35 = v7 + 1;
    v1 = v44;
    v3 = v45;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v35 >= v43)
      goto LABEL_26;
    v36 = *((_QWORD *)__src + v35);
    v37 = v7 + 1;
    if (!v36)
    {
      v37 = v7 + 2;
      if (v7 + 2 >= v43)
        goto LABEL_26;
      v36 = *((_QWORD *)__src + v37);
      if (!v36)
        break;
    }
LABEL_25:
    v46 = (v36 - 1) & v36;
    v47 = v37;
    v11 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_12:
    v12 = 56 * v11;
    v13 = *(_QWORD *)(v1 + 48) + 56 * v11;
    v14 = 120 * v11;
    v15 = *(_QWORD *)(v1 + 56) + v14;
    v17 = *(void **)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v19 = *(void **)(v15 + 16);
    v18 = *(void **)(v15 + 24);
    v20 = *(void **)(v15 + 32);
    v21 = *(void **)(v15 + 40);
    v22 = *(void **)(v15 + 48);
    v23 = *(void **)(v15 + 56);
    v24 = *(_QWORD *)(v15 + 64);
    v25 = *(_QWORD *)(v15 + 72);
    v52 = *(_QWORD *)(v15 + 88);
    v53 = *(_QWORD *)(v15 + 80);
    v50 = *(_QWORD *)(v15 + 104);
    v51 = *(_QWORD *)(v15 + 96);
    v49 = *(_QWORD *)(v15 + 112);
    v26 = *(_QWORD *)(v3 + 48) + v12;
    v27 = *(_OWORD *)(v13 + 8);
    v54 = *(_OWORD *)(v13 + 24);
    v55 = *(_OWORD *)(v13 + 40);
    *(_BYTE *)v26 = *(_BYTE *)v13;
    *(_OWORD *)(v26 + 8) = v27;
    v48 = (void *)*((_QWORD *)&v27 + 1);
    *(_OWORD *)(v26 + 24) = v54;
    *(_OWORD *)(v26 + 40) = v55;
    v28 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v14);
    *v28 = v17;
    v28[1] = v16;
    v28[2] = v19;
    v28[3] = v18;
    v28[4] = v20;
    v28[5] = v21;
    v28[6] = v22;
    v28[7] = v23;
    v28[8] = v24;
    v28[9] = v25;
    v28[10] = v53;
    v28[11] = v52;
    v28[12] = v51;
    v28[13] = v50;
    v28[14] = v49;
    v29 = (id)v27;
    v30 = v48;
    v31 = (id)v54;
    v32 = *((id *)&v54 + 1);
    v33 = (id)v55;
    v34 = *((id *)&v55 + 1);
    sub_1003014D8(v17, v16, v19, v18, v20, v21, v22, v23);
    sub_100301558(v53, v52, v51, v50, v49);
    v10 = v46;
    v7 = v47;
  }
  v38 = v7 + 3;
  if (v7 + 3 >= v43)
    goto LABEL_26;
  v36 = *((_QWORD *)__src + v38);
  if (v36)
  {
    v37 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v37 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v37 >= v43)
      goto LABEL_26;
    v36 = *((_QWORD *)__src + v37);
    ++v38;
    if (v36)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1002FC238(uint64_t a1)
{
  uint64_t v1;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_BYTE *)(a1 + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_1002FC394((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, a1);
    v9 = v8;
    swift_release(a1);
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_1002FC394((unint64_t *)v11, v6, a1);
    v9 = v12;
    swift_release(a1);
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_1002FC394(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v23;
  uint64_t v25;
  int64_t v26;

  v23 = a2;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v10 = v9 | (v4 << 6);
LABEL_21:
    v14 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v10);
    v15 = objc_msgSend(v14, "type", v23);
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      if (v17 == 0x6E6F73726570 && v19 == 0xE600000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain(a3);
          sub_1002FC5D4(a1, v23, v25, a3);
          return;
        }
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, 0x6E6F73726570, 0xE600000000000000, 0);

        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0)
          goto LABEL_29;
      }
    }
    else
    {

    }
  }
  v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v11);
  ++v4;
  if (v12)
    goto LABEL_20;
  v4 = v11 + 1;
  if (v11 + 1 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
    goto LABEL_20;
  v4 = v11 + 2;
  if (v11 + 2 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }
  v13 = v11 + 3;
  if (v13 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      goto LABEL_32;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
}

Swift::Int sub_1002FC5D4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10000B4C8((uint64_t *)&unk_10055E1E0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1002FC830(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v9 = v5[3];
      v10 = v5[4];
      v11 = v5[5];
      if ((*(v5 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v12 = *(v5 - 1);
      else
        v12 = 0;
      Hasher._combine(_:)(v12);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v6;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v7, v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      swift_bridgeObjectRelease(v8);
      v5 += 7;
      --v4;
    }
    while (v4);
  }
}

BOOL _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;

  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
      return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    v3 = (*(uint64_t (**)(void))(a1 + 56))();
    v5 = v4;
    v7 = (*(uint64_t (**)(void))(a2 + 56))();
    v8 = v6;
    if (v3 == v7 && v5 == v6)
    {
      v9 = 1;
      v8 = v5;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_1002FCA74(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 56 * v1;
  v4 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
    goto LABEL_7;
  result = *(_QWORD *)(result + 64);
  if (__OFSUB__(v6, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t sub_1002FCAB4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1002FCADC(uint64_t *a1)
{
  sub_1002FCB14(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_1002FCB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_1002FCB44(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1002FCB6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002FCB90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FCBA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_UNKNOWN **sub_1002FCBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char *v28;

  sub_10000B4C8(&qword_100559368);
  __chkstk_darwin();
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale.Language(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale.LanguageCode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v28 = (char *)&v27 - v14;
  __chkstk_darwin();
  if (!a2)
    return &off_100518A70;
  v16 = (char *)&v27 - v15;
  swift_bridgeObjectRetain();
  v17 = Locale.Language.init(identifier:)(a1, a2);
  Locale.Language.languageCode.getter(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    sub_100011694((uint64_t)v5, &qword_100559368);
    return &off_100518A70;
  }
  v19 = v16;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v5, v10);
  v20 = v28;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v28, v19, v10);
  Locale.LanguageCode.init(stringLiteral:)(29281, 0xE200000000000000);
  v21 = sub_10001254C((unint64_t *)&unk_100559370, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode, (uint64_t)&protocol conformance descriptor for Locale.LanguageCode);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, v10);
  if ((v22 & 1) != 0
    || (Locale.LanguageCode.init(stringLiteral:)(25960, 0xE200000000000000),
        v24 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21),
        v23(v13, v10),
        (v24 & 1) != 0))
  {
    v23(v20, v10);
    v23(v19, v10);
    return &off_1005189F8;
  }
  Locale.LanguageCode.init(stringLiteral:)(26746, 0xE200000000000000);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21);
  v23(v13, v10);
  if ((v25 & 1) != 0)
  {
    v23(v20, v10);
LABEL_11:
    v23(v19, v10);
    return &off_100518A20;
  }
  Locale.LanguageCode.init(stringLiteral:)(24938, 0xE200000000000000);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v20, v10, v21);
  v23(v13, v10);
  v23(v20, v10);
  if ((v26 & 1) != 0)
    goto LABEL_11;
  v23(v19, v10);
  return &off_100518A48;
}

unint64_t sub_1002FCF14(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  Swift::Int value;
  uint64_t v57;
  double v58;
  char *v59;
  void *v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  double v67;
  double v68;
  char *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  char *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  id v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  id v134;
  id v135;
  Swift::String v136;
  uint64_t v137;
  __C::_NSRange v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  void *v213;
  double v214;
  double v215;
  uint64_t v216;
  double v217;
  double v218;
  uint64_t v219;
  int64_t v220;
  char *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  char v235;
  double v236;
  double v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE v243[16];
  Swift::String v244;
  uint64_t v245;
  uint64_t v246;
  char **v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  int v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  id v256;
  uint64_t v257;
  Swift::String v258;
  id v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  char *v264;
  uint64_t v265;
  char *v266;
  int64x2_t v267;
  __int128 v268;
  __int128 v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD v273[3];
  char v274;
  char *v275;
  char *v276;
  uint64_t v277;
  Swift::Int_optional v278;
  Swift::Int_optional v279;

  v258._object = a5;
  v258._countAndFlagsBits = a4;
  v8 = a1;
  v277 = a1;
  if ((a8 & 1) == 0)
  {
    v262 = 0;
    v263 = (void *)a3;
    v261 = a2;
    if ((a7 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)&v269 = String._bridgeToObjectiveC()();
      result = String.count.getter(a2, a3);
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_139;
      v40 = (char *)result;
      if (!result)
      {
        v12 = (char *)_swiftEmptyArrayStorage;
LABEL_123:
        swift_bridgeObjectRelease();

        return (unint64_t)v12;
      }
      v41 = 0;
      v42 = 0;
      v12 = (char *)_swiftEmptyArrayStorage;
      v268 = xmmword_100424BB0;
      v267 = vdupq_n_s64(1uLL);
      v260 = (char *)result;
      while (1)
      {
        while (1)
        {
          if (__OFSUB__(++v42, v41))
            goto LABEL_128;
          v43 = v41;
          v275 = v41;
          v276 = (char *)(v42 - v41);
          __chkstk_darwin();
          v244 = v258;
          v245 = v261;
          v246 = (uint64_t)v263;
          v247 = &v275;
          v44 = sub_10000B4C8(&qword_100559318);
          v8 = v262;
          Array.extractFirst(where:)((uint64_t)sub_1003017E8, (uint64_t)v243, v44, (uint64_t)v273);
          v262 = v8;
          v270 = (char *)v273[0];
          if (v273[0])
            break;
          v41 = v43;
          if (v42 == v40)
            goto LABEL_123;
        }
        if ((unint64_t)v277 >> 62)
        {
          if (v277 < 0)
            v48 = v277;
          else
            v48 = v277 & 0xFFFFFFFFFFFFFF8;
          v49 = v270;
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter(v48);
          swift_bridgeObjectRelease();
          if (v8)
          {
LABEL_22:
            v46 = v275;
            v47 = v276;
            goto LABEL_29;
          }
        }
        else
        {
          v8 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFF8) + 0x10);
          v45 = v270;
          if (v8)
            goto LABEL_22;
        }
        v50 = (char *)objc_msgSend((id)v269, "length");
        v47 = (char *)(v50 - v43);
        if (__OFSUB__(v50, v43))
          goto LABEL_131;
        v46 = v43;
        v275 = v43;
        v276 = v47;
LABEL_29:
        v264 = v42;
        v266 = v46;
        v51 = (uint64_t)v47;
        _NSRange.makeIterator()();
        v273[0] = v52;
        v273[1] = v53;
        v273[2] = v54;
        v274 = v55 & 1;
        v278 = _NSRange.NSRangeIterator.next()();
        v265 = v51;
        if (!v278.is_nil)
        {
          value = v278.value;
          v57 = 0;
          v58 = (double)v51;
          while (1)
          {
            v59 = v12;
            if (__OFADD__(v57, 1))
              break;
            v60 = (void *)v269;
            v61 = objc_msgSend((id)v269, "substringWithRange:", value, 1);
            v62 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v271 = v63;
            v272 = (uint64_t)v62;

            v64 = sub_10000B4C8(&qword_100559328);
            v65 = swift_allocObject(v64, 88, 7);
            *(_OWORD *)(v65 + 16) = v268;
            v66 = v270;
            objc_msgSend(v270, "startTime");
            v68 = v67;
            v69 = v66;
            objc_msgSend(v69, "endTime");
            v71 = v70;
            objc_msgSend(v69, "startTime");
            v73 = v72;

            v74 = v68 + (v71 - v73) / v58 * (double)v57;
            objc_msgSend(v69, "startTime");
            v76 = v75;
            v77 = v69;
            objc_msgSend(v77, "endTime");
            v79 = v78;
            objc_msgSend(v77, "startTime");
            v81 = v80;

            v82 = objc_msgSend(v60, "substringWithRange:", value, 1);
            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            v85 = v84;

            *(double *)(v65 + 32) = v74;
            *(double *)(v65 + 40) = v76 + (v79 - v81) / v58 * (double)(v57 + 1);
            *(_QWORD *)(v65 + 48) = v83;
            *(_QWORD *)(v65 + 56) = v85;
            *(_QWORD *)(v65 + 64) = value;
            *(int64x2_t *)(v65 + 72) = v267;
            v12 = v59;
            if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
              v12 = sub_1002F84FC(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
            v8 = *((_QWORD *)v12 + 2);
            v86 = *((_QWORD *)v12 + 3);
            if (v8 >= v86 >> 1)
              v12 = sub_1002F84FC((char *)(v86 > 1), v8 + 1, 1, v12);
            *((_QWORD *)v12 + 2) = v8 + 1;
            v87 = &v12[40 * v8];
            v88 = v271;
            *((_QWORD *)v87 + 4) = v272;
            *((_QWORD *)v87 + 5) = v88;
            *((_QWORD *)v87 + 6) = v65;
            *((_QWORD *)v87 + 7) = 0;
            v87[64] = 1;
            v279 = _NSRange.NSRangeIterator.next()();
            value = v279.value;
            ++v57;
            if (v279.is_nil)
              goto LABEL_37;
          }
          __break(1u);
          goto LABEL_125;
        }
LABEL_37:
        v89 = v270;

        v41 = &v266[v265];
        if (__OFADD__(v266, v265))
          goto LABEL_129;
        v40 = v260;
        v42 = v264;
        if (v264 == v260)
          goto LABEL_123;
      }
    }
    v90 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v90 = a2 & 0xFFFFFFFFFFFFLL;
    v91 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v91 = 11;
    if (!v90)
    {
      swift_bridgeObjectRetain();
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_121:
      swift_bridgeObjectRelease();
      return (unint64_t)v12;
    }
    v253 = 4 * v90;
    v92 = a6 ^ 1;
    v254 = v91 | (v90 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v8 = 0;
    LOBYTE(v96) = 1;
    v97 = 15;
    v12 = (char *)_swiftEmptyArrayStorage;
    v255 = _swiftEmptyArrayStorage;
    v272 = (uint64_t)_swiftEmptyArrayStorage;
    LODWORD(v264) = v92;
    while (1)
    {
      v98 = (uint64_t)v263;
      swift_bridgeObjectRetain();
      v99 = v261;
      v257 = String.index(after:)(v97, v261, v98);
      swift_bridgeObjectRelease();
      v100 = (v96 & 1) == 0;
      if ((v96 & 1) != 0)
        v101 = v97;
      else
        v101 = v93;
      v102 = v97;
      if (v100)
        v97 = v94;
      v103 = v102;
      v104 = String.index(after:)(v102, v99, v98);
      if (v101 >> 14 > v104 >> 14)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      v105 = v104;
      v267.i64[0] = v101 >> 14;
      swift_bridgeObjectRetain();
      v106 = _NSRange.init(range:in:)(v101, v105, v99, v98);
      if (v8 < v97 >> 14)
        goto LABEL_127;
      v108 = v107;
      v270 = (char *)v8;
      v271 = v101;
      v259 = v95;
      v109 = (char **)v106;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v269 = v97;
      v110 = v97;
      v111 = v103;
      *(_QWORD *)&v268 = _NSRange.init(range:in:)(v110, v103, v99, v98);
      v113 = v112;
      __chkstk_darwin();
      v244 = v258;
      v245 = v99;
      v246 = v98;
      v265 = (uint64_t)v109;
      v247 = v109;
      v248 = v108;
      v114 = sub_10000B4C8(&qword_100559318);
      v115 = v262;
      Array.extractFirst(where:)((uint64_t)sub_1003017C4, (uint64_t)v243, v114, (uint64_t)v273);
      v262 = v115;
      v96 = v273[0];
      v116 = String.subscript.getter(v111, v99, v98);
      LOBYTE(v115) = Character.isWhitespace.getter(v116);
      swift_bridgeObjectRelease();
      if ((v115 & 1) == 0)
        break;
      v117 = v264;
      v118 = (id)v96;
      if (v96)
      {
        v119 = v259;
        if (v259)
          goto LABEL_59;
LABEL_66:
        v134 = v118;
        LODWORD(v96) = 0;
        v8 = v271;
        v93 = v271;
        goto LABEL_67;
      }
      if (v259)
      {
        v135 = v259;
        objc_msgSend(v135, "characterRange");
        v136._countAndFlagsBits = v261;
        v136._object = v263;
        v138 = _NSRange.convert(from:to:preserveLength:)(v258, v136, 0);
        if (v137)
        {
          swift_errorRelease(v137);

          LODWORD(v96) = 0;
          v262 = 0;
LABEL_83:
          v8 = v271;
          v93 = v271;
          v94 = v269;
          v95 = v259;
          goto LABEL_84;
        }
        v262 = 0;
        if (!_NSRange.contains(_:)(v138))
        {

          LODWORD(v96) = 0;
          goto LABEL_83;
        }
        v260 = (char *)v135;
        v139 = String.subscript.getter(v269, v111, v261, v263);
        v143 = static String._fromSubstring(_:)(v139, v140, v141, v142);
        v259 = v144;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v272) & 1) == 0)
          v272 = (uint64_t)sub_1002F83C8(0, *(_QWORD *)(v272 + 16) + 1, 1, (_QWORD *)v272);
        v146 = *(_QWORD *)(v272 + 16);
        v145 = *(_QWORD *)(v272 + 24);
        if (v146 >= v145 >> 1)
          v272 = (uint64_t)sub_1002F83C8((_QWORD *)(v145 > 1), v146 + 1, 1, (_QWORD *)v272);
        v147 = v271;
        v148 = v272;
        *(_QWORD *)(v272 + 16) = v146 + 1;
        v149 = (_QWORD *)(v148 + 40 * v146);
        v149[4] = v260;
        v149[5] = v143;
        v150 = v268;
        v149[6] = v259;
        v149[7] = v150;
        v149[8] = v113;
        v151 = String.subscript.getter(v147, v105, v261, v263);
        v155 = static String._fromSubstring(_:)(v151, v152, v153, v154);
        v157 = v156;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v255) & 1) == 0)
          v255 = sub_1002F8294(0, v255[2] + 1, 1, v255);
        v159 = v255[2];
        v158 = v255[3];
        if (v159 >= v158 >> 1)
          v255 = sub_1002F8294((_QWORD *)(v158 > 1), v159 + 1, 1, v255);
        v160 = v255;
        v255[2] = v159 + 1;
        v161 = &v160[5 * v159];
        v161[4] = v155;
        v161[5] = v157;
        v162 = v265;
        v161[6] = v272;
        v161[7] = v162;
        v161[8] = v108;
        v96 = (unint64_t)v260;

        v93 = 0;
        v94 = 0;
        v95 = 0;
        LODWORD(v96) = 1;
        v272 = (uint64_t)_swiftEmptyArrayStorage;
        v8 = v271;
      }
      else
      {
        LODWORD(v96) = 0;
        v95 = 0;
        v8 = v271;
        v93 = v271;
        v94 = v269;
      }
LABEL_84:
      v163 = String.index(before:)(v254, v261, v263);
      if (v270 == (char *)(v163 >> 14) && v95)
      {
        if ((unint64_t)v270 >= v267.i64[0])
        {
          v249 = v94;
          v250 = v93;
          v251 = v96;
          v256 = v118;
          v164 = (uint64_t)v263;
          swift_bridgeObjectRetain();
          v259 = v95;
          v165 = v95;
          v166 = v261;
          v270 = (char *)_NSRange.init(range:in:)(v8, v111, v261, v164);
          *(_QWORD *)&v268 = v167;
          swift_bridgeObjectRetain();
          v168 = v269;
          v267.i64[0] = _NSRange.init(range:in:)(v269, v111, v166, v164);
          v170 = v169;
          swift_bridgeObjectRetain();
          v252 = v165;
          v171 = String.index(after:)(v111, v166, v164);
          v172 = String.subscript.getter(v168, v171, v166, v164);
          v174 = v173;
          v176 = v175;
          v178 = v177;
          swift_bridgeObjectRelease();
          v179 = static String._fromSubstring(_:)(v172, v174, v176, v178);
          v181 = v180;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v272) & 1) == 0)
            v272 = (uint64_t)sub_1002F83C8(0, *(_QWORD *)(v272 + 16) + 1, 1, (_QWORD *)v272);
          v182 = v271;
          v184 = *(_QWORD *)(v272 + 16);
          v183 = *(_QWORD *)(v272 + 24);
          if (v184 >= v183 >> 1)
            v272 = (uint64_t)sub_1002F83C8((_QWORD *)(v183 > 1), v184 + 1, 1, (_QWORD *)v272);
          v185 = v272;
          *(_QWORD *)(v272 + 16) = v184 + 1;
          v186 = (_QWORD *)(v185 + 40 * v184);
          v186[4] = v252;
          v186[5] = v179;
          v187 = v267.i64[0];
          v186[6] = v181;
          v186[7] = v187;
          v186[8] = v170;
          v188 = v263;
          swift_bridgeObjectRetain();
          v189 = v261;
          v190 = String.index(after:)(v111, v261, v188);
          v191 = String.subscript.getter(v182, v190, v189, v188);
          v193 = v192;
          v195 = v194;
          v197 = v196;
          swift_bridgeObjectRelease();
          v198 = static String._fromSubstring(_:)(v191, v193, v195, v197);
          v200 = v199;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v255) & 1) == 0)
            v255 = sub_1002F8294(0, v255[2] + 1, 1, v255);
          v202 = v255[2];
          v201 = v255[3];
          if (v202 >= v201 >> 1)
            v255 = sub_1002F8294((_QWORD *)(v201 > 1), v202 + 1, 1, v255);
          v203 = v255;
          v255[2] = v202 + 1;
          v267.i64[0] = (uint64_t)(v203 + 4);
          v204 = &v203[5 * v202 + 4];
          *v204 = v198;
          v204[1] = v200;
          v205 = (uint64_t)v270;
          v204[2] = v272;
          v204[3] = v205;
          v204[4] = v268;
          v273[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_1002F93C4(0, v202 + 1, 0);
          v206 = 0;
          v207 = v273[0];
          v266 = v12;
          v260 = (char *)v202;
          while (1)
          {
            v208 = (uint64_t *)(v267.i64[0] + 40 * (_QWORD)v206);
            v209 = *v208;
            v210 = v208[1];
            v8 = v208[2];
            v211 = (_QWORD *)v208[4];
            v271 = v210;
            v272 = (uint64_t)v211;
            v212 = *(_QWORD *)(v8 + 16);
            v270 = v206;
            *(_QWORD *)&v269 = v209;
            if (v212)
            {
              *(_QWORD *)&v268 = v207;
              v213 = *(void **)(v8 + 40 * v212 - 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              objc_msgSend(v213, "endTime");
              if (!*(_QWORD *)(v8 + 16))
              {
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
              v215 = v214;
              v216 = v117;
              objc_msgSend(*(id *)(v8 + 32), "startTime");
              v218 = v215 - v217;
              v219 = v8;
              v220 = *(_QWORD *)(v8 + 16);
              if (v220)
              {
                v275 = (char *)_swiftEmptyArrayStorage;
                swift_bridgeObjectRetain();
                sub_1002F93FC(0, v220, 0);
                v221 = v275;
                v265 = v219;
                v222 = (uint64_t *)(v219 + 64);
                do
                {
                  v223 = *(v222 - 3);
                  v224 = *(v222 - 2);
                  v225 = *(v222 - 1);
                  v226 = *v222;
                  v227 = (id)*(v222 - 4);
                  swift_bridgeObjectRetain();
                  objc_msgSend(v227, "startTime");
                  v229 = v228;
                  objc_msgSend(v227, "endTime");
                  v231 = v230;

                  v275 = v221;
                  v233 = *((_QWORD *)v221 + 2);
                  v232 = *((_QWORD *)v221 + 3);
                  if (v233 >= v232 >> 1)
                  {
                    sub_1002F93FC((char *)(v232 > 1), v233 + 1, 1);
                    v221 = v275;
                  }
                  v222 += 5;
                  *((_QWORD *)v221 + 2) = v233 + 1;
                  v234 = &v221[56 * v233];
                  *((_QWORD *)v234 + 4) = v229;
                  *((_QWORD *)v234 + 5) = v231;
                  *((_QWORD *)v234 + 6) = v223;
                  *((_QWORD *)v234 + 7) = v224;
                  *((_QWORD *)v234 + 8) = v225;
                  *((_QWORD *)v234 + 9) = v226;
                  *((_QWORD *)v234 + 10) = v272;
                  --v220;
                }
                while (v220);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v117 = v264;
                v202 = (int64_t)v260;
                v207 = v268;
                goto LABEL_107;
              }
              v207 = v268;
              v117 = v216;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v218 = 0.0;
            }
            swift_bridgeObjectRelease();
            v221 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
            v235 = 1;
            v236 = 0.0;
            if (!(v117 & 1 | (v218 <= 1.0)) && v272 <= 7)
            {
              v237 = v218 + -1.0;
              if (v218 > 2.0)
                v237 = 1.0;
              if (v218 < 1.0)
                v237 = 0.0;
              if (v237 > 0.0)
              {
                v235 = 0;
                v236 = v237;
              }
            }
            v273[0] = v207;
            v239 = *(_QWORD *)(v207 + 16);
            v238 = *(_QWORD *)(v207 + 24);
            if (v239 >= v238 >> 1)
            {
              sub_1002F93C4((char *)(v238 > 1), v239 + 1, 1);
              v207 = v273[0];
            }
            v240 = v270;
            *(_QWORD *)(v207 + 16) = v239 + 1;
            v241 = v207 + 40 * v239;
            *(_QWORD *)(v241 + 32) = v269;
            *(_QWORD *)(v241 + 40) = v271;
            *(_QWORD *)(v241 + 48) = v221;
            *(double *)(v241 + 56) = v236;
            *(_BYTE *)(v241 + 64) = v235;
            v206 = v240 + 1;
            if (v240 == (char *)v202)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              v12 = (char *)v207;
              v272 = (uint64_t)_swiftEmptyArrayStorage;
              v97 = v257;
              v95 = v259;
              LOBYTE(v96) = v251;
              v93 = v250;
              v94 = v249;
              goto LABEL_47;
            }
          }
        }
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        if (v8 < 0)
          v242 = v8;
        else
          v242 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter(v242);
        if (v9)
          goto LABEL_4;
LABEL_136:
        swift_bridgeObjectRelease();
        return (unint64_t)_swiftEmptyArrayStorage;
      }

      v97 = v257;
LABEL_47:
      v8 = v97 >> 14;
      if (v97 >> 14 == v253)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_121;
      }
    }
    v117 = v264;
    v118 = (id)v96;
    if (!v96)
      goto LABEL_83;
    v119 = v259;
    if (!v259)
      goto LABEL_66;
LABEL_59:
    v120 = v119;
    v256 = v118;
    v121 = v118;
    v122 = v120;
    v123 = String.subscript.getter(v269, v111, v261, v263);
    v127 = static String._fromSubstring(_:)(v123, v124, v125, v126);
    v129 = v128;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native(v272) & 1) == 0)
      v272 = (uint64_t)sub_1002F83C8(0, *(_QWORD *)(v272 + 16) + 1, 1, (_QWORD *)v272);
    v96 = *(_QWORD *)(v272 + 16);
    v130 = *(_QWORD *)(v272 + 24);
    if (v96 >= v130 >> 1)
      v272 = (uint64_t)sub_1002F83C8((_QWORD *)(v130 > 1), v96 + 1, 1, (_QWORD *)v272);
    v131 = v272;
    *(_QWORD *)(v272 + 16) = v96 + 1;
    v132 = (_QWORD *)(v131 + 40 * v96);
    v132[4] = v122;
    v132[5] = v127;
    v133 = v268;
    v132[6] = v129;
    v132[7] = v133;
    v132[8] = v113;

    LODWORD(v96) = 0;
    v8 = v271;
    v93 = v271;
    v118 = v256;
LABEL_67:
    v94 = v111;
    v95 = v118;
    goto LABEL_84;
  }
  if (a1 >> 62)
    goto LABEL_132;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_136;
LABEL_4:
  v273[0] = _swiftEmptyArrayStorage;
  result = (unint64_t)sub_1002F93C4(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v11 = 0;
    v12 = (char *)v273[0];
    v270 = (char *)(v8 & 0xC000000000000001);
    v269 = xmmword_100424BB0;
    v271 = v9;
    v272 = v8;
    do
    {
      v266 = v12;
      if (v270)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
      else
        v13 = *(id *)(v8 + 8 * v11 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, "lyricsText");
      v16 = objc_msgSend(v15, "string");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v20 = sub_10000B4C8(&qword_100559328);
      v21 = swift_allocObject(v20, 88, 7);
      *(_OWORD *)(v21 + 16) = v269;
      objc_msgSend(v14, "startTime");
      v23 = v22;
      objc_msgSend(v14, "endTime");
      v25 = v24;
      v26 = objc_msgSend(v14, "lyricsText");
      v27 = objc_msgSend(v26, "string");

      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v31 = objc_msgSend(v14, "characterRange");
      v33 = v32;
      objc_msgSend(v14, "characterRange");
      *(_QWORD *)(v21 + 32) = v23;
      *(_QWORD *)(v21 + 40) = v25;
      *(_QWORD *)(v21 + 48) = v28;
      *(_QWORD *)(v21 + 56) = v30;
      *(_QWORD *)(v21 + 64) = v31;
      *(_QWORD *)(v21 + 72) = v33;
      *(_QWORD *)(v21 + 80) = v34;

      v12 = v266;
      v273[0] = v266;
      v36 = *((_QWORD *)v266 + 2);
      v35 = *((_QWORD *)v266 + 3);
      if (v36 >= v35 >> 1)
      {
        sub_1002F93C4((char *)(v35 > 1), v36 + 1, 1);
        v12 = (char *)v273[0];
      }
      ++v11;
      *((_QWORD *)v12 + 2) = v36 + 1;
      v37 = &v12[40 * v36];
      *((_QWORD *)v37 + 4) = v17;
      *((_QWORD *)v37 + 5) = v19;
      *((_QWORD *)v37 + 6) = v21;
      *((_QWORD *)v37 + 7) = 0;
      v37[64] = 1;
      v8 = v272;
    }
    while (v271 != v11);
    goto LABEL_121;
  }
  __break(1u);
LABEL_139:
  __break(1u);
  return result;
}

unint64_t sub_1002FE2E4(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _UNKNOWN **v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  unint64_t v30;

  v6 = objc_msgSend(a1, "words");
  if (v6)
  {
    v7 = v6;
    v8 = sub_1000DD108(0, &qword_100559310, MSVLyricsWord_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    v9 = sub_10000B4C8(&qword_100559318);
    v10 = sub_100012324(&qword_100559320, &qword_100559318, (const char *)&protocol conformance descriptor for [A]);
    v11 = (_QWORD *)Sequence.exclude(_:)((uint64_t)sub_1002F7A54, 0, v9, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if (qword_100557E48 != -1)
    swift_once(&qword_100557E48, sub_1002F4870);
  v12 = swift_bridgeObjectRetain();
  v13 = sub_1002F6340(v12);
  swift_bridgeObjectRelease();
  if (a3)
    v14 = sub_10014ACA0(a2, a3, v13);
  else
    v14 = 0;
  swift_bridgeObjectRelease();
  if (qword_100557E40 != -1)
    swift_once(&qword_100557E40, sub_1002F4804);
  v15 = swift_bridgeObjectRetain();
  v16 = sub_1002F6340(v15);
  swift_bridgeObjectRelease();
  if (a3)
    v17 = sub_10014ACA0(a2, a3, v16);
  else
    v17 = 0;
  swift_bridgeObjectRelease();
  v18 = sub_1002FCBC4(a2, a3);
  v19 = objc_msgSend(a1, "primaryVocalText");
  v20 = objc_msgSend(v19, "string");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = objc_msgSend(a1, "lyricsText");
  v25 = objc_msgSend(v24, "string");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = a1;
  objc_msgSend(v29, "endTime");
  objc_msgSend(v29, "startTime");

  LOBYTE(v29) = sub_1003237F4(2, (uint64_t)v18);
  swift_bridgeObjectRelease();
  v30 = sub_1002FCF14((unint64_t)v11, v21, v23, v26, v28, v29 & 1, v14 & 1, v17 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

unint64_t sub_1002FE5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  NSString v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Locale.Language(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(NLLanguageRecognizer);
  v5 = String._bridgeToObjectiveC()();
  v6 = (unint64_t)objc_msgSend(v4, "dominantLanguageForString:", v5);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = Locale.Language.init(identifier:)(v7, v8);
    v10 = Locale.Language.characterDirection.getter(v9);

    v6 = v10 == 2;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

unint64_t sub_1002FE6DC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  char v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;

  v9 = objc_msgSend(a1, "subwords");
  if (!v9)
    goto LABEL_13;
  v10 = v9;
  v11 = sub_1000DD108(0, &qword_100559310, MSVLyricsWord_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v17 = v12;
    else
      v17 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    result = swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    objc_msgSend(a1, "startTime");
    v4 = v19;
    goto LABEL_14;
  }
LABEL_4:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_45;
    }
    v14 = *(id *)(v12 + 32);
  }
  v15 = v14;
  swift_bridgeObjectRelease();
  objc_msgSend(v15, "startTime");
  v4 = v16;

LABEL_14:
  v20 = objc_msgSend(a1, "subwords");
  if (!v20)
  {
LABEL_28:
    objc_msgSend(a1, "endTime");
    v27 = v29;
    goto LABEL_29;
  }
  v21 = v20;
  v22 = sub_1000DD108(0, &qword_100559310, MSVLyricsWord_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if (!((unint64_t)v12 >> 62))
  {
    v23 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_17;
    goto LABEL_27;
  }
  if (v12 < 0)
    v28 = v12;
  else
    v28 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
LABEL_17:
  result = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_46:
    v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v12);
    goto LABEL_22;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (result >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_48:
    __break(1u);
    return result;
  }
  v24 = *(id *)(v12 + 8 * result + 32);
LABEL_22:
  v25 = v24;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, "endTime");
  v27 = v26;

LABEL_29:
  if (qword_100557E48 != -1)
    swift_once(&qword_100557E48, sub_1002F4870);
  v30 = swift_bridgeObjectRetain();
  v31 = sub_1002F6340(v30);
  swift_bridgeObjectRelease();
  if (a3)
    v60 = sub_10014ACA0(a2, a3, v31);
  else
    v60 = 0;
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(a1, "lyricsText");
  v33 = objc_msgSend(v32, "string");

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v63 = v35;
  v64 = v34;

  v36 = objc_msgSend(a1, "characterRange");
  v61 = v37;
  v62 = v36;
  v38 = objc_msgSend(a1, "lyricsText");
  v39 = objc_msgSend(v38, "string");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v40 = sub_1002FE5F0();
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(a1, "subwords");
  if (v41)
  {
    v42 = v41;
    v59 = a2;
    v43 = sub_1000DD108(0, &qword_100559310, MSVLyricsWord_ptr);
    v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);

    swift_bridgeObjectRetain();
    v45 = objc_msgSend(a1, "lyricsText");
    v46 = objc_msgSend(v45, "string");

    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

    v50 = objc_msgSend(a1, "lyricsText");
    v51 = objc_msgSend(v50, "string");

    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    if (qword_100557E40 != -1)
      swift_once(&qword_100557E40, sub_1002F4804);
    v55 = swift_bridgeObjectRetain();
    v56 = sub_1002F6340(v55);
    swift_bridgeObjectRelease();
    if (a3)
      v57 = sub_10014ACA0(v59, a3, v56);
    else
      v57 = 0;
    swift_bridgeObjectRelease();
    v58 = (_QWORD *)sub_1002FCF14(v44, v47, v49, v52, v54, 0, v60 & 1, v57 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v44, 2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = _swiftEmptyArrayStorage;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = v27;
  *(_QWORD *)(a4 + 16) = v64;
  *(_QWORD *)(a4 + 24) = v63;
  *(_QWORD *)(a4 + 32) = v62;
  *(_QWORD *)(a4 + 40) = v61;
  *(_BYTE *)(a4 + 48) = v40 & 1;
  *(_QWORD *)(a4 + 56) = v58;
  return result;
}

_QWORD *sub_1002FEC54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;

  sub_10000B4C8(&qword_100559360);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v8 = 0;
  v54 = a1;
  v11 = *(_QWORD *)(a1 + 64);
  v10 = a1 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(v10 - 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v47 = v10;
  v48 = (unint64_t)(v12 + 63) >> 6;
  v52 = result;
  v53 = result + 8;
  v50 = a3;
  v51 = a4;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v56 = (v14 - 1) & v14;
  for (i = __clz(__rbit64(v14)) | (v8 << 6); ; i = __clz(__rbit64(v17)) + (v8 << 6))
  {
    v19 = *(_QWORD *)(v54 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * i);
    v21 = v20[1];
    v65 = *v20;
    v22 = *(void **)(v19 + 8 * i);
    v58 = v21;
    swift_bridgeObjectRetain();
    v23 = v22;
    v24 = objc_msgSend(a2, "type");
    v25 = objc_msgSend(v23, "lyricsText");
    v26 = objc_msgSend(v25, "string");

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v57 = v8;
    if (v24 == (id)2)
    {
      v49 = v27;
      v30 = (_QWORD *)sub_1002FE2E4(v23, a3, a4);
      v31 = objc_msgSend(v23, "backgroundVocals");
      if (v31)
      {
        v32 = v31;
        swift_bridgeObjectRetain();
        sub_1002FE6DC(v32, a3, a4, (uint64_t)&v59);
        v33 = v60;
        v34 = v61;
        v45 = v62;
        v46 = v59;
        v35 = v63;
        v36 = v64;

        v38 = v45;
        v37 = v46;
      }
      else
      {

        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      result = v52;
      v39 = v65;
      v27 = v49;
    }
    else
    {

      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0uLL;
      v38 = 0uLL;
      v30 = _swiftEmptyArrayStorage;
      result = v52;
      v39 = v65;
    }
    *(_QWORD *)((char *)v53 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v40 = (_QWORD *)(result[6] + 16 * i);
    *v40 = v39;
    v40[1] = v58;
    v41 = result[7] + 88 * i;
    *(_QWORD *)v41 = v27;
    *(_QWORD *)(v41 + 8) = v29;
    *(_QWORD *)(v41 + 16) = v30;
    *(_OWORD *)(v41 + 24) = v37;
    *(_QWORD *)(v41 + 40) = v33;
    *(_QWORD *)(v41 + 48) = v34;
    *(_OWORD *)(v41 + 56) = v38;
    *(_QWORD *)(v41 + 72) = v35;
    *(_QWORD *)(v41 + 80) = v36;
    v42 = result[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    result[2] = v44;
    a3 = v50;
    a4 = v51;
    v14 = v56;
    v8 = v57;
    if (v56)
      goto LABEL_4;
LABEL_5:
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_30;
    if (v16 >= v48)
      return result;
    v17 = *(_QWORD *)(v47 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v48)
        return result;
      v17 = *(_QWORD *)(v47 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v48)
          return result;
        v17 = *(_QWORD *)(v47 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v56 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v48)
    return result;
  v17 = *(_QWORD *)(v47 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v48)
      return result;
    v17 = *(_QWORD *)(v47 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_1002FEFCC(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  id v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id *v21;
  BOOL *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  id *v48;
  id v49;
  BOOL *v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  char **v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  id v85;
  id v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  id v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  BOOL *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  id v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  id v154;
  int v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL4 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  void *v166;
  _QWORD v167[3];
  id v168[2];
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175[24];
  char v176[24];
  char v177[24];
  _QWORD v178[6];
  unsigned __int8 v179;
  uint64_t v180;

  v151 = a8;
  v163 = a7;
  LOBYTE(v8) = a6;
  v154 = a5;
  v13 = type metadata accessor for Locale.Language(0);
  v143 = *(_QWORD *)(v13 - 8);
  v144 = v13;
  __chkstk_darwin();
  v142 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178[0] = a1;
  KeyPath = swift_getKeyPath(&unk_10043B8C8);
  v16 = sub_10000B4C8(&qword_100559300);
  v17 = sub_100012324(&qword_100559308, &qword_100559300, (const char *)&protocol conformance descriptor for [A]);
  v18 = Sequence.sorted<A>(by:comparator:)(KeyPath, (uint64_t)sub_1002F6418, 0, v16, v17, (uint64_t)&protocol witness table for Double);
  swift_release(KeyPath);
  v152 = v18;
  if ((unint64_t)v18 >> 62)
    goto LABEL_100;
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v20 = v154;
  if (v19)
  {
    if (v19 >= 1)
    {
      v147 = v8 & 1;
      v141 = a2 + 16;
      v21 = (id *)(a3 + 16);
      v22 = a4 + 16;
      v148 = v19;
      v150 = v18 & 0xC000000000000001;
      v149 = (id)objc_opt_self(NLLanguageRecognizer);
      swift_beginAccess(v21, v177, 0, 0);
      swift_beginAccess(v21, v176, 0, 0);
      swift_beginAccess(v22, v175, 1, 0);
      v139 = v21;
      swift_beginAccess(v21, &v174, 1, 0);
      swift_beginAccess(v22, &v173, 0, 0);
      swift_beginAccess(v22, &v172, 0, 0);
      v145 = v22;
      swift_beginAccess(v22, &v171, 0, 0);
      v23 = 0;
      v153 = 0;
      v165 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        v162 = v23;
        if (v150)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
        else
          v24 = *(id *)(v18 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v24, "agent");
        v166 = v25;
        if (!v26)
          goto LABEL_19;
        v27 = v26;
        swift_beginAccess(v141, v167, 33, 0);
        v28 = v27;
        sub_10039AA78((Swift::Int *)v168, v28);
        swift_endAccess(v167);

        v29 = objc_msgSend(v28, "type");
        if (!v29)
        {

          goto LABEL_19;
        }
        v30 = v29;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

        v34 = v31 == 0x6E6F73726570 && v33 == 0xE600000000000000;
        if (v34
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73726570, 0xE600000000000000, v31, v33, 0) & 1) != 0)
        {
          v35 = objc_msgSend(v28, "identifier");
          if (v35)
          {
            v36 = v35;
            v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
            v39 = v38;

          }
          else
          {
            v37 = 0;
            v39 = 0;
          }
          if (*v139 && (v41 = objc_msgSend(*v139, "identifier")) != 0)
          {
            v42 = v41;
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v45 = v44;

            if (v39)
              goto LABEL_27;
          }
          else
          {
            v43 = 0;
            v45 = 0;
            if (v39)
            {
LABEL_27:
              if (!v45)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v154;
                goto LABEL_42;
              }
              if (v37 == v43 && v39 == v45)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v154;
              }
              else
              {
                v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v43, v45, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v154;
                if ((v46 & 1) == 0)
                  goto LABEL_41;
              }
              goto LABEL_33;
            }
          }
          v20 = v154;
          if (v45)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            swift_bridgeObjectRelease();
LABEL_42:
            v48 = v139;
            v49 = *v139;
            v50 = v145;
            v25 = v166;
            if (*v139)
            {
              *v145 = !*v145;
              v49 = *v48;
            }
            *v48 = v27;

            v40 = *v50;
            goto LABEL_45;
          }
        }
LABEL_33:
        if (v31 == 0x70756F7267 && v33 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          v155 = 0;
          v25 = v166;
          goto LABEL_46;
        }
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70756F7267, 0xE500000000000000, v31, v33, 0);
        v25 = v166;
        if ((v47 & 1) != 0)
        {

          swift_bridgeObjectRelease();
          v155 = 0;
          goto LABEL_46;
        }
        if (v31 == 0x726568746FLL && v33 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          v40 = 1;
          goto LABEL_45;
        }
        v119 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726568746FLL, 0xE500000000000000, v31, v33, 0);

        swift_bridgeObjectRelease();
        if ((v119 & 1) != 0)
        {
          v40 = 1;
          goto LABEL_45;
        }
LABEL_19:
        v40 = *v145;
LABEL_45:
        v155 = v40;
LABEL_46:
        v51 = objc_msgSend(v25, "translationKey");
        if (v51)
        {
          v52 = v51;
          v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          v161 = v53;

        }
        else
        {
          v160 = 0;
          v161 = 0;
        }
        v54 = objc_msgSend(v20, "type");
        v55 = &selRef_primaryVocalText;
        if (v54 != (id)2)
          v55 = &selRef_lyricsText;
        v56 = objc_msgSend(v25, *v55);
        v57 = objc_msgSend(v56, "string");

        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        v60 = v59;

        v157 = v58;
        v158 = v60;
        v61 = String._bridgeToObjectiveC()();
        a4 = (BOOL *)objc_msgSend(v149, "dominantLanguageForString:", v61);

        if (a4)
        {
          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
          v63 = v142;
          v65 = Locale.Language.init(identifier:)(v62, v64);
          v66 = Locale.Language.characterDirection.getter(v65);

          v159 = v66 == 2;
          (*(void (**)(char *, uint64_t))(v143 + 8))(v63, v144);
        }
        else
        {
          v159 = 0;
        }
        v67 = objc_msgSend(v25, "words");
        if (v67)
        {
          v68 = v67;
          v69 = sub_1000DD108(0, &qword_100559310, MSVLyricsWord_ptr);
          v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v69);

          v167[0] = v70;
          v71 = sub_10000B4C8(&qword_100559318);
          v72 = sub_100012324(&qword_100559320, &qword_100559318, (const char *)&protocol conformance descriptor for [A]);
          v73 = v71;
          a4 = (BOOL *)v153;
          a3 = Sequence.exclude(_:)((uint64_t)sub_1002F7A54, 0, v73, v72);
          v153 = (char *)a4;
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (uint64_t)_swiftEmptyArrayStorage;
        }
        v74 = swift_allocObject(&unk_10051BB78, 24, 7);
        v164 = v74;
        *(_QWORD *)(v74 + 16) = _swiftEmptyArrayStorage;
        v75 = (unint64_t *)(v74 + 16);
        v76 = swift_allocObject(&unk_10051BBA0, 80, 7);
        *(_OWORD *)(v76 + 16) = 0u;
        v77 = v76 + 16;
        *(_OWORD *)(v76 + 32) = 0u;
        *(_OWORD *)(v76 + 48) = 0u;
        *(_OWORD *)(v76 + 64) = 0u;
        if (objc_msgSend(v20, "type") == (id)2)
        {
          v78 = objc_msgSend(v20, "language");
          if (v78)
          {
            v79 = v78;
            v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
            v82 = v81;

          }
          else
          {
            v80 = 0;
            v82 = 0;
          }
          v83 = v166;
          v84 = sub_1002FE2E4(v166, v80, v82);
          swift_bridgeObjectRelease();
          swift_beginAccess(v75, &v170, 1, 0);
          *v75 = v84;
          swift_bridgeObjectRelease();
          v85 = objc_msgSend(v83, "backgroundVocals");
          if (v85)
          {
            v140 = v76 + 16;
            v86 = v85;
            v87 = objc_msgSend(v154, "language");
            if (v87)
            {
              v88 = v87;
              v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
              v91 = v90;

            }
            else
            {

              v89 = 0;
              v91 = 0;
            }
            sub_1002FE6DC(v86, v89, v91, (uint64_t)v178);
            v92 = v178[0];
            v93 = v178[1];
            v94 = v178[2];
            a4 = (BOOL *)v178[3];
            v95 = v178[4];
            v156 = (id)v178[5];
            v146 = v179;
            v96 = v180;

            v77 = v140;
          }
          else
          {
            v92 = 0;
            v93 = 0;
            v94 = 0;
            a4 = 0;
            v95 = 0;
            v156 = 0;
            v146 = 0;
            v96 = 0;
          }
          swift_beginAccess(v77, &v169, 1, 0);
          v97 = *(_QWORD *)(v76 + 16);
          v98 = *(_QWORD *)(v76 + 24);
          v99 = *(_QWORD *)(v76 + 32);
          v100 = *(_QWORD *)(v76 + 40);
          v101 = *(_QWORD *)(v76 + 48);
          v102 = *(_QWORD *)(v76 + 56);
          v103 = *(_QWORD *)(v76 + 64);
          v104 = *(_QWORD *)(v76 + 72);
          *(_QWORD *)(v76 + 16) = v92;
          *(_QWORD *)(v76 + 24) = v93;
          *(_QWORD *)(v76 + 32) = v94;
          *(_QWORD *)(v76 + 40) = a4;
          v105 = v156;
          *(_QWORD *)(v76 + 48) = v95;
          *(_QWORD *)(v76 + 56) = v105;
          *(_QWORD *)(v76 + 64) = v146;
          *(_QWORD *)(v76 + 72) = v96;
          sub_1002FCB14(v97, v98, v99, v100, v101, v102, v103, v104);
          v25 = v166;
        }
        v8 = objc_msgSend(v25, "lineIndex");
        objc_msgSend(v25, "startTime");
        v107 = v106;
        objc_msgSend(v25, "endTime");
        v109 = v108;
        if ((unint64_t)a3 >> 62)
        {
          if (a3 < 0)
            a4 = (BOOL *)a3;
          else
            a4 = (BOOL *)(a3 & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain();
          a2 = _CocoaArrayWrapper.endIndex.getter(a4);
          v156 = v8;
          if (!a2)
          {
LABEL_86:
            v116 = v163;
            swift_bridgeObjectRelease();
            objc_msgSend(v25, "startTime");
            v112 = v120;
            swift_bridgeObjectRelease();
            objc_msgSend(v25, "endTime");
            v118 = v121;
            goto LABEL_87;
          }
        }
        else
        {
          a2 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v156 = v8;
          if (!a2)
            goto LABEL_86;
        }
        v18 = a3 & 0xC000000000000001;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v110 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
        }
        else
        {
          if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            if (v18 < 0)
              v136 = v152;
            else
              v136 = v18 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v137 = v136;
            v18 = v152;
            v19 = _CocoaArrayWrapper.endIndex.getter(v137);
            swift_bridgeObjectRelease();
            goto LABEL_3;
          }
          v110 = (char *)*(id *)(a3 + 32);
        }
        a4 = (BOOL *)v110;
        swift_bridgeObjectRelease();
        objc_msgSend(a4, "startTime");
        v112 = v111;

        v113 = a2 - 1;
        if (__OFSUB__(a2, 1))
          goto LABEL_97;
        if (v18)
        {
          v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v113, a3);
        }
        else
        {
          if ((v113 & 0x8000000000000000) != 0)
            goto LABEL_98;
          if (v113 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_99;
          v114 = *(id *)(a3 + 8 * v113 + 32);
        }
        v115 = v114;
        v116 = v163;
        swift_bridgeObjectRelease();
        objc_msgSend(v115, "endTime");
        v118 = v117;

LABEL_87:
        v122 = (_QWORD *)swift_allocObject(&unk_10051BBC8, 56, 7);
        v123 = v151;
        v125 = v160;
        v124 = v161;
        v122[2] = v151;
        v122[3] = v125;
        v126 = v157;
        v122[4] = v124;
        v122[5] = v126;
        v122[6] = v158;
        v127 = (_QWORD *)swift_allocObject(&unk_10051BBF0, 48, 7);
        v127[2] = v123;
        v127[3] = v125;
        v128 = v164;
        v127[4] = v124;
        v127[5] = v128;
        v129 = (_QWORD *)swift_allocObject(&unk_10051BC18, 48, 7);
        v129[2] = v123;
        v129[3] = v125;
        v129[4] = v124;
        v129[5] = v76;
        swift_bridgeObjectRetain_n(v124, 2);
        swift_retain_n(v123, 3);
        swift_bridgeObjectRetain_n(v116, 2);
        swift_retain(v128);
        swift_retain(v76);
        swift_retain(v122);
        swift_retain(v127);
        swift_retain(v129);
        if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) == 0)
          v165 = sub_1002F860C(0, *((_QWORD *)v165 + 2) + 1, 1, v165);
        v20 = v154;
        v130 = v156;
        v132 = *((_QWORD *)v165 + 2);
        v131 = *((_QWORD *)v165 + 3);
        if (v132 >= v131 >> 1)
          v165 = sub_1002F860C((char *)(v131 > 1), v132 + 1, 1, v165);
        v133 = v162 + 1;
        v134 = v165;
        *((_QWORD *)v165 + 2) = v132 + 1;
        v135 = &v134[104 * v132];
        *((_QWORD *)v135 + 4) = v107;
        *((_QWORD *)v135 + 5) = v109;
        *((_QWORD *)v135 + 6) = v130;
        v23 = v133;
        v135[56] = v155;
        v135[57] = v159;
        v135[58] = v147;
        *((_QWORD *)v135 + 8) = v163;
        *((_QWORD *)v135 + 9) = v112;
        *((_QWORD *)v135 + 10) = v118;
        *((_QWORD *)v135 + 11) = sub_100301760;
        *((_QWORD *)v135 + 12) = v122;
        *((_QWORD *)v135 + 13) = sub_100301774;
        *((_QWORD *)v135 + 14) = v127;
        *((_QWORD *)v135 + 15) = sub_1003017B8;
        *((_QWORD *)v135 + 16) = v129;

        swift_bridgeObjectRelease();
        swift_release(v122);
        swift_release(v127);
        swift_release(v129);
        swift_release(v76);
        swift_release(v164);
        v18 = v152;
        if (v148 == v23)
          goto LABEL_95;
      }
    }
    __break(1u);
  }
  else
  {
    v165 = (char *)_swiftEmptyArrayStorage;
LABEL_95:
    swift_bridgeObjectRelease();
  }
}

Swift::Int sub_1002FFCDC(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  id v40[2];
  _QWORD *v41;

  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a1 + 16) > 1uLL)
    {
      v29 = swift_bridgeObjectRetain();
      v4 = sub_1002FC238(v29);
      if ((v4 & 0xC000000000000001) != 0)
        goto LABEL_37;
      goto LABEL_33;
    }
    return 0;
  }
  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v3, a2) <= 1)
    return 0;
  v4 = (uint64_t)&_swiftEmptySetSingleton;
  v41 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  v5 = __CocoaSet.makeIterator()(v3);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (!v6)
    goto LABEL_36;
  v7 = v6;
  v8 = sub_1000DD108(0, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
  do
  {
    v39 = v7;
    swift_dynamicCast(v40, &v39, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
    v10 = objc_msgSend(v40[0], "type");
    if (!v10)
    {
LABEL_8:

      goto LABEL_9;
    }
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    if (v12 == 0x6E6F73726570 && v14 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0x6E6F73726570, 0xE600000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
        goto LABEL_8;
    }
    v17 = v40[0];
    v18 = v41;
    v19 = v41[2];
    if (v41[3] <= v19)
    {
      sub_10039B5FC(v19 + 1);
      v18 = v41;
    }
    result = NSObject._rawHashValue(seed:)(v18[5]);
    v20 = v18 + 7;
    v21 = -1 << *((_BYTE *)v18 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v18[(v22 >> 6) + 7]) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~v18[(v22 >> 6) + 7])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = v20[v23];
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v18[6] + 8 * v24) = v17;
    ++v18[2];
LABEL_9:
    v7 = __CocoaSet.Iterator.next()(result);
  }
  while (v7);
  v4 = (uint64_t)v41;
LABEL_36:
  v30 = swift_release(v5);
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_33:
    v31 = *(_QWORD *)(v4 + 16);
    goto LABEL_38;
  }
LABEL_37:
  v31 = __CocoaSet.count.getter(v4, v30);
LABEL_38:
  swift_release(v4);
  sub_1002F72C8(a1);
  v33 = v32;
  sub_1002F7648(a1);
  if (v31 == 2)
    v35 = 1;
  else
    v35 = 2;
  if (v31 == 1)
    v35 = 0;
  if (v31 >= 3)
    v36 = 2;
  else
    v36 = 0x10000u >> (8 * v31);
  if ((v33 & 1) != 0)
    v35 = v36;
  if (v31 == 2)
    v37 = 1;
  else
    v37 = 2;
  if (v31 >= 3)
    v38 = 2;
  else
    v38 = 0x10200u >> (8 * v31);
  if ((v33 & 1) == 0)
    v37 = v38;
  if ((v34 & 1) != 0)
    return v37;
  else
    return v35;
}

uint64_t sub_10030003C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100300078()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10030009C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1003000B0()
{
  unint64_t result;

  result = qword_100559030;
  if (!qword_100559030)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.Word.Emphasis, &type metadata for Lyrics.Word.Emphasis);
    atomic_store(result, (unint64_t *)&qword_100559030);
  }
  return result;
}

unint64_t sub_1003000F8()
{
  unint64_t result;

  result = qword_100559038;
  if (!qword_100559038)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.Word, &type metadata for Lyrics.Word);
    atomic_store(result, (unint64_t *)&qword_100559038);
  }
  return result;
}

unint64_t sub_100300140()
{
  unint64_t result;

  result = qword_100559040;
  if (!qword_100559040)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.Syllable, &type metadata for Lyrics.Syllable);
    atomic_store(result, (unint64_t *)&qword_100559040);
  }
  return result;
}

unint64_t sub_100300188()
{
  unint64_t result;

  result = qword_100559048;
  if (!qword_100559048)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.TextLine, &type metadata for Lyrics.TextLine);
    atomic_store(result, (unint64_t *)&qword_100559048);
  }
  return result;
}

unint64_t sub_1003001D0()
{
  unint64_t result;

  result = qword_100559050;
  if (!qword_100559050)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.LyricsType, &type metadata for Lyrics.LyricsType);
    atomic_store(result, (unint64_t *)&qword_100559050);
  }
  return result;
}

unint64_t sub_100300218()
{
  unint64_t result;

  result = qword_100559058;
  if (!qword_100559058)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.VocalistsType, &type metadata for Lyrics.VocalistsType);
    atomic_store(result, (unint64_t *)&qword_100559058);
  }
  return result;
}

unint64_t sub_100300260()
{
  unint64_t result;

  result = qword_100559060;
  if (!qword_100559060)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.AgentAlignment, &type metadata for Lyrics.AgentAlignment);
    atomic_store(result, (unint64_t *)&qword_100559060);
  }
  return result;
}

unint64_t sub_1003002A8()
{
  unint64_t result;

  result = qword_100559068;
  if (!qword_100559068)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.Direction, &type metadata for Lyrics.Direction);
    atomic_store(result, (unint64_t *)&qword_100559068);
  }
  return result;
}

unint64_t sub_1003002F0()
{
  unint64_t result;

  result = qword_100559070;
  if (!qword_100559070)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.Capability, &type metadata for Lyrics.Capability);
    atomic_store(result, (unint64_t *)&qword_100559070);
  }
  return result;
}

uint64_t sub_100300334()
{
  return sub_100012324(&qword_100559078, &qword_100559080, (const char *)&protocol conformance descriptor for [A]);
}

unint64_t sub_100300364()
{
  unint64_t result;

  result = qword_100559088;
  if (!qword_100559088)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Lyrics.AudioAttribute, &type metadata for Lyrics.AudioAttribute);
    atomic_store(result, (unint64_t *)&qword_100559088);
  }
  return result;
}

uint64_t type metadata accessor for Lyrics()
{
  return objc_opt_self(_TtC11MusicCoreUI6Lyrics);
}

uint64_t destroy for Lyrics.Word(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  return a1;
}

__n128 initializeWithTake for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Word(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Word(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Word()
{
  return &type metadata for Lyrics.Word;
}

ValueMetadata *type metadata accessor for Lyrics.Word.Emphasis()
{
  return &type metadata for Lyrics.Word.Emphasis;
}

uint64_t initializeWithCopy for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Lyrics.Syllable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Syllable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Syllable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Syllable()
{
  return &type metadata for Lyrics.Syllable;
}

double destroy for Lyrics.TextLine(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[4]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  *(_QWORD *)&result = swift_release(a1[12]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = v3;
  swift_bridgeObjectRetain();
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_retain(v7);
  swift_release(v8);
  v10 = *(_QWORD *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for Lyrics.TextLine(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine()
{
  return &type metadata for Lyrics.TextLine;
}

uint64_t destroy for Lyrics.TextLine.BackgroundVocals(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  return a1;
}

__n128 initializeWithTake for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine.BackgroundVocals(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine.BackgroundVocals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine.BackgroundVocals()
{
  return &type metadata for Lyrics.TextLine.BackgroundVocals;
}

uint64_t getEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.InstrumentalLine()
{
  return &type metadata for Lyrics.InstrumentalLine;
}

uint64_t destroy for Lyrics.SongwritersLine(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 initializeWithTake for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.SongwritersLine()
{
  return &type metadata for Lyrics.SongwritersLine;
}

ValueMetadata *type metadata accessor for Lyrics.LyricsType()
{
  return &type metadata for Lyrics.LyricsType;
}

ValueMetadata *type metadata accessor for Lyrics.VocalistsType()
{
  return &type metadata for Lyrics.VocalistsType;
}

ValueMetadata *type metadata accessor for Lyrics.AgentAlignment()
{
  return &type metadata for Lyrics.AgentAlignment;
}

uint64_t _s11MusicCoreUI6LyricsC14AgentAlignmentOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100300F74 + 4 * byte_10043B115[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100300FA8 + 4 * asc_10043B110[v4]))();
}

uint64_t sub_100300FA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100300FB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100300FB8);
  return result;
}

uint64_t sub_100300FC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100300FCCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100300FD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100300FD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Direction()
{
  return &type metadata for Lyrics.Direction;
}

uint64_t _s11MusicCoreUI6LyricsC10CapabilityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100301040 + 4 * byte_10043B11F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100301074 + 4 * byte_10043B11A[v4]))();
}

uint64_t sub_100301074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030107C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100301084);
  return result;
}

uint64_t sub_100301090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100301098);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10030109C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003010A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Capability()
{
  return &type metadata for Lyrics.Capability;
}

_QWORD *initializeBufferWithCopyOfBuffer for Lyrics.AudioAttribute(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.AudioAttribute()
{
  return &type metadata for Lyrics.AudioAttribute;
}

uint64_t destroy for Lyrics.LineTranslationMetadata(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  result = a1[6];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[10]);
  }
  return result;
}

uint64_t initializeWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100301324(a1 + 24);
      v7 = *(_OWORD *)(a2 + 72);
      v9 = *v5;
      v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v7;
      *v4 = v9;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *v4 = v10;
    *(_OWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t sub_100301324(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  return a1;
}

__n128 initializeWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 48);
  if (!v5)
  {
    sub_100301324(a1 + 24);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.LineTranslationMetadata()
{
  return &type metadata for Lyrics.LineTranslationMetadata;
}

void *sub_1003014D8(void *result, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;

  if (result)
  {
    v15 = result;
    sub_10023482C(a2, a3, a4, a5, a6, a7, a8);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100301558(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_retain(result);
    swift_retain(a2);
    swift_retain(a3);
    swift_retain(a4);
    return swift_retain(a5);
  }
  return result;
}

uint64_t sub_1003015B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003015F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100301630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005592F8;
  if (!qword_1005592F8)
  {
    v1 = sub_1000DD108(255, (unint64_t *)&qword_100558F88, MSVLyricsAgent_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005592F8);
  }
  return result;
}

const char *sub_100301688()
{
  return "startTime";
}

id sub_100301694@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "startTime");
  *a2 = v4;
  return result;
}

id sub_1003016C4(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setStartTime:", *a1);
}

uint64_t sub_1003016D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003016FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  }
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10030172C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100301760()
{
  uint64_t *v0;

  return sub_1002F642C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100301774()
{
  uint64_t *v0;

  return sub_1002F669C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100301784()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003017B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1002F68F0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), a1);
}

BOOL sub_1003017C4(id *a1)
{
  uint64_t v1;

  return sub_1002F6F3C(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(char **)(v1 + 32), *(void **)(v1 + 40));
}

BOOL sub_1003017E8(id *a1)
{
  uint64_t v1;

  return sub_1002F6E9C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10030180C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10030183C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1002FCB14(a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t static LyricsLoader.supportsLyrics(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  NSString v55;
  id v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  BOOL v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char v73;
  char *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char *v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v86;
  char *v87;
  const char *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint32_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  os_log_type_t v96;
  char *v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t (*v108)(char *, uint64_t, uint64_t);
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  BOOL v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[15];
  uint64_t v136;
  char v137;
  uint64_t v138;

  v2 = type metadata accessor for Song(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v130 = (char *)&v124 - v6;
  __chkstk_darwin();
  v129 = (char *)&v124 - v7;
  __chkstk_darwin();
  v131 = (char *)&v124 - v8;
  __chkstk_darwin();
  v126 = (char *)&v124 - v9;
  __chkstk_darwin();
  v125 = (char *)&v124 - v10;
  __chkstk_darwin();
  v12 = (char *)&v124 - v11;
  __chkstk_darwin();
  v14 = (char *)&v124 - v13;
  __chkstk_darwin();
  v127 = (char *)&v124 - v15;
  __chkstk_darwin();
  v17 = (char *)&v124 - v16;
  __chkstk_darwin();
  v128 = (char *)&v124 - v18;
  __chkstk_darwin();
  v20 = (char *)&v124 - v19;
  v21 = __chkstk_darwin();
  v23 = (char *)&v124 - v22;
  v24 = Song.hasLyrics.getter(v21);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v133 = a1;
  v132 = v25;
  v26 = v25(v23, a1, v2);
  if ((v24 & 1) != 0)
  {
    v27 = *(void (**)(char *, uint64_t))(v3 + 8);
    v27(v23, v2);
  }
  else
  {
    v28 = Song.hasCustomLyrics.getter(v26);
    v27 = *(void (**)(char *, uint64_t))(v3 + 8);
    v27(v23, v2);
    if ((v28 & 1) == 0)
    {
      v46 = v133;
      if (qword_100557E50 != -1)
        swift_once(&qword_100557E50, sub_1002F7F50);
      v47 = type metadata accessor for Logger(0);
      sub_10000D78C(v47, (uint64_t)static Logger.lyrics);
      v48 = v132(v5, v46, v2);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v136 = v52;
        *(_DWORD *)v51 = 136446210;
        v53 = (char *)sub_100302694();
        *(_QWORD *)(v51 + 4) = sub_1002E9B3C(v53, v54, &v136);
        swift_bridgeObjectRelease();
        v27(v5, v2);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Loader supportsLyrics=false [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);
      }
      else
      {
        v27(v5, v2);
      }

      v106 = 0;
      return v106 & 1;
    }
  }
  v29 = v133;
  v30 = *BagProvider.shared.unsafeMutableAddressor();
  swift_retain(v30);
  v31 = (void *)BagProvider.bag.getter();
  swift_release(v30);
  if (!v31)
  {
    if (qword_100557E50 != -1)
      swift_once(&qword_100557E50, sub_1002F7F50);
    v33 = type metadata accessor for Logger(0);
    sub_10000D78C(v33, (uint64_t)static Logger.lyrics);
    v34 = v132;
    v132(v14, v29, v2);
    v35 = v34(v12, v29, v2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v136 = v39;
      *(_DWORD *)v38 = 136446466;
      v40 = Song.hasCustomLyrics.getter(v39);
      v41 = (v40 & 1) == 0;
      if ((v40 & 1) != 0)
        v42 = 1702195828;
      else
        v42 = 0x65736C6166;
      if (v41)
        v43 = (char *)0xE500000000000000;
      else
        v43 = (char *)0xE400000000000000;
      *(_QWORD *)(v38 + 4) = sub_1002E9B3C((char *)v42, v43, &v136);
      swift_bridgeObjectRelease();
      v27(v14, v2);
      *(_WORD *)(v38 + 12) = 2082;
      v44 = (char *)sub_100302694();
      *(_QWORD *)(v38 + 14) = sub_1002E9B3C(v44, v45, &v136);
      swift_bridgeObjectRelease();
      v27(v12, v2);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Loader supportsLyrics=%{public}s [bag is nil] %{public}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      v27(v14, v2);
      v27(v12, v2);
    }

LABEL_34:
    v71 = v130;
    v72 = v129;
    v73 = Song.hasLyrics.getter(v32);
    v74 = v131;
    if ((v73 & 1) != 0
      && (static ApplicationCapabilities.shared.getter((uint64_t)v135),
          v75 = v135[3],
          swift_bridgeObjectRetain(),
          sub_10015CA48(v135),
          v76 = sub_1003027C0(2u, v75),
          swift_bridgeObjectRelease(),
          (v76 & 1) != 0))
    {
      static ApplicationCapabilities.shared.getter((uint64_t)&v136);
      sub_10015CA48(&v136);
      if ((v137 & 1) != 0)
      {
        v106 = 1;
        return v106 & 1;
      }
      if (qword_100557E50 != -1)
        swift_once(&qword_100557E50, sub_1002F7F50);
      v77 = type metadata accessor for Logger(0);
      sub_10000D78C(v77, (uint64_t)static Logger.lyrics);
      v78 = v125;
      v79 = v132;
      v132(v125, v29, v2);
      v71 = v126;
      v80 = v79(v126, v29, v2);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = swift_slowAlloc(18, -1);
        v84 = swift_slowAlloc(32, -1);
        v134 = v84;
        *(_DWORD *)v83 = 67240450;
        v85 = Song.hasCustomLyrics.getter(v84) & 1;
        v27(v78, v2);
        *(_DWORD *)(v83 + 4) = v85;
        *(_WORD *)(v83 + 8) = 2082;
        v86 = (char *)sub_100302694();
        *(_QWORD *)(v83 + 10) = sub_1002E9B3C(v86, v87, &v134);
        swift_bridgeObjectRelease();
        v27(v71, v2);
        v88 = "Loader supportsLyrics=%{BOOL,public}d [not supported by subscription] subscriptionCapabilities.contains(.c"
              "atalogLyricsViewing)=false %{public}s";
        v89 = v81;
        v90 = v82;
        v91 = (uint8_t *)v83;
        v92 = 18;
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, v89, v90, v88, v91, v92);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v83, -1, -1);
LABEL_48:

        v106 = Song.hasCustomLyrics.getter(v105);
        return v106 & 1;
      }
      v104 = v78;
    }
    else
    {
      if (qword_100557E50 != -1)
        swift_once(&qword_100557E50, sub_1002F7F50);
      v93 = type metadata accessor for Logger(0);
      sub_10000D78C(v93, (uint64_t)static Logger.lyrics);
      v94 = (void (*)(char *, uint64_t, uint64_t))v132;
      v132(v74, v29, v2);
      v94(v72, v29, v2);
      v95 = ((uint64_t (*)(char *, uint64_t, uint64_t))v94)(v71, v29, v2);
      v81 = Logger.logObject.getter(v95);
      v96 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, v96))
      {
        v97 = v74;
        v83 = swift_slowAlloc(30, -1);
        v84 = swift_slowAlloc(32, -1);
        v134 = v84;
        *(_DWORD *)v83 = 67240962;
        v98 = Song.hasCustomLyrics.getter(v84) & 1;
        v99 = ((uint64_t (*)(char *, uint64_t))v27)(v97, v2);
        *(_DWORD *)(v83 + 4) = v98;
        *(_WORD *)(v83 + 8) = 1026;
        v100 = Song.hasLyrics.getter(v99) & 1;
        v27(v72, v2);
        *(_DWORD *)(v83 + 10) = v100;
        *(_WORD *)(v83 + 14) = 1026;
        static ApplicationCapabilities.shared.getter((uint64_t)&v136);
        v101 = v138;
        swift_bridgeObjectRetain();
        sub_10015CA48(&v136);
        LOBYTE(v97) = sub_1003027C0(2u, v101);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v83 + 16) = v97 & 1;
        *(_WORD *)(v83 + 20) = 2082;
        v102 = (char *)sub_100302694();
        *(_QWORD *)(v83 + 22) = sub_1002E9B3C(v102, v103, &v134);
        swift_bridgeObjectRelease();
        v27(v71, v2);
        v88 = "Loader supportsLyrics=%{BOOL,public}d [can't support store lyrics] song.hasLyrics=%{BOOL,public}d allowsSu"
              "bscriptionContent=%{BOOL,public}d %{public}s";
        v89 = v81;
        v90 = v96;
        v91 = (uint8_t *)v83;
        v92 = 30;
        goto LABEL_45;
      }
      v27(v72, v2);
      v104 = v74;
    }
    v27(v104, v2);
    v27(v71, v2);
    goto LABEL_48;
  }
  if ((objc_msgSend((id)objc_opt_self(MPStoreLyricsRequest), "supportsLyricsForURLBag:", v31) & 1) != 0)
  {

    goto LABEL_34;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMusicSubscription);
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v31, "dictionaryForBagKey:", v55);

  if (v56)
  {

    if (qword_100557E50 != -1)
      swift_once(&qword_100557E50, sub_1002F7F50);
    v57 = type metadata accessor for Logger(0);
    sub_10000D78C(v57, (uint64_t)static Logger.lyrics);
    v58 = v132;
    v132(v20, v29, v2);
    v59 = v128;
    v60 = v58(v128, v29, v2);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(64, -1);
      v136 = v64;
      *(_DWORD *)v63 = 136446466;
      v65 = Song.hasCustomLyrics.getter(v64);
      v66 = (v65 & 1) == 0;
      if ((v65 & 1) != 0)
        v67 = 1702195828;
      else
        v67 = 0x65736C6166;
      if (v66)
        v68 = (char *)0xE500000000000000;
      else
        v68 = (char *)0xE400000000000000;
      *(_QWORD *)(v63 + 4) = sub_1002E9B3C((char *)v67, v68, &v136);
      swift_bridgeObjectRelease();
      v27(v20, v2);
      *(_WORD *)(v63 + 12) = 2082;
      v69 = (char *)sub_100302694();
      *(_QWORD *)(v63 + 14) = sub_1002E9B3C(v69, v70, &v136);
      swift_bridgeObjectRelease();
      v27(v59, v2);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Loader supportsLyrics=%{public}s [no lyrics keys in bag] %{public}s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {
      v27(v20, v2);
      v27(v59, v2);
    }

  }
  else
  {
    if (qword_100557E50 != -1)
      swift_once(&qword_100557E50, sub_1002F7F50);
    v107 = type metadata accessor for Logger(0);
    sub_10000D78C(v107, (uint64_t)static Logger.lyrics);
    v108 = v132;
    v132(v17, v29, v2);
    v109 = v127;
    v110 = v108(v127, v29, v2);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v111, v112))
    {
      v113 = swift_slowAlloc(22, -1);
      v114 = swift_slowAlloc(64, -1);
      v136 = v114;
      *(_DWORD *)v113 = 136446466;
      v115 = Song.hasCustomLyrics.getter(v114);
      v116 = (v115 & 1) == 0;
      if ((v115 & 1) != 0)
        v117 = 1702195828;
      else
        v117 = 0x65736C6166;
      if (v116)
        v118 = (char *)0xE500000000000000;
      else
        v118 = (char *)0xE400000000000000;
      *(_QWORD *)(v113 + 4) = sub_1002E9B3C((char *)v117, v118, &v136);
      swift_bridgeObjectRelease();
      v27(v17, v2);
      *(_WORD *)(v113 + 12) = 2082;
      v119 = v127;
      v120 = (char *)sub_100302694();
      *(_QWORD *)(v113 + 14) = sub_1002E9B3C(v120, v121, &v136);
      swift_bridgeObjectRelease();
      v27(v119, v2);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Loader supportsLyrics=%{public}s [no musicSubscription key in bag] %{public}s", (uint8_t *)v113, 0x16u);
      swift_arrayDestroy(v114, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v113, -1, -1);
    }
    else
    {
      v27(v17, v2);
      v27(v109, v2);
    }

  }
  v106 = Song.hasCustomLyrics.getter(v122);

  return v106 & 1;
}

uint64_t sub_100302694()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[2];
  uint64_t v13;
  unint64_t v14;

  _StringGuts.grow(_:)(42);
  v0 = swift_bridgeObjectRelease();
  v13 = 0x7469742E676E6F73;
  v14 = 0xEB000000003D656CLL;
  v1._countAndFlagsBits = Song.title.getter(v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x64692E676E6F7320;
  v2._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v2);
  v3 = Song.id.getter();
  v5._countAndFlagsBits = MusicItemID.description.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x8000000100451D40;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v12[0] = Song.catalogID.getter(v7);
  v12[1] = v8;
  v9 = sub_10000B4C8((uint64_t *)&unk_100559660);
  v10._countAndFlagsBits = String.init<A>(describing:)(v12, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1003027C0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = ApplicationCapabilities.Service.rawValue.getter(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_100302B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Playlist.Collaborator(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_10001254C((unint64_t *)&unk_10055DA90, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_10001254C(&qword_100559500, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Collaborator, (uint64_t)&protocol conformance descriptor for Playlist.Collaborator);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

