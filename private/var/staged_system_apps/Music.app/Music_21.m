uint64_t *AccessibilityIdentifier.privacyWelcomeDescription.unsafeMutableAddressor()
{
  if (qword_1011D23A8 != -1)
    swift_once(&qword_1011D23A8, sub_100B5B448);
  return &static AccessibilityIdentifier.privacyWelcomeDescription;
}

uint64_t static AccessibilityIdentifier.privacyWelcomeDescription.getter()
{
  return sub_100B5B898(&qword_1011D23A8, &static AccessibilityIdentifier.privacyWelcomeDescription, (uint64_t)algn_10124ECC8, (uint64_t)sub_100B5B448);
}

void sub_100B5B55C()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1011D1F50 != -1)
    swift_once(&qword_1011D1F50, sub_100B51BB0);
  v2 = qword_1011DBBC8;
  v3 = unk_1011DBBD0;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x6569566D75626C41;
  v1._object = (void *)0xE900000000000077;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  static AccessibilityIdentifier.albumView = v2;
  *(_QWORD *)algn_10124ECD8 = v3;
}

uint64_t *AccessibilityIdentifier.albumView.unsafeMutableAddressor()
{
  if (qword_1011D23B0 != -1)
    swift_once(&qword_1011D23B0, sub_100B5B55C);
  return &static AccessibilityIdentifier.albumView;
}

uint64_t static AccessibilityIdentifier.albumView.getter()
{
  return sub_100B5B898(&qword_1011D23B0, &static AccessibilityIdentifier.albumView, (uint64_t)algn_10124ECD8, (uint64_t)sub_100B5B55C);
}

void sub_100B5B670()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1011D1F50 != -1)
    swift_once(&qword_1011D1F50, sub_100B51BB0);
  v2 = qword_1011DBBC8;
  v3 = unk_1011DBBD0;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x7473696C79616C50;
  v1._object = (void *)0xEC00000077656956;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  static AccessibilityIdentifier.playlistView = v2;
  *(_QWORD *)algn_10124ECE8 = v3;
}

uint64_t *AccessibilityIdentifier.playlistView.unsafeMutableAddressor()
{
  if (qword_1011D23B8 != -1)
    swift_once(&qword_1011D23B8, sub_100B5B670);
  return &static AccessibilityIdentifier.playlistView;
}

uint64_t static AccessibilityIdentifier.playlistView.getter()
{
  return sub_100B5B898(&qword_1011D23B8, &static AccessibilityIdentifier.playlistView, (uint64_t)algn_10124ECE8, (uint64_t)sub_100B5B670);
}

void sub_100B5B788()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1011D1F50 != -1)
    swift_once(&qword_1011D1F50, sub_100B51BB0);
  v2 = qword_1011DBBC8;
  v3 = unk_1011DBBD0;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x77656956676E6F53;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  static AccessibilityIdentifier.songView = v2;
  *(_QWORD *)algn_10124ECF8 = v3;
}

uint64_t *AccessibilityIdentifier.songView.unsafeMutableAddressor()
{
  if (qword_1011D23C0 != -1)
    swift_once(&qword_1011D23C0, sub_100B5B788);
  return &static AccessibilityIdentifier.songView;
}

uint64_t static AccessibilityIdentifier.songView.getter()
{
  return sub_100B5B898(&qword_1011D23C0, &static AccessibilityIdentifier.songView, (uint64_t)algn_10124ECF8, (uint64_t)sub_100B5B788);
}

uint64_t sub_100B5B898(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once(a1, a4);
  v5 = *a2;
  swift_bridgeObjectRetain();
  return v5;
}

_QWORD *sub_100B5B8E8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

id UIView.withAccessibilityIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  id v5;

  swift_bridgeObjectRetain();
  UIAccessibilityIdentification.musicAccessibilityIdentifier.setter(a1, a2);
  return v5;
}

void UIAccessibilityIdentification.musicAccessibilityIdentifier.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v2, "setAccessibilityIdentifier:", v4);

}

uint64_t UIAccessibilityIdentification.musicAccessibilityIdentifier.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "accessibilityIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void (*UIAccessibilityIdentification.musicAccessibilityIdentifier.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;

  a1[2] = a2;
  a1[3] = v2;
  *a1 = UIAccessibilityIdentification.musicAccessibilityIdentifier.getter();
  a1[1] = v4;
  return sub_100B5BA2C;
}

void sub_100B5BA2C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    UIAccessibilityIdentification.musicAccessibilityIdentifier.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    UIAccessibilityIdentification.musicAccessibilityIdentifier.setter(*a1, v2);
  }
}

uint64_t View.textSuffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, __n128 a8@<Q0>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t TupleTypeMetadata2;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v40[2];
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v40[0] = a4;
  v44 = a7;
  v13 = type metadata accessor for Text.Suffix(0, a8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a5;
  v54 = a6;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v53, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 0);
  v18 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v42 = OpaqueTypeMetadata2;
  v43 = v18;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v41 = (char *)v40 - v19;
  v20 = a3 & 1;
  v21 = a1;
  v22 = a1;
  v23 = a2;
  v24 = a2;
  v25 = v40[0];
  static Text.Suffix.alwaysVisible(_:)(v21, v23, v20, v40[0]);
  v26 = a6;
  v27 = a6;
  v28 = v40[1];
  View.textSuffix(_:)(v16, a5, v27);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v46 = a5;
  v47 = v26;
  v48 = v28;
  v49 = v22;
  v50 = v24;
  v51 = v20;
  v52 = v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a5, &type metadata for Text, 0, 0);
  v30 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v30);
  v32 = type metadata accessor for HStack(255, v30, WitnessTable);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v32);
  v53 = v32;
  v54 = v33;
  v34 = swift_getOpaqueTypeMetadata2(0, &v53, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
  v53 = a5;
  v54 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 1);
  v53 = v32;
  v54 = v33;
  v36 = swift_getOpaqueTypeConformance2(&v53, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v38 = v41;
  v37 = v42;
  View.accessibilityRepresentation<A>(representation:)(sub_100B5BF60, v45, v42, v34, OpaqueTypeConformance2, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v38, v37);
}

uint64_t sub_100B5BCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v37 = a7;
  v32 = a6;
  v39 = a5;
  v38 = a4;
  v35 = a2;
  v36 = a3;
  v34 = a1;
  v42 = a8;
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a6, &type metadata for Text, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for HStack(0, v13, WitnessTable);
  v33 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - v16;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v15);
  v51 = v15;
  v52 = v18;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v51, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
  v20 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v31 - v24;
  v44 = v32;
  v45 = v37;
  v46 = v34;
  v47 = v35;
  v48 = v36;
  v49 = v38 & 1;
  v50 = v39;
  v27 = static VerticalAlignment.center.getter(v26);
  v28 = HStack.init(alignment:spacing:content:)(v27, 0, 1, sub_100B5CFC4, v43, v13, WitnessTable);
  static AccessibilityChildBehavior.combine.getter(v28);
  View.accessibilityElement(children:)(v11, v15, v18);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v15);
  v51 = v15;
  v52 = v18;
  swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  sub_10081EB14((uint64_t)v22, OpaqueTypeMetadata2, (uint64_t)v25);
  v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v22, OpaqueTypeMetadata2);
  sub_1000EA744((uint64_t)v25, OpaqueTypeMetadata2, v42);
  return ((uint64_t (*)(char *, uint64_t))v29)(v25, OpaqueTypeMetadata2);
}

uint64_t sub_100B5BF60()
{
  return sub_100B5CFD0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100B5BCC8);
}

uint64_t sub_100B5BF6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(char *, uint64_t, __n128);
  uint64_t v23;
  __n128 v24;
  _QWORD v26[2];
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32[2];

  v13 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)v26 - v17;
  sub_10081EB14(v19, v20, (uint64_t)v26 - v17);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, a6);
  v28 = a2;
  v29 = a3;
  a4 &= 1u;
  v30 = a4;
  v31 = a5;
  v32[0] = (uint64_t)v15;
  v32[1] = (uint64_t)&v28;
  sub_100055BBC(a2, a3, a4);
  swift_bridgeObjectRetain();
  sub_100055BBC(a2, a3, a4);
  swift_bridgeObjectRetain();
  v27[0] = a6;
  v27[1] = &type metadata for Text;
  v26[0] = a7;
  v26[1] = &protocol witness table for Text;
  sub_1004D49B8(v32, 2uLL, (uint64_t)v27);
  sub_100055BAC(a2, a3, a4);
  v21 = swift_bridgeObjectRelease(a5);
  v22 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
  v22(v18, a6, v21);
  v23 = v31;
  sub_100055BAC(v28, v29, v30);
  v24 = swift_bridgeObjectRelease(v23);
  return ((uint64_t (*)(char *, uint64_t, __n128))v22)(v15, a6, v24);
}

uint64_t AccessibilityString.init(_:tableName:bundle:comment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];

  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for String.LocalizationValue(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  static Locale.current.getter(v15);
  v16 = String.init(localized:table:bundle:locale:comment:)(v14, a2, a3, a4, v10, 0, 0, 256);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v16;
}

double View.accessibilityLabel(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B5C230(a1, a2, a3, a4, (void (*)(_QWORD *, uint64_t, _QWORD *, uint64_t, unint64_t))&View.accessibilityLabel<A>(_:));
}

double View.accessibilityHint(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B5C230(a1, a2, a3, a4, (void (*)(_QWORD *, uint64_t, _QWORD *, uint64_t, unint64_t))&View.accessibilityHint<A>(_:));
}

double View.accessibilityValue(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100B5C230(a1, a2, a3, a4, (void (*)(_QWORD *, uint64_t, _QWORD *, uint64_t, unint64_t))&View.accessibilityValue<A>(_:));
}

double sub_100B5C230(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t, _QWORD *, uint64_t, unint64_t))
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double result;
  _QWORD v12[2];

  if (a2)
    v8 = a1;
  else
    v8 = 0;
  if (a2)
    v9 = a2;
  else
    v9 = 0xE000000000000000;
  v12[0] = v8;
  v12[1] = v9;
  v10 = sub_10098A8C0();
  swift_bridgeObjectRetain();
  a5(v12, a3, &type metadata for String, a4, v10);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

uint64_t Text.accessibilityLabel(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  if (a2)
    v10 = a1;
  else
    v10 = 0;
  if (a2)
    v11 = a2;
  else
    v11 = 0xE000000000000000;
  v15[0] = v10;
  v15[1] = v11;
  v12 = sub_10098A8C0();
  swift_bridgeObjectRetain();
  v13 = Text.accessibilityLabel<A>(_:)(v15, a3, a4, a5 & 1, a6, &type metadata for String, v12);
  swift_bridgeObjectRelease(v11);
  return v13;
}

char *static Text.compact(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)_swiftEmptyArrayStorage;
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    v5 = *v2;
    if (*v2)
    {
      v17[0] = *(v2 - 1);
      v17[1] = v5;
      v6 = sub_10098A8C0();
      swift_bridgeObjectRetain();
      v7 = Text.init<A>(_:)(v17, &type metadata for String, v6);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_1009BA82C(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v15 = *((_QWORD *)v3 + 2);
      v14 = *((_QWORD *)v3 + 3);
      if (v15 >= v14 >> 1)
        v3 = sub_1009BA82C((char *)(v14 > 1), v15 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v15 + 1;
      v4 = &v3[32 * v15];
      *((_QWORD *)v4 + 4) = v7;
      *((_QWORD *)v4 + 5) = v9;
      v4[48] = v11 & 1;
      *((_QWORD *)v4 + 7) = v13;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void TabIdentifier.accessibilityIdentifier.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100B5C4F0()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;
  uint64_t v4;

  if (qword_1011D1F50 != -1)
    swift_once(&qword_1011D1F50, sub_100B51BB0);
  v3 = qword_1011DBBC8;
  v4 = unk_1011DBBD0;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 0x6C2E726142626174;
  v1._object = (void *)0xEE00797261726269;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(v4);
  return v3;
}

char *sub_100B5C8A8(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  _QWORD v52[4];

  v52[3] = a4;
  if (a1 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v11 = a5;
  v14 = swift_allocObject(&unk_1010FD9A8, 24, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyArrayStorage;
  v49 = swift_allocObject(&unk_1010FD9D0, 24, 7);
  *(_QWORD *)(v49 + 16) = 15;
  v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(a6) & 0xF) : (v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_100B5CCC0(v33 | (v15 << 16), v49, a2 & 1, v14, v11, a6);
    swift_bridgeObjectRelease(a6);
    v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release(v14);
    v34 = v49;
    goto LABEL_40;
  }
  v44 = a1;
  v45 = v14;
  v17 = 7;
  if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
    v17 = 11;
  v43 = v17 | (v16 << 16);
  v50 = 4 * v16;
  v10 = (char *)_swiftEmptyArrayStorage;
  v9 = 15;
  v8 = 15;
  v18 = 15;
  while (1)
  {
    v19 = String.subscript.getter(v9, v11, a6);
    v21 = v20;
    v52[0] = v19;
    v52[1] = v20;
    v22 = a3(v52);
    if (v7)
    {
      swift_release(v45);
      swift_release(v49);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(a6);
      return v10;
    }
    v6 = v22;
    swift_bridgeObjectRelease(v21);
    if ((v6 & 1) != 0)
      break;
    v9 = String.index(after:)(v9, v11, a6);
LABEL_11:
    if (v50 == v9 >> 14)
      goto LABEL_31;
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    v9 = String.index(after:)(v9, v11, a6);
    *(_QWORD *)(v49 + 16) = v9;
    v8 = v9;
    v18 = v9;
    goto LABEL_11;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_43;
  }
  v23 = String.subscript.getter(v8, v9, v11, a6);
  v46 = v24;
  v47 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    v10 = sub_1009B9848(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v30 = *((_QWORD *)v10 + 2);
  v29 = *((_QWORD *)v10 + 3);
  v6 = v30 + 1;
  if (v30 >= v29 >> 1)
    v10 = sub_1009B9848((char *)(v29 > 1), v30 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v6;
  v31 = &v10[32 * v30];
  *((_QWORD *)v31 + 4) = v47;
  *((_QWORD *)v31 + 5) = v26;
  *((_QWORD *)v31 + 6) = v28;
  *((_QWORD *)v31 + 7) = v46;
  *(_QWORD *)(v45 + 16) = v10;
  v32 = String.index(after:)(v9, v11, a6);
  v9 = v32;
  *(_QWORD *)(v49 + 16) = v32;
  if (*((_QWORD *)v10 + 2) != v44)
  {
    v8 = v32;
    v18 = v32;
    goto LABEL_11;
  }
  v18 = v32;
  v8 = v32;
LABEL_31:
  if (v50 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v45;
    goto LABEL_39;
  }
  if (v50 >= v18 >> 14)
  {
    v6 = String.subscript.getter(v18, v43, v11, a6);
    v8 = v36;
    v9 = v37;
    v11 = v38;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      goto LABEL_45;
    goto LABEL_36;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  v10 = sub_1009B9848(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
LABEL_36:
  v40 = *((_QWORD *)v10 + 2);
  v39 = *((_QWORD *)v10 + 3);
  if (v40 >= v39 >> 1)
    v10 = sub_1009B9848((char *)(v39 > 1), v40 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v40 + 1;
  v41 = &v10[32 * v40];
  *((_QWORD *)v41 + 4) = v6;
  *((_QWORD *)v41 + 5) = v8;
  *((_QWORD *)v41 + 6) = v9;
  *((_QWORD *)v41 + 7) = v11;
  v35 = v45;
  *(_QWORD *)(v45 + 16) = v10;
LABEL_39:
  swift_bridgeObjectRetain();
  swift_release(v35);
  v34 = v49;
LABEL_40:
  swift_release(v34);
  return v10;
}

uint64_t sub_100B5CCC0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v13 = *(_QWORD *)(a2 + 16);
  v14 = (v13 >> 14 == a1 >> 14) & a3;
  if (v14 == 1)
    return v14 ^ 1u;
  if (a1 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = a4;
  v7 = String.subscript.getter(v13, a1, a5, a6);
  v8 = v15;
  v9 = v16;
  v10 = v17;
  v11 = *(char **)(v6 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)(v6 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    v11 = sub_1009B9848(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    *(_QWORD *)(v6 + 16) = v11;
  }
  v20 = *((_QWORD *)v11 + 2);
  v19 = *((_QWORD *)v11 + 3);
  if (v20 >= v19 >> 1)
  {
    v11 = sub_1009B9848((char *)(v19 > 1), v20 + 1, 1, v11);
    *(_QWORD *)(v6 + 16) = v11;
  }
  *((_QWORD *)v11 + 2) = v20 + 1;
  v21 = &v11[32 * v20];
  *((_QWORD *)v21 + 4) = v7;
  *((_QWORD *)v21 + 5) = v8;
  *((_QWORD *)v21 + 6) = v9;
  *((_QWORD *)v21 + 7) = v10;
  return v14 ^ 1u;
}

ValueMetadata *type metadata accessor for AccessibilityIdentifier()
{
  return &type metadata for AccessibilityIdentifier;
}

ValueMetadata *type metadata accessor for AccessibilityString()
{
  return &type metadata for AccessibilityString;
}

uint64_t sub_100B5CDF0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_100B5CE4C();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_100B5CE4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011D55E0;
  if (!qword_1011D55E0)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_1011D55E0);
  }
  return result;
}

uint64_t sub_100B5CE94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeMetadata2;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[1];
  v13 = *a1;
  v1 = v13;
  v14 = v2;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v13, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, &type metadata for Text, 0, 0);
  v5 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v5);
  v7 = type metadata accessor for HStack(255, v5, WitnessTable);
  v8 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v7);
  v13 = v7;
  v14 = v8;
  v9 = swift_getOpaqueTypeMetadata2(255, &v13, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
  v13 = v1;
  v14 = v2;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 1);
  v13 = v7;
  v14 = v8;
  v11 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v13 = OpaqueTypeMetadata2;
  v14 = v9;
  v15 = OpaqueTypeConformance2;
  v16 = v11;
  return swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.accessibilityRepresentation<A>(representation:)>>, 1);
}

uint64_t sub_100B5CFC4()
{
  return sub_100B5CFD0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100B5BF6C);
}

uint64_t sub_100B5CFD0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100B5CFF4(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

uint64_t sub_100B5D048()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B5D06C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t static AppReview.requestReview(in:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1011DBC00 + dword_1011DBC00);
  v3 = (_QWORD *)swift_task_alloc(unk_1011DBC04);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10006AEE4;
  return v5(a1);
}

double static AppReview.recordAppOpened()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  double result;
  _QWORD v20[4];

  v0 = sub_100007E8C((uint64_t *)&unk_1011D8CF0);
  __chkstk_darwin(v0);
  v2 = (char *)v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject(&unk_1010FDA20, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (uint64_t *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10004FF60((uint64_t)v2, (uint64_t *)&unk_1011D8CF0);
    v8 = 0;
    v9 = 0;
    v10 = 7168;
  }
  else
  {
    v11 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v10 = v11 | 0x1C00;
    v12 = *v6;
    if (*v6)
    {
      v13 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v12, v15);
      v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v9 = v16;
      swift_unknownObjectRelease(v12);
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  v17 = swift_allocObject(&unk_1010FDA48, 32, 7);
  *(_QWORD *)(v17 + 16) = &unk_1011DBC10;
  *(_QWORD *)(v17 + 24) = v5;
  if (v9 | v8)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v8;
    v20[3] = v9;
  }
  else
  {
    v18 = 0;
  }
  swift_task_create(v10, v18, (char *)&type metadata for () + 8, &unk_1011D6BB0, v17);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100B5D2A8()
{
  return swift_task_switch(sub_100B5D2BC, 0, 0);
}

uint64_t sub_100B5D2BC()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1011D23C8 != -1)
    swift_once(&qword_1011D23C8, sub_100B5D5C4);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to StoreReviewGatingController.didEnterForeground()[1]);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10006AEE4;
  return StoreReviewGatingController.didEnterForeground()();
}

unint64_t sub_100B5D334()
{
  return 0xD000000000000010;
}

uint64_t sub_100B5D350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B5E638(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100B5D378(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B5E480();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B5D3A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B5E480();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B5D3C8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100007E8C(&qword_1011DBC30);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007E68(a1, v9);
  v11 = sub_100B5E480();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppReview.UsageRequirements.CodingKeys, &type metadata for AppReview.UsageRequirements.CodingKeys, v11, v9, v10);
  if (v2)
    return _s5Music18DragDropToPlaylistV6OriginVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s5Music18DragDropToPlaylistV6OriginVwxx_0(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_100B5D4DC(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100007E8C(&qword_1011DBC40);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_100007E68(a1, v8);
  v10 = sub_100B5E480();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppReview.UsageRequirements.CodingKeys, &type metadata for AppReview.UsageRequirements.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100B5D5C4()
{
  id v0;
  void *v1;
  id v2;
  uint64_t result;
  id v4;
  id v5;
  _QWORD v6[6];

  v0 = objc_allocWithZone((Class)ICStoreRequestContext);
  v6[4] = sub_100A6D960;
  v6[5] = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10004BF88;
  v6[3] = &unk_1010FDA80;
  v1 = _Block_copy(v6);
  v2 = objc_msgSend(v0, "initWithBlock:", v1);
  _Block_release(v1);
  swift_release();
  result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1);
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)ICAMSBagAdapter), "initWithRequestContext:", v2);

    v5 = objc_allocWithZone((Class)type metadata accessor for StoreReviewGatingController(0));
    result = StoreReviewGatingController.init(bag:)(v4);
    qword_1011DBBD8 = result;
  }
  return result;
}

uint64_t sub_100B5D6D0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, qword_1011DBBE0);
  sub_100048B14(v0, (uint64_t)qword_1011DBBE0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0x6569766552707041, 0xE900000000000077);
}

void _s9MusicCore9AppReviewO16recordSongPlayedyyFZ_0()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  _QWORD v6[6];

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = sub_100B5E32C();
  v3 = sub_100B5E370();
  NSUserDefaults.decodeValue<A>(_:forKey:)((uint64_t)&type metadata for AppReview.UsageRequirements, v2, v6);

  v4 = objc_msgSend(v0, "standardUserDefaults");
  NSUserDefaults.decodeValue<A>(_:forKey:)((uint64_t)&type metadata for AppReview.UsageRequirements, v2, v6);

  if (LOBYTE(v6[0]) == 2 || (v6[0] & 1) == 0)
  {
    v5 = objc_msgSend(v0, "standardUserDefaults");
    v6[3] = &type metadata for AppReview.UsageRequirements;
    v6[4] = v2;
    v6[5] = v3;
    LOBYTE(v6[0]) = 1;
    NSUserDefaults.encodeValue(_:forKey:)(v6);

    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v6);
  }
}

uint64_t sub_100B5D890(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[26] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[27] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[28] = v4;
  v1[29] = v5;
  return swift_task_switch(sub_100B5D8FC, v4, v5);
}

void sub_100B5D8FC()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;

  sub_100B5E2DC(*(_QWORD *)(v0 + 208), v0 + 136);
  if (*(_QWORD *)(v0 + 192) == 1)
  {
    swift_release();
    sub_10004FF60(v0 + 136, &qword_1011D2F20);
  }
  else
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 136);
    if (Strong)
    {
      v2 = Strong;
      v3 = objc_msgSend(Strong, "view");

      if (!v3)
      {
        __break(1u);
        JUMPOUT(0x100B5DF3CLL);
      }
      v4 = objc_msgSend(v3, "window");

      v5 = objc_msgSend(v4, "windowScene");
      *(_QWORD *)(v0 + 240) = v5;

      sub_100064B4C(v0 + 136);
      if (v5)
      {
        if (qword_1011D1C28 != -1)
          swift_once(&qword_1011D1C28, sub_100A2D554);
        v6 = static ApplicationCapabilities.Controller.shared;
        KeyPath = swift_getKeyPath(&unk_100EE55D8);
        v8 = swift_getKeyPath(&unk_100EE5600);
        static Published.subscript.getter((_QWORD *)(v0 + 16), v6, KeyPath, v8);
        swift_release();
        swift_release();
        v9 = *(void **)(v0 + 96);
        v10 = *(unsigned __int8 *)(v0 + 104);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        __asm { BR              X9 }
      }
    }
    else
    {
      sub_100064B4C(v0 + 136);
    }
    swift_release();
  }
  if (qword_1011D23D0 != -1)
    swift_once(&qword_1011D23D0, sub_100B5D6D0);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100048B14(v11, (uint64_t)qword_1011DBBE0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "🤩❌ No windowScene", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  __asm { BR              X0 }
}

uint64_t sub_100B5DF4C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_BYTE *)(*v1 + 265) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100B5DFA4, *(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 232));
}

uint64_t sub_100B5DFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint8_t *v14;

  if (*(_BYTE *)(v0 + 265) == 1)
  {
    static AppStore.requestReview(in:)(*(_QWORD *)(v0 + 240));
    if (qword_1011D23D0 != -1)
      swift_once(&qword_1011D23D0, sub_100B5D6D0);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100048B14(v1, (uint64_t)qword_1011DBBE0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "🤩 Requesting a review through StoreKit", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = (_QWORD *)swift_task_alloc(async function pointer to StoreReviewGatingController.didPrompt()[1]);
    *(_QWORD *)(v0 + 256) = v6;
    *v6 = v0;
    v6[1] = sub_100B5E190;
    return StoreReviewGatingController.didPrompt()();
  }
  else
  {
    swift_release();
    if (qword_1011D23D0 != -1)
      swift_once(&qword_1011D23D0, sub_100B5D6D0);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100048B14(v8, (uint64_t)qword_1011DBBE0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void **)(v0 + 240);
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "🤩❌ Review is being gated by AMS", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B5E190()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  return swift_task_switch(sub_100B5E1DC, *(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232));
}

uint64_t sub_100B5E1DC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 216));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B5E214()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B5E238()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1011DBC0C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10005AEE4;
  return swift_task_switch(sub_100B5D2BC, 0, 0);
}

uint64_t sub_100B5E290()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

ValueMetadata *type metadata accessor for AppReview()
{
  return &type metadata for AppReview;
}

uint64_t sub_100B5E2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B5E2D4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100B5E2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011D2F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100B5E32C()
{
  unint64_t result;

  result = qword_1011DBC20;
  if (!qword_1011DBC20)
  {
    result = swift_getWitnessTable(&unk_100EE5684, &type metadata for AppReview.UsageRequirements);
    atomic_store(result, (unint64_t *)&qword_1011DBC20);
  }
  return result;
}

unint64_t sub_100B5E370()
{
  unint64_t result;

  result = qword_1011DBC28;
  if (!qword_1011DBC28)
  {
    result = swift_getWitnessTable(&unk_100EE565C, &type metadata for AppReview.UsageRequirements);
    atomic_store(result, (unint64_t *)&qword_1011DBC28);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppReview.UsageRequirements(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B5E400 + 4 * byte_100EE55B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B5E434 + 4 * asc_100EE55B0[v4]))();
}

uint64_t sub_100B5E434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5E43C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B5E444);
  return result;
}

uint64_t sub_100B5E450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B5E458);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B5E45C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5E464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppReview.UsageRequirements()
{
  return &type metadata for AppReview.UsageRequirements;
}

unint64_t sub_100B5E480()
{
  unint64_t result;

  result = qword_1011DBC38;
  if (!qword_1011DBC38)
  {
    result = swift_getWitnessTable(&unk_100EE5770, &type metadata for AppReview.UsageRequirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011DBC38);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AppReview.UsageRequirements.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B5E504 + 4 * byte_100EE55BA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B5E524 + 4 * byte_100EE55BF[v4]))();
}

_BYTE *sub_100B5E504(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B5E524(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B5E52C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B5E534(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B5E53C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B5E544(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppReview.UsageRequirements.CodingKeys()
{
  return &type metadata for AppReview.UsageRequirements.CodingKeys;
}

unint64_t sub_100B5E564()
{
  unint64_t result;

  result = qword_1011DBC48;
  if (!qword_1011DBC48)
  {
    result = swift_getWitnessTable(&unk_100EE5748, &type metadata for AppReview.UsageRequirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011DBC48);
  }
  return result;
}

unint64_t sub_100B5E5AC()
{
  unint64_t result;

  result = qword_1011DBC50;
  if (!qword_1011DBC50)
  {
    result = swift_getWitnessTable(&unk_100EE56B8, &type metadata for AppReview.UsageRequirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011DBC50);
  }
  return result;
}

unint64_t sub_100B5E5F4()
{
  unint64_t result;

  result = qword_1011DBC58;
  if (!qword_1011DBC58)
  {
    result = swift_getWitnessTable(&unk_100EE56E0, &type metadata for AppReview.UsageRequirements.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011DBC58);
  }
  return result;
}

uint64_t sub_100B5E638(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000100E52F50)
  {
    swift_bridgeObjectRelease(0x8000000100E52F50);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100E52F50, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

void static ClassicalBridge.generatePrestoURL(forAlbum:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;

  v3 = Album.catalogID.getter(a1);
  if (v4)
  {
    static ClassicalBridge.generatePrestoURL(type:storeAdamID:)(1, v3, v4, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_1009D6F18();
    swift_allocError(&type metadata for ClassicalBridge.Error, v5, 0, 0);
    *(_QWORD *)v6 = 2;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 32) = 2;
    swift_willThrow(v7);
  }
}

uint64_t static ClassicalBridge.openPrestoOrStoreSheet(withURL:viewController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1011DBCA0 + dword_1011DBCA0);
  v5 = (_QWORD *)swift_task_alloc(unk_1011DBCA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10005AEE4;
  return v7(a1, a2);
}

uint64_t sub_100B5E7C8(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __n128 v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  __n128 v38;
  void *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;

  if (!*(_QWORD *)(a1 + 16))
  {
    v22 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v22, 0, 0);
    v23 = 0uLL;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_QWORD *)(v24 + 32) = 0;
    *(_BYTE *)(v24 + 40) = 2;
LABEL_15:
    swift_willThrow(v23);
    return v27 & 1;
  }
  v2 = v1;
  v46 = a1;
  v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  v4 = v3;
  sub_1009BB9A0(0, 1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v2, "valueForBagKey:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  if (!v8)
  {
    swift_bridgeObjectRelease(v46);
    v25 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v25, 0, 0);
    *(_QWORD *)v26 = v4;
    *(_BYTE *)(v26 + 40) = 0;
    goto LABEL_15;
  }
  _bridgeAnyObjectToAny(_:)(v44, v8);
  swift_unknownObjectRelease(v8);
  sub_100048ABC(v44, v45);
  sub_10004FA40((uint64_t)v45, (uint64_t)v44);
  v9 = v46;
  v10 = *(_QWORD *)(v46 + 16);
  if (v10)
  {
    v11 = v4;
    v12 = 0;
    v40 = v11;
    while (1)
    {
      v13 = *(void **)(v9 + 8 * v12 + 32);
      sub_10004FA40((uint64_t)v44, (uint64_t)&v42);
      v14 = v13;
      v15 = sub_100007E8C((uint64_t *)&unk_1011D8950);
      if (!swift_dynamicCast(&v41, &v42, (char *)&type metadata for Any + 8, v15, 6))
      {
        swift_bridgeObjectRelease(v9);
        v32 = sub_100A6D9C0();
        swift_allocError(&type metadata for ICURLBag.Error, v32, 0, 0);
        v34 = v33;
        *v33 = v14;
        sub_10004FA40((uint64_t)v44, (uint64_t)(v33 + 1));
        *((_BYTE *)v34 + 40) = 1;
        goto LABEL_22;
      }
      v16 = v41;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v19 = v18;
      if (*(_QWORD *)(v16 + 16) && (v20 = sub_10079C2C4(v17, v18), (v21 & 1) != 0))
      {
        sub_10004FA40(*(_QWORD *)(v16 + 56) + 32 * v20, (uint64_t)&v42);
      }
      else
      {
        v42 = 0u;
        v43 = 0u;
      }
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v16);
      if (!*((_QWORD *)&v43 + 1))
        break;
      ++v12;
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v44);

      sub_100048ABC(&v42, v44);
      v11 = v14;
      if (v10 == v12)
        goto LABEL_17;
    }
    swift_bridgeObjectRelease(v9);
    sub_10004FF60((uint64_t)&v42, &qword_1011D7160);
    v35 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v35, 0, 0);
    *(_QWORD *)v36 = v14;
    *(_BYTE *)(v36 + 40) = 0;
LABEL_22:
    v37 = v14;
    swift_willThrow(v38);

    goto LABEL_23;
  }
  v14 = v4;
LABEL_17:
  swift_bridgeObjectRelease(v9);
  sub_10004FA40((uint64_t)v44, (uint64_t)&v42);
  if (!swift_dynamicCast(&v41, &v42, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
  {
    v28 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v28, 0, 0);
    v30 = v29;
    *v29 = v14;
    sub_10004FA40((uint64_t)v44, (uint64_t)(v29 + 1));
    *((_BYTE *)v30 + 40) = 1;
    swift_willThrow(v31);

LABEL_23:
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v44);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v45);
    return v27 & 1;
  }

  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v44);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v45);
  v27 = v41 & 1;
  return v27 & 1;
}

uint64_t sub_100B5EB9C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __n128 v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  __n128 v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;

  if (!*(_QWORD *)(a1 + 16))
  {
    v22 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v22, 0, 0);
    v23 = 0uLL;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_QWORD *)(v24 + 32) = 0;
    *(_BYTE *)(v24 + 40) = 2;
    return swift_willThrow(v23);
  }
  v2 = v1;
  v45 = a1;
  v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  v4 = v3;
  sub_1009BB9A0(0, 1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v2, "valueForBagKey:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  if (!v8)
  {
    swift_bridgeObjectRelease(v45);
    v25 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v25, 0, 0);
    *(_QWORD *)v26 = v4;
    *(_BYTE *)(v26 + 40) = 0;
    return swift_willThrow(v23);
  }
  _bridgeAnyObjectToAny(_:)(v43, v8);
  swift_unknownObjectRelease(v8);
  sub_100048ABC(v43, v44);
  sub_10004FA40((uint64_t)v44, (uint64_t)v43);
  v9 = v45;
  v10 = *(_QWORD *)(v45 + 16);
  if (v10)
  {
    v11 = v4;
    v12 = 0;
    v39 = v11;
    while (1)
    {
      v13 = *(void **)(v9 + 8 * v12 + 32);
      sub_10004FA40((uint64_t)v43, (uint64_t)&v41);
      v14 = v13;
      v15 = sub_100007E8C((uint64_t *)&unk_1011D8950);
      if (!swift_dynamicCast(&v40, &v41, (char *)&type metadata for Any + 8, v15, 6))
      {
        swift_bridgeObjectRelease(v9);
        v32 = sub_100A6D9C0();
        swift_allocError(&type metadata for ICURLBag.Error, v32, 0, 0);
        v34 = v33;
        *v33 = v14;
        sub_10004FA40((uint64_t)v43, (uint64_t)(v33 + 1));
        *((_BYTE *)v34 + 40) = 1;
        goto LABEL_22;
      }
      v16 = v40;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v19 = v18;
      if (*(_QWORD *)(v16 + 16) && (v20 = sub_10079C2C4(v17, v18), (v21 & 1) != 0))
      {
        sub_10004FA40(*(_QWORD *)(v16 + 56) + 32 * v20, (uint64_t)&v41);
      }
      else
      {
        v41 = 0u;
        v42 = 0u;
      }
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v16);
      if (!*((_QWORD *)&v42 + 1))
        break;
      ++v12;
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v43);

      sub_100048ABC(&v41, v43);
      v11 = v14;
      if (v10 == v12)
        goto LABEL_17;
    }
    swift_bridgeObjectRelease(v9);
    sub_10004FF60((uint64_t)&v41, &qword_1011D7160);
    v35 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v35, 0, 0);
    *(_QWORD *)v36 = v14;
    *(_BYTE *)(v36 + 40) = 0;
LABEL_22:
    v37 = v14;
    swift_willThrow(v38);

  }
  else
  {
    v14 = v4;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    sub_10004FA40((uint64_t)v43, (uint64_t)&v41);
    if (swift_dynamicCast(&v40, &v41, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {

      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v43);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v44);
      return v40;
    }
    v28 = sub_100A6D9C0();
    swift_allocError(&type metadata for ICURLBag.Error, v28, 0, 0);
    v30 = v29;
    *v29 = v14;
    sub_10004FA40((uint64_t)v43, (uint64_t)(v29 + 1));
    *((_BYTE *)v30 + 40) = 1;
    swift_willThrow(v31);

  }
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v43);
  return _s5Music18DragDropToPlaylistV6OriginVwxx_0(v44);
}

uint64_t sub_100B5EF68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[15] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[16] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[17] = v4;
  v1[18] = v5;
  return swift_task_switch(sub_100B5EFD4, v4, v5);
}

uint64_t sub_100B5EFD4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  id v3;
  NSURL *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  __n128 v9;

  v1 = v0;
  v2 = v0 + 2;
  v3 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1[19] = v3;
  URL._bridgeToObjectiveC()(v4);
  v6 = v5;
  v1[20] = v5;
  sub_100A13584((uint64_t)_swiftEmptyArrayStorage);
  _s3__C25OpenExternalURLOptionsKeyVMa_0(0);
  sub_1009FF5A8();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v1[21] = isa;
  swift_bridgeObjectRelease();
  v1[7] = v1 + 22;
  v1[2] = v1;
  v1[3] = sub_100B5F104;
  v8 = swift_continuation_init(v2, 0);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000;
  v1[2] = sub_100795C0C;
  v1[3] = &unk_1010FDEE8;
  v1[4] = v8;
  objc_msgSend(v3, "openURL:options:completionHandler:", v6, isa, v1);
  return swift_continuation_await(v2, v9);
}

uint64_t sub_100B5F104()
{
  uint64_t v0;

  return swift_task_switch(sub_100B5F148, *(_QWORD *)(*(_QWORD *)v0 + 136), *(_QWORD *)(*(_QWORD *)v0 + 144));
}

uint64_t sub_100B5F148()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 160);
  v2 = *(void **)(v0 + 168);
  v3 = *(void **)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 128));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B5F198(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v2[15] = a1;
  v2[16] = a2;
  v3 = sub_100007E8C(&qword_1011D2AE0);
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[19] = v5;
  v2[20] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v2[21] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v2[22] = v8;
  v2[23] = v9;
  return swift_task_switch(sub_100B5F250, v8, v9);
}

uint64_t sub_100B5F250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  id v21;
  NSURL *v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  _QWORD *v27;
  __n128 v28;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(void **)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v5;
  v6._object = v3;
  String.append(_:)(v6);
  URL.init(string:)(0xD000000000000022, 0x8000000100E530D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 120);
    swift_release();
    sub_10004FF60(v9, &qword_1011D2AE0);
    v11 = sub_1009D6F18();
    swift_allocError(&type metadata for ClassicalBridge.Error, v11, 0, 0);
    *(_QWORD *)v12 = 0xD000000000000022;
    *(_QWORD *)(v12 + 8) = 0x8000000100E530D0;
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v8;
    *(_BYTE *)(v12 + 32) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow(v13);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = v0 + 16;
    v17 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 144);
    v20 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v17 + 32))(v16, v19, v18, v20);
    v21 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    *(_QWORD *)(v0 + 192) = v21;
    URL._bridgeToObjectiveC()(v22);
    v24 = v23;
    *(_QWORD *)(v0 + 200) = v23;
    sub_100A13584((uint64_t)_swiftEmptyArrayStorage);
    _s3__C25OpenExternalURLOptionsKeyVMa_0(0);
    sub_1009FF5A8();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 208) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v0 + 216;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100B5F4CC;
    v26 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v27 = (_QWORD *)(v0 + 80);
    v27[1] = 0x40000000;
    v27[2] = sub_100795C0C;
    v27[3] = &unk_1010FDF00;
    v27[4] = v26;
    objc_msgSend(v21, "openURL:options:completionHandler:", v24, isa, v27);
    return swift_continuation_await(v15, v28);
  }
}

uint64_t sub_100B5F4CC()
{
  uint64_t v0;

  return swift_task_switch(sub_100B5F510, *(_QWORD *)(*(_QWORD *)v0 + 176), *(_QWORD *)(*(_QWORD *)v0 + 184));
}

uint64_t sub_100B5F510()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v2 = *(void **)(v0 + 200);
  v1 = *(void **)(v0 + 208);
  v3 = *(void **)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = swift_release(*(_QWORD *)(v0 + 168));
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v4, v5, v8);

  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static ClassicalBridge.generatePrestoURL(type:storeAdamID:)(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91[56];
  char v92[56];
  unint64_t v93;

  v9 = sub_100007E8C(&qword_1011D2AE0);
  __chkstk_darwin(v9);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1011D1CF0 != -1)
    swift_once(&qword_1011D1CF0, sub_100A3CB80);
  sub_100007E8C(&qword_1011D6170);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10098A8A8);
  v12 = v87;
  if (!v87)
  {
    v23 = sub_1009D6F18();
    swift_allocError(&type metadata for ClassicalBridge.Error, v23, 0, 0);
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_BYTE *)(v24 + 32) = 2;
    swift_willThrow((__n128)0);
    return;
  }
  v80 = a1;
  v79 = a4;
  v81 = a2;
  v93 = a3;
  v13 = sub_100007E8C(&qword_1011D3DF0);
  inited = swift_initStackObject(v13, v92);
  v82 = xmmword_100EA7A80;
  *(_OWORD *)(inited + 16) = xmmword_100EA7A80;
  v15 = (void *)ICURLBagKeyMusicCommon;
  *(_QWORD *)(inited + 32) = ICURLBagKeyMusicCommon;
  v16 = inited + 32;
  v17 = qword_1011D23E0;
  v18 = v15;
  if (v17 != -1)
    swift_once(&qword_1011D23E0, sub_100B609D4);
  v19 = (void *)qword_1011DBC68;
  *(_QWORD *)(inited + 40) = qword_1011DBC68;
  v20 = v19;
  v21 = sub_100B5E7C8(inited);
  if (v4)
  {
    swift_setDeallocating(inited);
    v22 = *(_QWORD *)(inited + 16);
    type metadata accessor for ICURLBagKey(0);
    swift_arrayDestroy(inited + 32, v22, v58);
LABEL_22:

    return;
  }
  v25 = v21;
  swift_setDeallocating(inited);
  v26 = *(_QWORD *)(inited + 16);
  type metadata accessor for ICURLBagKey(0);
  v78 = v27;
  swift_arrayDestroy(v16, v26, v27);
  if ((v25 & 1) == 0)
  {
    v37 = sub_1009D6F18();
    swift_allocError(&type metadata for ClassicalBridge.Error, v37, 0, 0);
    *(_QWORD *)v39 = 1;
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)(v39 + 24) = 0;
    *(_BYTE *)(v39 + 32) = 2;
LABEL_16:
    swift_willThrow(v38);
    goto LABEL_22;
  }
  v28 = swift_initStackObject(v13, v91);
  v77 = xmmword_100EA7AC0;
  *(_OWORD *)(v28 + 16) = xmmword_100EA7AC0;
  *(_QWORD *)(v28 + 32) = v18;
  v29 = qword_1011D23F0;
  v30 = v18;
  if (v29 != -1)
    swift_once(&qword_1011D23F0, sub_100B60A3C);
  v31 = (void *)qword_1011DBC78;
  *(_QWORD *)(v28 + 40) = qword_1011DBC78;
  v32 = qword_1011D23F8;
  v33 = v31;
  if (v32 != -1)
    swift_once(&qword_1011D23F8, sub_100B60A70);
  v34 = (void *)qword_1011DBC80;
  *(_QWORD *)(v28 + 48) = qword_1011DBC80;
  v35 = v34;
  sub_100B5EB9C(v28);
  v40 = v36;
  swift_setDeallocating(v28);
  swift_arrayDestroy(v28 + 32, *(_QWORD *)(v28 + 16), v78);
  swift_bridgeObjectRelease(v40);
  v41 = swift_initStackObject(v13, &v90);
  v42 = v30;
  v43 = v41;
  *(_OWORD *)(v41 + 16) = v77;
  *(_QWORD *)(v41 + 32) = v42;
  v44 = v41 + 32;
  v45 = (void *)qword_1011DBC78;
  *(_QWORD *)(v41 + 40) = qword_1011DBC78;
  v46 = qword_1011D2400;
  *(_QWORD *)&v77 = v42;
  v47 = v45;
  if (v46 != -1)
    swift_once(&qword_1011D2400, sub_100B60AA0);
  v48 = (void *)qword_1011DBC88;
  *(_QWORD *)(v43 + 48) = qword_1011DBC88;
  v49 = v48;
  sub_100B5EB9C(v43);
  v51 = v50;
  swift_setDeallocating(v43);
  swift_arrayDestroy(v44, *(_QWORD *)(v43 + 16), v78);
  swift_bridgeObjectRelease(v51);
  v52 = swift_initStackObject(v13, &v89);
  *(_OWORD *)(v52 + 16) = v82;
  v53 = (void *)v77;
  *(_QWORD *)(v52 + 32) = v77;
  v54 = qword_1011D23E8;
  v55 = v53;
  if (v54 != -1)
    swift_once(&qword_1011D23E8, sub_100B60A08);
  v56 = (void *)qword_1011DBC70;
  *(_QWORD *)(v52 + 40) = qword_1011DBC70;
  v57 = v56;
  v59 = sub_100B5EB9C(v52);
  v61 = v60;
  swift_setDeallocating(v52);
  swift_arrayDestroy(v52 + 32, *(_QWORD *)(v52 + 16), v78);
  v78 = v59;
  v87 = (void *)v59;
  v88 = v61;
  *(_QWORD *)&v82 = v61;
  v85 = 0x7D646E696B7BLL;
  v86 = 0xE600000000000000;
  v62 = 0x6D75626C61;
  if ((v80 & 1) != 0)
  {
    v63 = 0xE500000000000000;
  }
  else
  {
    v62 = 0x747369747261;
    v63 = 0xE600000000000000;
  }
  v83 = v62;
  v84 = v63;
  v64 = sub_10098A8C0();
  v65 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v85, &v83, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v64, v64, v64);
  v67 = v66;
  swift_bridgeObjectRelease(v63);
  v87 = (void *)v65;
  v88 = v67;
  v85 = 2103732603;
  v86 = 0xE400000000000000;
  v83 = v81;
  v84 = v93;
  v68 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v85, &v83, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v64, v64, v64);
  v70 = v69;
  swift_bridgeObjectRelease(v67);
  URL.init(string:)(v68, v70);
  swift_bridgeObjectRelease(v70);
  v71 = type metadata accessor for URL(0);
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v11, 1, v71) == 1)
  {
    sub_10004FF60((uint64_t)v11, &qword_1011D2AE0);
    v73 = sub_1009D6F18();
    swift_allocError(&type metadata for ClassicalBridge.Error, v73, 0, 0);
    v74 = v82;
    *(_QWORD *)v75 = v78;
    *(_QWORD *)(v75 + 8) = v74;
    v76 = v93;
    *(_QWORD *)(v75 + 16) = v81;
    *(_QWORD *)(v75 + 24) = v76;
    *(_BYTE *)(v75 + 32) = 1;
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  swift_bridgeObjectRelease(v82);

  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v79, v11, v71);
}

uint64_t ClassicalBridge.Type.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6D75626C61;
  else
    return 0x747369747261;
}

MusicCore::ClassicalBridge::Type_optional __swiftcall ClassicalBridge.Type.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  MusicCore::ClassicalBridge::Type_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1010E7CA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = MusicCore_ClassicalBridge_Type_album;
  else
    v4.value = MusicCore_ClassicalBridge_Type_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_100B5FCC0(char *a1, char *a2)
{
  return sub_1009A52C8(*a1, *a2);
}

Swift::Int sub_100B5FCCC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6D75626C61;
  else
    v2 = 0x747369747261;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100B5FD44(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6D75626C61;
  else
    v2 = 0x747369747261;
  if (*v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100B5FD98(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6D75626C61;
  else
    v3 = 0x747369747261;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100B5FE0C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1010E7CA0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100B5FE68(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x747369747261;
  if (*v1)
    v2 = 0x6D75626C61;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void static ClassicalBridge.generatePrestoURL(forModelObject:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;

  objc_opt_self(MPModelAlbum);
  v4 = (void *)swift_dynamicCastObjCClass(a1);
  if (v4)
  {
    v5 = a1;
    v6 = objc_msgSend(v4, "identifiers");
    v7 = objc_msgSend(v6, "universalStore");
  }
  else
  {
    objc_opt_self(MPModelArtist);
    v8 = swift_dynamicCastObjCClass(a1);
    if (!v8)
    {
      v18 = sub_1009D6F18();
      swift_allocError(&type metadata for ClassicalBridge.Error, v18, 0, 0);
      v17 = 3;
      goto LABEL_9;
    }
    v9 = (void *)v8;
    v5 = a1;
    v6 = objc_msgSend(v9, "identifiers");
    v7 = objc_msgSend(v6, "universalStore");
  }
  v10 = v7;

  if (v10)
  {
    objc_msgSend(v10, "adamID");
    v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v13 = v12;
    swift_unknownObjectRelease(v10);

    static ClassicalBridge.generatePrestoURL(type:storeAdamID:)(v4 != 0, v11, v13, a2);
    swift_bridgeObjectRelease();
    return;
  }

  v14 = sub_1009D6F18();
  swift_allocError(&type metadata for ClassicalBridge.Error, v14, 0, 0);
  v17 = 4;
LABEL_9:
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_BYTE *)(v15 + 32) = 2;
  swift_willThrow(v16);
}

uint64_t sub_100B60070()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_1011DBC60 = result;
  return result;
}

char *sub_100B60094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v11;
  char *v12;
  double v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  objc_super v21;

  *(_QWORD *)&v5[OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_applicationRecordObserver] = 0;
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_storeProductViewController]);
  v11 = &v5[OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_app];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  *((_QWORD *)v11 + 2) = a3;
  v12 = &v5[OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_applicationInstalledBlock];
  *(_QWORD *)v12 = a4;
  *((_QWORD *)v12 + 1) = a5;
  v21.receiver = v5;
  v21.super_class = (Class)_s23StoreProductCoordinatorCMa();
  *(_QWORD *)&v13 = swift_retain().n128_u64[0];
  v14 = (char *)objc_msgSendSuper2(&v21, "init", v13);
  v15 = (void *)*NSNotificationName.applicationRegistered.unsafeMutableAddressor();
  v16 = swift_allocObject(&unk_1010FDEA8, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  v17 = type metadata accessor for NotificationObserver();
  swift_allocObject(v17, 64, 7);
  v18 = v15;
  swift_retain();
  v19 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v18, 0, 1, 0, (uint64_t)sub_100B62084, v16);
  swift_release();

  swift_release();
  *(_QWORD *)&v14[OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_applicationRecordObserver] = v19;
  swift_release();
  return v14;
}

void sub_100B601F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  _BYTE v17[24];

  v3 = sub_100007E8C((uint64_t *)&unk_1011D8CF0);
  __chkstk_darwin(v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = *(_QWORD *)(Strong
                   + OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_app);
    v9 = *(_QWORD *)(Strong
                   + OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_app
                   + 8);
    swift_bridgeObjectRetain();
    LOBYTE(v8) = static ApplicationRecordUtilities.isApplicationInstalled(identifier:)(v8, v9);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      v10 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
      v11 = (_QWORD *)swift_allocObject(&unk_1010FDED0, 40, 7);
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = v7;
      v12 = v7;
      sub_100A3F884((uint64_t)v5, (uint64_t)&unk_1011DBD90, (uint64_t)v11);
      swift_release();
      v13 = (void *)swift_unknownObjectWeakLoadStrong(&v12[OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_storeProductViewController]);
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, "presentingViewController");

        if (v15)
        {
          objc_msgSend(v15, "dismissViewControllerAnimated:completion:", 1, 0);

        }
      }
    }

  }
}

uint64_t sub_100B60370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100B60388, 0, 0);
}

uint64_t sub_100B60388()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[3]
     + OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_applicationInstalledBlock;
  v2 = *(int **)v1;
  v0[4] = *(_QWORD *)(v1 + 8);
  v3 = v2[1];
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_100B60400;
  return v6();
}

uint64_t sub_100B60400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B60464;
  else
    v3 = sub_10024AC14;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B60464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;

  swift_release();
  if (qword_1011D2408 != -1)
    swift_once(&qword_1011D2408, sub_100B60ACC);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_100048B14(v2, (uint64_t)static Logger.classicalBridge);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_100007E8C((uint64_t *)&unk_1011D67C0);
    v11 = (char *)String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v8 + 4) = sub_10099627C(v11, v12, &v14);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not execute applicationInstalledBlock, error: %s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Logger.classicalBridge.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1011D2408 != -1)
    swift_once(&qword_1011D2408, sub_100B60ACC);
  v0 = type metadata accessor for Logger(0);
  return sub_100048B14(v0, (uint64_t)static Logger.classicalBridge);
}

uint64_t sub_100B60678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[26] = a4;
  v5[27] = a5;
  v5[25] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[28] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[29] = v8;
  v5[30] = v9;
  return swift_task_switch(sub_100B606E8, v8, v9);
}

uint64_t sub_100B606E8()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;

  v1 = v0 + 2;
  v2 = (void *)v0[26];
  v3 = v0[27];
  v4 = sub_100007E8C(&qword_1011DBD80);
  inited = swift_initStackObject(v4, v0 + 10);
  *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SKStoreProductParameterITunesItemIdentifier);
  *(_QWORD *)(inited + 40) = v6;
  v7 = *(_QWORD *)(v3
                 + OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_app
                 + 16);
  *(_QWORD *)(inited + 72) = &type metadata for Int64;
  *(_QWORD *)(inited + 48) = v7;
  sub_100A13450(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[31] = isa;
  swift_bridgeObjectRelease();
  v0[7] = v0 + 33;
  v0[2] = v0;
  v0[3] = sub_100B60828;
  v9 = swift_continuation_init(v0 + 2, 1);
  v0[20] = _NSConcreteStackBlock;
  v10 = v0 + 20;
  v10[1] = 0x40000000;
  v10[2] = sub_100AE254C;
  v10[3] = &unk_1010FDE80;
  v10[4] = v9;
  objc_msgSend(v2, "loadProductWithParameters:completionBlock:", isa, v10);
  return swift_continuation_await(v1, v11);
}

uint64_t sub_100B60828()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 256) = v2;
  if (v2)
    v3 = sub_100B608CC;
  else
    v3 = sub_100B60884;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 240));
}

uint64_t sub_100B60884()
{
  uint64_t v0;
  void *v1;
  _BYTE *v2;

  v1 = *(void **)(v0 + 248);
  v2 = *(_BYTE **)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 224));
  *v2 = *(_BYTE *)(v0 + 264);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B608CC()
{
  uint64_t v0;
  void *v1;
  __n128 v2;

  v1 = *(void **)(v0 + 248);
  v2 = swift_release(*(_QWORD *)(v0 + 224));
  swift_willThrow(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100B60940()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s23StoreProductCoordinatorCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

NSString sub_100B609D4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1011DBC68 = (uint64_t)result;
  return result;
}

NSString sub_100B60A08()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1011DBC70 = (uint64_t)result;
  return result;
}

NSString sub_100B60A3C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1011DBC78 = (uint64_t)result;
  return result;
}

NSString sub_100B60A70()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1011DBC80 = (uint64_t)result;
  return result;
}

NSString sub_100B60AA0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1011DBC88 = (uint64_t)result;
  return result;
}

uint64_t sub_100B60ACC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, static Logger.classicalBridge);
  sub_100048B14(v0, (uint64_t)static Logger.classicalBridge);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0xD000000000000010, 0x8000000100E44BE0);
}

uint64_t static Logger.classicalBridge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1011D2408 != -1)
    swift_once(&qword_1011D2408, sub_100B60ACC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100048B14(v2, (uint64_t)static Logger.classicalBridge);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

_QWORD *sub_100B60BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100007E8C(&qword_1011D3080);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size_0(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unsigned __int8 *sub_100B60C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain();
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_100B60D04(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease();
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1001AF97C(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100B60D04(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v8 = sub_100B60D80(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100B60D80(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001AFDB8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100B60BBC(v12, 0);
      v5 = sub_1001AFEA4((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release();
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

uint64_t sub_100B60EC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v2[17] = a1;
  v2[18] = a2;
  v3 = sub_100007E8C((uint64_t *)&unk_1011D8CF0);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[22] = v6;
  v2[23] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[24] = v7;
  v2[25] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[26] = v9;
  v2[27] = v10;
  return swift_task_switch(sub_100B60F84, v9, v10);
}

id sub_100B60F84()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  id result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  id v62;
  __n128 v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];

  if (qword_1011D1CF0 != -1)
    swift_once(&qword_1011D1CF0, sub_100A3CB80);
  sub_100007E8C(&qword_1011D6170);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10098A8A8);
  v1 = (void *)v0[16];
  v0[28] = v1;
  if (!v1)
  {
    swift_release();
    v14 = sub_1009D6F18();
    swift_allocError(&type metadata for ClassicalBridge.Error, v14, 0, 0);
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_BYTE *)(v15 + 32) = 2;
    swift_willThrow((__n128)0);
LABEL_13:
    v29 = v0[19];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v29);
    v30 = (uint64_t (*)(void))v0[1];
    return (id)v30();
  }
  v2 = sub_100007E8C(&qword_1011D3DF0);
  inited = swift_initStackObject(v2, v0 + 2);
  v89 = 3;
  *(_OWORD *)(inited + 16) = xmmword_100EA7AC0;
  v4 = (void *)ICURLBagKeyMusicCommon;
  *(_QWORD *)(inited + 32) = ICURLBagKeyMusicCommon;
  v5 = inited + 32;
  v6 = qword_1011D23F0;
  v7 = v4;
  if (v6 != -1)
    swift_once(&qword_1011D23F0, sub_100B60A3C);
  v8 = &qword_1011DB000;
  v9 = (void *)qword_1011DBC78;
  *(_QWORD *)(inited + 40) = qword_1011DBC78;
  v10 = qword_1011D23F8;
  v11 = v9;
  if (v10 != -1)
    swift_once(&qword_1011D23F8, sub_100B60A70);
  v12 = (void *)qword_1011DBC80;
  *(_QWORD *)(inited + 48) = qword_1011DBC80;
  v13 = v12;
  v87 = sub_100B5EB9C(inited);
  v88 = v16;
  swift_setDeallocating(inited);
  v17 = *(_QWORD *)(inited + 16);
  type metadata accessor for ICURLBagKey(0);
  v19 = v18;
  swift_arrayDestroy(v5, v17, v18);
  v20 = swift_initStackObject(v2, v0 + 9);
  *(_OWORD *)(v20 + 16) = xmmword_100EA7AC0;
  *(_QWORD *)(v20 + 32) = v7;
  v21 = (void *)qword_1011DBC78;
  *(_QWORD *)(v20 + 40) = qword_1011DBC78;
  v22 = qword_1011D2400;
  v23 = v7;
  v24 = v21;
  if (v22 != -1)
    swift_once(&qword_1011D2400, sub_100B60AA0);
  v25 = (void *)qword_1011DBC88;
  *(_QWORD *)(v20 + 48) = qword_1011DBC88;
  v26 = v25;
  v27 = sub_100B5EB9C(v20);
  v0[29] = v28;
  v32 = v27;
  v33 = v28;
  swift_setDeallocating(v20);
  swift_arrayDestroy(v20 + 32, *(_QWORD *)(v20 + 16), v19);
  v34 = HIBYTE(v33) & 0xF;
  v35 = v32 & 0xFFFFFFFFFFFFLL;
  if ((v33 & 0x2000000000000000) != 0)
    v36 = HIBYTE(v33) & 0xF;
  else
    v36 = v32 & 0xFFFFFFFFFFFFLL;
  if (!v36)
    goto LABEL_81;
  if ((v33 & 0x1000000000000000) == 0)
  {
    if ((v33 & 0x2000000000000000) == 0)
    {
      if ((v32 & 0x1000000000000000) != 0)
        v37 = (unsigned __int8 *)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v37 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v32, v33);
      v38 = sub_1001AF97C(v37, v35, 10);
      if ((v39 & 1) == 0)
      {
        v40 = (uint64_t)v38;
        goto LABEL_51;
      }
      goto LABEL_81;
    }
    v90[0] = v32;
    v90[1] = v33 & 0xFFFFFFFFFFFFFFLL;
    if (v32 == 43)
    {
      if (!v34)
        goto LABEL_85;
      if (v34 == 1)
        goto LABEL_83;
      if ((BYTE1(v32) - 48) > 9u)
        goto LABEL_47;
      v40 = (BYTE1(v32) - 48);
      if (v34 != 2)
      {
        if ((BYTE2(v32) - 48) > 9u)
          goto LABEL_47;
        v40 = 10 * (BYTE1(v32) - 48) + (BYTE2(v32) - 48);
        v41 = v34 - 3;
        if (v34 != 3)
        {
          v42 = (unsigned __int8 *)v90 + 3;
          while (1)
          {
            v43 = *v42 - 48;
            if (v43 > 9)
              goto LABEL_47;
            v44 = 10 * v40;
            if ((unsigned __int128)(v40 * (__int128)10) >> 64 != (10 * v40) >> 63)
              goto LABEL_47;
            v40 = v44 + v43;
            if (__OFADD__(v44, v43))
              goto LABEL_47;
            LOBYTE(v34) = 0;
            ++v42;
            if (!--v41)
              goto LABEL_50;
          }
        }
      }
    }
    else
    {
      if (v32 == 45)
      {
        if (v34)
        {
          if (v34 != 1)
          {
            if ((BYTE1(v32) - 48) > 9u)
              goto LABEL_47;
            if (v34 == 2)
            {
              LOBYTE(v34) = 0;
              v40 = -(uint64_t)(BYTE1(v32) - 48);
              goto LABEL_50;
            }
            if ((BYTE2(v32) - 48) > 9u)
              goto LABEL_47;
            v40 = -10 * (BYTE1(v32) - 48) - (BYTE2(v32) - 48);
            v77 = v34 - 3;
            if (v34 != 3)
            {
              v78 = (unsigned __int8 *)v90 + 3;
              while (1)
              {
                v79 = *v78 - 48;
                if (v79 > 9)
                  goto LABEL_47;
                v80 = 10 * v40;
                if ((unsigned __int128)(v40 * (__int128)10) >> 64 != (10 * v40) >> 63)
                  goto LABEL_47;
                v40 = v80 - v79;
                if (__OFSUB__(v80, v79))
                  goto LABEL_47;
                LOBYTE(v34) = 0;
                ++v78;
                if (!--v77)
                  goto LABEL_50;
              }
            }
            goto LABEL_49;
          }
LABEL_83:
          v40 = 0;
LABEL_50:
          if ((v34 & 1) == 0)
            goto LABEL_51;
LABEL_81:
          swift_release();
          swift_bridgeObjectRelease();
          v84 = sub_1009D6F18();
          swift_allocError(&type metadata for ClassicalBridge.Error, v84, 0, 0);
          *(_QWORD *)v85 = v32;
          *(_QWORD *)(v85 + 8) = v33;
          *(_QWORD *)(v85 + 16) = 0;
          *(_QWORD *)(v85 + 24) = 0;
          *(_BYTE *)(v85 + 32) = 0;
          swift_willThrow(v86);

          goto LABEL_13;
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        swift_once(&qword_1011D23D8, sub_100B60070);
        goto LABEL_55;
      }
      if (!v34 || (v32 - 48) > 9u)
      {
LABEL_47:
        v40 = 0;
        LOBYTE(v34) = 1;
        goto LABEL_50;
      }
      v40 = (v32 - 48);
      if (v34 != 1)
      {
        if ((BYTE1(v32) - 48) > 9u)
          goto LABEL_47;
        v40 = 10 * (v32 - 48) + (BYTE1(v32) - 48);
        v73 = v34 - 2;
        if (v34 != 2)
        {
          v74 = (unsigned __int8 *)v90 + 2;
          while (1)
          {
            v75 = *v74 - 48;
            if (v75 > 9)
              goto LABEL_47;
            v76 = 10 * v40;
            if ((unsigned __int128)(v40 * (__int128)10) >> 64 != (10 * v40) >> 63)
              goto LABEL_47;
            v40 = v76 + v75;
            if (__OFADD__(v76, v75))
              goto LABEL_47;
            LOBYTE(v34) = 0;
            ++v74;
            if (!--v73)
              goto LABEL_50;
          }
        }
      }
    }
LABEL_49:
    LOBYTE(v34) = 0;
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  v40 = (uint64_t)sub_100B60C20(v32, v33, 10);
  v83 = v82;
  swift_bridgeObjectRelease();
  if ((v83 & 1) != 0)
    goto LABEL_81;
LABEL_51:
  if ((static ApplicationRecordUtilities.isApplicationInstalled(identifier:)(v87, v88) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = (_QWORD *)swift_task_alloc(dword_1011DBD64);
    v0[30] = v45;
    *v45 = v0;
    v45[1] = sub_100B6193C;
    return (id)sub_100B5EF68(v0[17]);
  }
  v46 = (void *)v0[18];
  if (!v46)
  {
    swift_bridgeObjectRelease();
    v72 = (_QWORD *)swift_task_alloc(dword_1011DBD5C);
    v0[32] = v72;
    *v72 = v0;
    v72[1] = sub_100B619EC;
    return (id)sub_100B5F198(v32, v33);
  }
  v47 = v0[22];
  v48 = v0[23];
  v50 = v0[20];
  v49 = v0[21];
  v51 = v0[17];
  v89 = v46;
  swift_release();
  v52 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v49 + 16))(v48, v51, v50, v52);
  v53 = *(unsigned __int8 *)(v49 + 80);
  v54 = (v53 + 16) & ~v53;
  v55 = swift_allocObject(&unk_1010FDE40, v54 + v47, v53 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v55 + v54, v48, v50);
  v56 = objc_allocWithZone((Class)_s23StoreProductCoordinatorCMa());
  v57 = sub_100B60094(v87, v88, v40, (uint64_t)&unk_1011DBD68, v55);
  v19 = objc_msgSend(objc_allocWithZone((Class)SKStoreProductViewController), "init");
  objc_msgSend(v19, "setDelegate:", v57);
  v58 = qword_1011D23D8;
  v8 = v57;
  if (v58 != -1)
    goto LABEL_86;
LABEL_55:
  v59 = v0[19];
  objc_setAssociatedObject(v19, (const void *)qword_1011DBC60, v8, (void *)1);

  v60 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 1, 1, v60);
  v61 = v8;
  v62 = v19;
  v64 = static MainActor.shared.getter(v63);
  v65 = (_QWORD *)swift_allocObject(&unk_1010FDE68, 48, 7);
  v65[2] = v64;
  v65[3] = &protocol witness table for MainActor;
  v65[4] = v62;
  v65[5] = v61;
  sub_100B2392C(v59, (uint64_t)&unk_1011DBD78, (uint64_t)v65);
  swift_release();
  result = objc_msgSend(v62, "view", swift_unknownObjectWeakAssign((char *)v61+ OBJC_IVAR____TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator_storeProductViewController, v62).n128_f64[0]);
  if (result)
  {
    v66 = result;
    v67 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
    objc_msgSend(v66, "setTintColor:", v67);

    v68 = (id)v89;
    v69 = objc_msgSend(v68, "presentedViewController");
    v70 = v68;
    if (v69)
    {
      v71 = v68;
      while (1)
      {
        v70 = v69;
        if (!objc_msgSend(v69, "canPresentViewControllers", v87))
          break;

        v69 = objc_msgSend(v70, "presentedViewController");
        v71 = v70;
        if (!v69)
          goto LABEL_79;
      }

      v70 = v71;
    }
LABEL_79:
    objc_msgSend(v70, "presentViewController:animated:completion:", v62, 1, 0, v87);

    v81 = v0[19];
    swift_task_dealloc(v0[23]);
    swift_task_dealloc(v81);
    v30 = (uint64_t (*)(void))v0[1];
    return (id)v30();
  }
  __break(1u);
  return result;
}

uint64_t sub_100B6193C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B61A58;
  else
    v4 = sub_100B6199C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 216));
}

uint64_t sub_100B6199C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 200));

  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B619EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = sub_100B61AA8;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = sub_100B62118;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100B61A58()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 200));

  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B61AA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease(v2);

  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100B61B04()
{
  unint64_t result;

  result = qword_1011DBCA8;
  if (!qword_1011DBCA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClassicalBridge.Type, &type metadata for ClassicalBridge.Type);
    atomic_store(result, (unint64_t *)&qword_1011DBCA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassicalBridge()
{
  return &type metadata for ClassicalBridge;
}

uint64_t storeEnumTagSinglePayload for ClassicalBridge.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B61BA4 + 4 * byte_100EE57C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B61BD8 + 4 * byte_100EE57C0[v4]))();
}

uint64_t sub_100B61BD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B61BE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B61BE8);
  return result;
}

uint64_t sub_100B61BF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B61BFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B61C00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B61C08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassicalBridge.Type()
{
  return &type metadata for ClassicalBridge.Type;
}

uint64_t _s23StoreProductCoordinatorCMa()
{
  return objc_opt_self(_TtCE9MusicCoreCSo28SKStoreProductViewControllerP33_2120E9B2F4E5B8C48C07BDF209A3517523StoreProductCoordinator);
}

_QWORD *sub_100B61C48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s23StoreProductCoordinatorC3AppVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  return a1;
}

_QWORD *_s23StoreProductCoordinatorC3AppVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *_s23StoreProductCoordinatorC3AppVMa()
{
  return &_s23StoreProductCoordinatorC3AppVN;
}

uint64_t sub_100B61D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5)
  {
    if (a5 != 1)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ClassicalBridge.Error(uint64_t a1)
{
  return sub_100B61D7C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_100B61D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
    return swift_bridgeObjectRelease(a2);
  if (a5 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t initializeWithCopy for ClassicalBridge.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100B61D1C(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ClassicalBridge.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100B61D1C(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_100B61D7C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for ClassicalBridge.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_100B61D7C(v4, v6, v5, v7, v9);
  return a1;
}

ValueMetadata *type metadata accessor for ClassicalBridge.Error()
{
  return &type metadata for ClassicalBridge.Error;
}

uint64_t sub_100B61EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B61F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1011DBD64);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10005AEE4;
  return sub_100B5EF68(v3);
}

uint64_t sub_100B61FB4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B61FE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1011DBD74);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10006AEE4;
  return sub_100B60678(a1, v4, v5, v7, v6);
}

uint64_t sub_100B62060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100B62084(uint64_t a1)
{
  uint64_t v1;

  sub_100B601F4(a1, v1);
}

uint64_t sub_100B6208C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100B620B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1011DBD8C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10005AEE4;
  v3[3] = v2;
  return swift_task_switch(sub_100B60388, 0, 0);
}

uint64_t *String.cancelButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2420 != -1)
    swift_once(&qword_1011D2420, sub_100B62390);
  return &static String.cancelButtonTitle;
}

uint64_t *String.doneButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2418 != -1)
    swift_once(&qword_1011D2418, sub_100B62354);
  return &static String.doneButtonTitle;
}

uint64_t *String.okButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2410 != -1)
    swift_once(&qword_1011D2410, sub_100B6231C);
  return &static String.okButtonTitle;
}

uint64_t *String.notNowButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2430 != -1)
    swift_once(&qword_1011D2430, sub_100B62450);
  return &static String.notNowButtonTitle;
}

uint64_t *AccessibilityString.dolbyAtmosLabel.unsafeMutableAddressor()
{
  if (qword_1011D2468 != -1)
    swift_once(&qword_1011D2468, sub_100B62D64);
  return &static AccessibilityString.dolbyAtmosLabel;
}

uint64_t *AccessibilityString.dolbyAudioLabel.unsafeMutableAddressor()
{
  if (qword_1011D2470 != -1)
    swift_once(&qword_1011D2470, sub_100B62DB0);
  return &static AccessibilityString.dolbyAudioLabel;
}

uint64_t *AccessibilityString.losslessLabel.unsafeMutableAddressor()
{
  if (qword_1011D2480 != -1)
    swift_once(&qword_1011D2480, sub_100B62E4C);
  return &static AccessibilityString.losslessLabel;
}

uint64_t *AccessibilityString.hiResLosslessLabel.unsafeMutableAddressor()
{
  if (qword_1011D2478 != -1)
    swift_once(&qword_1011D2478, sub_100B62DFC);
  return &static AccessibilityString.hiResLosslessLabel;
}

uint64_t sub_100B6231C(uint64_t a1)
{
  return sub_100B625C8(a1, 19279, 0xE200000000000000, &static String.okButtonTitle, &qword_10124ED20);
}

uint64_t static String.okButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2410, &static String.okButtonTitle, (uint64_t)&qword_10124ED20, (uint64_t)sub_100B6231C);
}

uint64_t sub_100B62354(uint64_t a1)
{
  return sub_100B625C8(a1, 1701736260, 0xE400000000000000, &static String.doneButtonTitle, &qword_10124ED30);
}

uint64_t static String.doneButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2418, &static String.doneButtonTitle, (uint64_t)&qword_10124ED30, (uint64_t)sub_100B62354);
}

uint64_t sub_100B62390(uint64_t a1)
{
  return sub_100B625C8(a1, 0x6C65636E6143, 0xE600000000000000, &static String.cancelButtonTitle, &qword_10124ED40);
}

uint64_t static String.cancelButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2420, &static String.cancelButtonTitle, (uint64_t)&qword_10124ED40, (uint64_t)sub_100B62390);
}

uint64_t sub_100B623D0(uint64_t a1)
{
  return sub_100B625C8(a1, 0x6574656C6544, 0xE600000000000000, &static String.deleteButtonTitle, &qword_10124ED50);
}

uint64_t *String.deleteButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2428 != -1)
    swift_once(&qword_1011D2428, sub_100B623D0);
  return &static String.deleteButtonTitle;
}

uint64_t static String.deleteButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2428, &static String.deleteButtonTitle, (uint64_t)&qword_10124ED50, (uint64_t)sub_100B623D0);
}

uint64_t sub_100B62450(uint64_t a1)
{
  return sub_100B625C8(a1, 0x776F4E20746F4ELL, 0xE700000000000000, &static String.notNowButtonTitle, &qword_10124ED60);
}

uint64_t static String.notNowButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2430, &static String.notNowButtonTitle, (uint64_t)&qword_10124ED60, (uint64_t)sub_100B62450);
}

uint64_t sub_100B62494(uint64_t a1)
{
  return sub_100B625C8(a1, 0x7373696D736944, 0xE700000000000000, &static String.dismissButtonTitle, &qword_10124ED70);
}

uint64_t *String.dismissButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2438 != -1)
    swift_once(&qword_1011D2438, sub_100B62494);
  return &static String.dismissButtonTitle;
}

uint64_t static String.dismissButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2438, &static String.dismissButtonTitle, (uint64_t)&qword_10124ED70, (uint64_t)sub_100B62494);
}

uint64_t sub_100B62518(uint64_t a1)
{
  return sub_100B625C8(a1, 0xD000000000000014, 0x8000000100E531C0, &static String.removeDownloadButtonTitle, &qword_10124ED80);
}

uint64_t *String.removeDownloadButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2440 != -1)
    swift_once(&qword_1011D2440, sub_100B62518);
  return &static String.removeDownloadButtonTitle;
}

uint64_t static String.removeDownloadButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2440, &static String.removeDownloadButtonTitle, (uint64_t)&qword_10124ED80, (uint64_t)sub_100B62518);
}

uint64_t sub_100B625A0(uint64_t a1)
{
  return sub_100B625C8(a1, 0x6961674120797254, 0xE90000000000006ELL, &static String.tryAgainButtonTitle, &qword_10124ED90);
}

uint64_t sub_100B625C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[16];

  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v18 = &v24[-v17];
  String.LocalizationValue.init(stringLiteral:)(a2, a3);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v16, v18, v12);
  if (qword_1011D1B40 != -1)
    swift_once(&qword_1011D1B40, sub_1009887D8);
  v19 = qword_10124DE50;
  static Locale.current.getter((id)qword_10124DE50);
  v20 = String.init(localized:table:bundle:locale:comment:)(v16, 0, 0, v19, v11, 0, 0, 256);
  v22 = v21;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v18, v12);
  *a4 = v20;
  *a5 = v22;
  return result;
}

uint64_t *String.tryAgainButtonTitle.unsafeMutableAddressor()
{
  if (qword_1011D2448 != -1)
    swift_once(&qword_1011D2448, sub_100B625A0);
  return &static String.tryAgainButtonTitle;
}

uint64_t static String.tryAgainButtonTitle.getter()
{
  return sub_100B5B898(&qword_1011D2448, &static String.tryAgainButtonTitle, (uint64_t)&qword_10124ED90, (uint64_t)sub_100B625A0);
}

uint64_t static String.socialDisconnectMessage(networkName:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[16];

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v13 = &v25[-v12];
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(119, 2);
  v17._object = (void *)0x8000000100E53100;
  v17._countAndFlagsBits = 0xD000000000000017;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000005FLL;
  v19._object = (void *)0x8000000100E53120;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v20);
  v21._countAndFlagsBits = 46;
  v21._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
  String.LocalizationValue.init(stringInterpolation:)(v16);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v10, v13, v7);
  if (qword_1011D1B40 != -1)
    swift_once(&qword_1011D1B40, sub_1009887D8);
  v22 = qword_10124DE50;
  static Locale.current.getter((id)qword_10124DE50);
  v23 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, v22, v6, 0, 0, 256);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v23;
}

uint64_t MPModelTVShow.localizedEpisodeCount.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  id v21;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - v10;
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  v21 = objc_msgSend(v1, "episodesCount");
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v21, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v16._countAndFlagsBits = 0x65646F7369704520;
  v16._object = (void *)0xEB00000000297328;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  String.LocalizationValue.init(stringInterpolation:)(v14);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  if (qword_1011D1B40 != -1)
    swift_once(&qword_1011D1B40, sub_1009887D8);
  v17 = qword_10124DE50;
  static Locale.current.getter((id)qword_10124DE50);
  v18 = String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, v17, v4, 0, 0, 256);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v18;
}

uint64_t sub_100B62BC8(uint64_t a1)
{
  return sub_100B6336C(a1, 0x7241206D75626C41, 0xED00006B726F7774, &static AccessibilityString.albumArtworkLabel, &qword_10124EDA0);
}

uint64_t *AccessibilityString.albumArtworkLabel.unsafeMutableAddressor()
{
  if (qword_1011D2450 != -1)
    swift_once(&qword_1011D2450, sub_100B62BC8);
  return &static AccessibilityString.albumArtworkLabel;
}

uint64_t static AccessibilityString.albumArtworkLabel.getter()
{
  return sub_100B5B898(&qword_1011D2450, &static AccessibilityString.albumArtworkLabel, (uint64_t)&qword_10124EDA0, (uint64_t)sub_100B62BC8);
}

uint64_t sub_100B62C58(uint64_t a1)
{
  return sub_100B6336C(a1, 0xD000000000000010, 0x8000000100E35BF0, &static AccessibilityString.playlistArtworkLabel, &qword_10124EDB0);
}

uint64_t *AccessibilityString.playlistArtworkLabel.unsafeMutableAddressor()
{
  if (qword_1011D2458 != -1)
    swift_once(&qword_1011D2458, sub_100B62C58);
  return &static AccessibilityString.playlistArtworkLabel;
}

uint64_t static AccessibilityString.playlistArtworkLabel.getter()
{
  return sub_100B5B898(&qword_1011D2458, &static AccessibilityString.playlistArtworkLabel, (uint64_t)&qword_10124EDB0, (uint64_t)sub_100B62C58);
}

uint64_t sub_100B62CE0(uint64_t a1)
{
  return sub_100B6336C(a1, 0x65646F43205251, 0xE700000000000000, &static AccessibilityString.qrCodeButtonLabel, &qword_10124EDC0);
}

uint64_t *AccessibilityString.qrCodeButtonLabel.unsafeMutableAddressor()
{
  if (qword_1011D2460 != -1)
    swift_once(&qword_1011D2460, sub_100B62CE0);
  return &static AccessibilityString.qrCodeButtonLabel;
}

uint64_t static AccessibilityString.qrCodeButtonLabel.getter()
{
  return sub_100B5B898(&qword_1011D2460, &static AccessibilityString.qrCodeButtonLabel, (uint64_t)&qword_10124EDC0, (uint64_t)sub_100B62CE0);
}

uint64_t sub_100B62D64(uint64_t a1)
{
  return sub_100B6336C(a1, 0x74412079626C6F44, 0xEB00000000736F6DLL, &static AccessibilityString.dolbyAtmosLabel, &qword_10124EDD0);
}

uint64_t static AccessibilityString.dolbyAtmosLabel.getter()
{
  return sub_100B5B898(&qword_1011D2468, &static AccessibilityString.dolbyAtmosLabel, (uint64_t)&qword_10124EDD0, (uint64_t)sub_100B62D64);
}

uint64_t sub_100B62DB0(uint64_t a1)
{
  return sub_100B6336C(a1, 0x75412079626C6F44, 0xEB000000006F6964, &static AccessibilityString.dolbyAudioLabel, &qword_10124EDE0);
}

uint64_t static AccessibilityString.dolbyAudioLabel.getter()
{
  return sub_100B5B898(&qword_1011D2470, &static AccessibilityString.dolbyAudioLabel, (uint64_t)&qword_10124EDE0, (uint64_t)sub_100B62DB0);
}

uint64_t sub_100B62DFC(uint64_t a1)
{
  return sub_100B6336C(a1, 0x4C207365522D6948, 0xEF7373656C73736FLL, &static AccessibilityString.hiResLosslessLabel, &qword_10124EDF0);
}

uint64_t static AccessibilityString.hiResLosslessLabel.getter()
{
  return sub_100B5B898(&qword_1011D2478, &static AccessibilityString.hiResLosslessLabel, (uint64_t)&qword_10124EDF0, (uint64_t)sub_100B62DFC);
}

uint64_t sub_100B62E4C(uint64_t a1)
{
  return sub_100B6336C(a1, 0x7373656C73736F4CLL, 0xE800000000000000, &static AccessibilityString.losslessLabel, &qword_10124EE00);
}

uint64_t static AccessibilityString.losslessLabel.getter()
{
  return sub_100B5B898(&qword_1011D2480, &static AccessibilityString.losslessLabel, (uint64_t)&qword_10124EE00, (uint64_t)sub_100B62E4C);
}

uint64_t sub_100B62E90(uint64_t a1)
{
  return sub_100B6336C(a1, 0xD000000000000010, 0x8000000100E531A0, &static AccessibilityString.favoriteBadgeLabel, &qword_10124EE10);
}

uint64_t *AccessibilityString.favoriteBadgeLabel.unsafeMutableAddressor()
{
  if (qword_1011D2488 != -1)
    swift_once(&qword_1011D2488, sub_100B62E90);
  return &static AccessibilityString.favoriteBadgeLabel;
}

uint64_t static AccessibilityString.favoriteBadgeLabel.getter()
{
  return sub_100B5B898(&qword_1011D2488, &static AccessibilityString.favoriteBadgeLabel, (uint64_t)&qword_10124EE10, (uint64_t)sub_100B62E90);
}

uint64_t sub_100B62F18(uint64_t a1)
{
  return sub_100B6336C(a1, 0x72616C75706F50, 0xE700000000000000, &static AccessibilityString.popularBadgeLabel, &qword_10124EE20);
}

uint64_t *AccessibilityString.popularBadgeLabel.unsafeMutableAddressor()
{
  if (qword_1011D2490 != -1)
    swift_once(&qword_1011D2490, sub_100B62F18);
  return &static AccessibilityString.popularBadgeLabel;
}

uint64_t static AccessibilityString.popularBadgeLabel.getter()
{
  return sub_100B5B898(&qword_1011D2490, &static AccessibilityString.popularBadgeLabel, (uint64_t)&qword_10124EE20, (uint64_t)sub_100B62F18);
}

uint64_t sub_100B62F9C(uint64_t a1)
{
  return sub_100B6336C(a1, 0x76697372656D6D49, 0xE900000000000065, &static AccessibilityString.immersiveBadgeLabel, &qword_10124EE30);
}

uint64_t *AccessibilityString.immersiveBadgeLabel.unsafeMutableAddressor()
{
  if (qword_1011D2498 != -1)
    swift_once(&qword_1011D2498, sub_100B62F9C);
  return &static AccessibilityString.immersiveBadgeLabel;
}

uint64_t static AccessibilityString.immersiveBadgeLabel.getter()
{
  return sub_100B5B898(&qword_1011D2498, &static AccessibilityString.immersiveBadgeLabel, (uint64_t)&qword_10124EE30, (uint64_t)sub_100B62F9C);
}

uint64_t sub_100B63024(uint64_t a1)
{
  return sub_100B6336C(a1, 0xD000000000000012, 0x8000000100E53180, &static AccessibilityString.downloadedBadgeLabel, &qword_10124EE40);
}

uint64_t *AccessibilityString.downloadedBadgeLabel.unsafeMutableAddressor()
{
  if (qword_1011D24A0 != -1)
    swift_once(&qword_1011D24A0, sub_100B63024);
  return &static AccessibilityString.downloadedBadgeLabel;
}

uint64_t static AccessibilityString.downloadedBadgeLabel.getter()
{
  return sub_100B5B898(&qword_1011D24A0, &static AccessibilityString.downloadedBadgeLabel, (uint64_t)&qword_10124EE40, (uint64_t)sub_100B63024);
}

uint64_t sub_100B630AC(uint64_t a1)
{
  return sub_100B6336C(a1, 0x79616C5020776F4ELL, 0xEB00000000676E69, &static AccessibilityString.nowPlayingWafeformLabel, &qword_10124EE50);
}

uint64_t *AccessibilityString.nowPlayingWafeformLabel.unsafeMutableAddressor()
{
  if (qword_1011D24A8 != -1)
    swift_once(&qword_1011D24A8, sub_100B630AC);
  return &static AccessibilityString.nowPlayingWafeformLabel;
}

uint64_t static AccessibilityString.nowPlayingWafeformLabel.getter()
{
  return sub_100B5B898(&qword_1011D24A8, &static AccessibilityString.nowPlayingWafeformLabel, (uint64_t)&qword_10124EE50, (uint64_t)sub_100B630AC);
}

uint64_t sub_100B63138(uint64_t a1)
{
  return sub_100B6336C(a1, 0x646573756150, 0xE600000000000000, &static AccessibilityString.pausedWafeformLabel, &qword_10124EE60);
}

uint64_t *AccessibilityString.pausedWafeformLabel.unsafeMutableAddressor()
{
  if (qword_1011D24B0 != -1)
    swift_once(&qword_1011D24B0, sub_100B63138);
  return &static AccessibilityString.pausedWafeformLabel;
}

uint64_t static AccessibilityString.pausedWafeformLabel.getter()
{
  return sub_100B5B898(&qword_1011D24B0, &static AccessibilityString.pausedWafeformLabel, (uint64_t)&qword_10124EE60, (uint64_t)sub_100B63138);
}

uint64_t sub_100B631B8(uint64_t a1)
{
  return sub_100B6336C(a1, 0x657469726F766146, 0xE800000000000000, &static AccessibilityString.favoriteButtonLabel, &qword_10124EE70);
}

uint64_t *AccessibilityString.favoriteButtonLabel.unsafeMutableAddressor()
{
  if (qword_1011D24B8 != -1)
    swift_once(&qword_1011D24B8, sub_100B631B8);
  return &static AccessibilityString.favoriteButtonLabel;
}

uint64_t static AccessibilityString.favoriteButtonLabel.getter()
{
  return sub_100B5B898(&qword_1011D24B8, &static AccessibilityString.favoriteButtonLabel, (uint64_t)&qword_10124EE70, (uint64_t)sub_100B631B8);
}

uint64_t sub_100B6323C(uint64_t a1)
{
  return sub_100B6336C(a1, 0x766146206F646E55, 0xED0000657469726FLL, &static AccessibilityString.undoFavoriteButtonLabel, &qword_10124EE80);
}

uint64_t *AccessibilityString.undoFavoriteButtonLabel.unsafeMutableAddressor()
{
  if (qword_1011D24C0 != -1)
    swift_once(&qword_1011D24C0, sub_100B6323C);
  return &static AccessibilityString.undoFavoriteButtonLabel;
}

uint64_t static AccessibilityString.undoFavoriteButtonLabel.getter()
{
  return sub_100B5B898(&qword_1011D24C0, &static AccessibilityString.undoFavoriteButtonLabel, (uint64_t)&qword_10124EE80, (uint64_t)sub_100B6323C);
}

uint64_t sub_100B632CC(uint64_t a1)
{
  return sub_100B6336C(a1, 2036427856, 0xE400000000000000, &static AccessibilityString.playbackPlayButtonLabel, &qword_10124EE90);
}

uint64_t *AccessibilityString.playbackPlayButtonLabel.unsafeMutableAddressor()
{
  if (qword_1011D24C8 != -1)
    swift_once(&qword_1011D24C8, sub_100B632CC);
  return &static AccessibilityString.playbackPlayButtonLabel;
}

uint64_t static AccessibilityString.playbackPlayButtonLabel.getter()
{
  return sub_100B5B898(&qword_1011D24C8, &static AccessibilityString.playbackPlayButtonLabel, (uint64_t)&qword_10124EE90, (uint64_t)sub_100B632CC);
}

uint64_t sub_100B63348(uint64_t a1)
{
  return sub_100B6336C(a1, 0x656C6666756853, 0xE700000000000000, &static AccessibilityString.playbackShuffleButtonLabel, &qword_10124EEA0);
}

uint64_t sub_100B6336C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t result;
  _BYTE v29[16];

  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v29[-v18];
  __chkstk_darwin(v17);
  v21 = &v29[-v20];
  String.LocalizationValue.init(stringLiteral:)(a2, a3);
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16);
  v22(v19, v21, v12);
  if (qword_1011D1B40 != -1)
    swift_once(&qword_1011D1B40, sub_1009887D8);
  v23 = (void *)qword_10124DE50;
  v22(v16, v19, v12);
  static Locale.current.getter(v23);
  v24 = String.init(localized:table:bundle:locale:comment:)(v16, 0, 0, v23, v11, 0, 0, 256);
  v26 = v25;
  v27 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v27(v19, v12);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v27)(v21, v12);
  *a4 = v24;
  *a5 = v26;
  return result;
}

uint64_t *AccessibilityString.playbackShuffleButtonLabel.unsafeMutableAddressor()
{
  if (qword_1011D24D0 != -1)
    swift_once(&qword_1011D24D0, sub_100B63348);
  return &static AccessibilityString.playbackShuffleButtonLabel;
}

uint64_t static AccessibilityString.playbackShuffleButtonLabel.getter()
{
  return sub_100B5B898(&qword_1011D24D0, &static AccessibilityString.playbackShuffleButtonLabel, (uint64_t)&qword_10124EEA0, (uint64_t)sub_100B63348);
}

id NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

void NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.setter()
{
  sub_100B63888();
}

uint64_t NSUserDefaults.applicationScriptURL.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[24];
  uint64_t v10;

  v7 = 0xD000000000000014;
  v8 = 0x8000000100E531E0;
  v2 = sub_10098A8C0();
  NSUserDefaults.subscript.getter((uint64_t)&v7, (uint64_t)&type metadata for String, v2, (uint64_t)v9);
  if (v10)
  {
    if ((swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v3 = v8;
      v4 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v4 = v7 & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
        URL.init(string:)(v7, v8);
        return swift_bridgeObjectRelease(v3);
      }
      swift_bridgeObjectRelease(v8);
    }
  }
  else
  {
    sub_100A1324C((uint64_t)v9);
  }
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
}

uint64_t NSUserDefaults.showAllTVShows.getter()
{
  unint64_t v0;
  uint64_t result;
  char v2[16];
  _BYTE v3[24];
  uint64_t v4;

  strcpy(v2, "showAllTVShows");
  v2[15] = -18;
  v0 = sub_10098A8C0();
  NSUserDefaults.subscript.getter((uint64_t)v2, (uint64_t)&type metadata for String, v0, (uint64_t)v3);
  if (v4)
  {
    result = swift_dynamicCast(v2, v3, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v2[0];
  }
  else
  {
    sub_100A1324C((uint64_t)v3);
    return 0;
  }
  return result;
}

void (*NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.modify(uint64_t a1))(void **a1)
{
  void *v1;
  NSString v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  *(_BYTE *)(a1 + 8) = v4;
  return sub_100B637F8;
}

void sub_100B637F8(void **a1)
{
  sub_100B63980(a1);
}

id NSUserDefaults.hasSeenDolbyDownloadConflictAlert.getter()
{
  void *v0;
  NSString v1;
  id v2;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  return v2;
}

void NSUserDefaults.hasSeenDolbyDownloadConflictAlert.setter()
{
  sub_100B63888();
}

void sub_100B63888()
{
  void *v0;
  Class isa;
  id v2;

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setValue:forKey:", isa, v2);

}

void (*NSUserDefaults.hasSeenDolbyDownloadConflictAlert.modify(uint64_t a1))(void **a1)
{
  void *v1;
  NSString v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  *(_BYTE *)(a1 + 8) = v4;
  return sub_100B63964;
}

void sub_100B63964(void **a1)
{
  sub_100B63980(a1);
}

void sub_100B63980(void **a1)
{
  void *v1;
  NSString v2;
  Class isa;

  v1 = *a1;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKey:", isa, v2);

}

char *DeviceCapabilities.isInternalInstall.unsafeMutableAddressor()
{
  if (qword_1011D24D8 != -1)
    swift_once(&qword_1011D24D8, sub_100B63A4C);
  return &static DeviceCapabilities.isInternalInstall;
}

id static DeviceCapabilities.hasWAPICapability.getter()
{
  return sub_100B63A98((uint64_t (*)(void))&_MobileGestalt_get_wapiCapability);
}

id static DeviceCapabilities.hasCellularDataCapability.getter()
{
  return sub_100B63A98((uint64_t (*)(void))&_MobileGestalt_get_cellularDataCapability);
}

uint64_t sub_100B63A4C()
{
  uint64_t result;

  result = os_variant_has_internal_content("com.apple.Music");
  static DeviceCapabilities.isInternalInstall = result;
  return result;
}

uint64_t static DeviceCapabilities.isInternalInstall.getter()
{
  return sub_100B63F28(&qword_1011D24D8, (unsigned __int8 *)&static DeviceCapabilities.isInternalInstall, (uint64_t)sub_100B63A4C);
}

id static DeviceCapabilities.hasWatchCompanionCapability.getter()
{
  return sub_100B63A98((uint64_t (*)(void))&MobileGestalt_get_watchCompanionCapability);
}

id sub_100B63A98(uint64_t (*a1)(void))
{
  id result;
  void *v3;
  uint64_t v4;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v3 = result;
    v4 = a1();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100B63ADC()
{
  id v0;
  void *v1;
  unsigned int deviceClassNumber;
  unsigned int v3;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    deviceClassNumber = MobileGestalt_get_deviceClassNumber();

    v3 = 0x2030100u >> (8 * deviceClassNumber);
    if (deviceClassNumber >= 4)
      LOBYTE(v3) = 0;
    static DeviceCapabilities.deviceType = v3;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.deviceType.unsafeMutableAddressor()
{
  if (qword_1011D24E0 != -1)
    swift_once(&qword_1011D24E0, sub_100B63ADC);
  return &static DeviceCapabilities.deviceType;
}

uint64_t static DeviceCapabilities.deviceType.getter()
{
  if (qword_1011D24E0 != -1)
    swift_once(&qword_1011D24E0, sub_100B63ADC);
  return static DeviceCapabilities.deviceType;
}

uint64_t sub_100B63BB8()
{
  char v0;
  uint64_t result;

  v0 = 0;
  result = MGGetProductType();
  if (result > 2158787295)
  {
    if (result <= 2311900305)
    {
      if (result != 2158787296 && result != 2270970153)
        goto LABEL_17;
    }
    else if (result != 2311900306 && result != 3645319985 && result != 3242623367)
    {
      goto LABEL_17;
    }
  }
  else if (result <= 820711326)
  {
    if (result != 228444038 && result != 502329937)
      goto LABEL_17;
  }
  else if (result != 820711327 && result != 1429914406 && result != 1721691077)
  {
LABEL_17:
    v0 = 1;
  }
  static DeviceCapabilities.supportsHighFrameRateLyricsBackground = v0;
  return result;
}

char *DeviceCapabilities.supportsHighFrameRateLyricsBackground.unsafeMutableAddressor()
{
  if (qword_1011D24E8 != -1)
    swift_once(&qword_1011D24E8, sub_100B63BB8);
  return &static DeviceCapabilities.supportsHighFrameRateLyricsBackground;
}

uint64_t static DeviceCapabilities.supportsHighFrameRateLyricsBackground.getter()
{
  return sub_100B63F28(&qword_1011D24E8, (unsigned __int8 *)&static DeviceCapabilities.supportsHighFrameRateLyricsBackground, (uint64_t)sub_100B63BB8);
}

uint64_t sub_100B63D1C()
{
  uint64_t result;

  result = MGGetProductType();
  static DeviceCapabilities.supportsMotionBlur = result != 1325975682;
  return result;
}

char *DeviceCapabilities.supportsMotionBlur.unsafeMutableAddressor()
{
  if (qword_1011D24F0 != -1)
    swift_once(&qword_1011D24F0, sub_100B63D1C);
  return &static DeviceCapabilities.supportsMotionBlur;
}

uint64_t static DeviceCapabilities.supportsMotionBlur.getter()
{
  return sub_100B63F28(&qword_1011D24F0, (unsigned __int8 *)&static DeviceCapabilities.supportsMotionBlur, (uint64_t)sub_100B63D1C);
}

void sub_100B63DA4()
{
  uint64_t v0;
  BOOL v1;
  BOOL v2;
  id v3;
  void *v4;
  char hevcDecoder8BitSupported;

  v0 = MGGetProductType();
  v1 = v0 != 3707345671 && v0 != 2159747553;
  v2 = v0 != 1119807502 && v1;
  v3 = (id)MobileGestalt_get_current_device();
  if (v3)
  {
    v4 = v3;
    hevcDecoder8BitSupported = MobileGestalt_get_hevcDecoder8BitSupported();

    static DeviceCapabilities.supportsHEIC = v2 & hevcDecoder8BitSupported;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.supportsHEIC.unsafeMutableAddressor()
{
  if (qword_1011D24F8 != -1)
    swift_once(&qword_1011D24F8, sub_100B63DA4);
  return &static DeviceCapabilities.supportsHEIC;
}

uint64_t static DeviceCapabilities.supportsHEIC.getter()
{
  return sub_100B63F28(&qword_1011D24F8, (unsigned __int8 *)&static DeviceCapabilities.supportsHEIC, (uint64_t)sub_100B63DA4);
}

void sub_100B63E88()
{
  id v0;
  void *v1;
  char hasExtendedColorDisplay;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    hasExtendedColorDisplay = MobileGestalt_get_hasExtendedColorDisplay();

    static DeviceCapabilities.hasExtendedColorDisplay = hasExtendedColorDisplay;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.hasExtendedColorDisplay.unsafeMutableAddressor()
{
  if (qword_1011D2500 != -1)
    swift_once(&qword_1011D2500, sub_100B63E88);
  return &static DeviceCapabilities.hasExtendedColorDisplay;
}

uint64_t static DeviceCapabilities.hasExtendedColorDisplay.getter()
{
  return sub_100B63F28(&qword_1011D2500, (unsigned __int8 *)&static DeviceCapabilities.hasExtendedColorDisplay, (uint64_t)sub_100B63E88);
}

uint64_t sub_100B63F28(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return *a2;
}

id static DeviceCapabilitiesObjC.hasWAPICapability.getter(uint64_t a1, uint64_t a2)
{
  id result;
  void *v3;
  uint64_t wapiCapability;

  result = (id)MobileGestalt_get_current_device(a1, a2);
  if (result)
  {
    v3 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    return (id)wapiCapability;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s9MusicCore18DeviceCapabilitiesO9diskUsageSDyAC04DiskF8CategoryOs5Int64VGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  int64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  id v46;
  unsigned __int8 v47;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t result;
  _QWORD *v61;
  int64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v0 = MGCopyAnswer(CFSTR("DiskUsage"), 0);
  if (v0)
  {
    v69 = v0;
    v1 = sub_100007E8C(&qword_1011DBDD0);
    swift_dynamicCast(&v68, &v69, (char *)&type metadata for Swift.AnyObject + 8, v1, 7);
    v2 = v68;
    v3 = sub_100A154C0((uint64_t)_swiftEmptyArrayStorage);
    v4 = v2 + 64;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = -1;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    v7 = v6 & *(_QWORD *)(v2 + 64);
    v61 = (_QWORD *)v3;
    v62 = (unint64_t)(v5 + 63) >> 6;
    v8 = (void *)kMGQDiskUsageTotalSystemCapacity;
    v9 = (void *)kMGQDiskUsageTotalSystemAvailable;
    v65 = (void *)kMGQDiskUsageTotalDataCapacity;
    v64 = (void *)kMGQDiskUsageTotalDataAvailable;
    v63 = (void *)kMGQDiskUsageTotalDiskCapacity;
    swift_bridgeObjectRetain();
    v10 = 0;
    v66 = v8;
    v11 = v9;
    if (v7)
      goto LABEL_8;
LABEL_9:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v14 < v62)
    {
      v15 = *(_QWORD *)(v4 + 8 * v14);
      ++v10;
      if (v15)
        goto LABEL_26;
      v10 = v14 + 1;
      if (v14 + 1 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
        goto LABEL_26;
      v10 = v14 + 2;
      if (v14 + 2 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
        goto LABEL_26;
      v10 = v14 + 3;
      if (v14 + 3 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
        goto LABEL_26;
      v10 = v14 + 4;
      if (v14 + 4 >= v62)
        goto LABEL_57;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (v15)
      {
LABEL_26:
        v7 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v10 << 6); ; i = v12 | (v10 << 6))
        {
          v17 = 8 * i;
          v18 = *(void **)(*(_QWORD *)(v2 + 48) + v17);
          v67 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
          if (!v8)
            break;
          _s3__C8CFStringCMa_0(0);
          v20 = v19;
          v21 = sub_100B647C4();
          v22 = v18;
          v23 = v8;
          LOBYTE(v20) = static _CFObject.== infix(_:_:)(v23, v22, v20, v21);

          v9 = v11;
          if ((v20 & 1) != 0)
          {
            v47 = 0;
LABEL_44:

            goto LABEL_45;
          }
          if (v11)
            goto LABEL_32;
LABEL_33:
          if (v65)
          {
            _s3__C8CFStringCMa_0(0);
            v32 = v31;
            v33 = sub_100B647C4();
            v34 = v18;
            v35 = v65;
            LOBYTE(v32) = static _CFObject.== infix(_:_:)(v35, v34, v32, v33);

            if ((v32 & 1) != 0)
            {
              v47 = 2;
              goto LABEL_44;
            }
          }
          if (v64)
          {
            _s3__C8CFStringCMa_0(0);
            v37 = v36;
            v38 = sub_100B647C4();
            v39 = v18;
            v40 = v64;
            LOBYTE(v37) = static _CFObject.== infix(_:_:)(v40, v39, v37, v38);

            if ((v37 & 1) != 0)
            {
              v47 = 3;
              goto LABEL_44;
            }
          }
          if (!v63)
          {

            v9 = v11;
LABEL_7:

            v8 = v66;
            if (!v7)
              goto LABEL_9;
            goto LABEL_8;
          }
          _s3__C8CFStringCMa_0(0);
          v42 = v41;
          v43 = sub_100B647C4();
          v44 = v63;
          v45 = v18;
          v46 = v44;
          LOBYTE(v42) = static _CFObject.== infix(_:_:)(v46, v45, v42, v43);

          v9 = v11;
          if ((v42 & 1) == 0)
            goto LABEL_7;
          v47 = 4;
LABEL_45:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
          v50 = sub_10079C9A8(v47);
          v51 = v61[2];
          v52 = (v49 & 1) == 0;
          v53 = v51 + v52;
          if (__OFADD__(v51, v52))
            goto LABEL_59;
          v54 = v49;
          if (v61[3] >= v53)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_100B2C3B4();
          }
          else
          {
            sub_100B2A2DC(v53, isUniquelyReferenced_nonNull_native);
            v55 = sub_10079C9A8(v47);
            if ((v54 & 1) != (v56 & 1))
              goto LABEL_63;
            v50 = v55;
          }
          v4 = v2 + 64;
          if ((v54 & 1) != 0)
          {
            *(_QWORD *)(v61[7] + 8 * v50) = v67;
          }
          else
          {
            v61[(v50 >> 6) + 8] |= 1 << v50;
            *(_BYTE *)(v61[6] + v50) = v47;
            *(_QWORD *)(v61[7] + 8 * v50) = v67;
            v57 = v61[2];
            v58 = __OFADD__(v57, 1);
            v59 = v57 + 1;
            if (v58)
              goto LABEL_60;
            v61[2] = v59;
          }

          swift_bridgeObjectRelease();
          v8 = v66;
          v9 = v11;
          if (!v7)
            goto LABEL_9;
LABEL_8:
          v12 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
        v24 = v18;
        if (!v9)
          goto LABEL_33;
LABEL_32:
        v25 = v9;
        _s3__C8CFStringCMa_0(0);
        v27 = v26;
        v28 = sub_100B647C4();
        v29 = v18;
        v30 = v25;
        LOBYTE(v27) = static _CFObject.== infix(_:_:)(v30, v29, v27, v28);

        if ((v27 & 1) != 0)
        {
          v47 = 1;
          goto LABEL_44;
        }
        goto LABEL_33;
      }
      v16 = v14 + 5;
      if (v16 < v62)
      {
        v15 = *(_QWORD *)(v4 + 8 * v16);
        if (v15)
        {
          v10 = v16;
          goto LABEL_26;
        }
        while (1)
        {
          v10 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_61;
          if (v10 >= v62)
            break;
          v15 = *(_QWORD *)(v4 + 8 * v10);
          ++v16;
          if (v15)
            goto LABEL_26;
        }
      }
    }
LABEL_57:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v61;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DeviceCapabilities.DiskUsageCategory);
  __break(1u);
  return result;
}

unint64_t sub_100B64570()
{
  unint64_t result;

  result = qword_1011DBD98;
  if (!qword_1011DBD98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceCapabilities.DiskUsageCategory, &type metadata for DeviceCapabilities.DiskUsageCategory);
    atomic_store(result, (unint64_t *)&qword_1011DBD98);
  }
  return result;
}

unint64_t sub_100B645B8()
{
  unint64_t result;

  result = qword_1011DBDA0;
  if (!qword_1011DBDA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceCapabilities.DeviceType, &type metadata for DeviceCapabilities.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1011DBDA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities()
{
  return &type metadata for DeviceCapabilities;
}

uint64_t storeEnumTagSinglePayload for DeviceCapabilities.DiskUsageCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100B64658 + 4 * byte_100EE5905[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100B6468C + 4 * byte_100EE5900[v4]))();
}

uint64_t sub_100B6468C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B64694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B6469CLL);
  return result;
}

uint64_t sub_100B646A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B646B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100B646B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B646BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities.DiskUsageCategory()
{
  return &type metadata for DeviceCapabilities.DiskUsageCategory;
}

uint64_t storeEnumTagSinglePayload for DeviceCapabilities.DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100B64724 + 4 * byte_100EE590F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100B64758 + 4 * byte_100EE590A[v4]))();
}

uint64_t sub_100B64758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B64760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B64768);
  return result;
}

uint64_t sub_100B64774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B6477CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100B64780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B64788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities.DeviceType()
{
  return &type metadata for DeviceCapabilities.DeviceType;
}

uint64_t type metadata accessor for DeviceCapabilitiesObjC()
{
  return objc_opt_self(DeviceCapabilities);
}

unint64_t sub_100B647C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DBDD8;
  if (!qword_1011DBDD8)
  {
    _s3__C8CFStringCMa_0(255);
    result = swift_getWitnessTable(&unk_100EDA8BC, v1);
    atomic_store(result, (unint64_t *)&qword_1011DBDD8);
  }
  return result;
}

uint64_t property wrapper backing initializer of EnvironmentMonitorObserver.networkType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  type metadata accessor for ICEnvironmentNetworkType(0);
  return Published.init(initialValue:)(&v3, v1);
}

uint64_t EnvironmentMonitorObserver.networkType.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100EE5AD0);
  v2 = swift_getKeyPath(&unk_100EE5AF8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_100B648BC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100EE5AD0);
  v5 = swift_getKeyPath(&unk_100EE5AF8);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_100B6493C(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100EE5AD0);
  v5 = swift_getKeyPath(&unk_100EE5AF8);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EnvironmentMonitorObserver.$networkType.getter()
{
  return sub_100ACA828(&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_1011DBDE8);
}

uint64_t EnvironmentMonitorObserver.isNetworkConstrained.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100EE5B18);
  v2 = swift_getKeyPath(&unk_100EE5B40);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_100B64A30(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100EE5B18);
  v5 = swift_getKeyPath(&unk_100EE5B40);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_100B64AB0(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100EE5B18);
  v5 = swift_getKeyPath(&unk_100EE5B40);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EnvironmentMonitorObserver.$isNetworkConstrained.getter()
{
  return sub_100ACA828(&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1011D8370);
}

uint64_t property wrapper backing initializer of EnvironmentMonitorObserver.thermalLevel(char a1)
{
  char v2;

  v2 = a1;
  return Published.init(initialValue:)(&v2, &type metadata for EnvironmentMonitorObserver.ThermalLevel);
}

uint64_t EnvironmentMonitorObserver.thermalLevel.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100EE5B60);
  v2 = swift_getKeyPath(&unk_100EE5B88);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_100B64BD0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100EE5B60);
  v5 = swift_getKeyPath(&unk_100EE5B88);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  *a2 = v6;
}

uint64_t sub_100B64C50(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100EE5B60);
  v5 = swift_getKeyPath(&unk_100EE5B88);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EnvironmentMonitorObserver.$thermalLevel.getter()
{
  return sub_100ACA828(&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_1011DBE08);
}

BOOL static EnvironmentMonitorObserver.ThermalLevel.< infix(_:_:)(char a1, char a2)
{
  return qword_100EE5CF0[a1] < qword_100EE5CF0[a2];
}

uint64_t EnvironmentMonitorObserver.ThermalLevel.rawValue.getter(char a1)
{
  return qword_100EE5CF0[a1];
}

BOOL sub_100B64D10(char *a1, char *a2)
{
  return qword_100EE5CF0[*a1] == qword_100EE5CF0[*a2];
}

Swift::Int sub_100B64D34()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100EE5CF0[v1]);
  return Hasher._finalize()();
}

void sub_100B64D80()
{
  char *v0;

  Hasher._combine(_:)(qword_100EE5CF0[*v0]);
}

Swift::Int sub_100B64DB4(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100EE5CF0[v2]);
  return Hasher._finalize()();
}

uint64_t sub_100B64DFC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore26EnvironmentMonitorObserverC12ThermalLevelO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100B64E24(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100EE5CF0[*v1];
}

BOOL sub_100B64E3C(char *a1, char *a2)
{
  return qword_100EE5CF0[*a1] < qword_100EE5CF0[*a2];
}

BOOL sub_100B64E60(char *a1, char *a2)
{
  return qword_100EE5CF0[*a2] >= qword_100EE5CF0[*a1];
}

BOOL sub_100B64E84(char *a1, char *a2)
{
  return qword_100EE5CF0[*a1] >= qword_100EE5CF0[*a2];
}

BOOL sub_100B64EA8(char *a1, char *a2)
{
  return qword_100EE5CF0[*a2] < qword_100EE5CF0[*a1];
}

unint64_t EnvironmentMonitorObserver.init()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  char *v11;
  objc_super v12;
  id v13;
  _BYTE v14[24];

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor;
  v4 = (void *)objc_opt_self(ICEnvironmentMonitor);
  v5 = v0;
  v6 = objc_msgSend(v4, "sharedMonitor");
  *(_QWORD *)&v1[v3] = v6;
  v7 = objc_msgSend(v6, "networkType");
  swift_beginAccess(&v5[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType], v14, 33, 0);
  v13 = v7;
  type metadata accessor for ICEnvironmentNetworkType(0);
  Published.init(initialValue:)(&v13, v8);
  swift_endAccess(v14);
  LOBYTE(v7) = objc_msgSend(v6, "isNetworkConstrained");
  swift_beginAccess(&v5[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained], v14, 33, 0);
  LOBYTE(v13) = (_BYTE)v7;
  Published.init(initialValue:)(&v13, &type metadata for Bool);
  swift_endAccess(v14);
  result = (unint64_t)objc_msgSend(v6, "currentThermalLevel");
  if (HIDWORD(result))
  {
    __break(1u);
  }
  else
  {
    v10 = sub_100B65920(result);
    swift_beginAccess(&v5[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel], v14, 33, 0);
    LOBYTE(v13) = v10;
    Published.init(initialValue:)(&v13, &type metadata for EnvironmentMonitorObserver.ThermalLevel);
    swift_endAccess(v14);

    v12.receiver = v5;
    v12.super_class = ObjectType;
    v11 = (char *)objc_msgSendSuper2(&v12, "init");
    objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor], "registerObserver:", v11);
    return (unint64_t)v11;
  }
  return result;
}

id EnvironmentMonitorObserver.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor], "unregisterObserver:", v0);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

double EnvironmentMonitorObserver.environmentMonitorDidChangeNetworkReachability(_:)(void *a1)
{
  return sub_100B65494(a1, (uint64_t)&unk_1010FE120, (uint64_t)&unk_1011DBE28);
}

uint64_t sub_100B6523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100B652A8, v8, v9);
}

uint64_t sub_100B652A8()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(*(id *)(v0 + 24), "isNetworkConstrained", swift_release(*(_QWORD *)(v0 + 32)).n128_f64[0]);
  KeyPath = swift_getKeyPath(&unk_100EE5B18);
  v4 = swift_getKeyPath(&unk_100EE5B40);
  *(_BYTE *)(v0 + 40) = v2;
  static Published.subscript.setter(v0 + 40, v1, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double EnvironmentMonitorObserver.environmentMonitorDidChangeNetworkType(_:)(void *a1)
{
  return sub_100B65494(a1, (uint64_t)&unk_1010FE148, (uint64_t)&unk_1011DBE38);
}

uint64_t sub_100B65368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100B653D4, v8, v9);
}

uint64_t sub_100B653D4()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(void **)(v0 + 24);
  v2 = objc_msgSend(*(id *)(v0 + 32), "networkType", swift_release(*(_QWORD *)(v0 + 40)).n128_f64[0]);
  KeyPath = swift_getKeyPath(&unk_100EE5AD0);
  v4 = swift_getKeyPath(&unk_100EE5AF8);
  *(_QWORD *)(v0 + 16) = v2;
  static Published.subscript.setter(v0 + 16, v1, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double EnvironmentMonitorObserver.environmentMonitorDidChangeThermalLevel(_:)(void *a1)
{
  return sub_100B65494(a1, (uint64_t)&unk_1010FE170, (uint64_t)&unk_1011DBE48);
}

double sub_100B65494(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  double result;
  uint64_t v17;

  v7 = sub_100007E8C((uint64_t *)&unk_1011D8CF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = v3;
  v12 = a1;
  v14 = static MainActor.shared.getter(v13);
  v15 = (_QWORD *)swift_allocObject(a2, 48, 7);
  v15[2] = v14;
  v15[3] = &protocol witness table for MainActor;
  v15[4] = v11;
  v15[5] = v12;
  sub_100A3F884((uint64_t)v9, a3, (uint64_t)v15);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100B6558C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100B655F8, v8, v9);
}

unint64_t sub_100B655F8()
{
  uint64_t v0;
  unint64_t result;
  void *v2;
  char v3;
  uint64_t KeyPath;
  uint64_t v5;

  result = (unint64_t)objc_msgSend(*(id *)(v0 + 24), "currentThermalLevel", swift_release().n128_f64[0]);
  if (HIDWORD(result))
  {
    __break(1u);
  }
  else
  {
    v2 = *(void **)(v0 + 16);
    v3 = sub_100B65920(result);
    KeyPath = swift_getKeyPath(&unk_100EE5B60);
    v5 = swift_getKeyPath(&unk_100EE5B88);
    *(_BYTE *)(v0 + 40) = v3;
    static Published.subscript.setter(v0 + 40, v2, KeyPath, v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

void sub_100B656B4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v9 = sub_100007E8C((uint64_t *)&unk_1011D8CF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  type metadata accessor for MainActor(0);
  v13 = a3;
  v14 = a1;
  v15 = v13;
  v17 = static MainActor.shared.getter(v16);
  v18 = (_QWORD *)swift_allocObject(a4, 48, 7);
  v18[2] = v17;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = v14;
  v18[5] = v15;
  sub_100A3F884((uint64_t)v11, a5, (uint64_t)v18);
  swift_release();

}

uint64_t EnvironmentMonitorObserver.ThermalLevel.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B657F8 + 4 * byte_100EE5A50[a1]))(0x6C616E696D6F6ELL, 0xE700000000000000);
}

uint64_t sub_100B657F8()
{
  return 0x746867696CLL;
}

uint64_t sub_100B6580C()
{
  return 0x6574617265646F6DLL;
}

uint64_t sub_100B65824()
{
  return 0x7976616568;
}

uint64_t sub_100B65838()
{
  return 0x676E697070617274;
}

uint64_t sub_100B65860()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_100B65874()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B658A4 + 4 * byte_100EE5A57[*v0]))(0x6C616E696D6F6ELL, 0xE700000000000000);
}

uint64_t sub_100B658A4()
{
  return 0x746867696CLL;
}

uint64_t sub_100B658B8()
{
  return 0x6574617265646F6DLL;
}

uint64_t sub_100B658D0()
{
  return 0x7976616568;
}

uint64_t sub_100B658E4()
{
  return 0x676E697070617274;
}

uint64_t sub_100B6590C()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_100B65920(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 10:
      result = 1;
      break;
    case 20:
      result = 2;
      break;
    case 30:
      result = 3;
      break;
    case 40:
      result = 4;
      break;
    case 50:
      result = 5;
      break;
    default:
      result = 6;
      break;
  }
  return result;
}

uint64_t _s9MusicCore26EnvironmentMonitorObserverC12ThermalLevelO8rawValueAESgSi_tcfC_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 6;
      break;
    case 1:
      result = 0;
      break;
    case 11:
      return result;
    case 21:
      result = 2;
      break;
    case 31:
      result = 3;
      break;
    case 41:
      result = 4;
      break;
    case 51:
      result = 5;
      break;
    default:
      result = 7;
      break;
  }
  return result;
}

uint64_t sub_100B659E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1011DBE24);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10006AEE4;
  return sub_100B6523C(a1, v4, v5, v7, v6);
}

uint64_t sub_100B65A5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1011DBE34);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10006AEE4;
  return sub_100B65368(a1, v4, v5, v7, v6);
}

uint64_t sub_100B65AD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1011DBE44);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10006AEE4;
  return sub_100B6558C(a1, v4, v5, v7, v6);
}

unint64_t sub_100B65B54()
{
  unint64_t result;

  result = qword_1011DBE50;
  if (!qword_1011DBE50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EnvironmentMonitorObserver.ThermalLevel, &type metadata for EnvironmentMonitorObserver.ThermalLevel);
    atomic_store(result, (unint64_t *)&qword_1011DBE50);
  }
  return result;
}

uint64_t sub_100B65B98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100AE9FA4(a1, a2, a3, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_1011DBDE8);
}

uint64_t sub_100B65BBC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100AEA010(a1, a2, a3, a4, (uint64_t *)&unk_1011DBF30, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_1011DBDE8);
}

uint64_t sub_100B65BE8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100AE9FA4(a1, a2, a3, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1011D8370);
}

uint64_t sub_100B65C0C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100AEA010(a1, a2, a3, a4, &qword_1011D8378, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1011D8370);
}

uint64_t sub_100B65C38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100AE9FA4(a1, a2, a3, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_1011DBE08);
}

uint64_t sub_100B65C5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100AEA010(a1, a2, a3, a4, (uint64_t *)&unk_1011DBF20, &OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_1011DBE08);
}

uint64_t sub_100B65C88()
{
  return type metadata accessor for EnvironmentMonitorObserver(0);
}

uint64_t type metadata accessor for EnvironmentMonitorObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_1011DBEE0;
  if (!qword_1011DBEE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EnvironmentMonitorObserver);
  return result;
}

void sub_100B65CCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_100B65D98(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000EA598(319, (unint64_t *)&qword_1011D83E8, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000EA598(319, &qword_1011DBF00, (uint64_t)&type metadata for EnvironmentMonitorObserver.ThermalLevel);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
        swift_updateClassMetadata2(a1, 256, 4, v8, a1 + 80);
      }
    }
  }
}

void sub_100B65D98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1011DBEF0)
  {
    type metadata accessor for ICEnvironmentNetworkType(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1011DBEF0);
  }
}

uint64_t storeEnumTagSinglePayload for EnvironmentMonitorObserver.ThermalLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100B65E38 + 4 * byte_100EE5ACA[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100B65E6C + 4 * byte_100EE5AC5[v4]))();
}

uint64_t sub_100B65E6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B65E74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B65E7CLL);
  return result;
}

uint64_t sub_100B65E88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B65E90);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100B65E94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B65E9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentMonitorObserver.ThermalLevel()
{
  return &type metadata for EnvironmentMonitorObserver.ThermalLevel;
}

uint64_t sub_100B65EC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1011DBE34);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10005AEE4;
  return sub_100B65368(a1, v4, v5, v7, v6);
}

uint64_t *ExplicitRestrictionsController.shared.unsafeMutableAddressor()
{
  if (qword_1011D2508 != -1)
    swift_once(&qword_1011D2508, sub_100B66094);
  return &static ExplicitRestrictionsController.shared;
}

uint64_t ExplicitRestrictionsController.accountVerificationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v15[24];

  v3 = sub_100007E8C(&qword_1011D2AE0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)&v6 = swift_beginAccess(v1 + 24, v15, 0, 0).n128_u64[0];
  v7 = *(void **)(v1 + 24);
  if (v7)
  {
    v8 = objc_msgSend(v7, "verificationURL", v6);
    if (v8)
    {
      v9 = v8;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

      v10 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    else
    {
      v13 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
    }
    return sub_10098B02C((uint64_t)v5, a1);
  }
  else
  {
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

uint64_t sub_100B66094()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for ExplicitRestrictionsController();
  swift_allocObject(v0, 56, 7);
  result = sub_100B6610C();
  static ExplicitRestrictionsController.shared = result;
  return result;
}

double static ExplicitRestrictionsController.shared.getter()
{
  double result;

  if (qword_1011D2508 != -1)
    swift_once(&qword_1011D2508, sub_100B66094);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t sub_100B6610C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  int v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v26[24];
  _BYTE v27[24];

  v1 = v0;
  *(_BYTE *)(v0 + 16) = 0;
  v2 = v0 + 16;
  *(_QWORD *)(v0 + 24) = 0;
  if (qword_1011D2510 != -1)
    swift_once(&qword_1011D2510, sub_100B66A48);
  v3 = static ExplicitRestrictionsController.symbols;
  v4 = unk_10124EEC0;
  *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 40) = v4;
  v5 = (void *)objc_opt_self(MPRestrictionsMonitor);
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(v5, "sharedRestrictionsMonitor");
  LODWORD(v5) = objc_msgSend(v6, "allowsExplicitContent");
  swift_beginAccess(v2, v27, 1, 0);
  v7 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v1 + 16) = (_BYTE)v5;
  if ((_DWORD)v5 == v7)
  {
    v8 = v6;
  }
  else
  {
    v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1011D2518 != -1)
      swift_once(&qword_1011D2518, sub_100B66B4C);
    objc_msgSend(v8, "postNotificationName:object:", qword_10124EEE0, v1);

  }
  sub_100B66468();
  v9 = objc_msgSend((id)objc_opt_self(ICAgeVerificationManager), "defaultManager");
  v10 = objc_msgSend(v9, "ageVerificationState");

  sub_100B6689C(v10);
  type metadata accessor for Whitetail.Binding();
  v11 = (void *)MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification;
  v12 = swift_allocObject(&unk_1010FE3B8, 24, 7);
  swift_weakInit(v12 + 16, v1);
  v13 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)((uint64_t)v11, 1, (uint64_t)sub_100B66D08, v12);
  swift_beginAccess(v1 + 48, v26, 33, 0);
  swift_retain(v13);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
  v16 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v16 >= v15 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
  specialized Array._endMutation()(v17);
  swift_endAccess(v26);
  v18 = (void *)ICAgeVerificationStateDidChangeNotification;
  v19 = swift_allocObject(&unk_1010FE3B8, 24, 7);
  swift_weakInit(v19 + 16, v1);
  v20 = Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)((uint64_t)v18, 1, (uint64_t)sub_100B66D10, v19);
  swift_beginAccess(v1 + 48, v26, 33, 0);
  swift_retain(v20);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
  v23 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = *(_QWORD *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v23 >= v22 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
  v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v20);
  specialized Array._endMutation()(v24);
  swift_endAccess(v26);
  swift_release(v20);
  swift_release(v13);
  return v1;
}

double sub_100B66468()
{
  _QWORD *v0;
  double v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  _BYTE v9[24];

  *(_QWORD *)&v1 = swift_beginAccess(v0 + 3, v9, 0, 0).n128_u64[0];
  v2 = (void *)v0[3];
  if (v2 && objc_msgSend(v2, "treatment", v1) == (id)1)
  {
    if (qword_1011D2510 != -1)
      swift_once(&qword_1011D2510, sub_100B66A48);
    v3 = &qword_10124EEC8;
  }
  else
  {
    if (qword_1011D2510 != -1)
      swift_once(&qword_1011D2510, sub_100B66A48);
    v3 = &static ExplicitRestrictionsController.symbols;
  }
  v5 = *v3;
  v4 = v3[1];
  swift_beginAccess(v0 + 4, &v8, 1, 0);
  v6 = v0[5];
  v0[4] = v5;
  v0[5] = v4;
  swift_bridgeObjectRetain();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

void sub_100B66554(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  id v4;
  unsigned int v5;
  int v6;
  id v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend((id)objc_opt_self(MPRestrictionsMonitor), "sharedRestrictionsMonitor");
    v5 = objc_msgSend(v4, "allowsExplicitContent");
    swift_beginAccess(v3 + 16, &v8, 1, 0);
    v6 = *(unsigned __int8 *)(v3 + 16);
    *(_BYTE *)(v3 + 16) = v5;
    if (v5 == v6)
    {
      swift_release(v3);
      v7 = v4;
    }
    else
    {
      v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      if (qword_1011D2518 != -1)
        swift_once(&qword_1011D2518, sub_100B66B4C);
      objc_msgSend(v7, "postNotificationName:object:", qword_10124EEE0, v3);
      swift_release(v3);

    }
  }
}

double sub_100B66684(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  id v5;
  id v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend((id)objc_opt_self(ICAgeVerificationManager), "defaultManager");
    v6 = objc_msgSend(v5, "ageVerificationState");

    sub_100B6689C(v6);
    sub_100B66468();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

void *ExplicitRestrictionsController.explicitContentIsAllowed.getter()
{
  uint64_t v0;
  void *result;
  uint64_t v2;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  if (*(_BYTE *)(v0 + 16) != 1)
    return 0;
  swift_beginAccess(v0 + 24, &v2, 0, 0);
  result = *(void **)(v0 + 24);
  if (result)
    return (void *)(((unint64_t)objc_msgSend(result, "status") & 0xFFFFFFFFFFFFFFFDLL) == 1);
  return result;
}

void sub_100B6679C(char a1)
{
  uint64_t v1;
  int v3;
  int v4;
  id v5;
  _BYTE v6[24];

  v3 = a1 & 1;
  swift_beginAccess(v1 + 16, v6, 1, 0);
  v4 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v1 + 16) = a1;
  if (v4 != v3)
  {
    v5 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1011D2518 != -1)
      swift_once(&qword_1011D2518, sub_100B66B4C);
    objc_msgSend(v5, "postNotificationName:object:", qword_10124EEE0, v1);

  }
}

void *ExplicitRestrictionsController.ageVerification.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 24, v4, 0, 0);
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void sub_100B6689C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  _BYTE v10[24];

  v2 = v1;
  swift_beginAccess(v2 + 24, v10, 1, 0);
  v4 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  v5 = a1;
  v6 = v5;
  if (a1)
  {
    if (v4)
    {
      sub_100B66CA8();
      v7 = v4;
      v8 = v6;
      v9 = static NSObject.== infix(_:_:)(v8, v7);

      if ((v9 & 1) != 0)
        goto LABEL_9;
    }
  }
  else if (!v4)
  {
    v7 = 0;
    v8 = v5;
    goto LABEL_9;
  }
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1011D2518 != -1)
    swift_once(&qword_1011D2518, sub_100B66B4C);
  objc_msgSend(v8, "postNotificationName:object:", qword_10124EED8, v2);

  v7 = v6;
LABEL_9:

}

uint64_t *ExplicitRestrictionsController.symbols.unsafeMutableAddressor()
{
  if (qword_1011D2510 != -1)
    swift_once(&qword_1011D2510, sub_100B66A48);
  return &static ExplicitRestrictionsController.symbols;
}

uint64_t ExplicitRestrictionsController.symbol.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 32, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100B66A48()
{
  static ExplicitRestrictionsController.symbols = 3028656112;
  unk_10124EEC0 = 0xA400000000000000;
  qword_10124EEC8 = 11768802;
  unk_10124EED0 = 0xA300000000000000;
}

uint64_t static ExplicitRestrictionsController.symbols.getter()
{
  uint64_t v0;

  if (qword_1011D2510 != -1)
    swift_once(&qword_1011D2510, sub_100B66A48);
  v0 = static ExplicitRestrictionsController.symbols;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ExplicitRestrictionsController.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t ExplicitRestrictionsController.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

NSString sub_100B66B4C()
{
  NSString result;

  qword_10124EED8 = (uint64_t)String._bridgeToObjectiveC()();
  result = String._bridgeToObjectiveC()();
  qword_10124EEE0 = (uint64_t)result;
  return result;
}

uint64_t sub_100B66BB0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 16, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

void sub_100B66BF4(char *a1)
{
  sub_100B6679C(*a1);
}

id sub_100B66C18@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 24, v6, 0, 0);
  v4 = *(void **)(v3 + 24);
  *a2 = v4;
  return v4;
}

void sub_100B66C5C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_100B6689C(v1);
}

uint64_t type metadata accessor for ExplicitRestrictionsController()
{
  return objc_opt_self(_TtC9MusicCore30ExplicitRestrictionsController);
}

unint64_t sub_100B66CA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DBFF8;
  if (!qword_1011DBFF8)
  {
    v1 = objc_opt_self(ICAgeVerificationState);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DBFF8);
  }
  return result;
}

uint64_t sub_100B66CE4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100B66D08()
{
  uint64_t v0;

  sub_100B66554(v0);
}

double sub_100B66D10()
{
  uint64_t v0;

  return sub_100B66684(v0);
}

uint64_t LaunchURL.GenericHandler.perform(withURL:)(uint64_t a1, int *a2)
{
  _QWORD *v2;
  __n128 v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v2[2] = type metadata accessor for MainActor(0);
  v2[3] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v6 = (_QWORD *)swift_task_alloc(a2[1]);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100B66DA0;
  return v8(a1);
}

uint64_t sub_100B66DA0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_100B66E80;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = a1 & 1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_100B66E48;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_100B66E48()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(unsigned __int8 *)(v0 + 48), v1);
}

uint64_t sub_100B66E80()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v1);
}

uint64_t sub_100B66EB8(uint64_t a1)
{
  int **v1;
  _QWORD *v2;
  int *v4;
  __n128 v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *v1;
  v2[2] = type metadata accessor for MainActor(0);
  v2[3] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc(v4[1]);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_100B66F3C;
  return v8(a1);
}

uint64_t sub_100B66F3C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_100B68B14;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = a1 & 1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_100B68B10;
  }
  return swift_task_switch(v10, v7, v9);
}

_QWORD *static LaunchURL.ArrayBuilder.buildBlock(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  _BYTE v11[40];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = a1 + 32;
  swift_bridgeObjectRetain();
  v4 = _swiftEmptyArrayStorage;
  do
  {
    sub_100B67118(v3, (uint64_t)v11);
    sub_100B67160((uint64_t)v11, (uint64_t)&v8);
    if (v9)
    {
      sub_100064C48(&v8, (uint64_t)v10);
      sub_100064C48(v10, (uint64_t)&v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1009BA92C(0, v4[2] + 1, 1, v4);
      v6 = v4[2];
      v5 = v4[3];
      if (v6 >= v5 >> 1)
        v4 = sub_1009BA92C((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
      v4[2] = v6 + 1;
      sub_100064C48(&v8, (uint64_t)&v4[5 * v6 + 4]);
    }
    else
    {
      sub_100B671A8((uint64_t)&v8);
    }
    v3 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(a1);
  return v4;
}

uint64_t sub_100B67118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DC008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B67160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DC008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B671A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DC008);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *static LaunchURL.ArrayBuilder.buildOptional(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6[2];

  sub_100B67118(a1, (uint64_t)&v4);
  if (v5)
  {
    sub_100064C48(&v4, (uint64_t)v6);
    v1 = sub_100007E8C(&qword_1011D3D88);
    v2 = swift_allocObject(v1, 72, 7);
    *(_OWORD *)(v2 + 16) = xmmword_100EA7AA0;
    sub_100064C48(v6, v2 + 32);
  }
  else
  {
    sub_100B671A8((uint64_t)&v4);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v2;
}

uint64_t sub_100B67274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007E8C(&qword_1011D3D88);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100EA7AA0;
  sub_100064C78(a1, v3 + 32);
  return v3;
}

uint64_t LaunchURL.Resolver.init(perform:handlerBuilder:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t result;

  v5 = a1 & 1;
  type metadata accessor for LaunchURL.Resolver(0);
  v6 = Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0xD000000000000012, 0x8000000100E4A800);
  *(_BYTE *)a3 = v5;
  result = a2(v6);
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t LaunchURL.Resolver.perform(withURL:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[36] = a1;
  v2[37] = v1;
  v3 = type metadata accessor for URL(0);
  v2[38] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[39] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v5);
  v2[41] = swift_task_alloc(v5);
  v2[42] = swift_task_alloc(v5);
  v2[43] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[44] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[45] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[46] = swift_task_alloc(v8);
  v2[47] = swift_task_alloc(v8);
  v2[48] = swift_task_alloc(v8);
  v2[49] = swift_task_alloc(v8);
  return swift_task_switch(sub_100B67424, 0, 0);
}

uint64_t sub_100B67424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __n128 v29;
  void (*v30)(uint64_t, uint64_t, __n128);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __n128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  void (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t, uint64_t, __n128);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  _QWORD *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, __n128);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  int *v116;
  uint64_t v117;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(int *)(type metadata accessor for LaunchURL.Resolver(0) + 24);
  *(_DWORD *)(v0 + 488) = v9;
  v10 = v8 + v9;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 400) = v11;
  v11(v1, v10, v2);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 408) = v12;
  v13 = v12(v4, v7, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 392);
  v19 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 360);
  v20 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 312);
  if (v16)
  {
    v113 = *(_QWORD *)(v0 + 392);
    v23 = swift_slowAlloc(12, -1);
    v111 = v19;
    v24 = swift_slowAlloc(32, -1);
    v117 = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = sub_100B68544();
    v26 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
    v28 = v27;
    *(_QWORD *)(v23 + 4) = sub_10099627C(v26, v27, &v117);
    v29 = swift_bridgeObjectRelease(v28);
    v30 = *(void (**)(uint64_t, uint64_t, __n128))(v21 + 8);
    v30(v20, v22, v29);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Evaluating URL=%{public}s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v31 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v31(v113, v111);
  }
  else
  {
    v30 = *(void (**)(uint64_t, uint64_t, __n128))(v21 + 8);
    ((void (*)(_QWORD, _QWORD))v30)(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));

    v31 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v31(v17, v19);
  }
  *(_QWORD *)(v0 + 416) = v31;
  *(_QWORD *)(v0 + 424) = v30;
  v32 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 280) = _swiftEmptyArrayStorage;
  v33 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v0 + 432) = v33;
  v34 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v0 + 440) = v34;
  if (v34)
  {
    *(_QWORD *)(v0 + 456) = v30;
    *(_QWORD *)(v0 + 464) = 0;
    v112 = v30;
    v114 = v31;
    *(_QWORD *)(v0 + 448) = v31;
    v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v35 = *(_QWORD *)(v0 + 384);
    v36 = *(_QWORD *)(v0 + 352);
    v37 = *(_QWORD *)(v0 + 336);
    v38 = *(_QWORD *)(v0 + 304);
    v39 = v33 + 32;
    v40 = v32 + *(int *)(v0 + 488);
    v41 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRetain();
    sub_100064C78(v39, v0 + 56);
    v106(v35, v40, v36);
    v109(v37, v41, v38);
    v42 = sub_100064C78(v0 + 56, v0 + 96);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.info.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(_QWORD *)(v0 + 384);
    v47 = *(_QWORD *)(v0 + 352);
    v48 = *(_QWORD *)(v0 + 336);
    v49 = *(_QWORD *)(v0 + 304);
    if (v45)
    {
      v107 = *(_QWORD *)(v0 + 352);
      v50 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(64, -1);
      v117 = v51;
      *(_DWORD *)v50 = 136446466;
      v52 = sub_100B68544();
      v53 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v49, v52);
      v105 = v46;
      v55 = v54;
      *(_QWORD *)(v50 + 4) = sub_10099627C(v53, v54, &v117);
      v56 = swift_bridgeObjectRelease(v55);
      v112(v48, v49, v56);
      *(_WORD *)(v50 + 12) = 2082;
      sub_100064C78(v0 + 96, v0 + 16);
      v57 = sub_100007E8C(&qword_1011D3D90);
      v58 = (char *)String.init<A>(describing:)(v0 + 16, v57);
      v60 = v59;
      *(_QWORD *)(v50 + 14) = sub_10099627C(v58, v59, &v117);
      swift_bridgeObjectRelease(v60);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)(v0 + 96));
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Resolving URL=%{public}s with handler=%{public}s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      v61 = v105;
      v62 = v107;
    }
    else
    {
      ((void (*)(_QWORD, _QWORD))v112)(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)(v0 + 96));

      v61 = v46;
      v62 = v47;
    }
    v114(v61, v62);
    v90 = *(_QWORD *)(v0 + 80);
    v91 = *(_QWORD *)(v0 + 88);
    sub_100007E68((_QWORD *)(v0 + 56), v90);
    v92 = *(int **)(v91 + 8);
    v116 = (int *)((char *)v92 + *v92);
    v93 = (_QWORD *)swift_task_alloc(v92[1]);
    *(_QWORD *)(v0 + 472) = v93;
    *v93 = v0;
    v93[1] = sub_100B67B0C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v116)(*(_QWORD *)(v0 + 288), v90, v91);
  }
  else
  {
    v63 = v0 + 280;
    v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v65 = *(_QWORD *)(v0 + 320);
    v66 = *(_QWORD *)(v0 + 304);
    v67 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 368), v32 + *(int *)(v0 + 488), *(_QWORD *)(v0 + 352));
    v64(v65, v67, v66);
    v68 = *(_QWORD *)(v0 + 280);
    v69 = swift_bridgeObjectRetain_n(v68, 2);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.info.getter();
    v72 = os_log_type_enabled(v70, v71);
    v73 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v74 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 424);
    v75 = *(_QWORD *)(v0 + 368);
    v115 = *(_QWORD *)(v0 + 352);
    v76 = *(_QWORD *)(v0 + 320);
    v77 = *(_QWORD *)(v0 + 304);
    if (v72)
    {
      v110 = *(_QWORD *)(v0 + 368);
      v78 = swift_slowAlloc(22, -1);
      v79 = swift_slowAlloc(64, -1);
      v117 = v79;
      *(_DWORD *)v78 = 136446466;
      v80 = sub_100B68544();
      v81 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v77, v80);
      v108 = v73;
      v83 = v82;
      *(_QWORD *)(v78 + 4) = sub_10099627C(v81, v82, &v117);
      v84 = swift_bridgeObjectRelease(v83);
      v74(v76, v77, v84);
      *(_WORD *)(v78 + 12) = 2082;
      swift_bridgeObjectRetain();
      v85 = sub_100007E8C(&qword_1011D3D90);
      v86 = (char *)Array.description.getter(v68, v85);
      v88 = v87;
      swift_bridgeObjectRelease(v68);
      *(_QWORD *)(v78 + 14) = sub_10099627C(v86, v88, &v117);
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease_n(v68, 2);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Successfully evaluated URL=%{public}s using handlers=%{public}s", (uint8_t *)v78, 0x16u);
      swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
      v89 = v79;
      v63 = v0 + 280;
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      v108(v110, v115);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD))v74)(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
      swift_bridgeObjectRelease_n(v68, 2);

      v73(v75, v115);
    }
    v95 = *(_QWORD *)(v0 + 384);
    v96 = *(_QWORD *)(v0 + 392);
    v98 = *(_QWORD *)(v0 + 368);
    v97 = *(_QWORD *)(v0 + 376);
    v100 = *(_QWORD *)(v0 + 336);
    v99 = *(_QWORD *)(v0 + 344);
    v102 = *(_QWORD *)(v0 + 320);
    v101 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v63, v0 + 256, 0, 0);
    v103 = *(_QWORD *)(v0 + 280);
    v104 = *(_QWORD *)(v103 + 16);
    swift_bridgeObjectRelease(v103);
    swift_task_dealloc(v96);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v104 != 0);
  }
}

uint64_t sub_100B67B0C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 472);
  *(_BYTE *)(v3 + 492) = a1;
  *(_QWORD *)(v3 + 480) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v3 + 432));
    swift_bridgeObjectRelease(*(_QWORD *)(v3 + 280));
    v5 = sub_100B683C0;
  }
  else
  {
    v5 = sub_100B67B8C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B67B8C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  void (**v29)(uint64_t, uint64_t, __n128);
  os_log_type_t v30;
  void (**v31)(uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t, uint64_t, __n128);
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  void (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t, uint64_t, __n128);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  __n128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  _QWORD *v110;
  void (*v111)(uint64_t, uint64_t, __n128);
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  void (*v116)(uint64_t, uint64_t, __n128);
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;

  v1 = (_QWORD *)(v0 + 56);
  v2 = (_QWORD *)(v0 + 280);
  if ((*(_BYTE *)(v0 + 492) & 1) != 0)
  {
    sub_100064C78(v0 + 56, v0 + 176);
    v3 = (_QWORD *)*v2;
    if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
      v3 = sub_1009BA92C(0, v3[2] + 1, 1, v3);
    v5 = v3[2];
    v4 = v3[3];
    if (v5 >= v4 >> 1)
      v3 = sub_1009BA92C((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
    v3[2] = v5 + 1;
    sub_100064C48((__int128 *)(v0 + 176), (uint64_t)&v3[5 * v5 + 4]);
    *v2 = v3;
  }
  v6 = (_BYTE *)(v0 + 492);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 288);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 296) + *(int *)(v0 + 488), *(_QWORD *)(v0 + 352));
  v7(v8, v10, v9);
  v11 = sub_100064C78(v0 + 56, v0 + 136);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  v14 = os_log_type_enabled(v12, v13);
  v117 = *(_QWORD *)(v0 + 352);
  v120 = *(_QWORD *)(v0 + 376);
  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 304);
  if (v14)
  {
    v111 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 424);
    v113 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v124 = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = sub_100B68544();
    v20 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    v22 = v21;
    *(_QWORD *)(v17 + 4) = sub_10099627C(v20, v21, &v124);
    v23 = v22;
    v1 = (_QWORD *)(v0 + 56);
    v24 = swift_bridgeObjectRelease(v23);
    v111(v15, v16, v24);
    *(_WORD *)(v17 + 12) = 2082;
    sub_100064C78(v0 + 136, v0 + 216);
    v25 = sub_100007E8C(&qword_1011D3D90);
    v26 = (char *)String.init<A>(describing:)(v0 + 216, v25);
    v28 = v27;
    *(_QWORD *)(v17 + 14) = sub_10099627C(v26, v27, &v124);
    swift_bridgeObjectRelease(v28);
    v29 = (void (**)(uint64_t, uint64_t, __n128))(v0 + 424);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)(v0 + 136));
    v30 = v13;
    v31 = (void (**)(uint64_t, uint64_t))(v0 + 416);
    _os_log_impl((void *)&_mh_execute_header, v12, v30, "Resolved URL=%{public}s with handler=%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v32 = v17;
    v6 = (_BYTE *)(v0 + 492);
    swift_slowDealloc(v32, -1, -1);

    v113(v120, v117);
  }
  else
  {
    v29 = (void (**)(uint64_t, uint64_t, __n128))(v0 + 456);
    v31 = (void (**)(uint64_t, uint64_t))(v0 + 448);
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 448);
    (*(void (**)(_QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));
    _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)(v0 + 136));

    v33(v120, v117);
  }
  v34 = *v29;
  v35 = *v31;
  if (*v6 == 1 && (**(_BYTE **)(v0 + 296) & 1) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v1);
    goto LABEL_17;
  }
  v36 = *(_QWORD *)(v0 + 440);
  v37 = *(_QWORD *)(v0 + 464) + 1;
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v1);
  if (v37 == v36)
  {
    v38 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
LABEL_17:
    v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v71 = *(_QWORD *)(v0 + 320);
    v72 = *(_QWORD *)(v0 + 304);
    v73 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v0 + 400))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 296) + *(int *)(v0 + 488), *(_QWORD *)(v0 + 352), v38);
    v70(v71, v73, v72);
    v74 = *(_QWORD *)(v0 + 280);
    v75 = swift_bridgeObjectRetain_n(v74, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.info.getter();
    v78 = os_log_type_enabled(v76, v77);
    v79 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v80 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 424);
    v81 = *(_QWORD *)(v0 + 368);
    v82 = *(_QWORD *)(v0 + 352);
    v83 = *(_QWORD *)(v0 + 320);
    v84 = *(_QWORD *)(v0 + 304);
    if (v78)
    {
      v122 = *(_QWORD *)(v0 + 368);
      v85 = swift_slowAlloc(22, -1);
      v119 = v82;
      v86 = swift_slowAlloc(64, -1);
      v124 = v86;
      *(_DWORD *)v85 = 136446466;
      v87 = sub_100B68544();
      v88 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v84, v87);
      v115 = v79;
      v90 = v89;
      *(_QWORD *)(v85 + 4) = sub_10099627C(v88, v89, &v124);
      v91 = swift_bridgeObjectRelease(v90);
      v80(v83, v84, v91);
      *(_WORD *)(v85 + 12) = 2082;
      swift_bridgeObjectRetain();
      v92 = sub_100007E8C(&qword_1011D3D90);
      v93 = (char *)Array.description.getter(v74, v92);
      v95 = v94;
      swift_bridgeObjectRelease(v74);
      *(_QWORD *)(v85 + 14) = sub_10099627C(v93, v95, &v124);
      swift_bridgeObjectRelease(v95);
      swift_bridgeObjectRelease_n(v74, 2);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Successfully evaluated URL=%{public}s using handlers=%{public}s", (uint8_t *)v85, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);

      v115(v122, v119);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD))v80)(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
      swift_bridgeObjectRelease_n(v74, 2);

      v79(v81, v82);
    }
    v96 = *(_QWORD *)(v0 + 384);
    v97 = *(_QWORD *)(v0 + 392);
    v99 = *(_QWORD *)(v0 + 368);
    v98 = *(_QWORD *)(v0 + 376);
    v101 = *(_QWORD *)(v0 + 336);
    v100 = *(_QWORD *)(v0 + 344);
    v103 = *(_QWORD *)(v0 + 320);
    v102 = *(_QWORD *)(v0 + 328);
    swift_beginAccess(v0 + 280, v0 + 256, 0, 0);
    v104 = *(_QWORD *)(v0 + 280);
    v105 = *(_QWORD *)(v104 + 16);
    swift_bridgeObjectRelease(v104);
    swift_task_dealloc(v97);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v105 != 0);
  }
  v116 = v34;
  v39 = *(_QWORD *)(v0 + 464) + 1;
  *(_QWORD *)(v0 + 456) = v34;
  *(_QWORD *)(v0 + 464) = v39;
  *(_QWORD *)(v0 + 448) = v35;
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
  v42 = *(_QWORD *)(v0 + 384);
  v118 = v35;
  v43 = *(_QWORD *)(v0 + 352);
  v44 = *(_QWORD *)(v0 + 336);
  v45 = *(_QWORD *)(v0 + 304);
  v46 = *(_QWORD *)(v0 + 288);
  v47 = *(_QWORD *)(v0 + 296) + *(int *)(v0 + 488);
  sub_100064C78(*(_QWORD *)(v0 + 432) + 40 * v39 + 32, (uint64_t)v1);
  v40(v42, v47, v43);
  v48 = (_QWORD *)(v0 + 96);
  v41(v44, v46, v45);
  v121 = v1;
  v49 = sub_100064C78((uint64_t)v1, v0 + 96);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.info.getter();
  v52 = os_log_type_enabled(v50, v51);
  v53 = *(_QWORD *)(v0 + 384);
  v54 = *(_QWORD *)(v0 + 352);
  v55 = *(_QWORD *)(v0 + 336);
  v56 = *(_QWORD *)(v0 + 304);
  if (v52)
  {
    v57 = swift_slowAlloc(22, -1);
    v114 = v54;
    v58 = swift_slowAlloc(64, -1);
    v124 = v58;
    *(_DWORD *)v57 = 136446466;
    v59 = sub_100B68544();
    v60 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v56, v59);
    v112 = v53;
    v62 = v61;
    *(_QWORD *)(v57 + 4) = sub_10099627C(v60, v61, &v124);
    v63 = swift_bridgeObjectRelease(v62);
    v116(v55, v56, v63);
    *(_WORD *)(v57 + 12) = 2082;
    sub_100064C78((uint64_t)v48, v0 + 16);
    v64 = sub_100007E8C(&qword_1011D3D90);
    v65 = (char *)String.init<A>(describing:)(v0 + 16, v64);
    v67 = v66;
    *(_QWORD *)(v57 + 14) = sub_10099627C(v65, v66, &v124);
    swift_bridgeObjectRelease(v67);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v48);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Resolving URL=%{public}s with handler=%{public}s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v57, -1, -1);

    v68 = v112;
    v69 = v114;
  }
  else
  {
    ((void (*)(_QWORD, _QWORD))v116)(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v48);

    v68 = v53;
    v69 = v54;
  }
  v118(v68, v69);
  v107 = *(_QWORD *)(v0 + 80);
  v108 = *(_QWORD *)(v0 + 88);
  sub_100007E68(v121, v107);
  v109 = *(int **)(v108 + 8);
  v123 = (int *)((char *)v109 + *v109);
  v110 = (_QWORD *)swift_task_alloc(v109[1]);
  *(_QWORD *)(v0 + 472) = v110;
  *v110 = v0;
  v110[1] = sub_100B67B0C;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v123)(*(_QWORD *)(v0 + 288), v107, v108);
}

uint64_t sub_100B683C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100B68460(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1011DC014);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100B684AC;
  return LaunchURL.Resolver.perform(withURL:)(a1);
}

uint64_t sub_100B684AC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc(v4);
  if (v1)
    v6 = 0;
  else
    v6 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t type metadata accessor for LaunchURL.Resolver(uint64_t a1)
{
  uint64_t result;

  result = qword_1011DC088;
  if (!qword_1011DC088)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LaunchURL.Resolver);
  return result;
}

unint64_t sub_100B68544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011D68B8;
  if (!qword_1011D68B8)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1011D68B8);
  }
  return result;
}

unint64_t sub_100B68590()
{
  unint64_t result;

  result = qword_1011DC020;
  if (!qword_1011DC020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LaunchURL.Resolver.PerformOption, &type metadata for LaunchURL.Resolver.PerformOption);
    atomic_store(result, (unint64_t *)&qword_1011DC020);
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchURL()
{
  return &type metadata for LaunchURL;
}

ValueMetadata *type metadata accessor for LaunchURL.GenericHandler()
{
  return &type metadata for LaunchURL.GenericHandler;
}

ValueMetadata *type metadata accessor for LaunchURL.ArrayBuilder()
{
  return &type metadata for LaunchURL.ArrayBuilder;
}

uint64_t *initializeBufferWithCopyOfBuffer for LaunchURL.Resolver(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v10);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Logger(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for LaunchURL.Resolver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Logger(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B688C8);
}

uint64_t sub_100B688C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B68950);
}

uint64_t sub_100B68950(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100B689C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100EE5E60;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LaunchURL.Resolver.PerformOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B68A90 + 4 * byte_100EE5D85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B68AC4 + 4 * asc_100EE5D80[v4]))();
}

uint64_t sub_100B68AC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B68ACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B68AD4);
  return result;
}

uint64_t sub_100B68AE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B68AE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B68AEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B68AF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LaunchURL.Resolver.PerformOption()
{
  return &type metadata for LaunchURL.Resolver.PerformOption;
}

char *LifecyclePatrol.isEnabled.unsafeMutableAddressor()
{
  return &static LifecyclePatrol.isEnabled;
}

uint64_t static LifecyclePatrol.isEnabled.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static LifecyclePatrol.isEnabled, v1, 0, 0);
  return static LifecyclePatrol.isEnabled;
}

uint64_t static LifecyclePatrol.isEnabled.setter(char a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static LifecyclePatrol.isEnabled, v3, 1, 0);
  static LifecyclePatrol.isEnabled = a1;
  return result;
}

uint64_t (*static LifecyclePatrol.isEnabled.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static LifecyclePatrol.isEnabled, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t LifecyclePatrol.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, 0);
  return v1;
}

uint64_t LifecyclePatrol.init()()
{
  uint64_t v0;

  swift_unknownObjectWeakInit(v0 + 16, 0);
  return v0;
}

double LifecyclePatrol.didInit(_:)()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = v0;
  *(_QWORD *)&result = swift_beginAccess(&static LifecyclePatrol.isEnabled, v14, 0, 0).n128_u64[0];
  if (static LifecyclePatrol.isEnabled == 1)
  {
    v3 = sub_1009E0478();
    v11 = (void *)static OS_dispatch_queue.main.getter(v3, v4, v5, v6, v7, v8, v9, v10);
    v12 = swift_allocObject(&unk_1010FE588, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16);
    v13 = swift_allocObject(&unk_1010FE5B0, 32, 7);
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v1;
    swift_retain();
    swift_retain();
    OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)sub_100B69000, v13, 1.0);

    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_100B68D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

double sub_100B68D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t ObjectType;
  uint64_t v25;
  _BYTE v26[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    v7 = a2 + 16;
    v8 = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (v8)
    {
      v9 = v8;
      if (qword_1011D2520 != -1)
        swift_once(&qword_1011D2520, sub_100B690C4);
      v10 = type metadata accessor for Logger(0);
      sub_100048B14(v10, (uint64_t)qword_1011DC0D0);
      swift_unknownObjectRetain_n(v6, 4);
      v11 = swift_unknownObjectRetain_n(v9, 2);
      v12 = Logger.logObject.getter(v11);
      v14 = static os_log_type_t.fault.getter(v13);
      if (os_log_type_enabled(v12, v14))
      {
        v15 = swift_slowAlloc(32, -1);
        v16 = swift_slowAlloc(96, -1);
        v25 = v16;
        *(_DWORD *)v15 = 136446722;
        ObjectType = swift_getObjectType();
        v17 = sub_100007E8C(&qword_1011DC1B0);
        v18 = (char *)String.init<A>(describing:)(&ObjectType, v17);
        *(_QWORD *)(v15 + 4) = sub_10099627C(v18, v19, &v25);
        swift_unknownObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2082;
        ObjectType = v6;
        v20 = (char *)String.init<A>(describing:)(&ObjectType, &type metadata for UnsafeMutableRawPointer);
        *(_QWORD *)(v15 + 14) = sub_10099627C(v20, v21, &v25);
        swift_unknownObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 22) = 2082;
        ObjectType = v9;
        v22 = (char *)String.init<A>(describing:)(&ObjectType, &type metadata for UnsafeMutableRawPointer);
        *(_QWORD *)(v15 + 24) = sub_10099627C(v22, v23, &v25);
        swift_unknownObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v14, "A new instance of %{public}s<%{public}s> while one already exists <%{public}s>", (uint8_t *)v15, 0x20u);
        swift_arrayDestroy(v16, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);
        swift_unknownObjectRelease(v9);

      }
      else
      {

        swift_unknownObjectRelease_n(v6, 4);
        swift_unknownObjectRelease_n(v9, 3);
      }
    }
    swift_unknownObjectWeakAssign(v7, v6);
    *(_QWORD *)&result = swift_unknownObjectRelease(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_100B68FD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_100B69000()
{
  uint64_t v0;

  return sub_100B68D4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double LifecyclePatrol.willDeinit(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v5;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v5 = Strong;
    *(_QWORD *)&result = swift_unknownObjectRelease(Strong).n128_u64[0];
    if (v5 == a1)
      *(_QWORD *)&result = swift_unknownObjectWeakAssign(v1 + 16, 0).n128_u64[0];
  }
  return result;
}

uint64_t LifecyclePatrol.deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10013C71C(v2 + 16, a2);
  return v2;
}

uint64_t LifecyclePatrol.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10013C71C(v2 + 16, a2);
  return swift_deallocClassInstance(v2, 24, 7);
}

uint64_t type metadata accessor for LifecyclePatrol()
{
  return objc_opt_self(_TtC9MusicCore15LifecyclePatrol);
}

uint64_t sub_100B690C4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, qword_1011DC0D0);
  sub_100048B14(v0, (uint64_t)qword_1011DC0D0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0xD000000000000010, 0x8000000100E53430);
}

unint64_t sub_100B69144(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100007E8C(&qword_1011D59D0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v8 << 6);
      v13 = v8;
    }
    else
    {
      v14 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v14 >= v25)
      {
LABEL_33:
        sub_10004FA7C(a1);
        return (unint64_t)v3;
      }
      v15 = *(_QWORD *)(v26 + 8 * v14);
      v13 = v8 + 1;
      if (!v15)
      {
        v13 = v8 + 2;
        if (v8 + 2 >= v25)
          goto LABEL_33;
        v15 = *(_QWORD *)(v26 + 8 * v13);
        if (!v15)
        {
          v13 = v8 + 3;
          if (v8 + 3 >= v25)
            goto LABEL_33;
          v15 = *(_QWORD *)(v26 + 8 * v13);
          if (!v15)
          {
            v13 = v8 + 4;
            if (v8 + 4 >= v25)
              goto LABEL_33;
            v15 = *(_QWORD *)(v26 + 8 * v13);
            if (!v15)
            {
              v16 = v8 + 5;
              if (v8 + 5 >= v25)
                goto LABEL_33;
              v15 = *(_QWORD *)(v26 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v13 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_38;
                  if (v13 >= v25)
                    goto LABEL_33;
                  v15 = *(_QWORD *)(v26 + 8 * v13);
                  ++v16;
                  if (v15)
                    goto LABEL_26;
                }
              }
              v13 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v11 = (v15 - 1) & v15;
      v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }
    sub_100051FEC(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_10004FA40(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_100051FEC((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v27 = 0;
      v28 = 0;
      sub_10004FF60((uint64_t)v34, &qword_1011DC270);
      swift_bridgeObjectRelease(v28);
      sub_10004FA7C(a1);
      swift_release();
      return 0;
    }
    v17 = v27;
    v18 = v28;
    sub_10004FA40((uint64_t)v35 + 8, (uint64_t)v29);
    sub_10004FF60((uint64_t)v34, &qword_1011DC270);
    sub_100048ABC(v29, v30);
    *(_QWORD *)&v31 = v17;
    *((_QWORD *)&v31 + 1) = v18;
    sub_100048ABC(v30, v32);
    v19 = v31;
    sub_100048ABC(v32, v33);
    sub_100048ABC(v33, &v31);
    result = sub_10079C2C4(v19, *((uint64_t *)&v19 + 1));
    v20 = result;
    if ((v21 & 1) != 0)
    {
      v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      *(_OWORD *)v9 = v19;
      v10 = (_QWORD *)(v3[7] + 32 * v20);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v10);
      result = (unint64_t)sub_100048ABC(&v31, v10);
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    result = (unint64_t)sub_100048ABC(&v31, (_OWORD *)(v3[7] + 32 * result));
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_36;
    v3[2] = v24;
LABEL_8:
    v8 = v13;
    v6 = v11;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_100B69514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t result;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[40];
  _OWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100007E8C(&qword_1011DC268);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v5) >> 6;
  v7 = (char *)v44 + 8;
  v8 = (char *)v41 + 8;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v34 = v1;
  while (1)
  {
    if (v6)
    {
      v16 = (v6 - 1) & v6;
      v17 = __clz(__rbit64(v6)) | (v10 << 6);
      v18 = v10;
    }
    else
    {
      v19 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v19 >= v35)
      {
LABEL_36:
        sub_10004FA7C(v1);
        return (unint64_t)v3;
      }
      v20 = *(_QWORD *)(v36 + 8 * v19);
      v18 = v10 + 1;
      if (!v20)
      {
        v18 = v10 + 2;
        if (v10 + 2 >= v35)
          goto LABEL_36;
        v20 = *(_QWORD *)(v36 + 8 * v18);
        if (!v20)
        {
          v18 = v10 + 3;
          if (v10 + 3 >= v35)
            goto LABEL_36;
          v20 = *(_QWORD *)(v36 + 8 * v18);
          if (!v20)
          {
            v18 = v10 + 4;
            if (v10 + 4 >= v35)
              goto LABEL_36;
            v20 = *(_QWORD *)(v36 + 8 * v18);
            if (!v20)
            {
              v21 = v10 + 5;
              if (v10 + 5 >= v35)
                goto LABEL_36;
              v20 = *(_QWORD *)(v36 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v18 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_41;
                  if (v18 >= v35)
                    goto LABEL_36;
                  v20 = *(_QWORD *)(v36 + 8 * v18);
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v18 = v10 + 5;
            }
          }
        }
      }
LABEL_26:
      v16 = (v20 - 1) & v20;
      v17 = __clz(__rbit64(v20)) + (v18 << 6);
    }
    sub_100051FEC(*(_QWORD *)(v1 + 48) + 40 * v17, (uint64_t)v43);
    sub_10004FA40(*(_QWORD *)(v1 + 56) + 32 * v17, (uint64_t)v7);
    v41[0] = v44[0];
    v41[1] = v44[1];
    v42 = v45;
    v40[0] = v43[0];
    v40[1] = v43[1];
    sub_100051FEC((uint64_t)v40, (uint64_t)v39);
    if (!swift_dynamicCast(&v37, v39, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v37 = 0;
      v38 = 0;
      sub_10004FF60((uint64_t)v40, &qword_1011DC270);
      v33 = v38;
LABEL_35:
      swift_bridgeObjectRelease(v33);
      sub_10004FA7C(v1);
      swift_release(v3);
      return 0;
    }
    v23 = v37;
    v22 = v38;
    sub_10004FA40((uint64_t)v8, (uint64_t)v39);
    sub_10004FF60((uint64_t)v40, &qword_1011DC270);
    v24 = sub_100007E8C(&qword_1011D5AB8);
    if ((swift_dynamicCast(&v37, v39, (char *)&type metadata for Any + 8, v24, 6) & 1) == 0)
    {
      v37 = 0;
      swift_bridgeObjectRelease(v22);
      v33 = v37;
      goto LABEL_35;
    }
    v25 = v18;
    v26 = v37;
    result = sub_10079C2C4(v23, v22);
    v27 = result;
    if ((v28 & 1) != 0)
    {
      v11 = v8;
      v12 = v7;
      v13 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v13[1]);
      *v13 = v23;
      v13[1] = v22;
      v14 = v3[7];
      v15 = 8 * v27;
      result = swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15));
      *(_QWORD *)(v14 + v15) = v26;
      v7 = v12;
      v8 = v11;
      v1 = v34;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v29 = (uint64_t *)(v3[6] + 16 * result);
    *v29 = v23;
    v29[1] = v22;
    *(_QWORD *)(v3[7] + 8 * result) = v26;
    v30 = v3[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_39;
    v3[2] = v32;
LABEL_8:
    v10 = v25;
    v6 = v16;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_100B698EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  _QWORD v43[2];
  uint64_t v44;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100007E8C((uint64_t *)&unk_1011D59C0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v7 = &v44;
  v36 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (uint64_t *)&unk_1011DC278;
  v10 = (uint64_t *)&unk_1011D8950;
  v11 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v6)
    {
      v39 = (v6 - 1) & v6;
      v40 = v8;
      v19 = __clz(__rbit64(v6)) | (v8 << 6);
    }
    else
    {
      v20 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_36;
      if (v20 >= v36)
      {
LABEL_33:
        sub_10004FA7C(v1);
        return;
      }
      v21 = *(_QWORD *)(v37 + 8 * v20);
      v22 = v8 + 1;
      if (!v21)
      {
        v22 = v8 + 2;
        if (v8 + 2 >= v36)
          goto LABEL_33;
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          v22 = v8 + 3;
          if (v8 + 3 >= v36)
            goto LABEL_33;
          v21 = *(_QWORD *)(v37 + 8 * v22);
          if (!v21)
          {
            v22 = v8 + 4;
            if (v8 + 4 >= v36)
              goto LABEL_33;
            v21 = *(_QWORD *)(v37 + 8 * v22);
            if (!v21)
            {
              v23 = v8 + 5;
              if (v8 + 5 >= v36)
                goto LABEL_33;
              v21 = *(_QWORD *)(v37 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  v22 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_37;
                  if (v22 >= v36)
                    goto LABEL_33;
                  v21 = *(_QWORD *)(v37 + 8 * v22);
                  ++v23;
                  if (v21)
                    goto LABEL_26;
                }
              }
              v22 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v39 = (v21 - 1) & v21;
      v40 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v26 = *v24;
    v25 = v24[1];
    sub_10004FA40(*(_QWORD *)(v1 + 56) + 32 * v19, (uint64_t)v7);
    v43[0] = v26;
    v43[1] = v25;
    sub_10004FA40((uint64_t)v7, (uint64_t)v42);
    swift_bridgeObjectRetain_n(v25, 2);
    sub_10004FF60((uint64_t)v43, v9);
    v27 = sub_100007E8C(v10);
    if (!swift_dynamicCast(&v41, v42, v11, v27, 6))
    {
      v41 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10004FA7C(v1);
      swift_release();
      return;
    }
    v28 = v41;
    v29 = sub_10079C2C4(v26, v25);
    v30 = v29;
    if ((v31 & 1) != 0)
    {
      v38 = v28;
      v12 = v11;
      v13 = v10;
      v14 = v7;
      v15 = v1;
      v16 = v9;
      v17 = (uint64_t *)(v3[6] + 16 * v29);
      swift_bridgeObjectRelease();
      *v17 = v26;
      v17[1] = v25;
      v9 = v16;
      v1 = v15;
      v7 = v14;
      v10 = v13;
      v11 = v12;
      v18 = v3[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v18 + 8 * v30) = v38;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v29;
    v32 = (uint64_t *)(v3[6] + 16 * v29);
    *v32 = v26;
    v32[1] = v25;
    *(_QWORD *)(v3[7] + 8 * v29) = v28;
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_35;
    v3[2] = v35;
LABEL_8:
    v6 = v39;
    v8 = v40;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_100B69C6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  unsigned __int8 v23;

  v5 = *v2;
  v6 = (os_unfair_lock_s *)v2[2];
  v7 = (uint64_t)&v6[4];
  v8 = v6 + 11;
  os_unfair_lock_lock(v6 + 11);
  sub_100B6A258(v7, v5, (uint64_t)v22);
  os_unfair_lock_unlock(v8);
  v9 = (void *)v22[0];
  if (v22[0])
  {
    v10 = v22[1];
    v21 = v22[2];
    v20 = v23;
    swift_bridgeObjectRetain();
    v11 = v9;
    v12 = sub_100B6A4B0(v11, a1, a2);
    v14 = v13;
    v16 = v15;
    v19 = (uint64_t)&v19;
    v18 = v17 & 1;
    os_unfair_lock_lock(v8);
    sub_100B6AA50(v7, v12, v14, v16, v18);
    os_unfair_lock_unlock(v8);
    sub_100B6B998(v9, v10);
    swift_bridgeObjectRelease(v10);

    swift_bridgeObjectRelease(v14);
  }
}

_QWORD *sub_100B69DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSString v34;
  NSString v35;
  id v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  __n128 v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v51 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v51 - v18;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v20 = (void *)objc_opt_self(ICURLBagProvider);
  v21 = objc_msgSend(v20, "sharedBagProvider", swift_retain(a4).n128_f64[0]);
  LODWORD(a2) = objc_msgSend(v21, "useAMSBag");

  if (!(_DWORD)a2)
  {
    if (qword_1011D1D40 != -1)
      swift_once(&qword_1011D1D40, sub_100A68C6C);
    v38 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "UserDefaults enabled as source for cached musicTabs.", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v42 = swift_release(a4);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v42);
    goto LABEL_22;
  }
  if (qword_1011D1D88 != -1)
    swift_once(&qword_1011D1D88, sub_100A6D2D0);
  v22 = objc_msgSend((id)static ICClientInfo.music, "bagProfile");
  if (!v22)
  {
LABEL_17:
    if (qword_1011D1D40 != -1)
      swift_once(&qword_1011D1D40, sub_100A68C6C);
    v43 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "    AMSBag was intended to be enabled as source for cached musicTabs, but bag profile and/or version were unexpectedly nil.\n    Defaulting to .userDefaults configuration.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = swift_release(a4);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v17, v10, v47);
LABEL_22:
    v36 = 0;
    v37 = 0;
    goto LABEL_23;
  }
  v23 = v22;
  v52 = v10;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = objc_msgSend((id)static ICClientInfo.music, "bagProfileVersion");
  if (!v26)
  {
    swift_bridgeObjectRelease(v25);
    v10 = v52;
    goto LABEL_17;
  }
  v27 = v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  if (qword_1011D1D40 != -1)
    swift_once(&qword_1011D1D40, sub_100A68C6C);
  v30 = Logger.init(_:)((id)static OS_os_log.musicBag);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "AMSBag enabled as source for cached musicTabs.", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v52);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v36 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v34, v35);
  swift_release(a4);

  v37 = 1;
LABEL_23:
  v48 = sub_100007E8C(&qword_1011DC290);
  v49 = swift_allocObject(v48, 48, 7);
  *(_DWORD *)(v49 + 44) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  *(_QWORD *)(v49 + 32) = 0;
  *(_QWORD *)(v49 + 16) = v36;
  *(_BYTE *)(v49 + 40) = v37;
  v5[2] = v49;
  return v5;
}

void sub_100B6A258(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0 && !*(_QWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 16) = 1;
      *(_BYTE *)(a1 + 24) = 1;
      *(_QWORD *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v13;
      *(_QWORD *)(a3 + 16) = 1;
      *(_BYTE *)(a3 + 24) = 1;
      swift_bridgeObjectRetain();
      v14 = v12;
      return;
    }
    v15 = qword_1011D1D40;
    v28 = v12;
    swift_bridgeObjectRetain();
    if (v15 != -1)
      swift_once(&qword_1011D1D40, sub_100A68C6C);
    v16 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v27 = v4;
      v20 = v19;
      v26 = swift_slowAlloc(64, -1);
      v29 = v26;
      *(_DWORD *)v20 = 136315394;
      v21 = (char *)_typeName(_:qualified:)(a2, 0);
      v23 = v22;
      *(_QWORD *)(v20 + 4) = sub_10099627C(v21, v22, &v29);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v20 + 12) = 2080;
      *(_QWORD *)(v20 + 14) = sub_10099627C((char *)0xD000000000000021, (char *)0x8000000100E53560, &v29);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "    An unexpected attempt to configure an %s instance twice using %s will be ignored.", (uint8_t *)v20, 0x16u);
      v24 = v26;
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease(v13);

  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

id sub_100B6A4B0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  Swift::Int v16;
  Class isa;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  __int128 aBlock;
  __int128 v59;
  uint64_t (*v60)(uint64_t);
  _QWORD *v61;
  char v62[48];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  v9 = __chkstk_darwin(v8);
  v53 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v52 = (char *)&v51 - v11;
  v57 = objc_msgSend((id)objc_opt_self(AMSBag), "uninitializedToken");
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_QWORD *)(v4 + 32);
  v14 = sub_100007E8C((uint64_t *)&unk_1011D6CD0);
  inited = swift_initStackObject(v14, v62);
  *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
  *(_QWORD *)(inited + 32) = v12;
  *(_QWORD *)(inited + 40) = v13;
  swift_bridgeObjectRetain_n(v13, 2);
  v16 = sub_100A4B6BC(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  v18 = swift_allocObject(&unk_1010FE668, 24, 7);
  swift_weakInit(v18 + 16, v4);
  v19 = (_QWORD *)swift_allocObject(&unk_1010FE690, 56, 7);
  v19[2] = v18;
  v19[3] = v12;
  v19[4] = v13;
  v19[5] = a2;
  v19[6] = a3;
  v60 = sub_100B6BE3C;
  v61 = v19;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v59 = sub_100B6B92C;
  *((_QWORD *)&v59 + 1) = &unk_1010FE6A8;
  v20 = _Block_copy(&aBlock);
  v21 = v61;
  swift_bridgeObjectRetain();
  swift_retain(a3);
  v22 = v21;
  v23 = a1;
  v24 = objc_msgSend(a1, "cachedValuesForKeys:observationToken:updateHandler:", isa, &v57, v20, swift_release(v22).n128_f64[0]);
  _Block_release(v20);

  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  if (*(_QWORD *)(v25 + 16) && (v26 = sub_10079C2C4(v12, v13), (v27 & 1) != 0))
  {
    sub_10004FA40(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v59 = 0u;
  }
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v25);
  if (*((_QWORD *)&v59 + 1))
  {
    v28 = sub_100007E8C(&qword_1011D61C8);
    if ((swift_dynamicCast(&v56, &aBlock, (char *)&type metadata for Any + 8, v28, 6) & 1) != 0)
    {
      v29 = v56;
      v30 = qword_1011D1D40;
      swift_bridgeObjectRetain();
      if (v30 != -1)
        swift_once(&qword_1011D1D40, sub_100A68C6C);
      v31 = (id)static OS_os_log.musicBag;
      v32 = v52;
      Logger.init(_:)(v31);
      v33 = swift_bridgeObjectRetain();
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v37;
        *(_DWORD *)v36 = 136315138;
        v38 = sub_100B6B9C4(v29);
        v39 = sub_100007E8C(&qword_1011D3728);
        v40 = (char *)Dictionary.description.getter(v38, &type metadata for String, v39, &protocol witness table for String);
        v41 = v23;
        v43 = v42;
        swift_release(v38);
        *(_QWORD *)(v36 + 4) = sub_10099627C(v40, v43, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease_n(v29, 2);
        v44 = v43;
        v23 = v41;
        swift_bridgeObjectRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "AMSBag provided initial state of musicTabs: %s", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v55);
      }
      else
      {

        swift_bridgeObjectRelease_n(v29, 2);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v55);
      }
      return v23;
    }
  }
  else
  {
    sub_10004FF60((uint64_t)&aBlock, &qword_1011D7160);
  }
  v45 = v53;
  if (qword_1011D1D40 != -1)
    swift_once(&qword_1011D1D40, sub_100A68C6C);
  v46 = Logger.init(_:)((id)static OS_os_log.musicBag);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "AMSBag didn't provide initial state of musicTabs. No cached value was found.", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v55);
  return v23;
}

id sub_100B6AA50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  char v9;

  v9 = a5 & 1;
  sub_100B6B998(*(void **)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = v9;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_100B6AABC@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  NSString v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*a1)
  {
    *a4 = a1[1];
    return swift_bridgeObjectRetain();
  }
  else if (a2
         && (v8 = String._bridgeToObjectiveC()(),
             v9 = objc_msgSend(a2, "dictionaryForBagKey:", v8),
             v8,
             v9)
         && (v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable), v9, v11 = sub_100B69514(v10), result = swift_bridgeObjectRelease(v10), v11))
  {
    *a4 = v11;
  }
  else
  {
    v12 = (*(uint64_t (**)(void))(a3 + 40))();
    result = swift_bridgeObjectRelease(0);
    *a4 = v12;
  }
  return result;
}

uint64_t *sub_100B6ABAC()
{
  uint64_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  id v5;
  id v7[3];
  char v8;

  v1 = *v0;
  v2 = (os_unfair_lock_s *)v0[2];
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 11;
  os_unfair_lock_lock(v2 + 11);
  sub_100B6AC58(v3, v1, (uint64_t)v7);
  os_unfair_lock_unlock(v4);
  v5 = v7[0];
  if (v7[0])
  {
    if ((v8 & 1) == 0)
      objc_msgSend(v7[0], "removeObserverWithToken:", v7[2]);

    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

void sub_100B6AC58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *(_OWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    {
      *(_QWORD *)a3 = v12;
      *(_OWORD *)(a3 + 8) = v13;
      *(_BYTE *)(a3 + 24) = 0;
      swift_bridgeObjectRetain();
      v14 = v12;
      return;
    }
    v15 = *(_QWORD *)(a1 + 8);
    v16 = qword_1011D1D40;
    v17 = v12;
    v31 = v15;
    swift_bridgeObjectRetain();
    if (v16 != -1)
      swift_once(&qword_1011D1D40, sub_100A68C6C);
    v18 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.fault.getter(v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v29 = v17;
      v23 = v22;
      v24 = swift_slowAlloc(32, -1);
      v30 = v4;
      v25 = v24;
      v32 = v24;
      *(_DWORD *)v23 = 136315138;
      v26 = (char *)_typeName(_:qualified:)(a2, 0);
      *(_QWORD *)(v23 + 4) = sub_10099627C(v26, v27, &v32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "    %s wasn't configured with an AMSBag update handler prior to deallocation. This may have caused musicTabs updates to be missed after initialization.", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v23, -1, -1);
      swift_bridgeObjectRelease();

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t sub_100B6AE8C()
{
  uint64_t v0;

  sub_100B6ABAC();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for MusicTabsDictionaryProvider()
{
  return objc_opt_self(_TtC9MusicCore27MusicTabsDictionaryProvider);
}

id *destroy for MusicTabsDictionaryProvider.Configuration(id *result)
{
  id *v1;

  if ((unint64_t)*result >= 0xFFFFFFFF)
  {
    v1 = result;

    return (id *)swift_bridgeObjectRelease(v1[1]);
  }
  return result;
}

uint64_t initializeWithCopy for MusicTabsDictionaryProvider.Configuration(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v6 = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MusicTabsDictionaryProvider.Configuration(uint64_t a1, __int128 *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v11;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
      *(_QWORD *)(a1 + 16) = v9;
      v10 = v5;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v11 = *a2;
    *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

__n128 initializeWithTake for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MusicTabsDictionaryProvider.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_100B6B194(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration;
}

uint64_t sub_100B6B1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  __n128 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 aBlock;
  __int128 v44;
  uint64_t (*v45)();
  _QWORD *v46;
  char v47[24];

  v40 = a5;
  v41 = a6;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v47, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v19 = result;
    v20 = *(_QWORD *)(a1 + 16);
    v38 = v14;
    v39 = v11;
    if (v20)
    {
      swift_bridgeObjectRetain();
      v21 = sub_10079C2C4(a3, a4);
      if ((v22 & 1) != 0)
      {
        sub_10004FA40(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v44 = 0u;
      }
      swift_bridgeObjectRelease(a4);
      if (*((_QWORD *)&v44 + 1))
      {
        v23 = sub_100007E8C(&qword_1011D61C8);
        if (swift_dynamicCast(&v42, &aBlock, (char *)&type metadata for Any + 8, v23, 6))
          v24 = v42;
        else
          v24 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      aBlock = 0u;
      v44 = 0u;
    }
    sub_10004FF60((uint64_t)&aBlock, &qword_1011D7160);
    v24 = 0;
LABEL_12:
    v25 = *(os_unfair_lock_s **)(v19 + 16);
    v26 = (uint64_t)&v25[4];
    v27 = v25 + 11;
    os_unfair_lock_lock(v25 + 11);
    sub_100B6B4E4(v26, v24, (char *)&aBlock);
    os_unfair_lock_unlock(v27);
    if (aBlock == 1)
    {
      sub_1009E0478();
      v28 = (void *)static OS_dispatch_queue.main.getter();
      v29 = (_QWORD *)swift_allocObject(&unk_1010FE6E0, 40, 7);
      v30 = v41;
      v29[2] = v40;
      v29[3] = v30;
      v29[4] = v24;
      v45 = sub_10027EAC0;
      v46 = v29;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v44 = sub_1001DBD98;
      *((_QWORD *)&v44 + 1) = &unk_1010FE6F8;
      v31 = _Block_copy(&aBlock);
      v32 = v46;
      swift_retain(v30);
      v33 = swift_release(v32);
      static DispatchQoS.unspecified.getter(v33);
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v34 = sub_100A37718();
      v35 = sub_100007E8C(&qword_1011D5E08);
      v36 = sub_100A29EAC();
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v35, v36, v10, v34);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v31);
      _Block_release(v31);
      swift_release(v19);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v38);
    }
    else
    {
      swift_release(v19);
      return swift_bridgeObjectRelease(v24);
    }
  }
  return result;
}

uint64_t sub_100B6B4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  void *v31;
  uint64_t result;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  id v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  v14 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v47 = v7;
    v48 = v3;
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    v17 = *(_BYTE *)(a1 + 24) & 1;
    v52 = a2;
    v53 = v15;
    v54 = v17;
    v51 = v14;
    *(_QWORD *)(a1 + 8) = a2;
    *(_BYTE *)(a1 + 24) = v17;
    v18 = qword_1011D1D40;
    swift_bridgeObjectRetain_n(a2, 2);
    v19 = v14;
    if (v18 != -1)
      swift_once(&qword_1011D1D40, sub_100A68C6C);
    Logger.init(_:)((id)static OS_os_log.musicBag);
    v20 = swift_bridgeObjectRetain();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v46 = a3;
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v55 = v24;
      *(_DWORD *)v23 = 136315394;
      if (v16)
      {
        v25 = v48;
        v26 = sub_100B6B9C4(v16);
        v48 = v25;
      }
      else
      {
        v26 = 0;
      }
      v50[0] = v26;
      v34 = sub_100007E8C(&qword_1011DC288);
      v35 = (char *)String.init<A>(describing:)(v50, v34);
      v37 = v36;
      *(_QWORD *)(v23 + 4) = sub_10099627C(v35, v36, &v55);
      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v23 + 12) = 2080;
      swift_beginAccess(&v51, v50, 0, 0);
      v38 = v52;
      if (v52)
      {
        v39 = swift_bridgeObjectRetain();
        v40 = v48;
        v41 = sub_100B6B9C4(v39);
        v48 = v40;
        swift_bridgeObjectRelease(v38);
      }
      else
      {
        v41 = 0;
      }
      v49 = v41;
      v42 = (char *)String.init<A>(describing:)(&v49, v34);
      v44 = v43;
      *(_QWORD *)(v23 + 14) = sub_10099627C(v42, v43, &v55);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "    AMSBag provided updated musicTabs dictionary.\n    Previous: %s\n    Updated: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v47);
      result = swift_bridgeObjectRelease(v52);
      a3 = v46;
    }
    else
    {

      swift_bridgeObjectRelease_n(v16, 2);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v47);

      result = swift_bridgeObjectRelease(v52);
    }
    v33 = 1;
  }
  else
  {
    if (qword_1011D1D40 != -1)
      swift_once(&qword_1011D1D40, sub_100A68C6C);
    v27 = Logger.init(_:)((id)static OS_os_log.musicBag);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(12, -1);
      v31 = (void *)swift_slowAlloc(32, -1);
      v51 = v31;
      *(_DWORD *)v30 = 136315138;
      *(_QWORD *)(v30 + 4) = sub_10099627C((char *)0xD000000000000047, (char *)0x8000000100E53510, (uint64_t *)&v51);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected update handler call in %s with .userDefaults configuration. This is likely programmer error.", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v33 = 0;
  }
  *a3 = v33;
  return result;
}

uint64_t sub_100B6B92C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

void *sub_100B6B998(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100B6B9C4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[40];
  _OWORD v50[2];
  _QWORD *v51;

  sub_100007E8C(&qword_1011DC280);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v40 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v38 = (unint64_t)(v6 + 63) >> 6;
  v39 = result + 64;
  v37 = (_QWORD *)result;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * i);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v41 = *v14;
      v43 = i;
      v44 = v4;
      v51 = _swiftEmptyArrayStorage;
      v42 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1009F24EC(0, v18, 0);
      v19 = 0;
      v20 = v51;
      do
      {
        v21 = *(_QWORD *)(v17 + 8 * v19 + 32);
        *(_QWORD *)&v47 = 25705;
        *((_QWORD *)&v47 + 1) = 0xE200000000000000;
        AnyHashable.init<A>(_:)(&v47, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v21 + 16) && (v22 = sub_10079C294((uint64_t)v49), (v23 & 1) != 0))
        {
          sub_10004FA40(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v47);
        }
        else
        {
          v47 = 0u;
          v48 = 0u;
        }
        sub_10004FF2C((uint64_t)v49);
        if (*((_QWORD *)&v48 + 1))
        {
          sub_100048ABC(&v47, v50);
          sub_10004FA40((uint64_t)v50, (uint64_t)v49);
          v24 = swift_dynamicCast(&v47, v49, (char *)&type metadata for Any + 8, &type metadata for String, 6);
          v26 = *((_QWORD *)&v47 + 1);
          v25 = v47;
          sub_10004FA40((uint64_t)v50, (uint64_t)&v47);
          if (!v24 || !v26)
          {
            v45 = 0;
            v46 = 0xE000000000000000;
            _StringGuts.grow(_:)(23);
            v27._countAndFlagsBits = 0xD000000000000014;
            v27._object = (void *)0x8000000100E534F0;
            String.append(_:)(v27);
            _print_unlocked<A, B>(_:_:)(&v47, &v45, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v28._countAndFlagsBits = 62;
            v28._object = (void *)0xE100000000000000;
            String.append(_:)(v28);
            v25 = v45;
            v26 = v46;
          }
          _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v47);
          _s5Music18DragDropToPlaylistV6OriginVwxx_0(v50);
        }
        else
        {
          sub_10004FF60((uint64_t)&v47, &qword_1011D7160);
          v26 = 0xEF3E746E65736261;
          v25 = 0x204449206261743CLL;
        }
        v51 = v20;
        v30 = v20[2];
        v29 = v20[3];
        if (v30 >= v29 >> 1)
        {
          sub_1009F24EC((char *)(v29 > 1), v30 + 1, 1);
          v20 = v51;
        }
        ++v19;
        v20[2] = v30 + 1;
        v31 = &v20[2 * v30];
        v31[4] = v25;
        v31[5] = v26;
      }
      while (v18 != v19);
      swift_bridgeObjectRelease(v17);
      v3 = v37;
      v4 = v44;
      result = v42;
      i = v43;
      v16 = v41;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v20 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)(v39 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v32 = (_QWORD *)(v3[6] + 16 * i);
    *v32 = v16;
    v32[1] = result;
    *(_QWORD *)(v3[7] + 8 * i) = v20;
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v3[2] = v35;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_39;
    if (v11 >= v38)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v36 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v38)
        return (uint64_t)v3;
      v12 = *(_QWORD *)(v36 + 8 * v4);
      if (!v12)
        break;
    }
LABEL_16:
    v8 = (v12 - 1) & v12;
  }
  v13 = v11 + 2;
  if (v13 >= v38)
    return (uint64_t)v3;
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v38)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v36 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100B6BDE4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B6BE08()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100B6BE3C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100B6B1C8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100B6BE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B6BE5C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100B6BE64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t initializeWithCopy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

uint64_t assignWithTake for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State;
}

uint64_t PlayActivityFeatureIdentifier.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B6C07C + 4 * byte_100EE5F50[a1]))(0x65645F6D75626C61, 0xEC0000006C696174);
}

uint64_t sub_100B6C07C()
{
  return 0x736D75626C61;
}

uint64_t sub_100B6C090()
{
  return 0x5F7972617262696CLL;
}

uint64_t sub_100B6C0B4()
{
  return 0x74616C69706D6F63;
}

uint64_t sub_100B6C0D4()
{
  return 0x7265736F706D6F63;
}

uint64_t sub_100B6C16C()
{
  return 0x7473696C79616C70;
}

uint64_t sub_100B6C190()
{
  return 0x796C746E65636572;
}

unint64_t sub_100B6C1B4()
{
  return 0xD000000000000013;
}

uint64_t sub_100B6C1D0()
{
  return 0x73676E6F73;
}

uint64_t sub_100B6C1E4()
{
  return 0x73776F6873;
}

uint64_t sub_100B6C1F8()
{
  return 0x7365646F73697065;
}

uint64_t sub_100B6C210()
{
  return 0x79616C705F776F6ELL;
}

uint64_t sub_100B6C230()
{
  return 0x616C705F696E696DLL;
}

uint64_t PlayActivityFeatureIdentifier.id.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B6C28C + 4 * byte_100EE5F62[a1]))(0x65645F6D75626C61, 0xEC0000006C696174);
}

uint64_t sub_100B6C28C()
{
  return 0x736D75626C61;
}

uint64_t sub_100B6C2A0()
{
  return 0x5F7972617262696CLL;
}

uint64_t sub_100B6C2C4()
{
  return 0x74616C69706D6F63;
}

uint64_t sub_100B6C2E4()
{
  return 0x7265736F706D6F63;
}

uint64_t sub_100B6C37C()
{
  return 0x7473696C79616C70;
}

uint64_t sub_100B6C3A0()
{
  return 0x796C746E65636572;
}

unint64_t sub_100B6C3C4()
{
  return 0xD000000000000013;
}

uint64_t sub_100B6C3E0()
{
  return 0x73676E6F73;
}

uint64_t sub_100B6C3F4()
{
  return 0x73776F6873;
}

uint64_t sub_100B6C408()
{
  return 0x7365646F73697065;
}

uint64_t sub_100B6C420()
{
  return 0x79616C705F776F6ELL;
}

uint64_t sub_100B6C440()
{
  return 0x616C705F696E696DLL;
}

uint64_t sub_100B6C460(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = PlayActivityFeatureIdentifier.rawValue.getter(*a1);
  v5 = v4;
  v6 = PlayActivityFeatureIdentifier.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100B6C4E8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = PlayActivityFeatureIdentifier.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100B6C548(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = PlayActivityFeatureIdentifier.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_100B6C588(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = PlayActivityFeatureIdentifier.rawValue.getter(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100B6C5E4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100B6C610@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PlayActivityFeatureIdentifier.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100B6C638@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PlayActivityFeatureIdentifier.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1010E7170, a1, a2, &unk_1011D25A8);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x12)
    return 18;
  else
    return v3;
}

unint64_t sub_100B6C6B4()
{
  unint64_t result;

  result = qword_1011DC298;
  if (!qword_1011DC298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayActivityFeatureIdentifier, &type metadata for PlayActivityFeatureIdentifier);
    atomic_store(result, (unint64_t *)&qword_1011DC298);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlayActivityFeatureIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayActivityFeatureIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_100B6C7D4 + 4 * byte_100EE5F79[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_100B6C808 + 4 * byte_100EE5F74[v4]))();
}

uint64_t sub_100B6C808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B6C810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B6C818);
  return result;
}

uint64_t sub_100B6C824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B6C82CLL);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_100B6C830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B6C838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayActivityFeatureIdentifier()
{
  return &type metadata for PlayActivityFeatureIdentifier;
}

uint64_t QRCode.init(data:errorCorrectionLevel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6[5];

  sub_100B6D1BC(a1, a2, a3, v6);
  return sub_100B6D8FC((uint64_t)v6, a4);
}

void sub_100B6C88C()
{
  qword_1011DC2A0 = Int.seconds.getter(10);
}

uint64_t QRCode.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_100079DE4(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

id QRCode.image.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

void sub_100B6C8E4(void *a1, void *a2, CGImage *a3, uint64_t a4, CGContext *a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, double a11)
{
  CGContext *v18;
  void *v19;
  id v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double Height;
  void *v26;
  id v27;
  void *v28;
  double v29;
  id v30;
  double v31;
  double v32;
  id v33;
  void *v34;
  double v35;
  id v36;
  double v37;
  id v38;
  void *v39;
  double v40;
  CGFloat v41;
  id v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double Width;
  uint64_t v48;
  uint64_t i;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGContext *v53;
  int64_t BytesPerRow;
  int64_t v55;
  uint64_t v56;
  BOOL v57;
  int64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v64;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;

  objc_msgSend(a1, "beginPage");
  v64 = a1;
  v18 = (CGContext *)objc_msgSend(a1, "CGContext");
  if (qword_1011D2528 != -1)
    goto LABEL_66;
  while (1)
  {
    CGContextSetLineWidth(v18, *(CGFloat *)&qword_1011DC2A0);

    v19 = (void *)objc_opt_self(UIColor);
    v20 = objc_msgSend(v19, "whiteColor");
    objc_msgSend(v20, "setStroke");

    v21 = objc_msgSend(v19, "whiteColor");
    objc_msgSend(v21, "setFill");

    v22 = *(double *)&qword_1011DC2A0;
    v23 = *(double *)&qword_1011DC2A0 * a6;
    v68.origin.x = a7;
    v68.origin.y = a8;
    v68.size.width = a9;
    v68.size.height = a10;
    v24 = CGRectGetWidth(v68) - v23;
    v69.origin.x = a7;
    v69.origin.y = a8;
    v69.size.width = a9;
    v69.size.height = a10;
    Height = CGRectGetHeight(v69);
    v26 = (void *)objc_opt_self(UIBezierPath);
    a8 = 0.5;
    v70.origin.x = 0.0;
    v70.origin.y = 0.0;
    v70.size.width = v22 * a6;
    v70.size.height = v22 * a6;
    v71 = CGRectInset(v70, v22 * 0.5, v22 * 0.5);
    v27 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v71.origin.x, v71.origin.y, v71.size.width, v71.size.height, 10.0);
    if (v27)
    {
      v28 = v27;
      objc_msgSend(v27, "setLineWidth:", v22);
      objc_msgSend(v28, "stroke");
      v29 = v22 * a11;
      v72.origin.x = 0.0;
      v72.origin.y = 0.0;
      v72.size.width = v23;
      v72.size.height = v23;
      a7 = v29 * 0.5;
      a9 = CGRectGetMidX(v72) - v29 * 0.5;
      v73.origin.x = 0.0;
      v73.origin.y = 0.0;
      v73.size.width = v23;
      v73.size.height = v23;
      v30 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", a9, CGRectGetMidY(v73) - v29 * 0.5, v29, v29, 2.0);
      objc_msgSend(v30, "fill");

    }
    v31 = Height - v23;
    v32 = *(double *)&qword_1011DC2A0;
    v74.origin.y = 0.0;
    v74.origin.x = v24;
    v74.size.width = v23;
    v74.size.height = v23;
    v75 = CGRectInset(v74, *(double *)&qword_1011DC2A0 * 0.5, *(double *)&qword_1011DC2A0 * 0.5);
    v33 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v75.origin.x, v75.origin.y, v75.size.width, v75.size.height, 10.0);
    if (v33)
    {
      v34 = v33;
      objc_msgSend(v33, "setLineWidth:", v32);
      objc_msgSend(v34, "stroke");
      v35 = v32 * a11;
      v76.origin.y = 0.0;
      v76.origin.x = v24;
      v76.size.width = v23;
      v76.size.height = v23;
      a8 = v35 * 0.5;
      a9 = CGRectGetMidX(v76) - v35 * 0.5;
      v77.origin.y = 0.0;
      v77.origin.x = v24;
      v77.size.width = v23;
      v77.size.height = v23;
      v36 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", a9, CGRectGetMidY(v77) - v35 * 0.5, v35, v35, 2.0);
      objc_msgSend(v36, "fill");

    }
    v37 = *(double *)&qword_1011DC2A0;
    v78.origin.x = 0.0;
    v78.origin.y = v31;
    v78.size.width = v23;
    v78.size.height = v23;
    v79 = CGRectInset(v78, *(double *)&qword_1011DC2A0 * 0.5, *(double *)&qword_1011DC2A0 * 0.5);
    v38 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v79.origin.x, v79.origin.y, v79.size.width, v79.size.height, 10.0);
    if (v38)
    {
      v39 = v38;
      objc_msgSend(v38, "setLineWidth:", v37);
      objc_msgSend(v39, "stroke");
      v40 = v37 * a11;
      v80.origin.x = 0.0;
      v80.origin.y = v31;
      v80.size.width = v23;
      v80.size.height = v23;
      a9 = v40 * 0.5;
      v41 = CGRectGetMidX(v80) - v40 * 0.5;
      v81.origin.x = 0.0;
      v81.origin.y = v31;
      v81.size.width = v23;
      v81.size.height = v23;
      v42 = objc_msgSend(v26, "_bezierPathWithPillRect:cornerRadius:", v41, CGRectGetMidY(v81) - v40 * 0.5, v40, v40, 2.0);
      objc_msgSend(v42, "fill");

    }
    objc_msgSend(a2, "extent");
    v43 = CGRectGetHeight(v82);
    if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) == 0)
      break;
    if (v43 <= -9.22337204e18)
      goto LABEL_68;
    if (v43 >= 9.22337204e18)
      goto LABEL_69;
    v44 = (uint64_t)v43;
    if ((uint64_t)v43 < 1)
      goto LABEL_70;
    v18 = a5;
    if ((uint64_t)v43 == 1)
      return;
    v45 = (uint64_t)a6;
    v46 = 1;
    a10 = -1.0;
    *(_QWORD *)&a11 = (uint64_t)v43;
    while (1)
    {
      if (v46 == v44)
        goto LABEL_61;
      objc_msgSend(a2, "extent");
      Width = CGRectGetWidth(v83);
      if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
        break;
      if (Width <= -9.22337204e18)
        goto LABEL_63;
      if (Width >= 9.22337204e18)
        goto LABEL_64;
      v48 = (uint64_t)Width;
      if ((uint64_t)Width < 1)
        goto LABEL_65;
      if ((uint64_t)Width != 1)
      {
        a9 = (double)(v46 - 1);
        for (i = 1; v48 != i; ++i)
        {
          BytesPerRow = CGImageGetBytesPerRow(a3);
          v55 = BytesPerRow * v46;
          if ((unsigned __int128)(BytesPerRow * (__int128)v46) >> 64 != (BytesPerRow * v46) >> 63)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          v56 = i * a4;
          if ((unsigned __int128)(i * (__int128)a4) >> 64 != (i * a4) >> 63)
            goto LABEL_48;
          v57 = __OFADD__(v55, v56);
          v58 = v55 + v56;
          if (v57)
            goto LABEL_49;
          if (!*((_BYTE *)v18 + v58))
          {
            if ((*(_QWORD *)&a6 & 0x7FF0000000000000) == 0x7FF0000000000000)
              goto LABEL_50;
            if (a6 <= -9.22337204e18)
              goto LABEL_51;
            if (a6 >= 9.22337204e18)
              goto LABEL_52;
            objc_msgSend(a2, "extent");
            v59 = CGRectGetWidth(v85);
            if ((~*(_QWORD *)&v59 & 0x7FF0000000000000) == 0)
              goto LABEL_53;
            if (v59 <= -9.22337204e18)
              goto LABEL_54;
            if (v59 >= 9.22337204e18)
              goto LABEL_55;
            v60 = (uint64_t)v59;
            if (v46 <= v45)
            {
              if (i <= v45)
                continue;
              v57 = __OFSUB__(v60, v45);
              v61 = v60 - v45;
              if (v57)
                goto LABEL_59;
              if (__OFSUB__(v61, 1))
                goto LABEL_60;
              if (i >= v61 - 1)
                continue;
            }
            else
            {
              v57 = __OFSUB__(v60, v45);
              v61 = v60 - v45;
              if (v57)
                goto LABEL_56;
            }
            v57 = __OFSUB__(v61, 1);
            v62 = v61 - 1;
            if (v57)
              goto LABEL_57;
            if (v46 < v62 || i > v45)
            {
              if (__OFSUB__(i, 1))
                goto LABEL_58;
              v50 = *(double *)&qword_1011DC2A0 * (double)(i - 1);
              v51 = *(double *)&qword_1011DC2A0 * a9;
              v52 = *(double *)&qword_1011DC2A0 + -1.0;
              v53 = (CGContext *)objc_msgSend(v64, "CGContext");
              v84.origin.x = v50;
              v84.origin.y = v51;
              v84.size.width = v52;
              v84.size.height = v52;
              CGContextFillEllipseInRect(v53, v84);

              v18 = a5;
            }
          }
        }
      }
      ++v46;
      v44 = *(_QWORD *)&a11;
      if (v46 == *(_QWORD *)&a11)
        return;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once(&qword_1011D2528, sub_100B6C88C);
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

uint64_t QRCode.with(errorCorrectionLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8[5];

  v6 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  sub_100079DE4(v6, v5);
  sub_100B6D1BC(v6, v5, a1, v8);
  return sub_100B6D8FC((uint64_t)v8, a2);
}

double QRCode.dotAdjustedWidth(with:scale:)(double a1)
{
  uint64_t *v1;
  double v2;

  v2 = (double)*v1;
  return UIRoundToScale(a1 / v2) * v2;
}

CGMutablePathRef QRCode.dotAlignedPath(with:in:imageBounds:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t *v9;
  double Width;
  uint64_t v16;
  double MinX;
  double MinY;
  CGMutablePathRef result;
  CGMutablePathRef v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  _QWORD v28[6];
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v29.origin.x = a6;
  v29.origin.y = a7;
  v29.size.width = a8;
  v29.size.height = a9;
  Width = CGRectGetWidth(v29);
  v16 = *v9;
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  MinX = CGRectGetMinX(v30);
  v31.origin.x = a2;
  v31.origin.y = a3;
  v31.size.width = a4;
  v31.size.height = a5;
  MinY = CGRectGetMinY(v31);
  swift_bridgeObjectRetain();
  result = CGPathCreateMutable();
  if (*(_QWORD *)(a1 + 16))
  {
    v20 = result;
    v21 = Width / (double)v16;
    v22 = floor(MinX / v21);
    v23 = floor(MinY / v21);
    v25 = *(double *)(a1 + 32);
    v24 = *(double *)(a1 + 40);
    sub_1009BBF68(0, 1);
    v28[0] = 0x3FF0000000000000;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0x3FF0000000000000;
    v28[4] = 0;
    v28[5] = 0;
    CGMutablePathRef.move(to:transform:)(v28, v21 * (v22 + ceil(v25 / v21)), v21 * (v23 + ceil(v24 / v21)));
    v26 = *(_QWORD *)(a1 + 16);
    if (v26)
    {
      v27 = (double *)(a1 + 40);
      do
      {
        CGMutablePathRef.addLine(to:transform:)(v28, v21 * (v22 + ceil(*(v27 - 1) / v21)), v21 * (v23 + ceil(*v27 / v21)));
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    swift_bridgeObjectRelease();
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100B6D1BC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  id v9;
  Class isa;
  NSString v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  CGImage *v18;
  CGDataProvider *v19;
  uint64_t v20;
  const __CFData *v21;
  const UInt8 *BytePtr;
  const UInt8 *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  void *v32;
  id v33;
  char isEscapingClosureAtFileLocation;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const __CFData *v38;
  CGDataProvider *v39;
  uint64_t v40;
  CGPDFDocument *v41;
  CGPDFDocument *v42;
  id v43;
  uint64_t v44;
  double Width;
  double v46;
  uint64_t v47;
  id v48;
  id v49;
  unint64_t v50;
  CGPDFPage *v51;
  CGImage *v52;
  id v53;
  uint64_t v54;
  const __CFData *v55;
  id v56;
  _QWORD aBlock[7];
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v8 = (void *)objc_opt_self(CIFilter);
  sub_100079DE4(a1, a2);
  v9 = objc_msgSend(v8, "QRCodeGenerator");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setValue:forKey:", isa, v11);

  v12 = v9;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setValue:forKey:", v13, v14);

  v15 = objc_msgSend(v12, "outputImage");
  if (!v15)
  {
    sub_1000652DC(a1, a2);
LABEL_19:

    v21 = 0;
LABEL_20:
    v20 = 0;
    goto LABEL_21;
  }
  v16 = v15;
  v17 = objc_msgSend(objc_allocWithZone((Class)CIContext), "init");
  objc_msgSend(v16, "extent");
  v18 = (CGImage *)objc_msgSend(v17, "createCGImage:fromRect:", v16);

  if (!v18)
  {
    sub_1000652DC(a1, a2);

    goto LABEL_19;
  }
  v19 = CGImageGetDataProvider(v18);
  v20 = (uint64_t)v19;
  if (!v19)
  {
    sub_1000652DC(a1, a2);

    v21 = 0;
    goto LABEL_21;
  }
  v21 = CGDataProviderCopyData(v19);

  if (!v21)
  {
    sub_1000652DC(a1, a2);

    goto LABEL_20;
  }
  v55 = v21;
  BytePtr = CFDataGetBytePtr(v21);
  if (BytePtr)
  {
    v23 = BytePtr;
    v54 = a3;
    v24 = (uint64_t)CGImageGetBitsPerPixel(v18) / 8;
    v25 = Int.seconds.getter(7);
    v26 = Int.seconds.getter(3);
    objc_msgSend(v16, "extent");
    v27 = CGRectGetWidth(v58) + -2.0;
    if (qword_1011D2528 != -1)
      swift_once(&qword_1011D2528, sub_100B6C88C);
    v28 = *(double *)&qword_1011DC2A0;
    v29 = v27 * *(double *)&qword_1011DC2A0;
    objc_msgSend(v16, "extent");
    v30 = v28 * (CGRectGetHeight(v59) + -2.0);
    v56 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsPDFRenderer), "initWithBounds:", 0.0, 0.0, v29, v30);
    v20 = swift_allocObject(&unk_1010FE9E8, 96, 7);
    *(double *)(v20 + 16) = v25;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 32) = 0;
    *(double *)(v20 + 40) = v29;
    *(double *)(v20 + 48) = v30;
    *(double *)(v20 + 56) = v26;
    *(_QWORD *)(v20 + 64) = v16;
    *(_QWORD *)(v20 + 72) = v18;
    *(_QWORD *)(v20 + 80) = v24;
    *(_QWORD *)(v20 + 88) = v23;
    v31 = swift_allocObject(&unk_1010FEA10, 32, 7);
    *(_QWORD *)(v31 + 16) = sub_100B6DAC4;
    *(_QWORD *)(v31 + 24) = v20;
    aBlock[4] = sub_10004D5F4;
    aBlock[5] = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004BF88;
    aBlock[3] = &unk_1010FEA28;
    v32 = _Block_copy(aBlock);
    swift_retain();
    v52 = v18;
    v53 = v16;
    v33 = objc_msgSend(v56, "PDFDataWithActions:", v32, swift_release().n128_f64[0]);
    _Block_release(v32);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v31, "", 117, 66, 37, 1);
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      goto LABEL_31;
    }
    v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v37 = v36;

    v38 = Data._bridgeToObjectiveC()().super.isa;
    v39 = CGDataProviderCreateWithCFData(v38);

    v40 = v54;
    if (v39)
    {
      v41 = CGPDFDocumentCreateWithProvider(v39);
      if (v41)
      {
        v42 = v41;
        v51 = CGPDFDocumentGetPage(v41, 1uLL);
        if (v51)
        {
          v50 = v37;
          v43 = objc_msgSend((id)objc_opt_self(UIImage), "_imageWithCGPDFPage:", v51);
          if (v43)
          {
            v44 = (uint64_t)v43;
            v49 = v43;
            objc_msgSend(v53, "extent");
            Width = CGRectGetWidth(v60);

            sub_1000652DC(v35, v50);
            v46 = Width + -2.0;
            if ((~COERCE__INT64(Width + -2.0) & 0x7FF0000000000000) != 0)
            {
              if (v46 > -9.22337204e18)
              {
                if (v46 < 9.22337204e18)
                {
                  v47 = (uint64_t)v46;
                  sub_100079DE4(a1, a2);
                  v48 = v49;
                  sub_1000652DC(a1, a2);

                  sub_1000652DC(a1, a2);
                  swift_release();

LABEL_22:
                  *a4 = v47;
                  a4[1] = a1;
                  a4[2] = a2;
                  a4[3] = v44;
                  a4[4] = v40;
                  return;
                }
                goto LABEL_33;
              }
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
              goto LABEL_34;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          sub_1000652DC(a1, a2);

          sub_1000652DC(v35, v37);
        }
        else
        {
          sub_1000652DC(a1, a2);

          sub_1000652DC(v35, v37);
        }
      }
      else
      {
        sub_1000652DC(a1, a2);

        sub_1000652DC(v35, v37);
      }
    }
    else
    {
      sub_1000652DC(a1, a2);

      sub_1000652DC(v35, v37);
    }

    v21 = (const __CFData *)sub_100B6DAC4;
LABEL_21:
    sub_1000652DC(a1, a2);
    sub_10004BA30((uint64_t)v21, v20);
    v47 = 0;
    a1 = 0;
    a2 = 0;
    v44 = 0;
    v40 = 0;
    goto LABEL_22;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100B6D8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DAD10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for QRCode(uint64_t a1)
{
  sub_1000652DC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));

}

_QWORD *initializeWithCopy for QRCode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_100079DE4(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = (void *)a2[3];
  v7 = a2[4];
  a1[3] = v6;
  a1[4] = v7;
  v8 = v6;
  return a1;
}

_QWORD *assignWithCopy for QRCode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_100079DE4(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_1000652DC(v6, v7);
  v8 = (void *)a2[3];
  v9 = (void *)a1[3];
  a1[3] = v8;
  v10 = v8;

  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for QRCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  sub_1000652DC(v5, v6);
  v7 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for QRCode()
{
  return &type metadata for QRCode;
}

uint64_t sub_100B6DA98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 96, 7);
}

void sub_100B6DAC4(void *a1)
{
  uint64_t v1;

  sub_100B6C8E4(a1, *(void **)(v1 + 64), *(CGImage **)(v1 + 72), *(_QWORD *)(v1 + 80), *(CGContext **)(v1 + 88), *(double *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_100B6DADC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B6DAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B6DAFC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t OSSignposter.sharePlay.unsafeMutableAddressor()
{
  return sub_100B6DCBC(&qword_1011D2538, (uint64_t)static OSSignposter.sharePlay, (uint64_t)sub_100B6DD18);
}

uint64_t *OS_os_log.sharePlay.unsafeMutableAddressor()
{
  if (qword_1011D2540 != -1)
    swift_once(&qword_1011D2540, sub_100B6DE68);
  return &static OS_os_log.sharePlay;
}

uint64_t static OSSignposter.music(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return OSSignposter.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, a1, a2);
}

uint64_t static OSSignposter.music(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(_:)(a1);
  return OSSignposter.init(logger:)(v4);
}

uint64_t sub_100B6DC30()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter(0);
  sub_10004FACC(v0, static OSSignposter.launch);
  sub_100048B14(v0, (uint64_t)static OSSignposter.launch);
  return OSSignposter.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0x68636E75614CLL, 0xE600000000000000);
}

uint64_t OSSignposter.launch.unsafeMutableAddressor()
{
  return sub_100B6DCBC(&qword_1011D2530, (uint64_t)static OSSignposter.launch, (uint64_t)sub_100B6DC30);
}

uint64_t sub_100B6DCBC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for OSSignposter(0);
  return sub_100048B14(v4, a2);
}

uint64_t static OSSignposter.launch.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100B6DE00(&qword_1011D2530, (uint64_t)static OSSignposter.launch, (uint64_t)sub_100B6DC30, a1);
}

uint64_t sub_100B6DD18()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for Logger(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignposter(0);
  sub_10004FACC(v3, static OSSignposter.sharePlay);
  sub_100048B14(v3, (uint64_t)static OSSignposter.sharePlay);
  if (qword_1011D2540 != -1)
    swift_once(&qword_1011D2540, sub_100B6DE68);
  Logger.init(_:)((id)static OS_os_log.sharePlay);
  return OSSignposter.init(logger:)(v2);
}

uint64_t static OSSignposter.sharePlay.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100B6DE00(&qword_1011D2538, (uint64_t)static OSSignposter.sharePlay, (uint64_t)sub_100B6DD18, a1);
}

uint64_t sub_100B6DE00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = sub_100048B14(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100B6DE68()
{
  uint64_t result;

  sub_100A691EC();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0x616C506572616853, 0xE900000000000079);
  static OS_os_log.sharePlay = result;
  return result;
}

id static OS_os_log.sharePlay.getter()
{
  if (qword_1011D2540 != -1)
    swift_once(&qword_1011D2540, sub_100B6DE68);
  return (id)static OS_os_log.sharePlay;
}

uint64_t sub_100B6DF0C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  __int128 v7[2];
  char v8;

  sub_100B71A54(v0, (uint64_t)v7);
  if (v8 == 1)
  {
    v1 = (char *)&loc_100B6DF5C + 4 * byte_100EE60F0[MPModelObject.mediaKitPlayableKind.getter()];
    __asm { BR              X10 }
  }
  sub_100064C48(v7, (uint64_t)v5);
  v2 = v6;
  sub_100007E68(v5, v6);
  v3 = sub_100B6E114(v2);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v5);
  return v3;
}

void sub_100B6DFD0()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6DFF4()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E010()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E038()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E060()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E07C()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E0A0()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E0C4()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E0E4()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

void sub_100B6E0FC()
{
  void *v0;

  JUMPOUT(0x100B6DFB4);
}

uint64_t sub_100B6E114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  __n128 v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, __n128);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  NSObject *v103;
  __n128 v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  __n128 v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v2 = v1;
  v4 = type metadata accessor for Playlist.Entry(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v120 = (char *)&v114 - v9;
  v124 = type metadata accessor for Track(0);
  v122 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v11 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v123 = (char *)&v114 - v13;
  v129 = type metadata accessor for GenericMusicItem(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v126 = (char *)&v114 - v16;
  v132 = type metadata accessor for UploadedVideo(0);
  v125 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for UploadedAudio(0);
  v130 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v134 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for TVShow(0);
  v133 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v137 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for TVEpisode(0);
  v136 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v140 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for Station(0);
  v139 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v158 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for Song(0);
  v142 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v156 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for Playlist(0);
  v144 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v146 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for MusicVideo(0);
  v145 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v148 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MusicMovie(0);
  v147 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v152 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Album(0);
  v151 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v154 = (char *)&v114 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = a1;
  v29 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v30);
  v117 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v160 = (char *)&v114 - v33;
  __chkstk_darwin(v34);
  v153 = (char *)&v114 - v35;
  __chkstk_darwin(v36);
  v38 = (char *)&v114 - v37;
  if (qword_1011D2548 != -1)
    swift_once(&qword_1011D2548, sub_100B70648);
  v121 = v11;
  v118 = v7;
  v119 = v5;
  v39 = type metadata accessor for Logger(0);
  v40 = sub_100048B14(v39, (uint64_t)static Logger.capabilityUpsell);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v159 = v2;
  v42 = v41(v38, v2, v161);
  v116 = v40;
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(12, -1);
    v46 = v27;
    v47 = v161;
    v115 = v25;
    v48 = v45;
    v49 = swift_slowAlloc(32, -1);
    v150 = v4;
    v50 = v49;
    v162 = v49;
    *(_DWORD *)v48 = 136315138;
    v51 = v153;
    v41(v153, (uint64_t)v38, v47);
    v52 = (char *)String.init<A>(describing:)(v51, v47);
    *(_QWORD *)(v48 + 4) = sub_10099627C(v52, v53, &v162);
    v54 = swift_bridgeObjectRelease();
    v55 = v47;
    v27 = v46;
    v56 = *(void (**)(char *, uint64_t, __n128))(v29 + 8);
    v56(v38, v55, v54);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "MusicItem - mediaKind =%s", (uint8_t *)v48, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    v57 = v50;
    v4 = v150;
    swift_slowDealloc(v57, -1, -1);
    v58 = v48;
    v25 = v115;
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    v56 = *(void (**)(char *, uint64_t, __n128))(v29 + 8);
    ((void (*)(char *, uint64_t))v56)(v38, v161);
  }

  v59 = v156;
  v60 = v160;
  v61 = v161;
  v41(v160, v159, v161);
  v62 = v154;
  v63 = swift_dynamicCast(v154, v60, v61, v27, 0);
  v64 = v157;
  v65 = v158;
  v66 = v155;
  if (!v63)
  {
    v68 = v152;
    if (swift_dynamicCast(v152, v160, v161, v25, 0))
    {
      (*(void (**)(char *, uint64_t))(v147 + 8))(v68, v25);
      v67 = 0x6F6D2D636973756DLL;
      ((void (*)(char *, uint64_t))v56)(v160, v161);
      return v67;
    }
    v150 = v4;
    v69 = v148;
    v70 = v149;
    if (swift_dynamicCast(v148, v160, v161, v149, 0))
    {
      (*(void (**)(char *, uint64_t))(v145 + 8))(v69, v70);
      v67 = 0x69762D636973756DLL;
      ((void (*)(char *, uint64_t))v56)(v160, v161);
      return v67;
    }
    v156 = (char *)v56;
    v71 = v146;
    if (swift_dynamicCast(v146, v160, v161, v66, 0))
    {
      (*(void (**)(char *, uint64_t))(v144 + 8))(v71, v66);
      v67 = 0x7473696C79616C70;
      ((void (*)(char *, uint64_t))v156)(v160, v161);
      return v67;
    }
    if (swift_dynamicCast(v59, v160, v161, v64, 0))
    {
      (*(void (**)(char *, uint64_t))(v142 + 8))(v59, v64);
      v67 = 0x73676E6F73;
      ((void (*)(char *, uint64_t))v156)(v160, v161);
      return v67;
    }
    v72 = v143;
    v73 = swift_dynamicCast(v65, v160, v161, v143, 0);
    v74 = (void (*)(char *, uint64_t))v156;
    if (v73)
    {
      (*(void (**)(char *, uint64_t))(v139 + 8))(v65, v72);
      v67 = 0x736E6F6974617473;
LABEL_46:
      v74(v160, v161);
      return v67;
    }
    v75 = v140;
    v76 = v141;
    if (swift_dynamicCast(v140, v160, v161, v141, 0))
    {
      (*(void (**)(char *, uint64_t))(v136 + 8))(v75, v76);
      v67 = 0x6F736970652D7674;
      goto LABEL_46;
    }
    v77 = v137;
    v78 = v138;
    if (swift_dynamicCast(v137, v160, v161, v138, 0))
    {
      (*(void (**)(char *, uint64_t))(v133 + 8))(v77, v78);
      v67 = 0x73776F68732D7674;
      goto LABEL_46;
    }
    v79 = v134;
    v80 = v135;
    if (swift_dynamicCast(v134, v160, v161, v135, 0))
    {
      v67 = 0x646564616F6C7075;
      (*(void (**)(char *, uint64_t))(v130 + 8))(v79, v80);
      goto LABEL_46;
    }
    v81 = v131;
    v82 = v132;
    if (swift_dynamicCast(v131, v160, v161, v132, 0))
    {
      v67 = 0x646564616F6C7075;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v81, v82);
      goto LABEL_46;
    }
    v83 = v126;
    v84 = v129;
    if (swift_dynamicCast(v126, v160, v161, v129, 0))
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v127, v83, v84);
      sub_100B70124((uint64_t)&v162);
      v85 = v163;
      if (v163)
      {
        v86 = v164;
        sub_100007E68(&v162, v163);
        v67 = sub_100B6E114(v85, v86);
        _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v162);
      }
      else
      {
        sub_10004FF60((uint64_t)&v162, &qword_1011D8A40);
        v67 = 0;
      }
      (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v129);
      goto LABEL_46;
    }
    v87 = v123;
    v88 = v124;
    if (swift_dynamicCast(v123, v160, v161, v124, 0))
    {
      v89 = v87;
      v90 = v122;
      v91 = v121;
      (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v121, v89, v88);
      Track.musicItem.getter((uint64_t)&v162);
      v92 = v163;
      if (v163)
      {
        v93 = v164;
        sub_100007E68(&v162, v163);
        v67 = sub_100B6E114(v92, v93);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v88);
LABEL_35:
        _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v162);
        goto LABEL_46;
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v88);
    }
    else
    {
      v94 = v120;
      v95 = v150;
      if (!swift_dynamicCast(v120, v160, v161, v150, 0))
      {
        v101 = v117;
        v102 = v41(v117, v159, v161);
        v103 = Logger.logObject.getter(v102);
        v105 = static os_log_type_t.fault.getter(v104);
        if (os_log_type_enabled(v103, v105))
        {
          v106 = swift_slowAlloc(12, -1);
          v107 = swift_slowAlloc(32, -1);
          v162 = v107;
          *(_DWORD *)v106 = 136315138;
          v108 = v153;
          v109 = v161;
          v41(v153, (uint64_t)v101, v161);
          v110 = (char *)String.init<A>(describing:)(v108, v109);
          *(_QWORD *)(v106 + 4) = sub_10099627C(v110, v111, &v162);
          v112 = swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t, __n128))v74)(v101, v109, v112);
          _os_log_impl((void *)&_mh_execute_header, v103, v105, "Unsupported MusicItem kind=%s", (uint8_t *)v106, 0xCu);
          swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v107, -1, -1);
          swift_slowDealloc(v106, -1, -1);
        }
        else
        {
          v74(v101, v161);
        }

        goto LABEL_45;
      }
      v96 = v119;
      v97 = v118;
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v94, v95);
      sub_100B6FC90((uint64_t)&v162);
      v98 = v95;
      v99 = v163;
      if (v163)
      {
        v100 = v164;
        sub_100007E68(&v162, v163);
        v67 = sub_100B6E114(v99, v100);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
        goto LABEL_35;
      }
      (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
    }
    sub_10004FF60((uint64_t)&v162, &qword_1011D8A40);
LABEL_45:
    v67 = 0;
    goto LABEL_46;
  }
  (*(void (**)(char *, uint64_t))(v151 + 8))(v62, v27);
  v67 = 0x736D75626C61;
  ((void (*)(char *, uint64_t))v56)(v160, v161);
  return v67;
}

uint64_t sub_100B6EEB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  NSObject *v111;
  __n128 v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  __n128 v119;
  uint64_t v120;
  char *v121;
  void (*v122)(char *, uint64_t, uint64_t, __n128);
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v129 = type metadata accessor for Playlist.Entry(0);
  v125 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v124 = (char *)&v120 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v126 = (char *)&v120 - v4;
  v133 = type metadata accessor for Track(0);
  v128 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v127 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v130 = (char *)&v120 - v7;
  v137 = type metadata accessor for GenericMusicItem(0);
  v132 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v131 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v136 = (char *)&v120 - v10;
  v141 = type metadata accessor for UploadedVideo(0);
  v135 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v134 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v140 = (char *)&v120 - v13;
  v145 = type metadata accessor for UploadedAudio(0);
  v139 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v138 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v144 = (char *)&v120 - v16;
  v149 = type metadata accessor for TVShow(0);
  v143 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v142 = (char *)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v148 = (char *)&v120 - v19;
  v153 = type metadata accessor for TVEpisode(0);
  v147 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v146 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v152 = (char *)&v120 - v22;
  v157 = type metadata accessor for Station(0);
  v151 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v150 = (char *)&v120 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v156 = (char *)&v120 - v25;
  v161 = type metadata accessor for Song(0);
  v155 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v154 = (char *)&v120 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v160 = (char *)&v120 - v28;
  v165 = type metadata accessor for Playlist(0);
  v159 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v158 = (char *)&v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v164 = (char *)&v120 - v31;
  v167 = type metadata accessor for MusicVideo(0);
  v163 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v162 = (char *)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v166 = (char *)&v120 - v34;
  v35 = type metadata accessor for MusicMovie(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v120 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v41 = (char *)&v120 - v40;
  v42 = type metadata accessor for Album(0);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v45 = (char *)&v120 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v48 = (char *)&v120 - v47;
  __chkstk_darwin(v49);
  v121 = (char *)&v120 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v123 = (char *)&v120 - v52;
  v54 = __chkstk_darwin(v53);
  v56 = (char *)&v120 - v55;
  v168 = v57;
  v122 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v57 + 16);
  v122((char *)&v120 - v55, v169, a1, v54);
  if (swift_dynamicCast(v48, v56, a1, v42, 0))
  {
    v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v43 + 32))(v45, v48, v42);
    v59 = Album.catalogID.getter(v58);
    v61 = v60;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    if (v61)
      v62 = v59;
    else
      v62 = 0;
    v63 = v168;
    goto LABEL_28;
  }
  if (swift_dynamicCast(v41, v56, a1, v35, 0))
  {
    v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v38, v41, v35);
    v62 = MusicMovie.catalogID.getter(v64);
    v66 = v65;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
    if (!v66)
      v62 = 0;
    v63 = v168;
    goto LABEL_28;
  }
  v68 = v166;
  v67 = v167;
  v69 = swift_dynamicCast(v166, v56, a1, v167, 0);
  v63 = v168;
  if (v69)
  {
    v71 = v162;
    v70 = v163;
    v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v163 + 32))(v162, v68, v67);
    v73 = MusicVideo.catalogID.getter(v72);
    goto LABEL_26;
  }
  v75 = v164;
  v67 = v165;
  if (swift_dynamicCast(v164, v56, a1, v165, 0))
  {
    v71 = v158;
    v70 = v159;
    v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v159 + 32))(v158, v75, v67);
    v73 = Playlist.catalogID.getter(v76);
    goto LABEL_26;
  }
  v77 = v160;
  v67 = v161;
  if (swift_dynamicCast(v160, v56, a1, v161, 0))
  {
    v71 = v154;
    v70 = v155;
    v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v155 + 32))(v154, v77, v67);
    v73 = Song.catalogID.getter(v78);
    goto LABEL_26;
  }
  v80 = v156;
  v79 = v157;
  if (swift_dynamicCast(v156, v56, a1, v157, 0))
  {
    v81 = v151;
    v82 = v150;
    v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v151 + 32))(v150, v80, v79);
    v62 = Station.id.getter(v83);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v79);
    goto LABEL_28;
  }
  v84 = v152;
  v67 = v153;
  if (swift_dynamicCast(v152, v56, a1, v153, 0))
  {
    v70 = v147;
    v71 = v146;
    v85 = (*(uint64_t (**)(char *, char *, uint64_t))(v147 + 32))(v146, v84, v67);
    v73 = TVEpisode.catalogID.getter(v85);
    goto LABEL_26;
  }
  v86 = v148;
  v67 = v149;
  if (swift_dynamicCast(v148, v56, a1, v149, 0))
  {
    v70 = v143;
    v71 = v142;
    v87 = (*(uint64_t (**)(char *, char *, uint64_t))(v143 + 32))(v142, v86, v67);
    v73 = TVShow.catalogID.getter(v87);
    goto LABEL_26;
  }
  v88 = v144;
  v67 = v145;
  if (swift_dynamicCast(v144, v56, a1, v145, 0))
  {
    v70 = v139;
    v71 = v138;
    v89 = (*(uint64_t (**)(char *, char *, uint64_t))(v139 + 32))(v138, v88, v67);
    v73 = UploadedAudio.catalogID.getter(v89);
    goto LABEL_26;
  }
  v90 = v140;
  v67 = v141;
  if (!swift_dynamicCast(v140, v56, a1, v141, 0))
  {
    v94 = v136;
    v95 = v137;
    if (swift_dynamicCast(v136, v56, a1, v137, 0))
    {
      v96 = v132;
      v97 = v131;
      (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v94, v95);
      sub_100B70124((uint64_t)&v170);
      v98 = v171;
      if (v171)
      {
        v99 = v172;
        sub_100007E68(&v170, v171);
        v62 = sub_100B6EEB4(v98, v99);
        _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v170);
      }
      else
      {
        sub_10004FF60((uint64_t)&v170, &qword_1011D8A40);
        v62 = 0;
      }
      (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v95);
      goto LABEL_28;
    }
    v100 = v130;
    v101 = v133;
    if (swift_dynamicCast(v130, v56, a1, v133, 0))
    {
      v102 = v128;
      v103 = v127;
      (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v127, v100, v101);
      Track.musicItem.getter((uint64_t)&v170);
    }
    else
    {
      v104 = v126;
      v101 = v129;
      if (!swift_dynamicCast(v126, v56, a1, v129, 0))
      {
        if (qword_1011D2548 != -1)
          swift_once(&qword_1011D2548, sub_100B70648);
        v107 = type metadata accessor for Logger(0);
        sub_100048B14(v107, (uint64_t)static Logger.capabilityUpsell);
        v108 = v123;
        v109 = (void (*)(char *, char *, uint64_t))v122;
        v110 = ((uint64_t (*)(char *, uint64_t, uint64_t))v122)(v123, v169, a1);
        v111 = Logger.logObject.getter(v110);
        v113 = static os_log_type_t.fault.getter(v112);
        if (os_log_type_enabled(v111, v113))
        {
          v114 = swift_slowAlloc(12, -1);
          v115 = swift_slowAlloc(32, -1);
          v170 = v115;
          *(_DWORD *)v114 = 136315138;
          v116 = v121;
          v109(v121, v108, a1);
          v117 = (char *)String.init<A>(describing:)(v116, a1);
          *(_QWORD *)(v114 + 4) = sub_10099627C(v117, v118, &v170);
          v119 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v108, a1, v119);
          _os_log_impl((void *)&_mh_execute_header, v111, v113, "Unsupported MusicItem catalogID=%s", (uint8_t *)v114, 0xCu);
          swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v115, -1, -1);
          swift_slowDealloc(v114, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v63 + 8))(v108, a1);
        }

        goto LABEL_47;
      }
      v102 = v125;
      v103 = v124;
      (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v124, v104, v101);
      sub_100B6FC90((uint64_t)&v170);
    }
    v105 = v171;
    if (v171)
    {
      v106 = v172;
      sub_100007E68(&v170, v171);
      v62 = sub_100B6EEB4(v105, v106);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v101);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v170);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v101);
    sub_10004FF60((uint64_t)&v170, &qword_1011D8A40);
LABEL_47:
    v62 = 0;
    goto LABEL_28;
  }
  v70 = v135;
  v71 = v134;
  v91 = (*(uint64_t (**)(char *, char *, uint64_t))(v135 + 32))(v134, v90, v67);
  v73 = UploadedVideo.catalogID.getter(v91);
LABEL_26:
  v62 = v73;
  v92 = v74;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v67);
  if (!v92)
    v62 = 0;
LABEL_28:
  (*(void (**)(char *, uint64_t))(v63 + 8))(v56, a1);
  return v62;
}

uint64_t Logger.capabilityUpsell.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1011D2548 != -1)
    swift_once(&qword_1011D2548, sub_100B70648);
  v0 = type metadata accessor for Logger(0);
  return sub_100048B14(v0, (uint64_t)static Logger.capabilityUpsell);
}

uint64_t sub_100B6FC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100A4F93C, v7, v8);
}

uint64_t sub_100B6FC90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  __n128 v27;
  os_log_type_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint8_t *v37;
  __n128 v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  os_log_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v3 = type metadata accessor for Playlist.Entry(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - v12;
  Playlist.Entry.internalItem.getter(v14);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v13, v7);
  if (v15 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    v16 = type metadata accessor for MusicMovie(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = &qword_1011D41B8;
    v19 = &protocol conformance descriptor for MusicMovie;
LABEL_3:
    *(_QWORD *)(a1 + 32) = sub_100048748(v18, v17, (uint64_t)v19);
LABEL_9:
    v22 = sub_100049F68((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v22, v13, v16);
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    v20 = type metadata accessor for MusicVideo(0);
    v16 = v20;
    v21 = &protocol witness table for MusicVideo;
LABEL_8:
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v21;
    goto LABEL_9;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    v20 = type metadata accessor for Song(0);
    v16 = v20;
    v21 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    v16 = type metadata accessor for TVEpisode(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = &qword_1011D41C0;
    v19 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_3;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    v16 = type metadata accessor for UploadedAudio(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = (unint64_t *)&unk_1011D4B88;
    v19 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_3;
  }
  if (v15 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    v16 = type metadata accessor for UploadedVideo(0);
    v17 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v16;
    v18 = &qword_1011D41D8;
    v19 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_3;
  }
  if (qword_1011D2548 != -1)
    swift_once(&qword_1011D2548, sub_100B70648);
  v24 = type metadata accessor for Logger(0);
  sub_100048B14(v24, (uint64_t)static Logger.capabilityUpsell);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.fault.getter(v27);
  v45 = v28;
  if (os_log_type_enabled(v26, v28))
  {
    v29 = (_DWORD *)swift_slowAlloc(12, -1);
    v42 = v29;
    v30 = swift_slowAlloc(32, -1);
    v44 = v30;
    v46 = v30;
    *v29 = 136315138;
    v43 = v26;
    Playlist.Entry.internalItem.getter(v30);
    v31 = sub_100048748(&qword_1011D3020, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem, (uint64_t)&protocol conformance descriptor for Playlist.Entry.InternalItem);
    v32 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v7, v31);
    v34 = v33;
    v35 = *(void (**)(char *, uint64_t))(v8 + 8);
    v35(v10, v7);
    v36 = sub_10099627C(v32, v34, &v46);
    v37 = (uint8_t *)v42;
    *(_QWORD *)(v42 + 1) = v36;
    v38 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v38);
    v39 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v45, "Unknown Entry internalItem=%s", v37, 0xCu);
    v40 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    v35 = *(void (**)(char *, uint64_t))(v8 + 8);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v35)(v13, v7);
}

uint64_t sub_100B70124@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t, __n128);
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __n128 v31;
  void (*v32)(char *, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for GenericMusicItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v33 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v11((char *)&v33 - v9, v1, v3, v8);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v10, v3);
  if (v12 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v13 = type metadata accessor for Album(0);
    v14 = v13;
    v15 = &protocol witness table for Album;
LABEL_14:
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_15;
  }
  if (v12 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v14 = type metadata accessor for MusicMovie(0);
    v16 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v14;
    v17 = &qword_1011D41B8;
    v18 = &protocol conformance descriptor for MusicMovie;
LABEL_5:
    *(_QWORD *)(a1 + 32) = sub_100048748(v17, v16, (uint64_t)v18);
LABEL_15:
    v19 = sub_100049F68((_QWORD *)a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v19, v10, v14);
  }
  if (v12 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v13 = type metadata accessor for MusicVideo(0);
    v14 = v13;
    v15 = &protocol witness table for MusicVideo;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v13 = type metadata accessor for Playlist(0);
    v14 = v13;
    v15 = &protocol witness table for Playlist;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v13 = type metadata accessor for Song(0);
    v14 = v13;
    v15 = &protocol witness table for Song;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v13 = type metadata accessor for Station(0);
    v14 = v13;
    v15 = &protocol witness table for Station;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v14 = type metadata accessor for TVEpisode(0);
    v16 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v14;
    v17 = &qword_1011D41C0;
    v18 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_5;
  }
  if (v12 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v14 = type metadata accessor for TVShow(0);
    v16 = (uint64_t (*)(uint64_t))&type metadata accessor for TVShow;
    *(_QWORD *)(a1 + 24) = v14;
    v17 = &qword_1011D41D0;
    v18 = &protocol conformance descriptor for TVShow;
    goto LABEL_5;
  }
  if (v12 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v14 = type metadata accessor for UploadedAudio(0);
    v16 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v14;
    v17 = (unint64_t *)&unk_1011D4B88;
    v18 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_5;
  }
  if (v12 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    v14 = type metadata accessor for UploadedVideo(0);
    v16 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v14;
    v17 = &qword_1011D41D8;
    v18 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_5;
  }
  if (qword_1011D2548 != -1)
    swift_once(&qword_1011D2548, sub_100B70648);
  v21 = type metadata accessor for Logger(0);
  sub_100048B14(v21, (uint64_t)static Logger.capabilityUpsell);
  v22 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v6, v1, v3);
  v23 = Logger.logObject.getter(v22);
  v25 = static os_log_type_t.fault.getter(v24);
  if (os_log_type_enabled(v23, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v34 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = sub_100048748(&qword_1011D3E50, (uint64_t (*)(uint64_t))&type metadata accessor for GenericMusicItem, (uint64_t)&protocol conformance descriptor for GenericMusicItem);
    v29 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v3, v28);
    *(_QWORD *)(v26 + 4) = sub_10099627C(v29, v30, &v34);
    v31 = swift_bridgeObjectRelease();
    v32 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
    v32(v6, v3, v31);
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "Unsupported GenericMusicItem kind=%s", (uint8_t *)v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
    ((void (*)(char *, uint64_t))v32)(v6, v3);
  }

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v32)(v10, v3);
}

uint64_t sub_100B70648()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, static Logger.capabilityUpsell);
  sub_100048B14(v0, (uint64_t)static Logger.capabilityUpsell);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0xD00000000000001CLL, 0x8000000100E535E0);
}

uint64_t static Logger.capabilityUpsell.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1011D2548 != -1)
    swift_once(&qword_1011D2548, sub_100B70648);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100048B14(v2, (uint64_t)static Logger.capabilityUpsell);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void _s9MusicCore27SubscriptionUpsellPresenterV7present3foryAC9PlacementO_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSString v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  const char *v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  __n128 v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  __n128 v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  char *v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  size_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  __int128 v110[2];
  unsigned __int8 v111;
  _OWORD v112[2];
  unsigned __int8 v113;

  v2 = sub_100007E8C((uint64_t *)&unk_1011D8CF0);
  __chkstk_darwin(v2);
  v4 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v96 - v9;
  v11 = sub_100007E8C(&qword_1011D2AE0);
  __chkstk_darwin(v11);
  v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v106 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v106 + 64);
  __chkstk_darwin(v14);
  v103 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v105 = (char *)&v96 - v17;
  if (qword_1011D1CF0 != -1)
    swift_once(&qword_1011D1CF0, sub_100A3CB80);
  sub_100007E8C(&qword_1011D6170);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10098A8A8);
  v18 = *(void **)&v112[0];
  if (!*(_QWORD *)&v112[0])
    goto LABEL_8;
  v104 = v14;
  v101 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(ICURLBagKeyMarketingItemDynamicUIUrl);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "stringForBagKey:", v19, swift_bridgeObjectRelease().n128_f64[0]);

  if (!v20)
  {

    goto LABEL_8;
  }
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)&v112[0] = 0x2F2F3A636973756DLL;
  *((_QWORD *)&v112[0] + 1) = 0xE800000000000000;
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  URL.init(string:)(*(_QWORD *)&v112[0], *((_QWORD *)&v112[0] + 1));
  v25 = swift_bridgeObjectRelease();
  v26 = v106;
  v27 = v104;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v106 + 48))(v13, 1, v104, v25) == 1)
  {

    sub_10004FF60((uint64_t)v13, &qword_1011D2AE0);
LABEL_8:
    if (qword_1011D2548 != -1)
      swift_once(&qword_1011D2548, sub_100B70648);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100048B14(v28, (uint64_t)static Logger.capabilityUpsell);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Could not build marketingURL", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    return;
  }
  v33 = 0xD000000000000011;
  v98 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v98(v105, v13, v27);
  v34 = sub_100007E8C(&qword_1011D3E00);
  v35 = *(unsigned __int8 *)(v5 + 80);
  v36 = (v35 + 32) & ~v35;
  v100 = *(_QWORD *)(v5 + 72);
  v37 = swift_allocObject(v34, v36 + 2 * v100, v35 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_100EA7A80;
  v99 = v37;
  v97 = v36;
  URLQueryItem.init(name:value:)(0x5465636976726573, 0xEB00000000657079, 0x636973756DLL, 0xE500000000000000);
  sub_100B71928(a1, (uint64_t)v112);
  if (v113 == 253)
  {
    v33 = 0xD000000000000017;
    v40 = 0x8000000100E53600;
    v38 = v105;
  }
  else
  {
    v38 = v105;
    if (v113 == 255)
    {
      v39 = "musicAddToLibrary";
    }
    else if (v113 == 254)
    {
      v33 = 0xD000000000000012;
      v39 = "musicAddToPlaylist";
    }
    else
    {
      sub_1002A4CE4((uint64_t)v112);
      v33 = 0xD000000000000013;
      v39 = "musicPlaybackUpsell";
    }
    v40 = (unint64_t)(v39 - 32) | 0x8000000000000000;
  }
  URLQueryItem.init(name:value:)(0x6E656D6563616C70, 0xE900000000000074, v33, v40);
  swift_bridgeObjectRelease();
  sub_100B71928(a1, (uint64_t)v110);
  if (v111 < 0xFDu)
  {
    sub_100B19F98(v110, v112);
    v42 = sub_100B6DF0C();
    v41 = v99;
    if (v43)
    {
      URLQueryItem.init(name:value:)(0x74694B616964656DLL, 0xEC000000646E694BLL, v42, v43);
      swift_bridgeObjectRelease();
      v45 = *(_QWORD *)(v41 + 16);
      v44 = *(_QWORD *)(v41 + 24);
      v46 = v102;
      if (v45 >= v44 >> 1)
        v41 = sub_1009B96D4(v44 > 1, v45 + 1, 1, (char *)v41);
      *(_QWORD *)(v41 + 16) = v45 + 1;
      (*(void (**)(size_t, char *, uint64_t))(v5 + 32))(v41 + v97 + v45 * v100, v10, v46);
    }
    else
    {
      if (qword_1011D2548 != -1)
        swift_once(&qword_1011D2548, sub_100B70648);
      v47 = type metadata accessor for Logger(0);
      sub_100048B14(v47, (uint64_t)static Logger.capabilityUpsell);
      v48 = sub_100B71A54((uint64_t)v112, (uint64_t)v110);
      v49 = Logger.logObject.getter(v48);
      v51 = static os_log_type_t.fault.getter(v50);
      if (os_log_type_enabled(v49, v51))
      {
        v52 = swift_slowAlloc(12, -1);
        v53 = swift_slowAlloc(32, -1);
        v109 = v53;
        *(_DWORD *)v52 = 136315138;
        sub_100B71A54((uint64_t)v110, (uint64_t)v107);
        v54 = (char *)String.init<A>(describing:)(v107, &type metadata for SubscriptionUpsellPresenter.Placement.Source);
        *(_QWORD *)(v52 + 4) = sub_10099627C(v54, v55, &v109);
        swift_bridgeObjectRelease();
        sub_100B71A88((uint64_t)v110);
        _os_log_impl((void *)&_mh_execute_header, v49, v51, "Missing kind for item=%s", (uint8_t *)v52, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        v56 = v53;
        v41 = v99;
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        sub_100B71A88((uint64_t)v110);
      }

      v46 = v102;
    }
    sub_100B71A54((uint64_t)v112, (uint64_t)v110);
    if (v111 == 1)
    {
      v57 = *(void **)&v110[0];
      v58 = MPModelObject.bestIdentifier(for:)(2, 1u);
      v60 = v59;

      if (v60)
      {
LABEL_35:
        URLQueryItem.init(name:value:)(1684366707, 0xE400000000000000, v58, v60);
        swift_bridgeObjectRelease();
        v62 = *(_QWORD *)(v41 + 16);
        v61 = *(_QWORD *)(v41 + 24);
        if (v62 >= v61 >> 1)
          v41 = sub_1009B96D4(v61 > 1, v62 + 1, 1, (char *)v41);
        v38 = v105;
        *(_QWORD *)(v41 + 16) = v62 + 1;
        (*(void (**)(size_t, char *, uint64_t))(v5 + 32))(v41 + v97 + v62 * v100, v7, v46);
        sub_100B71A88((uint64_t)v112);
        goto LABEL_45;
      }
    }
    else
    {
      sub_100064C48(v110, (uint64_t)v107);
      v63 = v108;
      sub_100007E68(v107, v108);
      v58 = sub_100B6EEB4(v63);
      v60 = v64;
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v107);
      if (v60)
        goto LABEL_35;
    }
    if (qword_1011D2548 != -1)
      swift_once(&qword_1011D2548, sub_100B70648);
    v65 = type metadata accessor for Logger(0);
    sub_100048B14(v65, (uint64_t)static Logger.capabilityUpsell);
    v66 = sub_100B71A54((uint64_t)v112, (uint64_t)v110);
    v67 = Logger.logObject.getter(v66);
    v69 = static os_log_type_t.fault.getter(v68);
    if (os_log_type_enabled(v67, v69))
    {
      v70 = swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v109 = v71;
      *(_DWORD *)v70 = 136315138;
      sub_100B71A54((uint64_t)v110, (uint64_t)v107);
      v72 = (char *)String.init<A>(describing:)(v107, &type metadata for SubscriptionUpsellPresenter.Placement.Source);
      *(_QWORD *)(v70 + 4) = sub_10099627C(v72, v73, &v109);
      swift_bridgeObjectRelease();
      sub_100B71A88((uint64_t)v110);
      _os_log_impl((void *)&_mh_execute_header, v67, v69, "Missing id for item=%s", (uint8_t *)v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

    }
    else
    {

      sub_100B71A88((uint64_t)v110);
    }
    sub_100B71A88((uint64_t)v112);
    v38 = v105;
    goto LABEL_45;
  }
  sub_1002A4CE4((uint64_t)v110);
  v41 = v99;
LABEL_45:
  URL.append(queryItems:)((Swift::OpaquePointer)v41);
  swift_bridgeObjectRelease();
  if (qword_1011D2548 != -1)
    swift_once(&qword_1011D2548, sub_100B70648);
  v74 = type metadata accessor for Logger(0);
  v75 = sub_100048B14(v74, (uint64_t)static Logger.capabilityUpsell);
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.default.getter();
  v78 = os_log_type_enabled(v76, v77);
  v79 = (uint64_t)v101;
  if (v78)
  {
    v80 = swift_slowAlloc(12, -1);
    v81 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v112[0] = v81;
    *(_DWORD *)v80 = 136446210;
    swift_beginAccess(v38, v110, 0, 0);
    v82 = sub_100048748((unint64_t *)&qword_1011D68B8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v83 = v104;
    v84 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v104, v82);
    *(_QWORD *)(v80 + 4) = sub_10099627C(v84, v85, (uint64_t *)v112);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Will present upsell with URL=%{public}s", (uint8_t *)v80, 0xCu);
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);

  }
  else
  {

    v83 = v104;
  }
  v86 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v79, 1, 1, v86);
  v87 = swift_beginAccess(v38, v112, 0, 0);
  v88 = v106;
  v89 = v103;
  (*(void (**)(char *, char *, uint64_t, __n128))(v106 + 16))(v103, v38, v83, v87);
  type metadata accessor for MainActor(0);
  v91 = static MainActor.shared.getter(v90);
  v92 = *(unsigned __int8 *)(v88 + 80);
  v93 = v38;
  v94 = (v92 + 32) & ~v92;
  v95 = swift_allocObject(&unk_1010FEBA0, v94 + v15, v92 | 7);
  *(_QWORD *)(v95 + 16) = v91;
  *(_QWORD *)(v95 + 24) = &protocol witness table for MainActor;
  v98((char *)(v95 + v94), v89, v83);
  sub_100A3F884(v79, (uint64_t)&unk_1011DC2B0, v95);
  swift_release();

  (*(void (**)(char *, uint64_t))(v88 + 8))(v93, v83);
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter()
{
  return &type metadata for SubscriptionUpsellPresenter;
}

void destroy for SubscriptionUpsellPresenter.Placement(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 <= 1)
  {
    if (v1 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
  }
}

uint64_t initializeWithCopy for SubscriptionUpsellPresenter.Placement(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 > 1)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else if (v3 == 1)
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
    v5 = v4;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SubscriptionUpsellPresenter.Placement(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *((unsigned __int8 *)a2 + 40);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
LABEL_17:
        v11 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      }
      goto LABEL_8;
    }
LABEL_12:
    v8 = *a2;
    v9 = a2[1];
    *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  if (v5 > 1)
  {
    if (v4 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
    goto LABEL_12;
  }
  if ((__int128 *)a1 != a2)
  {
    if (v4 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
    v10 = *((unsigned __int8 *)a2 + 40);
    if (v10 >= 2)
      v10 = *(_DWORD *)a2 + 2;
    if (v10 != 1)
      goto LABEL_17;
LABEL_8:
    v6 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
    v7 = v6;
  }
  return a1;
}

uint64_t assignWithTake for SubscriptionUpsellPresenter.Placement(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  unsigned int v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
LABEL_17:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      }
      goto LABEL_8;
    }
LABEL_12:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    return a1;
  }
  if (v5 > 1)
  {
    if (v4 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
    goto LABEL_12;
  }
  if (a1 != a2)
  {
    if (v4 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
    v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 != 1)
      goto LABEL_17;
LABEL_8:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 4)
    return v4 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -3 - a2;
  }
  return result;
}

uint64_t sub_100B71648(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_100B7165C(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFE)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 25) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter.Placement()
{
  return &type metadata for SubscriptionUpsellPresenter.Placement;
}

void destroy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)

  else
    _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
}

uint64_t initializeWithCopy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  char v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = v4;
    v6 = 1;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    v6 = 0;
  }
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
      v7 = v6;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)

    else
      _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter.Placement.Source()
{
  return &type metadata for SubscriptionUpsellPresenter.Placement.Source;
}

uint64_t sub_100B71928(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionUpsellPresenter.Placement(a2, a1);
  return a2;
}

uint64_t sub_100B7195C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B719D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1011DC2AC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10005AEE4;
  return sub_100B6FC24(a1, v5, v6, v7);
}

uint64_t sub_100B71A54(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionUpsellPresenter.Placement.Source(a2, a1);
  return a2;
}

uint64_t sub_100B71A88(uint64_t a1)
{
  destroy for SubscriptionUpsellPresenter.Placement.Source(a1);
  return a1;
}

uint64_t static ApplicationRecordUtilities.isApplicationInstalled(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  result = (uint64_t)sub_100B7262C(a1, a2, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t static ApplicationRecordUtilities.openApplication(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_task_switch(sub_100B71B4C, 0, 0);
}

id sub_100B71B4C()
{
  _QWORD *v0;
  id result;
  void *v2;
  _QWORD *v3;
  NSString v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;

  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  v0[17] = result;
  if (result)
  {
    v2 = result;
    v3 = v0 + 2;
    v4 = String._bridgeToObjectiveC()();
    v0[18] = v4;
    v0[7] = v0 + 20;
    v0[2] = v0;
    v0[3] = sub_100B71C2C;
    v5 = swift_continuation_init(v0 + 2, 1);
    v0[10] = _NSConcreteStackBlock;
    v6 = v0 + 10;
    v6[1] = 0x40000000;
    v6[2] = sub_100B71D0C;
    v6[3] = &unk_1010FF2D8;
    v6[4] = v5;
    objc_msgSend(v2, "openApplicationWithBundleIdentifier:configuration:completionHandler:", v4, 0, v6);
    return (id)swift_continuation_await(v3, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B71C2C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_100B71CC4;
  else
    v2 = sub_100B71C8C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B71C8C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B71CC4(__n128 a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v1 + 144);
  v3 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100B71D0C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100007E8C(&qword_1011DC4F0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    swift_continuation_throwingResume(v3);
  }
}

NSString sub_100B71D8C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.applicationRegistered = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.applicationRegistered.unsafeMutableAddressor()
{
  if (qword_1011DC2C0 != -1)
    swift_once(&qword_1011DC2C0, sub_100B71D8C);
  return &static NSNotificationName.applicationRegistered;
}

id static NSNotificationName.applicationRegistered.getter()
{
  if (qword_1011DC2C0 != -1)
    swift_once(&qword_1011DC2C0, sub_100B71D8C);
  return (id)static NSNotificationName.applicationRegistered;
}

id variable initialization expression of BrightnessManager.brightnessClient()
{
  return objc_msgSend(objc_allocWithZone((Class)BrightnessSystemClient), "init");
}

unint64_t variable initialization expression of BrightnessManager.minimumBrightness()
{
  return sub_100B71E70((uint64_t)&off_1010FEBB8);
}

unint64_t sub_100B71E70(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DC4E0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = sub_100B87504(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100B71F80(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DC4D8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = sub_100B87504(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v3[7] + result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 24;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100B72090(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t result;
  char v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DC4C8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (unint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *(v5 - 1);
    v7 = *v5;
    v8 = v5[1];
    v9 = v5[2];
    v10 = v5[3];
    v11 = v5[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_100B875A4(v6, v7, v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (unint64_t *)(v3[6] + 32 * result);
    *v14 = v6;
    v14[1] = v7;
    v14[2] = v8;
    v14[3] = v9;
    v15 = (unint64_t *)(v3[7] + 16 * result);
    *v15 = v10;
    v15[1] = v11;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v5 += 6;
    v3[2] = v18;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100B721CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DC4B8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_100B87504(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100B722EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DC4B0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = (void *)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    v10 = v9;
    swift_bridgeObjectRetain();
    result = sub_100B8762C(v6, v7, (uint64_t)v10);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v3[6] + 24 * result);
    *v13 = v6;
    v13[1] = v7;
    v13[2] = (uint64_t)v10;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v3[2] = v16;
    v5 += 4;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100B72428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DC4E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_100B87504(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of BrightnessManager.resetBrightness()
{
  return sub_100B71E70((uint64_t)&off_1010FEC08);
}

unint64_t variable initialization expression of BrightnessManager.disableCBFeatures()
{
  return sub_100B71F80((uint64_t)&off_1010FEC58);
}

unint64_t variable initialization expression of BrightnessManager.enableCBFeatures()
{
  return sub_100B71F80((uint64_t)&off_1010FEC90);
}

uint64_t variable initialization expression of Datavault.logger@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of WeakArray.items(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for WeakArray.WeakBox(0, a1, a1, a4);
  return static Array._allocateUninitialized(_:)(0, v4);
}

uint64_t variable initialization expression of WeakValuesDictionary.storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;

  v5 = sub_100B72A70();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a1, v5, 0, 0);
  v7 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  return Dictionary.init(dictionaryLiteral:)(v7, a1, v5, a3);
}

id sub_100B7262C(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  __n128 v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

NSNumber sub_100B72704()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_100B7270C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_100B7275C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_100B727B0(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100B727D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DC490, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100EE6860);
  v3 = sub_100048748(&qword_1011DC498, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100EE6800);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100B72858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DC4A0, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100EE6A84);
  v3 = sub_100048748(&qword_1011DC4A8, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100EE647C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_DWORD *sub_100B728DC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_100B728EC@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_100B728F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DC480, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100EE69B8);
  v3 = sub_100048748(&qword_1011DC488, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100EE6958);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_100B7298C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748((unint64_t *)&qword_1011DC520, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100EE6C1C);
  v3 = sub_100048748(qword_1011DC528, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100EE6B70);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100B72A10()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_100B72A18()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_100B72A48(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

BOOL sub_100B72A5C(float *a1, float *a2)
{
  return *a1 == *a2;
}

unint64_t sub_100B72A70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DC380;
  if (!qword_1011DC380)
  {
    v1 = objc_opt_self(NSValue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DC380);
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationRecordUtilities()
{
  return &type metadata for ApplicationRecordUtilities;
}

void type metadata accessor for AnimationCurve(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC388, (uint64_t)&unk_1010FF440);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC390, (uint64_t)&unk_1010FF460);
}

__n128 initializeWithTake for KeyboardObserver(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void _s3__C23NSDirectionalEdgeInsetsVMa_1(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC398, (uint64_t)&unk_1010FF4E0);
}

void type metadata accessor for CTFrame(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3A0, (uint64_t)&unk_1010FF510);
}

void type metadata accessor for Event(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3A8, (uint64_t)&unk_1010FF540);
}

void _s3__C4NameVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3B0, (uint64_t)&unk_1010FF568);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3B8, (uint64_t)&unk_1010FF590);
}

void _s3__C24MPCPlaybackIntentOptionsVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3C0, (uint64_t)&unk_1010FF5B8);
}

__n128 _s5SuiteOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void _s3__C8_NSRangeVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3C8, (uint64_t)&unk_1010FF638);
}

void _s3__C6CGRectVMa_2(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3D0, (uint64_t)&unk_1010FF6B8);
}

void type metadata accessor for Attribute(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3E0, (uint64_t)&unk_1010FF700);
}

void _s3__C6CGSizeVMa_2(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3E8, (uint64_t)&unk_1010FF778);
}

void _s3__C3KeyVMa_1(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3F0, (uint64_t)&unk_1010FF7A0);
}

void _s3__C7CGPointVMa_2(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC3F8, (uint64_t)&unk_1010FF820);
}

void type metadata accessor for CTRun(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC400, (uint64_t)&unk_1010FF848);
}

void type metadata accessor for CTLine(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC408, (uint64_t)&unk_1010FF878);
}

uint64_t sub_100B72C2C()
{
  return sub_100048748(&qword_1011DC410, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100EE6440);
}

uint64_t sub_100B72C58()
{
  return sub_100048748(&qword_1011DC418, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)"͔!");
}

uint64_t sub_100B72C84()
{
  return sub_100048748(&qword_1011DC420, (uint64_t (*)(uint64_t))type metadata accessor for Attribute, (uint64_t)&unk_100EE6578);
}

uint64_t sub_100B72CB0()
{
  return sub_100048748(&qword_1011DC428, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_100EE6628);
}

uint64_t sub_100B72CDC()
{
  return sub_100048748(&qword_1011DC430, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_100EE65F4);
}

uint64_t sub_100B72D08()
{
  return sub_100048748(&qword_1011DC438, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_100EE6654);
}

uint64_t sub_100B72D34()
{
  return sub_100048748(&qword_1011DC440, (uint64_t (*)(uint64_t))_s3__C24MPCPlaybackIntentOptionsVMa_0, (uint64_t)&unk_100EE6690);
}

uint64_t sub_100B72D60()
{
  return sub_100048748(&qword_1011DC448, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100EE67C4);
}

uint64_t sub_100B72D8C()
{
  return sub_100048748(&qword_1011DC450, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100EE6798);
}

uint64_t sub_100B72DB8()
{
  return sub_100048748(&qword_1011DC458, (uint64_t (*)(uint64_t))_s3__C4NameVMa_0, (uint64_t)&unk_100EE6834);
}

uint64_t sub_100B72DE4()
{
  return sub_100048748(&qword_1011DC460, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100EE691C);
}

uint64_t sub_100B72E10()
{
  return sub_100048748(&qword_1011DC468, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100EE68F0);
}

uint64_t sub_100B72E3C()
{
  return sub_100048748(&qword_1011DC470, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_100EE698C);
}

uint64_t sub_100B72E68()
{
  return sub_100048748(&qword_1011DC478, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100EE64B0);
}

unint64_t sub_100B72E94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100007E8C(&qword_1011DC4D0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  result = sub_100B87518(v5, v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_BYTE *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v5;
    v10[1] = v4;
    *(_BYTE *)(v3[7] + result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 24;
    v5 = *((_QWORD *)v9 - 2);
    v15 = *((_QWORD *)v9 - 1);
    v6 = *v9;
    swift_bridgeObjectRetain();
    result = sub_100B87518(v5, v15);
    v9 = v14;
    v4 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_100B72FA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100007E8C(&qword_1011DC4C0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_10079C6C0(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

void type metadata accessor for MPModelPlaylistEntryType(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC4F8, (uint64_t)&unk_1010FF8A8);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DC500, (uint64_t)&unk_1010FF8C8);
}

uint64_t sub_100B730A8()
{
  return sub_100048748(&qword_1011DC508, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100EE6B34);
}

uint64_t sub_100B730D4()
{
  return sub_100048748(&qword_1011DC510, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)"ٍ!");
}

uint64_t sub_100B73100()
{
  return sub_100048748(&qword_1011DC518, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100EE6BA4);
}

uint64_t static ArrayBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  _QWORD v7[6];

  v7[5] = a1;
  v7[2] = a2;
  v2 = type metadata accessor for Array(255);
  v3 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  v5 = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  return Sequence.flatMap<A>(_:)(sub_1009AD1D0, v7, v3, v2, WitnessTable, v5);
}

uint64_t static ArrayBuilder.buildExpression(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  _QWORD v14[6];

  v4 = type metadata accessor for Optional(255, a2);
  v5 = type metadata accessor for _ContiguousArrayStorage(0, v4);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72), *(unsigned __int8 *)(v6 + 80) | 7);
  v8 = static Array._adoptStorage(_:count:)(v7, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, a1, v4);
  v14[5] = v8;
  v10 = type metadata accessor for Array(0);
  UIScreen.Dimensions.size.getter(v10);
  v14[2] = a2;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v12 = Sequence.compactMap<A>(_:)(sub_100B732C0, v14, v10, a2, WitnessTable);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100B732C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
}

uint64_t type metadata accessor for ArrayBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArrayBuilder);
}

uint64_t Whitetail.Binding.configurationBlock.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 48, 7);
  Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(a1, a2, a3, a4);
  return v9;
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _BYTE v13[72];

  v9 = sub_100007E8C(&qword_1011DC5C0);
  inited = swift_initStackObject(v9, v13);
  *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
  *(_QWORD *)(inited + 56) = &type metadata for NotificationTrigger;
  *(_QWORD *)(inited + 64) = &protocol witness table for NotificationTrigger;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = 0;
  v11 = swift_allocObject(v4, 48, 7);
  Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, a2, a3, a4);
  return v11;
}

uint64_t Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  __n128 v19;
  void *v20;
  void *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;
  char v32[32];

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 40) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a4;
  swift_retain(v5);
  swift_retain(a4);
  v16 = sub_100B7495C(a1, v5);
  swift_bridgeObjectRelease(a1);
  swift_release(v5);
  swift_beginAccess(v5 + 40, v32, 1, 0);
  v17 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v16;
  swift_bridgeObjectRelease(v17);
  if ((a2 & 1) != 0)
  {
    v18 = (void *)objc_opt_self(NSThread);
    swift_retain_n(v5, 2);
    if (objc_msgSend(v18, "isMainThread"))
    {
      (*(void (**)(void))(v5 + 16))();
    }
    else
    {
      sub_100B74AD0();
      v20 = (void *)static OS_dispatch_queue.main.getter();
      aBlock[4] = sub_10004D5F4;
      v31 = v5;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001DBD98;
      aBlock[3] = &unk_1010FFA80;
      v21 = _Block_copy(aBlock);
      v22 = v31;
      swift_retain(v5);
      v23 = swift_release(v22);
      static DispatchQoS.unspecified.getter(v23);
      aBlock[0] = _swiftEmptyArrayStorage;
      v24 = sub_100048748((unint64_t *)&qword_1011DC5B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v25 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
      v26 = sub_100B74B24();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v10, v24);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v21);
      _Block_release(v21);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
      v19.n128_f64[0] = (*(double (**)(char *, uint64_t))(v13 + 8))(v15, v28);
    }
    swift_release_n(v5, 2, v19);
  }
  swift_release(a4);
  return v5;
}

Swift::Void __swiftcall Whitetail.Binding.setNeedsUpdate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s *)(v1 + 32);
  swift_beginAccess(v1 + 32, aBlock, 33, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  swift_endAccess(aBlock);
  if ((*(_BYTE *)(v1 + 36) & 1) == 0)
  {
    *(_BYTE *)(v1 + 36) = 1;
    sub_100B74AD0();
    v19 = v3;
    v11 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_100B74B70;
    v21 = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001DBD98;
    aBlock[3] = &unk_1010FFAA8;
    v12 = _Block_copy(aBlock);
    v13 = v21;
    swift_retain(v1);
    v14 = swift_release(v13);
    static DispatchQoS.unspecified.getter(v14);
    aBlock[0] = _swiftEmptyArrayStorage;
    v15 = sub_100048748((unint64_t *)&qword_1011DC5B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
    v17 = sub_100B74B24();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v2, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
    _Block_release(v12);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess(v10, aBlock, 33, 0);
  os_unfair_lock_unlock(v10);
  swift_endAccess(aBlock);
}

uint64_t Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  _BYTE v13[72];

  v9 = sub_100007E8C(&qword_1011DC5C0);
  inited = swift_initStackObject(v9, v13);
  *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
  sub_100064C78((uint64_t)a1, inited + 32);
  v11 = swift_allocObject(v4, 48, 7);
  Whitetail.Binding.init(_:needsInitialConfiguration:configurationBlock:)(inited, a2, a3, a4);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(a1);
  return v11;
}

void Whitetail.Binding.add(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(double (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v3 = a1[3];
  v4 = a1[4];
  sub_100007E68(a1, v3);
  v5 = swift_allocObject(&unk_1010FFAE0, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v6 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t, __n128))(v4 + 8);
  v7 = swift_retain();
  v8 = v6(sub_100B74B9C, v5, v3, v4, v7);
  if (v2)
  {
    swift_errorRelease(v2);
    swift_release_n(v5, 2, v10);
  }
  else
  {
    v11 = v8;
    swift_release_n(v5, 2, v9);
    swift_beginAccess(v1 + 40, v17, 33, 0);
    v13 = swift_unknownObjectRetain(v11, v12);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
    v15 = *(_QWORD *)((*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v14 = *(_QWORD *)((*(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v15 >= v14 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v11);
    specialized Array._endMutation()(v16);
    swift_endAccess(v17);
    swift_unknownObjectRelease(v11);
  }
}

double sub_100B73B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    Whitetail.Binding.setNeedsUpdate()();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Whitetail.Binding.add(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(double (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _QWORD *v24;

  v3 = v2;
  v4 = *((_QWORD *)a1._rawValue + 2);
  if (v4)
  {
    v5 = v1;
    v6 = (char *)a1._rawValue + 32;
    v24 = (_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain();
    do
    {
      v9 = v6[3];
      v8 = v6[4];
      sub_100007E68(v6, v9);
      v10 = swift_allocObject(&unk_1010FFAE0, 24, 7);
      v11 = v5;
      swift_weakInit(v10 + 16, v5);
      v12 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t, __n128))(v8 + 8);
      v13 = swift_retain();
      v14 = v12(sub_100B74B9C, v10, v9, v8, v13);
      if (v3)
      {
        swift_errorRelease(v3);
        swift_release_n(v10, 2, v7);
        v3 = 0;
      }
      else
      {
        v16 = v14;
        swift_release_n(v10, 2, v15);
        v17 = v24;
        swift_beginAccess(v24, v23, 33, 0);
        v19 = swift_unknownObjectRetain(v16, v18);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        v21 = *(_QWORD *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v20 = *(_QWORD *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v21 >= v20 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v16);
        specialized Array._endMutation()(v22);
        swift_endAccess(v23);
        swift_unknownObjectRelease(v16);
      }
      v5 = v11;
      v6 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100B73CFC(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = (os_unfair_lock_s *)(a1 + 32);
  swift_beginAccess(a1 + 32, v5, 33, 0);
  os_unfair_lock_lock(v2);
  *(_BYTE *)(a1 + 36) = 0;
  os_unfair_lock_unlock(v2);
  v3 = swift_endAccess(v5);
  return (*(uint64_t (**)(uint64_t))(a1 + 16))(v3);
}

uint64_t Whitetail.Binding.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  _QWORD v12[3];
  _QWORD v13[2];

  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)(*v0, 0);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v12[0] = v0;
  _print_unlocked<A, B>(_:_:)(v12, v13, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 0x6576726573626F20;
  v5._object = (void *)0xEB000000003D7372;
  String.append(_:)(v5);
  swift_beginAccess(v0 + 5, v12, 0, 0);
  v6 = v0[5];
  v7 = swift_bridgeObjectRetain();
  v8._countAndFlagsBits = Array.description.getter(v7, (char *)&type metadata for Swift.AnyObject + 8);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v13[0];
}

uint64_t Whitetail.Binding.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t Whitetail.Binding.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100B73EE0()
{
  return Whitetail.Binding.description.getter();
}

id DistributedNotificationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  NSString v7;
  void *v8;
  id v9;
  _QWORD v11[6];

  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v5 = swift_allocObject(&unk_1010FFB08, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = objc_allocWithZone((Class)MusicDarwinNotificationObserver);
  swift_retain();
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v11[4] = sub_10004D5F4;
  v11[5] = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1001DBD98;
  v11[3] = &unk_1010FFB20;
  v8 = _Block_copy(v11);
  v9 = objc_msgSend(v6, "initWithNotificationName:handler:", v7, v8);

  _Block_release(v8);
  swift_release();
  return v9;
}

id sub_100B7400C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return DistributedNotificationTrigger.createObserver(_:)(a1, a2, *v2);
}

uint64_t NotificationTrigger.object.getter(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectRetain(a2, a2);
}

uint64_t NotificationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = swift_allocObject(&unk_1010FFB58, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = type metadata accessor for NotificationObserver();
  swift_allocObject(v9, 64, 7);
  swift_unknownObjectRetain(a4, v10);
  swift_retain();
  return NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(a3, a4, 1, 1, (uint64_t)sub_10004D5F4, v8);
}

uint64_t sub_100B740DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(void **)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v7 = swift_allocObject(&unk_1010FFE68, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = type metadata accessor for NotificationObserver();
  swift_allocObject(v8, 64, 7);
  swift_unknownObjectRetain(v5, v9);
  swift_retain();
  return NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v6, v5, 1, 1, (uint64_t)sub_10013C910, v7);
}

uint64_t KeyValueObservationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;

  v12 = (_QWORD *)swift_allocObject(&unk_1010FFB80, 48, 7);
  v12[2] = a5;
  v12[3] = a6;
  v12[4] = a1;
  v12[5] = a2;
  v13 = a3;
  swift_retain();
  v14 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(a4, 0, sub_100253DA4, v12, &protocol witness table for NSObject);
  swift_release();

  return v14;
}

uint64_t sub_100B7423C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyValueObservationTrigger.createObserver(_:)(a1, a2, *(void **)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t UserDefaultsKeyValueTrigger.init<A>(suiteName:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  dispatch thunk of RawRepresentable.rawValue.getter(&v9, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a3, a4);
  return a1;
}

char *UserDefaultsKeyValueTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char *v13;

  v12 = swift_allocObject(&unk_1010FFBA8, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v13 = sub_100B74390(a5, a6, a3, a4, (uint64_t)sub_10013C910, v12);
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

char *sub_100B74390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];

  v36 = a5;
  v37 = a6;
  v10 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v35 = (uint64_t)&v34 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - v17;
  v38[0] = a1;
  v38[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = String.init<A>(_:)(v38, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v21 = v20;
  UUID.init()(v19);
  v22 = &v18[*(int *)(v10 + 20)];
  *(_QWORD *)v22 = a3;
  *((_QWORD *)v22 + 1) = a4;
  v23 = (uint64_t *)&v18[*(int *)(v10 + 24)];
  *v23 = v19;
  v23[1] = v21;
  if (qword_1011DC338 != -1)
    swift_once(&qword_1011DC338, sub_100B9C808);
  v24 = qword_1011DD598;
  v25 = *(_QWORD *)(qword_1011DD598
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 16));
  v26 = v38[3];
  sub_100B9C8DC(v24, (uint64_t)v18, v36, v37);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
  if (v26)
  {
    sub_100B75168((uint64_t)v18);
  }
  else
  {
    v27 = v35;
    sub_100B751A4((uint64_t)v18, v35);
    sub_100B751E8((uint64_t)v18, (uint64_t)v13);
    v28 = *(unsigned __int8 *)(v11 + 80);
    v29 = (v28 + 16) & ~v28;
    v30 = swift_allocObject(&unk_1010FFE90, v29 + v12, v28 | 7);
    sub_100B751E8((uint64_t)v13, v30 + v29);
    v31 = type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    v13 = (char *)swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    sub_100B751E8(v27, (uint64_t)&v13[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier]);
    v32 = (void (**)())&v13[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate];
    *v32 = sub_100B752C8;
    v32[1] = (void (*)())v30;
  }
  return v13;
}

char *sub_100B745CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v5 = *v2;
  v6 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  v9 = swift_allocObject(&unk_1010FFE40, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = sub_100B74390(v8, v7, v5, v6, (uint64_t)sub_10013C910, v9);
  swift_bridgeObjectRelease();
  swift_release();
  return v10;
}

uint64_t PublisherTrigger.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a3, a1, v5);
}

uint64_t PublisherTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  void *WitnessTable;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40[4];

  v38 = a1;
  v39 = a2;
  v4 = sub_100007E8C(&qword_1011DC5C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a3 + 16);
  v7 = (void *)type metadata accessor for Published.Publisher(255, v37);
  v8 = (void *)sub_100B74AD0();
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for Published<A>.Publisher, v7);
  v34 = WitnessTable;
  v10 = (void *)sub_100048748(&qword_1011DC5D0, (uint64_t (*)(uint64_t))sub_100B74AD0, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v40[0] = v7;
  v40[1] = v8;
  v40[2] = WitnessTable;
  v40[3] = v10;
  v11 = type metadata accessor for Publishers.ReceiveOn(0, v40);
  v35 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - v12;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.ReceiveOn<A, B>, v11);
  v15 = type metadata accessor for Publishers.Drop(0, v11, v14);
  v36 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - v16;
  v40[0] = (id)static OS_dispatch_queue.main.getter(v18, v19, v20, v21, v22, v23, v24, v25);
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
  Publisher.receive<A>(on:options:)(v40, v6, v7, v8, v34, v10);
  sub_100B74BFC((uint64_t)v6);

  Publisher.dropFirst(_:)(1, v11, v14);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
  v27 = (_QWORD *)swift_allocObject(&unk_1010FFBD0, 40, 7);
  v28 = v38;
  v27[2] = v37;
  v27[3] = v28;
  v27[4] = v39;
  swift_retain();
  v29 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Drop<A>, v15);
  v30 = Publisher<>.sink(receiveValue:)(sub_100B74C60, v27, v15, v29);
  v31 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v17, v15, v31);
  return v30;
}

uint64_t sub_100B74948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PublisherTrigger.createObserver(_:)(a1, a2, a3);
}

_QWORD *sub_100B7495C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(double (*)(), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  result = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 32);
    v22 = a1;
    swift_bridgeObjectRetain();
    do
    {
      v11 = v8[3];
      v10 = v8[4];
      sub_100007E68(v8, v11);
      v12 = swift_allocObject(&unk_1010FFAE0, 24, 7);
      swift_weakInit(v12 + 16, a2);
      v13 = *(uint64_t (**)(double (*)(), uint64_t, uint64_t, uint64_t, __n128))(v10 + 8);
      v14 = swift_retain(v12);
      v15 = v13(sub_100B74B9C, v12, v11, v10, v14);
      if (v3)
      {
        swift_errorRelease(v3);
        swift_release_n(v12, 2, v9);
        v3 = 0;
      }
      else
      {
        v17 = v15;
        v18 = swift_release_n(v12, 2, v16);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v20 >= v19 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
        specialized Array._endMutation()(v21);
      }
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(v22);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

unint64_t sub_100B74AD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD4A0;
  if (!qword_1011DD4A0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DD4A0);
  }
  return result;
}

uint64_t sub_100B74B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B74B1C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100B74B24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DC5B8;
  if (!qword_1011DC5B8)
  {
    v1 = sub_100044B54((uint64_t *)&unk_1011DD4B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011DC5B8);
  }
  return result;
}

uint64_t sub_100B74B70()
{
  uint64_t v0;

  return sub_100B73CFC(v0);
}

uint64_t sub_100B74B78()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_100B74B9C()
{
  uint64_t v0;

  return sub_100B73B1C(v0);
}

uint64_t sub_100B74BB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B74BD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B74BFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DC5C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B74C3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100B74C60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

ValueMetadata *type metadata accessor for Whitetail()
{
  return &type metadata for Whitetail;
}

uint64_t type metadata accessor for Whitetail.Binding()
{
  return objc_opt_self(_TtCO14MusicUtilities9Whitetail7Binding);
}

ValueMetadata *type metadata accessor for DistributedNotificationTrigger()
{
  return &type metadata for DistributedNotificationTrigger;
}

_QWORD *initializeBufferWithCopyOfBuffer for NotificationTrigger(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_unknownObjectRetain(v4, v6);
  return a1;
}

double destroy for NotificationTrigger(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t assignWithCopy for NotificationTrigger(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_unknownObjectRetain(v8, v9);
  swift_unknownObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for NotificationTrigger(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NotificationTrigger()
{
  return &type metadata for NotificationTrigger;
}

uint64_t sub_100B74DC0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

uint64_t type metadata accessor for KeyValueObservationTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyValueObservationTrigger);
}

uint64_t getEnumTagSinglePayload for JSSegueCoordinator.WeakSegueParametersWrapper(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSSegueCoordinator.WeakSegueParametersWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsKeyValueTrigger()
{
  return &type metadata for UserDefaultsKeyValueTrigger;
}

uint64_t sub_100B74EBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Published.Publisher(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t sub_100B74F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v5 - 8))(a1, a2, v5);
}

uint64_t sub_100B74F68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t sub_100B74FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  return a1;
}

uint64_t sub_100B74FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1, a2, v5);
  return a1;
}

uint64_t sub_100B75030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  return a1;
}

uint64_t sub_100B75078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a1, a2, v5);
  return a1;
}

uint64_t sub_100B750C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B750CC);
}

uint64_t sub_100B750CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a3 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, a2, v5);
}

uint64_t sub_100B7510C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B75118);
}

uint64_t sub_100B75118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for Published.Publisher(0, *(_QWORD *)(a4 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

uint64_t type metadata accessor for PublisherTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublisherTrigger);
}

uint64_t sub_100B75168(uint64_t a1)
{
  uint64_t v2;

  v2 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B751A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B751E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B7522C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = v0 + v2;
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v3);
}

void sub_100B752C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8) + 80);
  sub_100B9C688(v0 + ((v1 + 16) & ~v1));
}

uint64_t NotificationObserver.__allocating_init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, 64, 7);
  NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  __objc2_class **v14;
  char **v15;
  void *v16;
  id v17;
  id v18;
  uint64_t Strong;
  id v20;
  id v21;

  v13 = swift_unknownObjectWeakInit(v6 + 24, 0);
  *(_QWORD *)(v6 + 16) = a1;
  swift_unknownObjectWeakAssign(v13, a2);
  *(_BYTE *)(v6 + 32) = a3;
  v14 = (__objc2_class **)NSNotificationCenter_ptr;
  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 56) = a6;
  if ((a4 & 1) != 0)
  {
    v15 = &selRef_defaultCenter;
  }
  else
  {
    v14 = &off_1010A73D0;
    v15 = &selRef_default;
  }
  v16 = (void *)objc_opt_self(*v14);
  v17 = a1;
  swift_retain(a6);
  v18 = objc_msgSend(v16, *v15);
  *(_QWORD *)(v6 + 40) = v18;
  Strong = swift_unknownObjectWeakLoadStrong(v6 + 24);
  v20 = v17;
  v21 = v18;
  swift_retain(v6);
  objc_msgSend(v21, "addObserver:selector:name:object:", v6, "handleNotification:", v20, Strong);

  swift_release(v6);
  swift_unknownObjectRelease(Strong);

  swift_unknownObjectRelease(a2);
  swift_release(a6);
  return v6;
}

uint64_t NotificationObserver.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 24);
  objc_msgSend(v1, "removeObserver:name:object:", v0, v2, Strong);
  swift_unknownObjectRelease(Strong);

  sub_10013C71C(v0 + 24, v4);
  swift_release();
  return v0;
}

uint64_t NotificationObserver.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 24);
  objc_msgSend(v1, "removeObserver:name:object:", v0, v2, Strong);
  swift_unknownObjectRelease(Strong);

  sub_10013C71C(v0 + 24, v4);
  swift_release();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_100B755F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(char *, uint64_t, uint64_t, __n128);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  void *v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  __n128 v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  __n128 v50;
  void (*v51)(char *, uint64_t, __n128);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD aBlock[6];

  v2 = v1;
  v62 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Notification(0);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - v15;
  v21 = __chkstk_darwin(v17);
  if (*(_BYTE *)(v2 + 32) != 1)
    return (*(uint64_t (**)(uint64_t, __n128))(v2 + 48))(v62, v21);
  v54 = v10;
  v55 = v8;
  v56 = v7;
  v57 = v6;
  v58 = v4;
  v59 = v3;
  v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v23 = (char *)&v53 - v18;
  v24 = v20;
  v25 = v19;
  v22((char *)&v53 - v18, v62, v20, v21);
  v61 = v23;
  ((void (*)(char *, char *, uint64_t))v22)(v16, v23, v24);
  ((void (*)(char *, char *, uint64_t))v22)(v13, v16, v24);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 + 24) & ~v26;
  v28 = swift_allocObject(&unk_1010FFEC8, v27 + v12, v26 | 7);
  *(_QWORD *)(v28 + 16) = v2;
  v62 = v25;
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
  v60 = v24;
  v29(v28 + v27, v16, v24);
  v30 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v2, 2);
  v31 = v13;
  if (objc_msgSend(v30, "isMainThread"))
  {
    (*(void (**)(char *))(v2 + 48))(v13);
  }
  else
  {
    v33 = sub_10004A07C(0, (unint64_t *)&qword_1011DD4A0, OS_dispatch_queue_ptr);
    v41 = (void *)static OS_dispatch_queue.main.getter(v33, v34, v35, v36, v37, v38, v39, v40);
    aBlock[4] = sub_100B75C7C;
    aBlock[5] = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001DBD98;
    aBlock[3] = &unk_1010FFEE0;
    v42 = _Block_copy(aBlock);
    swift_retain();
    v43 = swift_release();
    v44 = v54;
    static DispatchQoS.unspecified.getter(v43);
    aBlock[0] = _swiftEmptyArrayStorage;
    v45 = sub_100B75CD4();
    v46 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
    v47 = sub_100B74B24();
    v48 = v57;
    v49 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v46, v47, v59, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v48, v42);
    _Block_release(v42);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v44, v56);
  }
  swift_release();
  v50 = swift_release();
  v51 = *(void (**)(char *, uint64_t, __n128))(v62 + 8);
  v52 = v60;
  v51(v31, v60, v50);
  return ((uint64_t (*)(char *, uint64_t))v51)(v61, v52);
}

uint64_t NotificationObserver.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  id v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t Strong;
  uint64_t v18;
  unint64_t v19;

  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x8000000100E53750;
  v1._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 16));
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3D7463656A626F20;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 24);
  v4 = sub_100007E8C(&qword_1011DC790);
  v5._countAndFlagsBits = String.init<A>(describing:)(&Strong, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3D7265746E656320;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
  v7 = *(void **)(v0 + 40);
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v9 = static NSObject.== infix(_:_:)(v7, v8);

  if ((v9 & 1) != 0)
  {
    v10 = (void *)0xE700000000000000;
    v11 = 0x746C7561666564;
  }
  else
  {
    v12 = objc_msgSend(v7, "description");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v10 = v13;

  }
  v14._countAndFlagsBits = v11;
  v14._object = v10;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v18;
}

uint64_t sub_100B75BC8()
{
  return NotificationObserver.debugDescription.getter();
}

uint64_t type metadata accessor for NotificationObserver()
{
  return objc_opt_self(_TtC14MusicUtilities20NotificationObserver);
}

uint64_t sub_100B75C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B75C7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Notification(0) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16) + 48))(v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100B75CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B75CCC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100B75CD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DC5B0;
  if (!qword_1011DC5B0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1011DC5B0);
  }
  return result;
}

uint64_t BrightnessManager.__allocating_init(windowScene:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 64, 7);
  BrightnessManager.init(windowScene:)(a1);
  return v3;
}

_QWORD *BrightnessManager.init(windowScene:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v2 = v1;
  v1[2] = objc_msgSend(objc_allocWithZone((Class)BrightnessSystemClient), "init");
  v1[3] = sub_100B71E70((uint64_t)&off_1010FECC8);
  v1[4] = sub_100B71E70((uint64_t)&off_1010FED18);
  v1[5] = sub_100B71F80((uint64_t)&off_1010FED68);
  v1[6] = sub_100B71F80((uint64_t)&off_1010FEDA0);
  v1[7] = _swiftEmptyArrayStorage;
  v4 = sub_100007E8C(&qword_1011DC880);
  v5 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100EA7DB0;
  v6 = swift_allocObject(&unk_1010FFF28, 24, 7);
  swift_weakInit(v6 + 16, v2);
  v7 = type metadata accessor for NotificationObserver();
  swift_allocObject(v7, 64, 7);
  v8 = UISceneWillDeactivateNotification;
  v9 = a1;
  *(_QWORD *)(v5 + 32) = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v8, (uint64_t)a1, 1, 1, (uint64_t)sub_100B75F6C, v6);
  v10 = swift_allocObject(&unk_1010FFF28, 24, 7);
  swift_weakInit(v10 + 16, v2);
  swift_allocObject(v7, 64, 7);
  v11 = v9;
  v12 = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(UISceneDidActivateNotification, (uint64_t)a1, 1, 1, (uint64_t)sub_100B760E0, v10);
  *(_QWORD *)(v5 + 40) = v12;
  specialized Array._endMutation()(v12);

  v2[7] = v5;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100B75F48()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_100B75F6C(uint64_t a1)
{
  uint64_t v1;

  return sub_100B76088(a1, v1, BrightnessManager.resetBrightnessToSystemDefault());
}

Swift::Void __swiftcall BrightnessManager.resetBrightnessToSystemDefault()()
{
  uint64_t v0;
  void *v1;
  Class isa;
  NSString v3;
  Class v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", isa, v3);

  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", v4, v5);

}

double sub_100B76088(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    a3();
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

double sub_100B760E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100B76088(a1, v1, BrightnessManager.increaseBrightnessIfNeeded());
}

Swift::Void __swiftcall BrightnessManager.increaseBrightnessIfNeeded()()
{
  uint64_t v0;
  void *v1;
  Class isa;
  NSString v3;
  Class v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", isa, v3);

  v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setProperty:forKey:", v4, v5);

}

uint64_t BrightnessManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t BrightnessManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for BrightnessManager()
{
  return objc_opt_self(_TtC14MusicUtilities17BrightnessManager);
}

uint64_t ControlEventHandler.__allocating_init<A>(control:events:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, 48, 7);
  ControlEventHandler.init<A>(control:events:handler:)(a1, a2, a3, a4, a5);
  return v11;
}

_QWORD *ControlEventHandler.init<A>(control:events:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  _QWORD *v12;
  void *Strong;
  void *v14;

  v11 = swift_unknownObjectWeakInit(v5 + 2);
  swift_unknownObjectWeakAssign(v11, a1);
  v5[3] = a2;
  v12 = (_QWORD *)swift_allocObject(&unk_1010FFF50, 40, 7);
  v12[2] = a5;
  v12[3] = a3;
  v12[4] = a4;
  v5[4] = sub_100B7647C;
  v5[5] = v12;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5 + 2);
  if (Strong)
  {
    v14 = Strong;
    objc_msgSend(Strong, "addTarget:action:forControlEvents:", v5, "handleActionFromControl:", a2, swift_retain().n128_f64[0]);

    swift_release();
  }

  return v5;
}

void sub_100B763EC(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;

  v6 = swift_dynamicCastUnknownClass(a1, a4);
  if (v6)
  {
    v7 = v6;
    v8 = a1;
    a2(v7);

  }
}

uint64_t sub_100B76458()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100B7647C(void *a1)
{
  uint64_t v1;

  sub_100B763EC(a1, *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t ControlEventHandler.deinit()
{
  uint64_t v0;
  void *Strong;
  uint64_t v2;
  void *v3;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "removeTarget:action:forControlEvents:", v0, "handleActionFromControl:", *(_QWORD *)(v0 + 24));

  }
  swift_unknownObjectWeakDestroy(v0 + 16, v2);
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t ControlEventHandler.__deallocating_deinit()
{
  uint64_t v0;
  void *Strong;
  uint64_t v2;
  void *v3;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "removeTarget:action:forControlEvents:", v0, "handleActionFromControl:", *(_QWORD *)(v0 + 24));

  }
  swift_unknownObjectWeakDestroy(v0 + 16, v2);
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

void ControlEventHandling<>.on(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  _QWORD *v11;
  id v12;

  v5 = v4;
  sub_10004A07C(0, &qword_1011DC950, UIAction_ptr);
  v10 = swift_allocObject(&unk_1010FFF78, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v5);
  v11 = (_QWORD *)swift_allocObject(&unk_1010FFFA0, 48, 7);
  v11[2] = a4;
  v11[3] = v10;
  v11[4] = a2;
  v11[5] = a3;
  swift_retain(a3);
  v12 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100B768FC, v11);
  objc_msgSend(v5, "addAction:forControlEvents:", v12, a1);

}

uint64_t sub_100B766B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100B766DC(void *a1, uint64_t a2, void (*a3)(void *))
{
  id v5;
  id v6;
  uint64_t v7;
  void *Strong;
  uint64_t v9;
  void *v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v5 = objc_msgSend(a1, "sender");
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v11, v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100B76A68((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_100B76AB0((uint64_t)v12);
LABEL_8:
    v9 = a2 + 16;
    swift_beginAccess(v9, v12, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v9);
    if (!Strong)
      return;
    goto LABEL_9;
  }
  v7 = sub_10004A07C(0, &qword_1011DCA48, UIControl_ptr);
  if ((swift_dynamicCast(&v10, v12, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_8;
  Strong = v10;
LABEL_9:
  a3(Strong);

}

void sub_100B767DC(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5)
{
  id v8;
  id v9;
  void *Strong;
  uint64_t v11;
  void *v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v8 = objc_msgSend(a1, "sender");
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v13, v8);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100B76A68((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    sub_100B76AB0((uint64_t)v14);
LABEL_8:
    v11 = a2 + 16;
    swift_beginAccess(v11, v14, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v11);
    if (!Strong)
      return;
    goto LABEL_9;
  }
  if (!swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, a5, 6))
    goto LABEL_8;
  Strong = v12;
LABEL_9:
  a3(Strong);

}

uint64_t sub_100B768D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100B768FC(void *a1)
{
  uint64_t v1;

  sub_100B767DC(a1, *(_QWORD *)(v1 + 24), *(void (**)(void *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

void sub_100B76908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  v7 = *v3;
  sub_10004A07C(0, &qword_1011DC950, UIAction_ptr);
  v8 = swift_allocObject(&unk_1010FFFC8, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16);
  v9 = (_QWORD *)swift_allocObject(&unk_1010FFFF0, 40, 7);
  v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  swift_retain();
  v10 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100B76A5C, v9);
  objc_msgSend(v7, "addAction:forControlEvents:", v10, a1);

}

uint64_t type metadata accessor for ControlEventHandler()
{
  return objc_opt_self(_TtC14MusicUtilities19ControlEventHandler);
}

uint64_t sub_100B76A30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100B76A5C(void *a1)
{
  uint64_t v1;

  sub_100B766DC(a1, *(_QWORD *)(v1 + 16), *(void (**)(void *))(v1 + 24));
}

uint64_t sub_100B76A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DCA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B76AB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DCA40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Datavault.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Datavault.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100B76B88(v3, a1);
}

uint64_t sub_100B76B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DCA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Datavault.logger.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100B76C28(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_100B76C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DCA50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Datavault.logger.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, a1, 33, 0);
  return j__swift_endAccess;
}

_QWORD *Datavault.__allocating_init(url:storageClass:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)URL.path.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v16 = sub_100B76ED4(v13, v15, (uint64_t)v11, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v16;
}

_QWORD *Datavault.__allocating_init(path:storageClass:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v19;

  v5 = v4;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v19 - v15;
  URL.init(fileURLWithPath:)(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v17 = sub_100B76ED4(a1, a2, (uint64_t)v13, a3, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v17;
}

_QWORD *sub_100B76ED4(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  id v23;
  __n128 v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  NSString v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t, __n128);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  char *v45;
  __n128 v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int16 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  int v72;
  unint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  __n128 v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, __n128);
  char *v87;
  __n128 v88;
  unsigned int v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  char *v100;
  id v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[3];
  _BYTE v115[24];

  v107 = a2;
  v108 = a5;
  v104 = a4;
  v106 = a1;
  v105 = *v5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v103 = (char *)v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v99 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)v99 - v15;
  v17 = type metadata accessor for URL(0);
  v111 = *(_QWORD *)(v17 - 8);
  v112 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = v5;
  v21 = (char *)v5 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))((uint64_t)v5 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, 1, 1, v8, v18);
  v113 = a3;
  URL.deletingLastPathComponent()(v22);
  v23 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v110 = v20;
  NSFileManager.createDirectoryIfNeeded(at:)();
  if (!v6)
  {
    v25 = v103;
    v26 = v16;
    v100 = v21;
    v99[0] = v13;
    v102 = v9;
    v99[1] = 0;
    v115[0] = 0;
    v27 = v106;
    v28 = v107;
    v29 = String._bridgeToObjectiveC()();
    v101 = v23;
    objc_msgSend(v23, "fileExistsAtPath:isDirectory:", v29, v115);

    v30 = v28;
    if (v115[0] == 1)
    {
      v31 = v28;
      v32 = String.utf8CString.getter(v27, v28) + 32;
      v33 = v108;
      v34 = String.utf8CString.getter(v104, v108);
      LODWORD(v32) = rootless_check_datavault_flag(v32, v34 + 32);
      swift_release();
      v35 = swift_release();
      v36 = v102;
      if (!(_DWORD)v32)
      {
        v61 = v111;
        v62 = v112;
        (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v110, v112, v35);

        swift_bridgeObjectRelease();
        v30 = v31;
LABEL_29:
        v66 = v106;
        goto LABEL_30;
      }
      v37 = v100;
      v38 = swift_beginAccess(v100, v115, 0, 0);
      v39 = v8;
      v40 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v36 + 48);
      v30 = v31;
      if (!v40(v37, 1, v39, v38))
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v26, v37, v39);
        v41 = swift_bridgeObjectRetain_n(v31, 2);
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = swift_slowAlloc(12, -1);
          v103 = (char *)swift_slowAlloc(32, -1);
          v114[0] = (uint64_t)v103;
          *(_DWORD *)v44 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v44 + 4) = sub_100B9E12C(v106, v31, v114);
          swift_bridgeObjectRelease_n(v31, 3);
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "Found unsecure directory %s attempting to convert to datavault", (uint8_t *)v44, 0xCu);
          v45 = v103;
          swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {

          v46 = swift_bridgeObjectRelease_n(v31, 2);
        }
        (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v26, v39, v46);
        v30 = v31;
      }
      v76 = String.utf8CString.getter(v106, v30) + 32;
      v77 = String.utf8CString.getter(v104, v33);
      v78 = swift_bridgeObjectRelease();
      LODWORD(v76) = rootless_convert_to_datavault(v76, v77 + 32, v78);
      swift_release();
      swift_release();
      if ((_DWORD)v76)
      {
        v79 = swift_bridgeObjectRelease();
        v80 = errno.getter(v79);
        v81 = sub_100B77B20();
        swift_allocError(&type metadata for Datavault.Error, v81, 0, 0);
        *(_DWORD *)v82 = v80;
        *(_BYTE *)(v82 + 4) = 1;
        goto LABEL_21;
      }
      v87 = v100;
      v88 = swift_beginAccess(v100, v114, 32, 0);
      v89 = v40(v87, 1, v39, v88);
      v90 = v101;
      if (v89)
      {
        v61 = v111;
        v62 = v112;
        (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v112);
        swift_endAccess(v114);

        goto LABEL_29;
      }
      v91 = v102;
      v92 = v99[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v102 + 16))(v99[0], v87, v39);
      swift_endAccess(v114);
      v93 = swift_bridgeObjectRetain_n(v30, 2);
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v94, v95))
      {
        swift_bridgeObjectRelease_n(v30, 2);

        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v39);
        v61 = v111;
        v62 = v112;
        (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v112);
        goto LABEL_29;
      }
      v96 = swift_slowAlloc(12, -1);
      v97 = swift_slowAlloc(32, -1);
      v114[0] = v97;
      *(_DWORD *)v96 = 136315138;
      swift_bridgeObjectRetain();
      v98 = v39;
      v66 = v106;
      *(_QWORD *)(v96 + 4) = sub_100B9E12C(v106, v30, v114);
      swift_bridgeObjectRelease_n(v30, 3);
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Datavault directory conversion successful %s", (uint8_t *)v96, 0xCu);
      swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v96, -1, -1);

      (*(void (**)(_QWORD, uint64_t))(v91 + 8))(v99[0], v98);
      v61 = v111;
      v62 = v112;
      (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v112);
    }
    else
    {
      v47 = v100;
      v48 = swift_beginAccess(v100, v115, 0, 0);
      v49 = v102;
      v50 = v8;
      v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v102 + 48))(v47, 1, v8, v48);
      if (!(_DWORD)v51)
      {
        (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v25, v47, v8);
        v52 = swift_bridgeObjectRetain_n(v28, 2);
        v53 = Logger.logObject.getter(v52);
        v54 = v49;
        v55 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v55))
        {
          v56 = swift_slowAlloc(12, -1);
          v57 = v30;
          v58 = swift_slowAlloc(32, -1);
          v114[0] = v58;
          *(_DWORD *)v56 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v56 + 4) = sub_100B9E12C(v106, v57, v114);
          swift_bridgeObjectRelease_n(v57, 3);
          _os_log_impl((void *)&_mh_execute_header, v53, v55, "Creating DataVault directory %s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
          v59 = v58;
          v30 = v57;
          swift_slowDealloc(v59, -1, -1);
          swift_slowDealloc(v56, -1, -1);

        }
        else
        {

          v60 = swift_bridgeObjectRelease_n(v30, 2);
        }
        v51 = (*(uint64_t (**)(char *, uint64_t, __n128))(v54 + 8))(v25, v50, v60);
      }
      v63 = S_IRUSR.getter(v51);
      v64 = S_IWUSR.getter() | v63;
      v65 = v64 | S_IXUSR.getter();
      v66 = v106;
      v67 = String.utf8CString.getter(v106, v30) + 32;
      v68 = String.utf8CString.getter(v104, v108);
      v69 = swift_bridgeObjectRelease();
      LODWORD(v67) = rootless_mkdir_datavault(v67, v65, v68 + 32, v69);
      swift_release();
      v70 = swift_release();
      if ((_DWORD)v67)
      {
        v71 = swift_bridgeObjectRelease();
        v72 = errno.getter(v71);
        v73 = sub_100B77B20();
        swift_allocError(&type metadata for Datavault.Error, v73, 0, 0);
        *(_DWORD *)v75 = v72;
        *(_BYTE *)(v75 + 4) = 0;
LABEL_21:
        swift_willThrow(v74);

        goto LABEL_22;
      }
      v61 = v111;
      v62 = v112;
      (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v110, v112, v70);

    }
LABEL_30:
    v83 = v109;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))((uint64_t)v109 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url, v113, v62);
    v83[2] = v66;
    v83[3] = v30;
    return v83;
  }
  swift_bridgeObjectRelease();

  v24 = swift_bridgeObjectRelease();
LABEL_22:
  v83 = v109;
  v84 = v112;
  v85 = *(void (**)(uint64_t, uint64_t, __n128))(v111 + 8);
  v85(v113, v112, v24);
  ((void (*)(char *, uint64_t))v85)(v110, v84);
  sub_100B7786C((uint64_t)v83 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  swift_deallocPartialClassInstance(v83, v105, *(unsigned int *)(*v83 + 48), *(unsigned __int16 *)(*v83 + 52));
  return v83;
}

uint64_t Datavault.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100B7786C(v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  return v0;
}

uint64_t sub_100B7786C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DCA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Datavault.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100B7786C(v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100B77914()
{
  return type metadata accessor for Datavault(0);
}

uint64_t type metadata accessor for Datavault(uint64_t a1)
{
  uint64_t result;

  result = qword_1011DCA80;
  if (!qword_1011DCA80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Datavault);
  return result;
}

void sub_100B77958(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_100EE7000;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100B779EC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_100B779EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1011DCA90)
  {
    v2 = type metadata accessor for Logger(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1011DCA90);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for Datavault.Error(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Datavault.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Datavault.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_100B77AE0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100B77AF8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Datavault.Error()
{
  return &type metadata for Datavault.Error;
}

unint64_t sub_100B77B20()
{
  unint64_t result;

  result = qword_1011DCB20;
  if (!qword_1011DCB20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Datavault.Error, &type metadata for Datavault.Error);
    atomic_store(result, (unint64_t *)&qword_1011DCB20);
  }
  return result;
}

id sub_100B77C18()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayLinkHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100B77C60()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_1011DCB28 = result;
  return result;
}

id CADisplayLink.init(handler:)(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  char *v5;
  char *v6;
  double v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  const void *v12;
  id v13;
  objc_super v15;

  v4 = (objc_class *)type metadata accessor for DisplayLinkHandler();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC14MusicUtilitiesP33_A1FC62D80C043A876151FA559C82DA5918DisplayLinkHandler__handler];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v15.receiver = v5;
  v15.super_class = v4;
  *(_QWORD *)&v7 = swift_retain().n128_u64[0];
  v8 = objc_msgSendSuper2(&v15, "init", v7);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "displayLinkWithTarget:selector:", v8, "handleDisplayLinkFired:", v15.receiver, v15.super_class);
  v10 = qword_1011DC2C8;
  v11 = v9;
  if (v10 != -1)
    swift_once(&qword_1011DC2C8, sub_100B77C60);
  v12 = (const void *)qword_1011DCB28;
  v13 = v8;
  objc_setAssociatedObject(v11, v12, v13, (void *)1);

  swift_release();
  return v11;
}

uint64_t type metadata accessor for DisplayLinkHandler()
{
  return objc_opt_self(_TtC14MusicUtilitiesP33_A1FC62D80C043A876151FA559C82DA5918DisplayLinkHandler);
}

uint64_t EdgePairSequence.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  if ((Collection.isEmpty.getter(v4, WitnessTable) & 1) != 0)
  {
    v6 = type metadata accessor for Optional(255, v3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v3, v6, 0, 0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a2, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v9 = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    RangeReplaceableCollection.removeFirst()(v4, v9);
    v10 = type metadata accessor for Optional(255, v3);
    v11 = swift_getTupleTypeMetadata2(0, v3, v10, 0, 0);
    v12 = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    RangeReplaceableCollection<>.popLast()(v4, v12, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
  }
}

uint64_t sub_100B77F08(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = j___ss30_copySequenceToContiguousArrayys0dE0Vy7ElementQzGxSTRzlF_1(v2, a1, a2);
  swift_bridgeObjectRelease(*v2);
  return v3;
}

uint64_t sub_100B77F44(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for EdgePairSequence<A>, a1);
}

uint64_t type metadata accessor for EdgePairSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EdgePairSequence);
}

void Collection<>.compare<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t TupleTypeMetadata2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(uint64_t *, char *, uint64_t);
  unsigned int (*v59)(uint64_t *, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isClassOrObjCExistentialType;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  void (*v97)(uint64_t *, _QWORD);
  uint64_t v98;
  char *v99;
  void (*v100)(char *);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t *, _QWORD);
  unint64_t v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  void (*v169)(uint64_t *, _QWORD);
  uint64_t v170;
  char *v171;
  _QWORD *v172;
  __n128 v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void (*v177)(uint64_t *, _QWORD);
  uint64_t v178;
  char *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  void (*v195)(char *, uint64_t);
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  void (*v201)(char *, uint64_t);
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t WitnessTable;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t AssociatedTypeWitness;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  void (*v241)(char *);
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;

  v238 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a2, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v233 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v227 = (char *)&v211 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v232 = (char *)&v211 - v13;
  __chkstk_darwin(v14);
  v247 = (char *)&v211 - v15;
  v234 = a5;
  v223 = swift_getAssociatedTypeWitness(0, a5, a3, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v219 = (char *)&v211 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v221 = (char *)&v211 - v18;
  v20 = __chkstk_darwin(v19);
  v236 = (char *)&v211 - v21;
  v22 = *(_QWORD *)(a5 + 8);
  v214 = type metadata accessor for EnumeratedSequence(0, a3, v22, v20);
  v23 = __chkstk_darwin(v214);
  v213 = (char *)&v211 - v24;
  v215 = v22;
  v241 = (void (*)(char *))type metadata accessor for EnumeratedSequence.Iterator(0, a3, v22, v23);
  v211 = *((_QWORD *)v241 - 1);
  __chkstk_darwin(v241);
  v239 = (unint64_t)&v211 - v25;
  v26 = *(char **)(a4 + 8);
  v27 = swift_getAssociatedTypeWitness(0, v26, a2, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v243 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v226 = (char *)&v211 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v244 = (char *)&v211 - v30;
  v228 = a6;
  v32 = type metadata accessor for CollectionComparisonOperation(0, v27, a6, v31);
  __chkstk_darwin(v32);
  v224 = (uint64_t *)((char *)&v211 - v33);
  v245 = v27;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, v27, "offset element ", 0);
  v250 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v242 = *(_QWORD *)(v250 - 8);
  __chkstk_darwin(v250);
  v231 = (char *)&v211 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v249 = (char *)&v211 - v37;
  v39 = __chkstk_darwin(v38);
  v41 = (uint64_t *)((char *)&v211 - v40);
  v217 = type metadata accessor for EnumeratedSequence(0, a2, v26, v39);
  v42 = __chkstk_darwin(v217);
  v216 = (char *)&v211 - v43;
  v225 = v26;
  v248 = (char *)type metadata accessor for EnumeratedSequence.Iterator(0, a2, v26, v42);
  v212 = *((_QWORD *)v248 - 1);
  __chkstk_darwin(v248);
  v45 = (char *)&v211 - v44;
  v229 = a2;
  v46 = a4;
  v47 = dispatch thunk of Collection.count.getter(a2, a4);
  v237 = a3;
  v48 = dispatch thunk of Collection.count.getter(a3, v234);
  v49 = static Array._allocateUninitialized(_:)(0, v32);
  v254 = v49;
  v220 = v48;
  v50 = __OFADD__(v48, 1);
  v51 = v48 + 1;
  if (v50)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v52 = v49;
  v53 = type metadata accessor for Array(0);
  v54 = sub_100B7A6CC((uint64_t)&v254, v51, v53);
  swift_bridgeObjectRelease(v52);
  v254 = v54;
  if (__OFADD__(v47, 1))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v218 = v47;
  v246 = v46;
  v240 = type metadata accessor for Array(0);
  v55 = sub_100B7A6CC((uint64_t)&v254, v47 + 1, v240);
  swift_bridgeObjectRelease(v54);
  v256 = v55;
  v230 = v32;
  v255 = static Array._allocateUninitialized(_:)(0, v32);
  v56 = v229;
  Sequence.enumerated()(v229, v225);
  EnumeratedSequence.makeIterator()(v217);
  while (1)
  {
    v57 = v249;
    EnumeratedSequence.Iterator.next()(v248);
    v58 = *(void (**)(uint64_t *, char *, uint64_t))(v242 + 32);
    v58(v41, v57, v250);
    v59 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
    if (v59(v41, 1, TupleTypeMetadata2) == 1)
      break;
    v60 = *v41;
    v61 = v244;
    v62 = *(void (**)(char *, char *, uint64_t))(v243 + 32);
    v63 = v245;
    v62(v244, (char *)v41 + *(int *)(TupleTypeMetadata2 + 48), v245);
    v64 = v224;
    *v224 = 0;
    *((_BYTE *)v64 + 8) = 1;
    v64[2] = v60;
    v62((char *)v64 + *(int *)(v230 + 40), v61, v63);
    Array.append(_:)(v64, v53);
    if (__OFADD__(v60, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v65 = v255;
    v66 = v240;
    type metadata accessor for Array(0);
    swift_bridgeObjectRetain();
    Array._makeMutableAndUnique()();
    v67 = v256;
    sub_100B7A67C(v60 + 1, v256, v66);
    Array._makeMutableAndUnique()();
    v68 = *(_QWORD *)(v67 + 8 * (v60 + 1) + 32);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(v53, v53);
    v70 = v68 & 0xFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0)
      v70 = v68;
    if (!*(_QWORD *)(v70 + 16))
      goto LABEL_49;
    v71 = *(_QWORD *)(v68 + 32);
    *(_QWORD *)(v68 + 32) = v65;
    swift_bridgeObjectRelease(v71);
    v56 = v229;
  }
  (*(void (**)(char *, char *))(v212 + 8))(v45, v248);
  swift_bridgeObjectRelease(v255);
  v255 = static Array._allocateUninitialized(_:)(0, v230);
  Sequence.enumerated()(v237, v215);
  EnumeratedSequence.makeIterator()(v214);
  v72 = v249;
  EnumeratedSequence.Iterator.next()(v241);
  v73 = (uint64_t *)v231;
  v58((uint64_t *)v231, v72, v250);
  if (v59(v73, 1, TupleTypeMetadata2) != 1)
  {
    v74 = *(void (**)(char *, char *, uint64_t))(v243 + 32);
    v75 = v240;
    do
    {
      v76 = *v73;
      v77 = (char *)v73 + *(int *)(TupleTypeMetadata2 + 48);
      v79 = v244;
      v78 = v245;
      v74(v244, v77, v245);
      v80 = v224;
      *v224 = 1;
      *((_BYTE *)v80 + 8) = 1;
      v80[2] = v76;
      v74((char *)v80 + *(int *)(v230 + 40), v79, v78);
      Array.append(_:)(v80, v53);
      v50 = __OFADD__(v76, 1);
      v81 = v76 + 1;
      if (v50)
        goto LABEL_50;
      v82 = v255;
      type metadata accessor for Array(0);
      swift_bridgeObjectRetain();
      Array._makeMutableAndUnique()();
      v83 = v256;
      v84 = _swift_isClassOrObjCExistentialType(v75, v75);
      v85 = v83 & 0xFFFFFFFFFFFFF8;
      if ((v84 & 1) == 0)
        v85 = v83;
      if (!*(_QWORD *)(v85 + 16))
        goto LABEL_51;
      Array._makeMutableAndUnique()();
      v86 = *(_QWORD *)(v83 + 32);
      sub_100B7A67C(v81, v86, v53);
      v87 = v86 + 8 * v81;
      v88 = *(_QWORD *)(v87 + 32);
      *(_QWORD *)(v87 + 32) = v82;
      swift_bridgeObjectRelease(v88);
      v89 = v249;
      EnumeratedSequence.Iterator.next()(v241);
      v73 = (uint64_t *)v231;
      v58((uint64_t *)v231, v89, v250);
      v90 = v59(v73, 1, TupleTypeMetadata2);
      v56 = v229;
    }
    while (v90 != 1);
  }
  (*(void (**)(unint64_t, void (*)(char *)))(v211 + 8))(v239, v241);
  swift_bridgeObjectRelease(v255);
  v91 = v218;
  if (!v218 || !v220)
  {
LABEL_46:
    v204 = v256;
    Array.subscript.getter(v91, v256, v240);
    v205 = v254;
    Array.subscript.getter(v220, v254, v53);
    swift_bridgeObjectRelease(v204);
    swift_bridgeObjectRelease(v205);
    return;
  }
  v92 = v234;
  dispatch thunk of Collection.startIndex.getter(v237);
  v225 = (char *)(v91 - 1);
  if (v91 >= 1 && v220 >= 1)
  {
    v91 = 1;
    v93 = v230;
    v242 = v53;
    while (1)
    {
      dispatch thunk of Collection.startIndex.getter(v56);
      v94 = 0;
      v231 = (char *)(v91 - 1);
      v250 = 40;
      v239 = v91;
      while (1)
      {
        v95 = v53;
        v248 = v94 + 1;
        v96 = v94;
        v97 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v254, v247, v56, v246);
        v98 = v243;
        v99 = v244;
        v100 = *(void (**)(char *))(v243 + 16);
        v101 = v245;
        v100(v244);
        v97(&v254, 0);
        v102 = dispatch thunk of Collection.subscript.read(&v254, v236, v237, v92);
        v103 = v226;
        v241 = v100;
        v100(v226);
        ((void (*)(uint64_t *, _QWORD))v102)(&v254, 0);
        LOBYTE(v102) = dispatch thunk of static Equatable.== infix(_:_:)(v99, v103, v101, v228);
        v104 = *(void (**)(char *, uint64_t))(v98 + 8);
        v104(v103, v101);
        v104(v99, v101);
        v249 = v96;
        if ((v102 & 1) != 0)
        {
          v105 = v96;
          v106 = v240;
          Array.subscript.getter(v105, v256, v240);
          v107 = v254;
          Array.subscript.getter(v231, v254, v95);
          swift_bridgeObjectRelease(v107);
          v108 = v253;
          type metadata accessor for Array(0);
          Array._makeMutableAndUnique()();
          v109 = v256;
          v110 = (unint64_t)v248;
          sub_100B7A67C((unint64_t)v248, v256, v106);
          v111 = (uint64_t *)(v109 + v250);
          Array._makeMutableAndUnique()();
          v112 = *v111;
          v113 = v239;
          sub_100B7A67C(v239, v112, v95);
          v114 = v112 + 8 * v113;
          v115 = *(_QWORD *)(v114 + 32);
          *(_QWORD *)(v114 + 32) = v108;
          v116 = swift_bridgeObjectRelease(v115);
          v117 = v229;
        }
        else
        {
          v118 = v256;
          v119 = v96;
          v120 = v96;
          v121 = v240;
          Array.subscript.getter(v119, v256, v240);
          v122 = v254;
          v123 = v239;
          Array.subscript.getter(v239, v254, v95);
          swift_bridgeObjectRelease(v122);
          Array.subscript.getter(v248, v118, v121);
          v124 = v254;
          v125 = v231;
          Array.subscript.getter(v231, v254, v95);
          swift_bridgeObjectRelease(v124);
          Array.subscript.getter(v120, v118, v121);
          v126 = v254;
          Array.subscript.getter(v125, v254, v95);
          swift_bridgeObjectRelease(v126);
          v127 = v253;
          v128 = swift_bridgeObjectRetain();
          v129 = Array.count.getter(v128, v93);
          swift_bridgeObjectRelease(v127);
          v130 = v252;
          v131 = swift_bridgeObjectRetain();
          v132 = Array.count.getter(v131, v93);
          swift_bridgeObjectRelease(v130);
          v133 = v251;
          v134 = swift_bridgeObjectRetain();
          v135 = Array.count.getter(v134, v93);
          swift_bridgeObjectRelease(v133);
          v136 = v132 >= v129 ? v129 : v132;
          v137 = v135 >= v136 ? v136 : v135;
          v138 = swift_bridgeObjectRetain();
          v139 = Array.count.getter(v138, v93);
          swift_bridgeObjectRelease(v127);
          if (v139 == v137)
          {
            swift_bridgeObjectRelease(v130);
            v140 = swift_bridgeObjectRelease(v133);
            v141 = v233;
            v142 = v232;
            v143 = AssociatedTypeWitness;
            (*(void (**)(char *, char *, uint64_t, __n128))(v233 + 16))(v232, v247, AssociatedTypeWitness, v140);
            v144 = v229;
            v145 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v254, v142, v229, v246);
            v146 = v123;
            v148 = v244;
            v147 = v245;
            v241(v244);
            v145(&v254, 0);
            (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v143);
            v149 = v224;
            *v224 = 0;
            *((_BYTE *)v149 + 8) = 1;
            v149[2] = v249;
            v150 = v242;
            (*(void (**)(char *, char *, uint64_t))(v243 + 32))((char *)v149 + *(int *)(v93 + 40), v148, v147);
            Array.append(_:)(v149, v150);
            v151 = v253;
            type metadata accessor for Array(0);
            Array._makeMutableAndUnique()();
            v152 = v256;
            v153 = (unint64_t)v248;
            sub_100B7A67C((unint64_t)v248, v256, v121);
            v154 = (uint64_t *)(v152 + v250);
            Array._makeMutableAndUnique()();
            v155 = *v154;
            sub_100B7A67C(v146, v155, v150);
            v156 = v155 + 8 * v146;
            v157 = *(_QWORD *)(v156 + 32);
            *(_QWORD *)(v156 + 32) = v151;
            v117 = v144;
            v110 = v153;
          }
          else
          {
            v158 = (unint64_t)v248;
            v159 = v249;
            swift_bridgeObjectRelease(v127);
            v160 = swift_bridgeObjectRetain();
            v161 = Array.count.getter(v160, v93);
            swift_bridgeObjectRelease(v130);
            v162 = v161 == v137;
            v163 = v234;
            v164 = v237;
            if (v162)
            {
              v165 = swift_bridgeObjectRelease(v133);
              v166 = v222;
              v167 = v221;
              v168 = v223;
              (*(void (**)(char *, char *, uint64_t, __n128))(v222 + 16))(v221, v236, v223, v165);
              v169 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v254, v167, v164, v163);
              v171 = v244;
              v170 = v245;
              v241(v244);
              v169(&v254, 0);
              (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v168);
              v172 = v224;
              *v224 = 1;
              *((_BYTE *)v172 + 8) = 1;
              v172[2] = v231;
              (*(void (**)(char *, char *, uint64_t))(v243 + 32))((char *)v172 + *(int *)(v93 + 40), v171, v170);
              v181 = v242;
              Array.append(_:)(v172, v242);
              v182 = v252;
            }
            else
            {
              v173 = swift_bridgeObjectRelease(v130);
              v174 = v222;
              v175 = v221;
              v176 = v223;
              (*(void (**)(char *, char *, uint64_t, __n128))(v222 + 16))(v221, v236, v223, v173);
              v177 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v254, v175, v164, v163);
              v179 = v244;
              v178 = v245;
              v241(v244);
              v177(&v254, 0);
              (*(void (**)(char *, uint64_t))(v174 + 8))(v175, v176);
              v180 = v224;
              *v224 = 2;
              *((_BYTE *)v180 + 8) = 1;
              v180[2] = v159;
              (*(void (**)(char *, char *, uint64_t))(v243 + 32))((char *)v180 + *(int *)(v93 + 40), v179, v178);
              v181 = v242;
              Array.append(_:)(v180, v242);
              v182 = v251;
            }
            v183 = v240;
            type metadata accessor for Array(0);
            Array._makeMutableAndUnique()();
            v184 = v256;
            v110 = v158;
            sub_100B7A67C(v158, v256, v183);
            v185 = (uint64_t *)(v184 + v250);
            Array._makeMutableAndUnique()();
            v186 = *v185;
            v187 = v239;
            sub_100B7A67C(v239, v186, v181);
            v188 = v186 + 8 * v187;
            v157 = *(_QWORD *)(v188 + 32);
            *(_QWORD *)(v188 + 32) = v182;
            v117 = v229;
          }
          v116 = swift_bridgeObjectRelease(v157);
        }
        v189 = v233;
        v190 = v227;
        v191 = v247;
        v192 = AssociatedTypeWitness;
        (*(void (**)(char *, char *, uint64_t, __n128))(v233 + 16))(v227, v247, AssociatedTypeWitness, v116);
        v193 = v232;
        v194 = v117;
        dispatch thunk of Collection.index(_:offsetBy:)(v190, 1, v117, v246);
        v195 = *(void (**)(char *, uint64_t))(v189 + 8);
        v195(v190, v192);
        v195(v191, v192);
        (*(void (**)(char *, char *, uint64_t))(v189 + 32))(v191, v193, v192);
        if (v225 == v249)
          break;
        v94 = v249 + 1;
        v250 += 8;
        v50 = __OFADD__(v110, 1);
        v93 = v230;
        v53 = v242;
        v92 = v234;
        v56 = v194;
        if (v50)
        {
          __break(1u);
          goto LABEL_48;
        }
      }
      v196 = v222;
      v197 = v219;
      v198 = v236;
      v199 = v223;
      (*(void (**)(char *, char *, uint64_t))(v222 + 16))(v219, v236, v223);
      v200 = v221;
      v92 = v234;
      dispatch thunk of Collection.index(_:offsetBy:)(v197, 1, v237, v234);
      v201 = *(void (**)(char *, uint64_t))(v196 + 8);
      v201(v197, v199);
      v195(v247, AssociatedTypeWitness);
      v201(v198, v199);
      v202 = v199;
      v203 = v239;
      (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v198, v200, v202);
      if (v203 == v220)
        break;
      v50 = __OFADD__(v203, 1);
      v91 = v203 + 1;
      v93 = v230;
      v53 = v242;
      v56 = v194;
      if (v50)
      {
        __break(1u);
        goto LABEL_46;
      }
    }
    Array.subscript.getter(v218, v256, v240);
    v206 = v254;
    v207 = v242;
    Array.subscript.getter(v220, v254, v242);
    swift_bridgeObjectRelease(v206);
    v255 = v253;
    swift_bridgeObjectRetain();
    v252 = Array.init()(v230);
    __chkstk_darwin(v252);
    v208 = v237;
    *(&v211 - 6) = v194;
    *(&v211 - 5) = v208;
    *(&v211 - 4) = v246;
    *(&v211 - 3) = v92;
    *(&v211 - 2) = v228;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v207);
    Sequence.reduce<A>(into:_:)(&v254, &v252, sub_100B7A77C, &v211 - 8, v207, v207, WitnessTable);
    v210 = swift_bridgeObjectRelease(v253);
    ((void (*)(char *, uint64_t, __n128))v201)(v236, v223, v210);
    swift_bridgeObjectRelease(v255);
    swift_bridgeObjectRelease(v256);
    return;
  }
LABEL_54:
  __break(1u);
}

uint64_t type metadata accessor for CollectionComparisonOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CollectionComparisonOperation);
}

uint64_t sub_100B792EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v48 = a4;
  v49 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a5 + 8), a3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v46 = (char *)&v42 - v14;
  v16 = type metadata accessor for CollectionComparisonOperation(0, AssociatedTypeWitness, a7, v15);
  __chkstk_darwin(v16);
  v22 = __chkstk_darwin(v17);
  v23 = (char *)&v42 - v19;
  if (*(_BYTE *)(a2 + 8) != 1)
    goto LABEL_5;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)a2 == 1)
    {
      v43 = v20;
      v44 = v21;
      v45 = v7;
      goto LABEL_8;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v42 - v19, a2, v16, v22);
    v24 = type metadata accessor for Array(0);
    v25 = v23;
    return Array.append(_:)(v25, v24);
  }
  v43 = v20;
  v44 = v21;
  v45 = v7;
LABEL_8:
  v48 = &v42;
  v49 = a1;
  v52 = *a1;
  __chkstk_darwin(v18);
  *(&v42 - 8) = a3;
  *(&v42 - 7) = v27;
  *(&v42 - 6) = a5;
  *(&v42 - 5) = v28;
  *(&v42 - 4) = a7;
  *(&v42 - 3) = v29;
  *((_BYTE *)&v42 - 16) = v30;
  *(&v42 - 1) = a2;
  v31 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v31);
  v33 = v45;
  Collection.firstIndex(where:)(&v50, sub_100B7AE5C, &v42 - 10, v31, WitnessTable);
  v34 = swift_bridgeObjectRelease(v52);
  if (v51 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v44 + 16))(v23, a2, v16, v34);
    v25 = v23;
    v24 = v31;
    return Array.append(_:)(v25, v24);
  }
  v45 = v33;
  v35 = *v49;
  v42 = v50;
  Array.subscript.getter(v50, v35, v16);
  v36 = *((_QWORD *)v23 + 2);
  v48 = *(uint64_t **)(v44 + 8);
  ((void (*)(char *, uint64_t))v48)(v23, v16);
  if (*(_BYTE *)(a2 + 8) == 1 && !*(_QWORD *)a2)
  {
    v37 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v37 = v36;
    v36 = *(_QWORD *)(a2 + 16);
  }
  v39 = v46;
  v38 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, a2 + *(int *)(v16 + 40), AssociatedTypeWitness);
  v40 = v43;
  *v43 = v37;
  *((_BYTE *)v40 + 8) = 0;
  v40[2] = v36;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))((char *)v40 + *(int *)(v16 + 40), v39, AssociatedTypeWitness);
  Array.remove(at:)(v42, v31);
  v41 = v48;
  ((void (*)(char *, uint64_t))v48)(v23, v16);
  (*(void (**)(char *, _QWORD *, uint64_t))(v44 + 16))(v23, v40, v16);
  Array.append(_:)(v23, v31);
  return ((uint64_t (*)(_QWORD *, uint64_t))v41)(v40, v16);
}

BOOL static CollectionComparisonOperationType.__derived_enum_equals(_:_:)(uint64_t a1, char a2, unint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        if ((a4 & 1) != 0 && a3 == 1)
          return 1;
      }
      else if ((a4 & 1) != 0 && a3 > 1)
      {
        return 1;
      }
    }
    else if ((a4 & 1) != 0 && !a3)
    {
      return 1;
    }
  }
  else if ((a4 & 1) == 0)
  {
    return a1 == a3;
  }
  return 0;
}

uint64_t sub_100B79694(uint64_t *a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t *, uint64_t, __n128);
  char v24;
  void (*v25)(char *, uint64_t *, uint64_t, __n128);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v29 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a7 + 8), a5, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v14 = type metadata accessor for CollectionComparisonOperation(0, AssociatedTypeWitness, a9, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v21 = (char *)&v28 - v19;
  v22 = *a1;
  if (*((_BYTE *)a1 + 8) == 1)
  {
    if (v22)
    {
      if (v22 == 1)
      {
        if ((a3 & 1) == 0 || a2 != 1)
        {
LABEL_16:
          v25 = *(void (**)(char *, uint64_t *, uint64_t, __n128))(v15 + 16);
          v25((char *)&v28 - v19, a1, v14, v20);
          ((void (*)(char *, uint64_t, uint64_t))v25)(v17, v29, v14);
          v24 = 0;
          goto LABEL_17;
        }
      }
      else if ((a3 & 1) == 0 || a2 < 2)
      {
        goto LABEL_16;
      }
    }
    else if ((a3 & 1) == 0 || a2)
    {
      goto LABEL_16;
    }
  }
  else if ((a3 & 1) != 0 || v22 != a2)
  {
    goto LABEL_16;
  }
  v23 = *(void (**)(char *, uint64_t *, uint64_t, __n128))(v15 + 16);
  v23((char *)&v28 - v19, a1, v14, v20);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v17, v29, v14);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)(&v21[*(int *)(v14 + 40)], &v17[*(int *)(v14 + 40)], AssociatedTypeWitness, a9);
LABEL_17:
  v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v17, v14);
  v26(v21, v14);
  return v24 & 1;
}

uint64_t CollectionComparisonOperation.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t CollectionComparisonOperation.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

BOOL sub_100B79894(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  char v6;
  int v7;

  v2 = *a1;
  v3 = *(_QWORD *)a2;
  if (*((_BYTE *)a1 + 8) != 1)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return v2 == v3;
    return 0;
  }
  if (v2)
  {
    if (v2 != 1)
    {
      if (v3 > 1)
        v7 = *(unsigned __int8 *)(a2 + 8);
      else
        v7 = 0;
      return v7 == 1;
    }
    v4 = v3 == 1;
  }
  else
  {
    v4 = v3 == 0;
  }
  if (v4)
    v6 = *(_BYTE *)(a2 + 8);
  else
    v6 = 0;
  return (v6 & 1) != 0;
}

uint64_t CollectionComparisonOperationType.description.getter(uint64_t a1, char a2)
{
  Swift::String v2;
  void *object;
  uint64_t v5;

  if ((a2 & 1) != 0)
  {
    v5 = 0x747265736E69;
    if (a1 != 1)
      v5 = 0x7574697473627573;
    if (a1)
      return v5;
    else
      return 0x6574656C6564;
  }
  else
  {
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    return 0x6F72662065766F6DLL;
  }
}

uint64_t sub_100B799C4()
{
  uint64_t v0;

  return CollectionComparisonOperationType.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void UICollectionView.performBatchUpdates<A>(using:modelUpdateHandler:forSectionAt:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  double v21;
  char isEscapingClosureAtFileLocation;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;

  v17 = (_QWORD *)swift_allocObject(&unk_101100140, 72, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a1;
  v17[7] = a4;
  v17[8] = v8;
  v18 = swift_allocObject(&unk_101100168, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100B7A7A0;
  *(_QWORD *)(v18 + 24) = v17;
  v27 = sub_10004D5F4;
  v28 = v18;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10046D7B4;
  v26 = &unk_101100180;
  v19 = _Block_copy(&v23);
  swift_retain();
  v20 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v21 = swift_release().n128_u64[0];
  if (a5)
  {
    v27 = a5;
    v28 = a6;
    v23 = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_10012F6FC;
    v26 = &unk_1011001A8;
    a5 = (uint64_t (*)())_Block_copy(&v23);
    swift_retain();
    *(_QWORD *)&v21 = swift_release().n128_u64[0];
  }
  objc_msgSend(v20, "performBatchUpdates:completion:", v19, a5, v21);
  _Block_release(a5);
  _Block_release(v19);
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v18, "", 137, 132, 34, 1);
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void sub_100B79B9C(void (*a1)(__n128), uint64_t a2, uint64_t a3, void (*a4)(__n128), void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  Class isa;
  char *v31;
  uint64_t v32;
  NSIndexPath v33;
  uint64_t v34;
  Swift::Bool IsNativeType;
  void (*v36)(__n128);
  char *v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(__n128);
  id v64;
  char *v65;
  uint64_t v66;

  v63 = a1;
  v64 = a5;
  v62 = a2;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v65 = (char *)&v56 - v15;
  v17 = type metadata accessor for CollectionComparisonOperation(0, a6, a7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v56 - v23;
  v63(v22);
  v25 = swift_bridgeObjectRetain();
  if (!Array.endIndex.getter(v25, v17))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  v57 = v19;
  v60 = v11;
  v63 = a4;
  v26 = 0;
  v58 = xmmword_100EA7AA0;
  v27 = v12;
  v61 = v24;
  v62 = a3;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v26, IsNativeType, a3, v17);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v24, a3+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v26, v17);
      v36 = v63;
      v37 = v65;
      v38 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_16;
      goto LABEL_7;
    }
    v54 = _ArrayBuffer._getElementSlowPath(_:)(v26, a3, v17);
    v37 = v65;
    if (v57 != 8)
      break;
    v55 = v54;
    v66 = v54;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 16))(v24, &v66, v17);
    swift_unknownObjectRelease(v55);
    v36 = v63;
    v38 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_7:
    v39.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v17);
    IndexPath.init(row:section:)(*((_QWORD *)v20 + 2), v36, v39);
    v41 = *(_QWORD *)v20;
    if (v20[8] == 1)
    {
      if (v41)
      {
        if (v41 == 1)
        {
          v42 = sub_100007E8C(&qword_1011DCC60);
          v43 = *(unsigned __int8 *)(v27 + 80);
          v44 = (v43 + 32) & ~v43;
          v45 = swift_allocObject(v42, v44 + *(_QWORD *)(v27 + 72), v43 | 7);
          v29 = v27;
          *(_OWORD *)(v45 + 16) = v58;
          v32 = v60;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v45 + v44, v37, v60);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v64, "insertItemsAtIndexPaths:", v33.super.isa, swift_bridgeObjectRelease().n128_f64[0]);
        }
        else
        {
          v50 = sub_100007E8C(&qword_1011DCC60);
          v51 = *(unsigned __int8 *)(v27 + 80);
          v52 = (v51 + 32) & ~v51;
          v53 = swift_allocObject(v50, v52 + *(_QWORD *)(v27 + 72), v51 | 7);
          v29 = v27;
          *(_OWORD *)(v53 + 16) = v58;
          v32 = v60;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v53 + v52, v37, v60);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v64, "reloadItemsAtIndexPaths:", v33.super.isa, swift_bridgeObjectRelease().n128_f64[0]);
        }
      }
      else
      {
        v46 = sub_100007E8C(&qword_1011DCC60);
        v47 = *(unsigned __int8 *)(v27 + 80);
        v48 = (v47 + 32) & ~v47;
        v49 = swift_allocObject(v46, v48 + *(_QWORD *)(v27 + 72), v47 | 7);
        v29 = v27;
        *(_OWORD *)(v49 + 16) = v58;
        v32 = v60;
        (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v49 + v48, v37, v60);
        v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v64, "deleteItemsAtIndexPaths:", v33.super.isa, swift_bridgeObjectRelease().n128_f64[0]);
      }
    }
    else
    {
      v28 = v59;
      IndexPath.init(row:section:)(v41, v36, v40);
      v29 = v27;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v31 = v28;
      v32 = v60;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v60);
      v33.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v64, "moveItemAtIndexPath:toIndexPath:", isa, v33.super.isa);

    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    a3 = v62;
    v34 = Array.endIndex.getter(v62, v17);
    ++v26;
    v27 = v29;
    v24 = v61;
    if (v38 == v34)
      goto LABEL_17;
  }
  __break(1u);
}

void UITableView.performBatchUpdates<A>(using:modelUpdateHandler:forSectionAt:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  double v21;
  char isEscapingClosureAtFileLocation;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;

  v17 = (_QWORD *)swift_allocObject(&unk_1011001E0, 72, 7);
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a1;
  v17[7] = a4;
  v17[8] = v8;
  v18 = swift_allocObject(&unk_101100208, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100B7A80C;
  *(_QWORD *)(v18 + 24) = v17;
  v27 = sub_10013C910;
  v28 = v18;
  v23 = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10046D7B4;
  v26 = &unk_101100220;
  v19 = _Block_copy(&v23);
  swift_retain();
  v20 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v21 = swift_release().n128_u64[0];
  if (a5)
  {
    v27 = a5;
    v28 = a6;
    v23 = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_10012F6FC;
    v26 = &unk_101100248;
    a5 = (uint64_t (*)())_Block_copy(&v23);
    swift_retain();
    *(_QWORD *)&v21 = swift_release().n128_u64[0];
  }
  objc_msgSend(v20, "performBatchUpdates:completion:", v19, a5, v21);
  _Block_release(a5);
  _Block_release(v19);
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v18, "", 137, 157, 34, 1);
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void sub_100B7A1F0(void (*a1)(__n128), uint64_t a2, uint64_t a3, void (*a4)(__n128), void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  Class isa;
  char *v31;
  uint64_t v32;
  NSIndexPath v33;
  uint64_t v34;
  Swift::Bool IsNativeType;
  void (*v36)(__n128);
  char *v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(__n128);
  id v64;
  char *v65;
  uint64_t v66;

  v63 = a1;
  v64 = a5;
  v62 = a2;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v65 = (char *)&v56 - v15;
  v17 = type metadata accessor for CollectionComparisonOperation(0, a6, a7, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v56 - v23;
  v63(v22);
  v25 = swift_bridgeObjectRetain();
  if (!Array.endIndex.getter(v25, v17))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  v57 = v19;
  v60 = v11;
  v63 = a4;
  v26 = 0;
  v58 = xmmword_100EA7AA0;
  v27 = v12;
  v61 = v24;
  v62 = a3;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v26, IsNativeType, a3, v17);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v24, a3+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v26, v17);
      v36 = v63;
      v37 = v65;
      v38 = v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_16;
      goto LABEL_7;
    }
    v54 = _ArrayBuffer._getElementSlowPath(_:)(v26, a3, v17);
    v37 = v65;
    if (v57 != 8)
      break;
    v55 = v54;
    v66 = v54;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 16))(v24, &v66, v17);
    swift_unknownObjectRelease(v55);
    v36 = v63;
    v38 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_7:
    v39.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, v17);
    IndexPath.init(row:section:)(*((_QWORD *)v20 + 2), v36, v39);
    v41 = *(_QWORD *)v20;
    if (v20[8] == 1)
    {
      if (v41)
      {
        if (v41 == 1)
        {
          v42 = sub_100007E8C(&qword_1011DCC60);
          v43 = *(unsigned __int8 *)(v27 + 80);
          v44 = (v43 + 32) & ~v43;
          v45 = swift_allocObject(v42, v44 + *(_QWORD *)(v27 + 72), v43 | 7);
          v29 = v27;
          *(_OWORD *)(v45 + 16) = v58;
          v32 = v60;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v45 + v44, v37, v60);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v64, "insertRowsAtIndexPaths:withRowAnimation:", v33.super.isa, 100, swift_bridgeObjectRelease().n128_f64[0]);
        }
        else
        {
          v50 = sub_100007E8C(&qword_1011DCC60);
          v51 = *(unsigned __int8 *)(v27 + 80);
          v52 = (v51 + 32) & ~v51;
          v53 = swift_allocObject(v50, v52 + *(_QWORD *)(v27 + 72), v51 | 7);
          v29 = v27;
          *(_OWORD *)(v53 + 16) = v58;
          v32 = v60;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v53 + v52, v37, v60);
          v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v64, "reloadRowsAtIndexPaths:withRowAnimation:", v33.super.isa, 100, swift_bridgeObjectRelease().n128_f64[0]);
        }
      }
      else
      {
        v46 = sub_100007E8C(&qword_1011DCC60);
        v47 = *(unsigned __int8 *)(v27 + 80);
        v48 = (v47 + 32) & ~v47;
        v49 = swift_allocObject(v46, v48 + *(_QWORD *)(v27 + 72), v47 | 7);
        v29 = v27;
        *(_OWORD *)(v49 + 16) = v58;
        v32 = v60;
        (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v49 + v48, v37, v60);
        v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v64, "deleteRowsAtIndexPaths:withRowAnimation:", v33.super.isa, 100, swift_bridgeObjectRelease().n128_f64[0]);
      }
    }
    else
    {
      v28 = v59;
      IndexPath.init(row:section:)(v41, v36, v40);
      v29 = v27;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v31 = v28;
      v32 = v60;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v60);
      v33.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v64, "moveRowAtIndexPath:toIndexPath:", isa, v33.super.isa);

    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v32);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    a3 = v62;
    v34 = Array.endIndex.getter(v62, v17);
    ++v26;
    v27 = v29;
    v24 = v61;
    if (v38 == v34)
      goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_100B7A67C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_100B7A6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = static Array._allocateUninitialized(_:)(a2, a3);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (a2)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 - 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      v12 = a2 - 1;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array(0);
    return v8;
  }
  return result;
}

uint64_t sub_100B7A77C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100B792EC(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_100B7A7A0()
{
  return sub_100B7A818((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100B79B9C);
}

uint64_t sub_100B7A7AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B7A7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B7A7CC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100B7A7D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100B7A80C()
{
  return sub_100B7A818((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100B7A1F0);
}

uint64_t sub_100B7A818(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[4], v1[5], v1[6], v1[7], v1[8], v1[2], v1[3]);
}

uint64_t sub_100B7A830()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B7A840(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_100B7A8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 24) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v5 + 24) & ~v5, ((a2 & 0xFFFFFFFFFFFFFFF8) + v5 + 24) & ~v5);
  }
  return v3;
}

uint64_t sub_100B7A980(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_100B7A9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_100B7AA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_100B7AA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_100B7AADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_100B7AB44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 24) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100B7AC04 + 4 * byte_100EE7120[(v8 - 1)]))();
}

void sub_100B7AC68(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_100000004;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 24) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t initializeBufferWithCopyOfBuffer for CollectionComparisonOperationType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CollectionComparisonOperationType()
{
  return &type metadata for CollectionComparisonOperationType;
}

uint64_t sub_100B7AE5C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100B79694(a1, *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48)) & 1;
}

uint64_t static Task<>.sleep(for:)(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
  return swift_task_switch(sub_100B7AEC4, 0, 0);
}

void sub_100B7AEC4()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 16) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 24) = v3;
    *v3 = v0;
    v3[1] = sub_100997B3C;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t static Task<>.delayed(by:priority:task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v10 = sub_100007E8C(&qword_1011DCC70);
  __chkstk_darwin(v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B7B034(a1, (uint64_t)v12);
  v13 = swift_allocObject(&unk_101100388, 64, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = a4;
  *(double *)(v13 + 40) = a5;
  *(_QWORD *)(v13 + 48) = a2;
  *(_QWORD *)(v13 + 56) = a3;
  swift_retain();
  return sub_100B7B278((uint64_t)v12, (uint64_t)&unk_1011DCC80, v13, a4);
}

uint64_t sub_100B7B034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DCC70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B7B07C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(double *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_100B7B09C, 0, 0);
}

void sub_100B7B09C()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 24) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 48) = v3;
    *v3 = v0;
    v3[1] = sub_100B7B138;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_100B7B138()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (int *)v2[4];
  v8 = (uint64_t (*)(_QWORD))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v2[7] = v7;
  *v7 = v4;
  v7[1] = sub_10078F448;
  return v8(v2[2]);
}

uint64_t sub_100B7B1D4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100B7B200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = swift_task_alloc(dword_1011DCC7C);
  v6 = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10005AEE4;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100B7B09C, 0, 0);
}

uint64_t sub_100B7B278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v20;
  _QWORD v22[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_100B7B45C(a1);
    v11 = 7168;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v19 = 0;
      return swift_task_create(v11, v19, a4, a2, a3);
    }
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v11 = v20 | 0x1C00;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain(v12, v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v18 = v17;
  swift_unknownObjectRelease(v12);
  if (!(v18 | v16))
    goto LABEL_6;
  v22[0] = 0;
  v22[1] = 0;
  v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v11, v19, a4, a2, a3);
}

uint64_t static Task<>.userFeedbackDelayed(task:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100007E8C(&qword_1011DCC70);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter(v7);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  v11 = static Task<>.delayed(by:priority:task:)((uint64_t)v9, a1, a2, a3, 2.0);
  sub_100B7B45C((uint64_t)v9);
  return v11;
}

uint64_t sub_100B7B45C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DCC70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id CASpringAnimation.springParameters.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  objc_msgSend(v0, "mass");
  v2 = v1;
  objc_msgSend(v0, "stiffness");
  v4 = v3;
  objc_msgSend(v0, "damping");
  return objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", v2, v4, v5, 0.0, 0.0);
}

void CASpringAnimation.springParameters.setter(void *a1)
{
  void *v1;

  objc_msgSend(a1, "mass");
  objc_msgSend(v1, "setMass:");
  objc_msgSend(a1, "stiffness");
  objc_msgSend(v1, "setStiffness:");
  objc_msgSend(a1, "damping");
  objc_msgSend(v1, "setDamping:");
  objc_msgSend(v1, "setInitialVelocity:", 0.0);

}

void (*CASpringAnimation.springParameters.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  a1[1] = v1;
  objc_msgSend(v1, "mass");
  v4 = v3;
  objc_msgSend(v1, "stiffness");
  v6 = v5;
  objc_msgSend(v1, "damping");
  *a1 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", v4, v6, v7, 0.0, 0.0);
  return sub_100B7B658;
}

void sub_100B7B658(uint64_t a1, char a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(id *)a1;
  v3 = *(void **)(a1 + 8);
  v5 = *(id *)a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2;
    objc_msgSend(v4, "mass");
    objc_msgSend(v3, "setMass:");
    objc_msgSend(v4, "stiffness");
    objc_msgSend(v3, "setStiffness:");
    objc_msgSend(v4, "damping");
    objc_msgSend(v3, "setDamping:");
    objc_msgSend(v3, "setInitialVelocity:", 0.0);

  }
  else
  {
    objc_msgSend(v2, "mass");
    objc_msgSend(v3, "setMass:");
    objc_msgSend(v5, "stiffness");
    objc_msgSend(v3, "setStiffness:");
    objc_msgSend(v5, "damping");
    objc_msgSend(v3, "setDamping:");
    objc_msgSend(v3, "setInitialVelocity:", 0.0);
  }

}

void static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  objc_msgSend(a1, "settlingDuration");
  v15 = v14;
  objc_msgSend(a1, "mass");
  v17 = v16;
  objc_msgSend(a1, "stiffness");
  v19 = v18;
  objc_msgSend(a1, "damping");
  v21 = v20;
  v29 = a3;
  v30 = a4;
  v25 = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_1001DBD98;
  v28 = &unk_1011003A0;
  v22 = _Block_copy(&v25);
  v23 = v30;
  swift_retain(a4);
  swift_release(v23);
  if (a5)
  {
    v29 = a5;
    v30 = a6;
    v25 = _NSConcreteStackBlock;
    v26 = 1107296256;
    v27 = sub_10012F6FC;
    v28 = &unk_1011003C8;
    a5 = _Block_copy(&v25);
    v24 = v30;
    swift_retain(a6);
    swift_release(v24);
  }
  objc_msgSend((id)objc_opt_self(UIView), "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", a2, v22, a5, v15, a7, v17, v19, v21, 0.0);
  _Block_release(a5);
  _Block_release(v22);
}

uint64_t sub_100B7B914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B7B924(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

id static UIView.animate(withTimingFunction:duration:delay:options:animations:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8)
{
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  v16 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v16, "begin");
  objc_msgSend(v16, "setAnimationTimingFunction:", a1);
  v25 = a3;
  v26 = a4;
  v21 = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_1001DBD98;
  v24 = &unk_1011003F0;
  v17 = _Block_copy(&v21);
  v18 = v26;
  swift_retain(a4);
  swift_release(v18);
  if (a5)
  {
    v25 = a5;
    v26 = a6;
    v21 = _NSConcreteStackBlock;
    v22 = 1107296256;
    v23 = sub_10012F6FC;
    v24 = &unk_101100418;
    a5 = _Block_copy(&v21);
    v19 = v26;
    swift_retain(a6);
    swift_release(v19);
  }
  objc_msgSend((id)objc_opt_self(UIView), "animateWithDuration:delay:options:animations:completion:", a2, v17, a5, a7, a8);
  _Block_release(a5);
  _Block_release(v17);
  return objc_msgSend(v16, "commit");
}

void sub_100B7BAA4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFTimeInterval v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating))
  {
    objc_msgSend(a1, "duration");
    v2 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration;
    *(_QWORD *)v2 = v3;
    *(_BYTE *)(v2 + 8) = 0;
    v4 = CACurrentMediaTime();
    v5 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime;
    *(CFTimeInterval *)v5 = v4;
    *(_BYTE *)(v5 + 8) = 0;
    v6 = objc_msgSend((id)objc_opt_self(CADisplayLink), "displayLinkWithTarget:selector:", v1, "displayLinkFiredWithDisplayLink:");
    v7 = OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink;
    v8 = *(void **)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink) = v6;

    v9 = *(void **)(v1 + v7);
    if (v9)
    {
      v10 = (void *)objc_opt_self(NSRunLoop);
      v11 = v9;
      v12 = objc_msgSend(v10, "currentRunLoop");
      objc_msgSend(v11, "addToRunLoop:forMode:", v12, NSDefaultRunLoopMode);

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_100B7BC74(void *a1)
{
  uint64_t v1;
  id result;
  double v3;
  double *v4;
  void (*v5)(double);
  double *v6;
  uint64_t v7;
  double v8;

  result = objc_msgSend(a1, "timestamp");
  v4 = (double *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime + 8) & 1) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = *(void (**)(double))(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
  if (v5)
  {
    v6 = (double *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration);
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration + 8) & 1) == 0)
    {
      v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8);
      v8 = (v3 - *v4) / *v6;
      swift_retain();
      v5(v8);
      return (id)sub_10004BA30((uint64_t)v5, v7);
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t CAAnimation.progress.getter()
{
  return sub_100B7C09C(&OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating, (void (*)(_QWORD, _QWORD))sub_10004BA50);
}

uint64_t type metadata accessor for CAAnimationCompletionHandler()
{
  return objc_opt_self(_TtC14MusicUtilities28CAAnimationCompletionHandler);
}

void CAAnimation.progress.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  objc_super v27;

  v3 = v2;
  v6 = objc_msgSend(v3, "delegate");
  if (v6)
  {
    v7 = v6;
    v8 = type metadata accessor for CAAnimationCompletionHandler();
    v9 = swift_dynamicCastClass(v7, v8);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      v12 = v10[1];
      *v10 = a1;
      v10[1] = a2;
      sub_10004BA30(v11, v12);
      swift_unknownObjectRelease(v7);
      return;
    }
    swift_unknownObjectRelease(v7);
  }
  if (a1)
  {
    v13 = (objc_class *)type metadata accessor for CAAnimationCompletionHandler();
    v14 = (char *)objc_allocWithZone(v13);
    v15 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v16 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    v17 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration];
    *(_QWORD *)v18 = 0;
    v18[8] = 1;
    *(_QWORD *)&v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink] = 0;
    v27.receiver = v14;
    v27.super_class = v13;
    swift_retain_n(a2, 2);
    v19 = (char *)objc_msgSendSuper2(&v27, "init");
    v20 = (uint64_t *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v22 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8];
    *v20 = a1;
    v20[1] = a2;
    sub_10004BA30(v21, v22);
    v23 = &v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v24 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v25 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8];
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    sub_10004BA30(v24, v25);
    v26 = v19;
    objc_msgSend(v3, "setDelegate:", v26, v27.receiver, v27.super_class);
    sub_10004BA30(a1, a2);

    sub_10004BA30(a1, a2);
  }
}

uint64_t (*CAAnimation.progress.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "delegate");
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for CAAnimationCompletionHandler();
    v6 = swift_dynamicCastClass(v4, v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8);
      sub_100048AAC(v7, v8);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    swift_unknownObjectRelease(v4);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *a1 = v7;
  a1[1] = v8;
  return sub_100B7C06C;
}

uint64_t sub_100B7C06C(uint64_t *a1, char a2)
{
  return sub_100B7C39C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CAAnimation.progress.setter, (void (*)(uint64_t, uint64_t))sub_10004BA50, sub_10004BA54);
}

uint64_t CAAnimation.completion.getter()
{
  return sub_100B7C09C(&OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion, (void (*)(_QWORD, _QWORD))sub_100048AAC);
}

uint64_t sub_100B7C09C(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  void *v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = objc_msgSend(v2, "delegate");
  if (!v5)
    return 0;
  v6 = v5;
  v7 = type metadata accessor for CAAnimationCompletionHandler();
  v8 = swift_dynamicCastClass(v6, v7);
  if (v8)
  {
    v9 = (_QWORD *)(v8 + *a1);
    v10 = *v9;
    a2(*v9, v9[1]);
  }
  else
  {
    v10 = 0;
  }
  swift_unknownObjectRelease(v6);
  return v10;
}

void CAAnimation.completion.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  objc_super v27;

  v3 = v2;
  v6 = objc_msgSend(v3, "delegate");
  if (v6)
  {
    v7 = v6;
    v8 = type metadata accessor for CAAnimationCompletionHandler();
    v9 = swift_dynamicCastClass(v7, v8);
    if (v9)
    {
      v10 = (uint64_t *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      v12 = v10[1];
      *v10 = a1;
      v10[1] = a2;
      sub_10004BA30(v11, v12);
      swift_unknownObjectRelease(v7);
      return;
    }
    swift_unknownObjectRelease(v7);
  }
  if (a1)
  {
    v13 = (objc_class *)type metadata accessor for CAAnimationCompletionHandler();
    v14 = (char *)objc_allocWithZone(v13);
    v15 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v16 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    v17 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration];
    *(_QWORD *)v18 = 0;
    v18[8] = 1;
    *(_QWORD *)&v14[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink] = 0;
    v27.receiver = v14;
    v27.super_class = v13;
    swift_retain_n(a2, 2);
    v19 = (char *)objc_msgSendSuper2(&v27, "init");
    v20 = &v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v21 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    v22 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8];
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    sub_10004BA30(v21, v22);
    v23 = (uint64_t *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v24 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    v25 = *(_QWORD *)&v19[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8];
    *v23 = a1;
    v23[1] = a2;
    sub_10004BA30(v24, v25);
    v26 = v19;
    objc_msgSend(v3, "setDelegate:", v26, v27.receiver, v27.super_class);
    sub_10004BA30(a1, a2);

    sub_10004BA30(a1, a2);
  }
}

uint64_t (*CAAnimation.completion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "delegate");
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for CAAnimationCompletionHandler();
    v6 = swift_dynamicCastClass(v4, v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8);
      sub_100048AAC(v7, v8);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    swift_unknownObjectRelease(v4);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  *a1 = v7;
  a1[1] = v8;
  return sub_100B7C380;
}

uint64_t sub_100B7C380(uint64_t *a1, char a2)
{
  return sub_100B7C39C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CAAnimation.completion.setter, (void (*)(uint64_t, uint64_t))sub_100048AAC, sub_10004BA30);
}

uint64_t sub_100B7C39C(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  if ((a2 & 1) == 0)
    return a3(*a1, v7);
  a4(*a1, v7);
  a3(v6, v7);
  return a5(v6, v7);
}

uint64_t CALayer.addAsyncAnimation(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = v5;
  v4[7] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[8] = v7;
  v4[9] = v8;
  return swift_task_switch(sub_100B7C490, v7, v8);
}

{
  uint64_t v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = sub_100007E8C(&qword_1011DCCC0);
  v8 = __chkstk_darwin(v7);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a1;
  v15 = v3;
  v16 = a2;
  v17 = a3;
  (*(void (**)(_BYTE *, _QWORD, __n128))(v11 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v8);
  return AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for CALayer.AnimationStatus, v10, sub_100B7D034, v13, &type metadata for CALayer.AnimationStatus);
}

uint64_t sub_100B7C490(__n128 a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = v1[5];
  v4 = v1[3];
  v3 = v1[4];
  v5 = v1[2];
  v6 = static MainActor.shared.getter(a1);
  v1[10] = v6;
  v7 = (_QWORD *)swift_task_alloc(48);
  v1[11] = v7;
  v7[2] = v5;
  v7[3] = v2;
  v7[4] = v4;
  v7[5] = v3;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[12] = v8;
  *v8 = v1;
  v8[1] = sub_100B7C564;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 13, v6, &protocol witness table for MainActor, 0xD00000000000001CLL, 0x8000000100E539A0, sub_100B7CA88, v7, &type metadata for Bool);
}

uint64_t sub_100B7C564()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B7C5CC, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100B7C5CC()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(unsigned __int8 *)(v0 + 104), v1);
}

void sub_100B7C600(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  uint64_t v16;
  double v17;
  void *v18;
  id v19;
  id v20;
  NSString v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;

  v50 = a3;
  v8 = sub_100007E8C(&qword_1011DCD68);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_101100530, v12 + v10, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  CAAnimation.completion.setter((uint64_t)sub_100B7D3B4, v13);
  v14 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v14, "begin");
  objc_msgSend(v14, "setDisableActions:", 1);
  if (a5)
    v15 = String._bridgeToObjectiveC()();
  else
    v15 = 0;
  objc_msgSend(v50, "addAnimation:forKey:", a2, v15);

  objc_opt_self(CABasicAnimation);
  v16 = swift_dynamicCastObjCClass(a2);
  if (v16)
  {
    if (a5)
    {
      v18 = (void *)v16;
      v19 = a2;
      v20 = objc_msgSend(v18, "toValue");
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v50, "setValue:forKey:", v20, v21);

      swift_unknownObjectRelease(v20);
    }
    goto LABEL_45;
  }
  objc_opt_self(CAAnimationGroup);
  v22 = swift_dynamicCastObjCClass(a2);
  if (!v22)
  {
LABEL_45:
    objc_msgSend(v14, "commit", v17);
    return;
  }
  v23 = (void *)v22;
  v24 = a2;
  v25 = objc_msgSend(v23, "animations");
  v26 = (uint64_t)_swiftEmptyArrayStorage;
  if (v25)
  {
    v27 = v25;
    v28 = sub_100B7D36C();
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    v51 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v39 = v29;
      else
        v39 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter(v39);
      if (v30)
        goto LABEL_11;
    }
    else
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v30)
      {
LABEL_11:
        if (v30 < 1)
          goto LABEL_47;
        for (i = 0; i != v30; ++i)
        {
          if ((v29 & 0xC000000000000001) != 0)
            v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v29);
          else
            v32 = *(id *)(v29 + 8 * i + 32);
          v33 = v32;
          objc_opt_self(CABasicAnimation);
          v34 = swift_dynamicCastObjCClass(v33);
          if (v34)
          {
            v35 = v34;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
            v37 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v36 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v37 >= v36 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
            v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
            specialized Array._endMutation()(v38);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease(v29);
        v26 = v51;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease(v29);
    v26 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease(v29);
  }
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v47 = v26;
    else
      v47 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v40 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v26);
    if (v40)
      goto LABEL_31;
    goto LABEL_44;
  }
  v40 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v40)
  {
LABEL_44:

    *(_QWORD *)&v17 = swift_bridgeObjectRelease(v26).n128_u64[0];
    goto LABEL_45;
  }
LABEL_31:
  v48 = v24;
  v49 = v14;
  if (v40 >= 1)
  {
    for (j = 0; j != v40; ++j)
    {
      if ((v26 & 0xC000000000000001) != 0)
        v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v26);
      else
        v42 = *(id *)(v26 + 8 * j + 32);
      v43 = v42;
      v44 = objc_msgSend(v42, "keyPath", v48);
      if (v44)
      {
        v45 = v44;
        v46 = objc_msgSend(v43, "toValue");
        objc_msgSend(v50, "setValue:forKey:", v46, v45);

        swift_unknownObjectRelease(v46);
        v43 = v45;
      }

    }
    *(_QWORD *)&v17 = swift_bridgeObjectRelease(v26).n128_u64[0];
    v14 = v49;
    goto LABEL_45;
  }
  __break(1u);
LABEL_47:
  __break(1u);
}

void sub_100B7CA88(uint64_t a1)
{
  uint64_t v1;

  sub_100B7C600(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_100B7CB54(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSString v23;
  uint64_t v24;
  double v25;
  void *v26;
  id v27;
  id v28;
  NSString v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;

  v56 = a4;
  v57 = a5;
  v58 = a3;
  v7 = sub_100007E8C(&qword_1011DCD50);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v12(v11, a1, v7, v10);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v14 + v9;
  v16 = v13 | 7;
  v17 = swift_allocObject(&unk_1011004E0, v15, v13 | 7);
  v18 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v18(v17 + v14, v11, v7);
  CAAnimation.progress.setter((uint64_t)sub_100B7D2E0, v17);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v11, a1, v7);
  v19 = swift_allocObject(&unk_101100508, v15, v16);
  v20 = v7;
  v21 = v57;
  v18(v19 + v14, v11, v20);
  CAAnimation.completion.setter((uint64_t)sub_100B7D32C, v19);
  v22 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v22, "begin", v56);
  objc_msgSend(v22, "setDisableActions:", 1);
  if (v21)
    v23 = String._bridgeToObjectiveC()();
  else
    v23 = 0;
  objc_msgSend(v58, "addAnimation:forKey:", a2, v23);

  objc_opt_self(CABasicAnimation);
  v24 = swift_dynamicCastObjCClass(a2);
  if (v24)
  {
    if (v21)
    {
      v26 = (void *)v24;
      v27 = a2;
      v28 = objc_msgSend(v26, "toValue");
      v29 = String._bridgeToObjectiveC()();
      objc_msgSend(v58, "setValue:forKey:", v28, v29);

      swift_unknownObjectRelease(v28);
    }
    goto LABEL_45;
  }
  objc_opt_self(CAAnimationGroup);
  v30 = swift_dynamicCastObjCClass(a2);
  if (!v30)
  {
LABEL_45:
    objc_msgSend(v22, "commit", v25);
    return;
  }
  v31 = (void *)v30;
  v32 = a2;
  v33 = objc_msgSend(v31, "animations");
  v34 = (uint64_t)_swiftEmptyArrayStorage;
  if (v33)
  {
    v35 = v33;
    v36 = sub_100B7D36C();
    v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

    v59 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v37 >> 62)
    {
      if (v37 < 0)
        v47 = v37;
      else
        v47 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v38 = _CocoaArrayWrapper.endIndex.getter(v47);
      if (v38)
        goto LABEL_11;
    }
    else
    {
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v38)
      {
LABEL_11:
        if (v38 < 1)
          goto LABEL_47;
        for (i = 0; i != v38; ++i)
        {
          if ((v37 & 0xC000000000000001) != 0)
            v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v37);
          else
            v40 = *(id *)(v37 + 8 * i + 32);
          v41 = v40;
          objc_opt_self(CABasicAnimation);
          v42 = swift_dynamicCastObjCClass(v41);
          if (v42)
          {
            v43 = v42;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
            v45 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v44 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v45 >= v44 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
            v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v43);
            specialized Array._endMutation()(v46);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v34 = v59;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    v34 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease();
  }
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0)
      v55 = v34;
    else
      v55 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v48 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease();
    if (v48)
      goto LABEL_31;
    goto LABEL_44;
  }
  v48 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v48)
  {
LABEL_44:

    *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_45;
  }
LABEL_31:
  v56 = v32;
  v57 = v22;
  if (v48 >= 1)
  {
    for (j = 0; j != v48; ++j)
    {
      if ((v34 & 0xC000000000000001) != 0)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v34);
      else
        v50 = *(id *)(v34 + 8 * j + 32);
      v51 = v50;
      v52 = objc_msgSend(v50, "keyPath", v56);
      if (v52)
      {
        v53 = v52;
        v54 = objc_msgSend(v51, "toValue");
        objc_msgSend(v58, "setValue:forKey:", v54, v53);

        swift_unknownObjectRelease(v54);
        v51 = v53;
      }

    }
    *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
    v22 = v57;
    goto LABEL_45;
  }
  __break(1u);
LABEL_47:
  __break(1u);
}

void sub_100B7D034(uint64_t a1)
{
  void **v1;

  sub_100B7CB54(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100B7D040(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v8;
  char v9;

  v2 = sub_100007E8C(&qword_1011DCD60);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1;
  v9 = 0;
  v6 = sub_100007E8C(&qword_1011DCD50);
  AsyncStream.Continuation.yield(_:)(&v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100B7D0E8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = sub_100007E8C(&qword_1011DCD60);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 & 1;
  v8 = 1;
  v6 = sub_100007E8C(&qword_1011DCD50);
  AsyncStream.Continuation.yield(_:)(&v7, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  AsyncStream.Continuation.finish()();
}

id static CATransaction.performWithoutAnimation(_:)(void (*a1)(id))
{
  void *v2;

  v2 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v2, "begin");
  a1(objc_msgSend(v2, "setDisableActions:", 1));
  return objc_msgSend(v2, "commit");
}

ValueMetadata *type metadata accessor for CALayer.AnimationStatus()
{
  return &type metadata for CALayer.AnimationStatus;
}

void sub_100B7D21C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, __n128);
  uint64_t v9;
  __n128 v10;

  v3 = OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");
    v5 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = 0;

  }
  v6 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = *(void (**)(_QWORD, __n128))(v1
                                             + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
  if (v8)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8);
    v10 = swift_retain();
    v8(a1 & 1, v10);
    sub_10004BA30((uint64_t)v8, v9);
  }
}

uint64_t sub_100B7D2D4()
{
  return sub_1001E806C(&qword_1011DCD50);
}

uint64_t sub_100B7D2E0(double a1)
{
  sub_100007E8C(&qword_1011DCD50);
  return sub_100B7D040(a1);
}

uint64_t sub_100B7D320()
{
  return sub_1001E806C(&qword_1011DCD50);
}

void sub_100B7D32C(char a1)
{
  sub_100007E8C(&qword_1011DCD50);
  sub_100B7D0E8(a1);
}

unint64_t sub_100B7D36C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DCD58;
  if (!qword_1011DCD58)
  {
    v1 = objc_opt_self(CAAnimation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DCD58);
  }
  return result;
}

uint64_t sub_100B7D3A8()
{
  return sub_1001E806C(&qword_1011DCD68);
}

uint64_t sub_100B7D3B4(char a1)
{
  uint64_t v2;
  char v4;

  sub_100007E8C(&qword_1011DCD68);
  v4 = a1;
  v2 = sub_100007E8C(&qword_1011DCD68);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

double CGSize.nonNegative()(double result)
{
  if (result < 0.0)
    return 0.0;
  return result;
}

double static CGSize.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

CGFloat static CGAffineTransform.+ infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  CGFloat result;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v4 = a1[1];
  *(_OWORD *)&t1.a = *a1;
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = a1[2];
  v5 = a2[1];
  *(_OWORD *)&t2.a = *a2;
  *(_OWORD *)&t2.c = v5;
  *(_OWORD *)&t2.tx = a2[2];
  CGAffineTransformConcat(&v9, &t1, &t2);
  result = v9.a;
  v7 = *(_OWORD *)&v9.c;
  v8 = *(_OWORD *)&v9.tx;
  *a3 = *(_OWORD *)&v9.a;
  a3[1] = v7;
  a3[2] = v8;
  return result;
}

void sub_100B7D4BC()
{
  static CGPoint.topLeft = 0;
  *(_QWORD *)algn_10124EF68 = 0;
}

uint64_t *CGPoint.topLeft.unsafeMutableAddressor()
{
  if (qword_1011DC2D0 != -1)
    swift_once(&qword_1011DC2D0, sub_100B7D4BC);
  return &static CGPoint.topLeft;
}

double static CGPoint.topLeft.getter()
{
  _BYTE v1[24];

  if (qword_1011DC2D0 != -1)
    swift_once(&qword_1011DC2D0, sub_100B7D4BC);
  swift_beginAccess(&static CGPoint.topLeft, v1, 0, 0);
  return *(double *)&static CGPoint.topLeft;
}

void static CGPoint.topLeft.setter(double a1, double a2)
{
  _BYTE v4[24];

  if (qword_1011DC2D0 != -1)
    swift_once(&qword_1011DC2D0, sub_100B7D4BC);
  swift_beginAccess(&static CGPoint.topLeft, v4, 1, 0);
  static CGPoint.topLeft = *(_QWORD *)&a1;
  *(double *)algn_10124EF68 = a2;
}

uint64_t (*static CGPoint.topLeft.modify(uint64_t a1))(_QWORD)
{
  if (qword_1011DC2D0 != -1)
    swift_once(&qword_1011DC2D0, sub_100B7D4BC);
  swift_beginAccess(&static CGPoint.topLeft, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.topCenter.unsafeMutableAddressor()
{
  return &static CGPoint.topCenter;
}

double static CGPoint.topCenter.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static CGPoint.topCenter, v1, 0, 0);
  return *(double *)&static CGPoint.topCenter;
}

uint64_t static CGPoint.topCenter.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(&static CGPoint.topCenter, v5, 1, 0);
  static CGPoint.topCenter = *(_QWORD *)&a1;
  *(double *)algn_1011DCDD8 = a2;
  return result;
}

uint64_t (*static CGPoint.topCenter.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static CGPoint.topCenter, a1, 33, 0);
  return j_j__swift_endAccess;
}

double sub_100B7D734()
{
  double result;

  result = 1.0;
  static CGPoint.topRight = xmmword_100EAB8D0;
  return result;
}

__int128 *CGPoint.topRight.unsafeMutableAddressor()
{
  if (qword_1011DC2D8 != -1)
    swift_once(&qword_1011DC2D8, sub_100B7D734);
  return &static CGPoint.topRight;
}

double static CGPoint.topRight.getter()
{
  return sub_100B7DD14(&qword_1011DC2D8, (uint64_t)&static CGPoint.topRight, (uint64_t)&static CGPoint.topRight + 8, (uint64_t)sub_100B7D734);
}

uint64_t static CGPoint.topRight.setter(double a1, double a2)
{
  return sub_100B7DD90(&qword_1011DC2D8, (double *)&static CGPoint.topRight, (double *)&static CGPoint.topRight + 1, (uint64_t)sub_100B7D734, a1, a2);
}

uint64_t (*static CGPoint.topRight.modify(uint64_t a1))(_QWORD)
{
  if (qword_1011DC2D8 != -1)
    swift_once(&qword_1011DC2D8, sub_100B7D734);
  swift_beginAccess(&static CGPoint.topRight, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.centerLeft.unsafeMutableAddressor()
{
  return &static CGPoint.centerLeft;
}

double static CGPoint.centerLeft.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.centerLeft, v1, 0, 0);
  return static CGPoint.centerLeft[0];
}

uint64_t static CGPoint.centerLeft.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.centerLeft, v5, 1, 0);
  static CGPoint.centerLeft[0] = a1;
  unk_1011DCDE8 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.centerLeft.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.centerLeft, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.center.unsafeMutableAddressor()
{
  return &static CGPoint.center;
}

double static CGPoint.center.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.center, v1, 0, 0);
  return static CGPoint.center[0];
}

uint64_t static CGPoint.center.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.center, v5, 1, 0);
  static CGPoint.center[0] = a1;
  unk_1011DCDF8 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.center.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.center, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.centerRight.unsafeMutableAddressor()
{
  return &static CGPoint.centerRight;
}

double static CGPoint.centerRight.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.centerRight, v1, 0, 0);
  return static CGPoint.centerRight[0];
}

uint64_t static CGPoint.centerRight.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.centerRight, v5, 1, 0);
  static CGPoint.centerRight[0] = a1;
  unk_1011DCE08 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.centerRight.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.centerRight, a1, 33, 0);
  return j_j__swift_endAccess;
}

double sub_100B7DAC8()
{
  double result;

  result = 0.0;
  static CGPoint.bottomLeft = xmmword_100EAB8C0;
  return result;
}

__int128 *CGPoint.bottomLeft.unsafeMutableAddressor()
{
  if (qword_1011DC2E0 != -1)
    swift_once(&qword_1011DC2E0, sub_100B7DAC8);
  return &static CGPoint.bottomLeft;
}

double static CGPoint.bottomLeft.getter()
{
  return sub_100B7DD14(&qword_1011DC2E0, (uint64_t)&static CGPoint.bottomLeft, (uint64_t)&static CGPoint.bottomLeft + 8, (uint64_t)sub_100B7DAC8);
}

uint64_t static CGPoint.bottomLeft.setter(double a1, double a2)
{
  return sub_100B7DD90(&qword_1011DC2E0, (double *)&static CGPoint.bottomLeft, (double *)&static CGPoint.bottomLeft + 1, (uint64_t)sub_100B7DAC8, a1, a2);
}

uint64_t (*static CGPoint.bottomLeft.modify(uint64_t a1))(_QWORD)
{
  if (qword_1011DC2E0 != -1)
    swift_once(&qword_1011DC2E0, sub_100B7DAC8);
  swift_beginAccess(&static CGPoint.bottomLeft, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t *CGPoint.bottomCenter.unsafeMutableAddressor()
{
  return &static CGPoint.bottomCenter;
}

double static CGPoint.bottomCenter.getter()
{
  _BYTE v1[24];

  swift_beginAccess(static CGPoint.bottomCenter, v1, 0, 0);
  return static CGPoint.bottomCenter[0];
}

uint64_t static CGPoint.bottomCenter.setter(double a1, double a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(static CGPoint.bottomCenter, v5, 1, 0);
  static CGPoint.bottomCenter[0] = a1;
  unk_1011DCE18 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGPoint.bottomCenter.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(static CGPoint.bottomCenter, a1, 33, 0);
  return j_j__swift_endAccess;
}

__n128 sub_100B7DCA4()
{
  __n128 result;

  __asm { FMOV            V0.2D, #1.0 }
  static CGPoint.bottomRight = (__int128)result;
  return result;
}

__int128 *CGPoint.bottomRight.unsafeMutableAddressor()
{
  if (qword_1011DC2E8 != -1)
    swift_once(&qword_1011DC2E8, sub_100B7DCA4);
  return &static CGPoint.bottomRight;
}

double static CGPoint.bottomRight.getter()
{
  return sub_100B7DD14(&qword_1011DC2E8, (uint64_t)&static CGPoint.bottomRight, (uint64_t)&static CGPoint.bottomRight + 8, (uint64_t)sub_100B7DCA4);
}

double sub_100B7DD14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v6[24];

  if (*a1 != -1)
    swift_once(a1, a4);
  swift_beginAccess(a2, v6, 0, 0);
  return *(double *)a2;
}

uint64_t static CGPoint.bottomRight.setter(double a1, double a2)
{
  return sub_100B7DD90(&qword_1011DC2E8, (double *)&static CGPoint.bottomRight, (double *)&static CGPoint.bottomRight + 1, (uint64_t)sub_100B7DCA4, a1, a2);
}

uint64_t sub_100B7DD90(_QWORD *a1, double *a2, double *a3, uint64_t a4, double a5, double a6)
{
  uint64_t result;
  _BYTE v11[24];

  if (*a1 != -1)
    swift_once(a1, a4);
  result = swift_beginAccess(a2, v11, 1, 0);
  *a2 = a5;
  *a3 = a6;
  return result;
}

uint64_t (*static CGPoint.bottomRight.modify(uint64_t a1))(_QWORD)
{
  if (qword_1011DC2E8 != -1)
    swift_once(&qword_1011DC2E8, sub_100B7DCA4);
  swift_beginAccess(&static CGPoint.bottomRight, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t CGRect.outset(by:for:)(double a1, double a2, double a3, double a4)
{
  return CGRect.inset(by:for:)(-a1, -a2, -a3, -a4);
}

CTFrameRef CTFramesetterRef.createFrame(_:)(double a1, double a2, double a3, double a4)
{
  const __CTFramesetter *v4;
  const CGPath *v5;
  CTFrameRef Frame;
  CFRange v8;

  v5 = CGPathCreateWithRect(*(CGRect *)&a1, 0);
  v8.location = 0;
  v8.length = 0;
  Frame = CTFramesetterCreateFrame(v4, v8, v5, 0);

  return Frame;
}

double CTFramesetterRef.suggestedFrameSize(constraints:)(double a1, double a2)
{
  const __CTFramesetter *v2;
  double result;
  CFRange v4;

  v4.location = 0;
  v4.length = 0;
  *(_QWORD *)&result = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v2, v4, 0, *(CGSize *)&a1, 0);
  return result;
}

Swift::Void __swiftcall CTFrameRef.draw(in:)(CGContextRef in)
{
  const __CTFrame *v1;

  CTFrameDraw(v1, in);
}

_QWORD *CTFrameRef.lines.getter()
{
  return sub_100B7E920((uint64_t (*)(uint64_t))&_CTFrameGetLines, (uint64_t (*)(_QWORD))type metadata accessor for CTLine);
}

uint64_t CTFrameRef.lineOrigins.getter()
{
  const __CTFrame *v0;
  const __CFArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CTFrame *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = CTFrameGetLines(v0);
  v10 = 0;
  type metadata accessor for CTLine(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v1, &v10, v2);

  if (v10)
    v3 = v10;
  else
    v3 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v9 = v3;
    else
      v9 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v5 = v0;
  sub_100B7FEC0(v4, v5);
  v7 = v6;

  return v7;
}

void sub_100B7DFD4(CGPoint **a1, uint64_t *a2, CTFrameRef frame)
{
  CGPoint *v3;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFRange v13;

  v3 = *a1;
  if (*a1)
  {
    v13.location = 0;
    v13.length = 0;
    CTFrameGetLineOrigins(frame, v13, v3);
    v7 = CTFrameGetLines(frame);
    v12 = 0;
    type metadata accessor for CTLine(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v12, v8);

    if (v12)
      v9 = v12;
    else
      v9 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v11 = v9;
      else
        v11 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *a2 = v10;
  }
  else
  {
    __break(1u);
  }
}

_QWORD *CTFrameRef.lineFrames(lines:origins:flippedCoordinates:useExtendedLineBounds:)(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  const __CTLine *v5;
  CGFloat height;
  CGFloat width;
  double v8;
  uint64_t v9;
  const __CTLine *v13;
  const __CTLine *i;
  const __CTLine *v15;
  CTLineBoundsOptions v16;
  unint64_t v17;
  unint64_t v18;
  CGFloat *v19;
  const __CTLine *v20;
  const __CTLine *v21;
  char *v22;
  char *v23;
  double *v24;
  char *v25;
  double v26;
  const __CTLine *v27;
  uint64_t v28;
  double v29;
  CGFloat v30;
  CGFloat v31;
  double v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  char *v37;
  uint64_t v38;
  CTLineBoundsOptions options;
  unint64_t v41;
  CGRect BoundsWithOptions;
  CGRect v44;

  if (!((unint64_t)a1 >> 62))
  {
    v13 = *(const __CTLine **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_42:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v38 = a1;
  else
    v38 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = (const __CTLine *)_CocoaArrayWrapper.endIndex.getter(v38);
  if (!v13)
    goto LABEL_42;
LABEL_3:
  v41 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_46;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_48;
  }
  for (i = (const __CTLine *)*(id *)(a1 + 32);
        ;
        i = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1))
  {
    v15 = i;
    v4 = *(_QWORD *)(a2 + 16);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return _swiftEmptyArrayStorage;
    }
    v9 = *(_QWORD *)(a2 + 32);
    v8 = *(double *)(a2 + 40);
    if ((a4 & 1) != 0)
      v16 = 32;
    else
      v16 = 0;
    options = v16;
    BoundsWithOptions = CTLineGetBoundsWithOptions(i, v16);
    width = BoundsWithOptions.size.width;
    height = BoundsWithOptions.size.height;
    if ((a3 & 1) == 0)
      v8 = 0.0;
    v5 = v15;
    a4 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
LABEL_48:
      a4 = sub_100B7FB6C(0, a4[2] + 1, 1, a4);
    v18 = a4[2];
    v17 = a4[3];
    if (v18 >= v17 >> 1)
      a4 = sub_100B7FB6C((_QWORD *)(v17 > 1), v18 + 1, 1, a4);
    a4[2] = v18 + 1;
    v19 = (CGFloat *)&a4[5 * v18];
    *((_QWORD *)v19 + 4) = v5;
    *((_QWORD *)v19 + 5) = v9;
    v19[6] = 0.0;
    v19[7] = width;
    v19[8] = height;

    if (v13 == (const __CTLine *)1)
      goto LABEL_16;
    if (v41)
    {
      v20 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, a1);
      goto LABEL_22;
    }
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
      break;
LABEL_45:
    __break(1u);
LABEL_46:
    ;
  }
  v20 = (const __CTLine *)*(id *)(a1 + 40);
LABEL_22:
  v21 = v20;
  v22 = (char *)(v4 - 1);
  if (v4 != 1)
  {
    v23 = 0;
    v24 = (double *)(a2 + 56);
    v25 = (char *)v13 - 2;
    v26 = 0.0;
    while (1)
    {
      v28 = *((_QWORD *)v24 - 1);
      v29 = *v24;
      v44 = CTLineGetBoundsWithOptions(v21, options);
      v30 = v44.size.width;
      v31 = v44.size.height;
      v32 = v26 + v8 - v29;
      if ((a3 & 1) != 0)
      {
        v8 = v29;
        v26 = v32;
        v33 = v32;
      }
      else
      {
        v33 = 0.0;
      }
      v13 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(a4) & 1) == 0)
        a4 = sub_100B7FB6C(0, a4[2] + 1, 1, a4);
      v35 = a4[2];
      v34 = a4[3];
      if (v35 >= v34 >> 1)
        a4 = sub_100B7FB6C((_QWORD *)(v34 > 1), v35 + 1, 1, a4);
      a4[2] = v35 + 1;
      v36 = (double *)&a4[5 * v35];
      *((_QWORD *)v36 + 4) = v13;
      *((_QWORD *)v36 + 5) = v28;
      v36[6] = v33;
      v36[7] = v30;
      v36[8] = v31;

      if (v25 == v23)
        break;
      v37 = v23 + 2;
      if (v41)
      {
        v27 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, a1);
      }
      else
      {
        if ((unint64_t)v37 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        v27 = (const __CTLine *)*(id *)(a1 + 8 * (_QWORD)v23 + 48);
      }
      v21 = v27;
      v24 += 2;
      if (v22 == ++v23)
        goto LABEL_23;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a4;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a4;
}

double CTLineRef.extendedBounds.getter()
{
  return sub_100B7E450(0x20uLL);
}

double CTLineRef.bounds.getter()
{
  return sub_100B7E450(0);
}

double sub_100B7E450(CTLineBoundsOptions options)
{
  const __CTLine *v1;
  double result;

  *(_QWORD *)&result = (unint64_t)CTLineGetBoundsWithOptions(v1, options);
  return result;
}

uint64_t CTFrameRef.linesWithFrames(flippedCoordinates:useExtendedLineBounds:)(char a1, char a2)
{
  const __CTFrame *v2;
  const __CTLine *v3;
  CGFloat height;
  CGFloat width;
  double v6;
  uint64_t v7;
  const __CTFrame *v8;
  CTLineBoundsOptions v9;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  const __CFArray *v15;
  uint64_t v16;
  uint64_t v17;
  const __CTFrame *v18;
  char *v19;
  const __CTLine *v20;
  const __CTLine *v21;
  CTLineBoundsOptions v22;
  unint64_t v23;
  unint64_t v24;
  CGFloat *v25;
  const __CTLine *v26;
  char *v27;
  char *v28;
  double v29;
  const __CTLine *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v41;
  unint64_t v42;
  uint64_t v44;
  CGRect BoundsWithOptions;
  CGRect v46;

  v8 = v2;
  LOBYTE(v9) = a2;
  v10 = CTFrameGetLines(v2);
  v44 = 0;
  type metadata accessor for CTLine(0);
  v12 = v11;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v10, &v44, v11);

  v13 = (double *)_swiftEmptyArrayStorage;
  if (v44)
    v14 = v44;
  else
    v14 = (uint64_t)_swiftEmptyArrayStorage;
  v15 = CTFrameGetLines(v8);
  v44 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v44, v12);

  if (v44)
    v16 = v44;
  else
    v16 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v16 >> 62)
    goto LABEL_51;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v16 = v8;
    sub_100B7FEC0(v17, (const __CTFrame *)v16);
    v8 = v18;

    if ((unint64_t)v14 >> 62)
      break;
    v19 = *(char **)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v19)
      goto LABEL_59;
LABEL_11:
    v42 = v14 & 0xC000000000000001;
    if ((v14 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v20 = (const __CTLine *)*(id *)(v14 + 32);
        goto LABEL_14;
      }
      __break(1u);
LABEL_65:
      v16 = (uint64_t)sub_100B7FB6C(0, *(_QWORD *)(v16 + 16) + 1, 1, (_QWORD *)v16);
      goto LABEL_21;
    }
    while (1)
    {
      v20 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_14:
      v21 = v20;
      v13 = (double *)*((_QWORD *)v8 + 2);
      if (!v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_60;
      }
      v7 = *((_QWORD *)v8 + 4);
      v6 = *((double *)v8 + 5);
      if ((v9 & 1) != 0)
        v22 = 32;
      else
        v22 = 0;
      BoundsWithOptions = CTLineGetBoundsWithOptions(v20, v22);
      width = BoundsWithOptions.size.width;
      height = BoundsWithOptions.size.height;
      if ((a1 & 1) == 0)
        v6 = 0.0;
      v3 = v21;
      v16 = (uint64_t)_swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        goto LABEL_65;
LABEL_21:
      v24 = *(_QWORD *)(v16 + 16);
      v23 = *(_QWORD *)(v16 + 24);
      if (v24 >= v23 >> 1)
        v16 = (uint64_t)sub_100B7FB6C((_QWORD *)(v23 > 1), v24 + 1, 1, (_QWORD *)v16);
      *(_QWORD *)(v16 + 16) = v24 + 1;
      v25 = (CGFloat *)(v16 + 40 * v24);
      *((_QWORD *)v25 + 4) = v3;
      *((_QWORD *)v25 + 5) = v7;
      v25[6] = 0.0;
      v25[7] = width;
      v25[8] = height;

      if (v19 == (char *)1)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
      if (v42)
      {
        v26 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v14);
        goto LABEL_30;
      }
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
        break;
LABEL_62:
      __break(1u);
    }
    v26 = (const __CTLine *)*(id *)(v14 + 40);
LABEL_30:
    v3 = v26;
    v41 = (char *)v13 - 1;
    if (v13 == (double *)1)
    {
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_61;
    }
    v27 = 0;
    if ((v9 & 1) != 0)
      v9 = 32;
    else
      v9 = 0;
    v13 = (double *)((char *)v8 + 56);
    v28 = v19 - 2;
    v7 = 0;
    v29 = 0.0;
    while ((unint64_t)(v27 + 1) < *((_QWORD *)v8 + 2))
    {
      v31 = *((_QWORD *)v13 - 1);
      v32 = *v13;
      v46 = CTLineGetBoundsWithOptions(v3, v9);
      width = v46.size.width;
      height = v46.size.height;
      v33 = v29 + v6 - v32;
      if ((a1 & 1) != 0)
      {
        v6 = v32;
        v29 = v33;
        v34 = v33;
      }
      else
      {
        v34 = 0.0;
      }
      v19 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (uint64_t)sub_100B7FB6C(0, *(_QWORD *)(v16 + 16) + 1, 1, (_QWORD *)v16);
      v36 = *(_QWORD *)(v16 + 16);
      v35 = *(_QWORD *)(v16 + 24);
      if (v36 >= v35 >> 1)
        v16 = (uint64_t)sub_100B7FB6C((_QWORD *)(v35 > 1), v36 + 1, 1, (_QWORD *)v16);
      *(_QWORD *)(v16 + 16) = v36 + 1;
      v37 = v16 + 40 * v36;
      *(_QWORD *)(v37 + 32) = v19;
      *(_QWORD *)(v37 + 40) = v31;
      *(double *)(v37 + 48) = v34;
      *(CGFloat *)(v37 + 56) = width;
      *(CGFloat *)(v37 + 64) = height;

      if (v28 == v27)
        goto LABEL_24;
      v38 = v27 + 2;
      if (v42)
      {
        v30 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v14);
      }
      else
      {
        if ((unint64_t)v38 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_62;
        v30 = (const __CTLine *)*(id *)(v14 + 8 * (_QWORD)v27 + 48);
      }
      v3 = v30;
      ++v27;
      v13 += 2;
      if (v41 == v27)
        goto LABEL_31;
    }
    __break(1u);
LABEL_51:
    if (v16 < 0)
      v39 = v16;
    else
      v39 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
  }
  if (v14 < 0)
    v16 = v14;
  else
    v16 = v14 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = (char *)_CocoaArrayWrapper.endIndex.getter(v16);
  if (v19)
    goto LABEL_11;
LABEL_59:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_60:
  v16 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_61:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

Swift::Void __swiftcall CTLineRef.draw(in:)(CGContextRef in)
{
  const __CTLine *v1;

  CTLineDraw(v1, in);
}

_QWORD *CTLineRef.glyphRuns.getter()
{
  return sub_100B7E920((uint64_t (*)(uint64_t))&CTLineGetGlyphRuns, (uint64_t (*)(_QWORD))type metadata accessor for CTRun);
}

_QWORD *sub_100B7E920(uint64_t (*a1)(uint64_t), uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (id)a1(v2);
  v7 = 0;
  v5 = a2(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v4, &v7, v5);

  if (v7)
    return (_QWORD *)v7;
  else
    return _swiftEmptyArrayStorage;
}

CFIndex CTLineRef.glyphCount.getter()
{
  const __CTLine *v0;

  return CTLineGetGlyphCount(v0);
}

CFIndex CTLineRef.cfStringRange.getter()
{
  const __CTLine *v0;

  return CTLineGetStringRange(v0).location;
}

CGFloat CTLineRef.offset(stringIndex:)(CFIndex charIndex)
{
  const __CTLine *v1;

  return CTLineGetOffsetForStringIndex(v1, charIndex, 0);
}

__C::_NSRange __swiftcall CTRunRef.convertToGlyphRange(textRange:)(__C::_NSRange textRange)
{
  const __CTRun *v1;
  const __CTRun *v2;
  Swift::Int length;
  Swift::Int location;
  char Status;
  Swift::Int GlyphCount;
  Swift::Int v7;
  Swift::Int v8;
  const __CTRun *v9;
  _QWORD *v10;
  const __CTRun *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  Swift::Int v17;
  BOOL v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  __C::_NSRange result;
  CFRange v25;
  CFRange v26;

  v2 = v1;
  length = textRange.length;
  location = textRange.location;
  Status = CTRunGetStatus(v2);
  GlyphCount = CTRunGetGlyphCount(v2);
  v8 = GlyphCount;
  if ((Status & 1) == 0)
  {
    if ((GlyphCount & 0x8000000000000000) == 0)
    {
      v9 = v2;
      if (v8)
      {
        v10 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v8, &type metadata for Int);
        v10[2] = v8;
      }
      else
      {
        v10 = _swiftEmptyArrayStorage;
      }
      v25.location = 0;
      v25.length = 0;
      CTRunGetStringIndices(v9, v25, v10 + 4);
      GlyphCount = CTRunGetGlyphCount(v9);
      if (v8 >= GlyphCount)
      {
        v10[2] = GlyphCount;

        v13 = v10[2];
        if (!v13)
          goto LABEL_31;
        goto LABEL_15;
      }
      goto LABEL_35;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (GlyphCount < 0)
    goto LABEL_34;
  v11 = v2;
  if (v8)
  {
    v12 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v8, &type metadata for Int);
    v12[2] = v8;
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }
  v26.location = 0;
  v26.length = 0;
  CTRunGetStringIndices(v11, v26, v12 + 4);
  GlyphCount = CTRunGetGlyphCount(v11);
  if (v8 < GlyphCount)
    goto LABEL_36;
  v12[2] = GlyphCount;

  GlyphCount = (Swift::Int)sub_100B7EBC4((char *)v12);
  v10 = (_QWORD *)GlyphCount;
  v13 = *(_QWORD *)(GlyphCount + 16);
  if (!v13)
    goto LABEL_31;
LABEL_15:
  v14 = v10[4];
  if (v14 != location)
  {
    v15 = 0;
    while (v13 - 1 != v15)
    {
      v16 = v10[v15++ + 5];
      if (v16 == location)
        goto LABEL_20;
    }
    goto LABEL_31;
  }
  v15 = 0;
LABEL_20:
  v17 = location + length;
  if (__OFADD__(location, length))
    goto LABEL_37;
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v14 != v19)
  {
    v20 = 0;
    v21 = v13 - 1;
    while (v21 != v20)
    {
      v22 = v10[v20++ + 5];
      if (v22 == v19)
        goto LABEL_27;
    }
    goto LABEL_31;
  }
  v20 = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  v23 = v20 - v15;
  if (__OFSUB__(v20, v15))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v7 = v23 + 1;
  if (!__OFADD__(v23, 1))
    goto LABEL_32;
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  v15 = 0;
  v7 = 0;
LABEL_32:
  GlyphCount = v15;
LABEL_40:
  result.length = v7;
  result.location = GlyphCount;
  return result;
}

uint64_t CTRunRef.status.getter()
{
  const __CTRun *v0;

  return CTRunGetStatus(v0);
}

CFIndex CTRunRef.stringIndices.getter()
{
  return sub_100B7EF14((uint64_t)&type metadata for Int, (void (*)(const __CTRun *, _QWORD, _QWORD, _QWORD *))&_CTRunGetStringIndices);
}

char *sub_100B7EBC4(char *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t)result;
  v2 = *((_QWORD *)result + 2);
  if (v2 < 2)
    return (char *)v1;
  v3 = 0;
  v4 = v2 >> 1;
  for (i = v2 + 3; ; --i)
  {
    if (v3 == i - 4)
      goto LABEL_5;
    v6 = *(_QWORD *)(v1 + 16);
    if (v3 >= v6)
      break;
    if (i - 4 >= v6)
      goto LABEL_12;
    v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
    v8 = *(_QWORD *)(v1 + 8 * i);
    result = (char *)swift_isUniquelyReferenced_nonNull_native(v1);
    if ((result & 1) == 0)
    {
      result = sub_100B98990(v1);
      v1 = (uint64_t)result;
    }
    *(_QWORD *)(v1 + 8 * v3 + 32) = v8;
    *(_QWORD *)(v1 + 8 * i) = v7;
LABEL_5:
    if (v4 == ++v3)
      return (char *)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void sub_100B7EC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t i;
  id v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v5 = *(id *)(a2 + 32);
      }
      v6 = v5;
      sub_100B80274();
      v7 = static NSObject.== infix(_:_:)(v6, a1);

      if ((v7 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v12 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v12 == v4)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
          }
          else
          {
            if ((v12 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v12 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v9 = *(id *)(a2 + 32 + 8 * v12);
          }
          v10 = v9;
          v11 = static NSObject.== infix(_:_:)(v9, a1);

          if ((v11 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        v13 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter(v13);
        swift_bridgeObjectRelease();
        if (v4)
          continue;
      }
      return;
    }
  }
}

Swift::Void __swiftcall CTRunRef.draw(in:range:)(CGContextRef in, __C::_NSRange range)
{
  const __CTRun *v2;

  CTRunDraw(v2, in, (CFRange)range);
}

double CTRunRef.typographicBounds(range:)(CFRange range)
{
  const __CTRun *v1;

  return CTRunGetTypographicBounds(v1, range, 0, 0, 0);
}

double CTRunRef.typographicBounds(forGlyphAtIndex:)(CFRange range)
{
  const __CTRun *v1;
  CFRange v3;

  v3.location = range.location;
  v3.length = 1;
  return CTRunGetTypographicBounds(v1, v3, 0, 0, 0);
}

CFIndex CTRunRef.cfStringRange.getter()
{
  const __CTRun *v0;

  return CTRunGetStringRange(v0).location;
}

CFIndex CTRunRef.positions.getter()
{
  const __CTRun *v0;
  CFIndex result;
  CFIndex v2;
  uint64_t v3;
  uint64_t v4;
  const __CTRun *v5;
  CGPoint *v6;
  const __CTRun *v7;
  CFRange v8;

  result = CTRunGetGlyphCount(v0);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    if (result)
    {
      _s3__C7CGPointVMa_2(0);
      v4 = v3;
      v5 = v0;
      v6 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      *(_QWORD *)&v6[1].x = v2;
    }
    else
    {
      v7 = v0;
      v6 = (CGPoint *)_swiftEmptyArrayStorage;
    }
    v8.location = 0;
    v8.length = 0;
    CTRunGetPositions(v0, v8, v6 + 2);
    result = CTRunGetGlyphCount(v0);
    if (v2 >= result)
    {
      *(_QWORD *)&v6[1].x = result;

      return (CFIndex)v6;
    }
  }
  __break(1u);
  return result;
}

CFIndex CTRunRef.glyphCount.getter()
{
  const __CTRun *v0;

  return CTRunGetGlyphCount(v0);
}

CFIndex CTRunRef.glyphs.getter()
{
  return sub_100B7EF14((uint64_t)&type metadata for UInt16, (void (*)(const __CTRun *, _QWORD, _QWORD, _QWORD *))&CTRunGetGlyphs);
}

CFIndex sub_100B7EF14(uint64_t a1, void (*a2)(const __CTRun *, _QWORD, _QWORD, _QWORD *))
{
  const __CTRun *v2;
  CFIndex result;
  CFIndex v6;
  const __CTRun *v7;
  _QWORD *v8;

  result = CTRunGetGlyphCount(v2);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = v2;
    if (v6)
    {
      v8 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v6, a1);
      v8[2] = v6;
    }
    else
    {
      v8 = _swiftEmptyArrayStorage;
    }
    a2(v7, 0, 0, v8 + 4);
    result = CTRunGetGlyphCount(v7);
    if (v6 >= result)
    {
      v8[2] = result;

      return (CFIndex)v8;
    }
  }
  __break(1u);
  return result;
}

void *CTLabel.Frame.colorOverride.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
  swift_beginAccess(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CTLabel.Frame.colorOverride.setter(void *a1)
{
  char *v1;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v3 = (void **)&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  swift_beginAccess(&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride], v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  objc_msgSend(v1, "setNeedsDisplay");
}

id (*CTLabel.Frame.colorOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride, a1, 33, 0);
  return sub_100B7F0B8;
}

id sub_100B7F0B8(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 24), "setNeedsDisplay");
  return result;
}

id CTLabel.Frame.__allocating_init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  objc_class *v4;
  char *v9;
  void **v10;
  double *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  objc_super v17;
  _BYTE v18[24];

  v9 = (char *)objc_allocWithZone(v4);
  v10 = (void **)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *v10 = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  v11 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *v11 = a3;
  v11[1] = a4;
  swift_beginAccess(v10, v18, 1, 0);
  v12 = *v10;
  *v10 = a2;
  v13 = a1;
  v14 = a2;

  v17.receiver = v9;
  v17.super_class = v4;
  v15 = objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return v15;
}

id CTLabel.Frame.init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  char *v4;
  void **v7;
  double *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  objc_super v14;
  _BYTE v15[24];

  v7 = (void **)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *v7 = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *v8 = a3;
  v8[1] = a4;
  swift_beginAccess(v7, v15, 1, 0);
  v9 = *v7;
  *v7 = a2;
  v10 = a1;
  v11 = a2;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CTLabel.Frame();
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return v12;
}

double CTLabel.Frame.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize);
}

void CTLabel.Frame.draw(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  CGContext *v9;
  CGContext *v10;
  id *v11;
  id v12;
  CGColor *v13;
  _BYTE v14[24];
  CGRect v15;

  v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    v10 = v9;
    CGContextTranslateCTM(v9, 0.0, *(CGFloat *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize + 8));
    CGContextScaleCTM(v10, 1.0, -1.0);
    CTFrameDraw(*(CTFrameRef *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame), v10);
    v11 = (id *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
    swift_beginAccess(v11, v14, 0, 0);
    if (*v11)
    {
      v12 = *v11;
      CGContextSetBlendMode(v10, kCGBlendModeOverlay);
      v13 = (CGColor *)objc_msgSend(v12, "CGColor");
      CGContextSetFillColorWithColor(v10, v13);

      v15.origin.x = a1;
      v15.origin.y = a2;
      v15.size.width = a3;
      v15.size.height = a4;
      CGContextFillRect(v10, v15);

    }
  }
}

void CTLabel.Frame.init(frame:)()
{
  sub_100B7FB30((uint64_t)"MusicUtilities.Frame", 20);
}

id CTLabel.Frame.__deallocating_deinit()
{
  return sub_1001EB7B8(type metadata accessor for CTLabel.Frame);
}

id CTLabel.Line.__allocating_init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  objc_class *v4;
  _BYTE *v9;
  double *v10;
  id v11;
  id v12;
  objc_super v14;

  v9 = objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  v10 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *v10 = a3;
  v10[1] = a4;
  v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v14.receiver = v9;
  v14.super_class = v4;
  v11 = a1;
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", 0.0, 0.0, a3, a4);
  objc_msgSend(v12, "setOpaque:", 0, v14.receiver, v14.super_class);

  return v12;
}

id CTLabel.Line.init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  _BYTE *v4;
  double *v8;
  id v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *v8 = a3;
  v8[1] = a4;
  v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for CTLabel.Line();
  v9 = a1;
  v10 = objc_msgSendSuper2(&v12, "initWithFrame:", 0.0, 0.0, a3, a4);
  objc_msgSend(v10, "setOpaque:", 0, v12.receiver, v12.super_class);

  return v10;
}

void CTLabel.Line.init(frame:)()
{
  sub_100B7FB30((uint64_t)"MusicUtilities.Line", 19);
}

id CTLabel.Line.__deallocating_deinit()
{
  return sub_1001EB7B8(type metadata accessor for CTLabel.Line);
}

id CTLabel.Run.__allocating_init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  objc_class *v5;
  char *v11;
  double *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  v12 = (double *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *v12 = a4;
  v12[1] = a5;
  v13 = &v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id CTLabel.Run.init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  char *v5;
  double *v6;
  char *v7;
  objc_super v9;

  *(_QWORD *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  v6 = (double *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *v6 = a4;
  v6[1] = a5;
  v7 = &v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for CTLabel.Run();
  return objc_msgSendSuper2(&v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

double CTLabel.Run.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size);
}

void CTLabel.Run.init(frame:)()
{
  sub_100B7FB30((uint64_t)"MusicUtilities.Run", 18);
}

id CTLabel.Run.__deallocating_deinit()
{
  return sub_1001EB7B8(type metadata accessor for CTLabel.Run);
}

id CTLabel.Glyph.__allocating_init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  objc_class *v3;
  char *v7;
  double *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  *(_WORD *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  v8 = (double *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *v8 = a2;
  v8[1] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id CTLabel.Glyph.init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  char *v3;
  double *v4;
  objc_super v6;

  *(_WORD *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  v4 = (double *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *v4 = a2;
  v4[1] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for CTLabel.Glyph();
  return objc_msgSendSuper2(&v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

double CTLabel.Glyph.sizeThatFits(_:)()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size);
}

void CTLabel.Glyph.init(frame:)()
{
  sub_100B7FB30((uint64_t)"MusicUtilities.Glyph", 20);
}

void sub_100B7FB30(uint64_t a1, uint64_t a2)
{
  _swift_stdlib_reportUnimplementedInitializer(a1, a2, "init(frame:)", 12, 0);
  __break(1u);
}

id CTLabel.Glyph.__deallocating_deinit()
{
  return sub_1001EB7B8(type metadata accessor for CTLabel.Glyph);
}

_QWORD *sub_100B7FB6C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DCF40);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DCF48);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100B7FCA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DCF38);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100B7FD98(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DCF20);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_100B7FE98(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1009BA6B8(a1, a2, a3, a4, &qword_1011DCF18, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

size_t sub_100B7FEAC(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1009BA6B8(a1, a2, a3, a4, &qword_1011DCF50, _s9_ObserverC18HandlerAssociationVMa);
}

void sub_100B7FEC0(uint64_t a1, const __CTFrame *a2)
{
  uint64_t v2;
  uint64_t v5;
  CGPoint *v6;
  CGPoint *v7[2];
  uint64_t v8;

  if (a1 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a1)
  {
    _s3__C7CGPointVMa_2(0);
    v6 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v5);
    *(_QWORD *)&v6[1].x = a1;
  }
  else
  {
    v6 = (CGPoint *)_swiftEmptyArrayStorage;
  }
  v7[1] = (CGPoint *)a1;
  v8 = 0;
  v7[0] = v6 + 2;
  sub_100B7DFD4(v7, &v8, a2);
  if (v2)
  {
    if (v8 <= a1)
    {
      *(_QWORD *)&v6[1].x = v8;
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_11;
  }
  if (v8 <= a1)
  {
    *(_QWORD *)&v6[1].x = v8;
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t type metadata accessor for CTLabel.Frame()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel5Frame);
}

uint64_t type metadata accessor for CTLabel.Line()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel4Line);
}

void _s14MusicUtilities7CTLabelO4LineC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  CTLineBoundsOptions v2;
  double y;
  double v4;
  double v5;
  CGContext *c;
  CGRect BoundsWithOptions;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds))
      v2 = 32;
    else
      v2 = 0;
    BoundsWithOptions = CTLineGetBoundsWithOptions((CTLineRef)*(_QWORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), v2);
    y = BoundsWithOptions.origin.y;
    v4 = CGContextRef.textPosition.getter((__n128)BoundsWithOptions.origin);
    CGContextRef.textPosition.setter(v4, v5 - y);
    CTLineDraw(*(CTLineRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), c);

  }
}

uint64_t type metadata accessor for CTLabel.Run()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel3Run);
}

void _s14MusicUtilities7CTLabelO3RunC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  CGContext *c;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    CTRunDraw(*(CTRunRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun), c, *(CFRange *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range));

  }
}

uint64_t type metadata accessor for CTLabel.Glyph()
{
  return objc_opt_self(_TtCO14MusicUtilities7CTLabel5Glyph);
}

double _s14MusicUtilities7CTLabelO5GlyphC4drawyySo6CGRectVF_0()
{
  uint64_t v0;
  CGContext *v1;
  double result;
  CGContext *v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  uint64_t v6;
  Swift::OpaquePointer v7;

  v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    v3 = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size + 8));
    CGContextScaleCTM(v3, 1.0, -1.0);
    v4 = sub_100007E8C(&qword_1011DCF28);
    v5._rawValue = (void *)swift_allocObject(v4, 34, 7);
    *((_OWORD *)v5._rawValue + 1) = xmmword_100EA7AA0;
    *((_WORD *)v5._rawValue + 16) = *(_WORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph);
    v6 = sub_100007E8C(&qword_1011DCF30);
    v7._rawValue = (void *)swift_allocObject(v6, 48, 7);
    *((_OWORD *)v7._rawValue + 1) = xmmword_100EA7AA0;
    *((_QWORD *)v7._rawValue + 4) = 0;
    *((_QWORD *)v7._rawValue + 5) = 0;
    CGContextRef.showGlyphs(_:at:)(v5, v7);

    swift_bridgeObjectRelease();
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  return result;
}

ValueMetadata *type metadata accessor for CTLabel()
{
  return &type metadata for CTLabel;
}

unint64_t sub_100B80274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD470;
  if (!qword_1011DD470)
  {
    v1 = objc_opt_self(UIViewController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DD470);
  }
  return result;
}

uint64_t static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v13;
  void *v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
    return a1();
  sub_100B74AD0();
  v13 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = a1;
  v21 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DBD98;
  aBlock[3] = &unk_101100568;
  v14 = _Block_copy(aBlock);
  v15 = v21;
  swift_retain(a2);
  v16 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100B75CD4();
  v18 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
  v19 = sub_100B74B24();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100B80488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B80498(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t DeinitTriggeredClosure.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t DeinitTriggeredClosure.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t DeinitTriggeredClosure.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = *(void (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2();
  swift_release(v3);
  return v1;
}

uint64_t DeinitTriggeredClosure.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = *(void (**)(void))(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v2();
  swift_release(v3);
  return swift_deallocClassInstance(v1, 32, 7);
}

void static OS_dispatch_queue.syncOnMainIfNeeded(_:)(void (*a1)(void), uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[6];

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    a1();
  }
  else
  {
    v4 = sub_100B74AD0();
    v12 = static OS_dispatch_queue.main.getter(v4, v5, v6, v7, v8, v9, v10, v11);
    v13 = swift_allocObject(&unk_1011005A0, 32, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    v15[4] = sub_10010942C;
    v15[5] = v13;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10046D7B4;
    v15[3] = &unk_1011005B8;
    v14 = _Block_copy(v15);
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v12, v14);

    _Block_release(v14);
    LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v13, "", 135, 40, 46, 1);
    swift_release();
    if ((v12 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_100B8067C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void OS_dispatch_queue.asyncAfter(_:block:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTime(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v26 - v18;
  static DispatchTime.now()(v17);
  + infix(_:_:)(v16, a3);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  aBlock[4] = a1;
  v30 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DBD98;
  aBlock[3] = &unk_1011005E0;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v22);
  v28 = _swiftEmptyArrayStorage;
  v23 = sub_100B75CD4();
  v24 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
  v25 = sub_100B74B24();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v6, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  v20(v19, v12);
  swift_release(v30);
}

double OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  double result;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DBD98;
  aBlock[3] = &unk_101100608;
  v14 = _Block_copy(aBlock);
  v24 = _swiftEmptyArrayStorage;
  v15 = sub_100B75CD4();
  swift_retain();
  v16 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
  v17 = sub_100B74B24();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v11, v15);
  v18 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = DispatchWorkItem.init(flags:block:)(v13, v14);
  swift_release();
  static DispatchTime.now()(v20);
  + infix(_:_:)(v7, 2.0);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v7, v4);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v19);
  v21(v10, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v12 - v8;
  static DispatchTime.now()(v7);
  + infix(_:_:)(v6, 2.0);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v9, a1);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v2);
}

uint64_t static OS_dispatch_queue.UIFeedbackDeadline.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()(v2);
  + infix(_:_:)(v4, 2.0);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t type metadata accessor for DeinitTriggeredClosure()
{
  return objc_opt_self(_TtC14MusicUtilities22DeinitTriggeredClosure);
}

void NSFileManager.createDirectoryIfNeeded(at:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  unsigned int v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  NSURL *v10;
  NSURL *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  NSURL *v15;
  NSURL *v16;
  __n128 v17;
  NSURL *v18;

  v1 = v0;
  URL.path.getter();
  v3 = v2;
  LOBYTE(v18) = 0;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v0, "fileExistsAtPath:isDirectory:", v4, &v18);
  swift_bridgeObjectRelease(v3);

  if (v5)
  {
    if ((v18 & 1) != 0)
      return;
    URL._bridgeToObjectiveC()((NSURL *)v18);
    v8 = v7;
    v18 = 0;
    v9 = objc_msgSend(v0, "removeItemAtURL:error:", v7, &v18);

    v10 = v18;
    if (!v9)
      goto LABEL_7;
    v11 = v18;
  }
  URL._bridgeToObjectiveC()(v6);
  v13 = v12;
  v18 = 0;
  v14 = objc_msgSend(v1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v18);

  v10 = v18;
  if (v14)
  {
    v15 = v18;
    return;
  }
LABEL_7:
  v16 = v10;
  _convertNSErrorToError(_:)(v10);

  swift_willThrow(v17);
}

Swift::tuple_exists_Bool_isDirectory_Bool __swiftcall NSFileManager.directoryExists(at:)(Swift::String at)
{
  void *v1;
  NSString v2;
  unsigned __int8 v3;
  Swift::Bool v4;
  Swift::Bool v5;
  Swift::tuple_exists_Bool_isDirectory_Bool result;
  char v7;

  v7 = 0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", v2, &v7);

  v5 = v3;
  result.isDirectory = v4;
  result.exists = v5;
  return result;
}

uint64_t NSFileManager.groupCacheURL(for:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  id v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v2 = v1;
  v4 = sub_100007E8C(&qword_1011DCFF8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v2, "containerURLForSecurityApplicationGroupIdentifier:", v14);

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 0, 1, v10);
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 1, 1, v10);
  }
  sub_100B80FF8((uint64_t)v7, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100B81040((uint64_t)v9);
    v17 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7972617262694CLL, 0xE700000000000000, 1);
    v18 = *(void (**)(char *, uint64_t))(v11 + 8);
    v18(v9, v10);
    URL.appendingPathComponent(_:isDirectory:)(0x736568636143, 0xE600000000000000, 1);
    v18(v13, v10);
    v17 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(a1, v17, 1, v10);
}

uint64_t sub_100B80FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DCFF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B81040(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DCFF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100B81084()
{
  unint64_t result;

  result = qword_1011DD000;
  if (!qword_1011DD000)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFileManager.Failure, &type metadata for NSFileManager.Failure);
    atomic_store(result, (unint64_t *)&qword_1011DD000);
  }
  return result;
}

uint64_t _s7FailureOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B8110C + 4 * asc_100EE72B8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B8112C + 4 * byte_100EE72BD[v4]))();
}

_BYTE *sub_100B8110C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B8112C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B81134(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B8113C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B81144(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B8114C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NSFileManager.Failure()
{
  return &type metadata for NSFileManager.Failure;
}

uint64_t String.sha256Data.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for SHA256Digest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v13 = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v15 >> 60 != 15)
  {
    sub_100079DE4(v13, v15);
    Data.Digest.SHA256.getter(v13, v15);
    sub_1000822B4(v13, v15);
    v23 = v4;
    v16 = sub_100048748(&qword_1011DD008, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
    v24 = v16;
    v17 = sub_100049F68(v22);
    (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v17, v7, v4);
    sub_100007E68(v22, v23);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v21, sub_100B06B70, 0, &type metadata for Data._Representation, v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v18 = v21;
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v22);
    sub_1000822B4(v13, v15);
    return v18;
  }
  return v13;
}

uint64_t Data.digest.getter(uint64_t a1, unint64_t a2)
{
  sub_100079DE4(a1, a2);
  return a1;
}

void Data.Digest.SHA256.getter(uint64_t a1, unint64_t a2)
{
  sub_100B81478(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, &qword_1011DD010, (uint64_t)&protocol conformance descriptor for SHA256);
}

void Data.Digest.MD5.getter(uint64_t a1, unint64_t a2)
{
  sub_100B81478(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.MD5, &qword_1011DD018, (uint64_t)&protocol conformance descriptor for Insecure.MD5);
}

void Data.Digest.SHA512.getter(uint64_t a1, unint64_t a2)
{
  sub_100B81478(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SHA512, &qword_1011DD020, (uint64_t)&protocol conformance descriptor for SHA512);
}

void sub_100B81478(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a3(0);
  __chkstk_darwin(v10);
  sub_100079DE4(a1, a2);
  v11 = sub_100048748(a4, a3, a5);
  dispatch thunk of HashFunction.init()(v10, v11);
  __asm { BR              X9 }
}

uint64_t sub_100B81548()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 112) = v1;
  *(_WORD *)(v5 - 104) = v0;
  *(_BYTE *)(v5 - 102) = BYTE2(v0);
  *(_BYTE *)(v5 - 101) = BYTE3(v0);
  *(_BYTE *)(v5 - 100) = BYTE4(v0);
  *(_BYTE *)(v5 - 99) = BYTE5(v0);
  dispatch thunk of HashFunction.update(bufferPointer:)(v5 - 112, v5 - 112 + BYTE6(v0), v2, v4);
  sub_1000652DC(v1, v0);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 128) + 8))(v3, v2);
  return sub_1000652DC(v1, v0);
}

uint64_t sub_100B81720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = __DataStorage._bytes.getter();
  v13 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  v14 = __OFSUB__(a2, a1);
  v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = __DataStorage._length.getter();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = v13 + v17;
  if (v13)
    v19 = v18;
  else
    v19 = 0;
  v20 = a5(0);
  v21 = sub_100048748(a6, a5, a7);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v13, v19, v20, v21);
}

uint64_t *_s6DigestVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_100079DE4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s6DigestVwxx(uint64_t a1)
{
  return sub_1000652DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *_s6DigestVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_100079DE4(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000652DC(v5, v6);
  return a1;
}

uint64_t *_s6DigestVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000652DC(v3, v4);
  return a1;
}

uint64_t _s6DigestVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s6DigestVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Digest()
{
  return &type metadata for Data.Digest;
}

uint64_t sub_100B8196C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (a5 >= 1)
    v5 = a4;
  else
    v5 = 0;
  if (!a2)
  {
LABEL_19:
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v5;
    *(_BYTE *)(result + 24) = a5 < 1;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = a4 + a5;
    v7 = __OFADD__(a4, a5);
    if (v5 > v6)
      v6 = v5;
    if (a5 >= 1)
    {
      v8 = 0;
      v9 = v6 - v5;
      while (!v7)
      {
        if (v9 == v8)
        {
          v5 += v8;
          a3 = v9;
          goto LABEL_20;
        }
        *(_QWORD *)(a2 + 8 * v8) = v5 + v8;
        if (a3 - 1 == v8)
        {
          v5 += v8 + 1;
          goto LABEL_20;
        }
        ++v8;
      }
      __break(1u);
      goto LABEL_24;
    }
    v5 = 0;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t Array.append(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a4 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v11(v8);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    Array.append(_:)(v10, a4);
  }
  return v12 & 1;
}

uint64_t Array.append<A>(contentsOf:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  char v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a5 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14(v11);
  if ((v15 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a5);
    Array.append<A>(contentsOf:)(v13, a4, a5, a6);
  }
  return v15 & 1;
}

uint64_t Array.item(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v10 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  Collection.firstIndex(where:)(&v14, a1, a2, v10, WitnessTable);
  if ((v15 & 1) != 0)
  {
    v12 = 1;
  }
  else
  {
    Array.subscript.getter(v14, a3, a4);
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, v12, 1, a4);
}

Swift::Void __swiftcall Array.moveItem(at:to:)(Swift::Int at, Swift::Int to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(at);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v14 - v11;
  Array.remove(at:)(v10, v13);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  Array.insert(_:at:)(v9, to, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v8 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  RandomAccessCollection<>.indices.getter(v8, WitnessTable, &protocol witness table for Int);
  v14 = v15;
  v13 = a1;
  v10 = sub_100007E8C(&qword_1011DD030);
  if ((Range.contains(_:)(&v13, v10) & 1) != 0)
  {
    Array.subscript.getter(a1, a2, a3);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v11, 1, a3);
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[2] = a3;
  v4[3] = a1;
  return Array.inserting(separator:)((uint64_t)sub_100B81E24, (uint64_t)v4, a2, a3);
}

uint64_t sub_100B81E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 16))(a1, *(_QWORD *)(v1 + 24));
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[10];

  v5 = a3;
  result = Array.count.getter(a3, a4);
  if (result < 2)
  {
    swift_bridgeObjectRetain();
    return v5;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    v12[8] = 0;
    v12[9] = 2 * result - 1;
    __chkstk_darwin(result);
    v12[2] = a4;
    v12[3] = v5;
    v12[4] = a1;
    v12[5] = a2;
    v9 = sub_100007E8C(&qword_1011DD030);
    v10 = sub_100B82268();
    return sub_100B81F78((void (*)(char *, char *))sub_100B81F30, (uint64_t)v12, v9, a4, (uint64_t)&type metadata for Never, v10, (uint64_t)&protocol witness table for Never, v11);
  }
  __break(1u);
  return result;
}

uint64_t sub_100B81F30(_QWORD *a1)
{
  uint64_t v1;

  if ((*a1 & 1) != 0)
    return (*(uint64_t (**)(void))(v1 + 32))();
  else
    return Array.subscript.getter(*a1 / 2, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_100B81F78(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t result;
  Swift::Int v30;
  void (*v31)(_BYTE *, _QWORD);
  void (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *);
  uint64_t v50;
  char *v51;
  Swift::Int v52;
  uint64_t v53;
  _BYTE v54[32];
  uint64_t v55;

  v41 = a5;
  v42 = a8;
  v49 = a1;
  v50 = a2;
  v40 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v51 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8), v14, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = __chkstk_darwin(AssociatedTypeWitness);
  v19 = (char *)&v40 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_getAssociatedTypeWitness(0, a6, a3, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v43 = *(_QWORD *)(v22 - 8);
  v44 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v40 - v23;
  v25 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v25)
    return static Array._allocateUninitialized(_:)(0, a4);
  v47 = AssociatedTypeWitness;
  v26 = v8;
  v27 = a4;
  v28 = v25;
  v55 = ContiguousArray.init()(v27);
  v45 = type metadata accessor for ContiguousArray(0, v27);
  ContiguousArray.reserveCapacity(_:)(v28);
  v48 = v26;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if ((v28 & 0x8000000000000000) == 0)
  {
    v30 = v28;
    v46 = v21;
    while (v30)
    {
      v52 = v30;
      v31 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v54, v24, a3, a6);
      v32 = *(void (**)(char *))(v16 + 16);
      v33 = v16;
      v34 = v47;
      v32(v19);
      v31(v54, 0);
      v35 = v24;
      v36 = v19;
      v37 = v46;
      v38 = v53;
      v49(v36, v51);
      if (v38)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v44);
        v39 = swift_release(v55);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v40 + 32))(v42, v51, v41, v39);
      }
      v53 = 0;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
      ContiguousArray.append(_:)(v37, v45);
      result = dispatch thunk of Collection.formIndex(after:)(v35, a3, a6);
      v30 = v52 - 1;
      v16 = v33;
      v19 = v36;
      v24 = v35;
      if (v52 == 1)
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v44);
        return v55;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100B82268()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD038;
  if (!qword_1011DD038)
  {
    v1 = sub_100044B54(&qword_1011DD030);
    sub_100B822D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1011DD038);
  }
  return result;
}

unint64_t sub_100B822D4()
{
  unint64_t result;

  result = qword_1011DD040;
  if (!qword_1011DD040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1011DD040);
  }
  return result;
}

uint64_t Set.insert(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  char v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v13(v10) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    v14 = Set.insert(_:)(a1, v12, a5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, 1, 1, v8);
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t Set<>.first<A>(alike:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t WitnessTable;
  _QWORD v10[10];

  v10[9] = a2;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a7;
  v10[7] = a1;
  v7 = type metadata accessor for Set(0, a3, a5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v7);
  return Sequence.first(where:)(sub_100B825CC, v10, v7, WitnessTable);
}

uint64_t sub_100B82484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v21 - v15;
  dispatch thunk of Identifiable.id.getter(a3, a6);
  dispatch thunk of Identifiable.id.getter(a4, v22);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v14, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, AssociatedTypeWitness);
  v19(v16, AssociatedTypeWitness);
  return v18 & 1;
}

uint64_t sub_100B825CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_100B82484(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]) & 1;
}

uint64_t NSBundle.displayName.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = objc_msgSend(v0, "localizedInfoDictionary");
  if (!v1)
  {
    v8 = 0u;
    v9 = 0u;
    goto LABEL_11;
  }
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v3 + 16)
    || (v4 = sub_100B8752C(0xD000000000000013, 0x8000000100E53C70, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10079CDF0), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_11;
  }
  sub_10004FA40(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_11:
    sub_10004FF60((uint64_t)&v8, &qword_1011DCA40);
    return 0;
  }
  if (swift_dynamicCast(&v7, &v8, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v7;
  else
    return 0;
}

uint64_t NSBundle.exportedTypeDeclarations.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForInfoDictionaryKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100B76A68((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_100007E8C(&qword_1011DD048);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_10004FF60((uint64_t)v7, &qword_1011DCA40);
    return 0;
  }
}

uint64_t Comparable.clamp(to:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ClosedRange(0);
  return ClosedRange.clamp(_:)(v0, v1);
}

uint64_t ClosedRange.clamp(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 24);
  max<A>(_:_:)(v2);
  min<A>(_:_:)(v7, v2 + *(int *)(a2 + 36), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ClosedRange<>.scaledValue(relativeTo:relativeValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a5;
  v50 = a4;
  v44 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v9, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v43 - v11;
  __chkstk_darwin(v13);
  v46 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v43 - v16;
  __chkstk_darwin(v18);
  v47 = (char *)&v43 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v43 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v43 - v24;
  v48 = a3;
  v49 = v7;
  v26 = a1 + *(int *)(a3 + 36);
  v27 = *(_QWORD *)(v7 + 8);
  v45 = a1;
  v28 = a1;
  v30 = v29;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v26, v28, v9, v27);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v9, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100EE61D8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v32 = v12;
  v33 = v50;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v32, v9, v8);
  LOBYTE(v7) = dispatch thunk of static Comparable.> infix(_:_:)(v25, v22, v9, *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8));
  v34 = *(void (**)(char *, uint64_t))(v30 + 8);
  v34(v22, v9);
  if ((v7 & 1) != 0)
  {
    v35 = v45;
    v36 = v27;
    v37 = v48;
    ClosedRange.clamp(_:)(v44, v48);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v22, v35, v9, v36);
    v38 = v47;
    dispatch thunk of static FloatingPoint./ infix(_:_:)(v17, v25, v9, v33);
    v34(v17, v9);
    v39 = *(int *)(v37 + 36);
    v40 = v52;
    v41 = v46;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v52 + v39, v52, v9, v36);
    dispatch thunk of static Numeric.* infix(_:_:)(v41, v38, v9, v49);
    v34(v41, v9);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v17, v40, v9, v36);
    v34(v17, v9);
    v34(v38, v9);
    v34(v22, v9);
    return ((uint64_t (*)(char *, uint64_t))v34)(v25, v9);
  }
  else
  {
    v34(v25, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v51, v52, v9);
  }
}

void Data.hexRepresentation.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100B82C70()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v0;
  v4 = v1;
  v5 = BYTE2(v1);
  v6 = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  sub_100B82E64((uint64_t)&v3, (uint64_t)&v3 + BYTE6(v1), v0, v1);
  sub_1000652DC(v0, v1);
  if (v10)
    return v9;
  else
    return 0;
}

void sub_100B82E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  __asm { BR              X9 }
}

uint64_t sub_100B82EE4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  unint64_t v22;
  int8x16_t *v23;
  char *v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  int8x16x2_t v40;

  if (BYTE6(v4) + 0x4000000000000000 < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v6 = swift_slowAlloc(2 * BYTE6(v4), -1);
  v7 = v6;
  if (!v5)
  {
    v8 = BYTE6(v4);
    goto LABEL_9;
  }
  if (v5 == 1)
  {
    LODWORD(v8) = HIDWORD(v3) - v3;
    if (!__OFSUB__(HIDWORD(v3), (_DWORD)v3))
    {
      v8 = (int)v8;
      goto LABEL_8;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    JUMPOUT(0x100B830FCLL);
  }
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v11 = __OFSUB__(v9, v10);
  v8 = v9 - v10;
  if (v11)
    goto LABEL_36;
LABEL_8:
  if (v8 < 0)
  {
LABEL_34:
    __break(1u);
    JUMPOUT(0x100B830ECLL);
  }
LABEL_9:
  if (v8)
  {
    v12 = v8 - 1;
    if ((unint64_t)(v8 - 1) >= 0x4000000000000000)
      v13 = 0x4000000000000000;
    else
      v13 = v8 - 1;
    if (v13 <= 0xF)
      goto LABEL_18;
    if (v12 >= 0x4000000000000000)
      v12 = 0x4000000000000000;
    if (v6 >= v12 + v2 + 1 || v6 + 2 * v12 + 2 <= v2)
    {
      v15 = v13 + 1;
      v16 = v15 & 0xF;
      if ((v15 & 0xF) == 0)
        v16 = 16;
      v14 = v15 - v16;
      v17.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
      v17.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
      v18.i64[0] = 0x5757575757575757;
      v18.i64[1] = 0x5757575757575757;
      v19.i64[0] = 0x3030303030303030;
      v19.i64[1] = 0x3030303030303030;
      v20.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v20.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v21.i64[0] = 0x909090909090909;
      v21.i64[1] = 0x909090909090909;
      v22 = v14;
      v23 = (int8x16_t *)v2;
      v24 = (char *)v6;
      do
      {
        v25 = *v23++;
        v26.i64[0] = 0x5757575757575757;
        v26.i64[1] = 0x5757575757575757;
        v27.i64[0] = 0x3030303030303030;
        v27.i64[1] = 0x3030303030303030;
        v40.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v25, v17), (int8x16_t)vsraq_n_u8(v26, (uint8x16_t)v25, 4uLL), (int8x16_t)vsraq_n_u8(v27, (uint8x16_t)v25, 4uLL));
        v28 = vandq_s8(v25, v20);
        v40.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v28, v21), vaddq_s8(v28, v18), vorrq_s8(v28, v19));
        vst2q_s8(v24, v40);
        v24 += 32;
        v22 -= 16;
      }
      while (v22);
    }
    else
    {
LABEL_18:
      v14 = 0;
    }
    v29 = v14 - 0x4000000000000000;
    v30 = (_BYTE *)(v6 + 2 * v14 + 1);
    v31 = v8 - v14;
    v32 = (unsigned __int8 *)(v2 + v14);
    while (v29)
    {
      v34 = *v32++;
      v33 = v34;
      v35 = (v34 >> 4) + 87;
      v36 = (v34 >> 4) | 0x30;
      if (v34 > 0x9F)
        LOBYTE(v36) = v35;
      *(v30 - 1) = v36;
      if ((v33 & 0xFu) <= 9)
        v37 = v33 & 0xF | 0x30;
      else
        v37 = (v33 & 0xF) + 87;
      *v30 = v37;
      v30 += 2;
      ++v29;
      if (!--v31)
        goto LABEL_31;
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_31:
  ((void (*)(void))static String.Encoding.utf8.getter)();
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))String.init(bytesNoCopy:length:encoding:freeWhenDone:))(v7, 2 * BYTE6(v4), v1, 1);
  *v0 = result;
  v0[1] = v39;
  return result;
}

uint64_t sub_100B8310C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100B72E94((uint64_t)&off_1010FEDD8);
  v1 = sub_100007E8C(&qword_1011DD160);
  result = swift_arrayDestroy(&unk_1010FEDF8, 22, v1);
  static Data.Hexadecimal.hexToDecimalMapping = v0;
  return result;
}

uint64_t *Data.Hexadecimal.hexToDecimalMapping.unsafeMutableAddressor()
{
  if (qword_1011DC2F0 != -1)
    swift_once(&qword_1011DC2F0, sub_100B8310C);
  return &static Data.Hexadecimal.hexToDecimalMapping;
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.getter()
{
  _BYTE v1[24];

  if (qword_1011DC2F0 != -1)
    swift_once(&qword_1011DC2F0, sub_100B8310C);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v1, 0, 0);
  return swift_bridgeObjectRetain();
}

double static Data.Hexadecimal.hexToDecimalMapping.setter(uint64_t a1)
{
  double result;
  _BYTE v3[24];

  if (qword_1011DC2F0 != -1)
    swift_once(&qword_1011DC2F0, sub_100B8310C);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v3, 1, 0);
  static Data.Hexadecimal.hexToDecimalMapping = a1;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t (*static Data.Hexadecimal.hexToDecimalMapping.modify(uint64_t a1))(_QWORD)
{
  if (qword_1011DC2F0 != -1)
    swift_once(&qword_1011DC2F0, sub_100B8310C);
  swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Data.init(hexString:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  uint64_t v5;
  __int16 v6;
  Swift::String_optional v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  _QWORD v14[3];
  __int128 v15;

  if ((String.count.getter(a1, a2) & 1) != 0)
  {
    v14[0] = 48;
    v14[1] = 0xE100000000000000;
    v4._countAndFlagsBits = a1;
    v4._object = a2;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  v5 = 0;
  LOBYTE(v6) = 0;
  v15 = xmmword_100ED8690;
  while (1)
  {
    v8 = String.Iterator.next()();
    if (!v8.value._object)
      break;
    if (qword_1011DC2F0 != -1)
      swift_once(&qword_1011DC2F0, sub_100B8310C);
    swift_beginAccess(&static Data.Hexadecimal.hexToDecimalMapping, v14, 32, 0);
    v9 = static Data.Hexadecimal.hexToDecimalMapping;
    if (!*(_QWORD *)(static Data.Hexadecimal.hexToDecimalMapping + 16)
      || (v10 = sub_100B8752C(v8.value._countAndFlagsBits, (uint64_t)v8.value._object, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10079CDF0), (v11 & 1) == 0))
    {
      swift_endAccess(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000652DC(v15, *((unint64_t *)&v15 + 1));
      return 0;
    }
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 56) + v10);
    swift_endAccess(v14);
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      if (((v12 + v6) & 0x100) == 0)
        __asm { BR              X11 }
      goto LABEL_18;
    }
    v6 = 16 * (v12 & 0xF) + v6;
    if ((v6 & 0x100) != 0)
      goto LABEL_17;
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100B83584()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v0 = sub_100007E8C(&qword_1011DD060);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.Identifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004FACC(v9, static Calendar.musicDefaultCalendar);
  v12 = sub_100048B14(v7, (uint64_t)static Calendar.musicDefaultCalendar);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v3);
  Calendar.init(identifier:)(v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  TimeZone.init(secondsFromGMT:)(0);
  v13 = type metadata accessor for TimeZone(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v2, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    Calendar.timeZone.setter(v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v11, v7);
  }
  return result;
}

uint64_t Calendar.musicDefaultCalendar.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1011DC2F8 != -1)
    swift_once(&qword_1011DC2F8, sub_100B83584);
  v0 = type metadata accessor for Calendar(0);
  return sub_100048B14(v0, (uint64_t)static Calendar.musicDefaultCalendar);
}

uint64_t static Calendar.musicDefaultCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1011DC2F8 != -1)
    swift_once(&qword_1011DC2F8, sub_100B83584);
  v2 = type metadata accessor for Calendar(0);
  v3 = sub_100048B14(v2, (uint64_t)static Calendar.musicDefaultCalendar);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id static NSDateFormatter.iso8601ExtendedDateFormatter.getter()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Class isa;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  Class v11;
  uint64_t v13;

  sub_100007E8C(&qword_1011DD060);
  __chkstk_darwin();
  v1 = (char *)&v13 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v6, "setLocale:", isa);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setDateFormat:", v8);

  TimeZone.init(secondsFromGMT:)(0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v1, 1, v9) != 1)
  {
    v11 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v1, v9);
  }
  objc_msgSend(v6, "setTimeZone:", v11);

  return v6;
}

id static NSDateFormatter.dayNameDateFormatter.getter()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setLocalizedDateFormatFromTemplate:", v1);

  return v0;
}

void sub_100B839E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v4, "setDateStyle:", 3);
  if (qword_1011DC2F8 != -1)
    swift_once(&qword_1011DC2F8, sub_100B83584);
  v5 = type metadata accessor for Calendar(0);
  v6 = sub_100048B14(v5, (uint64_t)static Calendar.musicDefaultCalendar);
  Calendar.timeZone.getter(v6);
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setTimeZone:", isa);

  static NSDateFormatter.releaseDateFormatter = (uint64_t)v4;
}

uint64_t *NSDateFormatter.releaseDateFormatter.unsafeMutableAddressor()
{
  if (qword_1011DC300 != -1)
    swift_once(&qword_1011DC300, sub_100B839E0);
  return &static NSDateFormatter.releaseDateFormatter;
}

id static NSDateFormatter.releaseDateFormatter.getter()
{
  return sub_100A32784(&qword_1011DC300, (id *)&static NSDateFormatter.releaseDateFormatter, (uint64_t)sub_100B839E0);
}

id sub_100B83B50()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v0, "setUnitsStyle:", 3);
  result = objc_msgSend(v0, "setAllowedUnits:", 96);
  static NSDateFormatter.collectionsDurationFormatter = (uint64_t)v0;
  return result;
}

uint64_t *NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor()
{
  if (qword_1011DC308 != -1)
    swift_once(&qword_1011DC308, sub_100B83B50);
  return &static NSDateFormatter.collectionsDurationFormatter;
}

id static NSDateFormatter.collectionsDurationFormatter.getter()
{
  return sub_100A32784(&qword_1011DC308, (id *)&static NSDateFormatter.collectionsDurationFormatter, (uint64_t)sub_100B83B50);
}

uint64_t Dictionary.filterIncludingPairsWithStringValues()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  __n128 v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;

  v75 = a3;
  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v74 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v69 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v77 = (char *)v62 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v12, v13, "key value ", 0);
  v15 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v71 = *(_QWORD *)(v15 - 8);
  v72 = v15;
  __chkstk_darwin();
  v17 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)v62 - v18;
  v20 = swift_getTupleTypeMetadata2(0, a2, &type metadata for String, 0, 0);
  v21 = static Array._allocateUninitialized(_:)(0, v20);
  v70 = a4;
  v81 = Dictionary.init(dictionaryLiteral:)(v21, a2, &type metadata for String, a4);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v22 = a1;
    else
      v22 = a1 & 0xFFFFFFFFFFFFFF8;
    v23 = __CocoaDictionary.makeIterator()(v22);
    v63 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v23 | 0x8000000000000000;
  }
  else
  {
    v27 = -1 << *(_BYTE *)(a1 + 32);
    v24 = ~v27;
    v28 = *(_QWORD *)(a1 + 64);
    v63 = a1 + 64;
    v29 = -v27;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    else
      v30 = -1;
    v25 = v30 & v28;
    v26 = a1;
  }
  v73 = v26;
  v64 = (unint64_t)(v24 + 64) >> 6;
  v65 = v26 & 0x7FFFFFFFFFFFFFFFLL;
  v62[0] = v64 - 1;
  v62[1] = v24;
  result = swift_bridgeObjectRetain();
  v33 = v73;
  v34 = 0;
  v35 = v7;
  v67 = v7;
  v68 = v17;
  v66 = v19;
  if ((v73 & 0x8000000000000000) == 0)
    goto LABEL_16;
LABEL_11:
  v36 = __CocoaDictionary.Iterator.next()(result);
  if (v36)
  {
    v38 = v36;
    v39 = v37;
    _forceBridgeFromObjectiveC<A>(_:_:)(v36, a2, a2);
    swift_unknownObjectRelease(v38);
    v40 = v75;
    _forceBridgeFromObjectiveC<A>(_:_:)(v39, v75, v75);
    v32 = swift_unknownObjectRelease(v39);
    v41 = 0;
    v42 = v34;
    v76 = v25;
    v43 = v67;
    goto LABEL_25;
  }
  v41 = 1;
  v42 = v34;
  v76 = v25;
  v43 = v67;
LABEL_24:
  v40 = v75;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_25:
        v53 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v53 + 56))(v17, v41, 1, TupleTypeMetadata2, v32);
        (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v19, v17, v72);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v19, 1, TupleTypeMetadata2) == 1)
        {
          sub_10004FA7C(v73);
          return v81;
        }
        v54 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v19, a2);
        v55 = v74;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v74, v54, v40);
        if (swift_dynamicCast(&v79, v55, v40, &type metadata for String, 0))
        {
          v44 = v79;
          v45 = v80;
          goto LABEL_15;
        }
        v56 = sub_10004A07C(0, &qword_1011DD068, NSNumber_ptr);
        if (swift_dynamicCast(&v79, v55, v40, v56, 0))
        {
          v57 = v79;
          v58 = objc_msgSend(v79, "description");
          v44 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          v45 = v59;

          v43 = v67;
          v55 = v74;
LABEL_15:
          v35 = v43;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v55, v75);
          v46 = v77;
          v47 = v78;
          v48 = v69;
          (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v69, v77, a2);
          v79 = v44;
          v80 = v45;
          v49 = type metadata accessor for Dictionary(0, a2, &type metadata for String, v70);
          Dictionary.subscript.setter(&v79, v48, v49);
          result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v46, a2);
          v34 = v42;
          v25 = v76;
          v17 = v68;
          v33 = v73;
          if ((v73 & 0x8000000000000000) != 0)
            goto LABEL_11;
          goto LABEL_16;
        }
        v60 = v40;
        v35 = v43;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v55, v60);
        result = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v77, a2);
        v34 = v42;
        v25 = v76;
        v33 = v73;
        if ((v73 & 0x8000000000000000) != 0)
          goto LABEL_11;
LABEL_16:
        if (v25)
        {
          v76 = (v25 - 1) & v25;
          v50 = __clz(__rbit64(v25)) | (v34 << 6);
          v42 = v34;
          v43 = v35;
          v40 = v75;
          goto LABEL_18;
        }
        v42 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        v43 = v35;
        if (v42 >= v64)
        {
          v76 = 0;
          v41 = 1;
          v42 = v34;
          goto LABEL_24;
        }
        v52 = *(_QWORD *)(v63 + 8 * v42);
        v40 = v75;
        if (!v52)
          break;
LABEL_22:
        v76 = (v52 - 1) & v52;
        v50 = __clz(__rbit64(v52)) + (v42 << 6);
LABEL_18:
        v51 = v33;
        (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))(v17, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v78 + 72) * v50, a2);
        (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(&v17[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v51 + 56) + *(_QWORD *)(v43 + 72) * v50, v40);
        v41 = 0;
        v19 = v66;
      }
      if (v34 + 2 < v64)
        break;
      v76 = 0;
      v41 = 1;
    }
    v52 = *(_QWORD *)(v63 + 8 * (v34 + 2));
    if (v52)
    {
      v42 = v34 + 2;
      goto LABEL_22;
    }
    v61 = v34 + 3;
    if (v34 + 3 < v64)
      break;
    v76 = 0;
    v41 = 1;
    v42 = v34 + 2;
  }
  v52 = *(_QWORD *)(v63 + 8 * v61);
  if (v52)
  {
    v42 = v34 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    v42 = v61 + 1;
    if (__OFADD__(v61, 1))
      break;
    if (v42 >= v64)
    {
      v76 = 0;
      v41 = 1;
      v42 = v62[0];
      goto LABEL_25;
    }
    v52 = *(_QWORD *)(v63 + 8 * v42);
    ++v61;
    if (v52)
      goto LABEL_22;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t Dictionary.filteredDictionary(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  int64_t v32;
  char *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t (*v66)(char *, char *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;

  v72 = a4;
  v66 = a1;
  v67 = a2;
  type metadata accessor for Optional(0, a5);
  __chkstk_darwin();
  v61 = (char *)v56 - v10;
  v70 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin();
  v74 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin();
  v60 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)v56 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a4, a5, "key value ", 0);
  v16 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v68 = *(_QWORD *)(v16 - 8);
  v69 = v16;
  __chkstk_darwin();
  v63 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)v56 - v18;
  v20 = swift_getTupleTypeMetadata2(0, a4, a5, 0, 0);
  v21 = static Array._allocateUninitialized(_:)(0, v20);
  v62 = a6;
  v75 = Dictionary.init(dictionaryLiteral:)(v21, a4, a5, a6);
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v22 = a3;
    else
      v22 = a3 & 0xFFFFFFFFFFFFFF8;
    v23 = __CocoaDictionary.makeIterator()(v22);
    v57 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v23 | 0x8000000000000000;
  }
  else
  {
    v27 = -1 << *(_BYTE *)(a3 + 32);
    v24 = ~v27;
    v28 = *(_QWORD *)(a3 + 64);
    v57 = a3 + 64;
    v29 = -v27;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    else
      v30 = -1;
    v25 = v30 & v28;
    v26 = a3;
  }
  v58 = (unint64_t)(v24 + 64) >> 6;
  v59 = v26 & 0x7FFFFFFFFFFFFFFFLL;
  v56[0] = v58 - 1;
  v56[1] = v24;
  result = swift_bridgeObjectRetain();
  v32 = 0;
  v33 = v63;
  v64 = TupleTypeMetadata2;
  v65 = v26;
  while ((v26 & 0x8000000000000000) != 0)
  {
    v37 = __CocoaDictionary.Iterator.next()(result);
    if (v37)
    {
      v39 = v37;
      v40 = v38;
      _forceBridgeFromObjectiveC<A>(_:_:)(v37, v72, v72);
      swift_unknownObjectRelease(v39);
      _forceBridgeFromObjectiveC<A>(_:_:)(v40, a5, a5);
      swift_unknownObjectRelease(v40);
      v36 = 0;
    }
    else
    {
      v36 = 1;
    }
    v35 = v32;
    v73 = v25;
LABEL_25:
    v42 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v33, v36, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v19, v33, v69);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v19, 1, TupleTypeMetadata2) == 1)
    {
      sub_10004FA7C(v26);
      return v75;
    }
    v43 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    v45 = v71;
    v44 = v72;
    v46 = v19;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v14, v19, v72);
    v47 = v70;
    v48 = v74;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v74, v43, a5);
    if ((v66(v14, v48) & 1) != 0)
    {
      v49 = v14;
      v50 = v60;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v60, v49, v44);
      v51 = v61;
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v61, v74, a5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v51, 0, 1, a5);
      v52 = type metadata accessor for Dictionary(0, v44, a5, v62);
      v53 = v51;
      v48 = v74;
      v54 = v50;
      v14 = v49;
      v33 = v63;
      Dictionary.subscript.setter(v53, v54, v52);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, a5);
    result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v14, v44);
    v32 = v35;
    v25 = v73;
    v19 = v46;
    TupleTypeMetadata2 = v64;
    v26 = v65;
  }
  if (v25)
  {
    v73 = (v25 - 1) & v25;
    v34 = __clz(__rbit64(v25)) | (v32 << 6);
    v35 = v32;
    goto LABEL_15;
  }
  v35 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v35 >= v58)
  {
    v73 = 0;
    v36 = 1;
    v35 = v32;
    goto LABEL_25;
  }
  v41 = *(_QWORD *)(v57 + 8 * v35);
  if (v41)
    goto LABEL_21;
  if (v32 + 2 >= v58)
  {
    v73 = 0;
    v36 = 1;
    goto LABEL_25;
  }
  v41 = *(_QWORD *)(v57 + 8 * (v32 + 2));
  if (v41)
  {
    v35 = v32 + 2;
    goto LABEL_21;
  }
  v55 = v32 + 3;
  if (v32 + 3 >= v58)
  {
    v73 = 0;
    v36 = 1;
    v35 = v32 + 2;
    goto LABEL_25;
  }
  v41 = *(_QWORD *)(v57 + 8 * v55);
  if (v41)
  {
    v35 = v32 + 3;
LABEL_21:
    v73 = (v41 - 1) & v41;
    v34 = __clz(__rbit64(v41)) + (v35 << 6);
LABEL_15:
    (*(void (**)(char *, unint64_t, uint64_t))(v71 + 16))(v33, *(_QWORD *)(v26 + 48) + *(_QWORD *)(v71 + 72) * v34, v72);
    (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(&v33[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v26 + 56) + *(_QWORD *)(v70 + 72) * v34, a5);
    v36 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    v35 = v55 + 1;
    if (__OFADD__(v55, 1))
      break;
    if (v35 >= v58)
    {
      v73 = 0;
      v36 = 1;
      v35 = v56[0];
      goto LABEL_25;
    }
    v41 = *(_QWORD *)(v57 + 8 * v35);
    ++v55;
    if (v41)
      goto LABEL_21;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t IndexPath.safeSection.getter()
{
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
    return NSNotFound.getter();
  else
    return IndexPath.subscript.getter(0);
}

uint64_t IndexPath.safeSection.setter(uint64_t a1)
{
  uint64_t result;

  result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
    return IndexPath.subscript.setter(a1, 0);
  return result;
}

uint64_t (*IndexPath.safeSection.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
    v3 = NSNotFound.getter();
  else
    v3 = IndexPath.subscript.getter(0);
  *a1 = v3;
  return sub_100B8483C;
}

uint64_t sub_100B8483C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
    return IndexPath.subscript.setter(v1, 0);
  return result;
}

uint64_t IndexPath.safeItem.getter()
{
  if ((unint64_t)IndexPath.count.getter() > 1)
    return IndexPath.subscript.getter(1);
  else
    return NSNotFound.getter();
}

unint64_t IndexPath.safeItem.setter(uint64_t a1)
{
  unint64_t result;

  result = IndexPath.count.getter();
  if (result >= 2)
    return IndexPath.subscript.setter(a1, 1);
  return result;
}

unint64_t (*IndexPath.safeItem.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((unint64_t)IndexPath.count.getter() > 1)
    v3 = IndexPath.subscript.getter(1);
  else
    v3 = NSNotFound.getter();
  *a1 = v3;
  return sub_100B84924;
}

unint64_t sub_100B84924(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *a1;
  result = IndexPath.count.getter();
  if (result >= 2)
    return IndexPath.subscript.setter(v1, 1);
  return result;
}

void *String.nonBreakingSpace.unsafeMutableAddressor()
{
  return &static String.nonBreakingSpace;
}

uint64_t static String.nonBreakingSpace.getter()
{
  return 41154;
}

Swift::String __swiftcall String.trim()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  _QWORD v16[2];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v3;
  v16[1] = v2;
  v8 = objc_msgSend((id)objc_opt_self(NSCharacterSet), "whitespaceAndNewlineCharacterSet");
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = sub_100B8830C();
  v10 = StringProtocol.trimmingCharacters(in:)(v7, &type metadata for String, v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = v10;
  v14 = v12;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

Swift::String __swiftcall String.removeSpaces()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String result;
  _QWORD v6[2];
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v8 = v0;
  v9 = v1;
  v7[0] = 32;
  v7[1] = 0xE100000000000000;
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  v2 = sub_100B8830C();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v7, v6, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

Swift::String __swiftcall String.replace(usingRegexPattern:with:options:)(Swift::String usingRegexPattern, Swift::String with, NSRegularExpressionOptions options)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  id v10;
  void *v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String result;

  v5 = v4;
  v6 = v3;
  object = usingRegexPattern._object;
  countAndFlagsBits = usingRegexPattern._countAndFlagsBits;
  objc_allocWithZone((Class)NSRegularExpression);
  swift_bridgeObjectRetain();
  v10 = sub_100B8742C(countAndFlagsBits, (uint64_t)object, options);
  v11 = v10;
  if (v10)
  {
    v12 = String.count.getter(v6, v5);
    v13 = String._bridgeToObjectiveC()();
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v11, "stringByReplacingMatchesInString:options:range:withTemplate:", v13, 0, 0, v12, v14);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v5 = v16;

  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v17 = v6;
  v18 = v5;
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

Swift::String __swiftcall String.htmlizedString()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = v0;
  v20 = v1;
  v17 = 10;
  v18 = 0xE100000000000000;
  v15 = 1047683644;
  v16 = 0xE400000000000000;
  v2 = sub_100B8830C();
  v3 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v17, &v15, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  sub_100B84CFC(v3, v4);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v19 = v6;
  v20 = v8;
  v17 = 38;
  v18 = 0xE100000000000000;
  v15 = 0x3B706D6126;
  v16 = 0xE500000000000000;
  v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v17, &v15, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = v9;
  v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

void sub_100B84CFC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v4 = sub_100007E8C(&qword_1011DD078);
  __chkstk_darwin(v4);
  v61 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = 0;
  v68 = 0xE000000000000000;
  v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v7 = 11;
  v58 = 4 * v6;
  v65 = a1;
  v66 = a2;
  v62 = v7 | (v6 << 16);
  v63 = 38;
  v64 = 0xE100000000000000;
  v8 = type metadata accessor for Locale(0);
  v9 = 0;
  v10 = 15;
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v60 = v8;
  v56 = a1;
  v57 = a2;
  while (1)
  {
    v11 = (uint64_t)v61;
    v59(v61, 1, 1, v60);
    v12 = sub_100B8830C();
    v13 = StringProtocol.range<A>(of:options:range:locale:)(&v63, 0, v10, v62, 0, v11, &type metadata for String, &type metadata for String, v12, v12);
    v15 = v14;
    sub_10004FF60(v11, &qword_1011DD078);
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      v16 = v10 >> 14;
      goto LABEL_35;
    }
    v16 = v13 >> 14;
    if (v13 >> 14 < v9)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v17 = String.subscript.getter(v10, v13, a1, a2);
    String.append(contentsOf:)(v17);
    v18 = swift_bridgeObjectRelease();
    v65 = a1;
    v66 = a2;
    v63 = 59;
    v64 = 0xE100000000000000;
    if (v58 < v16)
      goto LABEL_38;
    v19 = (uint64_t)v61;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v59)(v61, 1, 1, v60, v18);
    StringProtocol.range<A>(of:options:range:locale:)(&v63, 0, v13, v62, 0, v19, &type metadata for String, &type metadata for String, v12, v12);
    v10 = v20;
    v22 = v21;
    sub_10004FF60(v19, &qword_1011DD078);
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      break;
    v9 = v10 >> 14;
    if (v10 >> 14 < v16)
      goto LABEL_40;
    v23 = String.subscript.getter(v13, v10, a1, a2);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    if (sub_100B87FF0(8998, (void *)0xE200000000000000, v23, v24, v26, v28))
    {
      if (v25 >> 14 < (unint64_t)Substring.index(_:offsetBy:)(v23, 2, v23, v25, v27, v29) >> 14)
        goto LABEL_41;
      v30 = ((uint64_t (*)(void))Substring.subscript.getter)();
      v32 = v31;
      v34 = v33;
      v36 = v35;
      if (sub_100B87FF0(120, (void *)0xE100000000000000, v30, v31, v33, v35))
      {
        swift_bridgeObjectRelease();
        v37 = 16;
        v38 = 3;
      }
      else
      {
        v45 = sub_100B87FF0(88, (void *)0xE100000000000000, v30, v32, v34, v36);
        swift_bridgeObjectRelease();
        if (v45)
          v37 = 16;
        else
          v37 = 10;
        if (v45)
          v38 = 3;
        else
          v38 = 2;
      }
      v46 = Substring.index(_:offsetBy:)(v23, v38, v23, v25, v27, v29);
      v47 = Substring.index(_:offsetBy:)(v25, -1, v23, v25, v27, v29);
      if (v47 >> 14 < v46 >> 14)
        goto LABEL_42;
      v48 = Substring.subscript.getter(v46, v47, v23, v25, v27, v29);
      v44 = sub_100B85778(v48, v49, v50, v51, v37);
      v43 = v52;
      swift_bridgeObjectRelease();
      if (v43)
      {
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    else
    {
      if (qword_1011DC310 != -1)
        swift_once(&qword_1011DC310, sub_100B85668);
      v39 = off_1011DD028;
      if (*((_QWORD *)off_1011DD028 + 2))
      {
        swift_bridgeObjectRetain();
        v40 = sub_100B875A4(v23, v25, v27, v29);
        if ((v41 & 1) != 0)
        {
          v42 = (uint64_t *)(v39[7] + 16 * v40);
          v44 = *v42;
          v43 = (void *)v42[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n(v29, 2);
LABEL_32:
          v53._countAndFlagsBits = v44;
          v53._object = v43;
          String.append(_:)(v53);
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
    }
    String.append(contentsOf:)(v23);
LABEL_8:
    a1 = v56;
    swift_bridgeObjectRelease();
    a2 = v57;
    v65 = a1;
    v66 = v57;
    v63 = 38;
    v64 = 0xE100000000000000;
    if (v58 < v9)
      goto LABEL_39;
  }
  v10 = v13;
LABEL_35:
  if (v58 >= v16)
  {
    v54 = String.subscript.getter(v10, v62, a1, a2);
    String.append(contentsOf:)(v54);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_43:
  __break(1u);
}

Swift::String __swiftcall String.insensitiveCompareString()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String_optional v9;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v2 = v1;
  v3 = v0;
  v4 = sub_100007E8C(&qword_1011DD078);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 0xE000000000000000;
  v31 = 0;
  v32 = 0xE000000000000000;
  v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  v27 = v3;
  v28 = v2;
  v29 = 0;
  v30 = v8;
  swift_bridgeObjectRetain();
  v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    countAndFlagsBits = v9.value._countAndFlagsBits;
    object = v9.value._object;
    do
    {
      if ((Character.isPunctuation.getter(countAndFlagsBits, object) & 1) == 0)
      {
        v13._countAndFlagsBits = countAndFlagsBits;
        v13._object = object;
        String.append(_:)(v13);
      }
      swift_bridgeObjectRelease();
      v12 = String.Iterator.next()();
      countAndFlagsBits = v12.value._countAndFlagsBits;
      object = v12.value._object;
    }
    while (v12.value._object);
    v14 = v31;
    v7 = v32;
  }
  else
  {
    v14 = 0;
  }
  swift_bridgeObjectRelease();
  v27 = v14;
  v28 = v7;
  v15 = sub_100B8830C();
  v16 = StringProtocol.localizedLowercase.getter(&type metadata for String, v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  v27 = v16;
  v28 = v18;
  static Locale.current.getter(v19);
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
  v21 = StringProtocol.folding(options:locale:)(128, v6, &type metadata for String, v15);
  v23 = v22;
  sub_10004FF60((uint64_t)v6, &qword_1011DD078);
  swift_bridgeObjectRelease();
  v24 = v21;
  v25 = v23;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

id String.BOOLValue.getter()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

BOOL String.containsExcessiveHeightCharacters.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  void *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  _BOOL8 v18;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  char v22;
  _QWORD v23[2];

  sub_100007E8C(&qword_1011DD080);
  __chkstk_darwin();
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)v23 - v6;
  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin();
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet(v10);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13
    && (v15 = (void *)v13,
        v14(v5, 1, 1, v8),
        v16 = sub_100048748(&qword_1011DD088, (uint64_t (*)(uint64_t))&type metadata accessor for CharacterSet, (uint64_t)&protocol conformance descriptor for CharacterSet), dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v15, v5, v8, v16), v15, v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48), v17(v5, 1, v8) != 1))
  {
    v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v20(v7, v5, v8);
    v14(v7, 0, 1, v8);
    if (v17(v7, 1, v8) != 1)
    {
      v20(v12, v7, v8);
      v23[0] = a1;
      v23[1] = a2;
      v21 = sub_100B8830C();
      StringProtocol.rangeOfCharacter(from:options:range:)(v12, 0, 0, 0, 1, &type metadata for String, v21);
      v18 = (v22 & 1) == 0;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v18;
    }
  }
  else
  {
    v14(v7, 1, 1, v8);
  }
  sub_10004FF60((uint64_t)v7, &qword_1011DD080);
  return 0;
}

BOOL String.containsCharacter(from:)(uint64_t a1)
{
  unint64_t v2;
  char v3;

  v2 = sub_100B8830C();
  StringProtocol.rangeOfCharacter(from:options:range:)(a1, 0, 0, 0, 1, &type metadata for String, v2);
  return (v3 & 1) == 0;
}

void *sub_100B85668()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *result;
  uint64_t v22;

  v0 = sub_100007E8C(&qword_1011DD158);
  inited = swift_initStackObject(v0, &v22);
  *(_OWORD *)(inited + 16) = xmmword_100EC06D0;
  *(_QWORD *)(inited + 32) = Substring.init(_:)(0x3B746F757126, 0xE600000000000000, (__n128)xmmword_100EC06D0);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = 34;
  *(_QWORD *)(inited + 72) = 0xE100000000000000;
  *(_QWORD *)(inited + 80) = Substring.init(_:)(0x3B706D6126, 0xE500000000000000, v5);
  *(_QWORD *)(inited + 88) = v6;
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = v8;
  *(_QWORD *)(inited + 112) = 38;
  *(_QWORD *)(inited + 120) = 0xE100000000000000;
  *(_QWORD *)(inited + 128) = Substring.init(_:)(0x3B736F706126, 0xE600000000000000, v9);
  *(_QWORD *)(inited + 136) = v10;
  *(_QWORD *)(inited + 144) = v11;
  *(_QWORD *)(inited + 152) = v12;
  *(_QWORD *)(inited + 160) = 39;
  *(_QWORD *)(inited + 168) = 0xE100000000000000;
  *(_QWORD *)(inited + 176) = Substring.init(_:)(997485606, 0xE400000000000000, v13);
  *(_QWORD *)(inited + 184) = v14;
  *(_QWORD *)(inited + 192) = v15;
  *(_QWORD *)(inited + 200) = v16;
  *(_QWORD *)(inited + 208) = 60;
  *(_QWORD *)(inited + 216) = 0xE100000000000000;
  *(_QWORD *)(inited + 224) = Substring.init(_:)(997484326, 0xE400000000000000, v17);
  *(_QWORD *)(inited + 232) = v18;
  *(_QWORD *)(inited + 240) = v19;
  *(_QWORD *)(inited + 248) = v20;
  *(_QWORD *)(inited + 256) = 62;
  *(_QWORD *)(inited + 264) = 0xE100000000000000;
  result = (void *)sub_100B72090(inited);
  off_1011DD028 = result;
  return result;
}

uint64_t sub_100B85778(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if ((unint64_t)(a5 - 37) < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((a2 ^ a1) < 0x4000)
    return 0;
  v11 = sub_100B88184(a1, a2, a3, a4, a5);
  if ((v11 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = sub_100B87AC0(a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    if ((v5 & 0x100000000) != 0)
      return 0;
  }
  else
  {
    LODWORD(v5) = v11;
    if ((v11 & 0x100000000) != 0)
      return 0;
  }
  result = 0;
  if (WORD1(v5) <= 0x10u && (v5 & 0xFFFFF800) != 0xD800)
  {
    if ((v5 & 0xFFFFFF80) == 0)
    {
      if (v5 > 0xFF)
      {
        __break(1u);
        return result;
      }
      v13 = (v5 + 1);
      goto LABEL_12;
    }
LABEL_15:
    v15 = (v5 & 0x3F) << 8;
    v13 = (v15 | (v5 >> 6)) + 33217;
    v16 = (v15 | (v5 >> 6) & 0x3F) << 8;
    v17 = (((v16 | (v5 >> 12) & 0x3F) << 8) | (v5 >> 18)) - 2122219023;
    v18 = (v16 | (v5 >> 12)) + 8487393;
    if (WORD1(v5))
      v18 = v17;
    if (v5 >= 0x800)
      v13 = v18;
LABEL_12:
    v14 = __clz(v13);
    v19 = (v13 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v14 >> 3)) & 7)));
    return static String._uncheckedFromUTF8(_:)(&v19, 4 - (v14 >> 3));
  }
  return result;
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  v3 = v2 == 0;
  return !a2 || v3;
}

uint64_t Optional<A>.nonEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!a2)
    return 0;
  v2 = a1;
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  return v2;
}

NSAttributedString __swiftcall NSAttributedString.init(string:attributes:replacingPlaceholder:withImage:imageAttributes:)(Swift::String string, Swift::OpaquePointer attributes, Swift::String replacingPlaceholder, UIImage_optional withImage, Swift::OpaquePointer imageAttributes)
{
  Class isa;
  void *object;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  Class v15;
  id v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  Class v24;
  id v25;
  id v26;
  uint64_t v28;
  uint64_t v29;

  v29 = *(_QWORD *)&withImage.is_nil;
  isa = withImage.value.super.isa;
  object = replacingPlaceholder._object;
  v8 = string._object;
  static String.localizedStringWithFormat(_:_:)(string._countAndFlagsBits, string._object, _swiftEmptyArrayStorage);
  v10 = v9;
  v11 = objc_allocWithZone((Class)NSMutableAttributedString);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  _s3__C3KeyVMa_1(0);
  v14 = v13;
  sub_100048748(&qword_1011DC4A0, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_1, (uint64_t)&unk_100EE6A84);
  v28 = v14;
  v15 = Dictionary._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v11, "initWithString:attributes:", v12, v15, swift_bridgeObjectRelease(attributes._rawValue).n128_f64[0]);

  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "rangeOfString:options:", v18, 129, swift_bridgeObjectRelease(object).n128_f64[0]);
  v21 = v20;

  if (isa)
  {
    v22 = (void *)objc_opt_self(NSTextAttachment);
    isa = isa;
    v23 = objc_msgSend(v22, "textAttachmentWithImage:", isa);
    v24 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    v25 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:attributes:", v23, v24);

  }
  else
  {
    swift_bridgeObjectRelease(v29);
    v25 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  }
  objc_msgSend(v16, "replaceCharactersInRange:withAttributedString:", v19, v21, v25, v28);
  v26 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithAttributedString:", v16);

  return (NSAttributedString)v26;
}

void sub_100B85C24()
{
  static Double.epsilon = 0x3E80000000000000;
}

uint64_t *Double.epsilon.unsafeMutableAddressor()
{
  if (qword_1011DC318 != -1)
    swift_once(&qword_1011DC318, sub_100B85C24);
  return &static Double.epsilon;
}

double static Double.epsilon.getter()
{
  if (qword_1011DC318 != -1)
    swift_once(&qword_1011DC318, sub_100B85C24);
  return *(double *)&static Double.epsilon;
}

double TimeIntervalSyntaxSugar.minutes.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 16))() * 60.0;
}

double TimeIntervalSyntaxSugar.hours.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 24))() * 60.0;
}

double sub_100B85CFC()
{
  uint64_t *v0;

  return (double)*v0;
}

double sub_100B85D08()
{
  uint64_t *v0;

  return (double)*v0 * 60.0;
}

double sub_100B85D20()
{
  uint64_t *v0;

  return (double)*v0 * 60.0 * 60.0;
}

double sub_100B85D3C()
{
  double *v0;

  return *v0 * 60.0;
}

double sub_100B85D50()
{
  double *v0;

  return *v0 * 60.0 * 60.0;
}

uint64_t _NSRange.init(range:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v7 = String.Index.samePosition(in:)(a3, a4, a1);
  if ((v8 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100E53D00, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 726, 0);
  }
  else
  {
    v9 = v7;
    v10 = String.Index.samePosition(in:)(a3, a4, a2);
    if ((v11 & 1) == 0)
    {
      v12 = v10;
      v13 = String.UTF16View.distance(from:to:)(15, v9, a3, a4);
      String.UTF16View.distance(from:to:)(v9, v12, a3, a4);
      swift_bridgeObjectRelease(a4);
      return v13;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100E53D30, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 727, 0);
  }
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v7 = String.index(after:)(a2, a3, a4);
  v8 = String.Index.samePosition(in:)(a3, a4, a1);
  if ((v9 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100E53D00, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 726, 0);
  }
  else
  {
    v10 = v8;
    v11 = String.Index.samePosition(in:)(a3, a4, v7);
    if ((v12 & 1) == 0)
    {
      v13 = v11;
      v14 = String.UTF16View.distance(from:to:)(15, v10, a3, a4);
      String.UTF16View.distance(from:to:)(v10, v13, a3, a4);
      swift_bridgeObjectRelease(a4);
      return v14;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100E53D30, "MusicUtilities/Foundation+Utilities.swift", 41, 2, 727, 0);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;

  if (a1.location >= v1)
  {
    if (__OFADD__(a1.location, a1.length))
    {
      __break(1u);
    }
    else if (!__OFADD__(v1, v2))
    {
      LOBYTE(a1.location) = v1 + v2 >= a1.location + a1.length;
      return a1.location;
    }
    __break(1u);
    return a1.location;
  }
  LOBYTE(a1.location) = 0;
  return a1.location;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(Swift::String from, Swift::String to, Swift::Bool preserveLength)
{
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  Swift::Int v7;
  NSString v8;
  NSString v9;
  id v10;
  Swift::Int v11;
  Swift::Int v12;
  __C::_NSRange v13;
  __C::_NSRange v14;
  uint64_t location;
  Swift::Int length;
  __C::_NSRange v17;
  unint64_t v18;
  _BYTE *v19;
  __n128 v20;
  __C::_NSRange result;
  Swift::String v22;
  Swift::String v23;

  v23 = from;
  object = from._object;
  countAndFlagsBits = from._countAndFlagsBits;
  v22 = to;
  v6 = sub_100B8830C();
  if ((StringProtocol.contains<A>(_:)(&v22, &type metadata for String, &type metadata for String, v6, v6) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v7 = String.UTF16View.count.getter(countAndFlagsBits, object);
    swift_bridgeObjectRelease();
    v8 = String._bridgeToObjectiveC()();
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "rangeOfString:", v9, v22._countAndFlagsBits, v22._object, v23._countAndFlagsBits, v23._object);
    v12 = v11;

    v13.location = 0;
    v13.length = v7;
    v14.location = (Swift::Int)v10;
    v14.length = v12;
    v17 = _NSRange.convert(from:to:preserveLength:)(v13, v14, preserveLength);
    length = v17.length;
    location = v17.location;
  }
  else
  {
    v18 = sub_100B88350();
    swift_allocError(&type metadata for _NSRange.ConversionError, v18, 0, 0);
    *v19 = 4;
    location = swift_willThrow(v20);
  }
  result.length = length;
  result.location = location;
  return result;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(__C::_NSRange from, __C::_NSRange to, Swift::Bool preserveLength)
{
  Swift::Int v3;
  uint64_t v4;
  Swift::Int v5;
  char v6;
  unint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  __C::_NSRange v12;
  Swift::Int v13;
  char v14;

  if (to.location < from.location)
    goto LABEL_5;
  if (__OFADD__(to.location, to.length))
  {
    __break(1u);
    goto LABEL_19;
  }
  v5 = from.location + from.length;
  if (__OFADD__(from.location, from.length))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < to.location + to.length)
  {
LABEL_5:
    v6 = 0;
LABEL_6:
    v7 = sub_100B88350();
    swift_allocError(&type metadata for _NSRange.ConversionError, v7, 0, 0);
    *v8 = v6;
    from.location = swift_willThrow(v9);
    return from;
  }
  if (v3 < from.location)
  {
LABEL_11:
    v6 = 1;
    goto LABEL_6;
  }
  v10 = v4;
  if (__OFADD__(v3, v4))
    goto LABEL_20;
  if (v5 < v3 + v4)
    goto LABEL_11;
  if (__OFSUB__(v3, to.location))
  {
LABEL_21:
    __break(1u);
    return from;
  }
  v12.location = 0;
  v12.length = v13;
  *(__C::_NSRange_optional *)&from.location = _NSRange.intersection(_:)(v12);
  if ((v14 & 1) != 0)
  {
    v6 = 2;
    goto LABEL_6;
  }
  if (preserveLength && from.length != v10)
  {
    v6 = 3;
    goto LABEL_6;
  }
  return from;
}

Swift::Bool __swiftcall _NSRange.intersects(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  uint64_t v2;

  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_13:
    __break(1u);
    return a1.location;
  }
  if (v1 >= a1.location && a1.location + a1.length > v1)
    return 1;
  LOBYTE(a1.location) = a1.location >= v1 && v1 + v2 > a1.location;
  return a1.location;
}

uint64_t sub_100B86250()
{
  uint64_t result;

  result = NSNotFound.getter();
  static _NSRange.notFound = result;
  unk_10124EFE0 = 0;
  return result;
}

uint64_t *_NSRange.notFound.unsafeMutableAddressor()
{
  if (qword_1011DC320 != -1)
    swift_once(&qword_1011DC320, sub_100B86250);
  return &static _NSRange.notFound;
}

uint64_t static _NSRange.notFound.getter()
{
  if (qword_1011DC320 != -1)
    swift_once(&qword_1011DC320, sub_100B86250);
  return static _NSRange.notFound;
}

Swift::tuple_first___C__NSRange_second___C__NSRange __swiftcall _NSRange.difference(_:)(__C::_NSRange a1)
{
  Swift::Int v1;
  Swift::Int v2;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  BOOL v6;
  Swift::Int v7;
  _BOOL4 v8;
  Swift::Int v9;
  Swift::Int v11;
  Swift::Int v12;
  Swift::tuple_first___C__NSRange_second___C__NSRange result;

  v3 = v2;
  v4 = v1;
  v5 = v1 + v2;
  v6 = __OFADD__(v1, v2);
  if (v1 < a1.location)
  {
    if (!v6)
      goto LABEL_10;
    __break(1u);
  }
  if (v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once(&qword_1011DC320, sub_100B86250);
    goto LABEL_43;
  }
  if (a1.location + a1.length >= v5)
  {
    if (qword_1011DC320 == -1)
    {
LABEL_45:
      v4 = static _NSRange.notFound;
      v3 = unk_10124EFE0;
      v7 = static _NSRange.notFound;
      v9 = unk_10124EFE0;
      goto LABEL_46;
    }
LABEL_48:
    swift_once(&qword_1011DC320, sub_100B86250);
    goto LABEL_45;
  }
LABEL_10:
  v7 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v4 < a1.location || v7 <= v4)
    goto LABEL_27;
  v8 = 0;
  v3 = a1.location - v4;
  if (!__OFSUB__(a1.location, v4))
  {
    while (1)
    {
      v9 = v5 - v7;
      if (__OFSUB__(v5, v7))
        goto LABEL_50;
      if (!v8)
        break;
      if (v7 >= v5)
        goto LABEL_38;
      v5 = v4 + v3;
      if (__OFADD__(v4, v3))
      {
        __break(1u);
LABEL_55:
        v11 = a1.location + a1.length;
        v12 = v9;
        swift_once(&qword_1011DC320, sub_100B86250);
        v9 = v12;
        v7 = v11;
LABEL_42:
        v4 = v7;
        v3 = v9;
        goto LABEL_43;
      }
      if (v5 < v7)
        goto LABEL_46;
      if (__OFADD__(v7, v9))
      {
        __break(1u);
        goto LABEL_57;
      }
      if (v5 <= v7 + v9)
        v5 = v7 + v9;
      if (v7 < v4)
        v4 = a1.location + a1.length;
      v3 = v5 - v4;
      if (!__OFSUB__(v5, v4))
        goto LABEL_38;
      __break(1u);
LABEL_27:
      if (a1.location < v4 || v5 <= a1.location)
        goto LABEL_38;
      v8 = v4 < a1.location && v3 > 0;
      v3 = a1.location - v4;
      if (__OFSUB__(a1.location, v4))
        goto LABEL_37;
    }
    if (v7 < v5)
    {
      if (qword_1011DC320 != -1)
        goto LABEL_55;
      goto LABEL_42;
    }
    if (qword_1011DC320 == -1)
      goto LABEL_45;
    goto LABEL_48;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  if (qword_1011DC320 != -1)
    goto LABEL_53;
LABEL_43:
  v7 = static _NSRange.notFound;
  v9 = unk_10124EFE0;
LABEL_46:
  a1.location = v4;
  a1.length = v3;
LABEL_57:
  result.first = a1;
  result.second.length = v9;
  result.second.location = v7;
  return result;
}

uint64_t _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  _BYTE v38[16];
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v42 = a3;
  v43 = a4;
  v6 = a2;
  v7 = a1;
  v8 = Range<>.init(_:in:)(a5, a6, a1, a2);
  if ((v10 & 1) != 0)
  {
LABEL_22:
    v35 = 0xD00000000000001FLL;
    v40 = 0;
    v39 = 674;
    v36 = 0x8000000100E53D60;
    goto LABEL_26;
  }
  v11 = v8;
  v12 = v9;
  v13 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v13 = v7 & 0xFFFFFFFFFFFFLL;
  v14 = 4 * v13;
  v44 = v6;
  v41 = 4 * v13;
LABEL_5:
  if (v11 >= 0x4000)
  {
    v17 = String.index(before:)(v11, v7, v6);
    if (v12 >> 14 >= v17 >> 14)
    {
      v18 = 0;
      v19 = v17;
      v16 = v12;
      do
      {
        v45 = v11;
        v20 = String.subscript.getter(v17, v7, v6);
        v21 = v7;
        v23 = v22;
        __chkstk_darwin(v20);
        v39 = v42;
        swift_bridgeObjectRetain();
        v24 = sub_100B8690C((uint64_t (*)(_QWORD *))sub_100B88394, (uint64_t)v38, v20, v23);
        swift_bridgeObjectRelease();
        __chkstk_darwin(v25);
        v39 = v43;
        v26 = sub_100B86BC0(0, (void (*)(uint64_t *__return_ptr, char *, _QWORD *))sub_100B883B0, (uint64_t)v38, v20, v23);
        v7 = v21;
        v14 = v41;
        swift_bridgeObjectRelease();
        v6 = v44;
        if ((v24 & 1) == 0 || (v26 & 1) != 0)
        {
          v11 = v45;
          if ((v18 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v11 = v19;
          v16 = v12;
          if ((v18 & 1) == 0)
            goto LABEL_5;
        }
LABEL_10:
        v15 = 1;
        if (v14 == v16 >> 14)
          goto LABEL_9;
        v12 = String.index(after:)(v16, v7, v6);
        v18 = 1;
        v17 = v16;
        v19 = v11;
      }
      while (v12 >> 14 >= v11 >> 14);
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  v15 = 0;
  v16 = v12;
LABEL_9:
  if ((v15 & 1) == 0)
    goto LABEL_10;
LABEL_18:
  swift_bridgeObjectRetain();
  v27 = String.Index.samePosition(in:)(v7, v6, v11);
  if ((v28 & 1) != 0)
  {
    v40 = 0;
    v39 = 726;
    v37 = "Lower Bound not found in UTF-16 view";
  }
  else
  {
    v29 = v27;
    v30 = String.Index.samePosition(in:)(v7, v6, v16);
    if ((v31 & 1) == 0)
    {
      v32 = v30;
      v33 = String.UTF16View.distance(from:to:)(15, v29, v7, v6);
      String.UTF16View.distance(from:to:)(v29, v32, v7, v6);
      swift_bridgeObjectRelease();
      return v33;
    }
    v40 = 0;
    v39 = 727;
    v37 = "Upper Bound not found in UTF-16 view";
  }
  v36 = (unint64_t)(v37 - 32) | 0x8000000000000000;
  v35 = 0xD000000000000024;
LABEL_26:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v35, v36, "MusicUtilities/Foundation+Utilities.swift", 41, 2, v39, v40);
  __break(1u);
  return result;
}

uint64_t sub_100B867F4(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007E8C(&qword_1011DD080);
  __chkstk_darwin(v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  sub_100B88DD4(a2, (uint64_t)v10);
  v12 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v12 = CharacterSet.contains(_:)(v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v12 & 1;
}

uint64_t sub_100B8690C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v10 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v10 << 16, a3, a4);
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v21[0] = a3;
          v21[1] = v20;
          v11 = v21;
          v12 = v22;
        }
        else
        {
          v11 = (_QWORD *)v19;
          v12 = v5;
          if ((a3 & 0x1000000000000000) == 0)
            v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
        }
        v13 = _decodeScalar(_:startingAt:)(v11, v12, v10);
      }
      v15 = v14;
      LODWORD(v21[0]) = v13;
      v16 = a1(v21);
      if (v4)
      {
        swift_bridgeObjectRelease(a4);
        return v17 & 1;
      }
      if ((v16 & 1) == 0)
        break;
      v10 += v15;
      if (v10 >= v6)
      {
        swift_bridgeObjectRelease(a4);
        v17 = 1;
        return v17 & 1;
      }
    }
    swift_bridgeObjectRelease(a4);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  return v17 & 1;
}

uint64_t sub_100B86A48@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;

  v8 = type metadata accessor for CharacterSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007E8C(&qword_1011DD080);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v21 - v16;
  LOBYTE(a1) = *a1;
  v18 = *a2;
  sub_100B88DD4(a3, (uint64_t)&v21 - v16);
  if ((a1 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    sub_100B88DD4((uint64_t)v17, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
    {
      v19 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
      v19 = CharacterSet.contains(_:)(v18);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  result = sub_10004FF60((uint64_t)v17, &qword_1011DD080);
  *a4 = v19 & 1;
  return result;
}

uint64_t sub_100B86BC0(char a1, void (*a2)(uint64_t *__return_ptr, char *, _QWORD *), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  BYTE1(v22) = a1;
  v6 = a4 & 0xFFFFFFFFFFFFLL;
  v20 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a5) & 0xF;
  else
    v7 = a4 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v18 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v19 = a5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      if ((a5 & 0x1000000000000000) != 0)
      {
        v14 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v11 << 16, a4, a5);
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v13 = v20;
          v21[0] = a4;
          v21[1] = v19;
          v12 = v21;
        }
        else
        {
          v12 = (_QWORD *)v18;
          v13 = v6;
          if ((a4 & 0x1000000000000000) == 0)
            v12 = (_QWORD *)_StringObject.sharedUTF8.getter(a4, a5);
        }
        v14 = _decodeScalar(_:startingAt:)(v12, v13, v11);
      }
      v16 = v15;
      LODWORD(v21[0]) = v14;
      a2(&v22, (char *)&v22 + 1, v21);
      if (v5)
        break;
      v11 += v16;
      LOBYTE(v16) = v22;
      BYTE1(v22) = v22;
    }
    while (v11 < v7);
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    LOBYTE(v16) = a1;
  }
  return v16 & 1;
}

Swift::Int_optional __swiftcall _NSRange.NSRangeIterator.next()()
{
  uint64_t v0;
  Swift::Int v1;
  Swift::Bool v2;
  uint64_t v3;
  Swift::Int_optional result;

  v1 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    if (__OFADD__(*(_QWORD *)v0, v3))
    {
      __break(1u);
    }
    else if (v1 >= *(_QWORD *)v0 + v3)
    {
      v1 = 0;
      v2 = 1;
    }
    else
    {
      v2 = 0;
      *(_QWORD *)(v0 + 16) = v1 + 1;
    }
  }
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void sub_100B86D3C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
    goto LABEL_6;
  v3 = *(_QWORD *)(v1 + 8);
  if (!__OFADD__(*(_QWORD *)v1, v3))
  {
    if (v2 < *(_QWORD *)v1 + v3)
    {
      v4 = 0;
      *(_QWORD *)(v1 + 16) = v2 + 1;
LABEL_7:
      *(_QWORD *)a1 = v2;
      *(_BYTE *)(a1 + 8) = v4;
      return;
    }
    v2 = 0;
LABEL_6:
    v4 = 1;
    goto LABEL_7;
  }
  __break(1u);
}

void sub_100B86D94(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  if (v2 >= 1)
    v3 = *v1;
  else
    v3 = 0;
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v2 < 1;
}

void sub_100B86DB4()
{
  uint64_t *v0;

  sub_100B87948(*v0, v0[1]);
}

uint64_t sub_100B86DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100B8196C(a1, a2, a3, *v3, v3[1]);
}

double WeakWrapper.value.setter(uint64_t a1)
{
  uint64_t v1;
  double result;

  swift_unknownObjectWeakAssign(v1, a1);
  *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  return result;
}

double (*WeakWrapper.value.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong(v1);
  return sub_100B86E28;
}

double sub_100B86E28(_QWORD *a1)
{
  uint64_t v1;
  double result;

  v1 = *a1;
  swift_unknownObjectWeakAssign(a1[1], *a1);
  *(_QWORD *)&result = swift_unknownObjectRelease(v1).n128_u64[0];
  return result;
}

double WeakWrapper.init(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = swift_unknownObjectWeakInit(a2, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t Int.romanNumeral.getter(uint64_t a1)
{
  unint64_t i;

  if (a1 < 1)
    return 0;
  for (i = 0; i != 13; ++i)
  {
    if (i >= 0xD)
    {
      __break(1u);
      JUMPOUT(0x100B87004);
    }
    if (a1 >= qword_100EE7730[*((char *)&off_1010FF008 + i + 32)])
      __asm { BR              X9 }
  }
  return 0;
}

_UNKNOWN **static RomanNumerals.allCases.getter()
{
  return &off_1010FF008;
}

uint64_t RomanNumerals.arabicNumber.getter(char a1)
{
  return qword_100EE7730[a1];
}

uint64_t RomanNumerals.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B87080 + 4 * byte_100EE73B0[a1]))(77, 0xE100000000000000);
}

uint64_t sub_100B87080()
{
  return 19779;
}

uint64_t sub_100B8708C()
{
  return 68;
}

uint64_t sub_100B87094()
{
  return 17475;
}

uint64_t sub_100B870A0()
{
  return 67;
}

uint64_t sub_100B870A8()
{
  return 17240;
}

uint64_t sub_100B870B4()
{
  return 76;
}

uint64_t sub_100B870BC()
{
  return 19544;
}

uint64_t sub_100B870C8()
{
  return 88;
}

uint64_t sub_100B870D0()
{
  return 22601;
}

uint64_t sub_100B870DC()
{
  return 86;
}

uint64_t sub_100B870E4()
{
  return 22089;
}

uint64_t sub_100B870F0()
{
  return 73;
}

uint64_t sub_100B870FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = RomanNumerals.rawValue.getter(*a1);
  v5 = v4;
  v6 = RomanNumerals.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100B87184()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = RomanNumerals.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100B871E4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = RomanNumerals.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_100B87224(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = RomanNumerals.rawValue.getter(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100B87280@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100B872AC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = RomanNumerals.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100B872D4(_QWORD *a1@<X8>)
{
  *a1 = &off_1010FF008;
}

Swift::Int sub_100B872E4()
{
  Swift::Int result;

  result = sub_100B88C94((uint64_t)&off_1010FF190);
  static NSDirectionalEdgeInsets.Edge.all = result;
  return result;
}

uint64_t *NSDirectionalEdgeInsets.Edge.all.unsafeMutableAddressor()
{
  if (qword_1011DC328 != -1)
    swift_once(&qword_1011DC328, sub_100B872E4);
  return &static NSDirectionalEdgeInsets.Edge.all;
}

uint64_t static NSDirectionalEdgeInsets.Edge.all.getter()
{
  if (qword_1011DC328 != -1)
    swift_once(&qword_1011DC328, sub_100B872E4);
  return swift_bridgeObjectRetain();
}

double NSDirectionalEdgeInsets.init(edge:length:)(uint64_t a1, double a2)
{
  double v4;

  if (sub_10075C720(0, a1))
    v4 = a2;
  else
    v4 = 0.0;
  sub_10075C720(1u, a1);
  sub_10075C720(2u, a1);
  sub_10075C720(3u, a1);
  swift_bridgeObjectRelease(a1);
  return v4;
}

id sub_100B8742C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  __n128 v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithPattern:options:error:", v6, a3, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

uint64_t sub_100B87504(uint64_t a1, uint64_t a2)
{
  return sub_100B8752C(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10079CDF0);
}

uint64_t sub_100B87518(uint64_t a1, uint64_t a2)
{
  return sub_100B8752C(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10079CDF0);
}

uint64_t sub_100B8752C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  uint64_t v4;
  Swift::Int v8;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v4 + 40));
  a3(v11, a1, a2);
  v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

unint64_t sub_100B875A4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40), &type metadata for Substring, &protocol witness table for Substring);
  return sub_100B876CC(a1, a2, a3, a4, v9);
}

unint64_t sub_100B8762C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v3 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v9, a1, a2);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v7 = Hasher._finalize()();
  return sub_100B87804(a1, a2, a3, v7);
}

unint64_t sub_100B876CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  char v34;
  int v35;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v12 = (unint64_t *)(v11 + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v13 >> 16;
    v18 = v14 >> 16;
    v19 = a1 >> 16;
    v20 = a2 >> 16;
    v21 = v15 == a3 && v16 == a4;
    v22 = v21 && v17 == v19;
    if (!v22 || v18 != v20)
    {
      v34 = 0;
      if ((_stringCompareInternal(_:_:_:_:expecting:)(v15, v16, v17, v18, a3, a4, v19, v20, v34) & 1) == 0)
      {
        v24 = ~v7;
        do
        {
          v8 = (v8 + 1) & v24;
          if (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
            break;
          v25 = (_QWORD *)(v11 + 32 * v8);
          v26 = v25[2];
          v27 = v25[3];
          v28 = *v25 >> 16;
          v29 = v25[1] >> 16;
          v30 = v26 == a3 && v27 == a4;
          v31 = v30 && v28 == v19;
          if (v31 && v29 == v20)
            break;
          LOBYTE(v35) = 0;
        }
        while ((_stringCompareInternal(_:_:_:_:expecting:)(v26, v27, v28, v29, a3, a4, v19, v20, v35) & 1) == 0);
      }
    }
  }
  return v8;
}

unint64_t sub_100B87804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  id v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  BOOL v17;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v8 = v4;
    v11 = ~v6;
    do
    {
      v14 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v7);
      v15 = v14[1];
      v16 = (void *)v14[2];
      if (v15)
      {
        if (a2)
        {
          v17 = *v14 == a1 && v15 == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v14[1], a1, a2, 0) & 1) != 0)
            goto LABEL_3;
        }
      }
      else if (!a2)
      {
        v15 = 0;
LABEL_3:
        sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
        swift_bridgeObjectRetain();
        v12 = v16;
        v13 = static NSObject.== infix(_:_:)(v12, a3);

        swift_bridgeObjectRelease(v15);
        if ((v13 & 1) != 0)
          return v7;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

void sub_100B87948(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;

  v2 = _swiftEmptyArrayStorage;
  v22 = a2 < 1;
  if (a2 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = a1;
    if (__OFADD__(a1, a2))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v4 = 0;
    if (a1 <= a1 + a2)
      v5 = a1 + a2;
    else
      v5 = a1;
    v6 = &_swiftEmptyArrayStorage[4];
    while (v5 != v3)
    {
      if (!v4)
      {
        v7 = v2[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1)
          v9 = 1;
        else
          v9 = v8;
        v10 = sub_100007E8C(&qword_1011DCF38);
        v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
        v12 = j__malloc_size_0(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 25;
        v14 = v13 >> 3;
        v11[2] = v9;
        v11[3] = 2 * (v13 >> 3);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[v16 + 4])
            memmove(v11 + 4, v2 + 4, 8 * v16);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + 8 * v16);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        swift_release();
        v2 = v11;
      }
      v18 = __OFSUB__(v4--, 1);
      if (v18)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      *v6++ = v3++;
      if (v22)
        break;
    }
  }
  v19 = v2[3];
  if (v19 < 2)
    return;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v4);
  v21 = v20 - v4;
  if (v18)
  {
LABEL_35:
    __break(1u);
    return;
  }
  v2[2] = v21;
}

uint64_t sub_100B87AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v6 = sub_100B88E1C();
  swift_bridgeObjectRetain();
  v7 = String.init<A>(_:)(&v17, &type metadata for Substring, &protocol witness table for Substring, v6);
  v9 = v7;
  v10 = v8;
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v12 = HIBYTE(v10) & 0xF;
    v17 = v9;
    v18 = v10 & 0xFFFFFFFFFFFFFFLL;
    v11 = (unsigned __int8 *)&v17;
    goto LABEL_7;
  }
  v9 = sub_100B87E30(v7, v8);
  v14 = v13;
  swift_bridgeObjectRelease();
  v10 = v14;
  if ((v14 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v9 & 0x1000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v10);
  }
LABEL_7:
  v15 = sub_100B87BB0(v11, v12, a5);
  swift_bridgeObjectRelease();
  return v15 | ((((unint64_t)v15 >> 32) & 1) << 32);
}

unsigned __int8 *sub_100B87BB0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100B87E30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v8 = sub_100B87EAC(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100B87EAC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001AFDB8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100B9E424(v12, 0);
      v5 = sub_1001AFEA4((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release();
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

BOOL sub_100B87FF0(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String_optional v16;
  void *object;
  _BOOL8 v18;

  v10 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v10 == a3 >> 14)
  {
LABEL_10:
    object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease(a2);
    v18 = object == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = a3;
    while (1)
    {
      while (1)
      {
        v13 = Substring.subscript.getter(v11, a3, a4, a5, a6);
        v15 = v14;
        v11 = Substring.index(after:)(v11, a3, a4, a5, a6);
        v16 = String.Iterator.next()();
        if (!v16.value._object)
        {
          swift_bridgeObjectRelease(a6);
          swift_bridgeObjectRelease(v15);
          v18 = 1;
          goto LABEL_13;
        }
        if (v13 != v16.value._countAndFlagsBits || v16.value._object != v15)
          break;
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v16.value._object);
        if (v10 == v11 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease(a6);
          goto LABEL_10;
        }
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16.value._countAndFlagsBits, v16.value._object, 0);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16.value._object);
      if ((v12 & 1) == 0)
        break;
      if (v10 == v11 >> 14)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(a6);
    v18 = 0;
LABEL_13:
    object = a2;
  }
  swift_bridgeObjectRelease(object);
  return v18;
}

uint64_t sub_100B88184(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_100B883C8((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

void sub_100B88254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_100B82E64(v9, v16, a4, a5);
}

unint64_t sub_100B8830C()
{
  unint64_t result;

  result = qword_1011DD070;
  if (!qword_1011DD070)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1011DD070);
  }
  return result;
}

unint64_t sub_100B88350()
{
  unint64_t result;

  result = qword_1011DD090;
  if (!qword_1011DD090)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _NSRange.ConversionError, &type metadata for _NSRange.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1011DD090);
  }
  return result;
}

uint64_t sub_100B88394(unsigned int *a1)
{
  uint64_t v1;

  return sub_100B867F4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100B883B0@<X0>(_BYTE *a1@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return sub_100B86A48(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_100B883C8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1001AF558(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1001AF558(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1001AF558(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unint64_t _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1010FF038, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

unint64_t sub_100B88838()
{
  unint64_t result;

  result = qword_1011DD098;
  if (!qword_1011DD098)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _NSRange.ConversionError, &type metadata for _NSRange.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1011DD098);
  }
  return result;
}

unint64_t sub_100B88880()
{
  unint64_t result;

  result = qword_1011DD0A0;
  if (!qword_1011DD0A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _NSRange.NSRangeIterator, &type metadata for _NSRange.NSRangeIterator);
    atomic_store(result, (unint64_t *)&qword_1011DD0A0);
  }
  return result;
}

unint64_t sub_100B888C8()
{
  unint64_t result;

  result = qword_1011DD0A8;
  if (!qword_1011DD0A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RomanNumerals, &type metadata for RomanNumerals);
    atomic_store(result, (unint64_t *)&qword_1011DD0A8);
  }
  return result;
}

uint64_t sub_100B8890C()
{
  return sub_100049F28(&qword_1011DD0B0, &qword_1011DD0B8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100B8893C()
{
  unint64_t result;

  result = qword_1011DD0C0[0];
  if (!qword_1011DD0C0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSDirectionalEdgeInsets.Edge, &type metadata for NSDirectionalEdgeInsets.Edge);
    atomic_store(result, qword_1011DD0C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Hexadecimal()
{
  return &type metadata for Data.Hexadecimal;
}

_BYTE *initializeBufferWithCopyOfBuffer for KeyboardObserver.Option(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t _s15ConversionErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100B889E8 + 4 * byte_100EE73C2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100B88A1C + 4 * byte_100EE73BD[v4]))();
}

uint64_t sub_100B88A1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B88A24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B88A2CLL);
  return result;
}

uint64_t sub_100B88A38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B88A40);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100B88A44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B88A4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.ConversionError()
{
  return &type metadata for _NSRange.ConversionError;
}

__n128 _s15NSRangeIteratorVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s15NSRangeIteratorVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s15NSRangeIteratorVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.NSRangeIterator()
{
  return &type metadata for _NSRange.NSRangeIterator;
}

uint64_t type metadata accessor for WeakWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakWrapper);
}

uint64_t storeEnumTagSinglePayload for RomanNumerals(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_100B88B48 + 4 * byte_100EE73CC[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100B88B7C + 4 * byte_100EE73C7[v4]))();
}

uint64_t sub_100B88B7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B88B84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B88B8CLL);
  return result;
}

uint64_t sub_100B88B98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B88BA0);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100B88BA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B88BAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RomanNumerals()
{
  return &type metadata for RomanNumerals;
}

uint64_t _s4EdgeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100B88C14 + 4 * byte_100EE73D6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100B88C48 + 4 * byte_100EE73D1[v4]))();
}

uint64_t sub_100B88C48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B88C50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B88C58);
  return result;
}

uint64_t sub_100B88C64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B88C6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100B88C70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B88C78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSDirectionalEdgeInsets.Edge()
{
  return &type metadata for NSDirectionalEdgeInsets.Edge;
}

Swift::Int sub_100B88C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100007E8C(&qword_1011DD148);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100B88DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DD080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100B88E1C()
{
  unint64_t result;

  result = qword_1011DD150;
  if (!qword_1011DD150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1011DD150);
  }
  return result;
}

BOOL static MPModelObject.LoggingComponent.__derived_enum_less_than(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

void MPModelObject.humanDescription(including:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void **v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  uint64_t (*v16)();
  uint64_t v17;
  _QWORD v18[2];

  v2 = v1;
  v12 = 0;
  v13 = 0xE000000000000000;
  ObjectType = swift_getObjectType();
  v5._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v18[0] = v1;
  _print_unlocked<A, B>(_:_:)(v18, &v12, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v18[0] = v12;
  v18[1] = v13;
  v7 = (void *)objc_opt_self(MPModelObject);
  v8 = (_QWORD *)swift_allocObject(&unk_101100BB8, 40, 7);
  v8[2] = a1;
  v8[3] = v18;
  v8[4] = v2;
  v9 = swift_allocObject(&unk_101100BE0, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100B8930C;
  *(_QWORD *)(v9 + 24) = v8;
  v16 = sub_10010942C;
  v17 = v9;
  v12 = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = sub_10046D7B4;
  v15 = &unk_101100BF8;
  v10 = _Block_copy(&v12);
  swift_bridgeObjectRetain();
  v11 = v2;
  swift_retain();
  objc_msgSend(v7, "performWithoutEnforcement:", v10, swift_release().n128_f64[0]);
  _Block_release(v10);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v9, "", 136, 24, 49, 1);
  swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  else
    swift_release();
}

double sub_100B8903C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  objc_class *ObjCClassFromMetadata;
  objc_ivar *InstanceVariable;
  id v27;
  id v28;
  uint64_t v29;
  Swift::String v30;
  double result;
  _OWORD v32[2];
  _QWORD v33[2];

  v4 = swift_bridgeObjectRetain();
  v5 = sub_100B998E4(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v32[0] = v5;
  sub_100B8A214((char **)v32);
  v6 = *(_QWORD *)&v32[0];
  v7 = *(_QWORD *)(*(_QWORD *)&v32[0] + 16);
  if (v7)
  {
    v8.n128_u64[0] = swift_retain().n128_u64[0];
    v9 = 0;
    while (*(_BYTE *)(v6 + v9 + 32))
    {
      if (*(_BYTE *)(v6 + v9 + 32) == 1)
      {
        *(_QWORD *)&v32[0] = 23328;
        *((_QWORD *)&v32[0] + 1) = 0xE200000000000000;
        v19 = objc_msgSend(a3, "shortDescription", v8.n128_f64[0]);
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        v23._countAndFlagsBits = v20;
        v23._object = v22;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._countAndFlagsBits = 93;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        goto LABEL_4;
      }
      sub_100B8A27C();
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      InstanceVariable = class_getInstanceVariable(ObjCClassFromMetadata, "_storage");
      if (!InstanceVariable)
        goto LABEL_6;
      strcpy((char *)v33, " properties=");
      BYTE5(v33[1]) = 0;
      HIWORD(v33[1]) = -5120;
      v27 = object_getIvar(a3, InstanceVariable);
      if (v27)
      {
        v28 = v27;
        _bridgeAnyObjectToAny(_:)(v32, v27);
        swift_unknownObjectRelease(v28);
      }
      else
      {
        memset(v32, 0, sizeof(v32));
      }
      v29 = sub_100007E8C(&qword_1011DCA40);
      v30._countAndFlagsBits = String.init<A>(describing:)(v32, v29);
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v16 = v33[0];
      v17 = v33[1];
LABEL_5:
      v18 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      v8 = swift_bridgeObjectRelease();
LABEL_6:
      if (v7 == ++v9)
      {
        swift_release_n(v6, 2, v8);
        return result;
      }
    }
    strcpy((char *)v32, " identifiers=");
    HIWORD(v32[0]) = -4864;
    v10 = objc_msgSend(a3, "identifiers");
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);

    swift_bridgeObjectRelease();
LABEL_4:
    v17 = *((_QWORD *)&v32[0] + 1);
    v16 = *(_QWORD *)&v32[0];
    goto LABEL_5;
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100B892E0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

double sub_100B8930C()
{
  uint64_t v0;

  return sub_100B8903C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100B89318()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B89328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B89338(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100B89344()
{
  unint64_t result;

  result = qword_1011DD168;
  if (!qword_1011DD168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MPModelObject.LoggingComponent, &type metadata for MPModelObject.LoggingComponent);
    atomic_store(result, (unint64_t *)&qword_1011DD168);
  }
  return result;
}

uint64_t _s16LoggingComponentOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100B893D4 + 4 * byte_100EE77A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100B89408 + 4 * byte_100EE77A0[v4]))();
}

uint64_t sub_100B89408(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B89410(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B89418);
  return result;
}

uint64_t sub_100B89424(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B8942CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100B89430(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B89438(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.LoggingComponent()
{
  return &type metadata for MPModelObject.LoggingComponent;
}

uint64_t sub_100B8948C()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0xED0000676E6F5320;
    v4 = 0x64656C7469746E55;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v1, "album");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "shortDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x206D75626C41203BLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE800000000000000);
  }
  v17 = objc_msgSend(v1, "artist");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shortDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 0x747369747241203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease(0xE900000000000020);
  }
  return 0x22203A656C746954;
}

uint64_t sub_100B89854()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x8000000100E2C360;
    v3 = 0xD000000000000011;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_100B89918()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t (*v18)@<X0>(uint64_t *@<X8>);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v20 = 0x203A65707954;
  v21 = 0xE600000000000000;
  v1 = swift_allocObject(&unk_101100CC0, 24, 7);
  *(_QWORD *)(v1 + 16) = v0;
  v2 = swift_allocObject(&unk_101100CE8, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_100B8A1E0;
  *(_QWORD *)(v2 + 24) = v1;
  v18 = sub_10027DAEC;
  v19 = v2;
  v3 = v0;
  v4 = sub_100007E8C(&qword_1011DD170);
  v5._countAndFlagsBits = String.init<A>(describing:)(&v18, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2236475;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7 = objc_msgSend(v3, "anyObject", v18, v19);
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "shortDescription");

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v8 = v11;

  }
  else
  {
    v10 = 0;
  }
  v12 = Optional<A>.description.getter(v10, v8);
  v14 = v13;
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 34;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v20;
}

uint64_t sub_100B89C0C()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  v1 = v0;
  v2 = objc_msgSend(v0, "title");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

  }
  else
  {
    v6 = (void *)0x8000000100E53DC0;
    v4 = 0xD000000000000010;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v1, "show");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "shortDescription");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x20776F6853203BLL;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease(0xE700000000000000);
  }
  v17 = objc_msgSend(v1, "season");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "shortDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 0x6E6F73616553203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease(0xE900000000000020);
  }
  return 0x22203A656C746954;
}

id sub_100B89EEC(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_100B89F44()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = objc_msgSend(v0, "name");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x8000000100E53DA0;
    v3 = 0xD000000000000010;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_100B8A1BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100B8A1E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "type");
}

uint64_t sub_100B8A1F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100B8A214(char **a1)
{
  char *v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100B9A698((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_100B8A2B8(v4);
  *a1 = v2;
}

unint64_t sub_100B8A27C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD178;
  if (!qword_1011DD178)
  {
    v1 = objc_opt_self(MPModelObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DD178);
  }
  return result;
}

void sub_100B8A2B8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  char v20;
  Swift::Int v21;
  _BYTE *v22;
  unsigned int v23;
  Swift::Int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  unsigned __int8 *v97;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(unsigned __int8 *)(v79 + i);
        v82 = v78;
        do
        {
          v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_142;
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v94 = v4;
    v95 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for MPModelObject.LoggingComponent);
      *(_QWORD *)(v7 + 16) = v6;
      v3 = v95;
      v93 = (_QWORD *)v7;
      v97 = (unsigned __int8 *)(v7 + 32);
LABEL_13:
      v9 = 0;
      v92 = v2;
      v10 = *v2;
      v11 = (char *)_swiftEmptyArrayStorage;
      v96 = *v2;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(unsigned __int8 *)(v10 + v9);
          v15 = *(unsigned __int8 *)(v10 + v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = v14;
            while (1)
            {
              v17 = *(unsigned __int8 *)(v10 + v9);
              if (v14 < v15 == v17 >= v16)
                break;
              ++v9;
              v16 = v17;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v18 = v9 - 1;
              v19 = v13;
              do
              {
                if (v19 != v18)
                {
                  if (!v10)
                    goto LABEL_145;
                  v20 = *(_BYTE *)(v10 + v19);
                  *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
                  *(_BYTE *)(v10 + v18) = v20;
                }
                v59 = ++v19 < v18--;
              }
              while (v59);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v94)
          {
            v21 = v13 + v94;
            if (__OFADD__(v13, v94))
              goto LABEL_140;
            if (v21 >= v3)
              v21 = v3;
            if (v21 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return;
            }
            if (v9 != v21)
            {
              v22 = (_BYTE *)(v10 + v9);
              do
              {
                v23 = *(unsigned __int8 *)(v10 + v9);
                v24 = v13;
                v25 = v22;
                do
                {
                  v26 = *(v25 - 1);
                  if (v23 >= v26)
                    break;
                  if (!v10)
                    goto LABEL_143;
                  *v25 = v26;
                  *--v25 = v23;
                  ++v24;
                }
                while (v9 != v24);
                ++v9;
                ++v22;
              }
              while (v9 != v21);
              v9 = v21;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
          v11 = sub_100B9A58C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v28 = *((_QWORD *)v11 + 2);
        v27 = *((_QWORD *)v11 + 3);
        v12 = v28 + 1;
        v10 = v96;
        if (v28 >= v27 >> 1)
        {
          v77 = sub_100B9A58C((char *)(v27 > 1), v28 + 1, 1, v11);
          v10 = v96;
          v11 = v77;
        }
        *((_QWORD *)v11 + 2) = v12;
        v29 = v11 + 32;
        v30 = &v11[16 * v28 + 32];
        *(_QWORD *)v30 = v13;
        *((_QWORD *)v30 + 1) = v9;
        if (v28)
        {
          while (1)
          {
            v31 = v12 - 1;
            if (v12 >= 4)
            {
              v36 = &v29[16 * v12];
              v37 = *((_QWORD *)v36 - 8);
              v38 = *((_QWORD *)v36 - 7);
              v42 = __OFSUB__(v38, v37);
              v39 = v38 - v37;
              if (v42)
                goto LABEL_120;
              v41 = *((_QWORD *)v36 - 6);
              v40 = *((_QWORD *)v36 - 5);
              v42 = __OFSUB__(v40, v41);
              v34 = v40 - v41;
              v35 = v42;
              if (v42)
                goto LABEL_121;
              v43 = v12 - 2;
              v44 = &v29[16 * v12 - 32];
              v46 = *(_QWORD *)v44;
              v45 = *((_QWORD *)v44 + 1);
              v42 = __OFSUB__(v45, v46);
              v47 = v45 - v46;
              if (v42)
                goto LABEL_122;
              v42 = __OFADD__(v34, v47);
              v48 = v34 + v47;
              if (v42)
                goto LABEL_124;
              if (v48 >= v39)
              {
                v66 = &v29[16 * v31];
                v68 = *(_QWORD *)v66;
                v67 = *((_QWORD *)v66 + 1);
                v42 = __OFSUB__(v67, v68);
                v69 = v67 - v68;
                if (v42)
                  goto LABEL_130;
                v59 = v34 < v69;
                goto LABEL_84;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v60 = *((_QWORD *)v11 + 4);
                v61 = *((_QWORD *)v11 + 5);
                v42 = __OFSUB__(v61, v60);
                v53 = v61 - v60;
                v54 = v42;
                goto LABEL_78;
              }
              v33 = *((_QWORD *)v11 + 4);
              v32 = *((_QWORD *)v11 + 5);
              v42 = __OFSUB__(v32, v33);
              v34 = v32 - v33;
              v35 = v42;
            }
            if ((v35 & 1) != 0)
              goto LABEL_123;
            v43 = v12 - 2;
            v49 = &v29[16 * v12 - 32];
            v51 = *(_QWORD *)v49;
            v50 = *((_QWORD *)v49 + 1);
            v52 = __OFSUB__(v50, v51);
            v53 = v50 - v51;
            v54 = v52;
            if (v52)
              goto LABEL_125;
            v55 = &v29[16 * v31];
            v57 = *(_QWORD *)v55;
            v56 = *((_QWORD *)v55 + 1);
            v42 = __OFSUB__(v56, v57);
            v58 = v56 - v57;
            if (v42)
              goto LABEL_127;
            if (__OFADD__(v53, v58))
              goto LABEL_129;
            if (v53 + v58 >= v34)
            {
              v59 = v34 < v58;
LABEL_84:
              if (v59)
                v31 = v43;
              goto LABEL_86;
            }
LABEL_78:
            if ((v54 & 1) != 0)
              goto LABEL_126;
            v62 = &v29[16 * v31];
            v64 = *(_QWORD *)v62;
            v63 = *((_QWORD *)v62 + 1);
            v42 = __OFSUB__(v63, v64);
            v65 = v63 - v64;
            if (v42)
              goto LABEL_128;
            if (v65 < v53)
              goto LABEL_15;
LABEL_86:
            v70 = v31 - 1;
            if (v31 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v71 = &v29[16 * v70];
            v72 = *(_QWORD *)v71;
            v73 = v29;
            v74 = &v29[16 * v31];
            v75 = *((_QWORD *)v74 + 1);
            sub_100B8A8EC((unsigned __int8 *)(v10 + *(_QWORD *)v71), (unsigned __int8 *)(v10 + *(_QWORD *)v74), v10 + v75, v97);
            if (v1)
              goto LABEL_114;
            if (v75 < v72)
              goto LABEL_117;
            if (v31 > *((_QWORD *)v11 + 2))
              goto LABEL_118;
            *(_QWORD *)v71 = v72;
            *(_QWORD *)&v73[16 * v70 + 8] = v75;
            v76 = *((_QWORD *)v11 + 2);
            if (v31 >= v76)
              goto LABEL_119;
            v12 = v76 - 1;
            memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
            v29 = v73;
            *((_QWORD *)v11 + 2) = v76 - 1;
            v10 = v96;
            if (v76 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v3 = v95;
        if (v9 >= v95)
        {
          v2 = v92;
          v8 = v93;
          goto LABEL_103;
        }
      }
    }
    v8 = _swiftEmptyArrayStorage;
    v97 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      v93 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    v12 = _swiftEmptyArrayStorage[2];
    v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
    v93 = v8;
    if (v12 >= 2)
    {
      v84 = *v2;
      do
      {
        v85 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v84)
          goto LABEL_146;
        v86 = v11;
        v87 = v11 + 32;
        v88 = *(_QWORD *)&v11[16 * v85 + 32];
        v89 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_100B8A8EC((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(_QWORD *)&v87[16 * v12 - 16]), v84 + v89, v97);
        if (v1)
          break;
        if (v89 < v88)
          goto LABEL_133;
        if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
          v86 = sub_100B9A684((uint64_t)v86);
        if (v85 >= *((_QWORD *)v86 + 2))
          goto LABEL_134;
        v90 = &v86[16 * v85 + 32];
        *(_QWORD *)v90 = v88;
        *((_QWORD *)v90 + 1) = v89;
        v91 = *((_QWORD *)v86 + 2);
        if (v12 > v91)
          goto LABEL_135;
        memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
        v11 = v86;
        *((_QWORD *)v86 + 2) = v91 - 1;
        v12 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    v93[2] = 0;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100B8A8EC(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned int v17;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = a3 - (_QWORD)__src;
  if (__src - __dst < (uint64_t)(a3 - (_QWORD)__src))
  {
    if (a4 != __dst || __src <= a4)
      memmove(a4, __dst, v8);
    v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      v6 = v7;
      if (v7 != v4)
        goto LABEL_38;
      goto LABEL_37;
    }
    while (1)
    {
      v11 = *v6;
      if (v11 >= *v4)
        break;
      v12 = v7 == v6++;
      if (!v12)
        goto LABEL_12;
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    LOBYTE(v11) = *v4;
    v12 = v7 == v4++;
    if (v12)
      goto LABEL_13;
LABEL_12:
    *v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4)
    memmove(a4, __src, a3 - (_QWORD)__src);
  v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4)
      goto LABEL_38;
    goto LABEL_37;
  }
  v13 = (unsigned __int8 *)(a3 - 1);
  v14 = v6;
  while (1)
  {
    v15 = v13 + 1;
    v17 = *--v14;
    v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      v16 = *(v10 - 1);
      v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--)
        goto LABEL_32;
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7)
      break;
    --v13;
    v6 = v14;
    if (v10 <= v4)
    {
      v6 = v14;
      goto LABEL_36;
    }
  }
  v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10)
    goto LABEL_38;
  return 1;
}

void sub_100B8AAC0(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  v3 = sub_100B7FD98(isUniquelyReferenced_nonNull_native, v12, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_arrayInitWithCopy(&v3[16 * v8 + 32]);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v9 = *((_QWORD *)v3 + 2);
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    *((_QWORD *)v3 + 2) = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_100B8ABA8(uint64_t a1)
{
  size_t *v1;
  uint64_t v2;
  size_t v3;
  int64_t v4;
  int64_t v5;
  size_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100B7FE98(isUniquelyReferenced_nonNull_native, v14, 1, (char *)v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for URLQueryItem(0);
  if (v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_arrayInitWithCopy(v3+ ((*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v8);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *(_QWORD *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

char *String.components(wrappedToLineLength:bullet:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a4;
  v26 = a5;
  static CharacterSet.newlines.getter(v14);
  v15 = sub_100B8830C();
  v16 = StringProtocol.components(separatedBy:)(v13, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v17 = (char *)_swiftEmptyArrayStorage;
  v24 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      v20 = *v19;
      v25 = *(v19 - 1);
      v26 = v20;
      swift_bridgeObjectRetain();
      sub_100B8ADF8(&v24, &v25, a2, a3, a1, &v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v23;
      v24 = v23;
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v17;
}

void sub_100B8ADF8(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  double v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  __n128 v27;
  char **v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  Swift::String v33;
  void *v34;
  __n128 v35;
  char *v36;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::String v52;
  uint64_t v53;
  Swift::String v54;
  void *v55;
  Swift::String v56;
  void *v57;
  Swift::String v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  Swift::String v84;
  char v85[24];
  Swift::String v86;
  char *v87;

  v79 = a5;
  v75 = a4;
  v11 = type metadata accessor for CharacterSet(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v17 = *a2;
  v16 = a2[1];
  v87 = v15;
  v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v18 = v17 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v72 = a6;
    v73 = v6;
    v19 = objc_allocWithZone((Class)NSScanner);
    v78 = v11;
    v20 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v22 = swift_bridgeObjectRelease(v16).n128_u64[0];
    v23 = v20;
    v24 = v78;
    v25 = objc_msgSend(v23, "initWithString:", v21, v22);

    v74 = a3;
    v86._countAndFlagsBits = sub_100B8B378(a3, v75, (uint64_t)&v87);
    v86._object = v26;
    v27 = swift_beginAccess(&v87, v85, 1, 0);
    static CharacterSet.whitespaces.getter(v27);
    v28 = (char **)NSScanner.scanUpToCharacters(from:)(v14);
    v30 = v29;
    v31 = *(void (**)(char *, uint64_t))(v12 + 8);
    v31(v14, v24);
    if (v30)
    {
      v32 = HIBYTE(v75) & 0xF;
      if ((v75 & 0x2000000000000000) == 0)
        v32 = v74 & 0xFFFFFFFFFFFFLL;
      v76 = v25;
      v77 = v32;
      while (1)
      {
        object = v86._object;
        countAndFlagsBits = v86._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v39 = String.count.getter(countAndFlagsBits, object);
        swift_bridgeObjectRelease(object);
        v40 = String.count.getter(v28, v30);
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
          break;
        v42 = __OFADD__(v41, 1);
        v43 = v41 + 1;
        if (v42)
          goto LABEL_39;
        if (v43 <= v79)
        {
          v84._countAndFlagsBits = (uint64_t)v28;
          v84._object = v30;
          swift_bridgeObjectRetain();
          v33._countAndFlagsBits = 32;
          v33._object = (void *)0xE100000000000000;
          String.append(_:)(v33);
          swift_bridgeObjectRelease(v30);
          v34 = v84._object;
          String.append(_:)(v84);
          v35 = swift_bridgeObjectRelease(v34);
        }
        else
        {
          v84._countAndFlagsBits = countAndFlagsBits;
          v84._object = object;
          v82 = 606827356;
          v83 = 0xE400000000000000;
          v80 = 0;
          v81 = 0xE000000000000000;
          v44 = sub_100B8830C();
          countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v82, &v80, 1024, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v44, v44, v44);
          v39 = v45;
          swift_bridgeObjectRelease(object);
          v46 = v87;
          if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0)
            v46 = sub_100B7FD98(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
          v48 = *((_QWORD *)v46 + 2);
          v47 = *((_QWORD *)v46 + 3);
          if (v48 >= v47 >> 1)
            v46 = sub_100B7FD98((char *)(v47 > 1), v48 + 1, 1, v46);
          *((_QWORD *)v46 + 2) = v48 + 1;
          v49 = &v46[16 * v48];
          *((_QWORD *)v49 + 4) = countAndFlagsBits;
          *((_QWORD *)v49 + 5) = v39;
          v87 = v46;
          if (v77)
          {
            v50 = String.count.getter(v74, v75);
            v51 = v50 + 1;
            v25 = v76;
            v24 = v78;
            if (__OFADD__(v50, 1))
              goto LABEL_40;
            v52._countAndFlagsBits = 32;
            v52._object = (void *)0xE100000000000000;
            v54 = String.init(repeating:count:)(v52, v51);
            v53 = v54._countAndFlagsBits;
            v55 = v54._object;
          }
          else
          {
            v53 = 0;
            v55 = (void *)0xE000000000000000;
            v25 = v76;
            v24 = v78;
          }
          v84._countAndFlagsBits = v53;
          v84._object = v55;
          swift_bridgeObjectRetain();
          v56._countAndFlagsBits = (uint64_t)v28;
          v56._object = v30;
          String.append(_:)(v56);
          swift_bridgeObjectRelease(v55);
          swift_bridgeObjectRelease(v30);
          v57 = v84._object;
          swift_bridgeObjectRetain();
          v58._countAndFlagsBits = 32;
          v58._object = (void *)0xE100000000000000;
          String.append(_:)(v58);
          v35 = swift_bridgeObjectRelease(v57);
          v86 = v84;
        }
        static CharacterSet.whitespaces.getter(v35);
        v28 = (char **)NSScanner.scanUpToCharacters(from:)(v14);
        v30 = v36;
        v31(v14, v24);
        if (!v30)
          goto LABEL_22;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    else
    {
LABEL_22:
      v59 = v86._object;
      v60 = ((unint64_t)v86._object >> 56) & 0xF;
      if (((uint64_t)v86._object & 0x2000000000000000) == 0)
        v60 = v86._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (!v60)
      {

        swift_bridgeObjectRelease(v59);
        v28 = v72;
LABEL_37:
        *v28 = v87;
        return;
      }
      v84 = v86;
      v82 = 606827356;
      v83 = 0xE400000000000000;
      v80 = 0;
      v81 = 0xE000000000000000;
      v61 = sub_100B8830C();
      v39 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v82, &v80, 1024, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v61, v61, v61);
      countAndFlagsBits = v62;
      swift_bridgeObjectRelease(v59);
      v30 = v87;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v87);
      v28 = v72;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_26:
        v65 = *((_QWORD *)v30 + 2);
        v64 = *((_QWORD *)v30 + 3);
        if (v65 >= v64 >> 1)
          v30 = sub_100B7FD98((char *)(v64 > 1), v65 + 1, 1, v30);
        *((_QWORD *)v30 + 2) = v65 + 1;
        v66 = &v30[16 * v65];
        *((_QWORD *)v66 + 4) = v39;
        *((_QWORD *)v66 + 5) = countAndFlagsBits;
        v87 = v30;

        goto LABEL_37;
      }
    }
    v30 = sub_100B7FD98(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    goto LABEL_26;
  }
  v67 = *((_QWORD *)v15 + 2);
  swift_bridgeObjectRetain();
  if (v67)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_100B7FD98(0, v67 + 1, 1, v15);
    v69 = *((_QWORD *)v15 + 2);
    v68 = *((_QWORD *)v15 + 3);
    if (v69 >= v68 >> 1)
      v15 = sub_100B7FD98((char *)(v68 > 1), v69 + 1, 1, v15);
    *((_QWORD *)v15 + 2) = v69 + 1;
    v70 = &v15[16 * v69];
    *((_QWORD *)v70 + 4) = v17;
    *((_QWORD *)v70 + 5) = v16;
  }
  *a6 = v15;
}

uint64_t sub_100B8B378(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  Swift::Int v8;
  Swift::String v9;
  Swift::String v10;
  _BYTE v11[24];

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  swift_beginAccess(a3, v11, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)a3 + 16))
  {
    result = String.count.getter(a1, a2);
    v8 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v9._countAndFlagsBits = 32;
      v9._object = (void *)0xE100000000000000;
      return String.init(repeating:count:)(v9, v8)._countAndFlagsBits;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = 32;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return a1;
  }
  return result;
}

char *Array<A>.asciiBoxed()(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  Swift::String v38;
  void *object;
  unint64_t v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v65 = *(_QWORD *)(a1 + 16);
  if (v65)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v63 = v3;
    do
    {
      v66 = *(_QWORD **)(v3 + 8 * v4);
      v6 = v66[2];
      if (v6)
      {
        v8 = v66[4];
        v7 = v66[5];
        swift_bridgeObjectRetain();
        v9 = v6 - 1;
        if (v9)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v10 = v66 + 7;
          v1 = v7;
          do
          {
            v11 = *(v10 - 1);
            v12 = *v10;
            swift_bridgeObjectRetain();
            v2 = String.count.getter(v8, v1);
            v13 = String.count.getter(v11, v12);
            v10 += 2;
            v14 = v2 < v13;
            if (v2 < v13)
              v15 = v7;
            else
              v15 = v12;
            if (v14)
              v7 = v12;
            if (v14)
              v8 = v11;
            if (v14)
              v1 = v12;
            swift_bridgeObjectRelease(v15);
            --v9;
          }
          while (v9);
          swift_bridgeObjectRelease(v66);
          v7 = v1;
          v3 = v63;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v16 = String.count.getter(v8, v7);
        swift_bridgeObjectRelease(v66);
        swift_bridgeObjectRelease(v7);
        if (v16 > v5)
          v5 = v16;
      }
      else
      {
        v5 &= ~(v5 >> 63);
      }
      ++v4;
    }
    while (v4 != v65);
    swift_bridgeObjectRelease(a1);
    v17 = v5 + 2;
    if (__OFADD__(v5, 2))
    {
      __break(1u);
      goto LABEL_51;
    }
  }
  else
  {
    v5 = 0;
    v17 = 2;
  }
  v70 = 11376098;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v18 = sub_100B8830C();
  v19 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v21 = v20;
  v70 = v19;
  v71 = v20;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 11441634;
  v22._object = (void *)0xA300000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v2 = v71;
  v62 = v70;
  v70 = 10261730;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v23 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v25 = v24;
  v70 = v23;
  v71 = v24;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 10786018;
  v26._object = (void *)0xA300000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v1 = v71;
  if (!v65)
  {
LABEL_51:
    v28 = (char *)_swiftEmptyArrayStorage;
    v56 = v2;
    goto LABEL_52;
  }
  v59 = v70;
  swift_bridgeObjectRetain();
  v27 = 0;
  v28 = (char *)_swiftEmptyArrayStorage;
  v60 = v1;
  v61 = v2;
  do
  {
    if (v27)
      v29 = v1;
    else
      v29 = v2;
    v30 = *(_QWORD *)(a1 + 32 + 8 * v27);
    if (v27)
      v31 = v59;
    else
      v31 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v67 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_100B7FD98(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v33 = *((_QWORD *)v28 + 2);
    v32 = *((_QWORD *)v28 + 3);
    if (v33 >= v32 >> 1)
      v28 = sub_100B7FD98((char *)(v32 > 1), v33 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v33 + 1;
    v34 = &v28[16 * v33];
    *((_QWORD *)v34 + 4) = v31;
    *((_QWORD *)v34 + 5) = v29;
    v35 = *(_QWORD *)(v30 + 16);
    v64 = v30;
    if (v35)
    {
      v36 = (unint64_t *)(v30 + 40);
      do
      {
        v37 = *v36;
        v70 = *(v36 - 1);
        v71 = v37;
        v68 = 32;
        v69 = 0xE100000000000000;
        v38._countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v5, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
        object = v38._object;
        v70 = 545428706;
        v71 = 0xA400000000000000;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(object);
        v40 = v71;
        swift_bridgeObjectRetain();
        v41._countAndFlagsBits = 8557794;
        v41._object = (void *)0xA300000000000000;
        String.append(_:)(v41);
        swift_bridgeObjectRelease(v40);
        v43 = v70;
        v42 = v71;
        v45 = *((_QWORD *)v28 + 2);
        v44 = *((_QWORD *)v28 + 3);
        if (v45 >= v44 >> 1)
          v28 = sub_100B7FD98((char *)(v44 > 1), v45 + 1, 1, v28);
        v36 += 2;
        *((_QWORD *)v28 + 2) = v45 + 1;
        v46 = &v28[16 * v45];
        *((_QWORD *)v46 + 4) = v43;
        *((_QWORD *)v46 + 5) = v42;
        --v35;
      }
      while (v35);
    }
    v27 = v67 + 1;
    swift_bridgeObjectRelease(v64);
    v1 = v60;
    v2 = v61;
  }
  while (v67 + 1 != v65);
  v70 = 11572706;
  v71 = 0xA300000000000000;
  v68 = 8426722;
  v69 = 0xA300000000000000;
  v47 = StringProtocol.padding<A>(toLength:withPad:startingAt:)(v17, &v68, 0, &type metadata for String, &type metadata for String, v18, v18);
  v49 = v48;
  v70 = v47;
  v71 = v48;
  swift_bridgeObjectRetain();
  v50._countAndFlagsBits = 11507170;
  v50._object = (void *)0xA300000000000000;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  v51 = v70;
  v52 = v71;
  v54 = *((_QWORD *)v28 + 2);
  v53 = *((_QWORD *)v28 + 3);
  if (v54 >= v53 >> 1)
    v28 = sub_100B7FD98((char *)(v53 > 1), v54 + 1, 1, v28);
  *((_QWORD *)v28 + 2) = v54 + 1;
  v55 = &v28[16 * v54];
  *((_QWORD *)v55 + 4) = v51;
  *((_QWORD *)v55 + 5) = v52;
  swift_bridgeObjectRelease(v60);
  v1 = v61;
  v56 = a1;
LABEL_52:
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v56);
  return v28;
}

{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];

  v2 = sub_100007E8C(&qword_1011DD180);
  inited = swift_initStackObject(v2, v9);
  *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
  *(_QWORD *)(inited + 32) = a1;
  v4 = inited + 32;
  swift_bridgeObjectRetain();
  v5 = Array<A>.asciiBoxed()(inited);
  swift_setDeallocating(inited);
  v6 = *(_QWORD *)(inited + 16);
  v7 = sub_100007E8C(&qword_1011DD188);
  swift_arrayDestroy(v4, v6, v7);
  return v5;
}

void Array<A>.appendStringComponents(_:lineLength:bullet:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v25 = a2;
  static CharacterSet.newlines.getter(v12);
  v15 = sub_100B8830C();
  v16 = StringProtocol.components(separatedBy:)(v14, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = (char *)_swiftEmptyArrayStorage;
  v23 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 40);
    do
    {
      v20 = *v19;
      v24 = *(v19 - 1);
      v25 = v20;
      swift_bridgeObjectRetain();
      sub_100B8ADF8(&v23, &v24, a4, a5, a3, &v22);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      v17 = v22;
      v23 = v22;
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v16);
  }
  swift_bridgeObjectRelease(v16);
  sub_100B8AAC0((uint64_t)v17);
}

uint64_t MPCPlaybackIntentOptions.debugDescription.getter(char a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;

  if ((a1 & 1) == 0)
  {
    v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_100B7FD98(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_100B7FD98((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[16 * v4];
  *((_QWORD *)v5 + 4) = 0x656D6D4979616C70;
  *((_QWORD *)v5 + 5) = 0xEF796C6574616964;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100B7FD98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = sub_100B7FD98((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = 0x6575517465736572;
    *((_QWORD *)v8 + 5) = 0xEA00000000006575;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100B7FD98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v10 = *((_QWORD *)v2 + 2);
    v9 = *((_QWORD *)v2 + 3);
    if (v10 >= v9 >> 1)
      v2 = sub_100B7FD98((char *)(v9 > 1), v10 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v10 + 1;
    v11 = &v2[16 * v10];
    *((_QWORD *)v11 + 4) = 0x4E70556F54646461;
    *((_QWORD *)v11 + 5) = 0xEF64616548747865;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_31;
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100B7FD98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v13 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  if (v13 >= v12 >> 1)
    v2 = sub_100B7FD98((char *)(v12 > 1), v13 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v13 + 1;
  v14 = &v2[16 * v13];
  *((_QWORD *)v14 + 4) = 0x4E70556F54646461;
  *((_QWORD *)v14 + 5) = 0xEF6C696154747865;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100B7FD98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v16 = *((_QWORD *)v2 + 2);
    v15 = *((_QWORD *)v2 + 3);
    if (v16 >= v15 >> 1)
      v2 = sub_100B7FD98((char *)(v15 > 1), v16 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v16 + 1;
    v17 = &v2[16 * v16];
    *((_QWORD *)v17 + 4) = 0x5074726174736572;
    *((_QWORD *)v17 + 5) = 0xEF6B63616279616CLL;
  }
LABEL_31:
  v18 = sub_100007E8C(&qword_1011DD188);
  v19 = sub_100B8C02C();
  v20 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
  v22 = v21;
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 93;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return 91;
}

uint64_t sub_100B8BEA0()
{
  _QWORD *v0;

  return MPCPlaybackIntentOptions.debugDescription.getter(*v0);
}

void *MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor()
{
  return &static MPMediaLibraryFilteringOptions.none;
}

__C::MPMediaLibraryFilteringOptions __swiftcall MPMediaLibraryFilteringOptions.init(_:)(NSNumber_optional a1)
{
  Class isa;
  objc_class *v2;

  if (a1.value.super.super.isa)
  {
    isa = a1.value.super.super.isa;
    v2 = (objc_class *)-[objc_class unsignedIntegerValue](a1.value.super.super.isa, "unsignedIntegerValue");

    a1.value.super.super.isa = v2;
  }
  return (__C::MPMediaLibraryFilteringOptions)a1.value.super.super.isa;
}

uint64_t MPMediaLibraryFilteringOptions.itemRequestFilteringOptions.getter(char a1)
{
  return a1 & 2;
}

uint64_t static PropertySetCombinator.buildBlock(_:)(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t result;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = objc_msgSend((id)objc_opt_self(MPPropertySet), "emptyPropertySet");
  v3 = v2;
  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v2;
    result = swift_bridgeObjectRetain();
    v7 = v3;
    if (v4)
      goto LABEL_3;
LABEL_13:

    swift_bridgeObjectRelease(a1);
    return (uint64_t)v7;
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  v13 = v2;
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v12);
  v4 = result;
  v7 = v3;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v8 = 0;
    v9 = v3;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v10 = *(id *)(a1 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      v7 = objc_msgSend(v9, "propertySetByCombiningWithPropertySet:", v10);

      v9 = v7;
    }
    while (v4 != v8);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_100B8C02C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD190;
  if (!qword_1011DD190)
  {
    v1 = sub_100044B54(&qword_1011DD188);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011DD190);
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertySetCombinator()
{
  return &type metadata for PropertySetCombinator;
}

void GenericMusicItem.innerMusicItem.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for GenericMusicItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Album(0);
    v10 = v9;
    v11 = &protocol witness table for Album;
LABEL_5:
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
LABEL_19:
    v15 = sub_100049F68((_QWORD *)a1);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v15, v7, v10);
    return;
  }
  if (v8 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Artist(0);
    v10 = v9;
    v11 = &protocol witness table for Artist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for Composer(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for Composer;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1E0;
    v14 = &protocol conformance descriptor for Composer;
LABEL_18:
    *(_QWORD *)(a1 + 32) = sub_100048748(v13, v12, (uint64_t)v14);
    goto LABEL_19;
  }
  if (v8 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for CreditArtist(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for CreditArtist;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1D8;
    v14 = &protocol conformance descriptor for CreditArtist;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Curator(0);
    v10 = v9;
    v11 = &protocol witness table for Curator;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for EditorialItem(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for EditorialItem;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1D0;
    v14 = &protocol conformance descriptor for EditorialItem;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Genre(0);
    v10 = v9;
    v11 = &protocol witness table for Genre;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for MusicMovie(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1C8;
    v14 = &protocol conformance descriptor for MusicMovie;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for MusicVideo(0);
    v10 = v9;
    v11 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Playlist(0);
    v10 = v9;
    v11 = &protocol witness table for Playlist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for RadioShow(0);
    v10 = v9;
    v11 = &protocol witness table for RadioShow;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for RecordLabel(0);
    v10 = v9;
    v11 = &protocol witness table for RecordLabel;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for SocialProfile(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for SocialProfile;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1C0;
    v14 = &protocol conformance descriptor for SocialProfile;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Song(0);
    v10 = v9;
    v11 = &protocol witness table for Song;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v9 = type metadata accessor for Station(0);
    v10 = v9;
    v11 = &protocol witness table for Station;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVEpisode(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1B8;
    v14 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVSeason(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVSeason;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1B0;
    v14 = &protocol conformance descriptor for TVSeason;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for TVShow(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for TVShow;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1A8;
    v14 = &protocol conformance descriptor for TVShow;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for UploadedAudio(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD1A0;
    v14 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    v10 = type metadata accessor for UploadedVideo(0);
    v12 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    *(_QWORD *)(a1 + 24) = v10;
    v13 = (unint64_t *)&unk_1011DD198;
    v14 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t GenericMusicItem.catalogID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v0 = type metadata accessor for TVShow(0);
  v46 = *(_QWORD *)(v0 - 8);
  v47 = v0;
  __chkstk_darwin(v0);
  v45 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for TVSeason(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TVEpisode(0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Song(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Playlist(0);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8);
  v57 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicVideo(0);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10);
  v60 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MusicMovie(0);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Artist(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Album(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for GenericMusicItem(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v65, v23);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if (v27 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v26, v19);
    v29 = Album.catalogID.getter(v28);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return v29;
  }
  if (v27 != enum case for GenericMusicItem.artist(_:))
  {
    if (v27 != enum case for GenericMusicItem.composer(_:)
      && v27 != enum case for GenericMusicItem.curator(_:)
      && v27 != enum case for GenericMusicItem.editorialItem(_:)
      && v27 != enum case for GenericMusicItem.genre(_:))
    {
      if (v27 == enum case for GenericMusicItem.musicMovie(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v32 = v63;
        v31 = v64;
        v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v63 + 32))(v14, v26, v64);
        v29 = MusicMovie.catalogID.getter(v33);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v31);
        return v29;
      }
      if (v27 == enum case for GenericMusicItem.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v34 = v60;
        v35 = v61;
        v36 = v62;
        v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v60, v26, v62);
        v38 = MusicVideo.catalogID.getter(v37);
LABEL_16:
        v29 = v38;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
        return v29;
      }
      if (v27 == enum case for GenericMusicItem.playlist(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        v34 = v57;
        v35 = v58;
        v36 = v59;
        v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 32))(v57, v26, v59);
        v38 = Playlist.catalogID.getter(v39);
        goto LABEL_16;
      }
      if (v27 != enum case for GenericMusicItem.radioShow(_:)
        && v27 != enum case for GenericMusicItem.recordLabel(_:)
        && v27 != enum case for GenericMusicItem.socialProfile(_:))
      {
        if (v27 == enum case for GenericMusicItem.song(_:))
        {
          (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
          v34 = v54;
          v35 = v55;
          v36 = v56;
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 32))(v54, v26, v56);
          v38 = Song.catalogID.getter(v40);
          goto LABEL_16;
        }
        if (v27 != enum case for GenericMusicItem.station(_:))
        {
          if (v27 == enum case for GenericMusicItem.tvEpisode(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v51;
            v35 = v52;
            v36 = v53;
            v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))(v51, v26, v53);
            v38 = TVEpisode.catalogID.getter(v42);
            goto LABEL_16;
          }
          if (v27 == enum case for GenericMusicItem.tvSeason(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v48;
            v35 = v49;
            v36 = v50;
            v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(v48, v26, v50);
            v38 = TVSeason.catalogID.getter(v43);
            goto LABEL_16;
          }
          if (v27 == enum case for GenericMusicItem.tvShow(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            v34 = v45;
            v35 = v46;
            v36 = v47;
            v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 32))(v45, v26, v47);
            v38 = TVShow.catalogID.getter(v44);
            goto LABEL_16;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
  v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v18, v26, v15);
  v29 = Artist.catalogID.getter(v30);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return v29;
}

uint64_t Playlist.Entry.InternalItem.musicItem.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  int v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  unint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for Playlist.Entry.InternalItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v23 - v9, v2, v4);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for MusicMovie(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for MusicMovie;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_1011DD1C8;
    v16 = &protocol conformance descriptor for MusicMovie;
LABEL_3:
    v17 = (void *)sub_100048748(v15, v14, (uint64_t)v16);
LABEL_8:
    a1[4] = v17;
    v18 = sub_100049F68(a1);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v18, v10, v13);
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for MusicVideo(0);
    a1[3] = v13;
    v17 = &protocol witness table for MusicVideo;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for Song(0);
    a1[3] = v13;
    v17 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for TVEpisode(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for TVEpisode;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_1011DD1B8;
    v16 = &protocol conformance descriptor for TVEpisode;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for UploadedAudio(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedAudio;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_1011DD1A0;
    v16 = &protocol conformance descriptor for UploadedAudio;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    v13 = type metadata accessor for UploadedVideo(0);
    v14 = (uint64_t (*)(uint64_t))&type metadata accessor for UploadedVideo;
    a1[3] = v13;
    v15 = (unint64_t *)&unk_1011DD198;
    v16 = &protocol conformance descriptor for UploadedVideo;
    goto LABEL_3;
  }
  v11(v8, v2, v4);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(v24);
  v23 = 0xD000000000000028;
  v24 = 0x8000000100E30D50;
  v20 = sub_100048748(&qword_1011DD1E8, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem, (uint64_t)&protocol conformance descriptor for Playlist.Entry.InternalItem);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v20);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, "MusicUtilities/MusicKit+Utilities.swift", 39, 2, 73, 0);
  __break(1u);
  return result;
}

uint64_t sub_100B8D0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_100B9053C();
  return static ApproximatelyEquatable<>.==~ infix(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t static ApproximatelyComparable<>.<~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100B8D158(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t static ApproximatelyComparable<>.>~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100B8D158(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.> infix(_:_:));
}

uint64_t sub_100B8D158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)(a1, a2, a3, a5) & 1) != 0)
    return 0;
  else
    return a7(a1, a2, a3, a6) & 1;
}

uint64_t Result.init(success:failure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v39 = a6;
  v38 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v38 - 8);
  v11 = __chkstk_darwin(v38);
  v13 = (char *)&v34 - v12;
  v35 = *(_QWORD *)(a4 - 8);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v14);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Result(0, a3, a4, a5);
  v36 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v34 - v21;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a1, 1, a3) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v37, v38);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v30(v19, a1, a3);
    v30(v22, (uint64_t)v19, a3);
    v31 = 0;
    v27 = v39;
    v28 = v36;
LABEL_6:
    swift_storeEnumTagMultiPayload(v22, v20, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v27, v22, v20);
    v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v29, 1, v20);
  }
  v23 = type metadata accessor for Optional(0, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
  v24 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, v37, v38);
  v25 = v35;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v13, 1, a4);
  v27 = v39;
  v28 = v36;
  if (v26 != 1)
  {
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v16, v13, a4);
    v32(v22, v16, a4);
    v31 = 1;
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v24);
  v29 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v27, v29, 1, v20);
}

uint64_t Collection.limited(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;

  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  if (dispatch thunk of Collection.count.getter(a2, a3) > a1)
  {
    v9 = dispatch thunk of Collection.count.getter(a2, a3);
    v10 = __OFSUB__(v9, a1);
    v11 = v9 - a1;
    if (!v10)
      return Sequence.dropLast(_:)(v11, a2, *(_QWORD *)(a3 + 8));
    __break(1u);
  }
  v11 = 0;
  return Sequence.dropLast(_:)(v11, a2, *(_QWORD *)(a3 + 8));
}

uint64_t Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v7 = type metadata accessor for Optional(0, a4);
  v6[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[11] = v8;
  v6[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B8D544, 0, 0);
}

void sub_100B8D544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v12 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v8 = dispatch thunk of Collection.count.getter(v7, v5);
  v9 = sub_100B7A6CC(v1, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  *(_QWORD *)(v0 + 16) = v9;
  swift_getTupleTypeMetadata2(0, &type metadata for Int, v6, 0, 0);
  v10 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 104) = v10;
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v6;
  *(_QWORD *)(v10 + 32) = v5;
  *(_QWORD *)(v10 + 40) = v3;
  *(_OWORD *)(v10 + 48) = v12;
  *(_QWORD *)(v10 + 64) = v0 + 16;
  *(_QWORD *)&v12 = (char *)&dword_1011DD208 + dword_1011DD208;
  v11 = (_QWORD *)swift_task_alloc(unk_1011DD20C);
  *(_QWORD *)(v0 + 112) = v11;
  *v11 = v0;
  v11[1] = sub_100B8D698;
  __asm { BR              X0; sub_100B8E324 }
}

uint64_t sub_100B8D698()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100B8D7F0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_100B8D704;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100B8D704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc(48);
  v8 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v8;
  v4 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v6 = Sequence.compactMap<A>(_:)(sub_100B8FA44, v3, v4, v8, WitnessTable);
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_100B8D7F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B8D834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v8[9] = a8;
  v8[10] = v33;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v11 = type metadata accessor for Optional(0, a8);
  v8[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v33 + 8);
  v8[14] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, a7, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v8[15] = AssociatedTypeWitness;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[16] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v8[17] = v16;
  v8[18] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007E8C(&qword_1011DCC70);
  v8[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a8, 0, 0);
  v8[20] = TupleTypeMetadata2;
  v19 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v8[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100044B54(&qword_1011DC4F0);
  v8[22] = v20;
  v21 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))type metadata accessor for ThrowingTaskGroup.Iterator)(0, TupleTypeMetadata2, v20, &protocol self-conformance witness table for Error);
  v8[23] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v8[24] = v22;
  v8[25] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_getTupleTypeMetadata2(255, &type metadata for Int, AssociatedTypeWitness, "offset element ", 0);
  v8[26] = v23;
  v24 = type metadata accessor for Optional(0, v23);
  v8[27] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v8[28] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[29] = swift_task_alloc(v26);
  v8[30] = swift_task_alloc(v26);
  v28 = type metadata accessor for EnumeratedSequence(0, a7, v13, v27);
  v8[31] = v28;
  v8[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for EnumeratedSequence.Iterator(0, a7, v13, v29);
  v8[33] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v8[34] = v31;
  v8[35] = swift_task_alloc((*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B8DA80, 0, 0);
}

uint64_t sub_100B8DA80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0[31];
  v33 = v0[26];
  v26 = v0[16];
  v27 = v0[28];
  Sequence.enumerated()(v0[8], v0[14]);
  EnumeratedSequence.makeIterator()(v1);
  while (1)
  {
    v3 = v0[29];
    v2 = v0[30];
    v5 = v0[26];
    v4 = v0[27];
    EnumeratedSequence.Iterator.next()(v0[33]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v2, v3, v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v2, 1, v5) == 1)
      break;
    v6 = (uint64_t *)v0[30];
    v7 = v0[19];
    v31 = v0[20];
    v32 = v0[22];
    v8 = v0[17];
    v9 = (char *)v0[18];
    v10 = v0[15];
    v11 = v0[6];
    v29 = v0[10];
    v30 = v0[5];
    v12 = (char *)v6 + *(int *)(v33 + 48);
    v13 = *v6;
    v14 = type metadata accessor for TaskPriority(0);
    v28 = *((_OWORD *)v0 + 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    v15 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v15(v9, v12, v10);
    v16 = *(unsigned __int8 *)(v26 + 80);
    v17 = (v16 + 80) & ~v16;
    v18 = swift_allocObject(&unk_101100E68, v17 + v8, v16 | 7);
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_OWORD *)(v18 + 32) = v28;
    *(_QWORD *)(v18 + 48) = v29;
    *(_QWORD *)(v18 + 56) = v13;
    *(_QWORD *)(v18 + 64) = v30;
    *(_QWORD *)(v18 + 72) = v11;
    v15((char *)(v18 + v17), v9, v10);
    v19 = type metadata accessor for ThrowingTaskGroup(0, v31, v32, &protocol self-conformance witness table for Error);
    swift_retain();
    sub_100B8E1A0(v7, (uint64_t)&unk_1011DD2A8, v18, v19);
    sub_100B7B45C(v7);
  }
  v20 = v0[22];
  v21 = v0[20];
  v22 = (_QWORD *)v0[3];
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[35], v0[33]);
  ThrowingTaskGroup.makeAsyncIterator()(*v22, v21, v20, &protocol self-conformance witness table for Error);
  v23 = type metadata accessor for Array(0);
  v0[36] = v23;
  Array._makeMutableAndUnique()();
  UIScreen.Dimensions.size.getter(v23);
  Array._makeMutableAndUnique()();
  UIScreen.Dimensions.size.getter(v23);
  v24 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[37] = v24;
  *v24 = v0;
  v24[1] = sub_100B8DD28;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[21], 0, 0, v0[23], v0 + 2);
}

uint64_t sub_100B8DD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  if (v0)
    v2 = sub_100B8DFD0;
  else
    v2 = sub_100B8DD8C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B8DD8C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(unint64_t **)(v0 + 168);
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v7, *(_QWORD *)(v0 + 184));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v2);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(uint64_t **)(v0 + 56);
    v18 = *v2;
    v19 = (char *)v2 + *(int *)(v1 + 48);
    v20 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v14, v19, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v16);
    Array._makeMutableAndUnique()();
    v21 = *v17;
    sub_100B7A67C(v18, *v17, v15);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 40))(v21+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v18, v14, v15);
    UIScreen.Dimensions.size.getter(v12);
    v22 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 304) = v22;
    *v22 = v0;
    v22[1] = sub_100B8DF6C;
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 184), v0 + 16);
  }
}

uint64_t sub_100B8DF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 304));
  if (v0)
    v2 = sub_100B8DFD0;
  else
    v2 = sub_100B8DD8C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B8DFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v5, *(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B8E098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[6] = a7;
  v7[7] = v9;
  v7[4] = a5;
  v7[5] = a6;
  v7[2] = a1;
  v7[3] = a4;
  return swift_task_switch(sub_100B8E0C0, 0, 0);
}

uint64_t sub_100B8E0C0()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int *v7;

  v2 = v0[3];
  v1 = (int *)v0[4];
  v3 = (_QWORD *)v0[2];
  v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2(0, &type metadata for Int, v0[7], 0, 0) + 48);
  *v3 = v2;
  v7 = (int *)((char *)v1 + *v1);
  v5 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_100B8E158;
  return ((uint64_t (*)(char *, _QWORD))v7)(v4, v0[6]);
}

uint64_t sub_100B8E158()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_100B8E1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double result;
  _QWORD v30[3];
  _QWORD v31[4];

  v5 = v4;
  v10 = sub_100007E8C(&qword_1011DCC70);
  __chkstk_darwin(v10);
  v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B7B034(a1, (uint64_t)v12);
  v13 = type metadata accessor for TaskPriority(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100B7B45C((uint64_t)v12);
    v16 = 12544;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
    {
LABEL_3:
      v18 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v17, v20);
      v21 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      v23 = v22;
      swift_unknownObjectRelease(v17);
      goto LABEL_6;
    }
  }
  else
  {
    v24 = TaskPriority.rawValue.getter(v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v16 = v24 | 0x3100;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
      goto LABEL_3;
  }
  v21 = 0;
  v23 = 0;
LABEL_6:
  v25 = *v5;
  v26 = *(_QWORD *)(a4 + 16);
  v27 = (_QWORD *)(v23 | v21);
  if (v23 | v21)
  {
    v31[0] = 0;
    v31[1] = 0;
    v27 = v31;
    v31[2] = v21;
    v31[3] = v23;
  }
  v30[0] = 1;
  v30[1] = v27;
  v30[2] = v25;
  swift_task_create(v16, v30, v26, a2, a3);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100B8E324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (sub_100DE8EA8(2, 18, 0, 0))
  {
    v18 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v9 + 24) = v18;
    *v18 = v9;
    v18[1] = sub_100997B3C;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1011DD298 + dword_1011DD298);
    v20 = (_QWORD *)swift_task_alloc(unk_1011DD29C);
    *(_QWORD *)(v9 + 16) = v20;
    *v20 = v9;
    v20[1] = sub_10005AEE4;
    return v21(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL Collection<>.contains(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BOOL8 v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a2, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v16[-v12];
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a1;
  Sequence.first(where:)(sub_100B8FA98, v16, a2, v8);
  v14 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v13, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  return v14;
}

uint64_t Collection<>.first(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.first(where:)(sub_100B8FA98, v5, a2, *(_QWORD *)(a3 + 8));
}

_QWORD *Collection<>.firstIndex(approximatelyMatching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD v6[8];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a1;
  return Collection.firstIndex(where:)(a5, sub_100B8FA98, v6, a2, a3);
}

uint64_t static DisplayUnit.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a1;
  v35 = a2;
  v36 = *(_QWORD *)(a3 - 8);
  v4 = __chkstk_darwin(a1);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v31 = (char *)&v31 - v6;
  v33 = v7;
  v9 = type metadata accessor for DisplayUnit(0, v8, v7, v7);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, 0, 0);
  v17 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v18 = __chkstk_darwin(TupleTypeMetadata2);
  v20 = (char *)&v31 - v19;
  v21 = (char *)&v31 + *(int *)(v18 + 48) - v19;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22((char *)&v31 - v19, v34, v9);
  v22(v21, v35, v9);
  if (swift_getEnumCaseMultiPayload(v20, v9) != 1)
  {
    v22(v15, (uint64_t)v20, v9);
    if (swift_getEnumCaseMultiPayload(v21, v9) != 1)
    {
      v28 = v36;
      v29 = v31;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v31, v21, a3);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v29, a3, v33);
      v26 = *(void (**)(char *, uint64_t))(v28 + 8);
      v26(v29, a3);
      v27 = v15;
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, a3);
    v25 = 0;
    v10 = v17;
    v9 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v22(v13, (uint64_t)v20, v9);
  if (swift_getEnumCaseMultiPayload(v21, v9) != 1)
  {
    v15 = v13;
    goto LABEL_8;
  }
  v23 = v36;
  v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v21, a3);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v24, a3, v33);
  v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v24, a3);
  v27 = v13;
LABEL_6:
  v26(v27, a3);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
  return v25 & 1;
}

uint64_t sub_100B8E8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DisplayUnit.__derived_enum_equals(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t ClosedRange<>.linearMap(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v23 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v23 - v16, v4, v8);
  v18 = v4 + *(int *)(a2 + 36);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8);
  v20 = *(_QWORD *)(v19 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v18, v4, v8, v20);
  dispatch thunk of static Numeric.* infix(_:_:)(a1, v12, v8, v19);
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v17, v15, v8, v20);
  v21(v15, v8);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v8);
}

uint64_t ClosedRange<>.normalize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = v3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v19 - v13;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 16) + 8) + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v12, v4, v7, v16);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v4 + *(int *)(a2 + 36), v4, v7, v16);
  dispatch thunk of static FloatingPoint./ infix(_:_:)(v14, v11, v7, a3);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v7);
}

uint64_t ClosedRange<>.clampedNormalize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosedRange.clamp(_:)(v9, v10);
  ClosedRange<>.normalize(_:)((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Array.extract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
  v8 = _ArrayProtocol.filter(_:)(a1, a2, a3, WitnessTable);
  if (!v3)
  {
    v9 = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
    v10 = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
    RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, v9, v10);
  }
  return v8;
}

uint64_t Array.extractFirst(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v13;
  char v14;

  v10 = *v4;
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a3);
  Collection.firstIndex(where:)(&v13, a1, a2, a3, WitnessTable);
  result = swift_bridgeObjectRelease(v10);
  if (!v5)
  {
    if ((v14 & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a4, 1, 1);
    }
    else
    {
      Array.remove(at:)(v13, a3);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a4, 0, 1);
    }
  }
  return result;
}

uint64_t Array.removingDuplicates<A>(with:)(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  _QWORD v12[7];
  uint64_t v13;

  v7 = Set.init()(*(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8), a3, a4);
  v12[6] = a2;
  v13 = v7;
  v12[2] = a3;
  v12[3] = &v13;
  v12[4] = a1;
  v8 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v10 = _ArrayProtocol.filter(_:)(sub_100B8FB28, v12, v8, WitnessTable);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100B8EE44(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v5 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v16 - v11;
  swift_getAtKeyPath(v10, v13);
  v14 = type metadata accessor for Set(0, v5, a4);
  LOBYTE(a4) = Set.insert(_:)(v12, v9, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return a4 & 1;
}

uint64_t Collection.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(_QWORD *)(a2 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = Set.init()(*(_QWORD *)(class metadata base offset for KeyPath + v13 + 8), v14, v10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, v4, a2);
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v21 = &v23;
  v22 = a1;
  v15 = Sequence.filter(_:)(sub_100B8FB48, v17, a2, *(_QWORD *)(a3 + 8));
  swift_bridgeObjectRelease(v23);
  return v15;
}

uint64_t sub_100B8F01C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v7 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)v18 - v13;
  swift_getAtKeyPath(v12, v15);
  v16 = type metadata accessor for Set(0, v7, a6);
  LOBYTE(a6) = Set.insert(_:)(v14, v11, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return a6 & 1;
}

uint64_t Sequence.sorted<A>(by:comparator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[10];

  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a6;
  v7[5] = a2;
  v7[6] = a3;
  v7[7] = a1;
  return Sequence.sorted(by:)(sub_100B8FB6C, v7, a4, a5);
}

uint64_t sub_100B8F150(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];

  v5 = a5;
  v8 = *(_QWORD *)(class metadata base offset for KeyPath + *a5 + 8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v19 - v14;
  swift_getAtKeyPath(v13, v16);
  swift_getAtKeyPath(a2, v5);
  LOBYTE(v5) = a3(v15, v12);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  v17(v15, v8);
  return v5 & 1;
}

uint64_t Sequence<>.excluding(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject(&unk_101100E40, 48, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_bridgeObjectRetain();
  v9 = Sequence.exclude(_:)((uint64_t)sub_100B905F8, (uint64_t)v8, a2, a3);
  swift_release();
  return v9;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v8 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v10 = Set.init<A>(_:)(&v14, AssociatedTypeWitness, v8, a4, WitnessTable);
  v11 = (_QWORD *)swift_allocObject(&unk_101100E18, 48, 7);
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = v10;
  v12 = Sequence.exclude(_:)((uint64_t)sub_100B905A4, (uint64_t)v11, a2, a3);
  swift_release();
  return v12;
}

uint64_t sub_100B8F2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t WitnessTable;

  swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v7 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  return Sequence<>.contains(_:)(a1, v7, WitnessTable, a5) & 1;
}

uint64_t Sequence.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  __chkstk_darwin(a1);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(&v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  v13 = a3;
  v14 = a4;
  v15 = a1;
  v16 = a2;
  return Sequence.filter(_:)(sub_100B8FB90, v12, a3, a4);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_100B8FBB8, (uint64_t)v5, a2, a3);
}

{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_100B8FC34, (uint64_t)v5, a2, a3);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_100B8FC20, (uint64_t)v4, a2, a3);
}

uint64_t sub_100B8F5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    ObjectType = swift_getObjectType();
    v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a5);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(sub_100B8F66C, v11, v13);
}

uint64_t sub_100B8F66C()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v6;

  v1 = v0[38];
  v2 = (int *)v0[36];
  swift_taskGroup_initialize(v0 + 2, v1);
  v3 = sub_100007E8C(&qword_1011DC4F0);
  v0[41] = v3;
  v0[34] = ThrowingTaskGroup.init(group:)(v0 + 2, v1, v3, &protocol self-conformance witness table for Error);
  v6 = (int *)((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v0[42] = v4;
  *v4 = v0;
  v4[1] = sub_100B8F720;
  return ((uint64_t (*)(_QWORD, _QWORD *))v6)(v0[35], v0 + 34);
}

uint64_t sub_100B8F720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v3 = *(_QWORD **)v1;
  v3[43] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100B8F7E8, v3[39], v3[40]);
  v5 = v3[41];
  v6 = v3[38];
  v7 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.awaitAllRemainingTasks()[1]);
  v3[45] = v7;
  v8 = type metadata accessor for ThrowingTaskGroup(0, v6, v5, &protocol self-conformance witness table for Error);
  *v7 = v3;
  v7[1] = sub_100B8F910;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v8);
}

uint64_t sub_100B8F7E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[41];
  v2 = v0[38];
  ThrowingTaskGroup.cancelAll()();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.awaitAllRemainingTasks()[1]);
  v0[44] = v3;
  v4 = type metadata accessor for ThrowingTaskGroup(0, v2, v1, &protocol self-conformance witness table for Error);
  *v3 = v0;
  v3[1] = sub_100B8F880;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v4);
}

uint64_t sub_100B8F880()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  return swift_task_switch(sub_100B8F8CC, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_100B8F8CC()
{
  uint64_t v0;
  __n128 v1;

  v1.n128_f64[0] = swift_taskGroup_destroy(v0 + 16);
  swift_willThrow(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B8F910()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 360));
  return swift_task_switch(sub_100B8F95C, *(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 320));
}

uint64_t sub_100B8F95C()
{
  uint64_t v0;
  double v1;

  v1 = swift_taskGroup_destroy(v0 + 16);
  return (*(uint64_t (**)(double))(v0 + 8))(v1);
}

void sub_100B8F990()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1011DD1FC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10006AEE4;
  __asm { BR              X9; sub_100B8D834 }
}

uint64_t sub_100B8FA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
}

uint64_t sub_100B8FA98(uint64_t a1)
{
  return sub_100B8FAB0(a1) & 1;
}

uint64_t sub_100B8FAB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v3 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v4 + 8), v3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  return dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)(a1, v5, AssociatedTypeWitness, v6) & 1;
}

uint64_t type metadata accessor for DisplayUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DisplayUnit);
}

uint64_t sub_100B8FB28(uint64_t a1)
{
  uint64_t v1;

  return sub_100B8EE44(a1, *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100B8FB48(uint64_t a1)
{
  uint64_t v1;

  return sub_100B8F01C(a1, *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_100B8FB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100B8F150(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD **)(v2 + 56)) & 1;
}

BOOL sub_100B8FB90()
{
  uint64_t v0;

  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_100B8FBB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v4 = v1[2];
  v3 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3, v4, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v5, AssociatedTypeWitness, v6) & 1;
}

BOOL sub_100B8FC20(_QWORD *a1)
{
  uint64_t v1;

  return *a1 == *(_QWORD *)(v1 + 32);
}

uint64_t sub_100B8FC34(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v3 = v1[2];
  v2 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  v6 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v9 = v4;
  v10 = v6;
  return dispatch thunk of static Equatable.== infix(_:_:)(&v10, &v9, AssociatedTypeWitness, v5) & 1;
}

uint64_t sub_100B8FCA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_100B8FD10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    *((_BYTE *)v3 + v5) = v10 == 1;
  }
  else
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain(v9);
  }
  return v3;
}

uint64_t sub_100B8FE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 16))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_100B8FED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t sub_100B8FFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  v8 = v6 == 1;
  (*(void (**)(uint64_t))(v4 + 32))(a1);
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_100B90074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    v10 = v8 == 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v10;
  }
  return a1;
}

uint64_t sub_100B9015C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 < 0xFF)
    goto LABEL_19;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_19:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_19;
LABEL_12:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100B90214 + 4 * byte_100EE7909[(v4 - 1)]))();
}

void sub_100B90260(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_100B903FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_100B90438 + 4 * byte_100EE7917[v3]))();
}

void sub_100B90480(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_100B9053C()
{
  unint64_t result;

  result = qword_1011DD290;
  if (!qword_1011DD290)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_1011DD290);
  }
  return result;
}

uint64_t sub_100B90580()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B905A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v4 = v1[2];
  v3 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3, v4, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  return Set.contains(_:)(a1, v5, AssociatedTypeWitness, v6);
}

uint64_t sub_100B905F8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100B8F2E8(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_100B90604()
{
  char *v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(*((_QWORD *)v0 + 6) + 8), *((_QWORD *)v0 + 4), &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  v7 = swift_release(*((_QWORD *)v0 + 9));
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(&v0[v4], AssociatedTypeWitness, v7);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100B9069C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  swift_getAssociatedTypeWitness(0, *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8), *(_QWORD *)(v0 + 32), &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v2 = (_QWORD *)swift_task_alloc(dword_1011DD2A4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10005AEE4;
  __asm { BR              X9; sub_100B8E098 }
}

void Text.withChevron<A>(_:tintColor:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  NSString v21;
  id v22;
  __n128 v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;

  v55 = a4;
  v54 = a5 & 1;
  v17 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, a10);
  __chkstk_darwin(v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1;
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v21, v20);

  if (v22)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 2, v23);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
    v25._countAndFlagsBits = 41154;
    v25._object = (void *)0xA200000000000000;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v25);
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
    Image.init(uiImage:)(objc_msgSend(v22, "imageWithRenderingMode:", 2));
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v27);
    v28 = LocalizedStringKey.init(stringInterpolation:)(v19);
    v29 = Text.init(_:tableName:bundle:comment:)(v28);
    v31 = v30;
    v33 = v32;
    v53 = a9;
    v34 = a6;
    v36 = v35 & 1;
    v37 = Text.foregroundStyle<A>(_:)(a2, v29, v30, v36, v32, a7, a8);
    v52 = v22;
    v39 = v38;
    v41 = v40;
    v43 = v42 & 1;
    sub_100055BAC(v29, v31, v36);
    swift_bridgeObjectRelease(v33);
    v44 = v34;
    a9 = v53;
    v45 = static Text.+ infix(_:_:)(a3, v55, v54, v44, v37, v39, v43, v41);
    v47 = v46;
    LOBYTE(v31) = v48;
    a6 = v49;

    v50 = v31 & 1;
    sub_100055BAC(v37, v39, v43);
    swift_bridgeObjectRelease(v41);
    *(_QWORD *)a9 = v45;
  }
  else
  {
    *(_QWORD *)a9 = a3;
    v47 = v55;
    v50 = v54;
    sub_100055BBC(a3, v55, v54);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a9 + 8) = v47;
  *(_BYTE *)(a9 + 16) = v50;
  *(_QWORD *)(a9 + 24) = a6;
}

uint64_t Text.playableForegroundStyle<A>(_:isPlayable:)(int *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v29;
  int v30;
  int v31;

  __chkstk_darwin(a1);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, int *, uint64_t))(v18 + 16))(v17, a1, v19);
  if (swift_dynamicCast(&v31, v17, a7, &type metadata for HierarchicalShapeStyle, 6))
  {
    if ((a2 & 1) != 0)
      v20 = v31;
    else
      v20 = static HierarchicalShapeStyle.tertiary.getter();
    v30 = v20;
    v21 = a5 & 1;
    v26 = &type metadata for HierarchicalShapeStyle;
    v27 = &protocol witness table for HierarchicalShapeStyle;
    v22 = &v30;
    v23 = a3;
    v24 = a4;
    v25 = a6;
  }
  else
  {
    v21 = a5 & 1;
    v22 = a1;
    v23 = a3;
    v24 = a4;
    v25 = a6;
    v26 = a7;
    v27 = a8;
  }
  return Text.foregroundStyle<A>(_:)(v22, v23, v24, v21, v25, v26, v27);
}

uint64_t View.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v9 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PlayableForegroundStyle(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a4, v16);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v11, a4);
  v18[*(int *)(v14 + 36)] = a2;
  View.modifier<A>(_:)(v18, a3, v14, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for PlayableForegroundStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlayableForegroundStyle);
}

uint64_t sub_100B90C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD v90[3];

  v69 = a1;
  v74 = a3;
  WitnessTable = swift_getWitnessTable(&unk_100EE7A60, a2);
  v5 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v6 = *(_QWORD *)(a2 + 16);
  v65 = *(_QWORD *)(a2 + 24);
  v73 = type metadata accessor for _ForegroundStyleModifier(255, v6);
  v7 = type metadata accessor for ModifiedContent(0, v5, v73);
  v66 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v67 = (char *)&v64 - v11;
  v12 = sub_100044B54(&qword_1011DD3C8);
  v70 = v5;
  v13 = type metadata accessor for ModifiedContent(0, v5, v12);
  v64 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v64 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v64 - v20;
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for _ConditionalContent(0, v13, v7);
  v71 = *(_QWORD *)(v26 - 8);
  v72 = v26;
  v27 = __chkstk_darwin(v26);
  v68 = (char *)&v64 - v28;
  v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  v30 = v75;
  v29(v25, v75, v6, v27);
  if (swift_dynamicCast(v90, v25, v6, &type metadata for HierarchicalShapeStyle, 6))
  {
    v67 = v15;
    v66 = v7;
    v31 = v70;
    v32 = v21;
    v33 = v64;
    if ((*(_BYTE *)(v30 + *(int *)(a2 + 36)) & 1) != 0)
      v34 = v90[0];
    else
      v34 = static HierarchicalShapeStyle.quaternary.getter();
    v90[0] = v34;
    v47 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v31);
    View.foregroundStyle<A>(_:)(v90, v31, &type metadata for HierarchicalShapeStyle, v47, &protocol witness table for HierarchicalShapeStyle);
    v48 = sub_100049F28(&qword_1011DD3D0, &qword_1011DD3C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    v78 = v47;
    v79 = v48;
    v49 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    v50 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v50(v32, v18, v13);
    v51 = v32;
    v41 = *(void (**)(char *, uint64_t))(v33 + 8);
    v41(v18, v13);
    v52 = (uint64_t)v67;
    v50(v67, v51, v13);
    v36 = v73;
    v53 = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v73);
    v76 = v47;
    v77 = v53;
    v7 = v66;
    v54 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
    v44 = v68;
    sub_100817130(v52, v13, v7, v49, v54);
    v41((char *)v52, v13);
    v45 = v51;
    v46 = v13;
  }
  else
  {
    v31 = v70;
    v35 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v70);
    View.foregroundStyle<A>(_:)(v30, v31, v6, v35, v65);
    v36 = v73;
    v37 = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v73);
    v88 = v35;
    v89 = v37;
    v75 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
    v38 = v66;
    v39 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    v40 = v67;
    v39(v67, v9, v7);
    v41 = *(void (**)(char *, uint64_t))(v38 + 8);
    v41(v9, v7);
    v39(v9, v40, v7);
    v42 = sub_100049F28(&qword_1011DD3D0, &qword_1011DD3C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    v86 = v35;
    v87 = v42;
    v43 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    v44 = v68;
    sub_1008171F4((uint64_t)v9, v13, v7, v43, v75);
    v41(v9, v7);
    v45 = v40;
    v46 = v7;
  }
  v41(v45, v46);
  v55 = v74;
  v57 = v71;
  v56 = v72;
  v58 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v31);
  v59 = sub_100049F28(&qword_1011DD3D0, &qword_1011DD3C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v84 = v58;
  v85 = v59;
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v36);
  v82 = v58;
  v83 = v61;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v80 = v60;
  v81 = v62;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v56);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 16))(v55, v44, v56);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v44, v56);
}

uint64_t ListChevron.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = swift_allocObject(&unk_101100EB8, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain();
  v5 = sub_100007E8C(&qword_1011DD2B0);
  v6 = sub_100B91744();
  return Button.init(action:label:)(sub_10004D5F4, v4, sub_100B91294, 0, v5, v6);
}

uint64_t sub_100B91270()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B91294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  double v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  id v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v55 = a1;
  v53 = sub_100007E8C(&qword_1011DD2D8);
  __chkstk_darwin(v53);
  v60 = (char *)&v49 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Image.Scale(0);
  v56 = *(_QWORD *)(v2 - 8);
  v57 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007E8C(&qword_1011DD3D8);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007E8C(&qword_1011DD2D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007E8C(&qword_1011DD3E0);
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  __chkstk_darwin(v11);
  v50 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007E8C(&qword_1011DD2C8);
  __chkstk_darwin(v13);
  v54 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v16 = static Font.body.getter(v15);
  KeyPath = swift_getKeyPath(&unk_100EE7AB0);
  v61 = v15;
  v62 = KeyPath;
  v63 = v16;
  v18 = static Font.Weight.semibold.getter(KeyPath);
  v19 = sub_100007E8C(&qword_1011DD2E8);
  v20 = sub_100B91964();
  View.fontWeight(_:)(*(_QWORD *)&v18, 0, v19, v20);
  swift_release();
  swift_release();
  v21 = swift_release();
  v23 = v56;
  v22 = v57;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v56 + 104))(v4, enum case for Image.Scale.small(_:), v57, v21);
  v24 = swift_getKeyPath(&unk_100EE7AE0);
  v25 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  v26 = sub_100007E8C(&qword_1011DD310);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v25 + *(int *)(v26 + 28), v4, v22);
  *v25 = v24;
  v28 = v58;
  v27 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v10, v7, v59);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v22);
  v29 = v7;
  v30 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  v31 = enum case for DynamicTypeSize.accessibility1(_:);
  v32 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  v33 = sub_100048748(&qword_1011DD3E8, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v30, v30, v32, v33);
  if ((result & 1) != 0)
  {
    v35 = sub_100B918B8();
    v36 = sub_100049F28(&qword_1011DD318, &qword_1011DD2D8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v37 = v50;
    v38 = v53;
    View.dynamicTypeSize<A>(_:)(v30, v8, v53, v35, v36);
    sub_10004FF60(v30, &qword_1011DD2D8);
    sub_10004FF60((uint64_t)v10, &qword_1011DD2D0);
    v61 = v8;
    v62 = v38;
    v63 = v35;
    v64 = v36;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v61, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v40 = (uint64_t)v54;
    v41 = v52;
    View.accessibilityHidden(_:)(1, v52, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v41);
    v42 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v44 = Color.init(uiColor:)(v42, v43);
    v45 = swift_getKeyPath(&unk_100EE7B10);
    v61 = v44;
    swift_retain();
    v46 = AnyShapeStyle.init<A>(_:)(&v61, &type metadata for Color, &protocol witness table for Color);
    v47 = v55;
    sub_100B9202C(v40, v55);
    swift_release();
    v48 = (uint64_t *)(v47 + *(int *)(sub_100007E8C(&qword_1011DD2B0) + 36));
    *v48 = v45;
    v48[1] = v46;
    return sub_10004FF60(v40, &qword_1011DD2C8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100B91744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD2B8;
  if (!qword_1011DD2B8)
  {
    v1 = sub_100044B54(&qword_1011DD2B0);
    sub_100B917C8();
    sub_100049F28(&qword_1011DD328, &qword_1011DD330, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1011DD2B8);
  }
  return result;
}

unint64_t sub_100B917C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1011DD2C0;
  if (!qword_1011DD2C0)
  {
    v1 = sub_100044B54(&qword_1011DD2C8);
    v2[0] = sub_100044B54(&qword_1011DD2D0);
    v2[1] = sub_100044B54(&qword_1011DD2D8);
    v2[2] = sub_100B918B8();
    v2[3] = sub_100049F28(&qword_1011DD318, &qword_1011DD2D8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_100048748(&qword_1011DD320, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1011DD2C0);
  }
  return result;
}

unint64_t sub_100B918B8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1011DD2E0;
  if (!qword_1011DD2E0)
  {
    v1 = sub_100044B54(&qword_1011DD2D0);
    v2[0] = sub_100044B54(&qword_1011DD2E8);
    v2[1] = sub_100B91964();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_100049F28(&qword_1011DD308, &qword_1011DD310, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1011DD2E0);
  }
  return result;
}

unint64_t sub_100B91964()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DD2F0;
  if (!qword_1011DD2F0)
  {
    v1 = sub_100044B54(&qword_1011DD2E8);
    sub_100049F28(&qword_1011DD2F8, &qword_1011DD300, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1011DD2F0);
  }
  return result;
}

uint64_t sub_100B919E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v0;
  v1 = v0[1];
  v3 = swift_allocObject(&unk_101100FB8, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain();
  v4 = sub_100007E8C(&qword_1011DD2B0);
  v5 = sub_100B91744();
  return Button.init(action:label:)(sub_10013C910, v3, sub_100B91294, 0, v4, v5);
}

uint64_t _UIHostingView.init(content:)(uint64_t a1)
{
  void (*v1)(void);
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = (void (*)(void))__chkstk_darwin(a1);
  v3 = (char *)&v5 - v2;
  v1();
  return dispatch thunk of _UIHostingView.__allocating_init(rootView:)(v3);
}

uint64_t sub_100B91AE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListChevron.body>>, 1);
}

ValueMetadata *type metadata accessor for ListChevron()
{
  return &type metadata for ListChevron;
}

void *sub_100B91B04()
{
  return &protocol witness table for Text;
}

uint64_t sub_100B91B10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for PlayableForegroundStyle(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&unk_100EE7A60, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_100B91B88()
{
  return sub_100049F28(&qword_1011DD338, qword_1011DD340, (uint64_t)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_100B91BB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100EE7A38;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_100B91C28(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_100B91CE8 + 4 * byte_100EE79A0[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_100B91D5C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_100B91F34(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100FB93E0, 1);
}

uint64_t sub_100B91F68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100B91F90(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100B91FB8()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100B91FDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100B92004(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_100B9202C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DD2C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B92074(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = type metadata accessor for PlayableForegroundStyle(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(&unk_100EE7A60, v5);
  v7 = type metadata accessor for _ViewModifier_Content(255, v5, WitnessTable);
  v8 = sub_100044B54(&qword_1011DD3C8);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  v10 = type metadata accessor for _ForegroundStyleModifier(255, v4);
  v11 = type metadata accessor for ModifiedContent(255, v7, v10);
  v12 = type metadata accessor for _ConditionalContent(255, v9, v11);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v7);
  sub_100049F28(&qword_1011DD3D0, &qword_1011DD3C8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v10);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12);
}

uint64_t sub_100B921D4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_10072E154(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v5 + 8 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * (v6 - 1 - a1));
    *(_QWORD *)(v5 + 16) = v7;
    specialized Array._endMutation()(v10);
    return v9;
  }
  return result;
}

uint64_t sub_100B92268@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
  {
    result = sub_100B989B8(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = *(_QWORD *)(_s9_ObserverC18HandlerAssociationVMa(0) - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
    result = sub_100B97DE0(v11, a2);
    if (v10 > 0 || v11 >= v11 + v10 + v10 * (v8 - a1))
    {
      result = swift_arrayInitWithTakeFrontToBack(v11);
    }
    else if (v10)
    {
      result = swift_arrayInitWithTakeBackToFront(v11);
    }
    *(_QWORD *)(v5 + 16) = v8;
    *v2 = v5;
  }
  return result;
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(image:style:)(UIImage_optional image, UIBarButtonItemStyle style)
{
  Class isa;
  id v3;

  isa = image.value.super.isa;
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithImage:style:target:action:", image.value.super.isa, *(_QWORD *)&image.is_nil, 0, 0);

  return (UIBarButtonItem)v3;
}

void *UIBarButtonItem.spacerBarButtonTag.unsafeMutableAddressor()
{
  return &static UIBarButtonItem.spacerBarButtonTag;
}

uint64_t static UIBarButtonItem.spacerBarButtonTag.getter()
{
  return 9999;
}

id static UIBarButtonItem.spacerBarButtonItem()()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 1.0);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v0);
  objc_msgSend(v1, "setTag:", 9999);

  return v1;
}

void UIWindowScene.mainWindow.getter()
{
  void *v0;
  id v1;
  double v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __objc2_prot *v12;

  v1 = objc_msgSend(v0, "delegate");
  if (v1)
  {
    v3 = v1;
    v12 = &OBJC_PROTOCOL___UIWindowSceneDelegate_0;
    v4 = (void *)swift_dynamicCastObjCProtocolConditional(v1, 1, &v12);
    if (v4)
    {
      v5 = v4;
      if ((objc_msgSend(v4, "respondsToSelector:", "window") & 1) != 0)
      {
        objc_msgSend(v5, "window");
        swift_unknownObjectRelease(v3);
        return;
      }
    }
    *(_QWORD *)&v2 = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  v6 = objc_msgSend(v0, "windows", v2);
  v7 = sub_10004A07C(0, &qword_1011DD3F0, UIWindow_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v10 = v8;
    else
      v10 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v8);
    if (!v11)
      goto LABEL_11;
  }
  else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease(v8);
    return;
  }
  if ((v8 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v8 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

id UIWindowScene.rootViewController.getter()
{
  void *v0;
  void *v1;
  id v2;

  UIWindowScene.mainWindow.getter();
  v1 = v0;
  v2 = objc_msgSend(v0, "rootViewController");

  return v2;
}

BOOL UISceneActivationState.isForeground.getter(unint64_t a1)
{
  return a1 < 2;
}

uint64_t static UICollectionReusableView.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100007E8C(&qword_1011DD458);
  return String.init<A>(describing:)(&v2, v0);
}

void UICollectionView.register<A>(_:reuseIdentifier:)()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  id v2;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v2);

}

void UICollectionView.register<A>(_:ofKind:reuseIdentifier:)()
{
  void *v0;
  uint64_t ObjCClassFromMetadata;
  NSString v2;
  id v3;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "registerClass:forSupplementaryViewOfKind:withReuseIdentifier:", ObjCClassFromMetadata, v2, v3);

}

uint64_t UICollectionView.dequeue<A>(_:forItemAt:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  Class isa;
  id v16;
  uint64_t result;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;

  v6 = v5;
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v6, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v14, isa);

  result = swift_dynamicCastUnknownClass(v16, a5);
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(v25);
    v24 = 0xD00000000000001ELL;
    v25 = 0x8000000100E53E90;
    v18._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._countAndFlagsBits = 544497952;
    v20._object = (void *)0xE400000000000000;
    String.append(_:)(v20);
    v21 = sub_100048748(&qword_1011DD460, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v21);
    v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v24, v25, "MusicUtilities/UIKit+Utilities.swift", 36, 2, 83, 0);
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.dequeue<A>(_:ofKind:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t result;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v8 = v7;
  v28 = a1;
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v8, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v15, v16, isa);

  result = swift_dynamicCastUnknownClass(v18, a7);
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v20._object = (void *)0x8000000100E53EB0;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)(v28, 0);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v23._countAndFlagsBits = 544497952;
    v23._object = (void *)0xE400000000000000;
    String.append(_:)(v23);
    v24 = sub_100048748(&qword_1011DD460, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v24);
    v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "MusicUtilities/UIKit+Utilities.swift", 36, 2, 89, 0);
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.globalIndex(for:)()
{
  void *v0;
  id v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v1 = objc_msgSend(v0, "numberOfSections");
  result = IndexPath.section.getter();
  if (__OFADD__(result, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result + 1 >= (uint64_t)v1)
    v3 = (uint64_t)v1;
  else
    v3 = result + 1;
  if (v3 < 0)
    goto LABEL_20;
  if (!v3)
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    if (v3 == v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v6 = (uint64_t)objc_msgSend(v0, "numberOfItemsInSection:", v5);
    result = IndexPath.section.getter();
    if (v5 == result)
      break;
    v7 = __OFADD__(v4, v6);
    v4 += v6;
    if (v7)
      goto LABEL_18;
    if (v3 == ++v5)
      return 0;
  }
  if (IndexPath.item.getter() >= v6)
    return 0;
  v8 = IndexPath.item.getter();
  v7 = __OFADD__(v4, v8);
  result = v4 + v8;
  if (v7)
    goto LABEL_21;
  return result;
}

uint64_t UICollectionView.indexPath(forGlobalIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = sub_100007E8C(&qword_1011DD468);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(a2, 1, 1, v9);
  result = (uint64_t)objc_msgSend(v3, "numberOfSections");
  if (result < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    v12 = result;
    if (result)
    {
      v13 = 0;
      v14 = 0;
      while (1)
      {
        if (v12 == v14)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        result = (uint64_t)objc_msgSend(v3, "numberOfItemsInSection:", v14);
        if (__OFADD__(v13, result))
          goto LABEL_13;
        if (v13 + result > a1)
          break;
        ++v14;
        v13 += result;
        if (v12 == v14)
          return result;
      }
      result = a1 - v13;
      if (__OFSUB__(a1, v13))
        goto LABEL_15;
      IndexPath.init(item:section:)(result, v14);
      sub_100B97174(a2);
      v10((uint64_t)v8, 0, 1, v9);
      return sub_100B971B4((uint64_t)v8, a2);
    }
  }
  return result;
}

unint64_t UICollectionView.totalItemCount.getter()
{
  void *v0;
  unint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  result = (unint64_t)objc_msgSend(v0, "numberOfSections");
  if ((result & 0x8000000000000000) == 0)
  {
    v2 = 0;
    v3 = result;
    if (!result)
      return v2;
    v4 = 0;
    while (1)
    {
      result = (unint64_t)objc_msgSend(v0, "numberOfItemsInSection:", v4);
      v5 = __OFADD__(v2, result);
      v2 += result;
      if (v5)
        break;
      if (v3 == ++v4)
        return v2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *UICollectionView.isLast(indexPath:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *result;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = IndexPath.section.getter(v6);
  result = (char *)objc_msgSend(v2, "numberOfSections");
  v11 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  if ((char *)v9 == v11)
  {
    v13 = IndexPath.item.getter(v12);
    v14 = (char *)objc_msgSend(v2, "numberOfItemsInSection:", v9);
    result = (char *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (!__OFSUB__(v14, 1))
      return (char *)(v13 == (_QWORD)(v14 - 1));
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return 0;
}

uint64_t UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "indexPathsForVisibleSupplementaryElementsOfKind:", v5);

  v7 = type metadata accessor for IndexPath(0);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  v9 = (_QWORD *)swift_allocObject(&unk_101101080, 40, 7);
  v9[2] = v2;
  v9[3] = a1;
  v9[4] = a2;
  v10 = v2;
  swift_bridgeObjectRetain();
  return v8;
}

void sub_100B92F90(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;

  v6 = *(int *)(sub_100007E8C((uint64_t *)&unk_1011DD500) + 48);
  v7 = type metadata accessor for IndexPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, a1, v7);
  v8 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(a2, "supplementaryViewForElementKind:atIndexPath:", v8, isa);

  *(_QWORD *)(a3 + v6) = v10;
}

void UICollectionView.clearSelection(using:animated:)(void *a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  id v38;
  void **aBlock;
  uint64_t v40;
  double (*v41)(uint64_t, uint64_t);
  void *v42;
  void *v43;
  uint64_t v44;

  v3 = v2;
  v37 = a2;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007E8C(&qword_1011DD468);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v3;
  v13 = objc_msgSend(v3, "indexPathsForSelectedItems", v10);
  if (v13)
  {
    v14 = v13;
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v5);

    if (a1)
    {
      v16 = swift_allocObject(&unk_1011010A8, 33, 7);
      v17 = v38;
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = v17;
      *(_BYTE *)(v16 + 32) = v37 & 1;
      v43 = sub_100B9723C;
      v44 = v16;
      aBlock = _NSConcreteStackBlock;
      v40 = 1107296256;
      v41 = sub_1005CE710;
      v42 = &unk_1011010C0;
      v18 = _Block_copy(&aBlock);
      v19 = v44;
      swift_unknownObjectRetain(a1, v20);
      swift_bridgeObjectRetain();
      v21 = v17;
      swift_release(v19);
      v22 = swift_allocObject(&unk_1011010F8, 32, 7);
      *(_QWORD *)(v22 + 16) = v15;
      *(_QWORD *)(v22 + 24) = v21;
      v43 = sub_100B972A0;
      v44 = v22;
      aBlock = _NSConcreteStackBlock;
      v40 = 1107296256;
      v41 = sub_1005CE710;
      v42 = &unk_101101110;
      v23 = _Block_copy(&aBlock);
      v24 = v44;
      v25 = v21;
      objc_msgSend(a1, "animateAlongsideTransition:completion:", v18, v23, swift_release(v24).n128_f64[0]);
      _Block_release(v23);
      _Block_release(v18);
      swift_unknownObjectRelease(a1);
    }
    else
    {
      v26 = v15;
      v27 = *(_QWORD *)(v15 + 16);
      if (v27)
      {
        v28 = v26 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v29 = *(_QWORD *)(v6 + 72);
        v30 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        v36 = v26;
        swift_bridgeObjectRetain();
        while (1)
        {
          v30(v12, v28, v5);
          v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v31(v12, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v38, "deselectItemAtIndexPath:animated:", isa, v37 & 1);

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          v28 += v29;
          if (!--v27)
          {
            v33 = v36;
            goto LABEL_10;
          }
        }
        v34 = v36;
      }
      else
      {
        v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v33 = swift_bridgeObjectRetain();
LABEL_10:
        v31(v12, 1, 1, v5);
        v34 = v33;
      }
      swift_bridgeObjectRelease_n(v34, 2);
    }
  }
}

double sub_100B93364(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = a3;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007E8C(&qword_1011DD468);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v21 = a2;
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v22 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v16 = a4 & 1;
    while (1)
    {
      v15(v12, v14, v6);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v17(v12, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v23, "deselectItemAtIndexPath:animated:", isa, v16);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v14 += v22;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v17(v12, 1, 1, v6);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

double sub_100B9351C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  uint64_t v20;
  id v21;

  v21 = a3;
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007E8C(&qword_1011DD468);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, "isCancelled", v10))
  {
    v14 = *(_QWORD *)(a2 + 16);
    v20 = a2;
    if (v14)
    {
      v15 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v16 = *(_QWORD *)(v6 + 72);
      v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v17(v12, v15, v5);
        v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v18(v12, 0, 1, v5);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v21, "selectItemAtIndexPath:animated:scrollPosition:", isa, 0, 0);

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v15 += v16;
        if (!--v14)
          goto LABEL_8;
      }
    }
    else
    {
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      swift_bridgeObjectRetain();
LABEL_8:
      v18(v12, 1, 1, v5);
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v20).n128_u64[0];
  }
  return result;
}

uint64_t UICollectionView.isDraggingCell(at:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Class isa;
  id v14;
  id v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for UICellConfigurationState.DragState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for UICellConfigurationState(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v1, "cellForItemAtIndexPath:", isa);

  if (v14)
  {
    v15 = objc_msgSend(v14, "_bridgedConfigurationState");
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

    UICellConfigurationState.cellDragState.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for UICellConfigurationState.DragState.dragging(_:), v2);
    v16 = static UICellConfigurationState.DragState.== infix(_:_:)(v8, v6);

    v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    v17(v8, v2);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

void *UICollectionView.elementKindGlobalHeader.unsafeMutableAddressor()
{
  return &static UICollectionView.elementKindGlobalHeader;
}

unint64_t static UICollectionView.elementKindGlobalHeader.getter()
{
  return 0xD000000000000023;
}

id UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithRed:green:blue:alpha:", (double)a1 / 255.0, (double)a2 / 255.0, (double)a3 / 255.0, a4);
}

id UIColor.interpolate(to:ratio:)(void *a1, double a2)
{
  void *v2;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v4 = fmin(a2, 1.0);
  if (a2 < 0.0)
    v5 = 0.0;
  else
    v5 = v4;
  v13 = 0.0;
  v14 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  objc_msgSend(v2, "getRed:green:blue:alpha:", &v14, &v12, &v10, &v8);
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v13, &v11, &v9, &v7);
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", (1.0 - v5) * v14 + v5 * v13, (1.0 - v5) * v12 + v5 * v11, (1.0 - v5) * v10 + v5 * v9, (1.0 - v5) * v8 + v5 * v7);
}

double UIColor.hsba.getter()
{
  return sub_100B93AEC((SEL *)&selRef_getHue_saturation_brightness_alpha_);
}

double UIColor.rgba.getter()
{
  return sub_100B93AEC((SEL *)&selRef_getRed_green_blue_alpha_);
}

double sub_100B93AEC(SEL *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v6 = 0.0;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  objc_msgSend(v1, *a1, &v6, &v5, &v4, &v3);
  return v6;
}

UIImage_optional __swiftcall UIImage.init(systemName:font:scale:)(Swift::String systemName, UIFont font, UIImageSymbolScale scale)
{
  void *object;
  void *ObjCClassFromMetadata;
  NSString v7;
  id v8;
  objc_class *v9;
  Swift::Bool v10;
  objc_class *v11;
  UIImage_optional result;

  object = systemName._object;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v8 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:scale:", font.super.isa, scale);
  v9 = (objc_class *)objc_msgSend(ObjCClassFromMetadata, "systemImageNamed:withConfiguration:", v7, v8);

  v11 = v9;
  result.value.super.isa = v11;
  result.is_nil = v10;
  return result;
}

id UIImage.init(systemName:pointSize:weight:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *ObjCClassFromMetadata;
  NSString v8;
  id v9;
  id v10;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v9 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", a4, a1);
  v10 = objc_msgSend(ObjCClassFromMetadata, "systemImageNamed:withConfiguration:", v8, v9);

  return v10;
}

UIImage_optional __swiftcall UIImage.byCroppingToUniformCenter()()
{
  objc_class *v0;
  objc_class *v1;
  objc_class *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  Swift::Bool v7;
  double v8;
  double v9;
  double v10;
  double v11;
  objc_class *v12;
  double v13;
  double v14;
  UIImage_optional result;

  v1 = v0;
  v2 = v0;
  -[objc_class size](v2, "size");
  v4 = v3;
  v6 = v5;
  v13 = v5;
  v14 = v3;
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(&v14, &v13, &type metadata for CGFloat) & 1) != 0)
  {
    if (v6 >= v4)
    {
      v9 = round((v6 - v4) * 0.5);
      v8 = 0.0;
      v10 = v4;
      v11 = v4;
    }
    else
    {
      v8 = round((v4 - v6) * 0.5);
      v9 = 0.0;
      v10 = v6;
      v11 = v6;
    }
    v1 = (objc_class *)UIImage.byCropping(to:)(v8, v9, v10, v11);

  }
  v12 = v1;
  result.value.super.isa = v12;
  result.is_nil = v7;
  return result;
}

id UIImage.byCropping(to:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  void *v5;
  CGImage *v10;
  CGImage *v11;
  uint64_t v12;
  double v13;
  double v14;
  char v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGImageRef v20;
  CGImageRef v21;
  id v22;
  _QWORD v24[2];
  _QWORD v25[2];

  v5 = v4;
  v10 = (CGImage *)objc_msgSend(v4, "CGImage");
  if (!v10)
    return 0;
  v11 = v10;
  _s3__C6CGSizeVMa_2(0);
  *(double *)v25 = a3;
  *(double *)&v25[1] = a4;
  v24[0] = 0;
  v24[1] = 0;
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(v25, v24, v12) & 1) == 0)
    goto LABEL_7;
  objc_msgSend(v4, "scale");
  v14 = v13;
  *(double *)v25 = v13;
  v24[0] = 0x3FF0000000000000;
  v15 = static ApproximatelyEquatable.!=~ infix(_:_:)(v25, v24, &type metadata for CGFloat);
  v16 = v14 * a1;
  v17 = v14 * a2;
  v18 = v14 * a3;
  v19 = v14 * a4;
  if ((v15 & 1) == 0)
  {
    v19 = a4;
    v18 = a3;
    v17 = a2;
    v16 = a1;
  }
  v20 = CGImageCreateWithImageInRect(v11, *(CGRect *)&v16);
  if (!v20)
  {
LABEL_7:

    return 0;
  }
  v21 = v20;
  v22 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v20, objc_msgSend(v5, "imageOrientation"), v14);

  return v22;
}

UIViewController_optional __swiftcall UINavigationController.removeViewController(_:animated:)(UIViewController _, Swift::Bool animated)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  Class isa;
  Swift::Bool v14;
  objc_class *v15;
  UIViewController_optional result;

  v3 = v2;
  v6 = objc_msgSend(v2, "viewControllers");
  v7 = sub_10004A07C(0, (unint64_t *)&qword_1011DD470, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  swift_bridgeObjectRetain();
  sub_100B7EC7C((uint64_t)_.super.super.isa, v8);
  v10 = v9;
  LOBYTE(v6) = v11;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 0;
  }
  else
  {
    v12 = sub_100B921D4(v10);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "setViewControllers:animated:", isa, animated, swift_bridgeObjectRelease().n128_f64[0]);

  }
  v15 = (objc_class *)v12;
  result.value.super.super.isa = v15;
  result.is_nil = v14;
  return result;
}

double UIScrollView.normalizedContentOffset.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(v0, "adjustedContentInset");
  v2 = v1;
  objc_msgSend(v0, "contentOffset");
  return v2 + v3;
}

uint64_t UIScrollView.isScrolling.getter()
{
  void *v0;

  if ((objc_msgSend(v0, "isDragging") & 1) != 0
    || (objc_msgSend(v0, "isDecelerating") & 1) != 0
    || (objc_msgSend(v0, "_isVerticalBouncing") & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)objc_msgSend(v0, "_isHorizontalBouncing");
  }
}

uint64_t static UIStackView.SpacerView.layerClass.getter()
{
  return sub_10004A07C(0, &qword_1011DD478, CATransformLayer_ptr);
}

id UIStackView.SpacerView.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id UIStackView.SpacerView.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id UIStackView.SpacerView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id UIView.forAutolayout.getter()
{
  void *v0;
  id v2;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v2;
}

void UIView.Shadow.opacity.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double UIView.Shadow.offset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void UIView.Shadow.offset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t UIView.Shadow.init(color:opacity:radius:offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void UIView.Shadow.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v3 = *(id *)v1;
  NSObject.hash(into:)(a1);
  sub_100065200((id *)v1);
  if ((*(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v1 + 16);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = *(_QWORD *)(v1 + 32);
  if ((*(_QWORD *)(v1 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)(v1 + 24);
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v6;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
}

BOOL static UIView.Shadow.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
  return (static NSObject.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

Swift::Int UIView.Shadow.hashValue.getter()
{
  uint64_t v0;
  id v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, 0);
  v1 = *(id *)v0;
  NSObject.hash(into:)(v8);
  sub_100065200((id *)v0);
  if ((*(_QWORD *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)(v0 + 8);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((*(_QWORD *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)(v0 + 16);
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = *(_QWORD *)(v0 + 32);
  if ((*(_QWORD *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v0 + 24);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_100B94524()
{
  return UIView.Shadow.hashValue.getter();
}

void sub_100B9455C(uint64_t a1)
{
  UIView.Shadow.hash(into:)(a1);
}

Swift::Int sub_100B94594(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  double v5;
  double v6;
  id v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  _QWORD v11[9];

  v2 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(double *)(v1 + 24);
  v6 = *(double *)(v1 + 32);
  Hasher.init(_seed:)(v11, a1);
  v7 = v2;
  NSObject.hash(into:)(v11);

  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  sub_100B972C8(v5, v6);
  return Hasher._finalize()();
}

BOOL sub_100B94624(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
  v12 = static NSObject.== infix(_:_:)(*(_QWORD *)&v2, *(_QWORD *)&v7);
  result = 0;
  if ((v12 & 1) != 0 && v3 == v8 && v4 == v9)
    return v5 == v10 && v6 == v11;
  return result;
}

id UIView.shadowPathIsBounds.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "layer");
  v2 = objc_msgSend(v1, "shadowPathIsBounds");

  return v2;
}

void UIView.shadowPathIsBounds.setter(char a1)
{
  void *v1;
  id v3;

  v3 = objc_msgSend(v1, "layer");
  objc_msgSend(v3, "setShadowPathIsBounds:", a1 & 1);

}

void (*UIView.shadowPathIsBounds.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;
  id v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, "layer");
  v4 = objc_msgSend(v3, "shadowPathIsBounds");

  *(_BYTE *)(a1 + 8) = v4;
  return sub_100B947D0;
}

void sub_100B947D0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = objc_msgSend(*(id *)a1, "layer");
  objc_msgSend(v2, "setShadowPathIsBounds:", v1);

}

void UIView.shadow.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  float v8;
  float v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v4 = objc_msgSend(v1, "layer");
  v5 = objc_msgSend(v4, "shadowColor");

  if (v5)
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v5);

    v3 = v6;
  }
  v7 = objc_msgSend(v1, "layer");
  objc_msgSend(v7, "shadowOpacity");
  v9 = v8;

  v10 = v9;
  v11 = objc_msgSend(v1, "layer");
  objc_msgSend(v11, "shadowRadius");
  v13 = v12;

  v14 = objc_msgSend(v1, "layer");
  objc_msgSend(v14, "shadowOffset");
  v16 = v15;
  v18 = v17;

  *(_QWORD *)a1 = v3;
  *(double *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
}

void UIView.shadow.setter(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  double v7;
  id v8;

  v3 = objc_msgSend(v1, "layer");
  v4 = objc_msgSend(*(id *)a1, "CGColor");
  objc_msgSend(v3, "setShadowColor:", v4);

  v5 = objc_msgSend(v1, "layer");
  objc_msgSend(v5, "setShadowOffset:", *(double *)(a1 + 24), *(double *)(a1 + 32));

  v6 = objc_msgSend(v1, "layer");
  objc_msgSend(v6, "setShadowRadius:", *(double *)(a1 + 16));

  v8 = objc_msgSend(v1, "layer");
  v7 = *(double *)(a1 + 8);
  *(float *)&v7 = v7;
  objc_msgSend(v8, "setShadowOpacity:", v7);
  sub_100065200((id *)a1);

}

void (*UIView.shadow.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UIView.shadow.getter((uint64_t)(v3 + 10));
  return sub_100B94AE8;
}

void sub_100B94AE8(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  id v5;

  v2 = *a1;
  v3 = *a1 + 80;
  v4 = *(_OWORD *)(*a1 + 96);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(v3 + 32);
    v5 = *(id *)v2;
    UIView.shadow.setter(v2);

  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *(_QWORD *)(v2 + 72) = *(_QWORD *)(v3 + 32);
    UIView.shadow.setter(v2 + 40);
  }
  free((void *)v2);
}

uint64_t UIView.Border.init(view:)(void *a1)
{
  uint64_t v2;

  v2 = sub_100B97500(a1);

  return v2;
}

uint64_t static UIView.Border.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if ((a2 & 1) != 0)
  {
    if ((a5 & 1) == 0)
      return 0;
  }
  else if ((a5 & 1) != 0)
  {
    return 0;
  }
  if (*(double *)&a1 == *(double *)&a4)
  {
    sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
    return static NSObject.== infix(_:_:)(a3, a6) & 1;
  }
  return 0;
}

uint64_t sub_100B94C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2)
  {
    sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v2, v3) & 1;
  }
  return 0;
}

uint64_t UIView.border.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = v0;
  v2 = sub_100B97500(v1);

  return v2;
}

void UIView.border.setter(uint64_t a1, char a2, void *a3)
{
  void *v3;
  id v6;
  id v7;
  id v8;
  double v9;
  double v10;
  id v11;
  id v12;

  if (a3)
  {
    v6 = objc_msgSend(v3, "layer");
    v7 = v6;
    if ((a2 & 1) != 0)
    {
      objc_msgSend(v6, "setBorderWidth:", *(double *)&a1);
    }
    else
    {
      v8 = objc_msgSend(v3, "traitCollection");
      objc_msgSend(v8, "displayScale");
      v10 = v9;

      objc_msgSend(v7, "setBorderWidth:", *(double *)&a1 / fmax(v10, 1.0));
    }
  }
  else
  {
    v7 = objc_msgSend(v3, "layer");
    objc_msgSend(v7, "setBorderWidth:", 0.0);
  }

  v11 = objc_msgSend(v3, "layer");
  if (a3)
    v12 = objc_msgSend(a3, "CGColor");
  else
    v12 = 0;
  objc_msgSend(v11, "setBorderColor:", v12);

}

void (*UIView.border.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[3] = (uint64_t)v1;
  v3 = v1;
  v4 = sub_100B97500(v3);
  v6 = v5;
  v8 = v7;

  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  return sub_100B94E94;
}

void sub_100B94E94(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)a1[2];
  if ((a2 & 1) != 0)
  {
    v5 = v4;
    UIView.border.setter(v2, v3, v4);

  }
  else
  {
    UIView.border.setter(*a1, v3, v4);
  }
}

double UIView.untransformedFrame.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  double Width;
  id v12;
  double v13;
  double v14;
  id v15;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  objc_msgSend(v0, "center");
  v10 = v9;
  v17.origin.x = v2;
  v17.origin.y = v4;
  v17.size.width = v6;
  v17.size.height = v8;
  Width = CGRectGetWidth(v17);
  v12 = objc_msgSend(v0, "layer");
  objc_msgSend(v12, "anchorPoint");
  v14 = v13;

  v18.origin.x = v2;
  v18.origin.y = v4;
  v18.size.width = v6;
  v18.size.height = v8;
  CGRectGetHeight(v18);
  v15 = objc_msgSend(v0, "layer");
  objc_msgSend(v15, "anchorPoint");

  v19.origin.x = v2;
  v19.origin.y = v4;
  v19.size.width = v6;
  v19.size.height = v8;
  CGRectGetWidth(v19);
  v20.origin.x = v2;
  v20.origin.y = v4;
  v20.size.width = v6;
  v20.size.height = v8;
  CGRectGetHeight(v20);
  return v10 - Width * v14;
}

id UIView.untransformedFrame.setter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  double MinX;
  double Width;
  id v11;
  double v12;
  double v13;
  double v14;
  double MinY;
  double Height;
  id v17;
  double v18;
  double v19;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  Width = CGRectGetWidth(v21);
  v11 = objc_msgSend(v4, "layer");
  objc_msgSend(v11, "anchorPoint");
  v13 = v12;

  v14 = MinX + Width * v13;
  v22.origin.x = a1;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  MinY = CGRectGetMinY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  Height = CGRectGetHeight(v23);
  v17 = objc_msgSend(v4, "layer");
  objc_msgSend(v17, "anchorPoint");
  v19 = v18;

  objc_msgSend(v4, "setCenter:", v14, MinY + Height * v19);
  objc_msgSend(v4, "bounds");
  return objc_msgSend(v4, "setBounds:");
}

void (*UIView.untransformedFrame.modify(double **a1))(CGFloat **a1)
{
  uint64_t v1;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 4) = v1;
  *v3 = UIView.untransformedFrame.getter();
  *((_QWORD *)v3 + 1) = v4;
  *((_QWORD *)v3 + 2) = v5;
  *((_QWORD *)v3 + 3) = v6;
  return sub_100B951E4;
}

void sub_100B951E4(CGFloat **a1)
{
  CGFloat *v1;

  v1 = *a1;
  UIView.untransformedFrame.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

float UIView.contentCompressionResistancePriority.getter()
{
  void *v0;
  id v1;
  float v2;
  float v3;

  v1 = v0;
  objc_msgSend(v1, "contentCompressionResistancePriorityForAxis:", 0);
  v3 = v2;
  objc_msgSend(v1, "contentCompressionResistancePriorityForAxis:", 1);

  return v3;
}

float UIView.CompressionResistancePriority.init(view:)(void *a1)
{
  float v2;
  float v3;

  objc_msgSend(a1, "contentCompressionResistancePriorityForAxis:", 0);
  v3 = v2;
  objc_msgSend(a1, "contentCompressionResistancePriorityForAxis:", 1);

  return v3;
}

id UIView.contentCompressionResistancePriority.setter(double a1, float a2)
{
  void *v2;
  double v4;

  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0);
  *(float *)&v4 = a2;
  return objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v4);
}

id (*UIView.contentCompressionResistancePriority.modify(uint64_t a1))(uint64_t a1, double a2)
{
  void *v1;
  id v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)a1 = v1;
  v3 = v1;
  objc_msgSend(v3, "contentCompressionResistancePriorityForAxis:", 0);
  v5 = v4;
  objc_msgSend(v3, "contentCompressionResistancePriorityForAxis:", 1);
  v7 = v6;

  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v7;
  return sub_100B95384;
}

id sub_100B95384(uint64_t a1, double a2)
{
  id v2;
  int v3;
  double v4;

  v2 = *(id *)a1;
  LODWORD(a2) = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  objc_msgSend(*(id *)a1, "setContentCompressionResistancePriority:forAxis:", 0, a2);
  LODWORD(v4) = v3;
  return objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v4);
}

void UIView.CompressionResistancePriority.horizontal.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

float UIView.CompressionResistancePriority.vertical.getter(double a1, float a2)
{
  return a2;
}

double UIView.maxReadableContentWidth(for:)()
{
  return 1500.0;
}

UIImage *UIView.screenshot.getter()
{
  void *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  unsigned __int8 v5;
  UIImage *v6;
  CGSize v8;

  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  v5 = objc_msgSend(v0, "isOpaque");
  v8.width = v2;
  v8.height = v4;
  UIGraphicsBeginImageContextWithOptions(v8, v5, 0.0);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v0, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
  v6 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return v6;
}

Swift::Void __swiftcall UIView.visualizeLayout(with:)(UIColor with)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  objc_class *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  Class isa;

  v2 = v1;
  v4 = objc_msgSend(v2, "viewWithTag:", 1234);
  if (v4)
  {
    v24 = v4;
    objc_msgSend(v2, "bringSubviewToFront:");

  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v6 = -[objc_class colorWithAlphaComponent:](with.super.isa, "colorWithAlphaComponent:", 0.2);
    objc_msgSend(v5, "setBackgroundColor:", v6);

    v7 = with.super.isa;
    UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v5, "setTag:", 1234);
    objc_msgSend(v5, "setUserInteractionEnabled:", 0);
    objc_msgSend(v2, "addSubview:", v5);
    v8 = (void *)objc_opt_self(NSLayoutConstraint);
    v9 = sub_100007E8C(&qword_1011DC880);
    v10 = swift_allocObject(v9, 64, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100EA7AB0;
    v11 = objc_msgSend(v5, "topAnchor");
    v12 = objc_msgSend(v2, "topAnchor");
    v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

    *(_QWORD *)(v10 + 32) = v13;
    v14 = objc_msgSend(v5, "bottomAnchor");
    v15 = objc_msgSend(v2, "bottomAnchor");
    v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

    *(_QWORD *)(v10 + 40) = v16;
    v17 = objc_msgSend(v5, "leadingAnchor");
    v18 = objc_msgSend(v2, "leadingAnchor");
    v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

    *(_QWORD *)(v10 + 48) = v19;
    v20 = objc_msgSend(v5, "trailingAnchor");
    v21 = objc_msgSend(v2, "trailingAnchor");
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

    *(_QWORD *)(v10 + 56) = v22;
    specialized Array._endMutation()(v23);
    sub_10004A07C(0, &qword_1011DD490, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
}

void sub_100B957CC(UIColor a1)
{
  UIView.visualizeLayout(with:)(a1);
}

void UIView.traverseViewHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  char v17;

  v3 = v2;
  v17 = 0;
  a1(v3, &v17);
  if ((v17 & 1) != 0)
    return;
  v6 = objc_msgSend(v3, "subviews");
  v7 = sub_10004A07C(0, &qword_1011DD498, UIView_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
LABEL_19:
    if (v8 < 0)
      v16 = v8;
    else
      v16 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_16;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    v10 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_7:
    v12 = 0;
    v13 = v9 - 1;
    while (1)
    {
      sub_100B9760C(v11, a1, a2, &v17);

      if (v13 == v12)
        goto LABEL_16;
      v14 = v12 + 1;
      if ((v8 & 0xC000000000000001) != 0)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 + 1, v8);
      }
      else
      {
        if (v14 >= *(_QWORD *)(v10 + 16))
          goto LABEL_18;
        v15 = *(id *)(v8 + 8 * v12 + 40);
      }
      v11 = v15;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      ++v12;
      if (v17 == 1)
      {

        goto LABEL_16;
      }
    }
  }
  v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v8 + 32);
    goto LABEL_7;
  }
  __break(1u);
}

void UIView.statusBarFrame.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = objc_msgSend(v1, "window");
  v4 = 0;
  if (v3)
  {
    v5 = v3;
    v6 = objc_msgSend(v3, "windowScene");

    if (v6)
    {
      v7 = objc_msgSend(v6, "statusBarManager");
      if (v7)
      {
        v8 = v7;
        if ((objc_msgSend(v7, "isStatusBarHidden") & 1) == 0)
        {
          objc_msgSend(v8, "statusBarFrame");
          v14 = v13;
          v16 = v15;
          v18 = v17;
          v20 = v19;
          v21 = objc_msgSend(v6, "screen");
          v22 = objc_msgSend(v21, "coordinateSpace");

          objc_msgSend(v1, "convertRect:fromCoordinateSpace:", v22, v14, v16, v18, v20);
          v4 = v23;
          v10 = v24;
          v11 = v25;
          v12 = v26;

          swift_unknownObjectRelease(v22);
          v9 = 0;
          goto LABEL_8;
        }

      }
      else
      {

      }
    }
  }
  v9 = 1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_8:
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v9;
}

Swift::Void __swiftcall UILayoutGuide.visualizeLayout(with:)(UIColor with)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  objc_class *v6;
  id v7;
  id v8;
  objc_class *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  Class isa;

  v2 = v1;
  v4 = objc_msgSend(v2, "owningView");
  if (v4)
  {
    v5 = v4;
    v6 = (objc_class *)objc_msgSend(v4, "viewWithTag:", 1234);
    if (v6)
    {
      isa = v6;
      objc_msgSend(v5, "bringSubviewToFront:");
    }
    else
    {
      v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      v8 = -[objc_class colorWithAlphaComponent:](with.super.isa, "colorWithAlphaComponent:", 0.2);
      objc_msgSend(v7, "setBackgroundColor:", v8);

      v9 = with.super.isa;
      UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
      objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v7, "setTag:", 1234);
      objc_msgSend(v7, "setUserInteractionEnabled:", 0);
      objc_msgSend(v5, "addSubview:", v7);
      v10 = (void *)objc_opt_self(NSLayoutConstraint);
      v11 = sub_100007E8C(&qword_1011DC880);
      v12 = swift_allocObject(v11, 64, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100EA7AB0;
      v13 = objc_msgSend(v7, "topAnchor");
      v14 = objc_msgSend(v2, "topAnchor");
      v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

      *(_QWORD *)(v12 + 32) = v15;
      v16 = objc_msgSend(v7, "bottomAnchor");
      v17 = objc_msgSend(v2, "bottomAnchor");
      v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

      *(_QWORD *)(v12 + 40) = v18;
      v19 = objc_msgSend(v7, "leadingAnchor");
      v20 = objc_msgSend(v2, "leadingAnchor");
      v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

      *(_QWORD *)(v12 + 48) = v21;
      v22 = objc_msgSend(v7, "trailingAnchor");
      v23 = objc_msgSend(v2, "trailingAnchor");
      v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

      *(_QWORD *)(v12 + 56) = v24;
      specialized Array._endMutation()(v25);
      sub_10004A07C(0, &qword_1011DD490, NSLayoutConstraint_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v10, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      v5 = v7;
    }

  }
}

void sub_100B95ECC(UIColor a1)
{
  UILayoutGuide.visualizeLayout(with:)(a1);
}

BOOL UIViewController.canPresentViewControllers.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "popoverPresentationController");
  v2 = v1;
  if (v1)

  return v2 == 0;
}

BOOL UIViewController.canBeDismissed.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "presentingViewController");
  v2 = v1;
  if (v1)

  return v2 != 0;
}

Swift::Void __swiftcall UIViewController.dismiss(after:)(Swift::Double after)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  v15 = sub_10004A07C(0, (unint64_t *)&qword_1011DD4A0, OS_dispatch_queue_ptr);
  v23 = (void *)static OS_dispatch_queue.main.getter(v15, v16, v17, v18, v19, v20, v21, v22);
  static DispatchTime.now()(v23);
  + infix(_:_:)(v11, after);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v11, v8);
  v25 = swift_allocObject(&unk_101101148, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16);
  aBlock[4] = sub_100B97808;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DBD98;
  aBlock[3] = &unk_101101160;
  v26 = _Block_copy(aBlock);
  v27 = swift_release();
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_100048748((unint64_t *)&qword_1011DC5B0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_100007E8C((uint64_t *)&unk_1011DD4B0);
  v30 = sub_100B74B24();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v2, v28);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  v24(v14, v8);
}

void sub_100B96250(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "presentingViewController");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "presentedViewController");
      if (v6)
      {
        v7 = v6;
        sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
        if ((static NSObject.== infix(_:_:)(v7, v3) & 1) != 0)
          objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, 0);

        v3 = v5;
      }
      else
      {
        v7 = v5;
      }

      v3 = v7;
    }

  }
}

Swift::Void __swiftcall UIViewController.add(_:)(UIViewController a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;

  objc_msgSend(v1, "addChildViewController:", a1.super.super.isa);
  if (!objc_msgSend(v1, "isViewLoaded"))
    goto LABEL_6;
  v3 = objc_msgSend(v1, "view");
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  v5 = -[objc_class view](a1.super.super.isa, "view");
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  objc_msgSend(v4, "addSubview:", v5);

  v7 = objc_msgSend(v1, "view");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "setNeedsLayout");

LABEL_6:
    -[objc_class didMoveToParentViewController:](a1.super.super.isa, "didMoveToParentViewController:", v1);
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall UIViewController.remove(_:)(UIViewController a1)
{
  id v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  void *v11;

  v3 = -[objc_class parentViewController](a1.super.super.isa, "parentViewController");
  if (v3)
  {
    v4 = v3;

    if (v4 == v1)
    {
      -[objc_class willMoveToParentViewController:](a1.super.super.isa, "willMoveToParentViewController:", 0);
      if (!objc_msgSend(v1, "isViewLoaded")
        || !-[objc_class isViewLoaded](a1.super.super.isa, "isViewLoaded"))
      {
        goto LABEL_11;
      }
      v5 = -[objc_class view](a1.super.super.isa, "view");
      if (v5)
      {
        v6 = v5;
        v7 = objc_msgSend(v1, "view");
        if (v7)
        {
          v8 = v7;
          v9 = objc_msgSend(v6, "isDescendantOfView:", v7);

          if (!v9)
          {
LABEL_11:
            -[objc_class removeFromParentViewController](a1.super.super.isa, "removeFromParentViewController");
            return;
          }
          v10 = -[objc_class view](a1.super.super.isa, "view");
          if (v10)
          {
            v11 = v10;
            objc_msgSend(v10, "removeFromSuperview");

            goto LABEL_11;
          }
LABEL_14:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_14;
    }
  }
}

Swift::Bool __swiftcall UIViewController.isDescendant(of:)(UIViewController of)
{
  void *v1;
  objc_class *v3;
  objc_class *v4;
  id v5;
  void *v6;
  Swift::Bool v7;

  v3 = (objc_class *)objc_msgSend(v1, "parentViewController");
  if (v3 && (v4 = v3, v3, v4 == of.super.super.isa))
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    v5 = objc_msgSend(v1, "parentViewController");
    if (v5)
    {
      v6 = v5;
      v7 = UIViewController.isDescendant(of:)(of);

      LOBYTE(v5) = v7;
    }
  }
  return (char)v5;
}

void UIViewController.traverseViewControllerHierarchy(_:)(void (*a1)(void *, char *, __n128), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  double v14;
  id v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[31];
  char v20;

  v3 = v2;
  v20 = 0;
  ((void (*)(void *, char *))a1)(v3, &v20);
  v6 = objc_msgSend(v3, "childViewControllers");
  v7 = sub_10004A07C(0, (unint64_t *)&qword_1011DD470, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
    goto LABEL_17;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    swift_beginAccess(&v20, v19, 0, 0);
    v10 = 4;
    while (1)
    {
      v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v8)
          : *(id *)(v8 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      if ((v20 & 1) != 0)
      {

        goto LABEL_12;
      }
      sub_100B97810(v11, a1, a2, &v20);

      ++v10;
      if (v13 == v9)
        goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v8);
  }
LABEL_12:
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)&v14 = swift_beginAccess(&v20, v18, 0, 0).n128_u64[0];
  if ((v20 & 1) == 0)
  {
    v15 = objc_msgSend(v3, "presentedViewController", v14);
    if (v15)
    {
      v16 = v15;
      sub_100B97810(v15, a1, a2, &v20);

    }
  }
}

uint64_t sub_100B967B8(uint64_t a1, _BYTE *a2, void (*a3)(uint64_t, _BYTE *), uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  _BYTE v10[24];

  swift_beginAccess(a5, v10, 33, 0);
  a3(a1, a5);
  swift_endAccess(v10);
  result = swift_beginAccess(a5, v10, 0, 0);
  *a2 = *a5;
  return result;
}

NSLayoutConstraint __swiftcall NSLayoutConstraint.with(priority:)(__C::UILayoutPriority priority)
{
  void *v1;
  id v3;

  objc_msgSend(v1, "setPriority:", *(double *)&priority.rawValue);
  return (NSLayoutConstraint)v3;
}

void UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  _QWORD *v3;
  void *v4;
  Class isa;
  _BYTE v6[96];

  v0 = sub_100007E8C(&qword_1011DD4C0);
  inited = swift_initStackObject(v0, v6);
  *(_OWORD *)(inited + 16) = xmmword_100EA7BA0;
  *(_QWORD *)(inited + 32) = 3;
  *(_QWORD *)(inited + 40) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 48) = 5;
  *(_QWORD *)(inited + 56) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 64) = 6;
  *(_QWORD *)(inited + 72) = 0xBFF0000000000000;
  *(_QWORD *)(inited + 80) = 4;
  *(_QWORD *)(inited + 88) = 0xBFF0000000000000;
  v2 = sub_100B72FA8(inited);
  swift_setDeallocating(inited);
  v3 = sub_100B97310(v2, (uint64_t (*)(_QWORD, double))sub_100B97A18);
  swift_bridgeObjectRelease(v2);
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_10004A07C(0, &qword_1011DD490, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", isa);
  swift_bridgeObjectRelease(v3);

}

id sub_100B969E0(uint64_t a1, void *a2, char a3, void *a4, double a5, double a6)
{
  id v12;
  id v13;
  id v14;
  _QWORD v16[4];
  _QWORD v17[4];

  v17[3] = sub_10004A07C(0, &qword_1011DD498, UIView_ptr);
  v17[0] = a2;
  v12 = a2;
  if ((a3 & 1) != 0)
    v13 = objc_msgSend(a4, "layoutMarginsGuide");
  else
    v13 = a4;
  v14 = v13;
  sub_10004A07C(0, &qword_1011DD490, NSLayoutConstraint_ptr);
  v16[3] = sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
  v16[0] = v14;
  return sub_100B96AD4(v17, a1, 0, v16, a1, 1.0, a5 * a6);
}

id sub_100B96AD4(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  id v25;
  uint64_t v27;
  uint64_t v28;

  v14 = a1[3];
  v15 = sub_100007E68(a1, v14);
  v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
  v17 = a4[3];
  if (v17)
  {
    v18 = sub_100007E68(a4, a4[3]);
    v27 = a5;
    v28 = a2;
    v19 = a3;
    v20 = *(_QWORD *)(v17 - 8);
    __chkstk_darwin(v18);
    v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v22);
    v23 = _bridgeAnythingToObjectiveC<A>(_:)(v22, v17);
    v24 = *(void (**)(char *, uint64_t))(v20 + 8);
    a3 = v19;
    v24(v22, v17);
    a5 = v27;
    a2 = v28;
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(a4);
  }
  else
  {
    v23 = 0;
  }
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v16, a2, a3, v23, a5, a6, a7);
  swift_unknownObjectRelease(v16);
  swift_unknownObjectRelease(v23);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(a1);
  return v25;
}

void Array<A>.activate()(uint64_t a1)
{
  sub_100B96CCC(a1, (SEL *)&selRef_activateConstraints_);
}

void UIView.addSubviewAnchoredToBounds(_:useLayoutMarginsGuide:padding:)(void *a1)
{
  void *v1;

  objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", a1);
  UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)();
}

void Array<A>.deactivate()(uint64_t a1)
{
  sub_100B96CCC(a1, (SEL *)&selRef_deactivateConstraints_);
}

void sub_100B96CCC(uint64_t a1, SEL *a2)
{
  void *v3;
  Class isa;

  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_10004A07C(0, &qword_1011DD490, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, *a2, isa);

}

uint64_t NSTextAlignment.init(languageCode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for Locale.Language(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Locale.Language.init(identifier:)(a1, a2);
  v9 = Locale.Language.characterDirection.getter(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = 4;
  if (v9 == 2)
    v10 = 2;
  if (v9 == 1)
    return 0;
  else
    return v10;
}

Swift::Void __swiftcall NSTextAlignment.flip()()
{
  uint64_t *v0;
  uint64_t v1;

  if (*v0)
  {
    if (*v0 != 2)
      return;
    v1 = 0;
  }
  else
  {
    v1 = 2;
  }
  *v0 = v1;
}

uint64_t NSTextAlignment.ctTextAlignment.getter(unint64_t a1)
{
  if (a1 >= 5)
    return 4;
  else
    return (0x403010200uLL >> (8 * a1));
}

uint64_t UIViewPropertyAnimator.UpdateReason.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 4)
    return 3;
  else
    return 0x2010003u >> (8 * a1);
}

_QWORD *sub_100B96E5C@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result >= 4uLL)
    v2 = 3;
  else
    v2 = 0x2010003u >> (8 * *result);
  *a2 = v2;
  return result;
}

void UIViewPropertyAnimator.addModifiedAnimations(with:animations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v7[4] = a2;
  v8 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1001DBD98;
  v7[3] = &unk_101101188;
  v5 = _Block_copy(v7);
  v6 = v8;
  swift_retain(a3);
  objc_msgSend(v3, "addAnimations:", v5, swift_release(v6).n128_f64[0]);
  _Block_release(v5);
}

UIViewPropertyAnimator __swiftcall UIViewPropertyAnimator.init(springTimingParameters:)(UISpringTimingParameters springTimingParameters)
{
  id v2;
  id v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  -[objc_class settlingDuration](springTimingParameters.super.isa, "settlingDuration");
  v3 = objc_msgSend(v2, "initWithDuration:timingParameters:", springTimingParameters.super.isa);

  return (UIViewPropertyAnimator)v3;
}

id UISpringTimingParameters.init(dampingRatio:response:)(double a1, double a2)
{
  double v2;
  double v3;

  v2 = 6.28318531 / a2 * (6.28318531 / a2);
  v3 = sqrt(v2);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithMass:stiffness:damping:initialVelocity:", 1.0, v2, (v3 + v3) * a1, 0.0, 0.0);
}

id UIView.setAnchorPoint(_:preserveFrame:)(char a1, double a2, double a3)
{
  void *v3;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;

  if ((a1 & 1) == 0)
    return objc_msgSend(v3, "setAnchorPoint:", a2, a3);
  v6 = UIView.untransformedFrame.getter();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v3, "setAnchorPoint:", a2, a3);
  return UIView.untransformedFrame.setter(v6, v8, v10, v12);
}

double sub_100B9706C()
{
  double result;

  static UIView.Shadow.identity = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  unk_10124EFF8 = xmmword_100EE89D0;
  result = 0.0;
  unk_10124F008 = xmmword_100EE89E0;
  return result;
}

uint64_t *UIView.Shadow.identity.unsafeMutableAddressor()
{
  if (qword_1011DC330 != -1)
    swift_once(&qword_1011DC330, sub_100B9706C);
  return &static UIView.Shadow.identity;
}

id static UIView.Shadow.identity.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;

  if (qword_1011DC330 != -1)
    swift_once(&qword_1011DC330, sub_100B9706C);
  v2 = (void *)static UIView.Shadow.identity;
  *(_QWORD *)a1 = static UIView.Shadow.identity;
  *(_OWORD *)(a1 + 8) = unk_10124EFF8;
  *(_OWORD *)(a1 + 24) = unk_10124F008;
  return v2;
}

uint64_t sub_100B97174(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DD468);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B971B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DD468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B971FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100B97228(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100B92F90(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100B97234()
{
  return sub_100B97268(33);
}

double sub_100B9723C(uint64_t a1)
{
  uint64_t v1;

  return sub_100B93364(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100B97248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100B97258(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100B97260()
{
  return sub_100B97268(32);
}

uint64_t sub_100B97268(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

double sub_100B972A0(void *a1)
{
  uint64_t v1;

  return sub_100B9351C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for UIStackView.SpacerView()
{
  return objc_opt_self(_TtCE14MusicUtilitiesCSo11UIStackView10SpacerView);
}

void sub_100B972C8(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

_QWORD *sub_100B97310(uint64_t a1, uint64_t (*a2)(_QWORD, double))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    result = (_QWORD *)sub_1007186B4(a1);
    v5 = (uint64_t)result;
    v7 = v6;
    v8 = 0;
    v9 = a1 + 64;
    v20 = v3;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != v7)
        goto LABEL_23;
      v22 = v8;
      v12 = a2(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5), *(double *)(*(_QWORD *)(a1 + 56) + 8 * v5));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v14);
      v10 = 1 << *(_BYTE *)(a1 + 32);
      if (v5 >= v10)
        goto LABEL_24;
      v15 = *(_QWORD *)(v9 + 8 * v11);
      if ((v15 & (1 << v5)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a1 + 36) != v7)
        goto LABEL_26;
      v16 = v15 & (-2 << (v5 & 0x3F));
      if (v16)
      {
        v10 = __clz(__rbit64(v16)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v17 = v11 + 1;
        v18 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v18)
        {
          v19 = *(_QWORD *)(v9 + 8 * v17);
          if (v19)
          {
LABEL_18:
            v10 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v11)
            {
              v19 = *(_QWORD *)(a1 + 80 + 8 * v11++);
              if (v19)
              {
                v17 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v8 = v22 + 1;
      v5 = v10;
      if (v22 + 1 == v20)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_100B97500(void *a1)
{
  id v2;
  double v3;
  double v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = objc_msgSend(a1, "layer");
  objc_msgSend(v2, "borderWidth");
  v4 = v3;

  if (v4 <= 0.0)
    return 0;
  v5 = objc_msgSend(a1, "layer");
  v6 = objc_msgSend(v5, "borderColor");

  if (!v6)
    return 0;
  v7 = objc_msgSend(a1, "layer");
  objc_msgSend(v7, "borderWidth");
  v9 = v8;

  v10 = v9;
  objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v6);

  return v10;
}

void sub_100B9760C(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v16[5];
  char v17;

  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  a2(a1, a4);
  v17 = *a4;
  if ((v17 & 1) == 0)
  {
    v6 = objc_msgSend(a1, "subviews");
    v7 = sub_10004A07C(0, &qword_1011DD498, UIView_ptr);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
      goto LABEL_20;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
        v10 = v8 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        v10 = v8 & 0xFFFFFFFFFFFFFF8;
        if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v11 = *(id *)(v8 + 32);
      }
      v12 = 0;
      while (1)
      {
        sub_100B9760C(v11, sub_100B97DA0, v16, &v17);

        if (v9 - 1 == v12)
          goto LABEL_16;
        v13 = v12 + 1;
        if ((v8 & 0xC000000000000001) != 0)
        {
          v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 + 1, v8);
        }
        else
        {
          if (v13 >= *(_QWORD *)(v10 + 16))
            goto LABEL_19;
          v14 = *(id *)(v8 + 8 * v12 + 40);
        }
        v11 = v14;
        if (__OFADD__(v13, 1))
          break;
        ++v12;
        if (v17 == 1)
        {

LABEL_16:
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (v8 < 0)
        v15 = v8;
      else
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease();
      if (!v9)
        goto LABEL_24;
    }
  }
}

uint64_t sub_100B977E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100B97808()
{
  uint64_t v0;

  sub_100B96250(v0);
}

void sub_100B97810(void *a1, void (*a2)(void *, char *, __n128), uint64_t a3, char *a4)
{
  __n128 v7;
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  double v17;
  id v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[6];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[31];
  char v25;

  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v7 = swift_beginAccess(a4, v24, 33, 0);
  a2(a1, a4, v7);
  swift_endAccess(v24);
  *(_QWORD *)&v8 = swift_beginAccess(a4, v24, 0, 0).n128_u64[0];
  v25 = *a4;
  v9 = objc_msgSend(a1, "childViewControllers", v8);
  v10 = sub_10004A07C(0, (unint64_t *)&qword_1011DD470, UIViewController_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
    goto LABEL_17;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v12)
  {
    swift_beginAccess(&v25, v23, 0, 0);
    v13 = 4;
    while (1)
    {
      v14 = (v11 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11)
          : *(id *)(v11 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      if (v25 == 1)
      {

        goto LABEL_12;
      }
      sub_100B97810(v14, sub_100B97D94, v21, &v25);

      ++v13;
      if (v16 == v12)
        goto LABEL_12;
    }
    __break(1u);
LABEL_17:
    if (v11 < 0)
      v20 = v11;
    else
      v20 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v11);
  }
LABEL_12:
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)&v17 = swift_beginAccess(&v25, v22, 0, 0).n128_u64[0];
  if ((v25 & 1) == 0)
  {
    v18 = objc_msgSend(a1, "presentedViewController", v17);
    if (v18)
    {
      v19 = v18;
      sub_100B97810(v18, sub_100B97D94, v21, &v25);

    }
  }
}

id sub_100B97A18(uint64_t a1, double a2)
{
  uint64_t v2;

  return sub_100B969E0(a1, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), *(void **)(v2 + 32), a2, *(double *)(v2 + 40));
}

unint64_t sub_100B97A30()
{
  unint64_t result;

  result = qword_1011DD4C8;
  if (!qword_1011DD4C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UIView.Shadow, &type metadata for UIView.Shadow);
    atomic_store(result, (unint64_t *)&qword_1011DD4C8);
  }
  return result;
}

unint64_t sub_100B97A78()
{
  unint64_t result;

  result = qword_1011DD4D0;
  if (!qword_1011DD4D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UIViewPropertyAnimator.UpdateReason, &type metadata for UIViewPropertyAnimator.UpdateReason);
    atomic_store(result, (unint64_t *)&qword_1011DD4D0);
  }
  return result;
}

uint64_t _s6ShadowVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t _s6ShadowVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 _s6ShadowVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s6ShadowVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for UIView.Shadow()
{
  return &type metadata for UIView.Shadow;
}

uint64_t _s6BorderVwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void _s6BorderVwxx(uint64_t a1)
{

}

uint64_t _s6BorderVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = (void *)a2[2];
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  return a1;
}

__n128 _s6BorderVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s6BorderVwta(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for UIView.Border()
{
  return &type metadata for UIView.Border;
}

_QWORD *_s29CompressionResistancePriorityVwCP(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UIView.CompressionResistancePriority()
{
  return &type metadata for UIView.CompressionResistancePriority;
}

uint64_t _s12UpdateReasonOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100B97D14 + 4 * byte_100EE7B45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100B97D48 + 4 * byte_100EE7B40[v4]))();
}

uint64_t sub_100B97D48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B97D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B97D58);
  return result;
}

uint64_t sub_100B97D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B97D6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100B97D70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B97D78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIViewPropertyAnimator.UpdateReason()
{
  return &type metadata for UIViewPropertyAnimator.UpdateReason;
}

uint64_t sub_100B97D94(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return sub_100B967B8(a1, a2, *(void (**)(uint64_t, _BYTE *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE **)(v2 + 32));
}

uint64_t sub_100B97DA0(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v4;
  uint64_t result;

  v4 = *(_BYTE **)(v2 + 32);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(v2 + 16))(a1, v4);
  *a2 = *v4;
  return result;
}

uint64_t sub_100B97DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s9_ObserverC18HandlerAssociationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t URL.appending(_:)(uint64_t a1, uint64_t a2, char a3)
{
  return URL.appendingPathComponent(_:isDirectory:)(a1, a2, (a3 & 1) == 0);
}

uint64_t URL.init(string:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100007E8C(&qword_1011DCFF8);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
    goto LABEL_4;
  URL.init(string:)(a1, a2);
  swift_bridgeObjectRelease(a2);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_10004FF60((uint64_t)v8, &qword_1011DCFF8);
LABEL_4:
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
}

void URL.parametrize(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __n128 v50;
  __n128 v51;
  unint64_t v52;
  unint64_t v53;
  __n128 v54;
  char *v55;
  __n128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;

  v5 = sub_100007E8C(&qword_1011DCFF8);
  __chkstk_darwin(v5);
  v68 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for URLQueryItem(0);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v77 = (char *)&v63 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - v12;
  v14 = sub_100007E8C(&qword_1011DD570);
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URLComponents(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v69 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v65 = a2;
  v66 = v21;
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
  v67 = v20;
  v22(a2, v2);
  if (*(_QWORD *)(a1 + 16))
  {
    URLComponents.init(url:resolvingAgainstBaseURL:)(v2, 0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_10004FF60((uint64_t)v16, &qword_1011DD570);
    }
    else
    {
      v63 = v18;
      v64 = v17;
      v23.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v18 + 32))(v69, v16, v17);
      v24 = URLComponents.queryItems.getter(v23);
      if (v24)
        v25 = (char *)v24;
      else
        v25 = (char *)_swiftEmptyArrayStorage;
      v26 = swift_bridgeObjectRetain();
      v27 = sub_100B999B8(v26);
      swift_bridgeObjectRelease(a1);
      v79 = v27;
      sub_100B9987C(&v79);
      v28 = v79;
      v74 = v79[2];
      if (v74)
      {
        v29 = 0;
        v72 = v79;
        v73 = v79 + 4;
        v70 = v13;
        v71 = v8;
        while (v29 < v28[2])
        {
          v75 = v29;
          v33 = &v73[4 * v29];
          v34 = *v33;
          v35 = v33[1];
          v37 = v33[2];
          v36 = v33[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          URLQueryItem.init(name:value:)(v34, v35, v37, v36);
          swift_bridgeObjectRelease(v36);
          v38 = *((_QWORD *)v25 + 2);
          if (v38)
          {
            v39 = v76;
            v40 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
            v41 = (uint64_t)v25;
            swift_bridgeObjectRetain();
            v42 = 0;
            v43 = *(_QWORD *)(v39 + 72);
            v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v39 + 16);
            while (1)
            {
              v45 = v44(v77, v41 + v40, v78);
              v46 = URLQueryItem.name.getter(v45);
              v48 = v47;
              if (v46 == v34 && v47 == v35)
                break;
              v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v34, v35, 0);
              v50 = swift_bridgeObjectRelease(v48);
              (*(void (**)(char *, uint64_t, __n128))(v76 + 8))(v77, v78, v50);
              if ((v49 & 1) != 0)
                goto LABEL_25;
              ++v42;
              v40 += v43;
              if (v38 == v42)
              {
                swift_bridgeObjectRelease(v35);
                v25 = (char *)v41;
                v51 = swift_bridgeObjectRelease(v41);
                v13 = v70;
                v8 = v71;
                v28 = v72;
                goto LABEL_20;
              }
            }
            v54 = swift_bridgeObjectRelease(v35);
            (*(void (**)(char *, uint64_t, __n128))(v76 + 8))(v77, v78, v54);
LABEL_25:
            swift_bridgeObjectRelease(v35);
            v25 = (char *)v41;
            swift_bridgeObjectRelease(v41);
            if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
              v25 = (char *)sub_100B989A4(v41);
            v28 = v72;
            if (v42 >= *((_QWORD *)v25 + 2))
              goto LABEL_34;
            v55 = &v25[v40];
            v13 = v70;
            (*(void (**)(char *, char *, uint64_t))(v76 + 40))(v55, v70, v78);
            v8 = v71;
          }
          else
          {
            v51 = swift_bridgeObjectRelease(v35);
            v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v76 + 16);
LABEL_20:
            ((void (*)(char *, char *, uint64_t, __n128))v44)(v8, v13, v78, v51);
            if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
              v25 = (char *)sub_100B7FE98(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
            v53 = *((_QWORD *)v25 + 2);
            v52 = *((_QWORD *)v25 + 3);
            if (v53 >= v52 >> 1)
              v25 = (char *)sub_100B7FE98(v52 > 1, v53 + 1, 1, v25);
            *((_QWORD *)v25 + 2) = v53 + 1;
            v30 = v76;
            v31 = (unint64_t)&v25[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
                                       + *(_QWORD *)(v76 + 72) * v53];
            v32 = v78;
            (*(void (**)(unint64_t, char *, uint64_t))(v76 + 32))(v31, v8, v78);
            (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v32);
          }
          v29 = v75 + 1;
          if (v75 + 1 == v74)
            goto LABEL_29;
        }
        __break(1u);
LABEL_34:
        __break(1u);
        swift_release();
        __break(1u);
      }
      else
      {
LABEL_29:
        v56 = swift_release();
        v57 = v69;
        v58 = URLComponents.queryItems.setter(v25, v56);
        v59 = (uint64_t)v68;
        URLComponents.url.getter(v58);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v57, v64);
        v61 = v66;
        v60 = v67;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v59, 1, v67) == 1)
        {
          sub_10004FF60(v59, &qword_1011DCFF8);
        }
        else
        {
          v62 = v65;
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v65, v60);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v62, v59, v60);
        }
      }
    }
  }
}

uint64_t static URL.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return URL.appendingPathComponent(_:isDirectory:)(a2, a3, (a4 & 1) == 0);
}

uint64_t URLComponents.queryItemsDictionary.getter()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v0 = type metadata accessor for URLQueryItem(0);
  v40 = *(_QWORD *)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = URLComponents.queryItems.getter(v1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v7 = (_QWORD *)sub_100B721CC((uint64_t)_swiftEmptyArrayStorage);
  v8 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v35 = v5;
  v36 = v3;
  v9 = v5 + v8;
  v10 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v40 + 16);
  v38 = *(_QWORD *)(v40 + 72);
  v39 = v10;
  v37 = v0;
  for (i = v10(v3, v9, v0); ; i = v39(v3, v9, v0))
  {
    v14 = URLQueryItem.value.getter(i);
    if (v15)
      break;
LABEL_6:
    (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v3, v0, v13);
    v9 += v38;
    if (!--v6)
    {
      swift_bridgeObjectRelease(v35);
      return (uint64_t)v7;
    }
  }
  v41 = v15;
  v16 = v14;
  URLQueryItem.name.getter();
  v18 = v17;
  v19 = String.lowercased()();
  swift_bridgeObjectRelease(v18);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v42 = v7;
  v22 = sub_100B87504(v19._countAndFlagsBits, (uint64_t)v19._object);
  v23 = v7[2];
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    v26 = v21;
    if (v7[3] < v25)
    {
      sub_100B989CC(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_100B87504(v19._countAndFlagsBits, (uint64_t)v19._object);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_26;
      v22 = v27;
      v29 = v41;
      v7 = v42;
      if ((v26 & 1) == 0)
        goto LABEL_16;
LABEL_4:
      v12 = (uint64_t *)(v7[7] + 16 * v22);
      swift_bridgeObjectRelease(v12[1]);
      *v12 = v16;
      v12[1] = v29;
LABEL_5:
      swift_bridgeObjectRelease(v19._object);
      v13 = swift_bridgeObjectRelease(0x8000000000000000);
      v3 = v36;
      v0 = v37;
      goto LABEL_6;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v29 = v41;
      v7 = v42;
      if ((v21 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100B99344();
      v29 = v41;
      v7 = v42;
      if ((v26 & 1) != 0)
        goto LABEL_4;
    }
LABEL_16:
    v7[(v22 >> 6) + 8] |= 1 << v22;
    *(Swift::String *)(v7[6] + 16 * v22) = v19;
    v30 = (uint64_t *)(v7[7] + 16 * v22);
    *v30 = v16;
    v30[1] = v29;
    v31 = v7[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_25;
    v7[2] = v33;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100B98770(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = 16 * v16;
    v21 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v23 = *v21;
    v22 = v21[1];
    v24 = (uint64_t *)(*(_QWORD *)(a4 + 56) + v20);
    v25 = *v24;
    v26 = v24[1];
    *v11 = v23;
    v11[1] = v22;
    v11[2] = v25;
    v11[3] = v26;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_100B98990(uint64_t a1)
{
  return sub_100B7FCA0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_100B989A4(uint64_t a1)
{
  return sub_100B7FE98(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_100B989B8(uint64_t a1)
{
  return sub_100B7FEAC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_100B989CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DC4B8);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release();
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_100B98CF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DC4B0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v18 >= v37)
          goto LABEL_39;
        v19 = v38[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v37)
            goto LABEL_39;
          v19 = v38[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v37)
            {
LABEL_39:
              swift_release(v5);
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v38[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v13 >= v37)
                  goto LABEL_39;
                v19 = v38[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 24 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (void *)v21[2];
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v26 = v24;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
      if (v22)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)(v40, v23, v22);
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v8 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        v14 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v14);
      *v15 = v23;
      v15[1] = v22;
      v15[2] = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_100B99030(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DC4E8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100B99344()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100007E8C(&qword_1011DC4B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100B994FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_100007E8C(&qword_1011DC4B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * v15);
    v18 = v17[1];
    v19 = (void *)v17[2];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    v23 = v19;
    swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100B996C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100007E8C(&qword_1011DC4E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100B9987C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100B9A6AC(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_100B99BC4(v4);
  *a1 = v2;
}

_QWORD *sub_100B998E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100007E8C(&qword_1011DD590);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size_0((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_100483BE4(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_10004FA7C(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

_QWORD *sub_100B999B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100007E8C(&qword_1011DD578);
  v4 = (_QWORD *)swift_allocObject(v3, 32 * v1 + 32, 7);
  v5 = j__malloc_size_0(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 1;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 5);
  v7 = sub_100B98770((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain();
  sub_10004FA7C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t JSSettingsUnauthenticatedSections.additionalSections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s9ComponentOwxx(uint64_t *a1)
{
  return sub_100B99AB8(*a1, a1[1]);
}

uint64_t sub_100B99AB8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t _s9ComponentOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  JSSettingsUnauthenticatedSections.additionalSections.getter();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s9ComponentOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  JSSettingsUnauthenticatedSections.additionalSections.getter();
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100B99AB8(v6, v7);
  return a1;
}

__n128 _s9ComponentOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s9ComponentOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_100B99AB8(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for URL.Component()
{
  return &type metadata for URL.Component;
}

void sub_100B99BC4(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v21;
  Swift::Int v22;
  uint64_t *v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  Swift::Int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  Swift::Int v117;
  Swift::Int v118;
  uint64_t v119;
  char *v120;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100B9A280(0, v3, 1, a1);
      return;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_153;
  v117 = v4;
  v114 = a1;
  if (v3 <= 1)
  {
    v9 = _swiftEmptyArrayStorage;
    v120 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_119:
      v106 = v12;
      v116 = v9;
      if (v13 < 2)
        goto LABEL_116;
      v107 = *v114;
      while (1)
      {
        v108 = v13 - 2;
        if (v13 < 2)
          goto LABEL_148;
        if (!v107)
          goto LABEL_161;
        v105 = v106;
        v109 = *(_QWORD *)&v106[16 * v108 + 32];
        v110 = *(_QWORD *)&v106[16 * v13 + 24];
        sub_100B9A360((char *)(v107 + 32 * v109), (char *)(v107 + 32 * *(_QWORD *)&v106[16 * v13 + 16]), v107 + 32 * v110, v120);
        if (v1)
          goto LABEL_115;
        if (v110 < v109)
          goto LABEL_149;
        if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
          v105 = sub_100B9A684((uint64_t)v105);
        if (v108 >= *((_QWORD *)v105 + 2))
          goto LABEL_150;
        v111 = &v105[16 * v108 + 32];
        *(_QWORD *)v111 = v109;
        *((_QWORD *)v111 + 1) = v110;
        v112 = *((_QWORD *)v105 + 2);
        if (v13 > v112)
          goto LABEL_151;
        memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v112 - v13));
        v106 = v105;
        *((_QWORD *)v105 + 2) = v112 - 1;
        v13 = v112 - 1;
        if (v112 <= 2)
          goto LABEL_116;
      }
    }
    v116 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100007E8C(&qword_1011DD580);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v116 = (_QWORD *)v8;
    v120 = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v115 = *a1 + 8;
  v113 = *a1 + 24;
  v12 = (char *)_swiftEmptyArrayStorage;
  v118 = v3;
  v119 = *a1;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_45;
    v15 = (uint64_t *)(v11 + 32 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = (_QWORD *)(v11 + 32 * v14);
    v19 = v18[1];
    if (*v18 == v16 && v19 == v17)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_44;
      v21 = 0;
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v16, v17, 1);
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_36;
    }
    v23 = (uint64_t *)(v115 + 32 * v22);
    do
    {
      v25 = *(v23 - 1);
      v26 = *v23;
      v27 = (_QWORD *)(v11 + 32 * v10);
      v28 = v27[1];
      if (*v27 == v25 && v28 == v26)
      {
        if ((v21 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v21 ^ _stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v25, v26, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v23 += 4;
      v24 = v22 + 1;
      v10 = v22;
      v22 = v24;
    }
    while (v24 < v3);
    v22 = v24;
LABEL_36:
    v10 = v22;
    if ((v21 & 1) != 0)
    {
LABEL_37:
      if (v22 < v14)
        goto LABEL_157;
      if (v14 < v22)
      {
        v30 = 32 * v22;
        v31 = 32 * v14;
        v32 = v22;
        v33 = v14;
        do
        {
          if (v33 != --v32)
          {
            if (!v11)
              goto LABEL_160;
            v34 = (_OWORD *)(v11 + v31);
            v35 = v11 + v30;
            v36 = *(_OWORD *)(v11 + v31);
            v37 = *(_QWORD *)(v11 + v31 + 16);
            v38 = *(_QWORD *)(v11 + v31 + 24);
            v39 = *(_OWORD *)(v11 + v30 - 16);
            *v34 = *(_OWORD *)(v11 + v30 - 32);
            v34[1] = v39;
            *(_OWORD *)(v35 - 32) = v36;
            *(_QWORD *)(v35 - 16) = v37;
            *(_QWORD *)(v35 - 8) = v38;
          }
          ++v33;
          v30 -= 32;
          v31 += 32;
        }
        while (v33 < v32);
      }
LABEL_44:
      v10 = v22;
    }
LABEL_45:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_152;
      if (v10 - v14 < v117)
      {
        if (__OFADD__(v14, v117))
          goto LABEL_155;
        if (v14 + v117 >= v3)
          v40 = v3;
        else
          v40 = v14 + v117;
        if (v40 < v14)
          goto LABEL_156;
        if (v10 != v40)
        {
          v41 = (_QWORD *)(v113 + 32 * v10);
          do
          {
            v42 = (uint64_t *)(v11 + 32 * v10);
            v43 = *v42;
            v44 = v42[1];
            v45 = v14;
            v46 = v41;
            do
            {
              v47 = *(v46 - 7);
              v48 = *(v46 - 6);
              v49 = (__int128 *)(v46 - 7);
              v50 = v47 == v43 && v48 == v44;
              if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v43, v44, 1) & 1) == 0)
                break;
              if (!v11)
                goto LABEL_158;
              v52 = *v49;
              v51 = *(_OWORD *)(v46 - 5);
              *(v46 - 4) = *v46;
              v46 -= 4;
              v43 = v46[1];
              v44 = v46[2];
              v53 = v46[3];
              v49[2] = v52;
              v49[3] = v51;
              *(v46 - 3) = v43;
              *(v46 - 2) = v44;
              *(v46 - 1) = v53;
              ++v45;
            }
            while (v10 != v45);
            ++v10;
            v41 += 4;
          }
          while (v10 != v40);
          v10 = v40;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      return;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_100B9A58C(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v55 = *((_QWORD *)v12 + 2);
    v54 = *((_QWORD *)v12 + 3);
    v13 = v55 + 1;
    if (v55 >= v54 >> 1)
      v12 = sub_100B9A58C((char *)(v54 > 1), v55 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v13;
    v56 = v12 + 32;
    v57 = &v12[16 * v55 + 32];
    *(_QWORD *)v57 = v14;
    *((_QWORD *)v57 + 1) = v10;
    if (v55)
      break;
    v13 = 1;
    v11 = v119;
LABEL_15:
    v3 = v118;
    if (v10 >= v118)
    {
      v9 = v116;
      goto LABEL_119;
    }
  }
  v11 = v119;
  while (1)
  {
    v58 = v13 - 1;
    if (v13 >= 4)
    {
      v63 = &v56[16 * v13];
      v64 = *((_QWORD *)v63 - 8);
      v65 = *((_QWORD *)v63 - 7);
      v69 = __OFSUB__(v65, v64);
      v66 = v65 - v64;
      if (v69)
        goto LABEL_136;
      v68 = *((_QWORD *)v63 - 6);
      v67 = *((_QWORD *)v63 - 5);
      v69 = __OFSUB__(v67, v68);
      v61 = v67 - v68;
      v62 = v69;
      if (v69)
        goto LABEL_137;
      v70 = v13 - 2;
      v71 = &v56[16 * v13 - 32];
      v73 = *(_QWORD *)v71;
      v72 = *((_QWORD *)v71 + 1);
      v69 = __OFSUB__(v72, v73);
      v74 = v72 - v73;
      if (v69)
        goto LABEL_138;
      v69 = __OFADD__(v61, v74);
      v75 = v61 + v74;
      if (v69)
        goto LABEL_140;
      if (v75 >= v66)
      {
        v93 = &v56[16 * v58];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v69 = __OFSUB__(v94, v95);
        v96 = v94 - v95;
        if (v69)
          goto LABEL_146;
        v86 = v61 < v96;
        goto LABEL_104;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v87 = *((_QWORD *)v12 + 4);
        v88 = *((_QWORD *)v12 + 5);
        v69 = __OFSUB__(v88, v87);
        v80 = v88 - v87;
        v81 = v69;
        goto LABEL_98;
      }
      v60 = *((_QWORD *)v12 + 4);
      v59 = *((_QWORD *)v12 + 5);
      v69 = __OFSUB__(v59, v60);
      v61 = v59 - v60;
      v62 = v69;
    }
    if ((v62 & 1) != 0)
      goto LABEL_139;
    v70 = v13 - 2;
    v76 = &v56[16 * v13 - 32];
    v78 = *(_QWORD *)v76;
    v77 = *((_QWORD *)v76 + 1);
    v79 = __OFSUB__(v77, v78);
    v80 = v77 - v78;
    v81 = v79;
    if (v79)
      goto LABEL_141;
    v82 = &v56[16 * v58];
    v84 = *(_QWORD *)v82;
    v83 = *((_QWORD *)v82 + 1);
    v69 = __OFSUB__(v83, v84);
    v85 = v83 - v84;
    if (v69)
      goto LABEL_143;
    if (__OFADD__(v80, v85))
      goto LABEL_145;
    if (v80 + v85 >= v61)
    {
      v86 = v61 < v85;
LABEL_104:
      if (v86)
        v58 = v70;
      goto LABEL_106;
    }
LABEL_98:
    if ((v81 & 1) != 0)
      goto LABEL_142;
    v89 = &v56[16 * v58];
    v91 = *(_QWORD *)v89;
    v90 = *((_QWORD *)v89 + 1);
    v69 = __OFSUB__(v90, v91);
    v92 = v90 - v91;
    if (v69)
      goto LABEL_144;
    if (v92 < v80)
      goto LABEL_15;
LABEL_106:
    v97 = v58 - 1;
    if (v58 - 1 >= v13)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    if (!v11)
      goto LABEL_159;
    v98 = v12;
    v99 = v11;
    v100 = &v56[16 * v97];
    v101 = *(_QWORD *)v100;
    v102 = &v56[16 * v58];
    v103 = *((_QWORD *)v102 + 1);
    sub_100B9A360((char *)(v99 + 32 * *(_QWORD *)v100), (char *)(v99 + 32 * *(_QWORD *)v102), v99 + 32 * v103, v120);
    if (v1)
      break;
    if (v103 < v101)
      goto LABEL_133;
    if (v58 > *((_QWORD *)v98 + 2))
      goto LABEL_134;
    *(_QWORD *)v100 = v101;
    *(_QWORD *)&v56[16 * v97 + 8] = v103;
    v104 = *((_QWORD *)v98 + 2);
    if (v58 >= v104)
      goto LABEL_135;
    v12 = v98;
    v13 = v104 - 1;
    memmove(&v56[16 * v58], v102 + 16, 16 * (v104 - 1 - v58));
    *((_QWORD *)v98 + 2) = v104 - 1;
    v86 = v104 > 2;
    v11 = v119;
    if (!v86)
      goto LABEL_15;
  }
  v105 = v98;
LABEL_115:
  v106 = v105;
LABEL_116:
  swift_bridgeObjectRelease(v106);
  v116[2] = 0;
  swift_bridgeObjectRelease(v116);
}

uint64_t sub_100B9A280(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 *v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 32 * a3 + 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 32 * v4);
    v10 = *v9;
    v11 = v9[1];
    v12 = v6;
    v13 = (_QWORD *)v8;
    while (1)
    {
      result = *(v13 - 7);
      v14 = *(v13 - 6);
      v15 = (__int128 *)(v13 - 7);
      v16 = result == v10 && v14 == v11;
      if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v10, v11, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v18 = *v15;
      v17 = *(_OWORD *)(v13 - 5);
      *(v13 - 4) = *v13;
      v13 -= 4;
      v10 = v13[1];
      v11 = v13[2];
      v19 = v13[3];
      v15[2] = v18;
      v15[3] = v17;
      *(v13 - 3) = v10;
      *(v13 - 2) = v11;
      *(v13 - 1) = v19;
      if (v4 == ++v12)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100B9A360(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  BOOL v28;
  __int128 v29;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 31;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 31;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4)
      memmove(a4, __src, 32 * v13);
    v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32)
      goto LABEL_48;
    v20 = (char *)(a3 - 32);
    while (1)
    {
      v21 = v20 + 32;
      v22 = *((_QWORD *)v14 - 4);
      v23 = *((_QWORD *)v14 - 3);
      v24 = *((_QWORD *)v6 - 4);
      v25 = *((_QWORD *)v6 - 3);
      v26 = v6 - 32;
      v27 = v24 == v22 && v25 == v23;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v22, v23, 1) & 1) == 0)
      {
        v26 = v14 - 32;
        if (v21 != v14)
        {
          v14 -= 32;
LABEL_45:
          v29 = *((_OWORD *)v26 + 1);
          *(_OWORD *)v20 = *(_OWORD *)v26;
          *((_OWORD *)v20 + 1) = v29;
          goto LABEL_46;
        }
        v28 = v20 >= v14;
        v14 -= 32;
        if (v28)
          goto LABEL_45;
      }
      else
      {
        if (v21 != v6)
        {
          v6 -= 32;
          goto LABEL_45;
        }
        v28 = v20 >= v6;
        v6 -= 32;
        if (v28)
          goto LABEL_45;
      }
LABEL_46:
      if (v6 > v7)
      {
        v20 -= 32;
        if (v14 > v4)
          continue;
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[32 * v10] <= a4)
    memmove(a4, __dst, 32 * v10);
  v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      v15 = *((_QWORD *)v6 + 1);
      v16 = *((_QWORD *)v4 + 1);
      v17 = *(_QWORD *)v4 == *(_QWORD *)v6 && v16 == v15;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v4, v16, *(_QWORD *)v6, v15, 1) & 1) == 0)
        break;
      v18 = v6;
      v17 = v7 == v6;
      v6 += 32;
      if (!v17)
        goto LABEL_20;
LABEL_21:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_23;
    }
    v18 = v4;
    v17 = v7 == v4;
    v4 += 32;
    if (v17)
      goto LABEL_21;
LABEL_20:
    v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v18;
    *((_OWORD *)v7 + 1) = v19;
    goto LABEL_21;
  }
LABEL_23:
  v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0])
    memmove(v6, v4, 32 * ((v14 - v4) / 32));
  return 1;
}

char *sub_100B9A58C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DD588);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100B9A684(uint64_t a1)
{
  return sub_100B9A58C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_100B9A698(uint64_t a1)
{
  return sub_100BA1FD8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_100B9A6AC(_QWORD *a1)
{
  return sub_100BA20C0(0, a1[2], 0, a1);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a4;
  v44 = a5;
  v42 = a2;
  v11 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  v39 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v39 + 64);
  v16 = __chkstk_darwin(v14);
  v40 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v41 = (uint64_t)&v39 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v39 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a6);
  v21 = *(_QWORD *)(a7 + 40);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 8);
  swift_bridgeObjectRetain();
  v23 = String.init<A>(_:)(v13, a6, v21, v22);
  v25 = v24;
  UUID.init()(v23);
  v26 = &v20[*(int *)(v14 + 20)];
  *(_QWORD *)v26 = v42;
  *((_QWORD *)v26 + 1) = a3;
  v27 = (uint64_t *)&v20[*(int *)(v14 + 24)];
  *v27 = v23;
  v27[1] = v25;
  if (qword_1011DC338 != -1)
    swift_once(&qword_1011DC338, sub_100B9C808);
  v28 = qword_1011DD598;
  v29 = *(_QWORD *)(qword_1011DD598
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 16));
  v30 = v45;
  sub_100B9C8DC(v28, (uint64_t)v20, v43, v44);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 16));
  if (v30)
  {
    sub_10005B748((uint64_t)v20, _s20KeyValueRegistrationC10IdentifierVMa);
  }
  else
  {
    v31 = v41;
    sub_100B751A4((uint64_t)v20, v41);
    v32 = v40;
    sub_10005B6C0((uint64_t)v20, v40, _s20KeyValueRegistrationC10IdentifierVMa);
    v33 = *(unsigned __int8 *)(v39 + 80);
    v34 = (v33 + 16) & ~v33;
    v35 = swift_allocObject(&unk_1011014E0, v34 + v15, v33 | 7);
    sub_10005B6C0(v32, v35 + v34, _s20KeyValueRegistrationC10IdentifierVMa);
    v36 = type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    v29 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    sub_10005B6C0(v31, v29 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
    v37 = (void (**)())(v29 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate);
    *v37 = sub_100B752C8;
    v37[1] = (void (*)())v35;
  }
  return v29;
}

uint64_t sub_100B9A960(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  _QWORD v25[4];
  uint64_t (*v26)(_QWORD *);

  v26 = a1;
  v4 = v3;
  v23 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v24 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 24 * i);
    v18 = *v16;
    v17 = v16[1];
    v19 = (void *)v16[2];
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v25[0] = *v16;
    v25[1] = v17;
    v25[2] = v19;
    v25[3] = v20;
    swift_bridgeObjectRetain();
    v21 = v19;
    swift_bridgeObjectRetain();
    v22 = v26(v25);
    if (v4)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v20);

      swift_bridgeObjectRelease(v17);
      return v18;
    }
    if ((v22 & 1) != 0)
    {
      swift_release(a3);
      return v18;
    }
    swift_bridgeObjectRelease(v20);

    result = swift_bridgeObjectRelease(v17);
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
      break;
    if (v10 >= v24)
      goto LABEL_28;
    v14 = *(_QWORD *)(v23 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
        goto LABEL_16;
      v15 = v10 + 2;
      if (v10 + 2 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
        goto LABEL_16;
      v15 = v10 + 3;
      if (v10 + 3 >= v24)
        goto LABEL_28;
      v14 = *(_QWORD *)(v23 + 8 * v15);
      if (v14)
      {
LABEL_16:
        v10 = v15;
        goto LABEL_17;
      }
      v15 = v10 + 4;
      if (v10 + 4 < v24)
      {
        v14 = *(_QWORD *)(v23 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_31;
            if (v10 >= v24)
              goto LABEL_28;
            v14 = *(_QWORD *)(v23 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release(a3);
      return 0;
    }
LABEL_17:
    v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t UserDefault.init(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;

  *(_QWORD *)a7 = a2;
  v12 = type metadata accessor for UserDefault(0, a4, a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a7[*(int *)(v12 + 44)], a3, a4);
  v13 = &a7[*(int *)(v12 + 48)];
  v14 = type metadata accessor for Optional(0, a5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a1, v14);
}

uint64_t UserDefault.init<A>(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a7;
  v25 = a9;
  __chkstk_darwin(a1);
  v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Optional(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)&v24 - v21, a1, v18, v20);
  dispatch thunk of RawRepresentable.rawValue.getter(v16, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a3, a6);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  return UserDefault.init(wrappedValue:defaults:key:)((uint64_t)v22, v26, (uint64_t)v16, a4, a5, v27, v25);
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];

  v3 = v2;
  v22 = a2;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v6 + 24);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - v12;
  NSUserDefaults.subscript.getter(v2 + *(int *)(a1 + 44), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), (uint64_t)v23);
  v14 = sub_100007E8C(&qword_1011DCA40);
  v15 = swift_dynamicCast(v13, v23, v14, v9, 6);
  v16 = *(_QWORD *)(v9 - 8);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v17(v13, v15 ^ 1u, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v3, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v22, &v8[*(int *)(a1 + 48)], v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    v19 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v20 = v22;
    v19(v22, v13, v9);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(v20, 0, 1, v9);
  }
}

double NSUserDefaults.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  double result;
  uint64_t v16;

  __chkstk_darwin(a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  String.init<A>(_:)(v9, a2, *(_QWORD *)(a3 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8));
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v4, "objectForKey:", v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)((_QWORD *)a4, v14);
    *(_QWORD *)&result = swift_unknownObjectRelease(v14).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100B9F12C(a1, a2);
  v4 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v5 = v4;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B9F280(v11, (uint64_t)&v24);
  if (v25)
  {
    sub_100048ABC(&v24, &v26);
    v14 = v27;
    v15 = sub_100007E68(&v26, v27);
    v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    String.init<A>(_:)(v13, a3, *(_QWORD *)(a4 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v5, "setObject:forKey:", v16, v19);
    swift_unknownObjectRelease(v16);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
    sub_100B76AB0(a1);
    return _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v26);
  }
  else
  {
    sub_100B76AB0((uint64_t)&v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    String.init<A>(_:)(v13, a3, *(_QWORD *)(a4 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
    v22 = v21;
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    objc_msgSend(v5, "removeObjectForKey:", v23);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
    return sub_100B76AB0(a1);
  }
}

void (*UserDefault.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 24));
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100B9B2A4;
}

void sub_100B9B2A4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_100B9F12C((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_100B9F12C((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t UserDefault.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void NSUserDefaults.Suite.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, a2, a3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static NSUserDefaults.Suite.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int NSUserDefaults.Suite.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v5, a1, a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100B9B49C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100B9B508(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100B9B56C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v5, v2, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100B9B5D4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  v5 = *a1;
  if (v5 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, *a2, v4, 0);
}

id NSUserDefaults.init(suite:)(uint64_t a1, uint64_t a2)
{
  id v3;
  NSString v4;
  id v5;

  if (!a2)
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithSuiteName:", 0);
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  swift_bridgeObjectRelease(a2);
  if (v5)

  return v5;
}

void (*NSUserDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;

  v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v9[10] = v4;
  v9[11] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v9[12] = malloc(v11);
  v9[13] = malloc(v11);
  (*(void (**)(void))(v10 + 16))();
  NSUserDefaults.subscript.getter(a2, a3, a4, (uint64_t)v9);
  return sub_100B9B774;
}

void sub_100B9B774(uint64_t *a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (uint64_t *)*a1;
  v4 = *(void **)(*a1 + 96);
  v3 = *(void **)(*a1 + 104);
  if ((a2 & 1) != 0)
  {
    v5 = v2[11];
    v7 = v2[8];
    v6 = v2[9];
    sub_100B9F280(*a1, (uint64_t)(v2 + 4));
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v4, v3, v7);
    NSUserDefaults.subscript.setter((uint64_t)(v2 + 4), (uint64_t)v4, v7, v6);
    sub_100B76AB0((uint64_t)v2);
  }
  else
  {
    NSUserDefaults.subscript.setter(*a1, v2[13], v2[8], v2[9]);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t NSUserDefaults.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v14 - v10), a1, a2);
  v12 = NSUserDefaults.subscript.getter((uint64_t)v11, AssociatedTypeWitness, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t, double))(v9 + 8))(v11, AssociatedTypeWitness, v12);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100B9F2C8(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

void (*NSUserDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t *a1, char a2)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;

  v10 = malloc(0x70uLL);
  *a1 = v10;
  v10[10] = a5;
  v10[11] = v5;
  v10[8] = a3;
  v10[9] = a4;
  v11 = *(_QWORD *)(a3 - 8);
  v10[12] = v11;
  v10[13] = malloc(*(_QWORD *)(v11 + 64));
  (*(void (**)(void))(v11 + 16))();
  NSUserDefaults.subscript.getter(a3, a4, a5, (uint64_t)v10);
  return sub_100B9B9E0;
}

void sub_100B9B9E0(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[12];
    v3 = (void *)v2[13];
    v5 = v2[10];
    v7 = v2[8];
    v6 = v2[9];
    sub_100B9F280(*a1, (uint64_t)(v2 + 4));
    sub_100B9F2C8((uint64_t)(v2 + 4), (uint64_t)v3, v7, v6, v5);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v7);
    sub_100B76AB0((uint64_t)v2);
  }
  else
  {
    v8 = v2[12];
    v3 = (void *)v2[13];
    v9 = v2[8];
    sub_100B9F2C8(*a1, (uint64_t)v3, v9, v2[9], v2[10]);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v3, v9);
  }
  free(v3);
  free(v2);
}

uint64_t _sSo14NSUserDefaultsC14MusicUtilitiesE8MigratorV3keyxvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t NSUserDefaults.Migrator.init(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;

  *a6 = a1;
  v8 = (char *)a6 + *(int *)(type metadata accessor for NSUserDefaults.Migrator(0, a3, a4, a5) + 44);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a2, a3);
}

uint64_t NSUserDefaults.Migrator.init<A>(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v14 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of RawRepresentable.rawValue.getter(v16, v17, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a2, a5);
  *(_QWORD *)a7 = a1;
  v19 = type metadata accessor for NSUserDefaults.Migrator(0, a3, a4, a6);
  return (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v14 + 32))(&a7[*(int *)(v19 + 44)], v16, a3);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t WitnessTable;
  uint64_t v37;
  __n128 v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(id *, uint64_t);
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *);
  id v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[40];
  char *v82;

  v9 = v8;
  v59 = a7;
  v71 = a4;
  v74 = a3;
  v75 = a2;
  v66 = a1;
  v60 = a8;
  v72 = a6;
  v65 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v70 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v13);
  v62 = (id *)((char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(v15 + 16);
  v73 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v17);
  v61 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v19;
  v20 = type metadata accessor for Optional(0, v19);
  v67 = *(_QWORD *)(v20 - 8);
  v68 = v20;
  __chkstk_darwin(v20);
  v64 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v82 = (char *)&v59 - v23;
  v24 = *(_QWORD *)(a5 + 24);
  v25 = type metadata accessor for Optional(0, v24);
  v26 = *(_QWORD *)(v25 - 8);
  v77 = v25;
  v78 = v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v59 - v27;
  v29 = v8 + *(int *)(a5 + 44);
  v30 = *(_QWORD *)(a5 + 32);
  NSUserDefaults.subscript.getter(v29, v16, v30, (uint64_t)v81);
  sub_100B9F280((uint64_t)v81, (uint64_t)&v79);
  v31 = sub_100007E8C(&qword_1011DCA40);
  v32 = swift_dynamicCast(v28, &v79, v31, v24, 6);
  v33 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v28, v32 ^ 1u, 1, v24);
  sub_100B9F280((uint64_t)v81, (uint64_t)&v79);
  v34 = *((_QWORD *)&v80 + 1);
  sub_100B76AB0((uint64_t)&v79);
  if (v34 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v24) == 1)
  {
    v35 = _s8MigratorV5ErrorOMa(0, v16, v24, v30);
    WitnessTable = swift_getWitnessTable(&unk_100EE7FA0, v35);
    swift_allocError(v35, WitnessTable, 0, 0);
    v38.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v37, v29, v16);
    swift_willThrow(v38);
LABEL_5:
    sub_100B76AB0((uint64_t)v81);
    return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v77);
  }
  v39 = v76;
  v75(v28);
  if (v39)
    goto LABEL_5;
  v41 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v61, v29, v16);
  v79 = 0u;
  v80 = 0u;
  NSUserDefaults.subscript.setter((uint64_t)&v79, v41, v16, v30);
  v42 = v63;
  v43 = v62;
  (*(void (**)(id *, uint64_t, uint64_t))(v63 + 16))(v62, v9, a5);
  v44 = v71;
  if (v71)
  {
    v76 = v71;
  }
  else
  {
    v45 = *v43;
    v44 = v71;
    v76 = v45;
  }
  v46 = v72;
  v47 = (uint64_t)v70;
  v49 = v67;
  v48 = v68;
  v50 = *(void (**)(id *, uint64_t))(v42 + 8);
  v51 = v44;
  v50(v43, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v47, v66, v46);
  v52 = v64;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v64, v82, v48);
  v53 = v69;
  v54 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v69) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v48);
    v79 = 0u;
    v80 = 0u;
  }
  else
  {
    *((_QWORD *)&v80 + 1) = v53;
    v55 = sub_100049F68(&v79);
    (*(void (**)(_QWORD *, char *, uint64_t))(v54 + 32))(v55, v52, v53);
  }
  v56 = v60;
  v57 = v76;
  v58 = v77;
  NSUserDefaults.subscript.setter((uint64_t)&v79, v47, v72, v59);

  sub_100B76AB0((uint64_t)v81);
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v56, v82, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v28, v58);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a6;
  v21 = a3;
  v22 = a4;
  v20 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a5, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v19 - v16;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v19 - v16), a5, a7);
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)((uint64_t)v17, a1, a2, v21, v22, AssociatedTypeWitness, v20, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
}

double NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  double result;

  v12 = *(_QWORD *)(a3 + 24);
  v13 = swift_allocObject(&unk_101101508, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)(a1, (void (*)(char *))sub_100B732C0, v13, a2, a3, a4, a5, a6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t (*static NSUserDefaults.ValueTransformer<>.identity.getter(uint64_t a1))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(swift_allocObject(&unk_101101508, 24, 7) + 16) = a1;
  return sub_100B732C0;
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v17;

  v17 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v17 - v13), a3, a4);
  v15 = NSUserDefaults.Migrator.migrateValue<A>(to:destination:)((uint64_t)v14, a1, a2, AssociatedTypeWitness, v17, a6);
  return (*(uint64_t (**)(char *, uint64_t, double))(v12 + 8))(v14, AssociatedTypeWitness, v15);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  id v20;
  double v21;
  uint64_t v23;
  void *v24;

  v23 = a5;
  v24 = a2;
  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NSUserDefaults.Migrator(0, v12, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v23 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a3, v17);
  *(_QWORD *)v19 = v5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v19[*(int *)(v15 + 44)], v11, a3);
  v20 = v5;
  v21 = NSUserDefaults.Migrator.migrateValue<A>(to:destination:)(a1, v24, v15, a3, a4, v23);
  return (*(uint64_t (**)(char *, uint64_t, double))(v16 + 8))(v19, v15, v21);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v14 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v14 - v11), a2, a3);
  NSUserDefaults.migrateValue<A, B>(for:to:)((uint64_t)v12, a1, AssociatedTypeWitness, v14, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

Swift::Void __swiftcall NSUserDefaults.KeyValueRegistration.invalidate()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
}

uint64_t NSUserDefaults.KeyValueRegistration.deinit()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_10005B748(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release();
  return v0;
}

uint64_t NSUserDefaults.KeyValueRegistration.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_10005B748(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100B9C688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1011DC338 != -1)
    swift_once(&qword_1011DC338, sub_100B9C808);
  v2 = qword_1011DD598;
  v3 = *(_QWORD *)(qword_1011DD598
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  sub_100B9CED0(v2, a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = a5;
  v20 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v19 - v15;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v19 - v15), a6, a7);
  v17 = static NSUserDefaults.observe<A>(_:in:valueChanged:)((uint64_t)v16, a2, a3, a4, v19, AssociatedTypeWitness, v20);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  return v17;
}

id sub_100B9C808()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)_s9_ObserverCMa()), "init");
  qword_1011DD598 = (uint64_t)result;
  return result;
}

void sub_100B9C8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  __n128 v38;
  uint64_t v39;
  id v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  id v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65[16];
  uint64_t v66;
  _QWORD v67[3];
  char v68[24];
  uint64_t v69;

  v61 = a3;
  v62 = a4;
  v60 = _s9_ObserverC18HandlerAssociationVMa(0);
  v63 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a1;
  v8 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess(a1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, v68, 0, 0);
  v9 = *v8;
  v66 = a2;
  swift_bridgeObjectRetain();
  v10 = sub_100B9A960((uint64_t (*)(_QWORD *))sub_100BA13F4, (uint64_t)v65, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v9);
  v64 = a2;
  if (v14)
  {
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    sub_10004A07C(0, &qword_1011DD9E8, NSUserDefaults_ptr);
    v17 = (uint64_t *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
    v10 = *v17;
    v12 = v17[1];
    swift_bridgeObjectRetain();
    v18 = NSUserDefaults.init(suite:)(v10, v12);
    if (!v18)
    {
      v36 = sub_100BA1410();
      swift_allocError(&_s5ErrorON, v36, 0, 0);
      *v37 = v10;
      v37[1] = v12;
      swift_bridgeObjectRetain();
      swift_willThrow(v38);
      return;
    }
    v14 = v18;
    swift_bridgeObjectRetain();
  }
  v19 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain();
    v20 = v14;
    swift_bridgeObjectRetain();
    v21 = sub_100B8762C(v10, v12, (uint64_t)v20);
    if ((v22 & 1) != 0)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v21);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v19);
      goto LABEL_10;
    }

    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v19);
  }
  v58 = sub_100B72428((uint64_t)_swiftEmptyArrayStorage);
LABEL_10:
  v23 = *v8;
  if (!*(_QWORD *)(*v8 + 16))
  {
LABEL_20:
    v34 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v24 = v14;
  swift_bridgeObjectRetain();
  v25 = sub_100B8762C(v10, v12, (uint64_t)v24);
  if ((v26 & 1) == 0)
  {

    swift_bridgeObjectRelease(v12);
    v35 = v23;
LABEL_19:
    swift_bridgeObjectRelease(v35);
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v23);
  v28 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  if (!*(_QWORD *)(v27 + 16))
  {
    v35 = v27;
    goto LABEL_19;
  }
  v29 = (uint64_t *)(v64 + *(int *)(v28 + 24));
  v30 = *v29;
  v31 = v29[1];
  swift_bridgeObjectRetain();
  v32 = sub_100B87504(v30, v31);
  if ((v33 & 1) == 0)
  {
    swift_bridgeObjectRelease(v27);
    v35 = v31;
    goto LABEL_19;
  }
  v34 = *(char **)(*(_QWORD *)(v27 + 56) + 8 * v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v31);
LABEL_21:
  v39 = *((_QWORD *)v34 + 2);
  v59 = v10;
  if (!v39)
  {
    _s20KeyValueRegistrationC10IdentifierVMa(0);
    v40 = v14;
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v40, "addObserver:forKeyPath:options:context:", v57, v41, 0, 0);

  }
  v42 = type metadata accessor for UUID(0);
  v43 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v7, v64, v42);
  v44 = &v7[*(int *)(v60 + 20)];
  v45 = v62;
  *(_QWORD *)v44 = v61;
  *((_QWORD *)v44 + 1) = v45;
  swift_retain(v45);
  if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
    v34 = (char *)sub_100B7FEAC(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
  v47 = *((_QWORD *)v34 + 2);
  v46 = *((_QWORD *)v34 + 3);
  if (v47 >= v46 >> 1)
    v34 = (char *)sub_100B7FEAC(v46 > 1, v47 + 1, 1, v34);
  *((_QWORD *)v34 + 2) = v47 + 1;
  sub_10005B6C0((uint64_t)v7, (uint64_t)&v34[((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v47], _s9_ObserverC18HandlerAssociationVMa);
  v48 = (uint64_t *)(v43 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 24));
  v49 = *v48;
  v50 = v48[1];
  swift_bridgeObjectRetain();
  v51 = v58;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
  v67[0] = v51;
  sub_100B9E910((uint64_t)v34, v49, v50, isUniquelyReferenced_nonNull_native);
  v53 = v67[0];
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_beginAccess(v8, v67, 33, 0);
  swift_bridgeObjectRetain();
  v54 = v14;
  v55 = swift_isUniquelyReferenced_nonNull_native(*v8);
  v69 = *v8;
  *v8 = 0x8000000000000000;
  sub_100B9E788(v53, v59, v12, v54, v55);
  v56 = *v8;
  *v8 = v69;

  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v56);
  swift_endAccess(v67);

  swift_bridgeObjectRelease(v12);
}

uint64_t _s20KeyValueRegistrationC10IdentifierVMa(uint64_t a1)
{
  return sub_100055934(a1, qword_1011DD9A0, (uint64_t)&_s20KeyValueRegistrationC10IdentifierVMn);
}

uint64_t sub_100B9CE14()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = v0 + v2;
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v3);
}

uint64_t type metadata accessor for NSUserDefaults.KeyValueRegistration(uint64_t a1)
{
  return sub_100055934(a1, qword_1011DD770, (uint64_t)&nominal type descriptor for NSUserDefaults.KeyValueRegistration);
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

void sub_100B9CED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t (*v36)(_QWORD);
  uint64_t *v37;
  void (*v38)(_QWORD *);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, __n128);
  char v54[16];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  _BYTE v58[32];
  char v59[32];
  uint64_t v60;

  v5 = _s9_ObserverC18HandlerAssociationVMa(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess(a1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, v59, 0, 0);
  v10 = *v9;
  v55 = a2;
  swift_bridgeObjectRetain();
  v53 = (void (*)(_BYTE *, _QWORD, __n128))sub_100B9A960((uint64_t (*)(_QWORD *))sub_100BA1464, (uint64_t)v54, v10);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = v2;
  swift_bridgeObjectRelease(v10);
  if (v14)
  {
    v18 = _s20KeyValueRegistrationC10IdentifierVMa(0);
    if (*(_QWORD *)(v16 + 16))
    {
      v52 = a1;
      v19 = (uint64_t *)(a2 + *(int *)(v18 + 24));
      v20 = *v19;
      v21 = v19[1];
      v51 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = sub_100B87504(v20, v21);
      if ((v23 & 1) != 0)
      {
        v50 = v12;
        v24 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v16);
        v60 = v24;
        v25 = *(_QWORD *)(v24 + 16);
        if (v25)
        {
          v49[1] = v17;
          v26 = v24 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          v27 = *(_QWORD *)(v6 + 72);
          swift_bridgeObjectRetain();
          v28 = 0;
          while ((static UUID.== infix(_:_:)(v26, a2) & 1) == 0)
          {
            ++v28;
            v26 += v27;
            if (v25 == v28)
            {

              swift_bridgeObjectRelease_n(v24, 2);
              v29 = v50;
              goto LABEL_12;
            }
          }
          swift_bridgeObjectRelease(v24);
          v30 = v50;
          swift_bridgeObjectRetain();
          v31 = v14;
          sub_100B92268(v28, (uint64_t)v8);
          sub_10005B748((uint64_t)v8, _s9_ObserverC18HandlerAssociationVMa);
          v32 = v60;
          if (!*(_QWORD *)(v60 + 16))
          {
            v33 = v31;
            v34 = String._bridgeToObjectiveC()();
            objc_msgSend(v33, "removeObserver:forKeyPath:", v52, v34);

          }
          swift_bridgeObjectRetain();
          v35 = v31;
          v36 = sub_100B9D848((uint64_t)v58);
          v38 = sub_100B9D300(v57, (uint64_t)v53, v30, v35);
          v39 = *v37;
          if (*v37)
          {
            v40 = v37;
            v53 = (void (*)(_BYTE *, _QWORD, __n128))v36;
            v41 = *v51;
            v42 = v51[1];
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
            v56 = *v40;
            *v40 = 0x8000000000000000;
            sub_100B9E910(v32, v41, v42, isUniquelyReferenced_nonNull_native);
            v44 = *v40;
            *v40 = v56;
            swift_bridgeObjectRelease(v42);
            v45 = swift_bridgeObjectRelease(v44);
            ((void (*)(_QWORD *, _QWORD, __n128))v38)(v57, 0, v45);

            v46 = swift_bridgeObjectRelease(v30);
            v53(v58, 0, v46);
          }
          else
          {
            v47 = swift_bridgeObjectRelease(v32);
            ((void (*)(_QWORD *, _QWORD, __n128))v38)(v57, 0, v47);

            v48 = swift_bridgeObjectRelease(v30);
            ((void (*)(_BYTE *, _QWORD, __n128))v36)(v58, 0, v48);
          }

          swift_bridgeObjectRelease_n(v30, 2);
          goto LABEL_13;
        }

        swift_bridgeObjectRelease(v24);
        v29 = v50;
LABEL_12:
        swift_bridgeObjectRelease(v29);
LABEL_13:
        swift_bridgeObjectRelease(v16);
        return;
      }

      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v16);
    }
    else
    {

    }
    v29 = v12;
    goto LABEL_12;
  }
}

BOOL sub_100B9D274(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
  v5 = v4[1];
  if (!v3)
    return v5 == 0;
  if (!v5)
    return 0;
  if (v2 == *v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, *v4, v5, 0) & 1;
}

void (*sub_100B9D300(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain();
  v8[6] = sub_100B9EA6C(v8, a2, a3, a4);
  return sub_100B9D378;
}

void sub_100B9D378(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease(v3);

  free(v1);
}

double sub_100B9D3C0(uint64_t a1, void *a2, uint64_t a3, Class isa, uint64_t a5)
{
  char *v5;
  NSString v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  objc_class *v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(__int128 *);
  NSString v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[3];
  objc_super v42;
  __int128 v43;
  __int128 v44;

  v9 = a2;
  v40 = a1;
  if (!a2)
  {
LABEL_9:
    sub_100B9F280(a3, (uint64_t)&v43);
    v22 = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v23 = sub_100007E68(&v43, *((uint64_t *)&v44 + 1));
      v24 = *(_QWORD *)(v22 - 8);
      v25 = __chkstk_darwin(v23);
      v27 = (char *)&v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v24 + 16))(v27, v25);
      v28 = _bridgeAnythingToObjectiveC<A>(_:)(v27, v22);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v22);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v43);
      if (!isa)
      {
LABEL_12:
        v29 = (objc_class *)_s9_ObserverCMa();
        v42.receiver = v5;
        v42.super_class = v29;
        objc_msgSendSuper2(&v42, "observeValueForKeyPath:ofObject:change:context:", v9, v28, isa, a5);

        swift_unknownObjectRelease(v28);
LABEL_13:

        return result;
      }
    }
    else
    {
      v28 = 0;
      if (!isa)
        goto LABEL_12;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_100BA13AC();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_12;
  }
  sub_100B9F280(a3, (uint64_t)&v43);
  if (!*((_QWORD *)&v44 + 1))
  {
    sub_100B76AB0((uint64_t)&v43);
    goto LABEL_8;
  }
  v10 = sub_10004A07C(0, &qword_1011DD9E8, NSUserDefaults_ptr);
  if ((swift_dynamicCast(v41, &v43, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_8:
    v9 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  v11 = (void *)v41[0];
  v12 = *(_QWORD *)&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  swift_beginAccess(&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites], v41, 0, 0);
  isa = v11;
  v13 = swift_bridgeObjectRetain();
  sub_100B9EDC0(v13, isa);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();

  if (!v15)
    goto LABEL_16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100B9EF58(v17, v40, (uint64_t)v9);
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
    swift_bridgeObjectRelease();
  else
LABEL_16:
    v21 = _swiftEmptyArrayStorage;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  v31 = v21[2];
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v32 = _s9_ObserverC18HandlerAssociationVMa(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (char *)v21 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
  v35 = *(_QWORD *)(v33 + 72);
  v39 = v21;
  swift_bridgeObjectRetain();
  do
  {
    v36 = *(void (**)(__int128 *))&v34[*(int *)(v32 + 20)];
    v37 = String._bridgeToObjectiveC()();
    v38 = -[objc_class valueForKey:](isa, "valueForKey:", v37);

    if (v38)
    {
      _bridgeAnyObjectToAny(_:)(&v43, v38);
      swift_unknownObjectRelease(v38);
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    v36(&v43);
    sub_100B76AB0((uint64_t)&v43);
    v34 += v35;
    --v31;
  }
  while (v31);

  *(_QWORD *)&result = swift_bridgeObjectRelease_n(v39, 2).n128_u64[0];
  return result;
}

uint64_t (*sub_100B9D848(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1+ OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Int sub_100B9D88C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100B9D908(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100B9D97C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v3 = *v1;
  v2 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)(v5, v3, v2);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100B9D9F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (v3)
  {
    if (v5)
    {
      v7 = *a1;
      v8 = v7 == *a2 && v3 == v5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v3, *a2, v5, 0) & 1) != 0)
        goto LABEL_8;
    }
  }
  else if (!v5)
  {
LABEL_8:
    sub_10004A07C(0, (unint64_t *)&unk_1011DD480, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v4, v6) & 1;
  }
  return 0;
}

id sub_100B9DA7C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s9_ObserverCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NSUserDefaults.encodeValue(_:forKey:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Class isa;
  NSString v12;

  v2 = v1;
  v3 = a1[3];
  v4 = a1[5];
  v5 = sub_100007E68(a1, v3);
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, v3, v4);
  v10 = v9;
  swift_release(v7);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKey:", isa, v12);

  return sub_1000652DC(v8, v10);
}

uint64_t NSUserDefaults.decodeValue<A>(_:forKey:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  void *v3;
  NSString v7;
  id v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _OWORD v17[2];
  _QWORD v18[4];

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v3, "valueForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v17, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_100B76A68((uint64_t)v17, (uint64_t)v18);
  if (!v18[3])
  {
    sub_100B76AB0((uint64_t)v18);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_8:
    v14 = 1;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v14, 1, a1, v9);
  }
  v11 = v16[0];
  v10 = v16[1];
  v12 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a3, a1, v11, v10, a1, a2);
  sub_1000652DC(v11, v10);
  v9 = swift_release(v13);
  v14 = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(a1 - 8) + 56))(a3, v14, 1, a1, v9);
}

uint64_t sub_100B9E0B0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, qword_1011DD5A0);
  sub_100048B14(v0, (uint64_t)qword_1011DD5A0);
  return Logger.init(subsystem:category:)(0xD000000000000013, 0x8000000100E4A820, 0x6166654472657355, 0xEC00000073746C75);
}

char *sub_100B9E12C(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_100B9E1FC(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10004FA40((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10004FA40((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v12);
  return v7;
}

char *sub_100B9E1FC(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100B9E2F8(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

char *sub_100B9E2F8(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_100B9E38C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100B9E488(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_100B9E488((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_100B9E38C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100B9E424(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100B9E424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100007E8C(&qword_1011DD9F0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size_0(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_100B9E488(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DD9F0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_100B9E570(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 24 * v6);
        v11 = *v9;
        v10 = v9[1];
        v12 = (void *)v9[2];
        Hasher.init(_seed:)(v30, *(_QWORD *)(a2 + 40));
        if (v10)
        {
          Hasher._combine(_:)(1uLL);
          v13 = v12;
          swift_bridgeObjectRetain();
          String.hash(into:)(v30, v11, v10);
        }
        else
        {
          Hasher._combine(_:)(0);
          v14 = v12;
        }
        v15 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v10);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = v17 + 24 * v3;
          v19 = (__int128 *)(v17 + 24 * v6);
          if (v3 != v6 || v18 >= (unint64_t)v19 + 24)
          {
            v20 = *v19;
            *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_QWORD *)(v21 + 8 * v3);
          v23 = (_QWORD *)(v21 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 1))
          {
            *v22 = *v23;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100B9E788(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;

  v6 = v5;
  v11 = *v5;
  v13 = sub_100B8762C(a2, a3, (uint64_t)a4);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_100B994FC();
LABEL_7:
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8 * v13));
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    v23 = (uint64_t *)(v19[6] + 24 * v13);
    *v23 = a2;
    v23[1] = a3;
    v23[2] = (uint64_t)a4;
    *(_QWORD *)(v19[7] + 8 * v13) = a1;
    v24 = v19[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v19[2] = v26;
      swift_bridgeObjectRetain();
      v27 = a4;
      return;
    }
    goto LABEL_14;
  }
  sub_100B98CF0(v16, a5 & 1);
  v21 = sub_100B8762C(a2, a3, (uint64_t)a4);
  if ((v17 & 1) == (v22 & 1))
  {
    v13 = v21;
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s9_ObserverC16SuiteAssociationVN);
  __break(1u);
}

void sub_100B9E910(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100B87504(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100B996C8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_100B99030(v15, a4 & 1);
  v20 = sub_100B87504(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void (*sub_100B9EA6C(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4))(uint64_t a1)
{
  _QWORD *v4;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;

  v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  swift_bridgeObjectRetain();
  v11 = a4;
  v9[10] = sub_10009E070(v9);
  v9[11] = sub_100B9EB68(v9 + 4, a2, a3, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  return sub_100B9EB14;
}

void sub_100B9EB14(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;
  void *v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);

  v2(v1, 0);
  free(v1);
}

void (*sub_100B9EB68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t **);

  v6 = v5;
  v12 = malloc(0x38uLL);
  *a1 = v12;
  v12[3] = a4;
  v12[4] = v6;
  v12[1] = a2;
  v12[2] = a3;
  v13 = *v6;
  v15 = sub_100B8762C(a2, a3, a4);
  *((_BYTE *)v12 + 48) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(*(_QWORD *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *v12 = v21;
        return sub_100B9ECA8;
      }
LABEL_11:
      v21 = 0;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_100B994FC();
      goto LABEL_7;
    }
    sub_100B98CF0(v18, a5 & 1);
    v22 = sub_100B8762C(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      v15 = v22;
      v12[5] = v22;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s9_ObserverC16SuiteAssociationVN);
  __break(1u);
  return result;
}

void sub_100B9ECA8(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_100B9ECE8(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (void *)(*a1)[3]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t *sub_100B9ECE8(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  id v16;

  v9 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 24 * a4, 1, &_s9_ObserverC16SuiteAssociationVN);
      sub_100B9E570(a4, *a3);
    }
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v10 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v10[7] + 8 * a4) = v9;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  v10[(a4 >> 6) + 8] |= 1 << a4;
  v12 = (_QWORD *)(v10[6] + 24 * a4);
  *v12 = a5;
  v12[1] = a6;
  v12[2] = a7;
  *(_QWORD *)(v10[7] + 8 * a4) = v9;
  v13 = v10[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (!v14)
  {
    v10[2] = v15;
    swift_bridgeObjectRetain();
    v16 = a7;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t sub_100B9EDC0(uint64_t result, void *a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;

  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v12 >= v8)
      return 0;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v8)
        return 0;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v8)
          return 0;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v8)
            return 0;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
          {
            v14 = v12 + 4;
            if (v14 >= v8)
              return 0;
            v13 = *(_QWORD *)(v4 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v3 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_27;
                if (v3 >= v8)
                  return 0;
                v13 = *(_QWORD *)(v4 + 8 * v3);
                ++v14;
                if (v13)
                  goto LABEL_22;
              }
            }
            v3 = v14;
          }
        }
      }
    }
LABEL_22:
    v7 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v11 = *(_QWORD *)(result + 48);
    if (*(void **)(v11 + 24 * v10 + 16) == a2)
    {
      v15 = *(_QWORD *)(v11 + 24 * v10);
      swift_bridgeObjectRetain();
      v16 = a2;
      swift_bridgeObjectRetain();
      return v15;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100B9EF58(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v19;

  v5 = result;
  v6 = 0;
  v7 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v19)
      return 0;
    v14 = *(_QWORD *)(v7 + 8 * v13);
    ++v6;
    if (!v14)
    {
      v6 = v13 + 1;
      if (v13 + 1 >= v19)
        return 0;
      v14 = *(_QWORD *)(v7 + 8 * v6);
      if (!v14)
      {
        v6 = v13 + 2;
        if (v13 + 2 >= v19)
          return 0;
        v14 = *(_QWORD *)(v7 + 8 * v6);
        if (!v14)
        {
          v6 = v13 + 3;
          if (v13 + 3 >= v19)
            return 0;
          v14 = *(_QWORD *)(v7 + 8 * v6);
          if (!v14)
            break;
        }
      }
    }
LABEL_21:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_22:
    v16 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v12);
    v17 = *v16;
    if (*v16 == a2 && v16[1] == a3)
    {
      v17 = a2;
LABEL_29:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v17;
    }
    result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v16[1], a2, a3, 0);
    if ((result & 1) != 0)
      goto LABEL_29;
  }
  v15 = v13 + 4;
  if (v15 >= v19)
    return 0;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
    v6 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v19)
      return 0;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100B9F12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a2 + 16);
  __chkstk_darwin(v8);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v2 + *(int *)(a2 + 44), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v15 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v18 = 0u;
    v19 = 0u;
  }
  else
  {
    *((_QWORD *)&v19 + 1) = v5;
    v16 = sub_100049F68(&v18);
    (*(void (**)(_QWORD *, char *, uint64_t))(v15 + 32))(v16, v10, v5);
  }
  return NSUserDefaults.subscript.setter((uint64_t)&v18, (uint64_t)v13, v11, *(_QWORD *)(a2 + 32));
}

uint64_t sub_100B9F280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DCA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B9F2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = &v13[-v10];
  dispatch thunk of RawRepresentable.rawValue.getter(&v13[-v10], a3, a4);
  sub_100B9F280(a1, (uint64_t)v13);
  NSUserDefaults.subscript.setter((uint64_t)v13, (uint64_t)v11, AssociatedTypeWitness, a5);
  return sub_100B76AB0(a1);
}

uint64_t type metadata accessor for NSUserDefaults.Migrator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSUserDefaults.Migrator);
}

uint64_t _s8MigratorV5ErrorOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&_s8MigratorV5ErrorOMn);
}

uint64_t sub_100B9F3B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100B9F3C8()
{
  unint64_t result;

  result = qword_1011DD5C0[0];
  if (!qword_1011DD5C0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults.Suite, &type metadata for NSUserDefaults.Suite);
    atomic_store(result, qword_1011DD5C0);
  }
  return result;
}

uint64_t sub_100B9F40C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 40);
      return 0;
    }
  }
  return result;
}

void **sub_100B9F4A8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char *v20;
  void *v21;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  if (*(_DWORD *)(v8 + 84))
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = *(_QWORD *)(v8 + 64) + 1;
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = (char *)*a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 + ((v10 + ((v7 + 8) & ~v7)) & ~v9) > 0x18)
  {
    a1 = (void **)&v13[((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)];
    swift_retain(v13);
  }
  else
  {
    v16 = ~v9;
    v17 = ((unint64_t)a1 + v7 + 8) & ~v7;
    v18 = ((unint64_t)a2 + v7 + 8) & ~v7;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v20 = v13;
    v19(v17, v18, v5);
    v21 = (void *)((v17 + v10) & v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v18 + v10) & v16, 1, v4))
    {
      memcpy(v21, (const void *)((v18 + v10) & v16), v11);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(v21, (v18 + v10) & v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_100B9F60C(id *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  return result;
}

void **sub_100B9F6B0(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v12 = v5;
  v11(v9, v10, v6);
  v13 = *(_QWORD *)(v7 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (void *)((v17 + v9) & ~v16);
  v19 = (const void *)((v17 + v10) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    if (*(_DWORD *)(v15 + 84))
      v20 = *(_QWORD *)(v15 + 64);
    else
      v20 = *(_QWORD *)(v15 + 64) + 1;
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  return a1;
}

void **sub_100B9F7B4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)a1 + v10 + 8) & ~v10;
  v12 = ((unint64_t)a2 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (void *)((v17 + v11) & ~v16);
  v19 = (void *)((v17 + v12) & ~v16);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v12) = v20(v18, 1, v14);
  v21 = v20(v19, 1, v14);
  if ((_DWORD)v12)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v18, v19, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      return a1;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v18, v19, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v22 = *(_QWORD *)(v15 + 64);
  else
    v22 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v22);
  return a1;
}

_QWORD *sub_100B9F904(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12;
  v14 = (void *)((v13 + v7) & ~v12);
  v15 = (const void *)((v13 + v8) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84))
      v16 = *(_QWORD *)(v11 + 64);
    else
      v16 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

void **sub_100B9F9F8(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  size_t v20;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 + v14;
  v16 = (void *)((v15 + v9) & ~v14);
  v17 = (void *)((v15 + v10) & ~v14);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v10) = v18(v16, 1, v12);
  v19 = v18(v17, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      return a1;
    }
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v16, v17, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  }
  if (*(_DWORD *)(v13 + 84))
    v20 = *(_QWORD *)(v13 + 64);
  else
    v20 = *(_QWORD *)(v13 + 64) + 1;
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t sub_100B9FB44(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = *(_DWORD *)(v5 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_31;
  v17 = v12 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15);
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_15;
  v20 = ((v16 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    v19 = *(_DWORD *)((char *)a1 + v17);
    if (v19)
      goto LABEL_22;
LABEL_31:
    if ((v10 & 0x80000000) == 0)
    {
      v23 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
    v24 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if (v6 == v11)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
    if (v8 >= 2)
    {
      v25 = (*(uint64_t (**)(uint64_t))(v7 + 48))((v24 + v14 + v15) & ~v15);
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v20 > 0xFF)
  {
    v19 = *(unsigned __int16 *)((char *)a1 + v17);
    if (*(_WORD *)((char *)a1 + v17))
      goto LABEL_22;
    goto LABEL_31;
  }
  if (v20 < 2)
    goto LABEL_31;
LABEL_15:
  v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((_BYTE *)a1 + v17))
    goto LABEL_31;
LABEL_22:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void sub_100B9FD20(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (*(_DWORD *)(v7 + 84) <= v10)
    v11 = v10;
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v13;
  v14 = v13
      + ((*(_QWORD *)(v7 + 64)
        + *(unsigned __int8 *)(v8 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v15 = a3 >= v12;
  v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v12 < a2)
        goto LABEL_21;
      goto LABEL_28;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = &dword_100000004;
      if (v12 < a2)
      {
LABEL_21:
        v18 = ~v12 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_28:
      __asm { BR              X6 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v12 < a2)
    goto LABEL_21;
  goto LABEL_28;
}

void sub_100B9FF58()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_100B9FF60()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

ValueMetadata *type metadata accessor for NSUserDefaults.Suite()
{
  return &type metadata for NSUserDefaults.Suite;
}

uint64_t type metadata accessor for NSUserDefaults.ValueTransformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSUserDefaults.ValueTransformer);
}

uint64_t sub_100B9FFA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 40);
    return 0;
  }
  return result;
}

void **sub_100BA001C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  char *v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v15 = v9;
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_100BA00D8(id *a1, uint64_t a2)
{

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void **sub_100BA011C(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v4;
  v10(v8, v9, v5);
  return a1;
}

void **sub_100BA018C(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_QWORD *sub_100BA01F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void **sub_100BA0248(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_100BA02B0(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100BA0384 + 4 * byte_100EE7D6E[(v9 - 1)]))();
}

void sub_100BA03F4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_100BA05E8()
{
  return type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
}

uint64_t sub_100BA05F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = _s20KeyValueRegistrationC10IdentifierVMa(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s9_ObserverCMa()
{
  return objc_opt_self(_TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer);
}

uint64_t *sub_100BA0688(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

double sub_100BA0718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_100BA0760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_100BA07C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  v11 = v8[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_100BA083C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100BA0898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100BA0900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BA090C);
}

uint64_t sub_100BA090C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100BA0988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BA0994);
}

uint64_t sub_100BA0994(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t _s9_ObserverC18HandlerAssociationVMa(uint64_t a1)
{
  return sub_100055934(a1, qword_1011DD890, (uint64_t)&_s9_ObserverC18HandlerAssociationVMn);
}

uint64_t sub_100BA0A20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void _s9_ObserverC16SuiteAssociationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *_s9_ObserverC16SuiteAssociationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *_s9_ObserverC16SuiteAssociationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  return a1;
}

_QWORD *_s9_ObserverC16SuiteAssociationVwta(_QWORD *a1, uint64_t a2)
{
  void *v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *_s9_ObserverC16SuiteAssociationVMa()
{
  return &_s9_ObserverC16SuiteAssociationVN;
}

uint64_t sub_100BA0BAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 0, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_100BA0C0C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100BA0CBC + 4 * byte_100EE7D7C[(v7 - 1)]))();
}

void sub_100BA0D0C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t *sub_100BA0EBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100BA0F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_100BA0FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100BA1040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v12[1];
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100BA10E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100BA114C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100BA11D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BA11E0);
}

uint64_t sub_100BA11E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100BA1260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BA126C);
}

uint64_t sub_100BA126C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100BA12E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100EE7F08;
    v4[2] = &unk_100EE7F20;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100BA1368()
{
  unint64_t result;

  result = qword_1011DD9E0;
  if (!qword_1011DD9E0)
  {
    result = swift_getWitnessTable(&unk_100EE7F38, &_s9_ObserverC16SuiteAssociationVN);
    atomic_store(result, (unint64_t *)&qword_1011DD9E0);
  }
  return result;
}

unint64_t sub_100BA13AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DC520;
  if (!qword_1011DC520)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(&unk_100EE6C1C, v1);
    atomic_store(result, (unint64_t *)&qword_1011DC520);
  }
  return result;
}

BOOL sub_100BA13F4(uint64_t *a1)
{
  uint64_t v1;

  return sub_100B9D274(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100BA1410()
{
  unint64_t result;

  result = qword_1011DD9F8;
  if (!qword_1011DD9F8)
  {
    result = swift_getWitnessTable(&unk_100EE7FE0, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_1011DD9F8);
  }
  return result;
}

ValueMetadata *_s5ErrorOMa_0()
{
  return &_s5ErrorON;
}

BOOL sub_100BA1464(uint64_t *a1)
{
  return sub_100BA13F4(a1);
}

uint64_t sub_100BA147C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

void sub_100BA14BC()
{
  qword_1011DDA00 = (uint64_t)&off_1010FF1B8;
}

void sub_100BA14D0()
{
  qword_1011DDA08 = (uint64_t)&off_1010FF1E8;
}

void sub_100BA14E4()
{
  off_1011DDA10 = &off_1010FF218;
}

void sub_100BA14F8()
{
  void *v0;
  uint64_t v1;

  if (qword_1011DC358 != -1)
    swift_once(&qword_1011DC358, sub_100BA14E4);
  v0 = off_1011DDA10;
  if (qword_1011DC348 != -1)
    swift_once(&qword_1011DC348, sub_100BA14BC);
  swift_bridgeObjectRetain();
  v1 = swift_bridgeObjectRetain();
  sub_100B8AAC0(v1);
  qword_10124F028 = (uint64_t)v0;
}

void sub_100BA15A8()
{
  char *v0;
  int64_t v1;
  _QWORD *v2;
  Swift::String v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1011DC358 != -1)
    swift_once(&qword_1011DC358, sub_100BA14E4);
  v0 = (char *)off_1011DDA10;
  v1 = *((_QWORD *)off_1011DDA10 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_100BA1FBC(0, v1, 0);
    v2 = v0 + 40;
    do
    {
      v8 = *(v2 - 1);
      v9 = *v2;
      swift_bridgeObjectRetain_n(*v2, 2);
      v3._countAndFlagsBits = 115;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v5 = _swiftEmptyArrayStorage[2];
      v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1)
        sub_100BA1FBC((char *)(v4 > 1), v5 + 1, 1);
      v2 += 2;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      v6 = &_swiftEmptyArrayStorage[2 * v5];
      v6[4] = v8;
      v6[5] = v9;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if (qword_1011DC350 != -1)
    swift_once(&qword_1011DC350, sub_100BA14D0);
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  sub_100B8AAC0(v7);
  swift_bridgeObjectRelease();
  qword_10124F030 = (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t URL.replacingSchemeWithHTTP.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  sub_100007E8C(&qword_1011DD570);
  __chkstk_darwin();
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URLComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v2, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10004FF60((uint64_t)v5, &qword_1011DD570);
LABEL_9:
    v18 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v11 = URLComponents.scheme.getter(v10);
  if (!v12)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_9;
  }
  v13 = v11;
  v14 = v12;
  if (qword_1011DC368 != -1)
    swift_once(&qword_1011DC368, sub_100BA15A8);
  if ((sub_100413E70(v13, v14, (_QWORD *)qword_10124F030) & 1) != 0)
  {
    v15 = swift_bridgeObjectRelease();
    v16 = 0x7370747468;
    v17 = 0xE500000000000000;
  }
  else
  {
    if (qword_1011DC360 != -1)
      swift_once(&qword_1011DC360, sub_100BA14F8);
    v20 = sub_100413E70(v13, v14, (_QWORD *)qword_10124F028);
    v15 = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      goto LABEL_15;
    v16 = 1886680168;
    v17 = 0xE400000000000000;
  }
  v21 = URLComponents.scheme.setter(v16, v17, v15);
LABEL_15:
  URLComponents.url.getter(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Void __swiftcall URLComponents.appendPath(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(_QWORD *, _QWORD, __n128);
  Swift::String v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  Swift::String v16;
  void (*v17)(_QWORD *, _QWORD, __n128);
  Swift::String v18;
  __n128 v19;
  _QWORD v20[4];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = URLComponents.path.getter();
  v5 = sub_100BA1AE0(v3, v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v5 == 47 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      v9 = (void (*)(_QWORD *, _QWORD, __n128))URLComponents.path.modify(v20);
      v10._countAndFlagsBits = countAndFlagsBits;
      v10._object = object;
      String.append(_:)(v10);
      v9(v20, 0, v11);
      return;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, 47, 0xE100000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v12 = sub_100BA147C(countAndFlagsBits, (unint64_t)object);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    if (v12 == 47 && v14 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(47, 0xE100000000000000, v12, v14, 0);
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_12;
  }
  v20[0] = 47;
  v20[1] = 0xE100000000000000;
  v16._countAndFlagsBits = countAndFlagsBits;
  v16._object = object;
  String.append(_:)(v16);
  countAndFlagsBits = 47;
  object = (void *)0xE100000000000000;
LABEL_14:
  v17 = (void (*)(_QWORD *, _QWORD, __n128))URLComponents.path.modify(v20);
  v18._countAndFlagsBits = countAndFlagsBits;
  v18._object = object;
  String.append(_:)(v18);
  v19 = swift_bridgeObjectRelease();
  v17(v20, 0, v19);
}

uint64_t sub_100BA1AE0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

Swift::Void __swiftcall URLComponents.appendQueryItems(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  void *v5;

  v2 = URLComponents.queryItems.getter();
  if (v2)
  {
    v5 = (void *)v2;
    v3 = swift_bridgeObjectRetain();
    sub_100B8ABA8(v3);
    a1._rawValue = v5;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  URLComponents.queryItems.setter(a1._rawValue, v4);
}

BOOL URL.isSafariScriptURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, unint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __n128 v38;
  _BOOL8 v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;

  v1 = type metadata accessor for URLQueryItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - v6;
  v8 = sub_100007E8C(&qword_1011DDA18);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007E8C(&qword_1011DD570);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v0, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10004FF60((uint64_t)v13, &qword_1011DD570);
    return 0;
  }
  v18.n128_f64[0] = (*(double (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  v19 = URLComponents.queryItems.getter(v18);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return 0;
  }
  v20 = v19;
  v21 = *(_QWORD *)(v19 + 16);
  if (!v21)
  {
    v40 = 1;
    goto LABEL_24;
  }
  v47 = v17;
  v48 = v15;
  v49 = v14;
  v50 = v10;
  v22 = v19 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v23 = *(_QWORD *)(v2 + 72);
  v24 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v2 + 16);
  v46 = v19;
  swift_bridgeObjectRetain();
  v52 = (unint64_t)"registeredSuites";
  v51 = 0x8000000100E54040;
  while (1)
  {
    v26 = v24(v7, v22, v1);
    v27 = URLQueryItem.name.getter(v26);
    v29 = v28;
    if (v27 == 0x6E6F69746361 && v28 == 0xE600000000000000)
    {
      v30 = swift_bridgeObjectRelease(0xE600000000000000);
      v31 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v24)(v4, v7, v1, v30);
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 0x6E6F69746361, 0xE600000000000000, 0);
      v33 = swift_bridgeObjectRelease(v29);
      v31 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v24)(v4, v7, v1, v33);
      if ((v32 & 1) == 0)
        goto LABEL_6;
    }
    v34 = URLQueryItem.value.getter(v31);
    if (!v35)
    {
LABEL_6:
      v25 = *(void (**)(char *, uint64_t))(v2 + 8);
      v25(v4, v1);
      goto LABEL_7;
    }
    v36 = v35;
    if (v34 == 0xD000000000000016 && v35 == v51)
      break;
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0xD000000000000016, v52 | 0x8000000000000000, 0);
    v38 = swift_bridgeObjectRelease(v36);
    v25 = *(void (**)(char *, uint64_t))(v2 + 8);
    ((void (*)(char *, uint64_t, __n128))v25)(v4, v1, v38);
    if ((v37 & 1) != 0)
      goto LABEL_22;
LABEL_7:
    v25(v7, v1);
    v22 += v23;
    if (!--v21)
    {
      v20 = v46;
      swift_bridgeObjectRelease(v46);
      v40 = 1;
      v10 = v50;
      goto LABEL_23;
    }
  }
  v41 = swift_bridgeObjectRelease(v35);
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v41);
LABEL_22:
  v20 = v46;
  v42 = swift_bridgeObjectRelease(v46);
  v10 = v50;
  (*(void (**)(char *, char *, uint64_t, __n128))(v2 + 32))(v50, v7, v1, v42);
  v40 = 0;
LABEL_23:
  v15 = v48;
  v14 = v49;
  v17 = v47;
LABEL_24:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v40, 1, v1);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v43 = swift_bridgeObjectRelease(v20);
  v39 = (*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v2 + 48))(v10, 1, v1, v43) != 1;
  sub_10004FF60((uint64_t)v10, &qword_1011DDA18);
  return v39;
}

ValueMetadata *type metadata accessor for URL.ITMSSchemes()
{
  return &type metadata for URL.ITMSSchemes;
}

char *sub_100BA1FBC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BA21E0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100BA1FD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DD590);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release();
  return v11;
}

_QWORD *sub_100BA20C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DD578);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DD580);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release();
  return v11;
}

char *sub_100BA21E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DCF20);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release();
  return v11;
}

const char *Feature.MediaPlayer.domain.getter()
{
  return "MediaPlayer";
}

uint64_t Feature.MediaPlayer.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100BA2320 + 4 * asc_100EE8040[a1]))("image_decoding", 14);
}

const char *sub_100BA2320()
{
  return "UpgradeOnPlay";
}

const char *sub_100BA2334()
{
  return "QueueFA";
}

const char *sub_100BA2348()
{
  return "RSuntory";
}

uint64_t sub_100BA235C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100BA2384 + 4 * byte_100EE8044[*v0]))("image_decoding", 14);
}

const char *sub_100BA2384()
{
  return "UpgradeOnPlay";
}

const char *sub_100BA2398()
{
  return "QueueFA";
}

const char *sub_100BA23AC()
{
  return "RSuntory";
}

const char *Feature.MediaControls.domain.getter()
{
  return "MediaControls";
}

const char *Feature.MediaControls.feature.getter()
{
  return "NewVolumeControlsMusic";
}

const char *Feature.MusicKit.domain.getter()
{
  return "MusicKit";
}

const char *Feature.MusicKit.feature.getter()
{
  return "yuma";
}

const char *Feature.MediaRemote.domain.getter()
{
  return "MediaRemote";
}

const char *Feature.MediaRemote.feature.getter()
{
  return "cayenne_music_bottom_player_routing";
}

unint64_t sub_100BA243C()
{
  unint64_t result;

  result = qword_1011DDA20;
  if (!qword_1011DDA20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaPlayer, &type metadata for Feature.MediaPlayer);
    atomic_store(result, (unint64_t *)&qword_1011DDA20);
  }
  return result;
}

unint64_t sub_100BA2484()
{
  unint64_t result;

  result = qword_1011DDA28;
  if (!qword_1011DDA28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaControls, &type metadata for Feature.MediaControls);
    atomic_store(result, (unint64_t *)&qword_1011DDA28);
  }
  return result;
}

unint64_t sub_100BA24CC()
{
  unint64_t result;

  result = qword_1011DDA30;
  if (!qword_1011DDA30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MusicKit, &type metadata for Feature.MusicKit);
    atomic_store(result, (unint64_t *)&qword_1011DDA30);
  }
  return result;
}

unint64_t sub_100BA2514()
{
  unint64_t result;

  result = qword_1011DDA38;
  if (!qword_1011DDA38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.MediaRemote, &type metadata for Feature.MediaRemote);
    atomic_store(result, (unint64_t *)&qword_1011DDA38);
  }
  return result;
}

uint64_t _s11MediaPlayerOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100BA25A4 + 4 * byte_100EE804D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100BA25D8 + 4 * byte_100EE8048[v4]))();
}

uint64_t sub_100BA25D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA25E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BA25E8);
  return result;
}

uint64_t sub_100BA25F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BA25FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100BA2600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA2608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaPlayer()
{
  return &type metadata for Feature.MediaPlayer;
}

ValueMetadata *type metadata accessor for Feature.MediaControls()
{
  return &type metadata for Feature.MediaControls;
}

ValueMetadata *type metadata accessor for Feature.MusicKit()
{
  return &type metadata for Feature.MusicKit;
}

uint64_t _s13MediaControlsOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BA2688 + 4 * byte_100EE8052[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BA26A8 + 4 * byte_100EE8057[v4]))();
}

_BYTE *sub_100BA2688(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BA26A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BA26B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BA26B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BA26C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BA26C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaRemote()
{
  return &type metadata for Feature.MediaRemote;
}

const char *Feature.Music.domain.getter()
{
  return "Music";
}

uint64_t Feature.Music.feature.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100BA2728 + 4 * byte_100EE82F0[a1]))("potluck", 7);
}

const char *sub_100BA2728()
{
  return "dci_multi_select";
}

const char *sub_100BA2754()
{
  return "razzmatazz";
}

const char *sub_100BA277C()
{
  return "symphony";
}

const char *sub_100BA2790()
{
  return "mantis";
}

const char *sub_100BA27A4()
{
  return "qulh";
}

const char *sub_100BA27B8()
{
  return "inline_large_title";
}

const char *sub_100BA27CC()
{
  return "image_playground_covers";
}

const char *sub_100BA27E0()
{
  return "in_with_the_new";
}

unint64_t sub_100BA27F8()
{
  unint64_t result;

  result = qword_1011DDA40;
  if (!qword_1011DDA40)
  {
    result = swift_getWitnessTable("ݘ!", &type metadata for Feature.Music);
    atomic_store(result, (unint64_t *)&qword_1011DDA40);
  }
  return result;
}

uint64_t sub_100BA283C()
{
  unsigned __int8 *v0;

  return Feature.Music.feature.getter(*v0);
}

uint64_t _s5MusicOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100BA28A4 + 4 * byte_100EE8301[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100BA28D8 + 4 * byte_100EE82FC[v4]))();
}

uint64_t sub_100BA28D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA28E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BA28E8);
  return result;
}

uint64_t sub_100BA28F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BA28FCLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100BA2900(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA2908(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Music()
{
  return &type metadata for Feature.Music;
}

const char *Feature.Accessibility.domain.getter()
{
  return "Accessibility";
}

const char *Feature.Accessibility.feature.getter()
{
  return "HapticMusic";
}

unint64_t sub_100BA2950()
{
  unint64_t result;

  result = qword_1011DDA48;
  if (!qword_1011DDA48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.Accessibility, &type metadata for Feature.Accessibility);
    atomic_store(result, (unint64_t *)&qword_1011DDA48);
  }
  return result;
}

uint64_t _s13AccessibilityOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BA29D4 + 4 * byte_100EE83A8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BA29F4 + 4 * byte_100EE83AD[v4]))();
}

_BYTE *sub_100BA29D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BA29F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BA29FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BA2A04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BA2A0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BA2A14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Accessibility()
{
  return &type metadata for Feature.Accessibility;
}

uint64_t Feature.UIP.isEnabled.getter(char a1)
{
  char v1;
  char v2;
  char v3;
  _QWORD v5[3];
  ValueMetadata *v6;
  unint64_t v7;

  if ((a1 & 1) != 0)
  {
    v6 = &_s3UIPO5MusicON;
    v7 = sub_100BA2B08();
    LOBYTE(v5[0]) = 1;
    v3 = isFeatureEnabled(_:)(v5);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v5);
    if ((v3 & 1) == 0)
    {
      v2 = 0;
      return v2 & 1;
    }
    v6 = &_s3UIPO5UIKitON;
    v7 = sub_100BA2B4C();
    LOBYTE(v5[0]) = 1;
    goto LABEL_6;
  }
  v6 = &_s3UIPO5MusicON;
  v7 = sub_100BA2B08();
  LOBYTE(v5[0]) = 0;
  v1 = isFeatureEnabled(_:)(v5);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v5);
  v2 = 0;
  if ((v1 & 1) != 0)
  {
    v6 = &_s3UIPO5UIKitON;
    v7 = sub_100BA2B4C();
    LOBYTE(v5[0]) = 0;
LABEL_6:
    v2 = isFeatureEnabled(_:)(v5);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v5);
  }
  return v2 & 1;
}

unint64_t sub_100BA2B08()
{
  unint64_t result;

  result = qword_1011DDA50;
  if (!qword_1011DDA50)
  {
    result = swift_getWitnessTable(&unk_100EE85E4, &_s3UIPO5MusicON);
    atomic_store(result, (unint64_t *)&qword_1011DDA50);
  }
  return result;
}

unint64_t sub_100BA2B4C()
{
  unint64_t result;

  result = qword_1011DDA58;
  if (!qword_1011DDA58)
  {
    result = swift_getWitnessTable(&unk_100EE85B4, &_s3UIPO5UIKitON);
    atomic_store(result, (unint64_t *)&qword_1011DDA58);
  }
  return result;
}

const char *sub_100BA2B90()
{
  return "Music";
}

const char *sub_100BA2BA4()
{
  _BYTE *v0;

  if (*v0)
    return "uip_fluid_transitions";
  else
    return "uip_floating_tab_bar";
}

const char *sub_100BA2BD0()
{
  return "UIKit";
}

unint64_t sub_100BA2BE8()
{
  unint64_t result;

  result = qword_1011DDA60;
  if (!qword_1011DDA60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Feature.UIP, &type metadata for Feature.UIP);
    atomic_store(result, (unint64_t *)&qword_1011DDA60);
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.UIP()
{
  return &type metadata for Feature.UIP;
}

ValueMetadata *_s3UIPO5UIKitOMa()
{
  return &_s3UIPO5UIKitON;
}

uint64_t _s3UIPOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100BA2C9C + 4 * byte_100EE8461[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100BA2CD0 + 4 * byte_100EE845C[v4]))();
}

uint64_t sub_100BA2CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA2CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BA2CE0);
  return result;
}

uint64_t sub_100BA2CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BA2CF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100BA2CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA2D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3UIPO5MusicOMa()
{
  return &_s3UIPO5MusicON;
}

unint64_t sub_100BA2D20()
{
  unint64_t result;

  result = qword_1011DDA68;
  if (!qword_1011DDA68)
  {
    result = swift_getWitnessTable(&unk_100EE8524, &_s3UIPO5MusicON);
    atomic_store(result, (unint64_t *)&qword_1011DDA68);
  }
  return result;
}

unint64_t sub_100BA2D68()
{
  unint64_t result;

  result = qword_1011DDA70;
  if (!qword_1011DDA70)
  {
    result = swift_getWitnessTable(&unk_100EE858C, &_s3UIPO5UIKitON);
    atomic_store(result, (unint64_t *)&qword_1011DDA70);
  }
  return result;
}

uint64_t FeatureFlagsKey.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[5];

  v3 = a1;
  v6[3] = a1;
  v6[4] = a2;
  v4 = sub_100049F68(v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  LOBYTE(v3) = isFeatureEnabled(_:)(v6);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v6);
  return v3 & 1;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

uint64_t GestureRecognizerHandler.__allocating_init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 40, 7);
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(a1, a2, a3, a4);
  return v9;
}

uint64_t GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  void *Strong;
  void *v12;

  v9 = swift_unknownObjectWeakInit(v4 + 16, 0);
  swift_unknownObjectWeakAssign(v9, a1);
  v10 = (_QWORD *)swift_allocObject(&unk_101101F60, 40, 7);
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  *(_QWORD *)(v4 + 24) = sub_100B7647C;
  *(_QWORD *)(v4 + 32) = v10;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v12 = Strong;
    objc_msgSend(Strong, "addTarget:action:", v4, "handleActionFromGestureRecognizer:", swift_retain(v4).n128_f64[0]);

    swift_release(v4);
  }

  return v4;
}

uint64_t sub_100BA2F44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t GestureRecognizerHandler.deinit()
{
  uint64_t v0;
  void *Strong;
  uint64_t v2;
  void *v3;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "removeTarget:action:", v0, "handleActionFromGestureRecognizer:");

  }
  swift_unknownObjectWeakDestroy(v0 + 16, v2);
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t GestureRecognizerHandler.__deallocating_deinit()
{
  uint64_t v0;
  void *Strong;
  uint64_t v2;
  void *v3;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "removeTarget:action:", v0, "handleActionFromGestureRecognizer:");

  }
  swift_unknownObjectWeakDestroy(v0 + 16, v2);
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100BA3080()
{
  uint64_t result;

  result = swift_slowAlloc(1, -1);
  qword_1011DDA78 = result;
  return result;
}

uint64_t UIGestureRecognizerHandling<>.addHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  Class isa;
  _QWORD *v24;
  _OWORD v25[2];
  _QWORD v26[4];

  v4 = v3;
  if (qword_1011DC370 != -1)
    swift_once(&qword_1011DC370, sub_100BA3080);
  v8 = objc_getAssociatedObject(v4, (const void *)qword_1011DDA78);
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v25, v8);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  sub_100B76A68((uint64_t)v25, (uint64_t)v26);
  if (v26[3])
  {
    v10 = sub_100007E8C(&qword_1011DDA80);
    if (swift_dynamicCast(&v24, v26, (char *)&type metadata for Any + 8, v10, 6))
    {
      v11 = v24;
      goto LABEL_11;
    }
  }
  else
  {
    sub_100B76AB0((uint64_t)v26);
  }
  v11 = _swiftEmptyArrayStorage;
LABEL_11:
  v26[0] = v11;
  v12 = type metadata accessor for GestureRecognizerHandler();
  v13 = (_QWORD *)swift_allocObject(&unk_101101F88, 40, 7);
  v13[2] = a3;
  v13[3] = a1;
  v13[4] = a2;
  v14 = swift_allocObject(v12, 40, 7);
  v15 = v4;
  swift_retain(a2);
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(v15, (uint64_t)sub_100BA3328, (uint64_t)v13, a3);
  swift_retain(v14);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
  v18 = *(_QWORD *)((v26[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v17 = *(_QWORD *)((v26[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v18 >= v17 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
  v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v14);
  specialized Array._endMutation()(v19);
  v20 = (const void *)qword_1011DDA78;
  v21 = v26[0];
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_setAssociatedObject(v15, v20, isa, (void *)1);

  return v14;
}

uint64_t type metadata accessor for GestureRecognizerHandler()
{
  return objc_opt_self(_TtC14MusicUtilities24GestureRecognizerHandler);
}

uint64_t sub_100BA32CC(void *a1, void (*a2)(_QWORD *, id), uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[3] = a4;
  v5[4] = &protocol witness table for UIGestureRecognizer;
  v5[0] = a1;
  a2(v5, objc_msgSend(a1, "state"));
  return _s5Music18DragDropToPlaylistV6OriginVwxx_0(v5);
}

uint64_t sub_100BA3328(void *a1)
{
  uint64_t v1;

  return sub_100BA32CC(a1, *(void (**)(_QWORD *, id))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

void UIGestureRecognizerHandling<>.removeHandler(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  Class isa;
  _QWORD *v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  if (qword_1011DC370 != -1)
    swift_once(&qword_1011DC370, sub_100BA3080);
  v3 = objc_getAssociatedObject(v1, (const void *)qword_1011DDA78);
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v10, v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_100B76A68((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_100B76AB0((uint64_t)v11);
    goto LABEL_10;
  }
  v5 = sub_100007E8C(&qword_1011DDA80);
  if (!swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v5, 6))
  {
LABEL_10:
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  v6 = v9;
LABEL_11:
  swift_retain();
  sub_100BA34CC((uint64_t)v6, a1);
  swift_bridgeObjectRelease();
  swift_release();
  v7 = (const void *)qword_1011DDA78;
  type metadata accessor for GestureRecognizerHandler();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v1, v7, isa, (void *)1);

}

uint64_t sub_100BA348C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerHandling<>.addHandler(_:)(a1, a2, a3);
}

void sub_100BA34AC(uint64_t a1)
{
  UIGestureRecognizerHandling<>.removeHandler(_:)(a1);
}

_QWORD *sub_100BA34CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v8 = v9;
        v10 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if (v8 == a2)
        {
          swift_release(a2);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }
        ++v5;
        if (v10 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v12 = a1;
      else
        v12 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
    v9 = swift_retain(v8);
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

double KeyboardAvoidance.beginFrame.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double KeyboardAvoidance.endFrame.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double KeyboardAvoidance.animationDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t KeyboardAvoidance.animationCurve.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t KeyboardAvoidance.local.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t KeyboardAvoidance.animationOptions.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 72) << 16;
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t KeyboardAvoidance.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[88];

  sub_100BA465C(a1, (uint64_t)v4);
  return sub_100065228((uint64_t)v4, a2, &qword_1011DDB50);
}

void KeyboardAvoidance.animate(alongsideKeyboard:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 72) << 16;
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    v13 = a1;
    v14 = a2;
    v9 = _NSConcreteStackBlock;
    v10 = 1107296256;
    v11 = sub_1001DBD98;
    v12 = &unk_101101FB8;
    v8 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    if (a3)
    {
      v13 = a3;
      v14 = a4;
      v9 = _NSConcreteStackBlock;
      v10 = 1107296256;
      v11 = sub_10012F6FC;
      v12 = &unk_101101FE0;
      a3 = _Block_copy(&v9);
      swift_retain();
      swift_release();
    }
    objc_msgSend((id)objc_opt_self(UIView), "animateWithDuration:delay:options:animations:completion:", v5, v8, a3, *(double *)(v4 + 64), 0.0);
    _Block_release(a3);
    _Block_release(v8);
  }
}

void KeyboardAvoidance.animate(alongsideKeyboard:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  void *v9;
  _QWORD v10[6];

  v5 = objc_opt_self(UIView);
  v6 = *(_QWORD *)(v2 + 72) << 16;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (void *)v5;
    v8 = *(double *)(v2 + 64);
    v10[4] = a1;
    v10[5] = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_1001DBD98;
    v10[3] = &unk_101102008;
    v9 = _Block_copy(v10);
    swift_retain();
    swift_release();
    objc_msgSend(v7, "animateWithDuration:delay:options:animations:completion:", v6, v9, 0, v8, 0.0);
    _Block_release(v9);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.animateContentScrollView(in:)(UIViewController in)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  void *v10;
  objc_class *v11;
  _QWORD v12[6];

  v3 = swift_allocObject(&unk_101102040, 112, 7);
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v1 + 64);
  *(_BYTE *)(v3 + 96) = *(_BYTE *)(v1 + 80);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v5;
  *(UIViewController *)(v3 + 104) = in;
  v6 = objc_opt_self(UIView);
  v7 = *(_QWORD *)(v1 + 72) << 16;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = (void *)v6;
    v9 = *(double *)(v1 + 64);
    v12[4] = sub_100BA4B54;
    v12[5] = v3;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_1001DBD98;
    v12[3] = &unk_101102058;
    v10 = _Block_copy(v12);
    v11 = in.super.super.isa;
    swift_retain();
    swift_release();
    objc_msgSend(v8, "animateWithDuration:delay:options:animations:completion:", v7, v10, 0, v9, 0.0);
    _Block_release(v10);
    swift_release();
  }
}

Swift::Void __swiftcall KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)(UIViewController to)
{
  double *v1;
  id v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double Height;
  double MinY;
  double v21;
  CGRect v22;
  CGRect v23;

  if (-[objc_class isViewLoaded](to.super.super.isa, "isViewLoaded"))
  {
    v3 = -[objc_class view](to.super.super.isa, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "convertRect:fromView:", 0, v1[4], v1[5], v1[6], v1[7]);
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v13 = -[objc_class view](to.super.super.isa, "view");
      if (v13)
      {
        v14 = v13;
        objc_msgSend(v13, "safeAreaInsets");
        v16 = v15;

        -[objc_class additionalSafeAreaInsets](to.super.super.isa, "additionalSafeAreaInsets");
        v18 = v16 - v17;
        objc_msgSend(v4, "frame");
        Height = CGRectGetHeight(v22);
        v23.origin.x = v6;
        v23.origin.y = v8;
        v23.size.width = v10;
        v23.size.height = v12;
        MinY = CGRectGetMinY(v23);

        if (Height - MinY - v18 < 0.0)
          v21 = 0.0;
        else
          v21 = Height - MinY - v18;
        -[objc_class setAdditionalSafeAreaInsets:](to.super.super.isa, "setAdditionalSafeAreaInsets:", 0.0, 0.0, v21, 0.0);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void KeyboardAvoidance.additionalSafeAreaInsets(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v5;
  id v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double Height;
  double MinY;
  char v24;
  CGRect v25;
  CGRect v26;

  v5 = 0.0;
  if (!objc_msgSend(a1, "isViewLoaded")
    || (v6 = objc_msgSend(a1, "view")) == 0)
  {
    v24 = 1;
LABEL_8:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = v24;
    return;
  }
  v7 = v6;
  objc_msgSend(v6, "convertRect:fromView:", 0, v2[4], v2[5], v2[6], v2[7]);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = objc_msgSend(a1, "view");
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v16, "safeAreaInsets");
    v19 = v18;

    objc_msgSend(a1, "additionalSafeAreaInsets");
    v21 = v19 - v20;
    objc_msgSend(v7, "frame");
    Height = CGRectGetHeight(v25);
    v26.origin.x = v9;
    v26.origin.y = v11;
    v26.size.width = v13;
    v26.size.height = v15;
    MinY = CGRectGetMinY(v26);

    v24 = 0;
    if (Height - MinY - v21 < 0.0)
      v5 = 0.0;
    else
      v5 = Height - MinY - v21;
    goto LABEL_8;
  }
  __break(1u);
}

void KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double *v3;
  uint64_t v7;
  __int128 v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double Height;
  CGFloat x;
  CGFloat v34;
  CGFloat width;
  double v36;
  double v37;
  char v38;
  double v39;
  double v40;
  double v41;
  CGFloat v42;
  CGFloat v43;
  double v44;
  double v45;
  double v46;
  double v47;
  CGFloat y;
  double v49;
  _BYTE v50[40];
  CGRect v51;
  char v52;
  _OWORD v53[2];
  char v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;

  v7 = swift_allocObject(&unk_101102090, 48, 7);
  sub_100BA4DF4(a1, (uint64_t)v50);
  sub_100065228((uint64_t)v50, (uint64_t)v53, &qword_1011DDB58);
  if (v54 == 1)
  {
    swift_deallocUninitializedObject(v7, 48, 7);
LABEL_12:
    v38 = 1;
    x = 0.0;
    v34 = 0.0;
    width = 0.0;
    v39 = 0.0;
    goto LABEL_13;
  }
  v8 = v53[1];
  *(_OWORD *)(v7 + 16) = v53[0];
  *(_OWORD *)(v7 + 32) = v8;
  v9 = objc_msgSend(a1, "contentScrollViewForEdge:", 1);
  if (!v9)
    goto LABEL_11;
  v10 = v9;
  v11 = objc_msgSend(a1, "view");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "window");

    if (!v13
      || (v14 = objc_msgSend(v13, "windowScene"), v13, !v14)
      || (v15 = objc_msgSend(v14, "screen"), v14, !v15))
    {
      swift_release();

      goto LABEL_12;
    }
    *(_QWORD *)(v7 + 16) = 0;
    v16 = swift_allocObject(&unk_101102090, 48, 7);
    objc_msgSend(v10, "bounds");
    v18 = v17;
    v20 = v19;
    v22 = v21;
    *(double *)(v16 + 16) = v17;
    *(double *)(v16 + 24) = v19;
    *(double *)(v16 + 32) = v21;
    v23 = objc_msgSend(v15, "coordinateSpace");
    v24 = v3[4];
    v25 = v3[5];
    v26 = v3[6];
    v27 = v3[7];
    v28 = v10;
    objc_msgSend(v23, "convertRect:toCoordinateSpace:", v28, v24, v25, v26, v27);
    v30 = v29;

    swift_unknownObjectRelease(v23);
    v31 = v30 - v20;
    *(double *)(v16 + 40) = v30 - v20;
    v55.origin.x = v18;
    v55.origin.y = v20;
    v55.size.width = v22;
    v55.size.height = v30 - v20;
    Height = CGRectGetHeight(v55);
    if (CGRectGetHeight(*(CGRect *)(v7 + 16)) > Height)
    {
      x = *(double *)(v7 + 16);
      v34 = *(double *)(v7 + 24);
      width = *(double *)(v7 + 32);
      v36 = *(double *)(v7 + 40);
      v56.origin.x = v18;
      v56.origin.y = v20;
      v56.size.width = v22;
      v56.size.height = v31;
      v37 = CGRectGetHeight(v56);
      swift_release();
      swift_release();

      v38 = 0;
      v39 = v36 - v37;
LABEL_13:
      *(CGFloat *)a3 = x;
      *(CGFloat *)(a3 + 8) = v34;
      *(CGFloat *)(a3 + 16) = width;
      *(double *)(a3 + 24) = v39;
      *(_BYTE *)(a3 + 32) = v38;
      return;
    }
    sub_100065228(a2, (uint64_t)&v51, &qword_1011DDB58);
    if ((v52 & 1) == 0)
    {
      y = v51.origin.y;
      v58 = CGRectUnion(*(CGRect *)(v7 + 16), v51);
      x = v58.origin.x;
      v34 = v58.origin.y;
      width = v58.size.width;
      v39 = v58.size.height;
      v58.origin.x = v18;
      v58.origin.y = v20;
      v58.size.width = v22;
      v58.size.height = v31;
      v49 = CGRectGetHeight(v58);
      v59.origin.x = x;
      v59.origin.y = v34;
      v59.size.width = width;
      v59.size.height = v39;
      if (CGRectGetHeight(v59) <= v49)
      {
        v60.origin.x = v18;
        v60.origin.y = v20;
        v60.size.width = v22;
        v60.size.height = v31;
        v44 = CGRectGetWidth(v60);
        v61.origin.x = x;
        v61.origin.y = v34;
        v61.size.width = width;
        v61.size.height = v39;
        if (CGRectGetWidth(v61) <= v44)
          goto LABEL_22;
      }
      v43 = y;
LABEL_21:
      x = sub_100BA4F30(v7, v16, v28, v43);
      v34 = v45;
      width = v46;
      v39 = v47;
LABEL_22:
      swift_release();

      swift_release();
      v38 = 0;
      goto LABEL_13;
    }
    objc_msgSend(v28, "contentOffset");
    v41 = v40;
    if (v40 > CGRectGetMinY(*(CGRect *)(v7 + 16))
      || (v57.origin.x = v18,
          v57.origin.y = v20,
          v57.size.width = v22,
          v57.size.height = v31,
          v42 = v41 + CGRectGetHeight(v57),
          CGRectGetMaxY(*(CGRect *)(v7 + 16)) > v42))
    {
      v43 = v41;
      goto LABEL_21;
    }
    swift_release();

LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t static KeyboardAvoidance.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;

  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2)
    && CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32))
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72))
  {
    v4 = ((*(_BYTE *)(a1 + 80) & 1) == 0) ^ *(_BYTE *)(a2 + 80);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_100BA4158(uint64_t a1, uint64_t a2)
{
  CGFloat v2;
  double v3;
  CGFloat v4;
  uint64_t v5;
  int v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  CGFloat v15;
  CGFloat v16;
  CGRect v17;
  CGRect v18;

  v2 = *(double *)(a1 + 48);
  v15 = *(double *)(a1 + 40);
  v16 = *(double *)(a1 + 32);
  v4 = *(double *)(a1 + 56);
  v3 = *(double *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = *(double *)(a2 + 32);
  v8 = *(double *)(a2 + 40);
  v9 = *(double *)(a2 + 48);
  v10 = *(double *)(a2 + 56);
  v11 = *(double *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(unsigned __int8 *)(a2 + 80);
  result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if ((_DWORD)result)
  {
    v17.origin.y = v15;
    v17.origin.x = v16;
    v17.size.width = v2;
    v17.size.height = v4;
    v18.origin.x = v7;
    v18.origin.y = v8;
    v18.size.width = v9;
    v18.size.height = v10;
    result = CGRectEqualToRect(v17, v18);
    if ((_DWORD)result)
    {
      result = 0;
      if (v3 == v11)
      {
        if (v5 == v12)
          return v6 ^ v13 ^ 1u;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t KeyboardObserver.update.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain(a3);
  return a2;
}

uint64_t KeyboardObserver.init(options:update:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_retain();
  v6 = swift_bridgeObjectRetain();
  sub_100BA43D0(v6, a2, a3);
  swift_bridgeObjectRelease(a1);
  swift_release();
  return a1;
}

uint64_t sub_100BA42D8(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[88];
  _OWORD v14[5];
  char v15;
  _OWORD v16[5];
  char v17;

  v7 = type metadata accessor for Notification(0);
  v8 = __chkstk_darwin(v7);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, __n128))(v11 + 16))(v10, a1, v8);
  sub_100BA465C((uint64_t)v10, (uint64_t)v13);
  result = sub_100065228((uint64_t)v13, (uint64_t)v14, &qword_1011DDB50);
  if (v15 != 2)
  {
    v16[2] = v14[2];
    v16[3] = v14[3];
    v16[4] = v14[4];
    v17 = v15;
    v16[0] = v14[0];
    v16[1] = v14[1];
    return a2(a4, v16);
  }
  return result;
}

_QWORD *sub_100BA43D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t Strong;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    v6 = sub_100837CE4(v3);
    v8 = v7;
    v10 = v9 & 1;
    v30 = v3 + 56;
    result = (_QWORD *)objc_opt_self(NSNotificationCenter);
    v28 = result;
    v29 = v3;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
    {
      if (((*(_QWORD *)(v30 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(v3 + 36) != v8)
        goto LABEL_12;
      v11 = *(char *)(*(_QWORD *)(v3 + 48) + v6);
      v12 = *(void **)*(&off_101102278 + v11);
      v13 = swift_allocObject(&unk_101102260, 33, 7);
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = a3;
      *(_BYTE *)(v13 + 32) = v11;
      v14 = type metadata accessor for NotificationObserver();
      v15 = swift_allocObject(v14, 64, 7);
      v16 = swift_unknownObjectWeakInit(v15 + 24, 0);
      *(_QWORD *)(v15 + 16) = v12;
      swift_unknownObjectWeakAssign(v16, 0);
      *(_BYTE *)(v15 + 32) = 1;
      *(_QWORD *)(v15 + 48) = sub_100BA53D8;
      *(_QWORD *)(v15 + 56) = v13;
      v17 = v12;
      swift_retain();
      v18 = objc_msgSend(v28, "defaultCenter", swift_retain().n128_f64[0]);
      *(_QWORD *)(v15 + 40) = v18;
      Strong = swift_unknownObjectWeakLoadStrong(v15 + 24);
      v20 = v17;
      v21 = v18;
      objc_msgSend(v21, "addObserver:selector:name:object:", v15, "handleNotification:", v20, Strong, swift_retain().n128_f64[0]);

      swift_release();
      swift_unknownObjectRelease(Strong);

      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v23 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = v15;
      v3 = v29;
      v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v24);
      specialized ContiguousArray._endMutation()(v25);
      result = (_QWORD *)sub_100837D88(v6, v8, v10 & 1, v29);
      v6 = (int64_t)result;
      v8 = v26;
      v10 = v27 & 1;
      if (!--v4)
      {
        sub_10016AE14((uint64_t)result, v26, v27 & 1);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_100BA465C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  unsigned __int8 v48;
  double v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  _BYTE v55[40];
  __int128 v56;
  __int128 v57;

  v4 = Notification.userInfo.getter(a1);
  if (!v4)
    goto LABEL_32;
  v5 = v4;
  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameBeginUserInfoKey);
  v54 = v6;
  AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v7 = sub_10079C294((uint64_t)v55), (v8 & 1) != 0))
  {
    sub_10004FA40(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10004FF2C((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  v9 = sub_10004A07C(0, (unint64_t *)&qword_1011DC380, NSValue_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    goto LABEL_31;
  v10 = v53;
  objc_msgSend(v53, "CGRectValue");
  v52 = v11;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v54 = v18;
  AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v19 = sub_10079C294((uint64_t)v55), (v20 & 1) != 0))
  {
    sub_10004FA40(*(_QWORD *)(v5 + 56) + 32 * v19, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10004FF2C((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    goto LABEL_31;
  v21 = v53;
  objc_msgSend(v53, "CGRectValue");
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationDurationUserInfoKey);
  v54 = v30;
  AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v31 = sub_10079C294((uint64_t)v55), (v32 & 1) != 0))
  {
    sub_10004FA40(*(_QWORD *)(v5 + 56) + 32 * v31, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10004FF2C((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_29;
  v33 = sub_10004A07C(0, &qword_1011DD068, NSNumber_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease(v5);
    goto LABEL_32;
  }
  v34 = v53;
  objc_msgSend(v53, "floatValue");
  v36 = v35;

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardAnimationCurveUserInfoKey);
  v54 = v37;
  AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v38 = sub_10079C294((uint64_t)v55), (v39 & 1) != 0))
  {
    sub_10004FA40(*(_QWORD *)(v5 + 56) + 32 * v38, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_10004FF2C((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_29:
    swift_bridgeObjectRelease(v5);
LABEL_30:
    sub_100B76AB0((uint64_t)&v56);
    goto LABEL_32;
  }
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
    goto LABEL_31;
  v40 = v53;
  v41 = objc_msgSend(v53, "integerValue");

  v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardIsLocalUserInfoKey);
  v54 = v42;
  AnyHashable.init<A>(_:)(&v53, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v43 = sub_10079C294((uint64_t)v55), (v44 & 1) != 0))
  {
    sub_10004FA40(*(_QWORD *)(v5 + 56) + 32 * v43, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_bridgeObjectRelease(v5);
  sub_10004FF2C((uint64_t)v55);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v33, 6) & 1) != 0)
  {
    v50 = v53;
    v48 = objc_msgSend(v53, "BOOLValue");

    v49 = v36;
    v51 = type metadata accessor for Notification(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(a1, v51);
    v47 = v52;
    goto LABEL_33;
  }
LABEL_32:
  v45 = type metadata accessor for Notification(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(a1, v45);
  v41 = 0;
  v47 = 0;
  v13 = 0;
  v48 = 2;
  v15 = 0;
  v17 = 0;
  v23 = 0;
  v25 = 0;
  v27 = 0;
  v29 = 0;
  v49 = 0.0;
LABEL_33:
  *(_QWORD *)a2 = v47;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v29;
  *(double *)(a2 + 64) = v49;
  *(_QWORD *)(a2 + 72) = v41;
  *(_BYTE *)(a2 + 80) = v48;
  return result;
}

uint64_t sub_100BA4B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BA4B28(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100BA4B30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 112, 7);
}

void sub_100BA4B54()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)((UIViewController)v1);
  sub_100BA4B94(v1);
}

uint64_t sub_100BA4B84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_100BA4B94(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;

  v1 = objc_msgSend(a1, "contentScrollView");
  if (v1)
  {
    v29 = v1;
    v2 = objc_msgSend(v1, "firstResponder");
    if (v2)
    {
      v3 = v2;
      objc_opt_self(UIView);
      v4 = swift_dynamicCastObjCClass(v3);
      if (v4)
      {
        v5 = (void *)v4;
        v6 = v3;
        v7 = objc_msgSend(v5, "superview");
        if (v7)
        {
          v8 = v7;
          sub_10004A07C(0, &qword_1011DD498, UIView_ptr);
          while (1)
          {
            v9 = v8;
            v10 = v29;
            v11 = static NSObject.== infix(_:_:)(v9, v10);

            if ((v11 & 1) != 0)
              break;
            objc_opt_self(UICollectionReusableView);
            if (swift_dynamicCastObjCClass(v9)
              || (objc_opt_self(UITableViewCell), swift_dynamicCastObjCClass(v9)))
            {
              v9 = v9;

              v5 = v9;
              break;
            }
            v8 = objc_msgSend(v9, "superview");

            if (!v8)
              goto LABEL_10;
          }
        }
        else
        {
LABEL_10:
          v9 = 0;
        }
        objc_msgSend(v5, "frame");
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v20 = objc_msgSend(v5, "superview");
        objc_msgSend(v29, "convertRect:fromView:", v20, v13, v15, v17, v19);
        v22 = v21;
        v24 = v23;
        v26 = v25;
        v28 = v27;

        objc_msgSend(v29, "scrollRectToVisible:animated:", 0, v22, v24, v26, v28);
        v29 = v5;
      }

    }
  }
}

void sub_100BA4DF4(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = 1;
  v4 = objc_msgSend(a1, "contentScrollViewForEdge:", 1);
  v5 = 0;
  if (!v4)
    goto LABEL_7;
  v6 = v4;
  v7 = objc_msgSend(v4, "firstResponder");
  if (!v7)
  {
LABEL_6:

    v3 = 1;
LABEL_7:
    v22 = 0;
    v24 = 0;
    v26 = 0;
    goto LABEL_8;
  }
  v8 = v7;
  objc_opt_self(UIView);
  v9 = (void *)swift_dynamicCastObjCClass(v8);
  if (!v9)
  {

    goto LABEL_6;
  }
  v10 = v9;
  objc_msgSend(v9, "frame");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = objc_msgSend(v10, "superview");
  objc_msgSend(v6, "convertRect:fromView:", v19, v12, v14, v16, v18);
  v5 = v20;
  v22 = v21;
  v24 = v23;
  v26 = v25;

  v3 = 0;
LABEL_8:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v26;
  *(_BYTE *)(a2 + 32) = v3;
}

double sub_100BA4F30(uint64_t a1, uint64_t a2, void *a3, CGFloat a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];

  v8 = a1 + 16;
  v9 = a2 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  v10 = *(double *)(a1 + 16);
  swift_beginAccess(v9, v15, 0, 0);
  CGRectGetHeight(*(CGRect *)(a2 + 16));
  swift_beginAccess(v8, v14, 0, 0);
  CGRectGetHeight(*(CGRect *)(a1 + 16));
  swift_beginAccess(v8, v13, 0, 0);
  if (CGRectGetMinY(*(CGRect *)(a1 + 16)) > a4)
  {
    objc_msgSend(a3, "adjustedContentInset");
    swift_beginAccess(v8, v12, 0, 0);
    CGRectGetMaxY(*(CGRect *)(a1 + 16));
  }
  return v10;
}

unint64_t sub_100BA5070()
{
  unint64_t result;

  result = qword_1011DDB60;
  if (!qword_1011DDB60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardObserver.Option, &type metadata for KeyboardObserver.Option);
    atomic_store(result, (unint64_t *)&qword_1011DDB60);
  }
  return result;
}

__n128 initializeWithCopy for KeyboardAvoidance(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyboardAvoidance(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyboardAvoidance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardAvoidance()
{
  return &type metadata for KeyboardAvoidance;
}

uint64_t destroy for KeyboardObserver(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_release(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for KeyboardObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_retain(v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for KeyboardObserver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for KeyboardObserver(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  *(_OWORD *)a1 = *a2;
  swift_release(a1[2]);
  v4 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardObserver()
{
  return &type metadata for KeyboardObserver;
}

uint64_t storeEnumTagSinglePayload for KeyboardObserver.Option(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100BA5334 + 4 * byte_100EE86B5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100BA5368 + 4 * asc_100EE86B0[v4]))();
}

uint64_t sub_100BA5368(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA5370(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BA5378);
  return result;
}

uint64_t sub_100BA5384(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BA538CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100BA5390(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BA5398(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyboardObserver.Option()
{
  return &type metadata for KeyboardObserver.Option;
}

uint64_t sub_100BA53B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_100BA53D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100BA42D8(a1, *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t Signpost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OSSignpostID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

id Signpost.log.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Signpost(0) + 20));
}

uint64_t type metadata accessor for Signpost(uint64_t a1)
{
  uint64_t result;

  result = qword_1011DDBC8;
  if (!qword_1011DDBC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Signpost);
  return result;
}

uint64_t Signpost.name.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Signpost(0) + 24));
}

uint64_t Signpost.init(name:object:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  int v31;

  v31 = a3;
  v30 = a2;
  v10 = sub_100007E8C(&qword_1011DDB68);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v30 - v14;
  v16 = type metadata accessor for OSSignpostID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v30 - v21;
  v23 = a5;
  swift_unknownObjectRetain(a4, v24);
  OSSignpostID.init(log:object:)(v23, a4);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v22, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  sub_100BA5818((uint64_t)v15, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16) == 1)
  {
    OSSignpostID.init(log:)(v23);
    sub_100BA5860((uint64_t)v15);
    sub_100BA5860((uint64_t)v13);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(a6, v20, v16);
  }
  else
  {
    sub_100BA5860((uint64_t)v15);
    v25 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v25(v20, v13, v16);
    v25(a6, v20, v16);
  }
  swift_unknownObjectRelease(a4);
  v26 = type metadata accessor for Signpost(0);
  *(_QWORD *)&a6[*(int *)(v26 + 20)] = v23;
  v27 = &a6[*(int *)(v26 + 24)];
  v28 = v30;
  *(_QWORD *)v27 = a1;
  *((_QWORD *)v27 + 1) = v28;
  v27[16] = v31;
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t Signpost.init(name:id:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t result;
  char *v20;
  uint64_t v21;

  sub_100007E8C(&qword_1011DDB68);
  __chkstk_darwin();
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignpostID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100BA5818(a4, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    OSSignpostID.init(log:)(a5);
    sub_100BA5860(a4);
    sub_100BA5860((uint64_t)v13);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(a6, v17, v14);
  }
  else
  {
    sub_100BA5860(a4);
    v18 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v18(v17, v13, v14);
    v18(a6, v17, v14);
  }
  result = type metadata accessor for Signpost(0);
  *(_QWORD *)&a6[*(int *)(result + 20)] = a5;
  v20 = &a6[*(int *)(result + 24)];
  *(_QWORD *)v20 = a1;
  *((_QWORD *)v20 + 1) = a2;
  v20[16] = a3;
  return result;
}

uint64_t sub_100BA5818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DDB68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BA5860(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DDB68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Signpost.emit(dso:)(uint64_t a1)
{
  return sub_100BA58DC(a1, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.emit(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100BA593C(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.begin(dso:)(uint64_t a1)
{
  return sub_100BA58DC(a1, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.begin(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100BA593C(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.end(dso:)(uint64_t a1)
{
  return sub_100BA58DC(a1, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_100BA58DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a2();
  v5 = type metadata accessor for Signpost(0);
  return os_signpost(_:dso:log:name:signpostID:)(v4, a1, *(_QWORD *)(v2 + *(int *)(v5 + 20)), *(_QWORD *)(v2 + *(int *)(v5 + 24)), *(_QWORD *)(v2 + *(int *)(v5 + 24) + 8), *(unsigned __int8 *)(v2 + *(int *)(v5 + 24) + 16), v2);
}

uint64_t Signpost.end(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return sub_100BA593C(a1, a2, a3, a4, a5, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_100BA593C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v12 = a6();
  v13 = type metadata accessor for Signpost(0);
  v15 = a4;
  return os_signpost(_:dso:log:name:signpostID:_:_:)(v12, a1, *(_QWORD *)(v6 + *(int *)(v13 + 20)), *(_QWORD *)(v6 + *(int *)(v13 + 24)), *(_QWORD *)(v6 + *(int *)(v13 + 24) + 8), *(unsigned __int8 *)(v6 + *(int *)(v13 + 24) + 16), v6, a2, a3, v15, a5);
}

uint64_t static Signpost.interval<A>(name:log:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  int v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[3];
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  unsigned int v37;

  v34[2] = a6;
  v35 = a5;
  v37 = a3;
  v36 = a2;
  v34[1] = a7;
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E8C(&qword_1011DDB68);
  __chkstk_darwin();
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v16 = (char *)v34 - v15;
  v17 = type metadata accessor for Signpost(0);
  v18 = __chkstk_darwin();
  v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v16, 1, 1, v9, v18);
  sub_100BA5818((uint64_t)v16, (uint64_t)v14);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9);
  v22 = a4;
  v23 = v22;
  if (v21 == 1)
  {
    OSSignpostID.init(log:)(v22);
    sub_100BA5860((uint64_t)v16);
    sub_100BA5860((uint64_t)v14);
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, v9);
  }
  else
  {
    sub_100BA5860((uint64_t)v16);
    v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v25(v12, v14, v9);
    v24 = ((uint64_t (*)(char *, char *, uint64_t))v25)(v20, v12, v9);
  }
  *(_QWORD *)&v20[*(int *)(v17 + 20)] = v23;
  v26 = &v20[*(int *)(v17 + 24)];
  v27 = v36;
  *(_QWORD *)v26 = a1;
  *((_QWORD *)v26 + 1) = v27;
  v28 = v37;
  v26[16] = v37;
  v29 = static os_signpost_type_t.begin.getter(v24);
  v30 = os_signpost(_:dso:log:name:signpostID:)(v29, &_mh_execute_header, v23, a1, v27, v28, v20);
  v31 = v35(v30);
  v32 = static os_signpost_type_t.end.getter(v31);
  os_signpost(_:dso:log:name:signpostID:)(v32, &_mh_execute_header, v23, a1, v27, v28, v20);
  return sub_1008F157C((uint64_t)v20);
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for OSSignpostID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_OWORD *)v11 = *(_OWORD *)v12;
    v11[16] = v12[16];
    v13 = v10;
  }
  return a1;
}

void destroy for Signpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v12 = v9;
  return a1;
}

uint64_t assignWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BA5EEC);
}

uint64_t sub_100BA5EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BA5F74);
}

uint64_t sub_100BA5F74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100BA5FEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for OSSignpostID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100EE87A8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void UnfairLock.locked<A>(_:)(void (*a1)(void))
{
  uint64_t v1;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t UnfairLock.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v1 = swift_allocObject(v0, 24, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = 0;
  return v1;
}

uint64_t UnfairLock.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = 0;
  return v0;
}

uint64_t UnfairLock.deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return v0;
}

uint64_t UnfairLock.__deallocating_deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Void __swiftcall UnfairLock.assertOwned()()
{
  uint64_t v0;

  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

Swift::Void __swiftcall UnfairLock.assertNotOwned()()
{
  uint64_t v0;

  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t type metadata accessor for UnfairLock()
{
  return objc_opt_self(_TtC14MusicUtilities10UnfairLock);
}

uint64_t WeakArray.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for WeakArray.WeakBox(0, a2, a2, a4);
  return Array.endIndex.getter(a1, v5);
}

uint64_t type metadata accessor for WeakArray.WeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray.WeakBox);
}

uint64_t WeakArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[8];

  v6 = type metadata accessor for WeakArray.WeakBox(0, a3, a3, a4);
  Array.subscript.getter(a1, a2, v6);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9, v6);
  return Strong;
}

{
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  type metadata accessor for WeakArray.WeakBox(255, a3, a3, a4);
  v7 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  RandomAccessCollection<>.indices.getter(v7, WitnessTable, &protocol witness table for Int);
  v14 = v15;
  v13 = a1;
  v9 = sub_100007E8C(&qword_1011DD030);
  v11 = Range.contains(_:)(&v13, v9);
  result = 0;
  if ((v11 & 1) != 0)
    return WeakArray.subscript.getter(a1, a2, a3, v10);
  return result;
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t WeakArray.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[5] = a1;
  v11[2] = a2;
  v4 = type metadata accessor for Array(0);
  v6 = type metadata accessor for WeakArray.WeakBox(0, a2, a2, v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v9 = sub_100B81F78((void (*)(char *, char *))sub_100BA6440, (uint64_t)v11, v4, v6, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v8);
  swift_bridgeObjectRelease(a1);
  return v9;
}

void sub_100BA63F4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  swift_unknownObjectRetain(*a1, a2);
  v5 = swift_unknownObjectWeakInit(a3, 0);
  swift_unknownObjectWeakAssign(v5, v4);
  swift_unknownObjectRelease(v4);
}

void sub_100BA6440(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100BA63F4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t WeakArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];

  v3 = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain(a1, a2);
  swift_unknownObjectWeakInit(v7, 0);
  swift_unknownObjectWeakAssign(v7, a1);
  swift_unknownObjectRelease(a1);
  type metadata accessor for WeakArray.WeakBox(255, v3, v3, v4);
  v5 = type metadata accessor for Array(0);
  return Array.append(_:)(v7, v5);
}

uint64_t WeakArray.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[8];

  v5 = type metadata accessor for WeakArray.WeakBox(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16), a4);
  v6 = type metadata accessor for Array(0);
  Array.remove(at:)(a1, v6);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9, v5);
  return Strong;
}

uint64_t WeakArray.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  WeakArray.reap()();
  v10 = *(_QWORD *)(a2 + 16);
  v11 = a1;
  type metadata accessor for WeakArray.WeakBox(255, v10, v10, v4);
  v5 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  return RangeReplaceableCollection<>.removeAll(where:)(sub_100BA6688, &v9, v5, WitnessTable, v7);
}

Swift::Void __swiftcall WeakArray.reap()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WeakArray.WeakBox(255, v6, v6, v1);
  v2 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  v4 = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  RangeReplaceableCollection<>.removeAll(where:)(sub_100BA66CC, &v5, v2, WitnessTable, v4);
}

uint64_t sub_100BA6688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v4 = result;
    swift_unknownObjectRelease(result);
    return v4 == v2;
  }
  return result;
}

BOOL sub_100BA66CC(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_unknownObjectWeakLoadStrong(a1);
  v2 = Strong;
  if (Strong)
    swift_unknownObjectRelease(Strong);
  return v2 == 0;
}

uint64_t WeakArray.allElements.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD v8[6];

  v8[5] = a1;
  v8[2] = a2;
  v5 = type metadata accessor for WeakArray(0, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, v5);
  return Sequence.compactMap<A>(_:)(sub_100BA677C, v8, v5, a2, WitnessTable);
}

uint64_t sub_100BA677C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  *a3 = v3;
  return swift_unknownObjectRetain(v3, a2);
}

uint64_t type metadata accessor for WeakArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakArray);
}

uint64_t sub_100BA67A4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, a1);
}

uint64_t sub_100BA67B4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for DefaultIndices<A>, a1);
}

uint64_t sub_100BA67C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;

  result = WeakArray.endIndex.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3);
  *a4 = result;
  return result;
}

void (*sub_100BA67F4(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t *v7;
  double (*v8)(_QWORD *);
  uint64_t v9;

  v7 = (uint64_t *)malloc(0x30uLL);
  *a1 = v7;
  v8 = sub_100BA6884(v7, *a2, *v3, *(_QWORD *)(a3 + 16));
  v7[4] = v9;
  v7[5] = (uint64_t)v8;
  return sub_100BA6858;
}

void sub_100BA6858(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

double (*sub_100BA6884(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  *a1 = WeakArray.subscript.getter(a2, a3, a4, a4);
  return sub_10043960C;
}

_QWORD *sub_100BA68DC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_100BA68F4(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void sub_100BA690C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_100BA6918(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, a1);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_100BA694C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v4;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for WeakArray<A>, a1);
  v4 = j___ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF_0(v1, a1, WitnessTable);
  swift_bridgeObjectRelease(*v1);
  return v4;
}

uint64_t WeakValuesDictionary.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  WeakValuesDictionary.init()();
  return v1;
}

_QWORD *WeakValuesDictionary.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = sub_100B72A70();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v2, v3, 0, 0);
  v5 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v0[2] = Dictionary.init(dictionaryLiteral:)(v5, v2, v3, *(_QWORD *)(v1 + 96));
  return v0;
}

uint64_t WeakValuesDictionary.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  id v9;
  id v10;
  id v11;
  uint64_t v13;
  _OWORD v14[2];
  id v15[4];
  _BYTE v16[24];

  v3 = (_QWORD *)*v1;
  swift_beginAccess(v1 + 2, v16, 0, 0);
  v4 = v1[2];
  v5 = v3[10];
  v6 = sub_100B72A70();
  v7 = v3[12];
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter(v15, a1, v4, v5, v6, v7);
  *(_QWORD *)&v8 = swift_bridgeObjectRelease().n128_u64[0];
  v9 = v15[0];
  if (v15[0])
  {
    v10 = objc_msgSend(v15[0], "weakObjectValue", v8);
    if (v10)
    {
      v11 = v10;
      _bridgeAnyObjectToAny(_:)(v14, v10);

      swift_unknownObjectRelease(v11);
    }
    else
    {

      memset(v14, 0, sizeof(v14));
    }
    sub_100B76A68((uint64_t)v14, (uint64_t)v15);
    if (v15[3])
    {
      if ((swift_dynamicCast(&v13, v15, (char *)&type metadata for Any + 8, v3[11], 6) & 1) != 0)
        return v13;
    }
    else
    {
      sub_100B76AB0((uint64_t)v15);
    }
  }
  return 0;
}

void WeakValuesDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  id v21;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a2, v6, v8);
    v20[0] = a1;
    v12 = *(_QWORD *)(v5 + 88);
    swift_unknownObjectRetain(a1, v13);
    v14 = _bridgeAnythingToObjectiveC<A>(_:)(v20, v12);
    v15 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithWeakObject:", v14);
    swift_unknownObjectRelease(v14);
    v21 = v15;
    swift_beginAccess(v2 + 2, v20, 33, 0);
    v16 = sub_100B72A70();
    v17 = type metadata accessor for Dictionary(0, v6, v16, *(_QWORD *)(v5 + 96));
    Dictionary.subscript.setter(&v21, v10, v17);
    swift_endAccess(v20);
    swift_unknownObjectRelease_n(a1, 2);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  else
  {
    swift_beginAccess(v2 + 2, v20, 33, 0);
    v18 = sub_100B72A70();
    v19 = type metadata accessor for Dictionary(0, v6, v18, *(_QWORD *)(v5 + 96));
    Dictionary.removeValue(forKey:)(&v21, a2, v19);
    swift_endAccess(v20);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);

  }
}

void (*WeakValuesDictionary.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v5[1] = v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  (*(void (**)(void))(v7 + 16))();
  *v5 = WeakValuesDictionary.subscript.getter(a2);
  return sub_100BA6DBC;
}

void sub_100BA6DBC(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (void *)(*a1)[4];
  v5 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v2[3] + 32))((*a1)[4], v5, v2[2]);
    v7 = swift_unknownObjectRetain(v3, v6);
    WeakValuesDictionary.subscript.setter(v7, (uint64_t)v4);
    swift_unknownObjectRelease(*v2);
  }
  else
  {
    WeakValuesDictionary.subscript.setter(**a1, (uint64_t)v5);
  }
  free(v5);
  free(v4);
  free(v2);
}

Swift::Void __swiftcall WeakValuesDictionary.compact()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  id v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  unint64_t v45;
  int64_t v46;
  char *v47;
  char *v48;
  void *v49;
  char *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  Swift::Bool IsNativeType;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t i;
  _QWORD *v82;
  uint64_t v83;
  _OWORD v84[2];
  _QWORD v85[4];
  char v86[24];
  uint64_t v87;

  v82 = (_QWORD *)*v0;
  v1 = v82[10];
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v75 = (char *)&v64 - v5;
  v64 = v6;
  __chkstk_darwin();
  v76 = (char *)&v64 - v7;
  v71 = sub_100B72A70();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v71, "key value ", 0);
  v9 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v79 = *(_QWORD *)(v9 - 8);
  v80 = v9;
  __chkstk_darwin();
  v77 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v78 = (char *)&v64 - v11;
  v87 = static Array._allocateUninitialized(_:)(0, v1);
  v67 = v0 + 2;
  swift_beginAccess(v0 + 2, v86, 0, 0);
  v12 = v0[2];
  v68 = v4;
  if ((v12 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaDictionary.makeIterator()(v13);
    v69 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v14 | 0x8000000000000000;
  }
  else
  {
    v18 = -1 << *(_BYTE *)(v12 + 32);
    v15 = ~v18;
    v19 = *(_QWORD *)(v12 + 64);
    v69 = v12 + 64;
    v20 = -v18;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v16 = v21 & v19;
    v17 = v12;
  }
  v73 = v17 & 0x7FFFFFFFFFFFFFFFLL;
  v66 = v15;
  v72 = (unint64_t)(v15 + 64) >> 6;
  v65 = v72 - 1;
  v22 = swift_bridgeObjectRetain();
  v23 = 0;
  v74 = (char *)&type metadata for Any + 8;
  v70 = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v17; ; v17 = i)
  {
    if ((v17 & 0x8000000000000000) != 0)
    {
      v34 = __CocoaDictionary.Iterator.next()(v22);
      if (v34)
      {
        v37 = v34;
        v38 = v35;
        v39 = v77;
        _forceBridgeFromObjectiveC<A>(_:_:)(v34, v1, v1);
        swift_unknownObjectRelease(v37);
        v40 = *(int *)(TupleTypeMetadata2 + 48);
        *(_QWORD *)&v84[0] = v38;
        swift_unknownObjectRetain(v38, v41);
        swift_dynamicCast(v85, v84, v70, v71, 7);
        v42 = v85[0];
        v43 = v38;
        v29 = v39;
        v44 = swift_unknownObjectRelease(v43);
        *(_QWORD *)&v39[v40] = v42;
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v31 + 56))(v39, 0, 1, TupleTypeMetadata2, v44);
      }
      else
      {
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        v29 = v77;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v31 + 56))(v77, 1, 1, TupleTypeMetadata2, v36);
      }
      v33 = v23;
      v26 = v16;
    }
    else
    {
      if (v16)
      {
        v26 = (v16 - 1) & v16;
        v27 = __clz(__rbit64(v16)) | (v23 << 6);
        v28 = v23;
LABEL_17:
        v29 = v77;
        (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v77, *(_QWORD *)(v17 + 48) + *(_QWORD *)(v2 + 72) * v27, v1);
        v30 = *(void **)(*(_QWORD *)(v17 + 56) + 8 * v27);
        *(_QWORD *)&v29[*(int *)(TupleTypeMetadata2 + 48)] = v30;
        v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, TupleTypeMetadata2);
        v32 = v30;
        v33 = v28;
        goto LABEL_38;
      }
      v28 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return;
      }
      v33 = v23;
      if (v28 < v72)
      {
        v45 = *(_QWORD *)(v69 + 8 * v28);
        v17 = i;
        if (v45)
          goto LABEL_23;
        v33 = v23 + 1;
        if (v23 + 2 < v72)
        {
          v45 = *(_QWORD *)(v69 + 8 * (v23 + 2));
          v17 = i;
          if (v45)
          {
            v28 = v23 + 2;
LABEL_23:
            v26 = (v45 - 1) & v45;
            v27 = __clz(__rbit64(v45)) + (v28 << 6);
            goto LABEL_17;
          }
          v46 = v23 + 3;
          v33 = v23 + 2;
          if (v23 + 3 < v72)
          {
            v45 = *(_QWORD *)(v69 + 8 * v46);
            v17 = i;
            if (v45)
            {
              v28 = v23 + 3;
              goto LABEL_23;
            }
            while (1)
            {
              v28 = v46 + 1;
              if (__OFADD__(v46, 1))
                goto LABEL_57;
              if (v28 >= v72)
                break;
              v45 = *(_QWORD *)(v69 + 8 * v28);
              ++v46;
              if (v45)
                goto LABEL_23;
            }
            v33 = v65;
          }
        }
      }
      v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      v29 = v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v77, 1, 1, TupleTypeMetadata2);
      v26 = 0;
    }
LABEL_38:
    v47 = v78;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v78, v29, v80);
    v48 = v47;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v47, 1, TupleTypeMetadata2) == 1)
      break;
    v49 = *(void **)&v47[*(int *)(TupleTypeMetadata2 + 48)];
    v50 = v76;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v76, v48, v1);
    v51 = objc_msgSend(v49, "weakObjectValue");
    if (v51)
    {
      v52 = v51;
      _bridgeAnyObjectToAny(_:)(v84, v51);
      swift_unknownObjectRelease(v52);
    }
    else
    {
      memset(v84, 0, sizeof(v84));
    }
    sub_100B76A68((uint64_t)v84, (uint64_t)v85);
    if (!v85[3])
    {
      sub_100B76AB0((uint64_t)v85);
LABEL_12:
      v24 = v75;
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v75, v50, v1);
      v25 = type metadata accessor for Array(0);
      Array.append(_:)(v24, v25);

      goto LABEL_13;
    }
    if ((swift_dynamicCast(&v83, v85, v74, v82[11], 6) & 1) == 0)
      goto LABEL_12;

    swift_unknownObjectRelease(v83);
LABEL_13:
    v22 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v50, v1);
    v23 = v33;
    v16 = v26;
  }
  sub_10004FA7C(i);
  v53 = v87;
  v54 = Array.endIndex.getter(v87, v1);
  v55 = v68;
  v56 = v71;
  v57 = v67;
  if (!v54)
    goto LABEL_55;
  v58 = 0;
  while (2)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v58, IsNativeType, v53, v1);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v55, v53+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v58, v1);
      v60 = v58 + 1;
      if (__OFADD__(v58, 1))
        break;
      goto LABEL_49;
    }
    v62 = _ArrayBuffer._getElementSlowPath(_:)(v58, v53, v1);
    if (v64 != 8)
      goto LABEL_58;
    v63 = v62;
    v85[0] = v62;
    (*(void (**)(char *, _QWORD *, uint64_t))(v2 + 16))(v55, v85, v1);
    swift_unknownObjectRelease(v63);
    v60 = v58 + 1;
    if (!__OFADD__(v58, 1))
    {
LABEL_49:
      swift_beginAccess(v57, v85, 33, 0);
      v61 = type metadata accessor for Dictionary(0, v1, v56, v82[12]);
      Dictionary.removeValue(forKey:)(v84, v55, v61);
      swift_endAccess(v85);

      (*(void (**)(char *, uint64_t))(v2 + 8))(v55, v1);
      ++v58;
      if (v60 == Array.endIndex.getter(v53, v1))
        goto LABEL_55;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_55:
  swift_bridgeObjectRelease();
}

uint64_t WeakValuesDictionary.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t sub_100BA75C8(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 104);
}

uint64_t type metadata accessor for WeakValuesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AF454(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakValuesDictionary);
}

uint64_t sub_100BA7618()
{
  uint64_t result;

  result = sub_100BA7634();
  qword_10124F040 = result;
  return result;
}

uint64_t sub_100BA7634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  id v51;
  NSURL *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  char *v57;
  uint64_t result;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  char *v62;
  void (*v63)(uint64_t, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v68;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v64 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100007E8C(&qword_1011DE770);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v59 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v59 - v12;
  v14 = __chkstk_darwin(v11);
  v63 = (void (*)(uint64_t, char *, uint64_t))((char *)&v59 - v15);
  __chkstk_darwin(v14);
  v17 = (char *)&v59 - v16;
  v60 = sub_100BC6274((uint64_t)_swiftEmptyArrayStorage);
  v18 = sub_100007E8C(&qword_1011DE778);
  v19 = *(_QWORD *)(v4 + 72);
  v20 = *(unsigned __int8 *)(v4 + 80);
  v21 = (v20 + 32) & ~v20;
  v66 = v19;
  v22 = swift_allocObject(v18, v21 + 3 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100EA7AC0;
  v61 = v21;
  v59 = v22;
  v23 = v22 + v21;
  v24 = (void *)objc_opt_self(NSBundle);
  v25 = objc_msgSend(v24, "mainBundle");
  v26 = objc_msgSend(v25, "resourceURL");

  v65 = v1;
  if (v26)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56);
    v28 = v17;
    v29 = 0;
  }
  else
  {
    v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56);
    v28 = v17;
    v29 = 1;
  }
  v67 = v27;
  v27((uint64_t)v28, v29, 1, v0);
  sub_100BAAE3C((uint64_t)v17, v23);
  type metadata accessor for BundleFinder();
  v30 = objc_msgSend(v24, "bundleForClass:", swift_getObjCClassFromMetadata());
  v31 = objc_msgSend(v30, "resourceURL");

  if (v31)
  {
    v32 = (uint64_t)v63;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v33 = 0;
  }
  else
  {
    v33 = 1;
    v32 = (uint64_t)v63;
  }
  v34 = v67;
  v67(v32, v33, 1, v0);
  v35 = v66;
  sub_100BAAE3C(v32, v23 + v66);
  v36 = v23 + 2 * v35;
  v37 = objc_msgSend(v24, "mainBundle");
  v38 = objc_msgSend(v37, "bundleURL");

  v39 = v64;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v38);

  v40 = v65;
  v63 = *(void (**)(uint64_t, char *, uint64_t))(v65 + 32);
  v63(v36, v39, v0);
  v34(v36, 0, 1, v0);
  v68 = v60;
  sub_100C57414(v59);
  v41 = v68;
  v42 = v68[2];
  if (v42)
  {
    v43 = &qword_1011DE770;
    v44 = (uint64_t)v68 + v61;
    v60 = v68;
    v61 = 0x8000000100E544A0;
    v62 = v13;
    do
    {
      sub_10004A160(v44, (uint64_t)v10, v43);
      v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      if (v45(v10, 1, v0) == 1)
      {
        sub_100BAAE84((uint64_t)v10);
        v46 = 1;
      }
      else
      {
        URL.appendingPathComponent(_:)(0xD000000000000022, v61);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v0);
        v46 = 0;
      }
      v67((uint64_t)v13, v46, 1, v0);
      sub_10004A160((uint64_t)v13, (uint64_t)v7, v43);
      if (v45(v7, 1, v0) == 1)
      {
        sub_100BAAE84((uint64_t)v13);
      }
      else
      {
        v47 = v10;
        v48 = v43;
        v49 = v7;
        v50 = v64;
        v63((uint64_t)v64, v49, v0);
        v51 = objc_allocWithZone((Class)NSBundle);
        URL._bridgeToObjectiveC()(v52);
        v54 = v53;
        v55 = v51;
        v40 = v65;
        v56 = objc_msgSend(v55, "initWithURL:", v54);

        v57 = v50;
        v7 = v49;
        v43 = v48;
        v10 = v47;
        v13 = v62;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v57, v0);
        sub_100BAAE84((uint64_t)v13);
        if (v56)
        {
          swift_bridgeObjectRelease(v60);
          return (uint64_t)v56;
        }
      }
      v44 += v66;
      --v42;
    }
    while (v42);
    v41 = v60;
  }
  swift_bridgeObjectRelease(v41);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000037, 0x8000000100E54460, "MusicCoreUI/resource_bundle_accessor.swift", 42, 2, 44, 0);
  __break(1u);
  return result;
}

void variable initialization expression of Artwork.caching(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id variable initialization expression of Artwork.decoration@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id result;

  v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v2[6];
  result = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)a1 + v5) = result;
  *(_QWORD *)((char *)a1 + v2[7]) = 1;
  return result;
}

uint64_t variable initialization expression of Artwork.size()
{
  return 0;
}

double variable initialization expression of Artwork.View._laidBounds()
{
  return 0.0;
}

uint64_t variable initialization expression of Artwork.Decoration.corner@<X0>(uint64_t a1@<X8>)
{
  return sub_1009898C0((uint64_t (*)(_QWORD))&type metadata accessor for UIView.Corner, a1);
}

id variable initialization expression of Artwork.Decoration.fillColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
}

id variable initialization expression of Artwork.Placeholder.background()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
}

uint64_t variable initialization expression of Artwork.Placeholder.tint()
{
  uint64_t v0;
  id v1;

  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  v0 = qword_1011DED10;
  v1 = (id)qword_1011DED10;
  return v0;
}

id variable initialization expression of Artwork.Placeholder.symbolConfiguration()
{
  return objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 4);
}

double variable initialization expression of Artwork.Placeholder.imageScaleFactor()
{
  return 0.5;
}

double static CGFloat.squareAspectRatio.getter()
{
  return 1.0;
}

id variable initialization expression of Artwork.Placeholder.View.contentView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
}

unint64_t sub_100BA7D38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DE780);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain();
    sub_100079DE4(v9, v10);
    result = sub_10079C2C4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100BA7E5C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DE768);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_10079C2C4(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100BA7F74(uint64_t a1)
{
  return sub_100BA7F8C(a1, &qword_1011DE760);
}

unint64_t sub_100BA7F80(uint64_t a1)
{
  return sub_100BA7F8C(a1, &qword_1011DE758);
}

unint64_t sub_100BA7F8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain();
    v11 = v10;
    result = sub_10079C2C4(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100BA80A0(uint64_t a1)
{
  return sub_100043490(a1, &qword_1011DE728, &qword_1011DE730, sub_10079C328);
}

unint64_t sub_100BA80BC(uint64_t a1)
{
  return sub_100043490(a1, &qword_1011DE748, &qword_1011DE750, sub_10079C328);
}

unint64_t sub_100BA80D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DE738);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = sub_10079C2C4(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v3[7] + result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 24;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100BA81E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  char v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007E8C(&qword_1011DE720);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_100BCE324(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of Lyrics.translationMap()
{
  return sub_100BA7E5C((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of LyricsLoader.lyricsOperations()
{
  return sub_100BA7F8C((uint64_t)_swiftEmptyArrayStorage, &qword_1011DE760);
}

uint64_t variable initialization expression of LyricsLoader.accessQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004A07C(0, (unint64_t *)&qword_1011DF580, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v9);
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_100048748((unint64_t *)&unk_1011DE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_100007E8C((uint64_t *)&unk_1011DF590);
  v12 = sub_100BA84CC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100E543C0, v8, v6, v3, 0);
}

unint64_t sub_100BA84CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DE3F0;
  if (!qword_1011DE3F0)
  {
    v1 = sub_100044B54((uint64_t *)&unk_1011DF590);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011DE3F0);
  }
  return result;
}

id variable initialization expression of LyricsLoader.operationQueue()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v0, "setMaxConcurrentOperationCount:", 1);
  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.firstLineStartingPosition()
{
  return 60.0;
}

void variable initialization expression of SyncedLyricsViewController.Specs.selectedLinePosition(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x4028000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineSpacing()
{
  return 25.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsTopSpacing()
{
  return 15.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100BA9120(a1, 0.9);
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineDelay()
{
  return 0.05;
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.font()
{
  sub_10004A07C(0, (unint64_t *)&qword_1011DE3F8, UIFont_ptr);
  return static UIFont.preferredFont(forTextStyle:weight:)(UIFontTextStyleLargeTitle, UIFontWeightBold);
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsFont()
{
  sub_10004A07C(0, (unint64_t *)&qword_1011DE3F8, UIFont_ptr);
  return static UIFont.shortEmphasizedPreferredFont(forTextStyle:)(UIFontTextStyleTitle2);
}

id variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont()
{
  return sub_100BA8654((double *)&UIFontWeightBold);
}

id variable initialization expression of SyncedLyricsViewController.Specs.songwritersNamesFont()
{
  return sub_100BA8654((double *)&UIFontWeightMedium);
}

id sub_100BA8654(double *a1)
{
  return objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 22.0, *a1);
}

double variable initialization expression of SyncedLyricsViewController.Specs.emphasizingScaleRange()
{
  return 1.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor()
{
  return sub_100BA8E70((SEL *)&selRef_labelColor, (uint64_t)&unk_101102CC8, (uint64_t)sub_100BA91F8, (uint64_t)&unk_101102CE0);
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.35);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.85);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_101102D18, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v12[4] = sub_100BAB160;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100264780;
  v12[3] = &unk_101102D30;
  v7 = _Block_copy(v12);
  v8 = v4;
  v9 = v2;
  v10 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release().n128_f64[0]);

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.4);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_101102D68, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v12[4] = sub_100BAB160;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100264780;
  v12[3] = &unk_101102D80;
  v7 = _Block_copy(v12);
  v8 = v4;
  v9 = v2;
  v10 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release().n128_f64[0]);

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedBackgroundVocalsTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.35);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.85);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_101102DB8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v12[4] = sub_100BAB160;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100264780;
  v12[3] = &unk_101102DD0;
  v7 = _Block_copy(v12);
  v8 = v4;
  v9 = v2;
  v10 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release().n128_f64[0]);

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingBackgroundVocalsTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.65);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_101102E08, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v12[4] = sub_100BAB160;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100264780;
  v12[3] = &unk_101102E20;
  v7 = _Block_copy(v12);
  v8 = v4;
  v9 = v2;
  v10 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release().n128_f64[0]);

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedScrollTextColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.4);

  v3 = objc_msgSend(v0, "labelColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.4);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_101102E58, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v12[4] = sub_100BAB160;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100264780;
  v12[3] = &unk_101102E70;
  v7 = _Block_copy(v12);
  v8 = v4;
  v9 = v2;
  v10 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release().n128_f64[0]);

  _Block_release(v7);
  return v10;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.deselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100BA9120(a1, 0.98);
}

id variable initialization expression of SyncedLyricsViewController.Specs.hiddenTextColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineTapProgressFreezeDuration()
{
  return 0.1;
}

double static SegueResponseContext.defaultExpirationTimeoutInterval.getter()
{
  return 5.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRange()
{
  return 0.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientColor()
{
  return sub_100BA8E70((SEL *)&selRef_tintColor, (uint64_t)&unk_101102EA8, (uint64_t)sub_100BAB160, (uint64_t)&unk_101102EC0);
}

id sub_100BA8E70(SEL *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v18[6];

  v8 = (void *)objc_opt_self(UIColor);
  v9 = objc_msgSend(v8, "whiteColor");
  v10 = objc_msgSend(v8, *a1);
  v11 = objc_allocWithZone((Class)UIColor);
  v12 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v9;
  v18[4] = a3;
  v18[5] = v12;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_100264780;
  v18[3] = a4;
  v13 = _Block_copy(v18);
  v14 = v10;
  v15 = v9;
  v16 = objc_msgSend(v11, "initWithDynamicProvider:", v13, swift_release().n128_f64[0]);

  _Block_release(v13);
  return v16;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionBackgroundVocalsGradientColor()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[6];

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.175);

  v3 = objc_msgSend(v0, "tintColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.175);

  v5 = objc_allocWithZone((Class)UIColor);
  v6 = swift_allocObject(&unk_101102EF8, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v2;
  v12[4] = sub_100BAB160;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100264780;
  v12[3] = &unk_101102F10;
  v7 = _Block_copy(v12);
  v8 = v4;
  v9 = v2;
  v10 = objc_msgSend(v5, "initWithDynamicProvider:", v7, swift_release().n128_f64[0]);

  _Block_release(v7);
  return v10;
}

double variable initialization expression of JSStoreHTTPRequest.timeout()
{
  return 30.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.touchDownTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100BA9120(a1, 0.95);
}

CGFloat sub_100BA9120@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>)
{
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;

  CGAffineTransformMakeScale(&v6, a2, a2);
  result = v6.a;
  v4 = *(_OWORD *)&v6.c;
  v5 = *(_OWORD *)&v6.tx;
  *a1 = *(_OWORD *)&v6.a;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double variable initialization expression of SyncedLyricsViewController.Specs.vocalGroupWidthCoefficient()
{
  return 0.85;
}

id variable initialization expression of SyncedLyricsViewController.Specs.highlightViewBackgroundColor()
{
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 1.0, 0.08);
}

double variable initialization expression of SyncedLyricsViewController.Specs.highlightViewMargin()
{
  return 16.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakVisualizationMinSeconds()
{
  return 7.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakViewHeight()
{
  return 40.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.syllableLift()
{
  return 2.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineFinishProgressAnimationDuration()
{
  return 0.25;
}

uint64_t sub_100BA91CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100BA91F8(void *a1)
{
  uint64_t v1;

  return sub_100BF5374(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100BA9200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BA9210(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double variable initialization expression of SyncedLyricsViewController.bottomTapAreaHeight()
{
  return Int.seconds.getter(0);
}

void *variable initialization expression of SyncedLyricsViewController.specs@<X0>(void *a1@<X8>)
{
  _BYTE v3[544];

  sub_100BF5860(0, 0, v3);
  return memcpy(a1, v3, 0x219uLL);
}

id variable initialization expression of SyncedLyricsViewController.scrollView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
}

id variable initialization expression of SyncedLyricsViewController.tapFeedbackGenerator()
{
  return objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "init");
}

id variable initialization expression of LineProgressGradientView.gradientView()
{
  return sub_100BA9980((void (*)(_QWORD))type metadata accessor for LineProgressGradientView.GradientView);
}

uint64_t variable initialization expression of NoticePresenter._notice@<X0>(uint64_t a1@<X8>)
{
  return sub_1009898C0(type metadata accessor for Notice, a1);
}

__n128 variable initialization expression of NoticePresenter.uiKitConfiguration@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  CGFloat bottom;
  CGFloat trailing;
  __n128 result;
  __n128 v6;

  if (qword_1011DE078 != -1)
    swift_once(&qword_1011DE078, sub_100C0BBE0);
  v2 = static NoticePresenter.defaultEdgePadding;
  v6 = *(__n128 *)&NSDirectionalEdgeInsetsZero.top;
  bottom = NSDirectionalEdgeInsetsZero.bottom;
  trailing = NSDirectionalEdgeInsetsZero.trailing;
  swift_unknownObjectWeakInit(a1);
  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = v2;
  result = v6;
  *(__n128 *)(a1 + 24) = v6;
  *(CGFloat *)(a1 + 40) = bottom;
  *(CGFloat *)(a1 + 48) = trailing;
  return result;
}

uint64_t variable initialization expression of NoticePresentingModifier._controller()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for NoticePresenter(0);
  v1 = sub_100048748(&qword_1011DE400, type metadata accessor for NoticePresenter, (uint64_t)&protocol conformance descriptor for NoticePresenter);
  return EnvironmentObject.init()(v0, v1);
}

double variable initialization expression of ArtistRazzmatazzView._rowHeight()
{
  return 75.0;
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8CB0, &qword_1011DE408, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._colorSchemeContrast@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8CD8, (uint64_t *)&unk_1011DE410, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View.Style.blendMode@<X0>(uint64_t a1@<X8>)
{
  return sub_1009898C0((uint64_t (*)(_QWORD))&type metadata accessor for BlendMode, a1);
}

uint64_t variable initialization expression of Card.DisplayStyle._displayCornerRadius()
{
  return swift_getKeyPath(&unk_100EE8D08);
}

uint64_t sub_100BA9418@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.displayCornerRadius.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100BA9448(uint64_t a1)
{
  return EnvironmentValues.displayCornerRadius.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t variable initialization expression of Collaboration.Flow.View._dismiss@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8D38, &qword_1011E4D50, a1);
}

uint64_t sub_100BA9488()
{
  return EnvironmentValues.dismiss.getter();
}

double variable initialization expression of Card.ViewController.maxRegularWidth()
{
  return 414.0;
}

uint64_t variable initialization expression of CarouselView.selectedItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = type metadata accessor for Binding(0, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of CarouselView._scrollViewProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._layoutDirection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_100EE8D68);
  v2 = sub_100007E8C((uint64_t *)&unk_1011DE420);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t variable initialization expression of CircularProgressView._state()
{
  return 0;
}

id variable initialization expression of CircularProgressView.trackLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
}

uint64_t variable initialization expression of Collaboration.Management.Model._hasNetworkConnectivity()
{
  _QWORD v1[15];

  static ApplicationCapabilities.shared.getter((uint64_t)v1);
  sub_100065184(v1);
  return BYTE1(v1[0]);
}

uint64_t variable initialization expression of Collaboration.Management.Model.$__lazy_storage_$_artworkViewModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_100007E8C((uint64_t *)&unk_1011E4DA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of Collaboration.Management.View._dynamicTypeSize@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8D98, &qword_1011DE430, a1);
}

uint64_t variable initialization expression of Collaboration.Management.View._openURL@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8DC8, &qword_1011DE438, a1);
}

uint64_t variable initialization expression of PlaylistCurators.View._horizontalSizeClass@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8DF8, &qword_1011DE440, a1);
}

uint64_t sub_100BA9658(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;

  sub_100007E8C(&qword_1011DE740);
  __chkstk_darwin();
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004A160(a1, (uint64_t)v3, &qword_1011DE740);
  return EnvironmentValues.horizontalSizeClass.setter(v3);
}

uint64_t variable initialization expression of Collaboration.Flow.Collaborator.artwork@<X0>(uint64_t a1@<X8>)
{
  return sub_1009898C0((uint64_t (*)(_QWORD))&type metadata accessor for Artwork, a1);
}

uint64_t variable initialization expression of InlineProfileEditingView._imagePickerSourceType()
{
  return 1;
}

uint64_t variable initialization expression of MoreLabel._layoutDirection@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8D68, (uint64_t *)&unk_1011DE420, a1);
}

uint64_t variable initialization expression of MoreLabel._accessibilityShowButtonShapes()
{
  return swift_getKeyPath(&unk_100EE8E28);
}

uint64_t variable initialization expression of LoadingView.style()
{
  return 0x10000000000;
}

id variable initialization expression of LoadingView.label()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id variable initialization expression of LoadingView.activityIndicator()
{
  return objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100);
}

uint64_t variable initialization expression of NoticeView._dismiss()
{
  return swift_getKeyPath(&unk_100EE8E58);
}

UIFontTextStyle variable initialization expression of SymbolButton.Configuration.symbol@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = UIFontTextStyleSubheadline;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_100EC0EB0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  return UIFontTextStyleSubheadline;
}

UIFontTextStyle SymbolButton.Title.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = UIFontTextStyleSubheadline;
  *(UIFontWeight *)(a1 + 24) = UIFontWeightSemibold;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return UIFontTextStyleSubheadline;
}

double variable initialization expression of SymbolButton.Configuration.material@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.customView@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.symbolToTextSpacing()
{
  return 4.0;
}

double variable initialization expression of SymbolButton.Configuration.minimumSize()
{
  return sub_100BA9D14(&qword_1011DE2E8, (uint64_t)&static SymbolButton.Configuration.platterMinimumSize, (uint64_t)&static SymbolButton.Configuration.platterMinimumSize + 8, (uint64_t)sub_100CCDB38);
}

CGFloat variable initialization expression of SymbolButton.Configuration.contentInsets()
{
  return NSDirectionalEdgeInsetsZero.top;
}

uint64_t variable initialization expression of SymbolButton.Configuration.accessibility()
{
  return 1;
}

uint64_t variable initialization expression of PlayIntentButtonWrapper._playIntentButtonMaterial()
{
  return swift_getKeyPath(&unk_100EE8E80);
}

char *variable initialization expression of PlayIntentLayoutHelper.playButton()
{
  type metadata accessor for SymbolButton(0);
  return SymbolButton.__allocating_init(intent:)(0);
}

char *variable initialization expression of PlayIntentLayoutHelper.shuffleButton()
{
  type metadata accessor for SymbolButton(0);
  return SymbolButton.__allocating_init(intent:)(1);
}

uint64_t variable initialization expression of PlayIntentLayoutHelper.configuration()
{
  return 513;
}

id variable initialization expression of QRCodeOverlayViewController.backgroundView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
}

id variable initialization expression of QRCodeOverlayViewController.qrCodeView()
{
  return sub_100BA9980((void (*)(_QWORD))type metadata accessor for QRCodeOverlayViewController.ContainerView);
}

id sub_100BA9980(void (*a1)(_QWORD))
{
  a1(0);
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "init");
}

id variable initialization expression of QRCodeOverlayViewController.logoView()
{
  NSString v0;
  id v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v1);
  return v2;
}

id variable initialization expression of QRCodeOverlayViewController.titleLabel()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
}

id variable initialization expression of QRCodeOverlayViewController.subtitleLabelEffectView()
{
  id v0;
  id v1;

  if (qword_1011DE270 != -1)
    swift_once(&qword_1011DE270, sub_100CB0EC0);
  v0 = objc_msgSend((id)objc_opt_self(UIVibrancyEffect), "effectForBlurEffect:", qword_10124FF88);
  v1 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v0);

  return v1;
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView()
{
  return sub_100BA9BCC((Class *)UIImageView_ptr);
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.overlayLayer()
{
  return objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
}

uint64_t variable initialization expression of QRCodeOverlayViewController.ImageViewRepresentable._foregroundColor()
{
  return swift_getKeyPath(&unk_100EE8EA8);
}

uint64_t sub_100BA9B3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.effectiveForegroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of Reactions.StackView._colorScheme@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BA9B78((uint64_t)&unk_100EE8ED8, &qword_1011DE4A8, a1);
}

uint64_t sub_100BA9B78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = swift_getKeyPath(a1);
  v5 = sub_100007E8C(a2);
  return swift_storeEnumTagMultiPayload(a3, v5, 0);
}

id variable initialization expression of SliderView.stackView()
{
  return sub_100BA9BCC((Class *)UIStackView_ptr);
}

id variable initialization expression of SliderView.remainingTrack()
{
  return sub_100BA9BCC((Class *)UIView_ptr);
}

id sub_100BA9BCC(Class *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(objc_allocWithZone(*a1), "init");
  v2 = UIView.forAutolayout.getter();

  return v2;
}

id variable initialization expression of SliderView.feedbackGenerator()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "initWithStyle:", 0);
}

id variable initialization expression of SliderView.trackLayoutGuide()
{
  return objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
}

id variable initialization expression of SliderView.elapsedTrackColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
}

id variable initialization expression of SliderView.remainingTrackColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
}

id variable initialization expression of SliderView.trackingColor()
{
  if (qword_1011DDEF0 != -1)
    swift_once(&qword_1011DDEF0, sub_100BC20E8);
  return (id)static UIColor.MusicTint.normal;
}

double variable initialization expression of SymbolButton.hitRectMinimumSize()
{
  return sub_100BA9D14(&qword_1011DE2F0, (uint64_t)&static SymbolButton.Configuration.hitRectMinimumSize, (uint64_t)&static SymbolButton.Configuration.hitRectMinimumSize + 8, (uint64_t)sub_100CCDB7C);
}

double sub_100BA9D14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 != -1)
    swift_once(a1, a4);
  return *(double *)a2;
}

id variable initialization expression of SymbolButton.containerView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIView), "init");
}

id variable initialization expression of SymbolButton.materialView()
{
  objc_class *v0;
  id v1;
  objc_super v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = 1;
  v0 = (objc_class *)type metadata accessor for SymbolButton.MaterialView();
  v5 = 0u;
  v6 = 0u;
  v7 = 0;
  v3.receiver = objc_allocWithZone(v0);
  v3.super_class = v0;
  v1 = objc_msgSendSuper2(&v3, "initWithEffect:", 0);
  sub_100CCC1B8((uint64_t)&v4);

  return v1;
}

id variable initialization expression of SymbolButton.backgroundView()
{
  double v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _BYTE v6[24];

  if (qword_1011DE2C8 != -1)
    swift_once(&qword_1011DE2C8, sub_100CC6F80);
  swift_beginAccess(&static SymbolButton.Background.clear, v6, 0, 0);
  v0 = *(double *)&static SymbolButton.Background.clear;
  v1 = (void *)qword_101250118;
  v2 = qword_101250120;
  v3 = qword_101250128;
  objc_allocWithZone((Class)type metadata accessor for SymbolButton.BackgroundView());
  swift_bridgeObjectRetain();
  v4 = v1;
  return sub_100CCC5A4(v1, v0, v2, v3);
}

uint64_t variable initialization expression of SymbolButton.$__lazy_storage_$_metrics@<X0>(uint64_t a1@<X8>)
{
  return sub_1009898C0(type metadata accessor for SymbolButton.Metrics, a1);
}

double variable initialization expression of SymbolButton.Update.animationOptions()
{
  return 0.0;
}

UIFontTextStyle variable initialization expression of SymbolButton.Symbol.style()
{
  return UIFontTextStyleSubheadline;
}

uint64_t variable initialization expression of JSSocialOnboardingWelcomeViewModel.textAlignment()
{
  return 6;
}

uint64_t variable initialization expression of JSStaticImageViewModel.imageResource()
{
  return 0;
}

UIFontWeight variable initialization expression of SymbolButton.Title.weight()
{
  return UIFontWeightSemibold;
}

CGFloat variable initialization expression of SymbolButton.CustomView.insets()
{
  return UIEdgeInsetsZero.top;
}

double variable initialization expression of VerticalToggleSlider.packageDefinition@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

float variable initialization expression of VerticalToggleSlider.minLevelOffsetRatio()
{
  double v0;

  if (qword_1011DE358 != -1)
    swift_once(&qword_1011DE358, sub_100CE1F14);
  v0 = *((double *)&xmmword_1011E6C58 + 1);
  if (qword_1011DE348 != -1)
    swift_once(&qword_1011DE348, sub_100CE1EEC);
  return 1.0 / v0 * *(double *)&qword_1011E6C40;
}

uint64_t variable initialization expression of VerticalToggleSlider.growAnchorPoint()
{
  return 8;
}

float variable initialization expression of VerticalToggleSlider.internalValueRange()
{
  return 0.0;
}

float variable initialization expression of VerticalToggleSlider._maxValue()
{
  return 1.0;
}

float variable initialization expression of VerticalToggleSlider._minValue()
{
  return 0.0;
}

id variable initialization expression of VerticalToggleSlider.blurEffect()
{
  if (qword_1011DE330 != -1)
    swift_once(&qword_1011DE330, sub_100CE0D68);
  return objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithBlurRadius:", *(double *)&qword_1011E6C10);
}

double variable initialization expression of VerticalToggleSlider.shapeChange()
{
  if (qword_1011DE338 != -1)
    swift_once(&qword_1011DE338, sub_100CE16B0);
  return *(double *)&xmmword_1011E6C18;
}

void variable initialization expression of VerticalToggleSlider.growTransform(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

id variable initialization expression of WaveformPlayIndicator.colorPalette()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "tintColor");
  v2 = objc_msgSend(v0, "labelColor");
  v3 = objc_msgSend(v2, "colorWithAlphaComponent:", 0.35);

  v4 = objc_msgSend(v0, "labelColor");
  v5 = objc_msgSend(v4, "colorWithAlphaComponent:", 0.2);

  v6 = objc_msgSend(v0, "labelColor");
  v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.6);

  return v1;
}

id variable initialization expression of WaveformPlayIndicator.waveform()
{
  return objc_msgSend((id)objc_opt_self(MRUWaveformData), "zero");
}

uint64_t variable initialization expression of WaveformPlayIndicator.cannedAnimationAsset()
{
  uint64_t v0;

  v0 = type metadata accessor for BouncyBarsAsset();
  swift_allocObject(v0, 56, 7);
  return sub_100CE8600();
}

NSNumber sub_100BAA20C()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_100BAA214(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_100BAA264(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_100BAA2B8(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL sub_100BAA2DC(double *a1, double *a2)
{
  return *a1 == *a2;
}

double sub_100BAA2F0@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_100BAA2FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DE710, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100EE92AC);
  v3 = sub_100048748(&qword_1011DE718, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100EE924C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DE700, (uint64_t (*)(uint64_t))_s3__C9TextStyleVMa_0, (uint64_t)&unk_100EE9404);
  v3 = sub_100048748(&qword_1011DE708, (uint64_t (*)(uint64_t))_s3__C9TextStyleVMa_0, (uint64_t)&unk_100EE93A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA404(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_100048748(&qword_1011DE6E8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100EE955C);
  v3 = sub_100048748(&qword_1011DE6F0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100EE94FC);
  v4 = sub_100BAADF8();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_100BAA4A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DE808, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100EEA1BC);
  v3 = sub_100048748(&qword_1011DE810, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100EEA15C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748((unint64_t *)&qword_1011DE828, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_2, (uint64_t)&unk_100EEA290);
  v3 = sub_100048748((unint64_t *)&unk_1011DE830, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_2, (uint64_t)&unk_100EE9F24);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA5AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DE818, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_1, (uint64_t)&unk_100EEA24C);
  v3 = sub_100048748(&qword_1011DE820, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_1, (uint64_t)&unk_100EEA038);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011DE6C8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100EE9AEC);
  v3 = sub_100048748((unint64_t *)&unk_1011DE6D0, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100EE9A8C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA6B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100048748(&qword_1011E5400, (uint64_t (*)(uint64_t))_s3__C7InfoKeyVMa_0, (uint64_t)&unk_100EE9D5C);
  v3 = sub_100048748(&qword_1011DE6E0, (uint64_t (*)(uint64_t))_s3__C7InfoKeyVMa_0, (uint64_t)&unk_100EE9724);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100BAA738()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_100BAA740()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_100BAA770(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

__n128 initializeWithTake for WaveformPlayIndicator.ColorPalette(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void _s3__C12UIEdgeInsetsVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE548, (uint64_t)&unk_1011030C8);
}

void type metadata accessor for KeyframeAnimationOptions(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE550, (uint64_t)&unk_1011030F8);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE558, (uint64_t)&unk_101103120);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE560, (uint64_t)&unk_101103140);
}

void _s3__C7CGColorCMa_1(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE568, (uint64_t)&unk_101103170);
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE570, (uint64_t)&unk_1011031A0);
}

void _s3__C6CTLineCMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE578, (uint64_t)&unk_1011031C8);
}

void _s3__C7CTFrameCMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE580, (uint64_t)&unk_1011031F8);
}

void type metadata accessor for CTFramesetter(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE588, (uint64_t)&unk_101103228);
}

void _s3__C15NSTextAlignmentOMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE590, (uint64_t)&unk_101103258);
}

__n128 initializeWithTake for AnimationGroup.Animator(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE598, (uint64_t)&unk_1011032D0);
}

__n128 _s11PlaceholderVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void _s3__C17CGAffineTransformVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5A0, (uint64_t)&unk_101103350);
}

void type metadata accessor for UIAxis(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5A8, (uint64_t)&unk_101103388);
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5B0, (uint64_t)&unk_1011033B0);
}

void _s3__C7CGPointVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5B8, (uint64_t)&unk_101103430);
}

void _s3__C6CGSizeVMa_1(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5C0, (uint64_t)&unk_1011034B0);
}

void _s3__C7InfoKeyVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5C8, (uint64_t)&unk_1011034D8);
}

void _s3__C6CGRectVMa_1(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5D0, (uint64_t)&unk_101103558);
}

void type metadata accessor for UIOffset(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5D8, (uint64_t)&unk_1011035D8);
}

void type metadata accessor for SymbolScale(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5E0, (uint64_t)&unk_101103600);
}

void type metadata accessor for SymbolWeight(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5E8, (uint64_t)&unk_101103620);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5F0, (uint64_t)&unk_101103640);
}

void _s3__C9TextStyleVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE5F8, (uint64_t)&unk_101103668);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE600, (uint64_t)&unk_101103690);
}

void _s3__C23NSDirectionalEdgeInsetsVMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE608, (uint64_t)&unk_101103710);
}

uint64_t sub_100BAAA04()
{
  return sub_100048748(&qword_1011DE610, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100EE9210);
}

uint64_t sub_100BAAA30()
{
  return sub_100048748(&qword_1011DE618, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100EE91E4);
}

uint64_t sub_100BAAA5C()
{
  return sub_100048748(&qword_1011DE620, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_100EE9280);
}

uint64_t sub_100BAAA88()
{
  return sub_100048748(&qword_1011DE628, (uint64_t (*)(uint64_t))_s3__C9TextStyleVMa_0, (uint64_t)&unk_100EE9368);
}

uint64_t sub_100BAAAB4()
{
  return sub_100048748(&qword_1011DE630, (uint64_t (*)(uint64_t))_s3__C9TextStyleVMa_0, (uint64_t)&unk_100EE933C);
}

uint64_t sub_100BAAAE0()
{
  return sub_100048748(&qword_1011DE638, (uint64_t (*)(uint64_t))_s3__C9TextStyleVMa_0, (uint64_t)&unk_100EE93D8);
}

uint64_t sub_100BAAB0C()
{
  return sub_100048748(&qword_1011DE640, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100EE94C0);
}

uint64_t sub_100BAAB38()
{
  return sub_100048748(&qword_1011DE648, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100EE9494);
}

uint64_t sub_100BAAB64()
{
  return sub_100048748(&qword_1011DE650, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100EE9530);
}

uint64_t sub_100BAAB90()
{
  return sub_100048748(&qword_1011DE658, (uint64_t (*)(uint64_t))_s3__C7InfoKeyVMa_0, (uint64_t)&unk_100EE96E8);
}

uint64_t sub_100BAABBC()
{
  return sub_100048748(&qword_1011DE660, (uint64_t (*)(uint64_t))_s3__C7InfoKeyVMa_0, (uint64_t)&unk_100EE96BC);
}

uint64_t sub_100BAABE8()
{
  return sub_100048748(&qword_1011DE668, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_100EE9840);
}

uint64_t sub_100BAAC14()
{
  return sub_100048748(&qword_1011DE670, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_100EE980C);
}

uint64_t sub_100BAAC40()
{
  return sub_100048748(&qword_1011DE678, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_100EE986C);
}

uint64_t sub_100BAAC6C()
{
  return sub_100048748(&qword_1011DE680, (uint64_t (*)(uint64_t))type metadata accessor for UIAxis, (uint64_t)&unk_100EE98A8);
}

uint64_t sub_100BAAC98()
{
  return sub_100048748(&qword_1011DE688, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100EE9A50);
}

uint64_t sub_100BAACC4()
{
  return sub_100048748(&qword_1011DE690, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100EE9A24);
}

uint64_t sub_100BAACF0()
{
  return sub_100048748(&qword_1011DE698, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_100EE9AC0);
}

uint64_t sub_100BAAD1C()
{
  return sub_100048748(&qword_1011DE6A0, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100EE9BEC);
}

uint64_t sub_100BAAD48()
{
  return sub_100048748(&qword_1011DE6A8, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100EE9BB8);
}

uint64_t sub_100BAAD74()
{
  return sub_100048748(&qword_1011DE6B0, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100EE9C18);
}

uint64_t sub_100BAADA0()
{
  return sub_100048748(&qword_1011DE6B8, (uint64_t (*)(uint64_t))type metadata accessor for KeyframeAnimationOptions, (uint64_t)&unk_100EE9C54);
}

uint64_t sub_100BAADCC()
{
  return sub_100048748(&qword_1011DE6C0, (uint64_t (*)(uint64_t))_s3__C7InfoKeyVMa_0, (uint64_t)&unk_100EE9758);
}

unint64_t sub_100BAADF8()
{
  unint64_t result;

  result = qword_1011DE6F8;
  if (!qword_1011DE6F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1011DE6F8);
  }
  return result;
}

uint64_t sub_100BAAE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DE770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BAAE84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DE770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE788, (uint64_t)&unk_101103740);
}

void _s3__C25OpenExternalURLOptionsKeyVMa_1(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE790, (uint64_t)&unk_101103768);
}

void type metadata accessor for CTParagraphStyle(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE798, (uint64_t)&unk_101103790);
}

void _s3__C5CTRunCMa_0(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE7A0, (uint64_t)&unk_1011037C0);
}

void _s3__C3KeyVMa_2(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE7A8, (uint64_t)&unk_1011037F0);
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE7B0, (uint64_t)&unk_101103870);
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
  sub_10004AAF8(a1, &qword_1011DE7B8, (uint64_t)&unk_101103898);
}

uint64_t sub_100BAAF50()
{
  return sub_100048748(&qword_1011DE7C0, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_2, (uint64_t)&unk_100EE9EE8);
}

uint64_t sub_100BAAF7C()
{
  return sub_100048748(&qword_1011DE7C8, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_2, (uint64_t)&unk_100EE9EBC);
}

uint64_t sub_100BAAFA8()
{
  return sub_100048748(&qword_1011DE7D0, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_1, (uint64_t)&unk_100EE9FFC);
}

uint64_t sub_100BAAFD4()
{
  return sub_100048748(&qword_1011DE7D8, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_1, (uint64_t)&unk_100EE9FD0);
}

uint64_t sub_100BAB000()
{
  return sub_100048748(&qword_1011DE7E0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100EEA120);
}

uint64_t sub_100BAB02C()
{
  return sub_100048748(&qword_1011DE7E8, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100EEA0F4);
}

uint64_t sub_100BAB058()
{
  return sub_100048748(&qword_1011DE7F0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_100EEA190);
}

uint64_t sub_100BAB084()
{
  return sub_100048748(&qword_1011DE7F8, (uint64_t (*)(uint64_t))_s3__C25OpenExternalURLOptionsKeyVMa_1, (uint64_t)&unk_100EEA06C);
}

uint64_t sub_100BAB0B0()
{
  return sub_100048748(&qword_1011DE800, (uint64_t (*)(uint64_t))_s3__C3KeyVMa_2, (uint64_t)&unk_100EE9F58);
}

void Card.ViewController.hostingController.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t Artwork.caching.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004A160(v1, a1, &qword_1011DE9C0);
}

uint64_t Artwork.caching.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A5508(a1, v1, &qword_1011DE9C0);
}

void *Artwork.content.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  sub_100BAB1D8(v1, *(void **)(v0 + 32));
  return v1;
}

id sub_100BAB1D8(id result, void *a2)
{
  id v2;

  if (a2)
  {
    v2 = result;
    return a2;
  }
  return result;
}

void Artwork.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10044E244(*(void **)(v2 + 24), *(void **)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
}

uint64_t Artwork.decoration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_10005B704(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Artwork.Decoration);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  return sub_100055934(a1, qword_1011DEAD0, (uint64_t)&nominal type descriptor for Artwork);
}

uint64_t type metadata accessor for Artwork.Decoration(uint64_t a1)
{
  return sub_100055934(a1, qword_1011DECA0, (uint64_t)&nominal type descriptor for Artwork.Decoration);
}

uint64_t Artwork.decoration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Artwork(0) + 24);
  return sub_1005657FC(a1, v3);
}

double (*Artwork.decoration.modify())(_QWORD)
{
  type metadata accessor for Artwork(0);
  return UIScreen.Dimensions.size.getter;
}

uint64_t Artwork.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_10004A160(v1 + *(int *)(v3 + 28), a1, &qword_1011DE9C8);
}

uint64_t Artwork.placeholder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork(0);
  return sub_1000A5508(a1, v1 + *(int *)(v3 + 28), &qword_1011DE9C8);
}

double (*Artwork.placeholder.modify())(_QWORD)
{
  type metadata accessor for Artwork(0);
  return UIScreen.Dimensions.size.getter;
}

uint64_t Artwork.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Artwork(0) + 32));
}

uint64_t Artwork.size.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = type metadata accessor for Artwork(0);
  v10 = v4 + *(int *)(result + 32);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 24) = a4;
  return result;
}

double (*Artwork.size.modify())(_QWORD)
{
  type metadata accessor for Artwork(0);
  return UIScreen.Dimensions.size.getter;
}

double Artwork.init()@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  double result;

  v2 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = (_QWORD *)(a1 + v2[6]);
  v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v5 = (char *)v3 + v4[5];
  v6 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[6];
  *(_QWORD *)((char *)v3 + v7) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)v3 + v4[7]) = 1;
  v8 = (_OWORD *)(a1 + v2[7]);
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
  v9 = a1 + v2[8];
  result = 0.0;
  *(_OWORD *)v9 = xmmword_100EE89F0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  return result;
}

uint64_t static Artwork.with(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  _QWORD *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  v4 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = (_QWORD *)(a2 + v4[6]);
  v6 = (int *)type metadata accessor for Artwork.Decoration(0);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  v7 = (char *)v5 + v6[5];
  v8 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v6[6];
  *(_QWORD *)((char *)v5 + v9) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)v5 + v6[7]) = 1;
  v10 = (_OWORD *)(a2 + v4[7]);
  v10[1] = 0u;
  v10[2] = 0u;
  *v10 = 0u;
  v11 = a2 + v4[8];
  *(_OWORD *)v11 = xmmword_100EE89F0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 24) = 0;
  return a1(a2);
}

char *sub_100BAB63C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  char *v4;
  uint64_t v6;

  __chkstk_darwin();
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005B704(v0, (uint64_t)v2, type metadata accessor for Artwork);
  v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.View(0));
  v4 = Artwork.View.init(configuration:)((uint64_t)v2);
  sub_100048748(&qword_1011DEA70, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
  return v4;
}

uint64_t sub_100BAB6E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005B704(v1, a1, type metadata accessor for Artwork);
}

char *Artwork.View.__allocating_init(configuration:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Artwork.View.init(configuration:)(a1);
}

char *Artwork.View.init(configuration:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v27;
  _QWORD v28[5];
  objc_super v29;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v6 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  v7 = objc_allocWithZone((Class)UIImageView);
  v8 = v1;
  *(_QWORD *)&v1[v6] = objc_msgSend(v7, "init");
  v9 = &v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  sub_10005B704(a1, (uint64_t)&v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], type metadata accessor for Artwork);

  v29.receiver = v8;
  v29.super_class = ObjectType;
  v10 = (char *)objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v10, "setContentMode:", 4);
  v11 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  v12 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "layer");
  objc_msgSend(v12, "setMinificationFilter:", kCAFilterTrilinear);

  v13 = objc_msgSend(*(id *)&v10[v11], "layer");
  objc_msgSend(v13, "setMagnificationFilter:", kCAFilterTrilinear);

  v14 = *(void **)&v10[v11];
  objc_msgSend(v14, "setContentMode:", 2);
  objc_msgSend(v14, "setClipsToBounds:", 1);
  objc_msgSend(v14, "setAccessibilityIgnoresInvertColors:", 1);
  objc_msgSend(v10, "addSubview:", v14);
  v15 = a1 + *(int *)(type metadata accessor for Artwork(0) + 28);
  v16 = *(void **)(v15 + 24);
  if (v16)
  {
    v17 = *(void **)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (v17)
    {
      v18 = *(void **)v15;
      v19 = *(void **)(v15 + 8);
      v20 = *(void **)(v15 + 16);
      v21 = *(_QWORD *)(v15 + 32);
      v22 = *(_QWORD *)(v15 + 40);
      v27 = *(_QWORD *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8];
      v23 = swift_getObjectType();
      v28[3] = &type metadata for Artwork.Placeholder;
      v28[4] = sub_100BAFB50();
      v24 = (_QWORD *)swift_allocObject(&unk_101103AB0, 64, 7);
      v28[0] = v24;
      v24[2] = v18;
      v24[3] = v19;
      v24[4] = v20;
      v24[5] = v16;
      v24[6] = v21;
      v24[7] = v22;
      sub_100BAFB9C(v18, v19, v20, v16);
      sub_100BAFB9C(v18, v19, v20, v16);
      v25 = v17;
      dispatch thunk of UIContentView.configuration.setter(v28, v23, v27);
      sub_100565840(v18, v19, v20, v16);

    }
  }
  sub_100BAC7AC();
  sub_100BAC380();

  sub_10005B748(a1, type metadata accessor for Artwork);
  return v10;
}

uint64_t Artwork.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10005B704(v3, a1, type metadata accessor for Artwork);
}

uint64_t Artwork.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  _QWORD v31[5];
  _BYTE v32[24];

  v2 = v1;
  v4 = type metadata accessor for Artwork(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v25 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v25 - v11;
  v13 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v32, 0, 0);
  sub_10005B704(v13, (uint64_t)v12, type metadata accessor for Artwork);
  swift_beginAccess(v13, v31, 33, 0);
  sub_100BAFC98(a1, v13);
  swift_endAccess(v31);
  sub_10005B704(v13, (uint64_t)v10, type metadata accessor for Artwork);
  v14 = _s11MusicCoreUI7ArtworkV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v10, (uint64_t)v12);
  sub_10005B748((uint64_t)v10, type metadata accessor for Artwork);
  if ((v14 & 1) == 0)
  {
    sub_10005B704(v13, (uint64_t)v7, type metadata accessor for Artwork);
    v15 = &v7[*(int *)(v4 + 28)];
    v16 = (void *)*((_QWORD *)v15 + 3);
    if (v16 && *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView))
    {
      v17 = *(void **)v15;
      v18 = (void *)*((_QWORD *)v15 + 1);
      v19 = (void *)*((_QWORD *)v15 + 2);
      v20 = *((_QWORD *)v15 + 4);
      v21 = *((_QWORD *)v15 + 5);
      v27 = *(id *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView);
      v28 = v20;
      v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8);
      ObjectType = swift_getObjectType();
      v31[3] = &type metadata for Artwork.Placeholder;
      v31[4] = sub_100BAFB50();
      v22 = (_QWORD *)swift_allocObject(&unk_101103AB0, 64, 7);
      v31[0] = v22;
      v22[2] = v17;
      v22[3] = v18;
      v22[4] = v19;
      v22[5] = v16;
      v22[6] = v28;
      v22[7] = v21;
      v26 = v19;
      sub_100BAFB9C(v17, v18, v19, v16);
      sub_100BAFB9C(v17, v18, v19, v16);
      v23 = v27;
      dispatch thunk of UIContentView.configuration.setter(v31, ObjectType, v30);
      sub_100565840(v17, v18, v26, v16);

    }
    sub_100BAC7AC();
    sub_100BAC380();
    sub_10005B748((uint64_t)v7, type metadata accessor for Artwork);
  }
  sub_10005B748(a1, type metadata accessor for Artwork);
  return sub_10005B748((uint64_t)v12, type metadata accessor for Artwork);
}

void (*Artwork.View.typedConfiguration.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v6, v3, 0, 0);
  sub_10005B704(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_100BABDE8;
}

void sub_100BABDE8(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    sub_10005B704(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v3, type metadata accessor for Artwork);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_10005B748((uint64_t)v4, type metadata accessor for Artwork);
  }
  else
  {
    Artwork.View.typedConfiguration.setter(*(_QWORD *)(*(_QWORD *)a1 + 40));
  }
  free(v4);
  free(v3);
  free(v2);
}

id Artwork.View.currentImage.getter()
{
  uint64_t v0;

  return objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                               + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView), "image"));
}

uint64_t Artwork.View.imageDidChangeHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler, v4, 0, 0);
  v2 = *v1;
  sub_100048AAC(*v1, v1[1]);
  return v2;
}

uint64_t Artwork.View.imageDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_10004BA30(v6, v7);
}

uint64_t (*Artwork.View.imageDidChangeHandler.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Void __swiftcall Artwork.View.layoutSubviews()()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  uint64_t v13;
  double MaxY;
  double MaxX;
  void *v16;
  char *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v30.receiver = v0;
  v30.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v30, "layoutSubviews");
  objc_msgSend(v0, "bounds");
  v2 = v1;
  v4 = v3;
  objc_msgSend(v0, "bounds");
  v6.n128_u64[0] = v5;
  v8.n128_u64[0] = v7;
  v9 = Artwork.View.fittingImageSize(in:)(v6, v8);
  v11 = v10;
  v12 = (char *)objc_msgSend(v0, "contentMode") - 4;
  v13 = 3;
  switch((unint64_t)v12)
  {
    case 0uLL:
      break;
    case 1uLL:
      v13 = 1;
      break;
    case 2uLL:
      objc_msgSend(v0, "bounds");
      MaxY = CGRectGetMaxY(v31);
      v32.origin.x = v2;
      v32.origin.y = v4;
      v32.size.width = v9;
      v32.size.height = v11;
      v4 = MaxY - CGRectGetHeight(v32);
      v13 = 1;
      break;
    case 3uLL:
      goto LABEL_6;
    case 4uLL:
      objc_msgSend(v0, "bounds");
      MaxX = CGRectGetMaxX(v33);
      v34.origin.x = v2;
      v34.origin.y = v4;
      v34.size.width = v9;
      v34.size.height = v11;
      v2 = MaxX - CGRectGetWidth(v34);
LABEL_6:
      v13 = 2;
      break;
    default:
      v13 = 0;
      break;
  }
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "setFrame:", CGRect.centeringAlong(axes:in:)(v13, v2, v4, v9, v11));
  v16 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v16)
    objc_msgSend(v16, "setFrame:", v2, v4, v9, v11);
  v17 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  v18 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  v19 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 8];
  v20 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 16];
  v21 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 24];
  objc_msgSend(v0, "bounds");
  v36.origin.x = v22;
  v36.origin.y = v23;
  v36.size.width = v24;
  v36.size.height = v25;
  v35.origin.x = v18;
  v35.origin.y = v19;
  v35.size.width = v20;
  v35.size.height = v21;
  if (!CGRectEqualToRect(v35, v36))
  {
    objc_msgSend(v0, "bounds");
    *(_QWORD *)v17 = v26;
    *((_QWORD *)v17 + 1) = v27;
    *((_QWORD *)v17 + 2) = v28;
    *((_QWORD *)v17 + 3) = v29;
    sub_100BAC380();
  }
  sub_100BAC7AC();
}

double Artwork.View.fittingImageSize(in:)(__n128 a1, __n128 a2)
{
  char *v2;
  double v3;
  double v4;
  id v5;
  double v6;
  void *v7;
  uint64_t v8;
  char v9;
  char v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  double v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  double v33;
  double v34;

  v3 = a2.n128_f64[0];
  v4 = a1.n128_f64[0];
  if (a1.n128_f64[0] == 0.0 && a2.n128_f64[0] == 0.0)
  {
    v5 = objc_msgSend(v2, "artworkCatalog");
    v6 = 0.0;
    if (v5)
    {
      v7 = v5;
      *(double *)&v8 = COERCE_DOUBLE(MPArtworkCatalog.originalSize.getter());
      v10 = v9;

      if ((v10 & 1) == 0)
        return *(double *)&v8;
    }
    return v6;
  }
  v11 = CGSize.aspectRatio.getter(a1, a2);
  v12 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView], "image");
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, "size");
    v15 = v14;
    v17 = v16;

  }
  else
  {
    v25 = objc_msgSend(v2, "artworkCatalog");
    if (!v25)
      return v4;
    v26 = v25;
    v27 = MPArtworkCatalog.originalSize.getter();
    v29 = v28;
    v31 = v30;

    if ((v31 & 1) != 0)
      return v4;
    v15 = v27;
    v17 = v29;
  }
  v18.n128_u64[0] = v15;
  v19.n128_u64[0] = v17;
  v33 = v11;
  v34 = CGSize.aspectRatio.getter(v18, v19);
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)(&v34, &v33, &type metadata for CGFloat) & 1) == 0)
    return v4;
  v20.n128_u64[0] = v15;
  v21.n128_u64[0] = v17;
  if (vabdd_f64(v11, CGSize.aspectRatio.getter(v20, v21)) <= 0.1)
    return v4;
  v22.n128_u64[0] = v15;
  v23.n128_u64[0] = v17;
  v24 = CGSize.aspectRatio.getter(v22, v23);
  if (v24 <= 1.0)
  {
    v6 = v24 * v3;
    if (v24 * v3 > v4)
      return v4;
  }
  else
  {
    v6 = v4;
    if (v4 / v24 > v3)
      return v24 * v3;
  }
  return v6;
}

void sub_100BAC380()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  char v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  id v12;
  id v13;
  NSString v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  id v42;
  char v43;
  uint64_t v44;
  id v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE v49[24];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = objc_msgSend(v0, "artworkCatalog");
  v4 = (uint64_t)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v49, 32, 0);
  if (*(_QWORD *)(v4 + 32))
  {
    v5 = *(void **)(v4 + 32);
    v6 = v5;
  }
  else
  {
    v5 = 0;
  }
  swift_endAccess(v49);
  v7 = Optional<A>.isArtworkVisuallyIdentical(to:)((uint64_t)v5, (unint64_t)v3);

  if ((v7 & 1) == 0)
  {
    objc_msgSend(v1, "clearArtworkCatalogs");
    sub_100BAD410(0);
  }
  objc_msgSend(v1, "bounds");
  if (v9 == 0.0 && v8 == 0.0 || (v10 = *(void **)(v4 + 32)) == 0)
  {
    sub_100BAD410(0);
    objc_msgSend(v1, "setNeedsLayout");
    return;
  }
  sub_10004A160(v4, (uint64_t)v49, &qword_1011DE9C0);
  sub_10004A160((uint64_t)v49, (uint64_t)&v46, &qword_1011DE9C0);
  v11 = v47;
  if (v47)
  {
    v12 = v10;
    swift_bridgeObjectRetain();
    sub_100BB06CC((uint64_t)&v46);
  }
  else
  {
    v13 = v10;
    sub_10004FF60((uint64_t)&v46, &qword_1011DE9C0);
    v11 = 0xE000000000000000;
  }
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  sub_10004A160((uint64_t)v49, (uint64_t)&v46, &qword_1011DE9C0);
  if (v47)
  {
    v15 = swift_weakLoadStrong(&v48);
    sub_100BB06CC((uint64_t)&v46);
  }
  else
  {
    sub_10004FF60((uint64_t)&v46, &qword_1011DE9C0);
    v15 = 0;
  }
  objc_msgSend(v10, "setCacheIdentifier:forCacheReference:", v14, v15);

  v16 = objc_msgSend(v1, "traitCollection", swift_unknownObjectRelease(v15).n128_f64[0]);
  objc_msgSend(v16, "displayScale");
  v18 = v17;

  objc_msgSend(v10, "setDestinationScale:", v18);
  v19 = v4 + *(int *)(type metadata accessor for Artwork(0) + 32);
  v20 = *(unsigned __int8 *)(v19 + 8);
  if (v20 == 255)
  {
    objc_msgSend(v1, "bounds");
    v22 = v21;
    v24 = v23;
  }
  else
  {
    v25 = *(_QWORD *)(v19 + 16);
    v26 = *(_QWORD *)v19;
    v27 = *(_BYTE *)(v19 + 24);
    objc_msgSend(v1, "bounds");
    v29 = v28;
    v31 = v30;
    sub_100BAE608(v28, v30, v26, v20);
    v22 = v32;
    sub_100BAE608(v29, v31, v25, v27);
    v24 = v33;
  }
  objc_msgSend(v10, "setFittingSize:", v22, v24);
  objc_msgSend(v10, "setRenderHint:", (unint64_t)objc_msgSend(v10, "renderHint") | 1);
  v34 = objc_msgSend(v1, "artworkCatalog");
  if (v34)
  {
    v35 = v34;
    objc_msgSend(v34, "scaledFittingSize");
    v37 = v36;
    v39 = v38;

    objc_msgSend(v10, "scaledFittingSize");
    if (v37 == v41 && v39 == v40)
    {
      v42 = objc_msgSend(v1, "artworkCatalog");

      if (v42)
      {
        sub_10004FF60((uint64_t)v49, &qword_1011DE9C0);

        return;
      }
    }
  }
  else
  {
    objc_msgSend(v10, "scaledFittingSize");
  }
  MPArtworkCatalog.expectedRatio.getter();
  if ((v43 & 1) == 0)
    objc_msgSend(v1, "setNeedsLayout");
  v46 = v1;
  v44 = swift_allocObject(&unk_101103CE8, 32, 7);
  *(_QWORD *)(v44 + 16) = v10;
  *(_QWORD *)(v44 + 24) = ObjectType;
  v45 = v10;
  MPArtworkCatalog.setDestination<A>(_:for:completion:)((uint64_t)&v46, 1, (uint64_t)sub_100BB1990, v44, ObjectType);

  swift_release(v44);
  sub_10004FF60((uint64_t)v49, &qword_1011DE9C0);
}

uint64_t sub_100BAC7AC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BOOL8 v48;
  id v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, int *);
  char *v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  id v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  id v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  void (*v100)(uint64_t, uint64_t, uint64_t, int *);
  int v101;
  char *v102;
  uint64_t (*v103)(uint64_t *, uint64_t, int *);
  char v104[32];

  v1 = v0;
  v2 = sub_100007E8C(&qword_1011DED00);
  v3 = __chkstk_darwin(v2);
  v91 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v92 = (uint64_t *)((char *)&v90 - v6);
  v7 = __chkstk_darwin(v5);
  v99 = (char *)&v90 - v8;
  v9 = __chkstk_darwin(v7);
  v97 = (char *)&v90 - v10;
  v11 = __chkstk_darwin(v9);
  v95 = (uint64_t *)((char *)&v90 - v12);
  v13 = __chkstk_darwin(v11);
  v98 = (char *)&v90 - v14;
  v15 = __chkstk_darwin(v13);
  v103 = (uint64_t (*)(uint64_t *, uint64_t, int *))((char *)&v90 - v16);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v90 - v18);
  __chkstk_darwin(v17);
  v21 = (char *)&v90 - v20;
  v22 = sub_100007E8C(&qword_1011E6620);
  v23 = __chkstk_darwin(v22);
  v90 = (uint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v96 = (uint64_t)&v90 - v26;
  v27 = __chkstk_darwin(v25);
  v93 = (uint64_t)&v90 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v90 - v29;
  v31 = (int *)type metadata accessor for Artwork.Decoration(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v90 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v37 = (char *)&v90 - v36;
  v94 = *(id *)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  objc_msgSend(v94, "frame");
  v39 = v38;
  v41 = v40;
  v42 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v104, 0, 0);
  v43 = (uint64_t)&v42[*(int *)(type metadata accessor for Artwork(0) + 24)];
  v102 = v37;
  sub_10005B704(v43, (uint64_t)v37, type metadata accessor for Artwork.Decoration);
  v44 = *(_QWORD *)(v43 + v31[7]);
  if ((v44 & 1) != 0 && v39 < v41)
  {
    sub_10005B704((uint64_t)v102, (uint64_t)v35, type metadata accessor for Artwork.Decoration);
    v45 = (uint64_t)v103;
LABEL_6:
    sub_10004A160((uint64_t)&v35[v31[5]], (uint64_t)v30, &qword_1011E6620);
    sub_10005B748((uint64_t)v35, type metadata accessor for Artwork.Decoration);
    v46 = type metadata accessor for UIView.Corner(0);
    v47 = 1;
    v48 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v30, 1, v46) != 1;
    sub_10004FF60((uint64_t)v30, &qword_1011E6620);
    objc_msgSend(v1, "setClipsToBounds:", v48);
    v49 = *(id *)&v102[v31[6]];
    goto LABEL_8;
  }
  sub_10005B704((uint64_t)v102, (uint64_t)v35, type metadata accessor for Artwork.Decoration);
  v45 = (uint64_t)v103;
  if ((v44 & 2) != 0 && v41 < v39)
    goto LABEL_6;
  sub_10005B748((uint64_t)v35, type metadata accessor for Artwork.Decoration);
  objc_msgSend(v1, "setClipsToBounds:", 0);
  v49 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v47 = 0;
LABEL_8:
  objc_msgSend(v1, "setBackgroundColor:", v49);

  if (v47)
  {
    sub_10005B704((uint64_t)v102, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
    v50 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v32 + 56);
    v51 = v21;
    v52 = 0;
  }
  else
  {
    v50 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v32 + 56);
    v51 = v21;
    v52 = 1;
  }
  v100 = v50;
  v50((uint64_t)v51, v52, 1, v31);
  sub_10004A160((uint64_t)v21, (uint64_t)v19, &qword_1011DED00);
  v103 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v32 + 48);
  v53 = v103(v19, 1, v31);
  v101 = v47;
  if (v53 == 1)
  {
    v54 = v1;
    sub_10004FF60((uint64_t)v19, &qword_1011DED00);
    v55 = 0;
    LOBYTE(v56) = 0;
    v57 = 0;
  }
  else
  {
    v55 = *v19;
    v56 = v19[1];
    v57 = (void *)v19[2];
    v58 = v57;
    v59 = v1;
    sub_10005B748((uint64_t)v19, type metadata accessor for Artwork.Decoration);
  }
  v60 = (uint64_t)v98;
  UIView.border.setter(v55, v56, v57);
  sub_10004A160((uint64_t)v21, v45, &qword_1011DED00);
  if (v103((uint64_t *)v45, 1, v31) == 1)
  {
    sub_10004FF60(v45, &qword_1011DED00);
    v61 = type metadata accessor for UIView.Corner(0);
    v62 = v93;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v93, 1, 1, v61);
  }
  else
  {
    v62 = v93;
    sub_10004A160(v45 + v31[5], v93, &qword_1011E6620);
    sub_10005B748(v45, type metadata accessor for Artwork.Decoration);
  }
  v63 = (uint64_t)v99;
  v64 = (uint64_t)v97;
  v65 = v95;
  UIView.corner.setter(v62);

  sub_10004FF60((uint64_t)v21, &qword_1011DED00);
  if ((v101 & 1) != 0)
  {
    v66 = 1;
  }
  else
  {
    sub_10005B704((uint64_t)v102, v60, type metadata accessor for Artwork.Decoration);
    v66 = 0;
  }
  v100(v60, v66, 1, v31);
  sub_10004A160(v60, (uint64_t)v65, &qword_1011DED00);
  if (v103(v65, 1, v31) == 1)
  {
    v67 = v94;
    v68 = v94;
    sub_10004FF60((uint64_t)v65, &qword_1011DED00);
    v69 = 0;
    LOBYTE(v70) = 0;
    v71 = 0;
  }
  else
  {
    v69 = *v65;
    v70 = v65[1];
    v71 = (void *)v65[2];
    v72 = v71;
    v67 = v94;
    v73 = v94;
    sub_10005B748((uint64_t)v65, type metadata accessor for Artwork.Decoration);
  }
  v74 = v101;
  UIView.border.setter(v69, v70, v71);
  sub_10004A160(v60, v64, &qword_1011DED00);
  if (v103((uint64_t *)v64, 1, v31) == 1)
  {
    sub_10004FF60(v64, &qword_1011DED00);
    v75 = type metadata accessor for UIView.Corner(0);
    v76 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v96, 1, 1, v75);
  }
  else
  {
    v76 = v96;
    sub_10004A160(v64 + v31[5], v96, &qword_1011E6620);
    sub_10005B748(v64, type metadata accessor for Artwork.Decoration);
  }
  UIView.corner.setter(v76);

  sub_10004FF60(v60, &qword_1011DED00);
  if ((v74 & 1) != 0)
  {
    v77 = 1;
  }
  else
  {
    sub_10005B704((uint64_t)v102, v63, type metadata accessor for Artwork.Decoration);
    v77 = 0;
  }
  v100(v63, v77, 1, v31);
  v78 = *(void **)&v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v78)
  {
    v79 = v92;
    sub_10004A160(v63, (uint64_t)v92, &qword_1011DED00);
    if (v103(v79, 1, v31) == 1)
    {
      v80 = v78;
      sub_10004FF60((uint64_t)v79, &qword_1011DED00);
      v81 = 0;
      LOBYTE(v82) = 0;
      v83 = 0;
    }
    else
    {
      v81 = *v79;
      v82 = v79[1];
      v83 = (void *)v79[2];
      v84 = v83;
      v85 = v78;
      sub_10005B748((uint64_t)v79, type metadata accessor for Artwork.Decoration);
    }
    v86 = (uint64_t)v91;
    UIView.border.setter(v81, v82, v83);
    sub_10004A160(v63, v86, &qword_1011DED00);
    if (v103((uint64_t *)v86, 1, v31) == 1)
    {
      sub_10004FF60(v86, &qword_1011DED00);
      v87 = type metadata accessor for UIView.Corner(0);
      v88 = v90;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v90, 1, 1, v87);
    }
    else
    {
      v88 = v90;
      sub_10004A160(v86 + v31[5], v90, &qword_1011E6620);
      sub_10005B748(v86, type metadata accessor for Artwork.Decoration);
    }
    UIView.corner.setter(v88);

  }
  sub_10004FF60(v63, &qword_1011DED00);
  return sub_10005B748((uint64_t)v102, type metadata accessor for Artwork.Decoration);
}

double Artwork.View.intrinsicContentSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  _BYTE v6[24];

  v1 = v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v6, 0, 0);
  v2 = v1 + *(int *)(type metadata accessor for Artwork(0) + 32);
  if (*(_BYTE *)(v2 + 8) == 2 && *(_BYTE *)(v2 + 24) == 2)
  {
    v4.n128_u64[0] = *(_QWORD *)(v2 + 16);
    v3.n128_u64[0] = *(_QWORD *)v2;
  }
  else
  {
    v3.n128_u64[0] = 0;
    v4.n128_u64[0] = 0;
  }
  return Artwork.View.fittingImageSize(in:)(v3, v4);
}

double Artwork.View.sizeThatFits(_:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  _BYTE v15[24];

  v5 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration, v15, 0, 0);
  v6 = v5 + *(int *)(type metadata accessor for Artwork(0) + 32);
  v9 = *(unsigned __int8 *)(v6 + 8);
  if (v9 == 255)
  {
    v7.n128_f64[0] = a1;
    v8.n128_f64[0] = a2;
    return Artwork.View.fittingImageSize(in:)(v7, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 16);
    v12 = *(_BYTE *)(v6 + 24);
    sub_100BAE608(a1, a2, *(_QWORD *)v6, v9);
    v10 = v13;
    sub_100BAE608(a1, a2, v11, v12);
  }
  return v10;
}

double Artwork.Size.computedSize(in:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  double v10;
  double v11;

  sub_100BAE608(a5, a6, a1, a2);
  v11 = v10;
  sub_100BAE608(a5, a6, a3, a4);
  return v11;
}

void sub_100BAD410(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  char *v29;
  void (*v30)(__n128);
  uint64_t v31;
  __n128 v32;
  char v33[24];
  char v34[24];
  _QWORD v35[6];

  v2 = v1;
  v4 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  objc_msgSend(v4, "setImage:", a1);
  v5 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess(&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], v34, 0, 0);
  if (*((_QWORD *)v5 + 4) && (v6 = (void *)*((_QWORD *)v5 + 3)) != 0)
    v7 = v6;
  else
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v8 = v7;
  objc_msgSend(v4, "setBackgroundColor:", v7);

  if (a1 || (v11 = objc_msgSend(v2, "artworkCatalog"), v11, !v11))
  {
    if (*((_QWORD *)v5 + 4))
    {
      v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
      if (!v9)
        goto LABEL_16;
      v10 = 1;
      goto LABEL_15;
    }
  }
  v12 = type metadata accessor for Artwork(0);
  v13 = &v5[*(int *)(v12 + 28)];
  v14 = (void *)*((_QWORD *)v13 + 3);
  if (v14)
  {
    v16 = *(void **)v13;
    v15 = (void *)*((_QWORD *)v13 + 1);
    v17 = (void *)*((_QWORD *)v13 + 2);
    v18 = *((_QWORD *)v13 + 4);
    v19 = *((_QWORD *)v13 + 5);
    v35[0] = *(_QWORD *)v13;
    v35[1] = v15;
    v35[2] = v17;
    v35[3] = v14;
    v35[4] = v18;
    v35[5] = v19;
    v20 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (!*(_QWORD *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView])
    {
      objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
      sub_100BAFB9C(v16, v15, v17, v14);
      v21 = v17;
      v22 = v14;
      v23 = v16;
      v24 = v15;
      v25 = Artwork.Placeholder.View.init(configuration:)((uint64_t)v35);
      v26 = sub_100048748(&qword_1011DECF8, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
      objc_msgSend(v25, "setClipsToBounds:", 1);
      v27 = v25;
      objc_msgSend(v2, "addSubview:", v27);

      v28 = *(void **)v20;
      *(_QWORD *)v20 = v27;
      *((_QWORD *)v20 + 1) = v26;

    }
  }
  v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v9)
  {
    v10 = *(_QWORD *)&v5[*(int *)(v12 + 28) + 24] == 0;
LABEL_15:
    objc_msgSend(v9, "setHidden:", v10);
  }
LABEL_16:
  sub_100BAC7AC();
  v29 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  swift_beginAccess(v29, v33, 0, 0);
  v30 = *(void (**)(__n128))v29;
  if (*(_QWORD *)v29)
  {
    v31 = *((_QWORD *)v29 + 1);
    v32 = swift_retain(v31);
    v30(v32);
    sub_10004BA30((uint64_t)v30, v31);
  }
}

void sub_100BAD6C4(_QWORD *a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v6 = (void *)*a1;
  v7 = swift_dynamicCastClass(*a1, a4);
  if (v7)
  {
    v8 = (void *)v7;
    v20 = v6;
    v9 = objc_msgSend(a2, "imageRepresentation");
    if (v9)
    {
      v19 = v9;
      v10 = objc_msgSend(v9, "image");
      if (v10)
      {
        v11 = v10;
        if ((objc_msgSend(v19, "isImagePrepared") & 1) != 0)
        {
          v12 = v11;
          sub_100BAD410((uint64_t)v11);

          objc_msgSend(v8, "setNeedsLayout");
        }
        else
        {
          v13 = (_QWORD *)swift_allocObject(&unk_101103D10, 40, 7);
          v13[2] = a3;
          v13[3] = v11;
          v13[4] = v8;
          aBlock[4] = sub_100BB19CC;
          v22 = v13;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1001E5304;
          aBlock[3] = &unk_101103D28;
          v14 = _Block_copy(aBlock);
          v15 = v22;
          v16 = v20;
          v17 = v11;
          v18 = a3;
          objc_msgSend(v17, "prepareForDisplayWithCompletionHandler:", v14, swift_release(v15).n128_f64[0]);

          _Block_release(v14);
        }
        return;
      }

    }
    sub_100BAD410(0);
    objc_msgSend(v8, "setNeedsLayout");

  }
}

uint64_t sub_100BAD890(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  _QWORD *v40;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10004A07C(0, (unint64_t *)&qword_1011DF580, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v14, v15, v16, v17, v18, v19, v20, v21);
  v23 = (_QWORD *)swift_allocObject(&unk_101103D60, 48, 7);
  v23[2] = a2;
  v23[3] = a1;
  v23[4] = a3;
  v23[5] = a4;
  aBlock[4] = sub_100BB19F8;
  v40 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DBD98;
  aBlock[3] = &unk_101103D78;
  v24 = _Block_copy(aBlock);
  v25 = v40;
  v26 = a1;
  v27 = a3;
  v28 = a4;
  v29 = a2;
  v30 = swift_release(v25);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_100048748((unint64_t *)&unk_1011E06D0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100007E8C(&qword_1011DECE8);
  v33 = sub_100BB1A04();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v13, v37);
}

void sub_100BADAA4(void *a1, void *a2, void *a3, id a4)
{
  id v8;
  void *v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v8 = objc_msgSend(a4, "artworkCatalog");
  if (v8)
  {
    v9 = v8;
    sub_10004A07C(0, (unint64_t *)&qword_1011E3B10, MPArtworkCatalog_ptr);
    v10 = a1;
    v11 = static NSObject.== infix(_:_:)(v10, v9);

    if ((v11 & 1) != 0)
    {
      if (a2)
      {
        v12 = a2;
        sub_100BAD410((uint64_t)a2);

      }
      else
      {
        if (qword_1011DE0F0 != -1)
          swift_once(&qword_1011DE0F0, sub_100C39C4C);
        v13 = type metadata accessor for Logger(0);
        sub_100048B14(v13, (uint64_t)static Logger.artwork);
        v14 = a3;
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc(12, -1);
          v18 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v17 = 138412290;
          *(_QWORD *)(v17 + 4) = v14;
          *v18 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to prepare image: %@", (uint8_t *)v17, 0xCu);
          v19 = sub_100007E8C(&qword_1011DECF0);
          swift_arrayDestroy(v18, 1, v19);
          swift_slowDealloc(v18, -1, -1);
          swift_slowDealloc(v17, -1, -1);

        }
        else
        {

        }
        sub_100BAD410((uint64_t)v14);
      }
      objc_msgSend(a4, "setNeedsLayout");
    }
  }
}

void Gradient.View.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCoreUI.View", 16, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_100BADD68@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];

  a1[3] = type metadata accessor for Artwork(0);
  a1[4] = sub_100048748(&qword_1011DEA20, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  v3 = sub_100049F68(a1);
  v4 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v4, v6, 0, 0);
  return sub_10005B704(v4, (uint64_t)v3, type metadata accessor for Artwork);
}

uint64_t sub_100BADE00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[40];

  v2 = type metadata accessor for Artwork(0);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100064C78((uint64_t)a1, (uint64_t)v8);
  v5 = sub_100007E8C(&qword_1011DECE0);
  swift_dynamicCast(v4, v8, v5, v2, 7);
  Artwork.View.typedConfiguration.setter((uint64_t)v4);
  return _s5Music18DragDropToPlaylistV6OriginVwxx_0(a1);
}

void (*sub_100BADEA4(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0xD0uLL);
  *a1 = v3;
  v3[23] = v1;
  v4 = type metadata accessor for Artwork(0);
  v3[24] = v4;
  v3[25] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[3] = v4;
  v3[4] = sub_100048748(&qword_1011DEA20, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  v5 = sub_100049F68(v3);
  v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess(v6, v3 + 20, 0, 0);
  sub_10005B704(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_100BADF78;
}

void sub_100BADF78(uint64_t *a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[24];
    v3 = (void *)v2[25];
    sub_100064C78(*a1, (uint64_t)(v2 + 5));
    sub_100064C78((uint64_t)(v2 + 5), (uint64_t)(v2 + 10));
    v5 = sub_100007E8C(&qword_1011DECE0);
    swift_dynamicCast(v3, v2 + 10, v5, v4, 7);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v2 + 5);
  }
  else
  {
    v6 = v2[24];
    v3 = (void *)v2[25];
    sub_100064C78(*a1, (uint64_t)(v2 + 15));
    v7 = sub_100007E8C(&qword_1011DECE0);
    swift_dynamicCast(v3, v2 + 15, v7, v6, 7);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
  }
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v2);
  free(v3);
  free(v2);
}

uint64_t sub_100BAE060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return UIContentView.supports(_:)(a1, ObjectType, a3);
}

double Artwork.Caching.init(reference:identifier:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  double result;

  v8 = swift_weakInit(a4 + 2, 0);
  *a4 = a2;
  a4[1] = a3;
  swift_weakAssign(v8, a1);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void Artwork.Caching.init(reference:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = swift_weakInit(a2 + 2, 0);
  swift_weakAssign(v4, a1);
  swift_release(a1);
  *a2 = 0xD00000000000001CLL;
  a2[1] = 0x8000000100E544D0;
}

void *Artwork.Caching.Reference.defaultIdentifier.unsafeMutableAddressor()
{
  return &static Artwork.Caching.Reference.defaultIdentifier;
}

unint64_t static Artwork.Caching.Reference.defaultIdentifier.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t Artwork.Caching.Reference.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

void *Artwork.Content.init(catalog:background:)(uint64_t a1, void *a2)
{
  if (!a1)
  {

    return 0;
  }
  return a2;
}

uint64_t static Artwork.Content.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  id v8;
  id v9;

  if (a1)
  {
    if (a3)
    {
      v7 = a1;
      sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
      v8 = a3;
      v9 = v7;
      LOBYTE(v7) = static NSObject.== infix(_:_:)(v9, v8);

      if ((v7 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!a3)
  {
LABEL_4:
    sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(a2, a4) & 1;
  }
  return 0;
}

uint64_t sub_100BAE26C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  v3 = *(void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
      v6 = v5;
      v7 = v3;
      v8 = static NSObject.== infix(_:_:)(v7, v6);

      if ((v8 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v5)
  {
LABEL_4:
    sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
    return static NSObject.== infix(_:_:)(v2, v4) & 1;
  }
  return 0;
}

uint64_t Artwork.Decoration.border.getter()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  v2 = (id)v0[2];
  return v1;
}

void Artwork.Decoration.border.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_QWORD *)(v3 + 16) = a3;
}

uint64_t Artwork.Decoration.corner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_10004A160(v1 + *(int *)(v3 + 20), a1, &qword_1011E6620);
}

uint64_t Artwork.Decoration.corner.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_1000A5508(a1, v1 + *(int *)(v3 + 20), &qword_1011E6620);
}

double (*Artwork.Decoration.corner.modify())(_QWORD)
{
  type metadata accessor for Artwork.Decoration(0);
  return UIScreen.Dimensions.size.getter;
}

id Artwork.Decoration.fillColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 24));
}

void Artwork.Decoration.fillColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for Artwork.Decoration(0) + 24);

  *(_QWORD *)(v1 + v3) = a1;
}

double (*Artwork.Decoration.fillColor.modify())(_QWORD)
{
  type metadata accessor for Artwork.Decoration(0);
  return UIScreen.Dimensions.size.getter;
}

uint64_t Artwork.Decoration.fillAxes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 28));
}

uint64_t Artwork.Decoration.fillAxes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Artwork.Decoration(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

double (*Artwork.Decoration.fillAxes.modify())(_QWORD)
{
  type metadata accessor for Artwork.Decoration(0);
  return UIScreen.Dimensions.size.getter;
}

uint64_t static Artwork.Decoration.with(_:)@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (char *)a2 + v4[5];
  v6 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[6];
  *(_QWORD *)((char *)a2 + v7) = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *(_QWORD *)((char *)a2 + v4[7]) = 1;
  return a1(a2);
}

uint64_t sub_100BAE608(double a1, double a2, uint64_t a3, char a4)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;

  if (!a4)
  {
    if (a1 != 1.79769313e308)
      return result;
    _StringGuts.grow(_:)(67);
    v12._countAndFlagsBits = 0x6F69736E656D6944;
    v12._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v12);
    v13._object = (void *)0x8000000100E545F0;
    v13._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v13);
    v14._countAndFlagsBits = CGSize.description.getter(1.79769313e308, a2);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16._countAndFlagsBits = 0x696C61766E49203ALL;
    v16._object = (void *)0xEF68746469772064;
    String.append(_:)(v16);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 362, 0);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a4 == 1 && a2 == 1.79769313e308)
  {
    _StringGuts.grow(_:)(68);
    v5._countAndFlagsBits = 0x6F69736E656D6944;
    v5._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v5);
    v6._object = (void *)0x8000000100E545F0;
    v6._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v6);
    v7._countAndFlagsBits = CGSize.description.getter(a1, 1.79769313e308);
    v8 = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v8);
    v9._countAndFlagsBits = 0xD000000000000010;
    v9._object = (void *)0x8000000100E54630;
    String.append(_:)(v9);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 366, 0);
    goto LABEL_10;
  }
  return result;
}

BOOL static Artwork.Size.Dimension.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;
  _BOOL4 v5;

  if (a2)
  {
    v4 = *(double *)&a1 == *(double *)&a3;
    if (a4 != 1)
      v4 = 0;
    v5 = a4 == 2 && *(double *)&a1 == *(double *)&a3;
    if (a2 == 1)
      return v4;
    else
      return v5;
  }
  else
  {
    return !a4 && *(double *)&a1 == *(double *)&a3;
  }
}

uint64_t sub_100BAE888(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v4 == 1 && v2 == v3)
        return 1;
    }
    else if (v4 == 2 && v2 == v3)
    {
      return 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 8) && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100BAE90C(uint64_t a1, uint64_t a2)
{
  return _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_100BAE934(uint64_t a1)
{
  return sub_100BAE9B4(a1, static Artwork.Decoration.grid, &qword_1011DDF60, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_100BC4404);
}

uint64_t Artwork.Decoration.grid.unsafeMutableAddressor()
{
  return sub_100BAECF8(&qword_1011DDE38, (uint64_t)static Artwork.Decoration.grid, (uint64_t)sub_100BAE934);
}

uint64_t static Artwork.Decoration.grid.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BAED54(&qword_1011DDE38, (uint64_t)static Artwork.Decoration.grid, (uint64_t)sub_100BAE934, a1);
}

uint64_t sub_100BAE990(uint64_t a1)
{
  return sub_100BAE9B4(a1, static Artwork.Decoration.list, &qword_1011DDF58, (uint64_t)static UIView.Corner.small, (uint64_t)sub_100BC4358);
}

uint64_t sub_100BAE9B4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t result;
  uint64_t v23;

  v9 = sub_100007E8C(&qword_1011E6620);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_10004FACC((uint64_t)v12, a2);
  v13 = (_QWORD *)sub_100048B14((uint64_t)v12, (uint64_t)a2);
  if (qword_1011DDF40 != -1)
    swift_once(&qword_1011DDF40, sub_100BC4100);
  v14 = static UIView.Border.artwork;
  v15 = byte_10124F2F8;
  v16 = *a3;
  v17 = (id)qword_10124F300;
  if (v16 != -1)
    swift_once(a3, a5);
  v18 = type metadata accessor for UIView.Corner(0);
  v19 = sub_100048B14(v18, a4);
  v20 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v19, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v18);
  v21 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *v13 = v14;
  v13[1] = v15;
  v13[2] = v17;
  result = sub_100BB1924((uint64_t)v11, (uint64_t)v13 + v12[5]);
  *(_QWORD *)((char *)v13 + v12[6]) = v21;
  *(_QWORD *)((char *)v13 + v12[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.list.unsafeMutableAddressor()
{
  return sub_100BAECF8(&qword_1011DDE40, (uint64_t)static Artwork.Decoration.list, (uint64_t)sub_100BAE990);
}

uint64_t static Artwork.Decoration.list.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BAED54(&qword_1011DDE40, (uint64_t)static Artwork.Decoration.list, (uint64_t)sub_100BAE990, a1);
}

uint64_t sub_100BAEB88()
{
  uint64_t v0;
  char *v1;
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;

  sub_100007E8C(&qword_1011E6620);
  __chkstk_darwin();
  v1 = (char *)&v10 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_10004FACC((uint64_t)v2, static Artwork.Decoration.round);
  v3 = (_QWORD *)sub_100048B14((uint64_t)v2, (uint64_t)static Artwork.Decoration.round);
  if (qword_1011DDF40 != -1)
    swift_once(&qword_1011DDF40, sub_100BC4100);
  v4 = static UIView.Border.artwork;
  v5 = byte_10124F2F8;
  v6 = qword_10124F300;
  static UIView.Corner.rounded.getter((id)qword_10124F300);
  v7 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 0, 1, v7);
  v8 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  result = sub_100BB1924((uint64_t)v1, (uint64_t)v3 + v2[5]);
  *(_QWORD *)((char *)v3 + v2[6]) = v8;
  *(_QWORD *)((char *)v3 + v2[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.round.unsafeMutableAddressor()
{
  return sub_100BAECF8(&qword_1011DDE48, (uint64_t)static Artwork.Decoration.round, (uint64_t)sub_100BAEB88);
}

uint64_t sub_100BAECF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Artwork.Decoration(0);
  return sub_100048B14(v4, a2);
}

uint64_t static Artwork.Decoration.round.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BAED54(&qword_1011DDE48, (uint64_t)static Artwork.Decoration.round, (uint64_t)sub_100BAEB88, a1);
}

uint64_t sub_100BAED54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Artwork.Decoration(0);
  v7 = sub_100048B14(v6, a2);
  return sub_10005B704(v7, a4, type metadata accessor for Artwork.Decoration);
}

uint64_t Artwork.Decoration.scaled(using:compatibleWith:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v4 = v3;
  sub_100007E8C(&qword_1011E6620);
  __chkstk_darwin();
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIView.Corner.Radius(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v29 - v14;
  sub_10005B704(v4, a3, type metadata accessor for Artwork.Decoration);
  if (*(_QWORD *)(v4 + 16) && *(_QWORD *)(a3 + 16))
  {
    v16 = *(_DWORD *)(v4 + 8);
    objc_msgSend(a1, "scaledValueForValue:compatibleWithTraitCollection:", a2, *(double *)v4);
    *(_QWORD *)a3 = v17;
    *(_BYTE *)(a3 + 8) = v16 & 1;
  }
  v29 = a1;
  v30 = a2;
  v18 = type metadata accessor for Artwork.Decoration(0);
  sub_10004A160(v4 + *(int *)(v18 + 20), (uint64_t)v9, &qword_1011E6620);
  v19 = type metadata accessor for UIView.Corner(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v9, 1, v19);
  if ((_DWORD)v22 == 1)
    return sub_10004FF60((uint64_t)v9, &qword_1011E6620);
  v24 = UIView.Corner.radius.getter(v22);
  (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v9, v19, v24);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v15, v10);
  if ((_DWORD)v25 != enum case for UIView.Corner.Radius.value(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v11 + 96))(v15, v10);
  result = v21((char *)(a3 + *(int *)(v18 + 20)), 1, v19);
  if (!(_DWORD)result)
  {
    v27 = v15[8];
    objc_msgSend(v29, "scaledValueForValue:compatibleWithTraitCollection:", v30, *(double *)v15);
    *(_QWORD *)v13 = v28;
    v13[8] = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v13, v26, v10);
    return UIView.Corner.radius.setter(v13);
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a2)
  {
    if (a2 == 1)
    {
      result = 0;
      if (a6 != 1)
        return result;
    }
    else
    {
      result = 0;
      if (a6 != 2)
        return result;
    }
  }
  else
  {
    result = 0;
    if (a6)
      return result;
  }
  if (*(double *)&a1 == *(double *)&a5)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        if (a8 == 1 && *(double *)&a3 == *(double *)&a7)
          return 1;
      }
      else if (a8 == 2 && *(double *)&a3 == *(double *)&a7)
      {
        return 1;
      }
    }
    else if (!a8 && *(double *)&a3 == *(double *)&a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV7CachingV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    Strong = swift_weakLoadStrong(a1 + 2);
    v11 = swift_weakLoadStrong(a2 + 2);
    v12 = v11;
    if (Strong)
    {
      swift_release(Strong);
      if (v12)
      {
        swift_release(v12);
        if (Strong == v12)
          return 1;
      }
    }
    else
    {
      if (!v11)
        return 1;
      swift_release(v11);
    }
    return 0;
  }
  return result;
}

BOOL _s11MusicCoreUI7ArtworkV10DecorationV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  id v26;
  id v27;
  char v28;
  char v29;
  char v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;

  v4 = type metadata accessor for UIView.Corner(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007E8C(&qword_1011E6690);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007E8C(&qword_1011E6620);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  v17 = (void *)a1[2];
  v18 = (void *)a2[2];
  if (v17)
  {
    if (!v18)
      return 0;
    v47 = v16;
    v48 = (uint64_t)&v43 - v14;
    v45 = v7;
    v46 = v15;
    v19 = *a1;
    v20 = v4;
    v21 = a1[1];
    v43 = *a2;
    v44 = v19;
    v22 = v5;
    v23 = v10;
    v24 = a1;
    v25 = a2[1];
    v26 = v18;
    v27 = v17;
    v28 = v21 & 1;
    v4 = v20;
    v50 = v28;
    v29 = v28;
    v30 = v25 & 1;
    a1 = v24;
    v10 = v23;
    v5 = v22;
    v49 = v30;
    LOBYTE(v22) = static UIView.Border.__derived_struct_equals(_:_:)(v44, v29, (uint64_t)v27, v43, v30, (uint64_t)v26);

    if ((v22 & 1) == 0)
      return 0;
  }
  else
  {
    v47 = v16;
    v48 = (uint64_t)&v43 - v14;
    v45 = v7;
    v46 = v15;
    if (v18)
      return 0;
  }
  v31 = (int *)type metadata accessor for Artwork.Decoration(0);
  v32 = v48;
  sub_10004A160((uint64_t)a1 + v31[5], v48, &qword_1011E6620);
  v33 = v47;
  sub_10004A160((uint64_t)a2 + v31[5], v47, &qword_1011E6620);
  v34 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10004A160(v32, (uint64_t)v10, &qword_1011E6620);
  sub_10004A160(v33, v34, &qword_1011E6620);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v35((uint64_t)v10, 1, v4) != 1)
  {
    v36 = v46;
    sub_10004A160((uint64_t)v10, v46, &qword_1011E6620);
    if (v35(v34, 1, v4) != 1)
    {
      v44 = (uint64_t)a2;
      v37 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v45, v34, v4);
      v38 = sub_100048748((unint64_t *)&unk_1011E6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UIView.Corner, (uint64_t)&protocol conformance descriptor for UIView.Corner);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v37, v4, v38);
      v40 = *(void (**)(char *, uint64_t))(v5 + 8);
      v40(v37, v4);
      sub_10004FF60(v33, &qword_1011E6620);
      sub_10004FF60(v48, &qword_1011E6620);
      v40((char *)v36, v4);
      sub_10004FF60((uint64_t)v10, &qword_1011E6620);
      if ((v39 & 1) == 0)
        return 0;
      goto LABEL_13;
    }
    sub_10004FF60(v33, &qword_1011E6620);
    sub_10004FF60(v48, &qword_1011E6620);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v36, v4);
LABEL_11:
    sub_10004FF60((uint64_t)v10, &qword_1011E6690);
    return 0;
  }
  sub_10004FF60(v33, &qword_1011E6620);
  sub_10004FF60(v32, &qword_1011E6620);
  if (v35(v34, 1, v4) != 1)
    goto LABEL_11;
  v44 = (uint64_t)a2;
  sub_10004FF60((uint64_t)v10, &qword_1011E6620);
LABEL_13:
  sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
  v41 = v44;
  if ((static NSObject.== infix(_:_:)(*(uint64_t *)((char *)a1 + v31[6]), *(_QWORD *)(v44 + v31[6])) & 1) != 0)
    return *(uint64_t *)((char *)a1 + v31[7]) == *(_QWORD *)(v41 + v31[7]);
  return 0;
}

uint64_t _s11MusicCoreUI7ArtworkV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  char v16;
  int *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  BOOL v43;
  void *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  _QWORD v51[6];
  void *v52;
  void *v53;
  void *v54;
  __int128 v55;
  void *v56;

  sub_10004A160(a1, (uint64_t)v51, &qword_1011DE9C0);
  sub_10004A160(a2, (uint64_t)v50, &qword_1011DE9C0);
  sub_10004A160((uint64_t)v51, (uint64_t)&v52, &qword_1011DE9C0);
  sub_10004A160((uint64_t)v50, (uint64_t)&v55, &qword_1011DE9C0);
  if (v53)
  {
    sub_10004A160((uint64_t)&v52, (uint64_t)&v48, &qword_1011DE9C0);
    if (*((_QWORD *)&v55 + 1))
    {
      sub_100BB1A50(&v55, &v46);
      if (v48 == v46
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v48, *((_QWORD *)&v48 + 1), v46, *((_QWORD *)&v46 + 1), 0) & 1) != 0)
      {
        v4 = swift_weakLoadStrong(&v49);
        v5 = swift_weakLoadStrong(&v47);
        v6 = v5;
        if (v4)
        {
          swift_release(v4);
          if (v6)
          {
            swift_release(v6);
            if (v4 == v6)
              goto LABEL_18;
          }
        }
        else
        {
          if (!v5)
          {
LABEL_18:
            sub_100BB06CC((uint64_t)&v46);
            sub_10004FF60((uint64_t)v50, &qword_1011DE9C0);
            sub_10004FF60((uint64_t)v51, &qword_1011DE9C0);
            sub_100BB06CC((uint64_t)&v48);
            goto LABEL_19;
          }
          swift_release(v5);
        }
      }
      sub_100BB06CC((uint64_t)&v46);
      sub_10004FF60((uint64_t)v50, &qword_1011DE9C0);
      sub_10004FF60((uint64_t)v51, &qword_1011DE9C0);
      sub_100BB06CC((uint64_t)&v48);
      v7 = &qword_1011DE9C0;
LABEL_16:
      sub_10004FF60((uint64_t)&v52, v7);
      return 0;
    }
    sub_10004FF60((uint64_t)v50, &qword_1011DE9C0);
    sub_10004FF60((uint64_t)v51, &qword_1011DE9C0);
    sub_100BB06CC((uint64_t)&v48);
LABEL_12:
    v7 = (uint64_t *)&unk_1011DED08;
    goto LABEL_16;
  }
  sub_10004FF60((uint64_t)v50, &qword_1011DE9C0);
  sub_10004FF60((uint64_t)v51, &qword_1011DE9C0);
  if (*((_QWORD *)&v55 + 1))
    goto LABEL_12;
LABEL_19:
  sub_10004FF60((uint64_t)&v52, &qword_1011DE9C0);
  v9 = *(void **)(a1 + 32);
  v10 = *(void **)(a2 + 32);
  if (!v9)
  {
    if (!v10)
      goto LABEL_33;
    return 0;
  }
  if (!v10)
    return 0;
  v11 = *(void **)(a1 + 24);
  v12 = *(void **)(a2 + 24);
  if (v11)
  {
    if (!v12)
    {
      sub_100BAB1D8(*(id *)(a1 + 24), *(void **)(a1 + 32));
      sub_100BAB1D8(v11, v9);
      sub_100BAB1D8(0, v10);
      goto LABEL_30;
    }
    sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
    sub_100BAB1D8(v11, v9);
    sub_100BAB1D8(v11, v9);
    sub_100BAB1D8(v12, v10);
    v13 = v12;
    v14 = v11;
    v15 = static NSObject.== infix(_:_:)(v14, v13);

    if ((v15 & 1) == 0)
    {

LABEL_30:
      sub_10044E244(v11, v9);
      return 0;
    }
  }
  else
  {
    sub_100BAB1D8(0, *(void **)(a1 + 32));
    sub_100BAB1D8(0, v9);
    if (v12)
    {
      sub_100BAB1D8(v12, v10);

      goto LABEL_30;
    }
    sub_100BAB1D8(0, v10);
    v14 = 0;
    v13 = 0;
  }
  sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
  v16 = static NSObject.== infix(_:_:)(v9, v10);

  sub_10044E244(v11, v9);
  if ((v16 & 1) == 0)
    return 0;
LABEL_33:
  v17 = (int *)type metadata accessor for Artwork(0);
  if (!_s11MusicCoreUI7ArtworkV10DecorationV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)(a1 + v17[6]), (uint64_t *)(a2 + v17[6])))return 0;
  v18 = v17[7];
  v19 = *(void **)(a1 + v18);
  v20 = *(void **)(a1 + v18 + 8);
  v22 = *(void **)(a1 + v18 + 16);
  v21 = *(void **)(a1 + v18 + 24);
  v24 = *(_QWORD *)(a1 + v18 + 32);
  v23 = *(_QWORD *)(a1 + v18 + 40);
  v25 = (void **)(a2 + v18);
  v27 = *v25;
  v26 = v25[1];
  v28 = v25[2];
  v29 = v25[3];
  v30 = v25[4];
  v31 = v25[5];
  if (!v21)
  {
    if (!v29)
      goto LABEL_40;
LABEL_39:
    v33 = *v25;
    v45 = *v25;
    v34 = v19;
    v35 = v25[2];
    sub_100BAFB9C(v19, v20, v22, v21);
    sub_100BAFB9C(v33, v26, v35, v29);
    sub_100565840(v34, v20, v22, v21);
    sub_100565840(v45, v26, v35, v29);
    return 0;
  }
  if (!v29)
    goto LABEL_39;
  v51[0] = v19;
  v51[1] = v20;
  v51[2] = v22;
  v51[3] = v21;
  v51[4] = v24;
  v51[5] = v23;
  v52 = v27;
  v53 = v26;
  v54 = v28;
  *(_QWORD *)&v55 = v29;
  *((_QWORD *)&v55 + 1) = v30;
  v56 = v31;
  v44 = v27;
  v32 = v19;
  v41 = v28;
  v42 = v19;
  sub_100BAFB9C(v19, v20, v22, v21);
  sub_100BAFB9C(v32, v20, v22, v21);
  sub_100BAFB9C(v44, v26, v41, v29);
  v43 = _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v51, (uint64_t)&v52);

  sub_100565840(v42, v20, v22, v21);
  if (!v43)
    return 0;
LABEL_40:
  v36 = v17[8];
  v37 = a1 + v36;
  v38 = *(unsigned __int8 *)(a1 + v36 + 8);
  v39 = a2 + v36;
  v40 = *(unsigned __int8 *)(v39 + 8);
  if (v38 == 255)
  {
    if (v40 != 255)
      return 0;
  }
  else if (v40 == 255
         || (_s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)v37, v38, *(_QWORD *)(v37 + 16), *(_BYTE *)(v37 + 24), *(_QWORD *)v39, v40, *(_QWORD *)(v39 + 16), *(_BYTE *)(v39 + 24)) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

unint64_t sub_100BAFB50()
{
  unint64_t result;

  result = qword_1011DE9E0;
  if (!qword_1011DE9E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_1011DE9E0);
  }
  return result;
}

uint64_t sub_100BAFB94()
{
  return sub_100B10C68(64);
}

id sub_100BAFB9C(id result, void *a2, void *a3, void *a4)
{
  void *v5;
  id v6;
  id v7;
  id v8;

  if (a4)
  {
    v5 = result;
    v6 = a3;
    v7 = a4;
    v8 = v5;
    return a2;
  }
  return result;
}

void _s11MusicCoreUI7ArtworkV4ViewC5coderAESgSo7NSCoderC_tcfc_0()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  char *v4;

  v1 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v3 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v4 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E2B820, "MusicCoreUI/ArtworkConfiguration.swift", 38, 2, 53, 0);
  __break(1u);
}

uint64_t sub_100BAFC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BAFCDC()
{
  return sub_100048748(&qword_1011DE9E8, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
}

uint64_t type metadata accessor for Artwork.View(uint64_t a1)
{
  return sub_100055934(a1, (uint64_t *)&unk_1011DEB40, (uint64_t)&nominal type descriptor for Artwork.View);
}

uint64_t sub_100BAFD1C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100048748(&qword_1011DEA18, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  result = sub_100048748(&qword_1011DEA20, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100BAFD78()
{
  return sub_100048748(&qword_1011DEA28, type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_100BAFDA4(uint64_t a1)
{
  uint64_t result;

  result = sub_100048748(&qword_1011DEA70, type metadata accessor for Artwork.View, (uint64_t)&protocol conformance descriptor for Artwork.View);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  __int128 v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  char *__dst;
  uint64_t v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      swift_weakCopyInit(a1 + 2, a2 + 2);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
    }
    v9 = (void **)(a2 + 3);
    v10 = (void *)a2[4];
    if (v10)
    {
      v11 = *v9;
      a1[3] = v11;
      a1[4] = v10;
      v12 = v11;
      v13 = v10;
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)v9;
    }
    v46 = a3;
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)((char *)a2 + v14);
    v15[8] = *((_BYTE *)a2 + v14 + 8);
    v17 = *(void **)((char *)a2 + v14 + 16);
    *((_QWORD *)v15 + 2) = v17;
    v18 = (int *)type metadata accessor for Artwork.Decoration(0);
    v19 = v18[5];
    __dst = &v15[v19];
    v20 = &v16[v19];
    v21 = type metadata accessor for UIView.Corner(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    v24 = v17;
    if (v23(v20, 1, v21))
    {
      v25 = sub_100007E8C(&qword_1011E6620);
      memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    v26 = v18[6];
    v27 = *(void **)&v16[v26];
    *(_QWORD *)&v15[v26] = v27;
    *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
    v28 = *(int *)(v46 + 28);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(void **)((char *)a2 + v28 + 24);
    v32 = v27;
    if (v31)
    {
      v33 = *(void **)v30;
      v34 = (void *)*((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v34;
      v35 = (void *)*((_QWORD *)v30 + 2);
      *((_QWORD *)v29 + 2) = v35;
      *((_QWORD *)v29 + 3) = v31;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      v36 = v33;
      v37 = v34;
      v38 = v35;
      v39 = v31;
    }
    else
    {
      v40 = *((_OWORD *)v30 + 1);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v40;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    }
    v41 = *(int *)(v46 + 32);
    v42 = (_OWORD *)((char *)a1 + v41);
    v43 = (_OWORD *)((char *)a2 + v41);
    *v42 = *v43;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v43 + 9);
  }
  return a1;
}

void destroy for Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_weakDestroy(a1 + 16);
  }
  if (*(_QWORD *)(a1 + 32))
  {

  }
  v4 = a1 + *(int *)(a2 + 24);

  v5 = type metadata accessor for Artwork.Decoration(0);
  v6 = v4 + *(int *)(v5 + 20);
  v7 = type metadata accessor for UIView.Corner(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = (id *)(a1 + *(int *)(a2 + 28));
  if (v9[3])
  {

  }
}

_QWORD *initializeWithCopy for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  char *__dst;
  uint64_t v44;

  v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
    swift_weakCopyInit(a1 + 2, a2 + 2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  v7 = (void **)(a2 + 3);
  v8 = (void *)a2[4];
  if (v8)
  {
    v9 = *v7;
    a1[3] = v9;
    a1[4] = v8;
    v10 = v9;
    v11 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v7;
  }
  v44 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)((char *)a2 + v12);
  v13[8] = *((_BYTE *)a2 + v12 + 8);
  v15 = *(void **)((char *)a2 + v12 + 16);
  *((_QWORD *)v13 + 2) = v15;
  v16 = (int *)type metadata accessor for Artwork.Decoration(0);
  v17 = v16[5];
  __dst = &v13[v17];
  v18 = &v14[v17];
  v19 = type metadata accessor for UIView.Corner(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v15;
  if (v21(v18, 1, v19))
  {
    v23 = sub_100007E8C(&qword_1011E6620);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v24 = v16[6];
  v25 = *(void **)&v14[v24];
  *(_QWORD *)&v13[v24] = v25;
  *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
  v26 = *(int *)(v44 + 28);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(void **)((char *)a2 + v26 + 24);
  v30 = v25;
  if (v29)
  {
    v31 = *(void **)v28;
    v32 = (void *)*((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v32;
    v33 = (void *)*((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 2) = v33;
    *((_QWORD *)v27 + 3) = v29;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    v34 = v31;
    v35 = v32;
    v36 = v33;
    v37 = v29;
  }
  else
  {
    v38 = *((_OWORD *)v28 + 1);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v38;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  }
  v39 = *(int *)(v44 + 32);
  v40 = (_OWORD *)((char *)a1 + v39);
  v41 = (_OWORD *)((char *)a2 + v39);
  *v40 = *v41;
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v41 + 9);
  return a1;
}

uint64_t assignWithCopy for Artwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  int *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v75;
  _QWORD *v76;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_weakCopyAssign(a1 + 16, a2 + 2);
    }
    else
    {
      sub_100BB06CC(a1);
      v7 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    swift_bridgeObjectRetain();
    swift_weakCopyInit(a1 + 16, a2 + 2);
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v8;
  }
  v9 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v9)
    {
      v10 = *(void **)(a1 + 24);
      v11 = (void *)a2[3];
      *(_QWORD *)(a1 + 24) = v11;
      v12 = v11;

      v13 = (void *)a2[4];
      v14 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v13;
      v15 = v13;

      goto LABEL_15;
    }
    sub_100BB06FC((id *)(a1 + 24));
  }
  else if (v9)
  {
    v16 = (void *)a2[3];
    *(_QWORD *)(a1 + 24) = v16;
    v17 = (void *)a2[4];
    *(_QWORD *)(a1 + 32) = v17;
    v18 = v16;
    v19 = v17;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_15:
  v75 = a3;
  v76 = a2;
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20);
  *(_BYTE *)(v21 + 8) = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = (void *)*((_QWORD *)v22 + 2);
  v25 = *(void **)(v21 + 16);
  *(_QWORD *)(v21 + 16) = v24;
  v26 = v24;

  v27 = (int *)type metadata accessor for Artwork.Decoration(0);
  v28 = v27[5];
  v29 = (void *)(v21 + v28);
  v30 = &v22[v28];
  v31 = type metadata accessor for UIView.Corner(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
LABEL_20:
    v36 = sub_100007E8C(&qword_1011E6620);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_21:
  v37 = v27[6];
  v38 = *(void **)&v22[v37];
  v39 = *(void **)(v21 + v37);
  *(_QWORD *)(v21 + v37) = v38;
  v40 = v38;

  *(_QWORD *)(v21 + v27[7]) = *(_QWORD *)&v22[v27[7]];
  v41 = *(int *)(v75 + 28);
  v42 = a1 + v41;
  v43 = (char *)v76 + v41;
  v44 = *(_QWORD *)(a1 + v41 + 24);
  v45 = *(_QWORD *)((char *)v76 + v41 + 24);
  if (v44)
  {
    if (v45)
    {
      v46 = *(id *)v42;
      v47 = *(void **)v43;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v48 = v47;

      v49 = *(void **)(v42 + 8);
      v50 = (void *)*((_QWORD *)v43 + 1);
      *(_QWORD *)(v42 + 8) = v50;
      v51 = v50;

      v52 = *(void **)(v42 + 16);
      v53 = (void *)*((_QWORD *)v43 + 2);
      *(_QWORD *)(v42 + 16) = v53;
      v54 = v53;

      v55 = (void *)*((_QWORD *)v43 + 3);
      v56 = *(void **)(v42 + 24);
      *(_QWORD *)(v42 + 24) = v55;
      v57 = v55;

      *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
      *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    }
    else
    {
      sub_100BB072C((id *)v42);
      v67 = *((_OWORD *)v43 + 1);
      v66 = *((_OWORD *)v43 + 2);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v67;
      *(_OWORD *)(v42 + 32) = v66;
    }
  }
  else if (v45)
  {
    v58 = *(void **)v43;
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v59 = (void *)*((_QWORD *)v43 + 1);
    *(_QWORD *)(v42 + 8) = v59;
    v60 = (void *)*((_QWORD *)v43 + 2);
    *(_QWORD *)(v42 + 16) = v60;
    v61 = (void *)*((_QWORD *)v43 + 3);
    *(_QWORD *)(v42 + 24) = v61;
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
    *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    v62 = v58;
    v63 = v59;
    v64 = v60;
    v65 = v61;
  }
  else
  {
    v68 = *(_OWORD *)v43;
    v69 = *((_OWORD *)v43 + 2);
    *(_OWORD *)(v42 + 16) = *((_OWORD *)v43 + 1);
    *(_OWORD *)(v42 + 32) = v69;
    *(_OWORD *)v42 = v68;
  }
  v70 = *(int *)(v75 + 32);
  v71 = (_OWORD *)(a1 + v70);
  v72 = (__int128 *)((char *)v76 + v70);
  v73 = *v72;
  *(_OWORD *)((char *)v71 + 9) = *(__int128 *)((char *)v72 + 9);
  *v71 = v73;
  return a1;
}

uint64_t sub_100BB06CC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_weakDestroy(a1 + 16);
  return a1;
}

id *sub_100BB06FC(id *a1)
{

  return a1;
}

id *sub_100BB072C(id *a1)
{
  destroy for WaveformPlayIndicator.ColorPalette(a1);
  return a1;
}

uint64_t initializeWithTake for Artwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;

  if (*(_QWORD *)(a2 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit(a1 + 16, a2 + 16);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  v9 = (int *)type metadata accessor for Artwork.Decoration(0);
  v10 = v9[5];
  v11 = (void *)(v7 + v10);
  v12 = (const void *)(v8 + v10);
  v13 = type metadata accessor for UIView.Corner(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100007E8C(&qword_1011E6620);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_QWORD *)(v7 + v9[6]) = *(_QWORD *)(v8 + v9[6]);
  *(_QWORD *)(v7 + v9[7]) = *(_QWORD *)(v8 + v9[7]);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_OWORD *)(a1 + v16);
  v19 = (_OWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  v21 = (_OWORD *)(a1 + v17);
  v22 = (_OWORD *)(a2 + v17);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)v22 + 9);
  *v21 = *v22;
  return a1;
}

uint64_t assignWithTake for Artwork(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  int *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v37;
  _QWORD *v38;

  v6 = a2[1];
  if (*(_QWORD *)(a1 + 8))
  {
    if (v6)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      swift_weakTakeAssign(a1 + 16, a2 + 2);
      goto LABEL_8;
    }
    sub_100BB06CC(a1);
  }
  else if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit(a1 + 16, a2 + 2);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
LABEL_8:
  if (*(_QWORD *)(a1 + 32))
  {
    if (a2[4])
    {
      v7 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = a2[3];

      v8 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = a2[4];

      goto LABEL_13;
    }
    sub_100BB06FC((id *)(a1 + 24));
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_13:
  v37 = a3;
  v38 = a2;
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (char *)a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
  *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + v9 + 8);
  v12 = *(void **)(a1 + v9 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)((char *)a2 + v9 + 16);

  v13 = (int *)type metadata accessor for Artwork.Decoration(0);
  v14 = v13[5];
  v15 = (void *)(v10 + v14);
  v16 = &v11[v14];
  v17 = type metadata accessor for UIView.Corner(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_18:
    v22 = sub_100007E8C(&qword_1011E6620);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_19:
  v23 = v13[6];
  v24 = *(void **)(v10 + v23);
  *(_QWORD *)(v10 + v23) = *(_QWORD *)&v11[v23];

  *(_QWORD *)(v10 + v13[7]) = *(_QWORD *)&v11[v13[7]];
  v25 = *(int *)(v37 + 28);
  v26 = a1 + v25;
  v27 = (char *)v38 + v25;
  if (!*(_QWORD *)(a1 + v25 + 24))
  {
LABEL_23:
    v32 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v32;
    goto LABEL_24;
  }
  if (!*((_QWORD *)v27 + 3))
  {
    sub_100BB072C((id *)v26);
    goto LABEL_23;
  }
  v28 = *(id *)v26;
  *(_QWORD *)v26 = *(_QWORD *)v27;

  v29 = *(void **)(v26 + 8);
  *(_QWORD *)(v26 + 8) = *((_QWORD *)v27 + 1);

  v30 = *(void **)(v26 + 16);
  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);

  v31 = *(void **)(v26 + 24);
  *(_QWORD *)(v26 + 24) = *((_QWORD *)v27 + 3);

LABEL_24:
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  v33 = *(int *)(v37 + 32);
  v34 = (_OWORD *)(a1 + v33);
  v35 = (_OWORD *)((char *)v38 + v33);
  *v34 = *v35;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v35 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BB0BA4);
}

uint64_t sub_100BB0BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for Artwork.Decoration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BB0C38);
}

uint64_t sub_100BB0C38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for Artwork.Decoration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100BB0CAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100EEA4B8;
  v4[1] = &unk_100EEA4D0;
  result = type metadata accessor for Artwork.Decoration(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100EEA4E8;
    v4[4] = &unk_100EEA500;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100BB0D3C()
{
  return type metadata accessor for Artwork.View(0);
}

uint64_t sub_100BB0D44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Artwork(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100EEA4D0;
    v4[2] = " ";
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_100EEA4D0;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for Artwork.Caching(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_weakDestroy(a1 + 16);
}

_QWORD *initializeWithCopy for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2 + 2;
  swift_bridgeObjectRetain();
  swift_weakCopyInit(a1 + 2, v4);
  return a1;
}

_QWORD *assignWithCopy for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  swift_weakCopyAssign(a1 + 2, a2 + 2);
  return a1;
}

_OWORD *initializeWithTake for Artwork.Caching(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *assignWithTake for Artwork.Caching(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  swift_weakTakeAssign(a1 + 2, a2 + 2);
  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Caching()
{
  return &type metadata for Artwork.Caching;
}

uint64_t type metadata accessor for Artwork.Caching.Reference()
{
  return objc_opt_self(_TtCVV11MusicCoreUI7Artwork7Caching9Reference);
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork.Content(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Artwork.Content(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for Artwork.Content(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Content()
{
  return &type metadata for Artwork.Content;
}

_QWORD *initializeBufferWithCopyOfBuffer for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = (void *)a2[2];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a3[5];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UIView.Corner(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    v14 = v7;
    if (v13(v10, 1, v11))
    {
      v15 = sub_100007E8C(&qword_1011E6620);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v19;
    *(_QWORD *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    v20 = v19;
  }
  return v4;
}

void destroy for Artwork.Decoration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UIView.Corner(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

}

uint64_t initializeWithCopy for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for UIView.Corner(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = sub_100007E8C(&qword_1011E6620);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v18 = v17;
  return a1;
}

uint64_t assignWithCopy for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = (void *)a2[2];
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  v10 = a3[5];
  v11 = (void *)(a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UIView.Corner(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100007E8C(&qword_1011E6620);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[6];
  v20 = *(void **)((char *)a2 + v19);
  v21 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v22 = v20;

  *(_QWORD *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for UIView.Corner(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100007E8C(&qword_1011E6620);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for UIView.Corner(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100007E8C(&qword_1011E6620);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[6];
  v17 = *(void **)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);

  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BB1650);
}

uint64_t sub_100BB1650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100007E8C(&qword_1011E6620);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BB16E0);
}

uint64_t sub_100BB16E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100007E8C(&qword_1011E6620);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_100BB1760(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100EEA560;
  sub_100BB17F0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100BB17F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1011E6790)
  {
    v2 = type metadata accessor for UIView.Corner(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1011E6790);
  }
}

__n128 initializeWithCopy for Artwork.Size(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Artwork.Size(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Size(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size()
{
  return &type metadata for Artwork.Size;
}

uint64_t initializeBufferWithCopyOfBuffer for Artwork.Size.Dimension(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_100BB190C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size.Dimension()
{
  return &type metadata for Artwork.Size.Dimension;
}

uint64_t sub_100BB1924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011E6620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BB196C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100BB1990(_QWORD *a1, void *a2)
{
  uint64_t v2;

  sub_100BAD6C4(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100BB1998()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BB19CC(void *a1)
{
  void **v1;

  return sub_100BAD890(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100BB19D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BB19E8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100BB19F0()
{
  return sub_100B10C68(48);
}

void sub_100BB19F8()
{
  void **v0;

  sub_100BADAA4(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_100BB1A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011E06E0;
  if (!qword_1011E06E0)
  {
    v1 = sub_100044B54(&qword_1011DECE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011E06E0);
  }
  return result;
}

_OWORD *sub_100BB1A50(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  swift_weakTakeInit(a2 + 1, a1 + 1);
  return a2;
}

void *Artwork.Placeholder.tint.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

double Radiosity.Specs.Radiosity.blurRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Radiosity.Specs.Radiosity.blurRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

id sub_100BB1AC8()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  qword_1011DED10 = (uint64_t)result;
  return result;
}

__n128 static Artwork.Placeholder.with(_:)@<Q0>(void (*a1)(__int128 *)@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  id v13;
  __int128 v14;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  v5 = (void *)qword_1011DED10;
  v6 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v7 = v5;
  *(_QWORD *)&v11 = v4;
  *((_QWORD *)&v11 + 1) = v5;
  v12 = 0;
  v13 = objc_msgSend(v6, "configurationWithWeight:", 4);
  v14 = xmmword_100EC53F0;
  a1(&v11);
  v8 = v12;
  v9 = v13;
  result = (__n128)v14;
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id Artwork.Placeholder.preferredSymbolConfiguration(in:)(double a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;
  id v7;

  if (a1 > a2)
    v3 = a1;
  else
    v3 = a2;
  if (a2 < a1)
    a1 = a2;
  if (v3 * *(double *)(v2 + 32) >= a1)
    v4 = a1;
  else
    v4 = v3 * *(double *)(v2 + 32);
  v5 = *(void **)(v2 + 24);
  v6 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", v4);
  v7 = objc_msgSend(v5, "configurationByApplyingConfiguration:", v6);

  return v7;
}

void Artwork.Placeholder.image(with:graphicsFormat:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _OWORD *v4;
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;

  v4 = (_OWORD *)v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", a1, a2, a3);
  v16 = 0;
  sub_100065228(v3, (uint64_t)&v19, &qword_1011DED28);
  sub_100065228(v3 + 8, (uint64_t)&v18, &qword_1011DED28);
  sub_100065228(v3 + 16, (uint64_t)&v17, &qword_1011DED30);
  v6 = *(void **)(v3 + 24);
  v7 = swift_allocObject(&unk_101103E10, 72, 7);
  v8 = v4[1];
  *(_OWORD *)(v7 + 16) = *v4;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v4[2];
  *(_QWORD *)(v7 + 64) = &v16;
  v9 = swift_allocObject(&unk_101103E38, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100BB21A0;
  *(_QWORD *)(v9 + 24) = v7;
  v14[4] = sub_10004D5F4;
  v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10004BF88;
  v14[3] = &unk_101103E50;
  v10 = _Block_copy(v14);
  v11 = v15;
  sub_1005518D0(&v19);
  sub_1005518D0(&v18);
  sub_1005518D0(&v17);
  v12 = v6;
  swift_retain(v9);
  v13 = objc_msgSend(v5, "imageWithActions:", v10, swift_release(v11).n128_f64[0]);

  _Block_release(v10);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v9, "", 129, 60, 36, 1);
  swift_release(v9);
  if ((v5 & 1) != 0)
    __break(1u);
  else
    swift_release(v7);
}

void sub_100BB1E78(void *a1, uint64_t a2, void **a3)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  _BYTE v41[8];
  id v42;

  v6 = objc_msgSend(a1, "format");
  objc_msgSend(v6, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v15 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  objc_msgSend(v15, "setFill");

  v16 = (void *)objc_opt_self(UIBezierPath);
  v17 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
  objc_msgSend(v17, "fill");

  if (*(_QWORD *)a2)
  {
    v18 = *(id *)a2;
    objc_msgSend(v18, "setFill");
    v19 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
    objc_msgSend(v19, "fill");

  }
  if (v12 > v14)
    v20 = v12;
  else
    v20 = v14;
  if (v14 >= v12)
    v21 = v12;
  else
    v21 = v14;
  v22 = v20 * *(double *)(a2 + 32);
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  v24 = *(void **)(a2 + 24);
  v25 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", v23);
  v26 = objc_msgSend(v24, "configurationByApplyingConfiguration:", v25);

  sub_100065228(a2 + 16, (uint64_t)v41, &qword_1011DED30);
  sub_100065228((uint64_t)v41, (uint64_t)&v42, &qword_1011DED30);
  if (v42)
  {
    v27 = objc_msgSend(v42, "imageWithSymbolConfiguration:", v26);
    if (v27)
    {
      v28 = v27;
      v29 = *(void **)(a2 + 8);
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v28, "imageWithTintColor:", v30);

        v28 = v31;
      }
      objc_msgSend(v28, "size");
      v33 = v32;
      v35 = v34;
      v36 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v36, "scale");
      v38 = v37;

      CGRect.centeringAlong(axes:bounds:scale:)(3, v8, v10, v12, v14, v38, v8, v10, v33, v35);
      objc_msgSend(v28, "drawInRect:");

    }
  }
  v39 = objc_msgSend(a1, "currentImage");

  v40 = *a3;
  *a3 = v39;

}

uint64_t sub_100BB2198()
{
  return sub_100B10C68(72);
}

void sub_100BB21A0(void *a1)
{
  uint64_t v1;

  sub_100BB1E78(a1, v1 + 16, *(void ***)(v1 + 64));
}

uint64_t sub_100BB21AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB21BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BB21CC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

char *Artwork.Placeholder.View.__allocating_init(configuration:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)(a1);
}

char *Artwork.Placeholder.View.init(configuration:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  void *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  id v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_super v17;
  id v18;
  id v19;
  id v20;
  _OWORD v21[3];

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  v6 = objc_allocWithZone((Class)UIImageView);
  v7 = v1;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  sub_100065228(a1, (uint64_t)&v20, &qword_1011DED28);
  sub_100065228(a1 + 8, (uint64_t)&v19, &qword_1011DED28);
  sub_100065228(a1 + 16, (uint64_t)&v18, &qword_1011DED30);
  v8 = *(void **)(a1 + 24);
  v9 = &v7[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  v10 = *(_OWORD *)a1;
  v11 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v9 + 2) = v11;
  *(_OWORD *)v9 = v10;
  sub_1005518D0(&v20);
  sub_1005518D0(&v19);
  sub_1005518D0(&v18);
  v12 = v8;

  v17.receiver = v7;
  v17.super_class = ObjectType;
  v13 = (char *)objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = *(_QWORD *)&v13[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  v15 = v13;
  objc_msgSend(v15, "addSubview:", v14);
  memset(v21, 0, sizeof(v21));
  sub_100BB2380((uint64_t)v21);
  sub_100065200(&v20);
  sub_100065200(&v19);
  sub_100065200(&v18);

  return v15;
}

void sub_100BB2380(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  id v26;
  id v27;
  char v28;
  uint64_t v29;
  char v30[24];
  void *v31;
  char v32[24];
  uint64_t v33;
  double v34;
  char v35[16];
  id v36;
  uint64_t v37;

  v2 = v1;
  sub_100065228(a1, (uint64_t)v30, &qword_1011DE9C8);
  v4 = v31;
  v5 = &v1[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess(v5, &v29, 0, 0);
  v7 = *(void **)v5;
  v6 = (void *)*((_QWORD *)v5 + 1);
  v8 = (void *)*((_QWORD *)v5 + 2);
  v9 = (void *)*((_QWORD *)v5 + 3);
  v11 = *((double *)v5 + 4);
  v10 = *((double *)v5 + 5);
  if (*(_QWORD *)v5)
  {
    v12 = v8;
    v13 = v9;
    v14 = v6;
    v15 = v7;
  }
  else
  {
    v16 = (void *)objc_opt_self(UIColor);
    v12 = v8;
    v17 = v9;
    v14 = v6;
    v15 = objc_msgSend(v16, "clearColor");
    v7 = 0;
  }
  v18 = v7;
  objc_msgSend(v2, "setBackgroundColor:", v15);

  v19 = *(void **)&v2[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  objc_msgSend(v19, "setHidden:", v8 == 0);
  objc_msgSend(v19, "setImage:", v12);
  objc_msgSend(v19, "setTintColor:", v14);
  objc_msgSend(v19, "setAlpha:", v10);
  v20 = objc_msgSend(v2, "superview");

  if (!v20)
    goto LABEL_18;
  sub_100065228(a1, (uint64_t)v35, &qword_1011DE9C8);
  if (!v37)
  {
    if (!v8)
      goto LABEL_14;
    goto LABEL_17;
  }
  v21 = v36;
  v22 = v36;
  v23 = v22;
  if (!v8)
  {
    if (!v21)
      goto LABEL_14;

LABEL_17:
    objc_msgSend(v2, "setNeedsLayout");
    goto LABEL_18;
  }
  if (!v21)
    goto LABEL_17;
  sub_10004A07C(0, &qword_1011E5410, UIImage_ptr);
  v24 = v12;
  v25 = static NSObject.== infix(_:_:)(v24, v23);

  if ((v25 & 1) == 0)
    goto LABEL_17;
LABEL_14:
  sub_100065228(a1, (uint64_t)v32, &qword_1011DE9C8);
  if (!v33)
    goto LABEL_17;
  if (v11 != v34)
    goto LABEL_17;
  sub_10004A07C(0, &qword_1011DEE00, UIImageSymbolConfiguration_ptr);
  v26 = v9;
  v27 = v4;
  v28 = static NSObject.== infix(_:_:)(v26, v27);

  if ((v28 & 1) == 0)
    goto LABEL_17;
LABEL_18:

}

void Artwork.Placeholder.View.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E2B820, "MusicCoreUI/ArtworkPlaceholder.swift", 36, 2, 100, 0);
  __break(1u);
}

id Artwork.Placeholder.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v3, v12, 0, 0);
  v4 = *(void **)v3;
  v5 = *(void **)(v3 + 8);
  v6 = *(void **)(v3 + 16);
  v11 = *(id *)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  v7 = v4;
  v8 = v5;
  v9 = v6;
  return v11;
}

void Artwork.Placeholder.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  id v13;
  __int128 v14;
  void *v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  id v25;
  id v26;
  id v27;
  _QWORD v28[6];
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38[2];

  v3 = (__int128 *)(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration);
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v24, 1, 0);
  v4 = v3[1];
  v31 = *v3;
  v32[0] = v4;
  v32[1] = v3[2];
  v22 = *((_QWORD *)v3 + 1);
  v23 = *(_QWORD *)v3;
  v20 = *((_QWORD *)v3 + 3);
  v21 = *((_QWORD *)v3 + 2);
  v18 = *((_QWORD *)v3 + 5);
  v19 = *((_QWORD *)v3 + 4);
  sub_100065228((uint64_t)&v31, (uint64_t)&v33, &qword_1011DED28);
  sub_100065228((uint64_t)&v31 + 8, (uint64_t)&v34, &qword_1011DED28);
  sub_100065228((uint64_t)v32, (uint64_t)&v35, &qword_1011DED30);
  v5 = (void *)*((_QWORD *)&v32[0] + 1);
  sub_100065228(a1, (uint64_t)&v27, &qword_1011DED28);
  sub_100065228(a1 + 8, (uint64_t)&v26, &qword_1011DED28);
  sub_100065228(a1 + 16, (uint64_t)&v25, &qword_1011DED30);
  v6 = *(void **)(a1 + 24);
  v8 = *(void **)v3;
  v7 = (void *)*((_QWORD *)v3 + 1);
  v10 = (void *)*((_QWORD *)v3 + 2);
  v9 = (void *)*((_QWORD *)v3 + 3);
  v11 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v11;
  v3[2] = *(_OWORD *)(a1 + 32);
  sub_1005518D0(&v33);
  sub_1005518D0(&v34);
  sub_1005518D0(&v35);
  v12 = v5;
  sub_1005518D0(&v27);
  sub_1005518D0(&v26);
  sub_1005518D0(&v25);
  v13 = v6;

  v14 = v3[1];
  v29 = *v3;
  v30[0] = v14;
  v30[1] = v3[2];
  sub_100065228((uint64_t)&v29, (uint64_t)&v36, &qword_1011DED28);
  sub_100065228((uint64_t)&v29 + 8, (uint64_t)&v37, &qword_1011DED28);
  sub_100065228((uint64_t)v30, (uint64_t)v38, &qword_1011DED30);
  v15 = (void *)*((_QWORD *)&v30[0] + 1);
  sub_1005518D0(&v36);
  sub_1005518D0(&v37);
  sub_1005518D0(v38);
  v16 = v15;
  v17 = _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v29, (uint64_t)&v31);
  sub_100065200(&v36);
  sub_100065200(&v37);
  sub_100065200(v38);

  if (!v17)
  {
    v28[0] = v23;
    v28[1] = v22;
    v28[2] = v21;
    v28[3] = v20;
    v28[4] = v19;
    v28[5] = v18;
    sub_100BB2380((uint64_t)v28);
  }
  sub_100065200(&v27);
  sub_100065200(&v26);
  sub_100065200(&v25);

  sub_100065200(&v33);
  sub_100065200(&v34);
  sub_100065200(&v35);

}

void (*Artwork.Placeholder.View.typedConfiguration.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = malloc(0xC8uLL);
  *a1 = v3;
  v3[24] = v1;
  v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v3 + 18, 0, 0);
  v5 = *(void **)v4;
  v6 = *(void **)(v4 + 8);
  v7 = *(void **)(v4 + 16);
  v8 = *(void **)(v4 + 24);
  v3[6] = *(_QWORD *)v4;
  v3[7] = v6;
  v3 += 6;
  v3[2] = v7;
  v3[3] = v8;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v4 + 32);
  v9 = v7;
  v10 = v8;
  v11 = v5;
  v12 = v6;
  return sub_100BB2AF0;
}

void sub_100BB2AF0(uint64_t *a1, char a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *a1;
  v3 = (_OWORD *)(*a1 + 48);
  v4 = *(_OWORD *)(*a1 + 64);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_OWORD *)(v2 + 32) = v3[2];
    sub_100065228(v2, v2 + 168, &qword_1011DED28);
    sub_100065228(v2 + 8, v2 + 176, &qword_1011DED28);
    sub_100065228(v2 + 16, v2 + 184, &qword_1011DED30);
    v5 = *(void **)(v2 + 24);
    sub_1005518D0((id *)(v2 + 168));
    sub_1005518D0((id *)(v2 + 176));
    sub_1005518D0((id *)(v2 + 184));
    v6 = v5;
    Artwork.Placeholder.View.typedConfiguration.setter(v2);
    v7 = *(void **)(v2 + 48);
    v8 = *(void **)(v2 + 56);
    v9 = *(void **)(v2 + 64);

  }
  else
  {
    *(_OWORD *)(v2 + 96) = *v3;
    *(_OWORD *)(v2 + 112) = v4;
    *(_OWORD *)(v2 + 128) = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter(v2 + 96);
  }
  free((void *)v2);
}

Swift::Void __swiftcall Artwork.Placeholder.View.layoutSubviews()()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  id v26;
  id v27;
  id v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char v45[24];
  objc_super v46;

  v46.receiver = v0;
  v46.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v46, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  v2 = &v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess(&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration], v45, 0, 0);
  v3 = *(void **)v2;
  v4 = (void *)*((_QWORD *)v2 + 1);
  v5 = (void *)*((_QWORD *)v2 + 3);
  v6 = *((double *)v2 + 4);
  v7 = *((id *)v2 + 2);
  v8 = v5;
  v9 = v3;
  v10 = v4;
  objc_msgSend(v0, "bounds");
  if (v11 > v12)
    v13 = v11;
  else
    v13 = v12;
  if (v12 >= v11)
    v14 = v11;
  else
    v14 = v12;
  v15 = v6 * v13;
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v18 = objc_msgSend(v17, "configurationWithPointSize:", v16);
  v19 = objc_msgSend(v8, "configurationByApplyingConfiguration:", v18);

  objc_msgSend(v1, "setPreferredSymbolConfiguration:", v19);
  if (objc_msgSend((id)objc_opt_self(UIView), "_isInAnimationBlock")
    && (v20 = *((_QWORD *)v2 + 2)) != 0)
  {
    v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v20);
    v22 = *(void **)v2;
    v23 = (void *)*((_QWORD *)v2 + 1);
    v24 = (void *)*((_QWORD *)v2 + 3);
    v25 = *((double *)v2 + 4);
    v26 = *((id *)v2 + 2);
    v27 = v24;
    v28 = v22;
    v29 = v23;
    objc_msgSend(v0, "bounds");
    if (v30 > v31)
      v32 = v30;
    else
      v32 = v31;
    if (v31 >= v30)
      v33 = v30;
    else
      v33 = v31;
    v34 = v25 * v32;
    if (v34 >= v33)
      v34 = v33;
    v35 = objc_msgSend(v17, "configurationWithPointSize:", v34);
    v36 = objc_msgSend(v27, "configurationByApplyingConfiguration:", v35);

    objc_msgSend(v21, "setPreferredSymbolConfiguration:", v36);
    objc_msgSend(v1, "setContentMode:", 1);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v21, "sizeThatFits:", v37, v38);
    objc_msgSend(v1, "setFrame:", CGRect.centeringAlong(axes:in:)(3, 0.0, 0.0, v39, v40));

  }
  else
  {
    objc_msgSend(v1, "setContentMode:", 4);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v1, "sizeThatFits:", v41, v42);
    objc_msgSend(v1, "setFrame:", CGRect.centeringAlong(axes:in:)(3, 0.0, 0.0, v43, v44));
  }
}

char *sub_100BB2FE0(_OWORD *a1)
{
  objc_class *v1;
  __int128 v2;
  id v3;
  _OWORD v5[3];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v5[2] = a1[2];
  v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)((uint64_t)v5);
}

id sub_100BB3024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _BYTE v12[24];

  v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v3, v12, 0, 0);
  v4 = *(void **)v3;
  v11 = *(id *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(void **)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  v7 = v5;
  v8 = v6;
  v9 = v4;
  return v11;
}

void sub_100BB309C(_OWORD *a1)
{
  __int128 v1;
  _OWORD v2[3];

  v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  v2[2] = a1[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
}

void (*sub_100BB30CC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Artwork.Placeholder.View.typedConfiguration.modify(v2);
  return sub_1002A837C;
}

id sub_100BB3110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v12;
  _BYTE v13[24];

  a1[3] = (uint64_t)&type metadata for Artwork.Placeholder;
  a1[4] = sub_100BAFB50();
  v3 = swift_allocObject(&unk_101103F18, 64, 7);
  *a1 = v3;
  v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration, v13, 0, 0);
  v5 = *(void **)v4;
  v12 = *(id *)(v4 + 8);
  v6 = *(void **)(v4 + 16);
  v7 = *(void **)(v4 + 24);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)v4;
  *(_QWORD *)(v3 + 24) = v12;
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v4 + 32);
  v8 = v6;
  v9 = v7;
  v10 = v5;
  return v12;
}

uint64_t sub_100BB31B8(_QWORD *a1)
{
  uint64_t v2;
  _OWORD v4[3];
  _BYTE v5[40];
  _OWORD v6[3];

  sub_100064C78((uint64_t)a1, (uint64_t)v5);
  v2 = sub_100007E8C(&qword_1011DECE0);
  swift_dynamicCast(v4, v5, v2, &type metadata for Artwork.Placeholder, 7);
  v6[0] = v4[0];
  v6[1] = v4[1];
  v6[2] = v4[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v6);
  return _s5Music18DragDropToPlaylistV6OriginVwxx_0(a1);
}

void (*sub_100BB3230(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = malloc(0x128uLL);
  *a1 = v3;
  v3[36] = v1;
  v3[26] = &type metadata for Artwork.Placeholder;
  v3[27] = sub_100BAFB50();
  v4 = swift_allocObject(&unk_101103F18, 64, 7);
  v3[23] = v4;
  v5 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess(v5, v3 + 33, 0, 0);
  v6 = *(void **)v5;
  v7 = *(void **)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  v9 = *(void **)(v5 + 24);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)v5;
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v5 + 32);
  v10 = v8;
  v11 = v9;
  v12 = v6;
  v13 = v7;
  return sub_100BB32F8;
}

void sub_100BB32F8(void **a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v2 = *a1;
  v3 = (char *)*a1 + 96;
  v4 = (uint64_t)*a1 + 144;
  v5 = (char *)*a1 + 184;
  if ((a2 & 1) != 0)
  {
    sub_100064C78((uint64_t)*a1 + 184, (uint64_t)(v2 + 14));
    sub_100064C78((uint64_t)(v2 + 14), v4);
    v6 = sub_100007E8C(&qword_1011DECE0);
    swift_dynamicCast(v3, v4, v6, &type metadata for Artwork.Placeholder, 7);
    v7 = v3[1];
    *v2 = *v3;
    v2[1] = v7;
    v2[2] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
    _s5Music18DragDropToPlaylistV6OriginVwxx_0((_QWORD *)v2 + 28);
  }
  else
  {
    sub_100064C78((uint64_t)*a1 + 184, v4);
    v8 = sub_100007E8C(&qword_1011DECE0);
    swift_dynamicCast(v3, v4, v8, &type metadata for Artwork.Placeholder, 7);
    v9 = v3[1];
    v2[3] = *v3;
    v2[4] = v9;
    v2[5] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)(v2 + 3));
  }
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v5);
  free(v2);
}

char *sub_100BB3404()
{
  __int128 *v0;
  __int128 v1;
  void *v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[2];
  id v10;
  id v11;
  id v12;

  v1 = v0[1];
  v8 = *v0;
  v9[0] = v1;
  v9[1] = v0[2];
  sub_100065228((uint64_t)&v8, (uint64_t)&v10, &qword_1011DED28);
  sub_100065228((uint64_t)&v8 + 8, (uint64_t)&v11, &qword_1011DED28);
  sub_100065228((uint64_t)v9, (uint64_t)&v12, &qword_1011DED30);
  v2 = (void *)*((_QWORD *)&v9[0] + 1);
  v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
  sub_1005518D0(&v10);
  sub_1005518D0(&v11);
  sub_1005518D0(&v12);
  v4 = v2;
  v5 = Artwork.Placeholder.View.init(configuration:)((uint64_t)&v8);
  sub_1001EBD80(&qword_1011DECF8, v6, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
  return v5;
}

id sub_100BB34E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v2 = *(void **)v1;
  v9 = *(id *)(v1 + 8);
  v3 = *(void **)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  v5 = v3;
  v6 = v4;
  v7 = v2;
  return v9;
}

BOOL sub_100BB3534(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v8);
}

double sub_100BB3578()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "blackColor");
  v2 = objc_msgSend(v1, "colorWithAlphaComponent:", 0.1);

  v3 = objc_msgSend(v0, "whiteColor");
  v4 = objc_msgSend(v3, "colorWithAlphaComponent:", 0.12);

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v5);

  v7 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.nowPlaying = (uint64_t)v2;
  unk_10124F0B0 = v4;
  qword_10124F0B8 = (uint64_t)v6;
  unk_10124F0C0 = v7;
  result = 0.46;
  xmmword_10124F0C8 = xmmword_100EE8A00;
  return result;
}

uint64_t *Artwork.Placeholder.nowPlaying.unsafeMutableAddressor()
{
  if (qword_1011DDE58 != -1)
    swift_once(&qword_1011DDE58, sub_100BB3578);
  return &static Artwork.Placeholder.nowPlaying;
}

id static Artwork.Placeholder.nowPlaying.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE58 != -1)
    swift_once(&qword_1011DDE58, sub_100BB3578);
  v2 = (void *)static Artwork.Placeholder.nowPlaying;
  v3 = (void *)unk_10124F0B0;
  v5 = (void *)qword_10124F0B8;
  v4 = unk_10124F0C0;
  v10 = (id)unk_10124F0C0;
  *(_QWORD *)a1 = static Artwork.Placeholder.nowPlaying;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F0C8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double sub_100BB376C()
{
  void *v0;
  id v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "tertiarySystemFillColor");
  v2 = objc_msgSend(v0, "quaternaryLabelColor");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v3);

  v5 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.miniPlayer = (uint64_t)v1;
  unk_10124F0E0 = v2;
  qword_10124F0E8 = (uint64_t)v4;
  unk_10124F0F0 = v5;
  result = 0.46;
  xmmword_10124F0F8 = xmmword_100EE8A00;
  return result;
}

uint64_t *Artwork.Placeholder.miniPlayer.unsafeMutableAddressor()
{
  if (qword_1011DDE60 != -1)
    swift_once(&qword_1011DDE60, sub_100BB376C);
  return &static Artwork.Placeholder.miniPlayer;
}

id static Artwork.Placeholder.miniPlayer.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE60 != -1)
    swift_once(&qword_1011DDE60, sub_100BB376C);
  v2 = (void *)static Artwork.Placeholder.miniPlayer;
  v3 = (void *)unk_10124F0E0;
  v5 = (void *)qword_10124F0E8;
  v4 = unk_10124F0F0;
  v10 = (id)unk_10124F0F0;
  *(_QWORD *)a1 = static Artwork.Placeholder.miniPlayer;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F0F8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

void static Artwork.Placeholder.device(representing:basedOn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  char v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a2 + 24);
  v9 = (void *)objc_opt_self(MPAVRoutingController);
  v10 = v7;
  v11 = v8;
  v12 = v6;
  v13 = objc_msgSend(v9, "_symbolImageForRoute:", a1);
  v14 = v13;
  if (v7)
  {
    v32 = v6;
    v15 = (void *)objc_opt_self(UIColor);
    v16 = v10;
    v17 = v14;
    v18 = objc_msgSend(v15, "secondaryLabelColor");
    sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
    v19 = static NSObject.== infix(_:_:)(v18, v16);

    if ((v19 & 1) != 0)
    {

      v20 = objc_msgSend(v15, "labelColor");
    }
    else
    {
      v24 = v16;
      v25 = objc_msgSend(v15, "tertiaryLabelColor");
      v26 = static NSObject.== infix(_:_:)(v25, v24);

      if ((v26 & 1) != 0)
      {

        v20 = objc_msgSend(v15, "secondaryLabelColor");
      }
      else
      {
        v23 = v24;
        v27 = objc_msgSend(v15, "quaternaryLabelColor");
        v28 = static NSObject.== infix(_:_:)(v27, v23);

        if ((v28 & 1) == 0)
        {
LABEL_12:
          v6 = v32;
          goto LABEL_13;
        }

        v20 = objc_msgSend(v15, "tertiaryLabelColor");
      }
    }
    v23 = v20;
    goto LABEL_12;
  }
  v21 = qword_1011DDE50;
  v22 = v13;
  if (v21 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  v23 = (id)qword_1011DED10;
LABEL_13:
  v29 = *(_QWORD *)(a2 + 40);
  v30 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithHierarchicalColor:", v23);
  v31 = objc_msgSend(v11, "configurationByApplyingConfiguration:", v30);

  *a3 = v6;
  a3[1] = v7;
  a3[2] = v14;
  a3[3] = v31;
  a3[4] = 0x3FE0000000000000;
  a3[5] = v29;
}

id sub_100BB3BC0()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  static Artwork.Placeholder.music = (uint64_t)v3;
  unk_10124F110 = qword_1011DED10;
  qword_10124F118 = (uint64_t)v1;
  unk_10124F120 = v2;
  xmmword_10124F128 = xmmword_100EE8A10;
  return (id)qword_1011DED10;
}

uint64_t *Artwork.Placeholder.music.unsafeMutableAddressor()
{
  if (qword_1011DDE68 != -1)
    swift_once(&qword_1011DDE68, sub_100BB3BC0);
  return &static Artwork.Placeholder.music;
}

id static Artwork.Placeholder.music.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE68 != -1)
    swift_once(&qword_1011DDE68, sub_100BB3BC0);
  v2 = (void *)static Artwork.Placeholder.music;
  v3 = (void *)unk_10124F110;
  v5 = (void *)qword_10124F118;
  v4 = unk_10124F120;
  v10 = (id)unk_10124F120;
  *(_QWORD *)a1 = static Artwork.Placeholder.music;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F128;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_100BB3D84()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 5);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  static Artwork.Placeholder.musicVideo = (uint64_t)v3;
  unk_10124F140 = qword_1011DED10;
  qword_10124F148 = (uint64_t)v1;
  unk_10124F150 = v2;
  xmmword_10124F158 = xmmword_100EC53F0;
  return (id)qword_1011DED10;
}

uint64_t *Artwork.Placeholder.musicVideo.unsafeMutableAddressor()
{
  if (qword_1011DDE70 != -1)
    swift_once(&qword_1011DDE70, sub_100BB3D84);
  return &static Artwork.Placeholder.musicVideo;
}

id static Artwork.Placeholder.musicVideo.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE70 != -1)
    swift_once(&qword_1011DDE70, sub_100BB3D84);
  v2 = (void *)static Artwork.Placeholder.musicVideo;
  v3 = (void *)unk_10124F140;
  v5 = (void *)qword_10124F148;
  v4 = unk_10124F150;
  v10 = (id)unk_10124F150;
  *(_QWORD *)a1 = static Artwork.Placeholder.musicVideo;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F158;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_100BB3F58()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 5);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  static Artwork.Placeholder.tv = (uint64_t)v3;
  unk_10124F170 = qword_1011DED10;
  qword_10124F178 = (uint64_t)v1;
  unk_10124F180 = v2;
  xmmword_10124F188 = xmmword_100EC53F0;
  return (id)qword_1011DED10;
}

uint64_t *Artwork.Placeholder.tv.unsafeMutableAddressor()
{
  if (qword_1011DDE78 != -1)
    swift_once(&qword_1011DDE78, sub_100BB3F58);
  return &static Artwork.Placeholder.tv;
}

id static Artwork.Placeholder.tv.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE78 != -1)
    swift_once(&qword_1011DDE78, sub_100BB3F58);
  v2 = (void *)static Artwork.Placeholder.tv;
  v3 = (void *)unk_10124F170;
  v5 = (void *)qword_10124F178;
  v4 = unk_10124F180;
  v10 = (id)unk_10124F180;
  *(_QWORD *)a1 = static Artwork.Placeholder.tv;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F188;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_100BB4114()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 4);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  static Artwork.Placeholder.microphone = (uint64_t)v3;
  unk_10124F1A0 = qword_1011DED10;
  qword_10124F1A8 = (uint64_t)v1;
  unk_10124F1B0 = v2;
  xmmword_10124F1B8 = xmmword_100EE8A00;
  return (id)qword_1011DED10;
}

uint64_t *Artwork.Placeholder.microphone.unsafeMutableAddressor()
{
  if (qword_1011DDE80 != -1)
    swift_once(&qword_1011DDE80, sub_100BB4114);
  return &static Artwork.Placeholder.microphone;
}

id static Artwork.Placeholder.microphone.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE80 != -1)
    swift_once(&qword_1011DDE80, sub_100BB4114);
  v2 = (void *)static Artwork.Placeholder.microphone;
  v3 = (void *)unk_10124F1A0;
  v5 = (void *)qword_10124F1A8;
  v4 = unk_10124F1B0;
  v10 = (id)unk_10124F1B0;
  *(_QWORD *)a1 = static Artwork.Placeholder.microphone;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F1B8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

id sub_100BB42E0()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  if (qword_1011DDE50 != -1)
    swift_once(&qword_1011DDE50, sub_100BB1AC8);
  static Artwork.Placeholder.person = (uint64_t)v3;
  unk_10124F1D0 = qword_1011DED10;
  qword_10124F1D8 = (uint64_t)v1;
  unk_10124F1E0 = v2;
  xmmword_10124F1E8 = xmmword_100EC53F0;
  return (id)qword_1011DED10;
}

uint64_t *Artwork.Placeholder.person.unsafeMutableAddressor()
{
  if (qword_1011DDE88 != -1)
    swift_once(&qword_1011DDE88, sub_100BB42E0);
  return &static Artwork.Placeholder.person;
}

id static Artwork.Placeholder.person.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE88 != -1)
    swift_once(&qword_1011DDE88, sub_100BB42E0);
  v2 = (void *)static Artwork.Placeholder.person;
  v3 = (void *)unk_10124F1D0;
  v5 = (void *)qword_10124F1D8;
  v4 = unk_10124F1E0;
  v10 = (id)unk_10124F1E0;
  *(_QWORD *)a1 = static Artwork.Placeholder.person;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F1E8;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double sub_100BB44B0()
{
  NSString v0;
  id v1;
  id v2;
  double result;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  static Artwork.Placeholder.newPlaylist = (uint64_t)objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  unk_10124F200 = 0;
  qword_10124F208 = (uint64_t)v1;
  unk_10124F210 = v2;
  result = 0.5;
  xmmword_10124F218 = xmmword_100EC53F0;
  return result;
}

uint64_t *Artwork.Placeholder.newPlaylist.unsafeMutableAddressor()
{
  if (qword_1011DDE90 != -1)
    swift_once(&qword_1011DDE90, sub_100BB44B0);
  return &static Artwork.Placeholder.newPlaylist;
}

id static Artwork.Placeholder.newPlaylist.getter@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  if (qword_1011DDE90 != -1)
    swift_once(&qword_1011DDE90, sub_100BB44B0);
  v2 = (void *)static Artwork.Placeholder.newPlaylist;
  v3 = (void *)unk_10124F200;
  v5 = (void *)qword_10124F208;
  v4 = unk_10124F210;
  v10 = (id)unk_10124F210;
  *(_QWORD *)a1 = static Artwork.Placeholder.newPlaylist;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10124F218;
  v6 = v2;
  v7 = v3;
  v8 = v5;
  return v10;
}

double static Artwork.Placeholder.playlist(ofType:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  __int128 v11;
  double result;
  _OWORD v13[2];
  __int128 v14;

  sub_100007E8C(&qword_1011DED48);
  __chkstk_darwin();
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist.Variant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MPModelPlaylistType.variant.getter(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Playlist.Variant.regular(_:), v6);
    sub_100BB5C44((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  }
  v10 = sub_100BB5C84((uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v10);
  v11 = v13[1];
  *a2 = v13[0];
  a2[1] = v11;
  result = *(double *)&v14;
  a2[2] = v14;
  return result;
}

double static Artwork.Placeholder.playlist(withVariant:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  sub_100BB5C84(a1, (uint64_t)v5);
  v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

__n128 Artwork.Placeholder.withSolidBackgroundColor()@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 *v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  __n128 result;
  void *v22;

  v2 = v1;
  v4 = (void *)v1[1].n128_u64[0];
  v5 = (void *)v1[1].n128_u64[1];
  v6 = (id)v1->n128_u64[0];
  v7 = (void *)v1->n128_u64[1];
  if (v1->n128_u64[0])
  {
    v8 = (void *)objc_opt_self(UIColor);
    v22 = v4;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = objc_msgSend(v8, "secondarySystemFillColor");
    sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
    v14 = static NSObject.== infix(_:_:)(v13, v11);

    if ((v14 & 1) != 0)
    {
      if (qword_1011DDE98 != -1)
        swift_once(&qword_1011DDE98, sub_100BB4A60);
      v6 = (id)qword_1011DED18;

      v4 = v22;
    }
    else
    {
      v18 = v11;
      v19 = objc_msgSend(v8, "tertiarySystemFillColor");
      v20 = static NSObject.== infix(_:_:)(v19, v18);

      v4 = v22;
      if ((v20 & 1) != 0)
      {
        if (qword_1011DDEA0 != -1)
          swift_once(&qword_1011DDEA0, sub_100BB4A90);
        v6 = (id)qword_1011DED20;

      }
    }
  }
  else
  {
    v15 = v4;
    v16 = v5;
    v17 = v7;
  }
  a1->n128_u64[0] = (unint64_t)v6;
  a1->n128_u64[1] = (unint64_t)v7;
  a1[1].n128_u64[0] = (unint64_t)v4;
  a1[1].n128_u64[1] = (unint64_t)v5;
  result = v2[2];
  a1[2] = result;
  return result;
}

id Artwork.Placeholder.withBackground(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9;

  v3 = *(void **)(v2 + 8);
  v4 = *(void **)(v2 + 16);
  v9 = *(id *)(v2 + 24);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  v5 = a1;
  v6 = v3;
  v7 = v4;
  return v9;
}

id Artwork.Placeholder.withScaleFactor(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v11;

  v3 = *(void **)v2;
  v4 = *(void **)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  v11 = *(id *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  return v11;
}

id Artwork.Placeholder.withTint(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10;

  v4 = *(void **)v2;
  v5 = *(void **)(v2 + 16);
  v10 = *(id *)(v2 + 24);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_QWORD *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  v6 = v4;
  v7 = a1;
  v8 = v5;
  return v10;
}

void sub_100BB4A60(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BB4A7C, (uint64_t)&unk_101103F30, &qword_1011DED18);
}

id sub_100BB4A7C(void *a1)
{
  return sub_100BB4AC0(a1, 38, 41, 233, 234);
}

void sub_100BB4A90(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BB4AAC, (uint64_t)&unk_101103F58, &qword_1011DED20);
}

id sub_100BB4AAC(void *a1)
{
  return sub_100BB4AC0(a1, 44, 46, 245, 245);
}

id sub_100BB4AC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = objc_msgSend(a1, "userInterfaceStyle");
  sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
  if (v9 == (id)2)
  {
    v10 = a2;
    v11 = a2;
    v12 = a3;
  }
  else
  {
    v10 = a4;
    v11 = a4;
    v12 = a5;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v10, v11, v12, 1.0);
}

double sub_100BB4C78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  void *v5;
  id v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  Class v10;
  id v11;
  unsigned int v12;
  id v13;
  void *v14;
  double v15;
  char v16;

  v1 = sub_100007E8C(&qword_1011DF560);
  v2 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100EA7AA0;
  *(_QWORD *)(v2 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongHasVideo);
  *(_QWORD *)(v2 + 40) = v3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = (void *)objc_opt_self(MPPropertySet);
  v6 = objc_msgSend(v5, "propertySetWithProperties:", isa);

  LODWORD(isa) = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v6);
  v7 = 1.0;
  if ((_DWORD)isa && objc_msgSend(v0, "hasVideo"))
  {
    if (qword_1011DDEA8 != -1)
      swift_once(&qword_1011DDEA8, sub_100BB4FE0);
    v7 = *(double *)&static Artwork.Size.musicVideoAspectRatio;
    v8 = swift_allocObject(v1, 48, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100EA7AA0;
    *(_QWORD *)(v8 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(MPModelPropertySongArtwork);
    *(_QWORD *)(v8 + 40) = v9;
    v10 = Array._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(v5, "propertySetWithProperties:", v10, swift_bridgeObjectRelease().n128_f64[0]);

    v12 = objc_msgSend(v0, "hasLoadedValuesForPropertySet:", v11);
    if (v12)
    {
      v13 = objc_msgSend(v0, "artworkCatalog");
      if (v13)
      {
        v14 = v13;
        v15 = COERCE_DOUBLE(MPArtworkCatalog.expectedRatio.getter());
        if ((v16 & 1) == 0 && v15 < 1.0)
        {
          if (qword_1011DDEB0 != -1)
            swift_once(&qword_1011DDEB0, sub_100BB5018);
          v7 = *(double *)&static Artwork.Size.verticalMusicVideoAspectRatio;
        }

      }
    }
  }
  return v7;
}

uint64_t *Artwork.Size.musicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1011DDEA8 != -1)
    swift_once(&qword_1011DDEA8, sub_100BB4FE0);
  return &static Artwork.Size.musicVideoAspectRatio;
}

uint64_t *Artwork.Size.verticalMusicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1011DDEB0 != -1)
    swift_once(&qword_1011DDEB0, sub_100BB5018);
  return &static Artwork.Size.verticalMusicVideoAspectRatio;
}

id static MPModelPlaylist.artworkPlaceholderImage(for:)()
{
  return sub_100BB5F44();
}

id MPModelPlaylist.artworkPlaceholderImage.getter()
{
  void *v0;
  NSString v2;
  id v3;

  if (objc_msgSend(v0, "hasLoadedValueForKey:", MPModelPropertyPlaylistType))
  {
    objc_msgSend(v0, "type");
    return sub_100BB5F44();
  }
  else
  {
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v2);

    return v3;
  }
}

void sub_100BB4FE0()
{
  static Artwork.Size.musicVideoAspectRatio = 0x3FFC71C71C71C71CLL;
}

double static Artwork.Size.musicVideoAspectRatio.getter()
{
  return sub_100BB5044(&qword_1011DDEA8, (uint64_t)&static Artwork.Size.musicVideoAspectRatio, (uint64_t)sub_100BB4FE0);
}

void sub_100BB5018()
{
  static Artwork.Size.verticalMusicVideoAspectRatio = 0x3FE2000000000000;
}

double static Artwork.Size.verticalMusicVideoAspectRatio.getter()
{
  return sub_100BB5044(&qword_1011DDEB0, (uint64_t)&static Artwork.Size.verticalMusicVideoAspectRatio, (uint64_t)sub_100BB5018);
}

double sub_100BB5044(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return *(double *)a2;
}

double sub_100BB507C(uint64_t a1)
{
  return sub_100BB5120(a1, &qword_1011DDEA8, (double *)&static Artwork.Size.musicVideoAspectRatio, &static Artwork.Size.videoAspectRatio, (uint64_t)sub_100BB4FE0);
}

_QWORD *Artwork.Size.videoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1011DDEB8 != -1)
    swift_once(&qword_1011DDEB8, sub_100BB507C);
  return &static Artwork.Size.videoAspectRatio;
}

double static Artwork.Size.videoAspectRatio.getter()
{
  return sub_100BB5044(&qword_1011DDEB8, (uint64_t)&static Artwork.Size.videoAspectRatio, (uint64_t)sub_100BB507C);
}

double sub_100BB50FC(uint64_t a1)
{
  return sub_100BB5120(a1, &qword_1011DDEB0, (double *)&static Artwork.Size.verticalMusicVideoAspectRatio, &static Artwork.Size.verticalVideoAspectRatio, (uint64_t)sub_100BB5018);
}

double sub_100BB5120(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t a5)
{
  double result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = *a3;
  *a4 = *(_QWORD *)a3;
  return result;
}

_QWORD *Artwork.Size.verticalVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1011DDEC0 != -1)
    swift_once(&qword_1011DDEC0, sub_100BB50FC);
  return &static Artwork.Size.verticalVideoAspectRatio;
}

double static Artwork.Size.verticalVideoAspectRatio.getter()
{
  return sub_100BB5044(&qword_1011DDEC0, (uint64_t)&static Artwork.Size.verticalVideoAspectRatio, (uint64_t)sub_100BB50FC);
}

void MPModelObject.artworkPlaceholder.getter(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  double v33;
  _QWORD v34[6];

  v3 = sub_100007E8C(&qword_1011DED48);
  __chkstk_darwin(v3);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Playlist.Variant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self(MPModelGenericObject);
  v10 = swift_dynamicCastObjCClass(v1);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = v1;
    v13 = objc_msgSend(v11, "anyObject");
    if (v13)
    {
      v14 = v13;
      MPModelObject.artworkPlaceholder.getter(v34);

LABEL_20:
      v22 = v34[4];
      v23 = v34[5];
      v21 = (void *)v34[2];
      v25 = (id)v34[3];
      v18 = (void *)v34[0];
      v19 = (void *)v34[1];
      goto LABEL_21;
    }
LABEL_8:
    if (qword_1011DDE68 != -1)
      swift_once(&qword_1011DDE68, sub_100BB3BC0);
    v18 = (void *)static Artwork.Placeholder.music;
    v19 = (void *)unk_10124F110;
    v21 = (void *)qword_10124F118;
    v20 = (void *)unk_10124F120;
    v23 = *((_QWORD *)&xmmword_10124F128 + 1);
    v22 = xmmword_10124F128;
    v24 = (id)qword_10124F118;
    v25 = v20;
    v26 = v18;
    v27 = v19;

    goto LABEL_21;
  }
  objc_opt_self(MPModelPlaylist);
  v15 = swift_dynamicCastObjCClass(v1);
  if (v15)
  {
    v16 = (void *)v15;
    v17 = MPModelPropertyPlaylistType;
    v12 = v1;
    if (objc_msgSend(v16, "hasLoadedValueForKey:", v17))
    {
      MPModelPlaylistType.variant.getter((uint64_t)objc_msgSend(v16, "type"), (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Playlist.Variant.regular(_:), v6);
        sub_100BB5C44((uint64_t)v5);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      }
      v33 = sub_100BB5C84((uint64_t)v9, (uint64_t)v34);
      (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v33);

      goto LABEL_20;
    }
    goto LABEL_8;
  }
  objc_opt_self(MPModelRecordLabel);
  if (swift_dynamicCastObjCClass(v1)
    || (objc_opt_self(MPModelArtist), swift_dynamicCastObjCClass(v1))
    || (objc_opt_self(MPModelCurator), swift_dynamicCastObjCClass(v1)))
  {
    if (qword_1011DDE80 != -1)
      swift_once(&qword_1011DDE80, sub_100BB4114);
    v28 = &static Artwork.Placeholder.microphone;
  }
  else
  {
    objc_opt_self(MPModelPerson);
    if (swift_dynamicCastObjCClass(v1))
    {
      if (qword_1011DDE88 != -1)
        swift_once(&qword_1011DDE88, sub_100BB42E0);
      v28 = &static Artwork.Placeholder.person;
    }
    else
    {
      objc_opt_self(MPModelMovie);
      if (swift_dynamicCastObjCClass(v1)
        || (objc_opt_self(MPModelTVShow), swift_dynamicCastObjCClass(v1))
        || (objc_opt_self(MPModelTVEpisode), swift_dynamicCastObjCClass(v1))
        || (objc_opt_self(MPModelTVSeason), swift_dynamicCastObjCClass(v1)))
      {
        if (qword_1011DDE78 != -1)
          swift_once(&qword_1011DDE78, sub_100BB3F58);
        v28 = &static Artwork.Placeholder.tv;
      }
      else
      {
        if (qword_1011DDE68 != -1)
          swift_once(&qword_1011DDE68, sub_100BB3BC0);
        v28 = &static Artwork.Placeholder.music;
      }
    }
  }
  v18 = (void *)*v28;
  v19 = (void *)v28[1];
  v21 = (void *)v28[2];
  v29 = (void *)v28[3];
  v22 = v28[4];
  v23 = v28[5];
  v30 = v21;
  v25 = v29;
  v31 = v18;
  v32 = v19;
LABEL_21:
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v21;
  a1[3] = v25;
  a1[4] = v22;
  a1[5] = v23;
}

id GenericMusicItem.artworkPlaceholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t *v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id result;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t (*v33)(char *, uint64_t);
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t (*v38)(char *, uint64_t);
  id v39;
  id v40;
  id v41;
  double v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  _QWORD v46[4];
  __int128 v47;

  v2 = v1;
  v4 = sub_100007E8C(&qword_1011DED48);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist.Variant(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Playlist(0);
  v11 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for GenericMusicItem(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v2, v13);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for GenericMusicItem.artist(_:))
    goto LABEL_2;
  if (v17 == enum case for GenericMusicItem.composer(_:) || v17 == enum case for GenericMusicItem.curator(_:))
    goto LABEL_10;
  if (v17 == enum case for GenericMusicItem.musicMovie(_:))
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (qword_1011DDE78 != -1)
      swift_once(&qword_1011DDE78, sub_100BB3F58);
    v18 = &static Artwork.Placeholder.tv;
    goto LABEL_17;
  }
  if (v17 != enum case for GenericMusicItem.playlist(_:))
  {
    if (v17 == enum case for GenericMusicItem.recordLabel(_:))
    {
LABEL_2:
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      if (qword_1011DDE80 != -1)
        swift_once(&qword_1011DDE80, sub_100BB4114);
      v18 = &static Artwork.Placeholder.microphone;
LABEL_17:
      v20 = (void *)*v18;
      v21 = (void *)v18[1];
      v23 = (void *)v18[2];
      v22 = (void *)v18[3];
      v45 = *((_OWORD *)v18 + 2);
      v24 = v23;
      v25 = v22;
      v26 = v20;
      result = v21;
      goto LABEL_18;
    }
    if (v17 != enum case for GenericMusicItem.socialProfile(_:))
    {
      if (v17 != enum case for GenericMusicItem.tvEpisode(_:)
        && v17 != enum case for GenericMusicItem.tvSeason(_:)
        && v17 != enum case for GenericMusicItem.tvShow(_:))
      {
        if (qword_1011DDE68 != -1)
          swift_once(&qword_1011DDE68, sub_100BB3BC0);
        v20 = (void *)static Artwork.Placeholder.music;
        v21 = (void *)unk_10124F110;
        v23 = (void *)qword_10124F118;
        v37 = (void *)unk_10124F120;
        v45 = xmmword_10124F128;
        v38 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
        v39 = (id)static Artwork.Placeholder.music;
        v40 = v21;
        v41 = v23;
        v25 = v37;
        result = (id)v38(v16, v13);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
LABEL_10:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (qword_1011DDE88 != -1)
      swift_once(&qword_1011DDE88, sub_100BB42E0);
    v18 = &static Artwork.Placeholder.person;
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
  v29 = v44;
  v30 = v43;
  v31 = (*(uint64_t (**)(void))(v11 + 32))();
  Playlist.variant.getter(v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v42 = sub_100BB5C84((uint64_t)v10, (uint64_t)v46);
    (*(void (**)(char *, uint64_t, double))(v8 + 8))(v10, v7, v42);
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v30, v29);
    v28 = v47;
    v23 = (void *)v46[2];
    v25 = (id)v46[3];
    v20 = (void *)v46[0];
    v21 = (void *)v46[1];
    goto LABEL_19;
  }
  sub_100BB5C44((uint64_t)v6);
  if (qword_1011DDE68 != -1)
    swift_once(&qword_1011DDE68, sub_100BB3BC0);
  v20 = (void *)static Artwork.Placeholder.music;
  v21 = (void *)unk_10124F110;
  v23 = (void *)qword_10124F118;
  v32 = (void *)unk_10124F120;
  v45 = xmmword_10124F128;
  v33 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v34 = (id)static Artwork.Placeholder.music;
  v35 = v21;
  v36 = v23;
  v25 = v32;
  result = (id)v33(v30, v29);
LABEL_18:
  v28 = v45;
LABEL_19:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v25;
  *(_OWORD *)(a1 + 32) = v28;
  return result;
}

BOOL _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  char v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (!v5)
      return 0;
    sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
    v6 = v5;
    v7 = v4;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10)
      return 0;
    sub_10004A07C(0, (unint64_t *)&qword_1011E6AE0, UIColor_ptr);
    v11 = v10;
    v12 = v9;
    v13 = static NSObject.== infix(_:_:)(v12, v11);

    if ((v13 & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v14 = *(void **)(a1 + 16);
  v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15)
      return 0;
    sub_10004A07C(0, &qword_1011E5410, UIImage_ptr);
    v16 = v15;
    v17 = v14;
    v18 = static NSObject.== infix(_:_:)(v17, v16);

    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32))
  {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return 0;
}

uint64_t sub_100BB5C44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DED48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100BB5C84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  id v17;
  int v18;
  unint64_t v19;
  NSString v20;
  id v21;
  id v22;
  double result;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for Playlist.Variant(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = enum case for Playlist.Variant.folder(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))((char *)&v24 - v9, enum case for Playlist.Variant.folder(_:), v4);
  v12 = sub_1001EBD80(&qword_1011DEDF8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist.Variant, (uint64_t)&protocol conformance descriptor for Playlist.Variant);
  dispatch thunk of RawRepresentable.rawValue.getter(&v25, v4, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v24, v4, v12);
  v14 = v24;
  v13 = v25;
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  v16 = 0;
  if (v13 != v14)
  {
    if (qword_1011DDE50 != -1)
      swift_once(&qword_1011DDE50, sub_100BB1AC8);
    v16 = qword_1011DED10;
    v17 = (id)qword_1011DED10;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v18 == enum case for Playlist.Variant.smart(_:))
  {
    v19 = 0xE900000000000065;
  }
  else if (v18 == enum case for Playlist.Variant.genius(_:))
  {
    v19 = 0xE600000000000000;
  }
  else if (v18 == v11)
  {
    v19 = 0xE600000000000000;
  }
  else
  {
    v15(v8, v4);
    v19 = 0xEF7473696C2E6574;
  }
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v21 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v20);

  v22 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithWeight:", 3);
  *(_QWORD *)a2 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v22;
  result = 0.4;
  *(_OWORD *)(a2 + 32) = xmmword_100EE8A10;
  return result;
}

id sub_100BB5F44()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  return v1;
}

unint64_t sub_100BB6018()
{
  unint64_t result;

  result = qword_1011DED50;
  if (!qword_1011DED50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_1011DED50);
  }
  return result;
}

uint64_t sub_100BB605C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1001EBD80(&qword_1011DECF8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Artwork.Placeholder.View()
{
  return objc_opt_self(_TtCVV11MusicCoreUI7Artwork11Placeholder4View);
}

uint64_t sub_100BB60B8(uint64_t a1, uint64_t a2)
{
  return sub_1001EBD80(&qword_1011DED98, a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View, (uint64_t)&protocol conformance descriptor for Artwork.Placeholder.View);
}

unint64_t sub_100BB60E4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100BB6110();
  result = sub_100BAFB50();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BB6110()
{
  unint64_t result;

  result = qword_1011DEDC8;
  if (!qword_1011DEDC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork.Placeholder, &type metadata for Artwork.Placeholder);
    atomic_store(result, (unint64_t *)&qword_1011DEDC8);
  }
  return result;
}

uint64_t _s11PlaceholderVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t _s11PlaceholderVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t _s11PlaceholderVwta(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Placeholder()
{
  return &type metadata for Artwork.Placeholder;
}

uint64_t sub_100BB629C()
{
  return sub_100B10C68(64);
}

__n128 CAPackageDefinition.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 CAPackageDefinition.transform.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 56) = result;
  return result;
}

__n128 CAPackageDefinition.init(name:bundle:transform:states:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __n128 result;

  v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 24) = *(_OWORD *)a4;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_OWORD *)(a6 + 40) = v6;
  result = *(__n128 *)(a4 + 32);
  *(__n128 *)(a6 + 56) = result;
  *(_QWORD *)(a6 + 72) = a5;
  return result;
}

__n128 CAPackageDefinition.scaled(byX:y:)@<Q0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  uint64_t v3;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGFloat tx;
  CGFloat ty;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGAffineTransform v20;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v15 = *(_OWORD *)(v3 + 40);
  v17 = *(_OWORD *)(v3 + 24);
  v5 = *(double *)(v3 + 56);
  v6 = *(double *)(v3 + 64);
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 72);
  v19 = *(_OWORD *)(v3 + 8);
  CGAffineTransformMakeScale(&t1, a2, a3);
  v9 = *(_OWORD *)&t1.a;
  v10 = *(_OWORD *)&t1.c;
  v11 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v17;
  *(_OWORD *)&t1.c = v15;
  t1.tx = v5;
  t1.ty = v6;
  *(_OWORD *)&t2.a = v9;
  *(_OWORD *)&t2.c = v10;
  *(_OWORD *)&t2.tx = v11;
  CGAffineTransformConcat(&v20, &t1, &t2);
  v16 = *(__n128 *)&v20.c;
  v18 = *(_OWORD *)&v20.a;
  tx = v20.tx;
  ty = v20.ty;
  sub_100BB63D0(v3);
  *(_QWORD *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v19;
  *(_OWORD *)(a1 + 24) = v18;
  result = v16;
  *(__n128 *)(a1 + 40) = v16;
  *(CGFloat *)(a1 + 56) = tx;
  *(CGFloat *)(a1 + 64) = ty;
  *(_QWORD *)(a1 + 72) = v8;
  return result;
}

uint64_t sub_100BB63D0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100BB6418(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t *)v8, (uint64_t)v9) & 1;
}

void *sub_100BB6470()
{
  uint64_t v0;
  void *result;

  v0 = _s16PackageDataCacheCMa();
  swift_allocObject(v0, 32, 7);
  result = (void *)sub_100BB6888();
  off_1011DEE08 = result;
  return result;
}

double sub_100BB64AC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + 24);
  v16 = (_QWORD *)swift_allocObject(&unk_1011040F8, 56, 7);
  v16[2] = v4;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a1;
  v16[6] = a2;
  aBlock[4] = sub_100BB7614;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DBD98;
  aBlock[3] = &unk_101104110;
  v17 = _Block_copy(aBlock);
  v18 = v15;
  swift_retain(v4);
  swift_bridgeObjectRetain();
  sub_100079DE4(a1, a2);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100048748((unint64_t *)&unk_1011E06D0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100007E8C(&qword_1011DECE8);
  v22 = sub_1001EBC18((unint64_t *)&qword_1011E06E0, &qword_1011DECE8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  *(_QWORD *)&result = swift_release(v29).n128_u64[0];
  return result;
}

uint64_t sub_100BB66CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[24];

  swift_beginAccess(a1 + 16, v14, 33, 0);
  swift_bridgeObjectRetain();
  sub_100079DE4(a4, a5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_100BDCA34(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v11);
  return swift_endAccess(v14);
}

uint64_t sub_100BB6790(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[24];

  swift_beginAccess(a2 + 16, v17, 0, 0);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_10079C2C4(a3, a4);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      v12 = *v11;
      v13 = v11[1];
      sub_100079DE4(*v11, v13);
    }
    else
    {
      v12 = 0;
      v13 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v12 = 0;
    v13 = 0xF000000000000000;
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = v12;
  a1[1] = v13;
  return sub_1000822B4(v14, v15);
}

uint64_t sub_100BB685C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100BB6888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_100BA7D38((uint64_t)_swiftEmptyArrayStorage);
  sub_10004A07C(0, (unint64_t *)&qword_1011DF580, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_100048748((unint64_t *)&unk_1011DE3E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_100007E8C((uint64_t *)&unk_1011DF590);
  v14 = sub_1001EBC18((unint64_t *)&qword_1011DE3F0, (uint64_t *)&unk_1011DF590);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v5, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100E547B0, v10, v7, v4, 0);
  return v1;
}

char *CAPackage.init(definition:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  __int128 v18;
  uint64_t *v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  Class v32;
  uint64_t *v33;
  id v34;
  id v35;
  char *v36;
  id v37;
  NSString v38;
  __n128 v39;
  __n128 v40;
  uint64_t v42;
  unint64_t v43;
  void *ObjCClassFromMetadata;
  unint64_t v45;
  Class isa;
  id v47;
  id v48;
  __n128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  id aBlock[5];
  uint64_t v58;
  __int128 v59;

  v2 = sub_100007E8C(&qword_1011DE770);
  __chkstk_darwin(v2);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v53 - 8);
  v5 = __chkstk_darwin(v53);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v51 = (char *)&v50 - v8;
  if (qword_1011DDEC8 != -1)
    swift_once(&qword_1011DDEC8, sub_100BB6470);
  v9 = off_1011DEE08;
  v10 = *a1;
  v11 = a1[1];
  v56 = a1;
  v59 = xmmword_100EAE4D0;
  v12 = (void *)*((_QWORD *)off_1011DEE08 + 3);
  v13 = (_QWORD *)swift_allocObject(&unk_101103FF8, 48, 7);
  v13[2] = &v59;
  v13[3] = v9;
  v54 = v10;
  v13[4] = v10;
  v13[5] = v11;
  v14 = swift_allocObject(&unk_101104020, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100BB73B4;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10004D5F4;
  v58 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10046D7B4;
  aBlock[3] = &unk_101104038;
  v15 = _Block_copy(aBlock);
  v16 = v58;
  v17 = v12;
  swift_retain(v9);
  swift_bridgeObjectRetain();
  swift_retain(v14);
  swift_release(v16);
  dispatch_sync(v17, v15);

  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v14, "", 129, 53, 35, 1);
  swift_release(v14);
  if ((v15 & 1) != 0)
    __break(1u);
  v18 = v59;
  swift_release(v13);
  if (*((_QWORD *)&v18 + 1) >> 60 == 15)
  {
    v19 = v56;
    v20 = (id)v56[2];
    v21 = String._bridgeToObjectiveC()();
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v20, "URLForResource:withExtension:", v21, v22);

    if (v23)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

      v24 = v55;
      v25 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v26 = v53;
      v25(v4, v7, v53);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v4, 0, 1, v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v26) != 1)
      {
        v27 = v51;
        v25(v51, v4, v26);
        v28 = v52;
        v29 = Data.init(contentsOf:options:)(v27, 0);
        if (v28)
        {

          sub_10013C5EC(v19);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v26);
        }
        else
        {
          v42 = v29;
          v43 = v30;
          sub_100BB64AC(v29, v30, v54, v11);
          ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
          v45 = v43;
          isa = Data._bridgeToObjectiveC()().super.isa;
          aBlock[0] = 0;
          v4 = (char *)objc_msgSend(ObjCClassFromMetadata, "packageWithData:type:options:error:", isa, kCAPackageTypeArchive, 0, aBlock);

          v47 = aBlock[0];
          if (v4)
          {
            v48 = aBlock[0];
          }
          else
          {
            v4 = (char *)aBlock[0];
            _convertNSErrorToError(_:)(v47);

            swift_willThrow(v49);
          }

          sub_1000652DC(v42, v45);
          sub_10013C5EC(v19);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v51, v26);
        }
        return v4;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v4, 1, 1, v53);
    }
    sub_100BAAE84((uint64_t)v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
    v4 = v36;
    v37 = objc_allocWithZone((Class)NSError);
    v38 = String._bridgeToObjectiveC()();
    objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, -1002, 0, swift_bridgeObjectRelease(v4).n128_f64[0]);

    swift_willThrow(v39);
    sub_10013C5EC(v19);

    return v4;
  }
  v31 = (void *)swift_getObjCClassFromMetadata();
  v32 = Data._bridgeToObjectiveC()().super.isa;
  aBlock[0] = 0;
  v4 = (char *)objc_msgSend(v31, "packageWithData:type:options:error:", v32, kCAPackageTypeArchive, 0, aBlock);

  v33 = v56;
  v34 = aBlock[0];
  if (v4)
  {
    v35 = aBlock[0];
  }
  else
  {
    v4 = (char *)aBlock[0];
    _convertNSErrorToError(_:)(v34);

    swift_willThrow(v40);
  }
  sub_10013C5EC(v33);
  sub_1000822B4(v18, *((unint64_t *)&v18 + 1));
  return v4;
}

id static CAPackageDefinition.play.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_101102540, a1);
}

id static CAPackageDefinition.pause.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_101102570, a1);
}

id static CAPackageDefinition.stop.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_1011025A0, a1);
}

id static CAPackageDefinition.skipForward.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0x4264726177726F46, 0xEF647261776B6361, (uint64_t)&off_1011025D0, a1);
}

id static CAPackageDefinition.skipBackward.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  id v6;
  CGAffineTransform v7;

  if (qword_1011DDE30 != -1)
    swift_once(&qword_1011DDE30, sub_100BA7618);
  v6 = (id)qword_10124F040;
  CGAffineTransformMakeScale(&v7, -1.0, 1.0);
  v2 = *(_OWORD *)&v7.a;
  v3 = *(_OWORD *)&v7.c;
  v4 = *(_OWORD *)&v7.tx;
  *(_QWORD *)a1 = 0x4264726177726F46;
  *(_QWORD *)(a1 + 8) = 0xEF647261776B6361;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = &off_101102630;
  return v6;
}

id static CAPackageDefinition.favorite.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0x657469726F766146, 0xE800000000000000, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteDark.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0x657469726F766146, 0xEC0000006B726144, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastDark.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0xD000000000000018, 0x8000000100E54710, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastLight.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_100BB7238(0xD000000000000019, 0x8000000100E54730, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id sub_100BB7238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;

  if (qword_1011DDE30 != -1)
    swift_once(&qword_1011DDE30, sub_100BA7618);
  v8 = (void *)qword_10124F040;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v8;
  a4[3] = 0x3FF0000000000000;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = 0x3FF0000000000000;
  a4[7] = 0;
  a4[8] = 0;
  a4[9] = a3;
  return v8;
}

uint64_t _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[3];
  _OWORD v12[3];

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0) & 1) == 0)
    return 0;
  sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(a1[2], *(_QWORD *)(a2 + 16)) & 1) == 0)
    return 0;
  v8 = *(_OWORD *)(a1 + 5);
  v12[0] = *(_OWORD *)(a1 + 3);
  v12[1] = v8;
  v12[2] = *(_OWORD *)(a1 + 7);
  v9 = *(_OWORD *)(a2 + 40);
  v11[0] = *(_OWORD *)(a2 + 24);
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a2 + 56);
  if ((static CGAffineTransform.== infix(_:_:)(v12, v11) & 1) != 0)
    return sub_1002EC0FC((_QWORD *)a1[9], *(_QWORD **)(a2 + 72));
  else
    return 0;
}

uint64_t sub_100BB7388()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100BB73B4()
{
  uint64_t v0;

  return sub_100BB6790(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100BB73C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB73D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BB73E0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t destroy for CAPackageDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
}

uint64_t initializeWithCopy for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  v5 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CAPackageDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  v5 = (void *)a2[2];
  v6 = (void *)a1[2];
  a1[2] = v5;
  v7 = v5;

  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v8 = a2[9];
  v9 = a1[9];
  a1[9] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for CAPackageDefinition()
{
  return &type metadata for CAPackageDefinition;
}

uint64_t _s16PackageDataCacheCMa()
{
  return objc_opt_self(_TtCE11MusicCoreUICSo9CAPackageP33_5B7A704C3FBBA94F30354653B0D2FAF216PackageDataCache);
}

uint64_t sub_100BB75E0()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1000652DC(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56);
}

uint64_t sub_100BB7614()
{
  uint64_t v0;

  return sub_100BB66CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

id CoreAnimationPackageView.__allocating_init(definition:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CoreAnimationPackageView.init(definition:)(a1);
}

id CoreAnimationPackageView.init(definition:)(uint64_t a1)
{
  char *v1;
  uint64_t ObjectType;
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  ObjectType = swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;
  v5 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  v6 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v5 + 3) = v6;
  *((_OWORD *)v5 + 4) = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1) = v7;
  sub_100BB63D0(a1);
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  v8 = objc_msgSendSuper2(&v13, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_100BB7DC0();
  CoreAnimationPackageView.reset()();
  sub_10004A07C(0, &qword_1011DEF38, UITraitCollection_ptr);
  v9 = v8;
  v10 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  v11 = UIView.registerForTraitChanges<A>(_:handler:)(v10, sub_100BB9764, 0, ObjectType);
  sub_10013C5EC((_QWORD *)a1);
  swift_unknownObjectRelease(v11);
  swift_bridgeObjectRelease(v10);

  return v9;
}

uint64_t type metadata accessor for CoreAnimationPackageView()
{
  return objc_opt_self(_TtC11MusicCoreUI24CoreAnimationPackageView);
}

void sub_100BB7814(uint64_t *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22[24];
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[3];
  _OWORD v26[4];

  v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess(&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v22, 0, 0);
  v4 = *((_QWORD *)v3 + 1);
  v5 = (void *)*((_QWORD *)v3 + 2);
  v20 = *(_OWORD *)(v3 + 40);
  v21 = *(_OWORD *)(v3 + 24);
  v19 = *(_OWORD *)(v3 + 56);
  v6 = (_QWORD *)*((_QWORD *)v3 + 9);
  v7 = *a1;
  v8 = a1[1];
  v9 = *(_QWORD *)v3 == *a1 && v4 == v8;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v3, v4, *a1, a1[1], 0) & 1) != 0)
  {
    sub_10004A07C(0, (unint64_t *)&qword_1011DF6A0, NSObject_ptr);
    v10 = a1[2];
    swift_bridgeObjectRetain();
    v11 = v5;
    swift_bridgeObjectRetain();
    if ((static NSObject.== infix(_:_:)(v11, v10) & 1) != 0
      && (v26[0] = v21,
          v26[1] = v20,
          v26[2] = v19,
          v12 = *(_OWORD *)(a1 + 5),
          v24[0] = *(_OWORD *)(a1 + 3),
          v24[1] = v12,
          v24[2] = *(_OWORD *)(a1 + 7),
          (static CGAffineTransform.== infix(_:_:)(v26, v24) & 1) != 0))
    {
      v13 = sub_1002EC0FC(v6, (_QWORD *)a1[9]);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        return;
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  v14 = *((_QWORD *)v3 + 1);
  v15 = *(_QWORD *)v3 == v7 && v14 == v8;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v3, v14, v7, v8, 0) & 1) == 0)
    sub_100BB7DC0();
  v16 = *(_OWORD *)(v3 + 40);
  v25[0] = *(_OWORD *)(v3 + 24);
  v17 = *(_OWORD *)(v3 + 56);
  v25[1] = v16;
  v25[2] = v17;
  v18 = *(_OWORD *)(a1 + 5);
  v23[0] = *(_OWORD *)(a1 + 3);
  v23[1] = v18;
  v23[2] = *(_OWORD *)(a1 + 7);
  if ((static CGAffineTransform.== infix(_:_:)(v25, v23) & 1) == 0)
    objc_msgSend(v1, "setNeedsLayout");
  CoreAnimationPackageView.reset()();
}

uint64_t CoreAnimationPackageView.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE v9[24];

  v3 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess(v3, v9, 0, 0);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 56);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  v7 = v5;
  return swift_bridgeObjectRetain();
}

_QWORD *CoreAnimationPackageView.definition.setter(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[24];
  _OWORD v11[5];

  v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, v10, 1, 0);
  v4 = v3[1];
  v5 = v3[3];
  v11[2] = v3[2];
  v11[3] = v5;
  v11[4] = v3[4];
  v11[0] = *v3;
  v11[1] = v4;
  v6 = (void *)*((_QWORD *)v3 + 2);
  v7 = *(_OWORD *)(a1 + 16);
  *v3 = *(_OWORD *)a1;
  v3[1] = v7;
  v8 = *(_OWORD *)(a1 + 64);
  v3[3] = *(_OWORD *)(a1 + 48);
  v3[4] = v8;
  v3[2] = *(_OWORD *)(a1 + 32);
  sub_100BB63D0((uint64_t)v11);
  sub_100BB63D0(a1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100BB7814((uint64_t *)v11);
  sub_10013C5EC((_QWORD *)a1);
  return sub_10013C5EC(v11);
}

void (*CoreAnimationPackageView.definition.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = (char *)malloc(0x118uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  *((_QWORD *)v3 + 33) = v1;
  *((_QWORD *)v3 + 34) = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3 + 240, 1, 0);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(void **)(v5 + 16);
  *((_QWORD *)v3 + 20) = *(_QWORD *)v5;
  *((_QWORD *)v3 + 21) = v6;
  v3 += 160;
  v8 = *(_QWORD *)(v5 + 72);
  *((_QWORD *)v3 + 2) = v7;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v5 + 24);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(v5 + 56);
  *((_QWORD *)v3 + 9) = v8;
  swift_bridgeObjectRetain();
  v9 = v7;
  swift_bridgeObjectRetain();
  return sub_100BB7C08;
}

void sub_100BB7C08(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  id v25;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 160);
  v4 = *(_QWORD *)(*a1 + 168);
  v5 = *(void **)(*a1 + 176);
  v7 = *(_QWORD *)(*a1 + 184);
  v6 = *(_QWORD *)(*a1 + 192);
  v9 = *(_QWORD *)(*a1 + 200);
  v8 = *(_QWORD *)(*a1 + 208);
  v11 = *(_QWORD *)(*a1 + 216);
  v10 = *(_QWORD *)(*a1 + 224);
  v12 = *(_QWORD *)(*a1 + 232);
  v13 = *(_QWORD *)(*a1 + 264) + *(_QWORD *)(*a1 + 272);
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)v2 = *(_OWORD *)v13;
    v14 = *(_OWORD *)(v13 + 16);
    v15 = *(_OWORD *)(v13 + 32);
    v16 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 64) = v16;
    *(_OWORD *)(v2 + 16) = v14;
    *(_OWORD *)(v2 + 32) = v15;
    v17 = *(void **)(v13 + 16);
    *(_QWORD *)v13 = v3;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    swift_bridgeObjectRetain_n(v4, 2);
    v18 = v5;
    swift_bridgeObjectRetain_n(v12, 2);
    v19 = v18;
    sub_100BB63D0(v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100BB7814((uint64_t *)v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_10013C5EC((_QWORD *)v2);
    v20 = *(void **)(v2 + 176);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v13;
    v21 = *(_OWORD *)(v13 + 16);
    v22 = *(_OWORD *)(v13 + 32);
    v23 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 144) = v23;
    *(_OWORD *)(v2 + 96) = v21;
    *(_OWORD *)(v2 + 112) = v22;
    v24 = *(void **)(v13 + 16);
    *(_QWORD *)v13 = v3;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(v13 + 32) = v6;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v8;
    *(_QWORD *)(v13 + 56) = v11;
    *(_QWORD *)(v13 + 64) = v10;
    *(_QWORD *)(v13 + 72) = v12;
    sub_100BB63D0(v2 + 80);
    swift_bridgeObjectRetain();
    v25 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100BB7814((uint64_t *)(v2 + 80));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_10013C5EC((_QWORD *)(v2 + 80));
  }
  free((void *)v2);
}

void sub_100BB7DC0()
{
  char *v0;
  char *v1;
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  id v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  uint64_t v47;
  __n128 v48;
  _QWORD v49[3];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54[2];
  char v55[24];
  _OWORD v56[5];

  v1 = v0;
  sub_10004A07C(0, &qword_1011DEF90, CAPackage_ptr);
  v2 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v55, 0, 0);
  v3 = *((_OWORD *)v2 + 2);
  v4 = *((_OWORD *)v2 + 3);
  v5 = *(_OWORD *)v2;
  v56[1] = *((_OWORD *)v2 + 1);
  v56[2] = v3;
  v6 = *((_OWORD *)v2 + 4);
  v56[3] = v4;
  v56[4] = v6;
  v56[0] = v5;
  sub_100BB63D0((uint64_t)v56);
  v7 = CAPackage.init(definition:)((uint64_t *)v56);
  v29 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = v7;
  v30 = v7;

  v31 = objc_msgSend(v30, "rootLayer");
  if (v31)
  {
    v32 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = v31;
    v33 = v31;
    objc_msgSend(v32, "removeFromSuperlayer");

    v34 = objc_msgSend(objc_allocWithZone((Class)CAStateController), "initWithLayer:", v33);
    v35 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = v34;

    objc_msgSend(v33, "removeFromSuperlayer");
    objc_msgSend(v33, "setGeometryFlipped:", objc_msgSend(v30, "isGeometryFlipped"));
    v36 = objc_msgSend(v1, "layer");
    objc_msgSend(v36, "addSublayer:", v33);

    v37 = objc_msgSend(v1, "layer");
    objc_msgSend(v37, "bounds");
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v44;

    objc_msgSend(v33, "setPosition:", CGRect.center.getter(v39, v41, v43, v45));
    sub_100BB9090();

  }
  else
  {
    v46 = sub_100BBA0D0();
    v47 = swift_allocError(&type metadata for CoreAnimationPackageView.Error, v46, 0, 0);
    swift_willThrow(v48);

    if (qword_1011DDED8 != -1)
      swift_once(&qword_1011DDED8, sub_100BBA654);
    v8 = type metadata accessor for Logger(0);
    sub_100048B14(v8, (uint64_t)qword_10124F250);
    v9 = v1;
    swift_errorRetain(v47);
    v10 = v9;
    v11 = swift_errorRetain(v47);
    v12 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.fault.getter(v13);
    if (os_log_type_enabled(v12, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(64, -1);
      v54[0] = v16;
      *(_DWORD *)v15 = 136446466;
      v17 = *((_QWORD *)v2 + 1);
      v18 = (void *)*((_QWORD *)v2 + 2);
      v19 = *((_QWORD *)v2 + 9);
      v49[0] = *(_QWORD *)v2;
      v49[1] = v17;
      v49[2] = v18;
      v20 = *(_OWORD *)(v2 + 40);
      v50 = *(_OWORD *)(v2 + 24);
      v51 = v20;
      v52 = *(_OWORD *)(v2 + 56);
      v53 = v19;
      swift_bridgeObjectRetain();
      v21 = v18;
      swift_bridgeObjectRetain();
      v22 = (char *)String.init<A>(describing:)(v49, &type metadata for CAPackageDefinition);
      v24 = v23;
      *(_QWORD *)(v15 + 4) = sub_100BBDE38(v22, v23, v54);

      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v15 + 12) = 2082;
      v49[0] = v47;
      swift_errorRetain(v47);
      v25 = sub_100007E8C(&qword_1011DF550);
      v26 = (char *)String.init<A>(describing:)(v49, v25);
      v28 = v27;
      *(_QWORD *)(v15 + 14) = sub_100BBDE38(v26, v27, v54);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(v47);
      swift_errorRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v12, v14, "Failed to load CAPackage with definition=%{public}s. Error=%{public}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_errorRelease(v47);
    }
    else
    {
      swift_errorRelease(v47);

      swift_errorRelease(v47);
      swift_errorRelease(v47);

    }
  }
}

void sub_100BB8228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void **v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  unsigned int v21;
  double v22;
  _BYTE v23[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v23, 0, 0);
  v6 = v5[1];
  if (v6)
  {
    v7 = *v5;
    if (a2)
    {
      v8 = v7 == a1 && v6 == a2;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a1, a2, 0) & 1) != 0)
        return;
    }
    v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    v10 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v10)
      return;
    v11 = v10;
    swift_bridgeObjectRetain();
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    if (!a2)
      return;
    v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    v13 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v13)
      return;
    v11 = v13;
    v12 = 0;
  }
  v14 = objc_msgSend(v11, "stateWithName:", v12);

  if (v14)
  {
    v15 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
    if (v15)
    {
      v16 = *v9;
      v17 = (void *)objc_opt_self(UIView);
      v18 = v16;
      v19 = v15;
      v20 = v14;
      v21 = objc_msgSend(v17, "areAnimationsEnabled");
      LODWORD(v22) = 0;
      if (v21)
        *(float *)&v22 = 1.0;
      objc_msgSend(v19, "setState:ofLayer:transitionSpeed:", v20, v18, v22);

    }
  }
}

uint64_t CoreAnimationPackageView.stateName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

double CoreAnimationPackageView.stateName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  sub_100BB8228(v6, v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void (*CoreAnimationPackageView.stateName.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName;
  v3[5] = v1;
  v3[6] = v4;
  v5 = (_QWORD *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = v5[1];
  v3[3] = *v5;
  v3[4] = v6;
  swift_bridgeObjectRetain();
  return sub_100BB8508;
}

void sub_100BB8508(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = (uint64_t *)(v5 + v4);
  v9 = *v7;
  v8 = v7[1];
  *v7 = v3;
  v7[1] = v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_100BB8228(v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100BB8228(v9, v8);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

void *CoreAnimationPackageView.foregroundColor.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CoreAnimationPackageView.foregroundColor.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  Class v5;
  void *v6;
  id v7;
  Class isa;
  _BYTE v9[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor, v9, 1, 0);
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  if (*v3)
  {
    sub_100BB9090();
  }
  else
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (v6)
    {
      v7 = v6;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v7, "setFilters:", isa);

      v5 = isa;
    }
  }

}

void (*CoreAnimationPackageView.foregroundColor.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  return sub_100BB86F4;
}

void sub_100BB86F4(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;

  v3 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    v4 = v3[3];
    if (*(_QWORD *)(v4 + v3[4]))
    {
      sub_100BB9090();
    }
    else
    {
      v5 = *(void **)(v4 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
      if (v5)
      {
        v6 = v5;
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v6, "setFilters:", isa);

      }
    }
  }
  free(v3);
}

Swift::Void __swiftcall CoreAnimationPackageView.reset()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];

  v1 = v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, v19, 0, 0);
  v2 = *(_QWORD **)(v1 + 72);
  if (v2[2])
  {
    v4 = v2[4];
    v3 = v2[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, &v18, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = v4;
  v5[1] = v3;
  sub_100BB8228(v6, v7);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_bridgeObjectRetain();
  v12 = swift_unknownObjectRetain_n(v11, 2);
  v13 = (_QWORD *)swift_dynamicCastClass(v12, v10);
  if (!v13)
  {
    swift_bridgeObjectRelease(v8);
    v13 = _swiftEmptyArrayStorage;
  }
  v14 = v13[2];
  swift_release(v13);
  if (v14 == v9 - (v9 != 0))
  {
    v15 = (_QWORD *)swift_dynamicCastClass(v8, v10);
    if (!v15)
    {
      swift_bridgeObjectRelease(v8);
      v15 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    sub_100BB94A4(v8, v8 + 32, v9 != 0, (2 * v9) | 1);
    v15 = v17;
  }
  swift_bridgeObjectRelease(v8);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates) = v15;
  swift_bridgeObjectRelease(v16);
}

Swift::Void __swiftcall CoreAnimationPackageView.set(stateName:forSublayer:)(Swift::String stateName, Swift::String forSublayer)
{
  uint64_t v2;
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  unsigned int v16;
  double v17;
  id v18;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
  if (v3)
  {
    object = forSublayer._object;
    countAndFlagsBits = forSublayer._countAndFlagsBits;
    v6 = objc_msgSend(v3, "sublayers");
    if (v6)
    {
      v7 = v6;
      v8 = sub_10004A07C(0, &qword_1011DEF40, CALayer_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

      swift_bridgeObjectRetain();
      v18 = sub_100BB9840(v9, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18)
      {
        v10 = String._bridgeToObjectiveC()();
        v11 = objc_msgSend(v18, "stateWithName:", v10);

        if (v11)
        {
          v12 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
          if (v12)
          {
            v13 = (void *)objc_opt_self(UIView);
            v14 = v12;
            v15 = v11;
            v11 = v18;
            v16 = objc_msgSend(v13, "areAnimationsEnabled");
            LODWORD(v17) = 0;
            if (v16)
              *(float *)&v17 = 1.0;
            objc_msgSend(v14, "setState:ofLayer:transitionSpeed:", v15, v11, v17, v18);

          }
        }

      }
    }
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.advanceState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates);
  v3 = *v2;
  if (*(_QWORD *)(*v2 + 16)
    || (v4 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition,
        swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition, &v10, 0, 0),
        *v2 = *(_QWORD *)(v4 + 72),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        v3 = *v2,
        *(_QWORD *)(*v2 + 16)))
  {
    v6 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    swift_bridgeObjectRetain();
    sub_100BB99D0(0, 1);
    v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
    swift_beginAccess(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName, v11, 1, 0);
    v8 = *v7;
    v9 = v7[1];
    *v7 = v6;
    v7[1] = v5;
    sub_100BB8228(v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.startCyclingThroughStates(with:)(Swift::Double with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  double v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v12[6];

  v3 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer);
  if (!v4 || (objc_msgSend(v4, "timeInterval"), v5 != with))
  {
    v6 = (void *)objc_opt_self(NSTimer);
    v7 = swift_allocObject(&unk_101104158, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16);
    v12[4] = sub_100BB9B08;
    v12[5] = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100223938;
    v12[3] = &unk_101104170;
    v8 = _Block_copy(v12);
    swift_release();
    v9 = objc_msgSend(v6, "scheduledTimerWithTimeInterval:repeats:block:", 1, v8, with);
    _Block_release(v8);
    v10 = *(void **)(v1 + v3);
    *(_QWORD *)(v1 + v3) = v9;
    v11 = v9;
    objc_msgSend(v10, "invalidate");

  }
}

void sub_100BB8CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    CoreAnimationPackageView.advanceState()();

  }
}

Swift::Void __swiftcall CoreAnimationPackageView.stopCyclingThroughStates()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer))
  {
    CoreAnimationPackageView.reset()();
    v2 = *(void **)(v0 + v1);
    v3 = v2;
    *(_QWORD *)(v0 + v1) = 0;
    objc_msgSend(v2, "invalidate");

  }
}

Swift::Void __swiftcall CoreAnimationPackageView.layoutSubviews()()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  double v20;
  double v21;
  double Height;
  double v23;
  CGFloat m21;
  CGFloat m22;
  char *v26;
  __int128 v27;
  id v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  CGFloat rect;
  __int128 v39;
  __int128 v40;
  CATransform3D t1;
  CGAffineTransform v42;
  CGAffineTransform t2;
  char v44[24];
  objc_super v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v45.receiver = v0;
  v45.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  objc_msgSendSuper2(&v45, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, "layer");
    objc_msgSend(v3, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    objc_msgSend(v2, "bounds");
    v37 = v12;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v46.origin.x = v5;
    v46.origin.y = v7;
    v46.size.width = v9;
    v46.size.height = v11;
    Width = CGRectGetWidth(v46);
    v47.origin.x = v5;
    v47.origin.y = v7;
    v47.size.width = v9;
    rect = v11;
    v47.size.height = v11;
    v20 = Width / CGRectGetHeight(v47);
    v48.origin.x = v37;
    v48.origin.y = v14;
    v48.size.width = v16;
    v48.size.height = v18;
    v21 = CGRectGetWidth(v48);
    v49.origin.x = v37;
    v49.origin.y = v14;
    v49.size.width = v16;
    v49.size.height = v18;
    if (v20 >= v21 / CGRectGetHeight(v49))
    {
      v52.origin.x = v5;
      v52.origin.y = v7;
      v52.size.width = v9;
      v52.size.height = rect;
      Height = CGRectGetHeight(v52);
      v53.origin.x = v37;
      v53.origin.y = v14;
      v53.size.width = v16;
      v53.size.height = v18;
      v23 = CGRectGetHeight(v53);
    }
    else
    {
      v50.origin.x = v5;
      v50.origin.y = v7;
      v50.size.width = v9;
      v50.size.height = rect;
      Height = CGRectGetWidth(v50);
      v51.origin.x = v37;
      v51.origin.y = v14;
      v51.size.width = v16;
      v51.size.height = v18;
      v23 = CGRectGetWidth(v51);
    }
    CGAffineTransformMakeScale((CGAffineTransform *)&t1, Height / v23, Height / v23);
    v39 = *(_OWORD *)&t1.m13;
    v40 = *(_OWORD *)&t1.m11;
    m21 = t1.m21;
    m22 = t1.m22;
    v26 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
    swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition], v44, 0, 0);
    *(_OWORD *)&t1.m11 = v40;
    *(_OWORD *)&t1.m13 = v39;
    t1.m21 = m21;
    t1.m22 = m22;
    v27 = *(_OWORD *)(v26 + 40);
    *(_OWORD *)&t2.a = *(_OWORD *)(v26 + 24);
    *(_OWORD *)&t2.c = v27;
    *(_OWORD *)&t2.tx = *(_OWORD *)(v26 + 56);
    CGAffineTransformConcat(&v42, (CGAffineTransform *)&t1, &t2);
    t2 = v42;
    CATransform3DMakeAffineTransform(&t1, &t2);
    objc_msgSend(v2, "setTransform:", &t1);
    v28 = objc_msgSend(v0, "layer");
    objc_msgSend(v28, "bounds");
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    objc_msgSend(v2, "setPosition:", CGRect.center.getter(v30, v32, v34, v36));
  }
}

id sub_100BB9090()
{
  char *v0;
  void *v1;
  void **v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class v8;
  NSString v9;
  id v10;
  Class isa;
  Class v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class v21;
  void *v22;
  _BYTE v24[24];

  v1 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v1, "begin");
  objc_msgSend(v1, "setDisableActions:", 1);
  v2 = (void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor];
  *(_QWORD *)&v3 = swift_beginAccess(&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor], v24, 0, 0).n128_u64[0];
  v4 = *v2;
  if (*v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorMonochrome);
    v6 = v5;
    v7 = objc_allocWithZone((Class)CAFilter);
    v8 = v4;
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v7, "initWithType:", v9, swift_bridgeObjectRelease(v6).n128_f64[0]);

    isa = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v10, "setValue:forKey:", isa, kCAFilterInputBias);

    v12 = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v10, "setValue:forKey:", v12, kCAFilterInputAmount);

    v13 = objc_msgSend(v0, "traitCollection");
    v14 = -[objc_class resolvedColorWithTraitCollection:](v8, "resolvedColorWithTraitCollection:", v13);

    v15 = objc_msgSend(v14, "CGColor");
    objc_msgSend(v10, "setValue:forKey:", v15, kCAFilterInputColor);

    v16 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    if (v16)
    {
      v17 = sub_100007E8C(&qword_1011DEF80);
      v18 = swift_allocObject(v17, 64, 7);
      *(_OWORD *)(v18 + 16) = xmmword_100EA7AA0;
      *(_QWORD *)(v18 + 56) = sub_10004A07C(0, (unint64_t *)&qword_1011DEF88, CAFilter_ptr);
      *(_QWORD *)(v18 + 32) = v10;
      v19 = v16;
      v20 = v10;
      v21 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v19, "setFilters:", v21, swift_bridgeObjectRelease(v18).n128_f64[0]);

    }
    goto LABEL_6;
  }
  v22 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v22)
  {
    v10 = v22;
    v8 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setFilters:", v8);
LABEL_6:

  }
  return objc_msgSend(v1, "commit", v3);
}

void CoreAnimationPackageView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MusicCoreUI.CoreAnimationPackageView", 36, "init(frame:)", 12, 0);
  __break(1u);
}

id CoreAnimationPackageView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100BB94A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        swift_arrayInitWithCopy(v8 + 4);
        return;
      }
    }
    else
    {
      v7 = sub_100007E8C(&qword_1011DF560);
      v8 = (_QWORD *)swift_allocObject(v7, 16 * v5 + 32, 7);
      v9 = j__malloc_size_0(v8);
      v10 = v9 - 32;
      if (v9 < 32)
        v10 = v9 - 17;
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_100BB9570(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v15;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_14;
  if (v5)
  {
    if (v5 <= 0)
    {
      v12 = _swiftEmptyArrayStorage;
      if (v4 != a3)
        goto LABEL_10;
    }
    else
    {
      v7 = sub_100007E8C(&qword_1011DEF78);
      v8 = *(_QWORD *)(type metadata accessor for PlaylistCurators.Curator(0) - 8);
      v9 = *(_QWORD *)(v8 + 72);
      v10 = *(unsigned __int8 *)(v8 + 80);
      v11 = (v10 + 32) & ~v10;
      v12 = (_QWORD *)swift_allocObject(v7, v11 + v9 * v5, v10 | 7);
      v13 = j__malloc_size_0(v12);
      if (!v9)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v13 - v11 == 0x8000000000000000 && v9 == -1)
        goto LABEL_16;
      v12[2] = v5;
      v12[3] = 2 * ((uint64_t)(v13 - v11) / v9);
      if (v4 != a3)
      {
LABEL_10:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlaylistCurators.Curator(0) - 8) + 80);
        swift_arrayInitWithCopy((char *)v12 + ((v15 + 32) & ~v15));
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

_QWORD *sub_100BB9690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100007E8C(&qword_1011DEF70);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size_0((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_100483BE4(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain();
  sub_10004FA7C(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

id sub_100BB9764()
{
  return sub_100BB9090();
}

void sub_100BB9784()
{
  char *v0;
  char *v1;

  v1 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100E2B820, "MusicCoreUI/CoreAnimationPackageView.swift", 42, 2, 30, 0);
  __break(1u);
}

void *sub_100BB9840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "name");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100BB99D0(uint64_t result, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100BCC0F8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy(&v4[16 * v6 + 32], v7, &type metadata for String);
  if (!v7)
    goto LABEL_19;
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = &v4[16 * a2 + 32];
  if (v6 != a2 || &v4[16 * v6 + 32] >= &v15[16 * v14])
    result = (uint64_t)memmove(&v4[16 * v6 + 32], v15, 16 * v14);
  v16 = *((_QWORD *)v4 + 2);
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    *((_QWORD *)v4 + 2) = v17;
LABEL_19:
    *v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100BB9AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100BB9B08(uint64_t a1)
{
  uint64_t v1;

  sub_100BB8CDC(a1, v1);
}

uint64_t sub_100BB9B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BB9B20(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100BB9B28(uint64_t a1, uint64_t a2)
{
  sub_100BB9DF4(a1, a2, (unint64_t *)&qword_1011E0650, (unint64_t *)UIViewPropertyAnimator_ptr);
}

void sub_100BB9B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v5 < 0)
    v23 = v5;
  else
    v23 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease();
  if (v7 < v2)
    goto LABEL_33;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease();
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_36:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_41;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  v15 = type metadata accessor for SyncedLyricsLineView();
  v16 = (void *)swift_arrayDestroy(v14, v5, v15);
  if (!v6)
  {
LABEL_27:
    specialized Array._endMutation()(v16);
    return;
  }
  v17 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = v18 - v2;
    if (!__OFSUB__(v18, v2))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v17 < 0)
    v26 = *v3;
  else
    v26 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease();
  v19 = v27 - v2;
  if (__OFSUB__(v27, v2))
    goto LABEL_51;
LABEL_21:
  v20 = (char *)(v13 + 8 * v2);
  if (v4 != v2 || v14 >= &v20[8 * v19])
    v16 = memmove(v14, v20, 8 * v19);
  v2 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
LABEL_52:
    if (v2 < 0)
      v28 = v2;
    else
      v28 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease();
    v22 = v29 + v6;
    if (!__OFADD__(v29, v6))
      goto LABEL_26;
    goto LABEL_57;
  }
  v21 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v22 = v21 + v6;
  if (!__OFADD__(v21, v6))
  {
LABEL_26:
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v22;
    goto LABEL_27;
  }
LABEL_57:
  __break(1u);
}

void sub_100BB9DE0(uint64_t a1, uint64_t a2)
{
  sub_100BB9DF4(a1, a2, (unint64_t *)&qword_1011E2F40, (unint64_t *)UIView_ptr);
}

void sub_100BB9DF4(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a4;
    v7 = a3;
    v4 = a2;
    v6 = a1;
    v8 = *v5;
    if (!((unint64_t)*v5 >> 62))
    {
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v8 < 0)
    v29 = v8;
  else
    v29 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v8);
  if (v11 < v4)
    goto LABEL_33;
LABEL_4:
  v8 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v10 = (unint64_t *)(v6 - v4);
  if (__OFSUB__(0, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v11 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = v12 - v8;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v11 < 0)
      v31 = v11;
    else
      v31 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v11);
    v11 = *v5;
    goto LABEL_15;
  }
LABEL_36:
  if (v11 < 0)
    v30 = v11;
  else
    v30 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v11);
  v13 = (uint64_t)v10 + v12;
  if (__OFADD__(v12, v10))
    goto LABEL_41;
LABEL_8:
  v11 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
  *v5 = v11;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v11 & 0x8000000000000000) == 0
    && (v11 & 0x4000000000000000) == 0)
  {
    v15 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  v36 = v8;
  v8 = (uint64_t)v10;
  v10 = v7;
  v7 = v9;
  if ((unint64_t)v11 >> 62)
    goto LABEL_42;
  v16 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v16, 1, v11);
  v18 = *v5;
  *v5 = v17;
  swift_bridgeObjectRelease(v18);
  v15 = *v5 & 0xFFFFFFFFFFFFFF8;
  v9 = v7;
  v7 = v10;
  v10 = (unint64_t *)v8;
  v8 = v36;
LABEL_18:
  v19 = v15 + 32;
  v20 = (char *)(v15 + 32 + 8 * v6);
  v21 = sub_10004A07C(0, v7, v9);
  v22 = (void *)swift_arrayDestroy(v20, v8, v21);
  if (!v10)
  {
LABEL_27:
    specialized Array._endMutation()(v22);
    return;
  }
  v23 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = v24 - v4;
    if (!__OFSUB__(v24, v4))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v23 < 0)
    v32 = *v5;
  else
    v32 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter(v32);
  swift_bridgeObjectRelease(v23);
  v25 = v33 - v4;
  if (__OFSUB__(v33, v4))
    goto LABEL_51;
LABEL_21:
  v26 = (char *)(v19 + 8 * v4);
  if (v6 != v4 || v20 >= &v26[8 * v25])
    v22 = memmove(v20, v26, 8 * v25);
  v4 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
LABEL_52:
    if (v4 < 0)
      v34 = v4;
    else
      v34 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v35 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v4);
    v28 = (char *)v10 + v35;
    if (!__OFADD__(v35, v10))
      goto LABEL_26;
    goto LABEL_57;
  }
  v27 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v28 = (char *)v10 + v27;
  if (!__OFADD__(v27, v10))
  {
LABEL_26:
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10) = v28;
    goto LABEL_27;
  }
LABEL_57:
  __break(1u);
}

unint64_t sub_100BBA0D0()
{
  unint64_t result;

  result = qword_1011DEF98;
  if (!qword_1011DEF98)
  {
    result = swift_getWitnessTable(&unk_100EEA788, &type metadata for CoreAnimationPackageView.Error);
    atomic_store(result, (unint64_t *)&qword_1011DEF98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CoreAnimationPackageView.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BBA158 + 4 * asc_100EEA6F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BBA178 + 4 * byte_100EEA6F5[v4]))();
}

_BYTE *sub_100BBA158(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BBA178(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BBA180(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BBA188(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BBA190(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BBA198(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CoreAnimationPackageView.Error()
{
  return &type metadata for CoreAnimationPackageView.Error;
}

unint64_t sub_100BBA1B8()
{
  unint64_t result;

  result = qword_1011DEFA0;
  if (!qword_1011DEFA0)
  {
    result = swift_getWitnessTable(&unk_100EEA760, &type metadata for CoreAnimationPackageView.Error);
    atomic_store(result, (unint64_t *)&qword_1011DEFA0);
  }
  return result;
}

id sub_100BBA1FC()
{
  if (qword_1011DDE30 != -1)
    swift_once(&qword_1011DDE30, sub_100BA7618);
  static NSBundle.musicCoreUIBundle = qword_10124F040;
  return (id)qword_10124F040;
}

uint64_t *NSBundle.musicCoreUIBundle.unsafeMutableAddressor()
{
  if (qword_1011DDED0 != -1)
    swift_once(&qword_1011DDED0, sub_100BBA1FC);
  return &static NSBundle.musicCoreUIBundle;
}

id static NSBundle.musicCoreUIBundle.getter()
{
  if (qword_1011DDED0 != -1)
    swift_once(&qword_1011DDED0, sub_100BBA1FC);
  return (id)static NSBundle.musicCoreUIBundle;
}

void MusicLibrary.ActionableState.updateSymbolConfiguration(from:traitCollection:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  double v21;
  __int128 v22;
  id v23;
  NSString *v24;
  CGFloat bottom;
  CGFloat right;
  __int128 v27;

  v7 = sub_100007E8C(&qword_1011E6620);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1011DE2E8 != -1)
    swift_once(&qword_1011DE2E8, sub_100CCDB38);
  v10 = a4;
  v11 = static SymbolButton.Configuration.platterMinimumSize;
  v12 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  *(_OWORD *)(a1 + v12[13]) = v11;
  static UIView.Corner.rounded.getter(v12);
  v13 = type metadata accessor for UIView.Corner(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 0, 1, v13);
  sub_100BBA5E0((uint64_t)v9, a1 + v12[9]);
  v14 = a1 + v12[10];
  if (*(_QWORD *)v14)
  {
    v15 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)&UIEdgeInsetsZero.top;
    *(_OWORD *)(v14 + 24) = v15;
  }

  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 56) = 2;
  objc_storeStrong((id *)(a1 + 24), UIFontTextStyleSubheadline);
  *(_QWORD *)(a1 + 48) = 6;
  switch(v10 >> 8)
  {
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_16;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      *(_OWORD *)a1 = xmmword_100EE8A40;
      *(_QWORD *)(a1 + 48) = 7;
      goto LABEL_16;
    case 4u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v22 = xmmword_100EE8A30;
      goto LABEL_15;
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v22 = xmmword_100EE8A20;
      goto LABEL_15;
    default:
      if ((v10 & 0x100) != 0)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        v22 = xmmword_100EE8A50;
LABEL_15:
        *(_OWORD *)a1 = v22;
LABEL_16:
        sub_100BBA628(*(void **)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(void **)(v14 + 48));
        *(_QWORD *)(v14 + 48) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        v16 = *(void **)v14;
        if (*(_QWORD *)v14
          && (v17 = type metadata accessor for CircularProgressView(), (v18 = swift_dynamicCastClass(v16, v17)) != 0))
        {
          v19 = (char *)v18;
          v20 = v16;
        }
        else
        {
          v23 = objc_allocWithZone((Class)type metadata accessor for CircularProgressView());
          v19 = CircularProgressView.init(size:)(0.0, 0.0);
        }
        CircularProgressView.setState(_:animated:)(a3, v10 & 1, 1, v21);
        sub_10013BA8C(*(_QWORD *)(a1 + 192), *(void **)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216));
        *(_OWORD *)(a1 + 192) = xmmword_100EA85A0;
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        *(_OWORD *)a1 = xmmword_100EE8A60;
        *(_QWORD *)(a1 + 56) = 1;
        v24 = UIFontTextStyleFootnote;

        *(_QWORD *)(a1 + 24) = v24;
        v27 = *(_OWORD *)&UIEdgeInsetsZero.top;
        bottom = UIEdgeInsetsZero.bottom;
        right = UIEdgeInsetsZero.right;
        sub_100BBA628(*(void **)v14, *(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(void **)(v14 + 48));
        *(_QWORD *)v14 = v19;
        *(_OWORD *)(v14 + 8) = v27;
        *(CGFloat *)(v14 + 24) = bottom;
        *(CGFloat *)(v14 + 32) = right;
        *(_OWORD *)(v14 + 40) = xmmword_100EAB8D0;
      }
      return;
  }
}

uint64_t sub_100BBA5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011E6620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100BBA628(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1)
  {

  }
}

uint64_t sub_100BBA654()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, qword_10124F250);
  sub_100048B14(v0, (uint64_t)qword_10124F250);
  sub_100BBA6CC();
  v1 = OS_os_log.init(musicCategory:)(0x726F43636973754DLL, 0xEB00000000495565);
  return Logger.init(_:)(v1);
}

unint64_t sub_100BBA6CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DEFA8;
  if (!qword_1011DEFA8)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DEFA8);
  }
  return result;
}

uint64_t ArtworkImageViewModelAttributeProviding.cropStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  static Artwork.CropStyle.boundedBox.getter();
  v2 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_100BBA748@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_100007E8C(&qword_1011DEFB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007E8C((uint64_t *)&unk_1011E4A00);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Artwork(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v26 - v18;
  a1(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10004FF60((uint64_t)v11, (uint64_t *)&unk_1011E4A00);
    v20 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 1, 1, v20);
  }
  else
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v19, v11, v12);
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, v12);
    a2(v23);
    v24 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 0, 1, v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    v22(a3, v16, v12);
    v25 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100BBAE04((uint64_t)v8, (uint64_t)&a3[*(int *)(v25 + 20)]);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a3, 0, 1, v25);
  }
}

uint64_t sub_100BBA958@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBA96C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];

  v2 = sub_100007E8C(&qword_1011DEFB0);
  __chkstk_darwin(v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100007E8C((uint64_t *)&unk_1011E4A00);
  __chkstk_darwin(v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Artwork(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v23[-v13];
  v15 = sub_100007E8C(&qword_1011DEFE8);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  v16 = swift_release();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v9 + 48))(v7, 1, v8, v16) == 1)
  {
    sub_10004FF60((uint64_t)v7, (uint64_t *)&unk_1011E4A00);
    v17 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 1, 1, v17);
  }
  else
  {
    v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32);
    v19(v14, v7, v8);
    v20 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v11, v14, v8);
    static Artwork.CropStyle.boundedBox.getter(v20);
    v21 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 0, 1, v21);
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
    v19(a1, v11, v8);
    v22 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100BBAE04((uint64_t)v4, (uint64_t)&a1[*(int *)(v22 + 20)]);
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a1, 0, 1, v22);
  }
}

uint64_t ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_100007E8C(&qword_1011DEFB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007E8C((uint64_t *)&unk_1011E4A00);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Artwork(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v24 - v17;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10004FF60((uint64_t)v11, (uint64_t *)&unk_1011E4A00);
    v19 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a3, 1, 1, v19);
  }
  else
  {
    v25 = a1;
    v21 = a3;
    v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v18, v11, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(v25, a2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    v22(v21, v16, v12);
    v23 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100BBAE04((uint64_t)v8, (uint64_t)&v21[*(int *)(v23 + 20)]);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 0, 1, v23);
  }
}

uint64_t sub_100BBAE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DEFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BBAE4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100BBC2C4((void (*)(void))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBAE58@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

double sub_100BBAE7C()
{
  uint64_t v0;
  double result;

  v0 = sub_100007E8C(&qword_1011DEFE8);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100BBAF48@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBAF70@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&EditorialItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBAF98@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&Genre.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBAFC0@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBAFE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for Artwork(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007E8C((uint64_t *)&unk_1011E4A00);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v18 - v11;
  Playlist.artwork.getter(v10);
  sub_10004A160((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_1011E4A00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    v13 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
    v14 = type metadata accessor for ArtworkImage.ViewModel(0);
    v15 = a1 + *(int *)(v14 + 20);
    static Artwork.CropStyle.squareCenterCrop.getter(v14);
    v16 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 0, 1, v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 0, 1, v14);
  }
  return sub_10004FF60((uint64_t)v12, (uint64_t *)&unk_1011E4A00);
}

uint64_t Playlist.artworkViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v86 = a1;
  v2 = sub_100007E8C(&qword_1011DEFB0);
  __chkstk_darwin(v2);
  v77 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Artwork(0);
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  v5 = __chkstk_darwin(v4);
  v76 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v81 = (char *)&v75 - v7;
  v8 = sub_100007E8C((uint64_t *)&unk_1011E4A00);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v80 = (char *)&v75 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v75 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v75 - v17;
  v19 = type metadata accessor for Playlist(0);
  v84 = *(_QWORD *)(v19 - 8);
  v85 = v19;
  v20 = __chkstk_darwin(v19);
  v79 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v75 - v22;
  v24 = sub_100007E8C((uint64_t *)&unk_1011E4DA0);
  v25 = __chkstk_darwin(v24);
  v78 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v75 - v27;
  v29 = sub_100007E8C(&qword_1011DED48);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v75 - v34;
  Playlist.variant.getter(v33);
  v36 = type metadata accessor for Playlist.Variant(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
    goto LABEL_2;
  sub_10004A160((uint64_t)v35, (uint64_t)v32, &qword_1011DED48);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v32, v36);
  if (v39 != enum case for Playlist.Variant.regular(_:) && v39 != enum case for Playlist.Variant.smart(_:))
  {
    if (v39 == enum case for Playlist.Variant.genius(_:))
      goto LABEL_2;
    if (v39 == enum case for Playlist.Variant.favoriteSongs(_:))
      goto LABEL_7;
    if (v39 == enum case for Playlist.Variant.folder(_:))
      goto LABEL_14;
    if (v39 != enum case for Playlist.Variant.subscribed(_:))
    {
      if (v39 != enum case for Playlist.Variant.admin(_:))
      {
        if (v39 == enum case for Playlist.Variant.personalMix(_:))
        {
          v59 = (uint64_t)v80;
          Playlist.editorialArtwork.getter();
          sub_10004A160(v59, (uint64_t)v11, (uint64_t *)&unk_1011E4A00);
          v61 = v82;
          v60 = v83;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v11, 1, v83) == 1)
          {
            v62 = type metadata accessor for ArtworkImage.ViewModel(0);
            v63 = (uint64_t)v78;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v78, 1, 1, v62);
          }
          else
          {
            v64 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
            v65 = v81;
            v64(v81, v11, v60);
            v66 = v76;
            v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 16))(v76, v65, v60);
            v68 = (uint64_t)v77;
            static Artwork.CropStyle.featuredContentCrop170T100B.getter(v67);
            v69 = type metadata accessor for Artwork.CropStyle(0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
            v63 = (uint64_t)v78;
            v64(v78, v66, v60);
            v62 = type metadata accessor for ArtworkImage.ViewModel(0);
            sub_100BBAE04(v68, v63 + *(int *)(v62 + 20));
            (*(void (**)(char *, uint64_t))(v61 + 8))(v65, v60);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v63, 0, 1, v62);
          }
          v71 = v85;
          v70 = v86;
          v72 = v84;
          v73 = v79;
          sub_10004FF60(v59, (uint64_t *)&unk_1011E4A00);
          (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v73, v1, v71);
          type metadata accessor for ArtworkImage.ViewModel(0);
          v74 = *(_QWORD *)(v62 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v63, 1, v62) == 1)
          {
            sub_100BBAFE4(v70);
            (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v71);
            sub_10004FF60(v63, (uint64_t *)&unk_1011E4DA0);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v71);
            sub_100077A18(v63, v70);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v70, 0, 1, v62);
          }
          goto LABEL_15;
        }
        (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v36);
LABEL_14:
        v58 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v86, 1, 1, v58);
LABEL_15:
        v55 = &qword_1011DED48;
        v56 = (uint64_t)v35;
        return sub_10004FF60(v56, v55);
      }
LABEL_2:
      sub_10004FF60((uint64_t)v35, &qword_1011DED48);
      return sub_100BBAFE4(v86);
    }
  }
LABEL_7:
  sub_10004FF60((uint64_t)v35, &qword_1011DED48);
  sub_100BBAFE4((uint64_t)v28);
  v40 = v84;
  v41 = v1;
  v42 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v23, v41, v85);
  v43 = type metadata accessor for ArtworkImage.ViewModel(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v28, 1, v43) == 1)
  {
    Playlist.tracksTiledArtwork.getter();
    sub_10004A160((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_1011E4A00);
    v46 = v82;
    v45 = v83;
    v47 = 1;
    v48 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v16, 1, v83) == 1;
    v49 = v86;
    if (!v48)
    {
      v50 = v81;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v81, v16, v45);
      v51 = v50;
      v52 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 16))(v86, v50, v45);
      v53 = v86 + *(int *)(v43 + 20);
      static Artwork.CropStyle.boundedBox.getter(v52);
      v54 = type metadata accessor for Artwork.CropStyle(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v51, v45);
      v49 = v86;
      v47 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v49, v47, 1, v43);
    sub_10004FF60((uint64_t)v18, (uint64_t *)&unk_1011E4A00);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v85);
    v55 = (uint64_t *)&unk_1011E4DA0;
    v56 = (uint64_t)v28;
    return sub_10004FF60(v56, v55);
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v42);
  v57 = v86;
  sub_100077A18((uint64_t)v28, v86);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v57, 0, 1, v43);
}

uint64_t sub_100BBB8FC@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBB924@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&Playlist.Entry.InternalItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBB94C@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&RadioShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t RecentlyAddedMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  int v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v50 = a1;
  v1 = type metadata accessor for UploadedVideo(0);
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  __chkstk_darwin(v1);
  v38 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MusicVideo(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TVSeason(0);
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  __chkstk_darwin(v5);
  v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Playlist(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicMovie(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Album(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RecentlyAddedMusicItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v49, v18, v20);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for RecentlyAddedMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v22, v14);
    sub_100BBA748((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v25 = v50;
  if (v23 == enum case for RecentlyAddedMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v22, v10);
    sub_100BBA748((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (v23 == enum case for RecentlyAddedMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    v27 = v46;
    v26 = v47;
    v28 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v22, v48);
    sub_100BBA748((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  }
  v29 = v50;
  if (v23 == enum case for RecentlyAddedMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    v31 = v44;
    v30 = v45;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v9, v22, v45);
    Playlist.artworkViewModel.getter((uint64_t)v25);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v30);
  }
  if (v23 == enum case for RecentlyAddedMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    v32 = v41;
    v33 = v42;
    v34 = v43;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v22, v43);
    v35 = (void (*)(uint64_t))&TVSeason.artwork.getter;
LABEL_13:
    sub_100BBA748(v35, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v32, v34);
  }
  if (v23 == enum case for RecentlyAddedMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    v32 = v38;
    v33 = v39;
    v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v22, v40);
    v35 = (void (*)(uint64_t))&UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  v36 = type metadata accessor for ArtworkImage.ViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v25, 1, 1, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
}

uint64_t sub_100BBBDE8@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&RecordLabel.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBBE10@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBBE3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100BBC2C4((void (*)(void))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100BBBE48@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&SocialProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100BBBE70@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&Station.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t TVEpisode.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(char *, _QWORD, uint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v38 = a1;
  v1 = sub_100007E8C(&qword_1011DEFB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007E8C((uint64_t *)&unk_1011E4A00);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v37 - v8;
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v37 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v37 - v19;
  TVEpisode.previewArtwork.getter(v18);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v21(v9, 1, v10) == 1)
  {
    v22 = sub_10004FF60((uint64_t)v9, (uint64_t *)&unk_1011E4A00);
    TVEpisode.artwork.getter(v22);
    v23 = v21(v7, 1, v10);
    v24 = v38;
    if (v23 == 1)
    {
      sub_10004FF60((uint64_t)v7, (uint64_t *)&unk_1011E4A00);
      v25 = type metadata accessor for ArtworkImage.ViewModel(0);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    }
    v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v34(v14, v7, v10);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v17, v14, v10);
    static Artwork.CropStyle.boundedBox.getter(v35);
    v36 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v3, 0, 1, v36);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v34(v24, v17, v10);
    v31 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100BBAE04((uint64_t)v3, (uint64_t)&v24[*(int *)(v31 + 20)]);
    v32 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
    v33 = v24;
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v27(v20, v9, v10);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v17, v20, v10);
    static Artwork.CropStyle.boundedBox.getter(v28);
    v29 = type metadata accessor for Artwork.CropStyle(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v3, 0, 1, v29);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    v30 = v38;
    v27(v38, v17, v10);
    v31 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100BBAE04((uint64_t)v3, (uint64_t)&v30[*(int *)(v31 + 20)]);
    v32 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
    v33 = v30;
  }
  return v32(v33, 0, 1, v31);
}

uint64_t sub_100BBC1BC@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&TVShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBC1E4@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&TVSeason.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBC20C@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100BBC234@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&UploadedAudio.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t _s8MusicKit7StationV0A6CoreUIE9cropStyleAA7ArtworkV0aB8InternalE04CropG0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  static Artwork.CropStyle.specificRectangle.getter();
  v2 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_100BBC29C@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&UserProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100BBC2C4@<X0>(void (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  a1();
  v3 = type metadata accessor for Artwork.CropStyle(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

uint64_t sub_100BBC304@<X0>(char *a1@<X8>)
{
  return sub_100BBA748((void (*)(uint64_t))&CreditArtist.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t Track.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v2 = v1;
  v20 = a1;
  v3 = type metadata accessor for MusicVideo(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Song(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Track(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v2, v11);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    sub_100BBA748((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v17 = v20;
    if (v15 == enum case for Track.musicVideo(_:))
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v14, v3);
      sub_100BBA748((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v17);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      v18 = type metadata accessor for ArtworkImage.ViewModel(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t GenericMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  int v40;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t);
  char *v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(uint64_t);
  char *v58;
  char *v59;
  void (*v60)(uint64_t);
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __n128 v77;
  void (*v78)(char *, uint64_t, __n128);
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, __n128);
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v133 = a1;
  v1 = type metadata accessor for CreditArtist(0);
  v131 = *(_QWORD *)(v1 - 8);
  v132 = v1;
  __chkstk_darwin(v1);
  v130 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for SocialProfile(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UploadedVideo(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v83 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for UploadedAudio(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for TVShow(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for TVSeason(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for TVEpisode(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for RecordLabel(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for RadioShow(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Station(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for Song(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Playlist(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MusicVideo(0);
  v117 = *(_QWORD *)(v14 - 8);
  v118 = v14;
  __chkstk_darwin(v14);
  v116 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MusicMovie(0);
  v120 = *(_QWORD *)(v16 - 8);
  v121 = v16;
  __chkstk_darwin(v16);
  v119 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Genre(0);
  v123 = *(_QWORD *)(v18 - 8);
  v124 = v18;
  __chkstk_darwin(v18);
  v122 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for EditorialItem(0);
  v126 = *(_QWORD *)(v20 - 8);
  v127 = v20;
  __chkstk_darwin(v20);
  v125 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Curator(0);
  v128 = *(_QWORD *)(v22 - 8);
  v129 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Artist(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Album(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v81 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for GenericMusicItem(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v82 = (char *)&v81 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v36);
  v39 = (char *)&v81 - v38;
  v81 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v34 + 16);
  v81((char *)&v81 - v38, v134, v33, v37);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v39, v33);
  if (v40 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v39, v29);
    sub_100BBA748((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v133);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v29);
  }
  v42 = v133;
  if (v40 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v39, v25);
    sub_100BBA96C(v42);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  if (v40 == enum case for GenericMusicItem.composer(_:))
  {
    v43 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v39, v33);
  }
  if (v40 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v44 = v130;
    v45 = v131;
    v46 = v132;
    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v130, v39, v132);
    v47 = (void (*)(uint64_t))&CreditArtist.artwork.getter;
LABEL_13:
    v53 = (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter;
LABEL_14:
    sub_100BBA748(v47, v53, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v44, v46);
  }
  if (v40 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v48 = v128;
    v49 = v39;
    v50 = v129;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v24, v49, v129);
    sub_100BBA748((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v42);
    v51 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
    v52 = v24;
    return v51(v52, v50);
  }
  if (v40 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v44 = v125;
    v45 = v126;
    v46 = v127;
    (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v125, v39, v127);
    v47 = (void (*)(uint64_t))&EditorialItem.artwork.getter;
    goto LABEL_13;
  }
  if (v40 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v55 = v122;
    v54 = v123;
    v56 = v39;
    v50 = v124;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v122, v56, v124);
    v57 = (void (*)(uint64_t))&Genre.artwork.getter;
LABEL_22:
    v60 = (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter;
LABEL_23:
    sub_100BBA748(v57, v60, v42);
LABEL_24:
    v51 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
    v52 = v55;
    return v51(v52, v50);
  }
  if (v40 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v55 = v119;
    v54 = v120;
    v58 = v39;
    v50 = v121;
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v119, v58, v121);
    v57 = (void (*)(uint64_t))&MusicMovie.artwork.getter;
    goto LABEL_22;
  }
  if (v40 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v55 = v116;
    v54 = v117;
    v59 = v39;
    v50 = v118;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v116, v59, v118);
    v57 = (void (*)(uint64_t))&MusicVideo.artwork.getter;
    goto LABEL_22;
  }
  if (v40 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v54 = v114;
    v55 = v113;
    v61 = v39;
    v50 = v115;
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v113, v61, v115);
    Playlist.artworkViewModel.getter((uint64_t)v42);
    goto LABEL_24;
  }
  if (v40 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v54 = v111;
    v55 = v110;
    v62 = v39;
    v50 = v112;
    (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v110, v62, v112);
    v57 = (void (*)(uint64_t))&RadioShow.artwork.getter;
    goto LABEL_22;
  }
  if (v40 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v54 = v108;
    v55 = v107;
    v63 = v39;
    v50 = v109;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v107, v63, v109);
    v57 = (void (*)(uint64_t))&RecordLabel.artwork.getter;
    goto LABEL_22;
  }
  if (v40 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v54 = v105;
    v55 = v104;
    v64 = v39;
    v50 = v106;
    (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v104, v64, v106);
    v57 = (void (*)(uint64_t))&SocialProfile.artwork.getter;
    v60 = (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_23;
  }
  if (v40 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v54 = v102;
    v55 = v101;
    v65 = v39;
    v50 = v103;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v65, v103);
    v57 = (void (*)(uint64_t))&Song.artwork.getter;
    goto LABEL_22;
  }
  if (v40 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v45 = v99;
    v44 = v98;
    v46 = v100;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v98, v39, v100);
    v47 = (void (*)(uint64_t))&Station.artwork.getter;
    v53 = (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_14;
  }
  if (v40 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v45 = v96;
    v44 = v95;
    v46 = v97;
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v39, v97);
    TVEpisode.artworkViewModel.getter(v42);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v44, v46);
  }
  if (v40 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v45 = v93;
    v44 = v92;
    v46 = v94;
    (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v39, v94);
    v47 = (void (*)(uint64_t))&TVSeason.artwork.getter;
    goto LABEL_13;
  }
  if (v40 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v45 = v90;
    v44 = v89;
    v46 = v91;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v39, v91);
    v47 = (void (*)(uint64_t))&TVShow.artwork.getter;
    goto LABEL_13;
  }
  if (v40 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v45 = v87;
    v44 = v86;
    v46 = v88;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v86, v39, v88);
    v47 = (void (*)(uint64_t))&UploadedAudio.artwork.getter;
    goto LABEL_13;
  }
  if (v40 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    v45 = v84;
    v44 = v83;
    v46 = v85;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v39, v85);
    v47 = (void (*)(uint64_t))&UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  if (v40 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 96))(v39, v33);
    swift_bridgeObjectRelease();
    v66 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v42, 1, 1, v66);
  }
  else
  {
    if (qword_1011DE0F0 != -1)
      swift_once(&qword_1011DE0F0, sub_100C39C4C);
    v67 = type metadata accessor for Logger(0);
    sub_100048B14(v67, (uint64_t)static Logger.artwork);
    v68 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v82, v134, v33);
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.fault.getter(v70);
    if (os_log_type_enabled(v69, v71))
    {
      v72 = swift_slowAlloc(22, -1);
      v134 = swift_slowAlloc(64, -1);
      v135 = v134;
      *(_DWORD *)v72 = 136315394;
      *(_QWORD *)(v72 + 4) = sub_100BBDE38((char *)0xD000000000000010, (char *)0x8000000100E32610, &v135);
      *(_WORD *)(v72 + 12) = 2080;
      v73 = sub_100BBE218();
      v74 = v82;
      v75 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v33, v73);
      *(_QWORD *)(v72 + 14) = sub_100BBDE38(v75, v76, &v135);
      v77 = swift_bridgeObjectRelease();
      v78 = *(void (**)(char *, uint64_t, __n128))(v34 + 8);
      v78(v74, v33, v77);
      _os_log_impl((void *)&_mh_execute_header, v69, v71, "Unhandled case for %s: %s", (uint8_t *)v72, 0x16u);
      v79 = v134;
      swift_arrayDestroy(v134, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v72, -1, -1);
    }
    else
    {
      v78 = *(void (**)(char *, uint64_t, __n128))(v34 + 8);
      ((void (*)(char *, uint64_t))v78)(v82, v33);
    }

    v80 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v42, 1, 1, v80);
    return ((uint64_t (*)(char *, uint64_t))v78)(v39, v33);
  }
}

uint64_t ArtworkImage.ViewModel.image(for:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 32) = v2;
  *(double *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  v4 = sub_100007E8C(&qword_1011DEFB0);
  *(_QWORD *)(v3 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Artwork.CropStyle(0);
  *(_QWORD *)(v3 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v3 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 80) = v8;
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BBD504, 0, 0);
}

uint64_t sub_100BBD504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), v4, *(_QWORD *)(v0 + 72));
  v5 = type metadata accessor for ArtworkImage.ViewModel(0);
  sub_10004A160(v4 + *(int *)(v5 + 20), v3, &qword_1011DEFB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_1011DE0E0 != -1)
      swift_once(&qword_1011DE0E0, sub_100C39A7C);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 48);
    v10 = sub_100048B14(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_10004FF60(v9, &qword_1011DEFB0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  if (qword_1011DE0E8 != -1)
    swift_once(&qword_1011DE0E8, sub_100C39AE8);
  v11 = type metadata accessor for Artwork.ImageFormat(0);
  v12 = sub_100048B14(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  v13 = (_QWORD *)swift_task_alloc(dword_1011DEFCC);
  *(_QWORD *)(v0 + 96) = v13;
  *v13 = v0;
  v13[1] = sub_100BBD674;
  return Artwork.image(for:cropStyle:format:)(*(_QWORD *)(v0 + 64), v12, *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100BBD674(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 96);
  v5 = *v2;
  *(_QWORD *)(v5 + 104) = v1;
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v5 + 80);
  v6 = *(_QWORD *)(v5 + 88);
  v9 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(v5 + 72);
  v10 = *(_QWORD *)(v5 + 48);
  v11 = *(_QWORD *)(v5 + 56);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 64), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_100BBD770, 0, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 40);
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 64), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100BBD770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Artwork.image(for:cropStyle:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  v6 = sub_100007E8C(&qword_1011DEFD0);
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007E8C(&qword_1011DEFB0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BBD844, 0, 0);
}

uint64_t sub_100BBD844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v5, "displayScale");
  v7 = v6;

  v8 = type metadata accessor for Artwork.CropStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  v10 = type metadata accessor for Artwork.ImageFormat(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v3, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v1, 0, 1, v10);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)[1]);
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = sub_100BBD980;
  return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 56), 0, 0, *(double *)(v0 + 16), *(double *)(v0 + 24), 1.0 / v7);
}

uint64_t sub_100BBD980(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *v2;
  *(_QWORD *)(v5 + 80) = v1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 64);
  sub_10004FF60(v6, &qword_1011DEFD0);
  sub_10004FF60(v7, &qword_1011DEFB0);
  if (v1)
    return swift_task_switch(sub_100BBDA34, 0, 0);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_100BBDA34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BBDA70(double a1, double a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1011DEFC4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1002A7CC4;
  return ArtworkImage.ViewModel.image(for:)(a1, a2);
}

uint64_t ArtworkImageFetching<>.image(for:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  v6 = sub_100007E8C(&qword_1011DEFB0);
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Artwork.CropStyle(0);
  *(_QWORD *)(v5 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Artwork(0);
  *(_QWORD *)(v5 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 96) = v10;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BBDB80, 0, 0);
}

uint64_t sub_100BBDB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_1011DE0E0 != -1)
      swift_once(&qword_1011DE0E0, sub_100C39A7C);
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    v10 = sub_100048B14(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_10004FF60(v9, &qword_1011DEFB0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  if (qword_1011DE0E8 != -1)
    swift_once(&qword_1011DE0E8, sub_100C39AE8);
  v11 = type metadata accessor for Artwork.ImageFormat(0);
  v12 = sub_100048B14(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  v13 = (_QWORD *)swift_task_alloc(dword_1011DEFCC);
  *(_QWORD *)(v0 + 112) = v13;
  *v13 = v0;
  v13[1] = sub_100BBDCF0;
  return Artwork.image(for:cropStyle:format:)(*(_QWORD *)(v0 + 80), v12, *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100BBDCF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(*v2 + 112);
  v5 = *v2;
  *(_QWORD *)(v5 + 120) = v1;
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v5 + 96);
  v6 = *(_QWORD *)(v5 + 104);
  v9 = *(_QWORD *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 88);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(_QWORD *)(v5 + 72);
  if (v1)
  {
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 80), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_100BBDDEC, 0, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v5 + 56);
    (*(void (**)(_QWORD, uint64_t))(v11 + 8))(*(_QWORD *)(v5 + 80), v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
  }
}

uint64_t sub_100BBDDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_100BBDE38(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_100BBDF08(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10004FA40((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10004FA40((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(v12);
  return v7;
}

char *sub_100BBDF08(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100BBE004(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

char *sub_100BBE004(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_100BBE098(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100BBE130(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_100BBE130((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_100BBE098(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100BDC854(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *sub_100BBE130(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DEFF0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_100BBE218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DEFB8;
  if (!qword_1011DEFB8)
  {
    v1 = type metadata accessor for GenericMusicItem(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for GenericMusicItem, v1);
    atomic_store(result, (unint64_t *)&qword_1011DEFB8);
  }
  return result;
}

Swift::Bool __swiftcall Text.StringOption.evaluate(_:)(Swift::String a1)
{
  uint64_t v1;

  v1 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0)
    v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  return v1 != 0;
}

uint64_t Text.init(optional:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  unint64_t v9;
  _QWORD v10[3];

  if (!a2)
  {
    v7 = a3;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v6 = sub_100BBF200(a3, a1, a2);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  if ((v6 & 1) == 0)
  {
    v7 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  v10[0] = a1;
  v10[1] = a2;
  v9 = sub_100BBF2FC();
  return Text.init<A>(_:)(v10, &type metadata for String, v9);
}

uint64_t static Edge.Set.on(_:)(unsigned int a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v2 = Edge.Set.init(rawValue:)(0);
  v3 = static Axis.Set.horizontal.getter();
  v4 = ((uint64_t (*)(void))Axis.Set.init(rawValue:))();
  if (Axis.Set.init(rawValue:)(v4 & a1) == v3)
  {
    v5 = static Edge.Set.leading.getter();
    v6 = static Edge.Set.trailing.getter();
    v7 = Edge.Set.init(rawValue:)(0);
    v8 = Edge.Set.init(rawValue:)(v7);
    if (Edge.Set.init(rawValue:)(v8 & v5) != v5)
      v7 = Edge.Set.init(rawValue:)(v7 | v5);
    v9 = Edge.Set.init(rawValue:)(v7);
    if (Edge.Set.init(rawValue:)(v9 & v6) != v6)
      LODWORD(v7) = Edge.Set.init(rawValue:)(v7 | v6);
    v10 = Edge.Set.init(rawValue:)(v2);
    if (Edge.Set.init(rawValue:)(v10 & v7) != v7)
      v2 = Edge.Set.init(rawValue:)(v7 | v2);
  }
  v11 = static Axis.Set.vertical.getter();
  v12 = v11;
  v13 = Axis.Set.init(rawValue:)(v11);
  if (Axis.Set.init(rawValue:)(v13 & a1) != v12)
    return v2;
  v14 = static Edge.Set.top.getter();
  v15 = static Edge.Set.bottom.getter();
  v16 = Edge.Set.init(rawValue:)(0);
  v17 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v17 & v14) != v14)
    v16 = Edge.Set.init(rawValue:)(v16 | v14);
  v18 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v18 & v15) != v15)
    LODWORD(v16) = Edge.Set.init(rawValue:)(v16 | v15);
  v19 = Edge.Set.init(rawValue:)(v2);
  if (Edge.Set.init(rawValue:)(v19 & v16) != v16)
    return Edge.Set.init(rawValue:)(v16 | v2);
  else
    return v2;
}

double EdgeInsets.init(_:length:)(uint64_t a1, double a2)
{
  unsigned int v3;
  unsigned int v4;

  if ((a1 & 1) != 0)
    v3 = static Axis.Set.vertical.getter(a1);
  else
    v3 = static Axis.Set.horizontal.getter(a1);
  v4 = static Edge.Set.on(_:)(v3);
  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v4, a2);
}

double EdgeInsets.init(_:length:)(unsigned int a1, double a2)
{
  unsigned int v3;

  v3 = static Edge.Set.on(_:)(a1);
  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v3, a2);
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

void EdgeInsets.affecting(_:)(uint64_t a1)
{
  unsigned int v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;

  v2 = static Edge.Set.all.getter();
  _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(v2, 0.0);
  v3 = 0;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    while (v7)
      v7 &= v7 - 1;
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v8)
      return;
    v10 = *(_QWORD *)(v4 + 8 * v9);
    ++v3;
    if (!v10)
    {
      v3 = v9 + 1;
      if (v9 + 1 >= v8)
        return;
      v10 = *(_QWORD *)(v4 + 8 * v3);
      if (!v10)
      {
        v3 = v9 + 2;
        if (v9 + 2 >= v8)
          return;
        v10 = *(_QWORD *)(v4 + 8 * v3);
        if (!v10)
        {
          v3 = v9 + 3;
          if (v9 + 3 >= v8)
            return;
          v10 = *(_QWORD *)(v4 + 8 * v3);
          if (!v10)
          {
            v3 = v9 + 4;
            if (v9 + 4 >= v8)
              return;
            v10 = *(_QWORD *)(v4 + 8 * v3);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_23:
    v7 = (v10 - 1) & v10;
  }
  v11 = v9 + 5;
  if (v11 >= v8)
    return;
  v10 = *(_QWORD *)(v4 + 8 * v11);
  if (v10)
  {
    v3 = v11;
    goto LABEL_23;
  }
  while (1)
  {
    v3 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v3 >= v8)
      return;
    v10 = *(_QWORD *)(v4 + 8 * v3);
    ++v11;
    if (v10)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
}

double EdgeInsets.affecting(_:)(char a1)
{
  char v1;
  uint64_t v2;
  uint64_t inited;
  Swift::Int v4;
  double v5;
  double v6;
  _BYTE v8[40];

  v1 = a1 & 1;
  v2 = sub_100007E8C(&qword_1011DEFF8);
  inited = swift_initStackObject(v2, v8);
  *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
  *(_BYTE *)(inited + 32) = v1;
  v4 = sub_100BBF408(inited);
  swift_setDeallocating(inited);
  EdgeInsets.affecting(_:)(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  return v6;
}

double EdgeInsets.value(for:)(char a1, double a2, double a3, double a4, double a5)
{
  double result;
  double v6;

  result = a2 + a4;
  v6 = a3 + a5;
  if ((a1 & 1) == 0)
    return v6;
  return result;
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

double sub_100BBE79C()
{
  double result;

  result = 0.0;
  static EdgeInsets.zero = 0u;
  *(_OWORD *)&qword_10124F278 = 0u;
  return result;
}

__int128 *EdgeInsets.zero.unsafeMutableAddressor()
{
  if (qword_1011DDEE0 != -1)
    swift_once(&qword_1011DDEE0, sub_100BBE79C);
  return &static EdgeInsets.zero;
}

double static EdgeInsets.zero.getter()
{
  if (qword_1011DDEE0 != -1)
    swift_once(&qword_1011DDEE0, sub_100BBE79C);
  return *(double *)&static EdgeInsets.zero;
}

double CGSize.length(for:)(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

BOOL CGSize.fitsWithin(_:)(double a1, double a2, double a3, double a4)
{
  return a4 <= a2 && a3 <= a1;
}

BOOL Axis.orthogonal.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.isOrthogonal(to:)(char a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 1;
  }
  else if ((a1 & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t Optional<A>.isOrthogonal(to:)(char a1, char a2)
{
  if (a2 == 2)
    return 1;
  if ((a2 & 1) != 0)
  {
    if ((a1 & 1) == 0)
      return 1;
  }
  else if ((a1 & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t Axis.Set.init(_:)(char a1)
{
  if ((a1 & 1) != 0)
    return static Axis.Set.vertical.getter();
  else
    return static Axis.Set.horizontal.getter();
}

uint64_t View.always(perform:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  a1();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
}

double DynamicTypeSize.scaledValue(_:relativeTo:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  uint64_t v15;

  sub_100007E8C(&qword_1011DF000);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", a1);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v2, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  v10 = (void *)UIContentSizeCategory.init(_:)(v6);
  v11 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v10);
  objc_msgSend(v7, "scaledValueForValue:compatibleWithTraitCollection:", v11, a2);
  v13 = v12;

  return v13;
}

uint64_t static Color.random(opacity:)(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  double v11;
  __n128 v12;
  __n128 v13;
  uint64_t v15;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1002A7D18(0x20000000000001uLL);
  if (v6 == 0x20000000000000)
    v7 = 1.0;
  else
    v7 = (double)v6 * 1.11022302e-16 * 0.5 + 0.5;
  v8 = sub_1002A7D18(0x20000000000001uLL);
  if (v8 == 0x20000000000000)
    v9 = 1.0;
  else
    v9 = (double)v8 * 1.11022302e-16 * 0.5 + 0.5;
  v10 = sub_1002A7D18(0x20000000000001uLL);
  if (v10 == 0x20000000000000)
    v11 = 1.0;
  else
    v11 = (double)v10 * 1.11022302e-16 * 0.5 + 0.5;
  v12 = ((__n128 (*)(char *, _QWORD, uint64_t))*(_QWORD *)(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  v12.n128_f64[0] = v7;
  v13.n128_f64[0] = v11;
  return Color.init(_:red:green:blue:opacity:)(v5, v12, v9, v13, a1);
}

uint64_t RoundedRectangle.outset(horizontal:vertical:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int *v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for LayoutDirection(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v21 - v12;
  type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005B704(v4, (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v16 = enum case for LayoutDirection.leftToRight(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v17(v13, enum case for LayoutDirection.leftToRight(_:), v8);
  sub_10005B704((uint64_t)v15, a1, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v18 = (int *)_s21OmnidirectionalOutsetVMa(0);
  *(double *)(a1 + v18[5]) = a3;
  *(double *)(a1 + v18[6]) = a2;
  *(double *)(a1 + v18[7]) = a3;
  *(double *)(a1 + v18[8]) = a2;
  v17(v11, v16, v8);
  LOBYTE(v16) = static LayoutDirection.== infix(_:_:)(v13, v11);
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v13, v8);
  sub_100798608((uint64_t)v15);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v8);
  *(_QWORD *)(a1 + v18[9]) = (v16 & 1) == 0;
  return result;
}

uint64_t RoundedRectangle.outset(top:leading:bottom:trailing:layoutDirection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;

  v7 = v6;
  v14 = type metadata accessor for LayoutDirection(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v25 - v18;
  type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005B704(v7, (uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a1, v14);
  sub_10005B704((uint64_t)v21, a2, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v22 = (int *)_s21OmnidirectionalOutsetVMa(0);
  *(double *)(a2 + v22[5]) = a3;
  *(double *)(a2 + v22[6]) = a4;
  *(double *)(a2 + v22[7]) = a5;
  *(double *)(a2 + v22[8]) = a6;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for LayoutDirection.leftToRight(_:), v14);
  LOBYTE(a1) = static LayoutDirection.== infix(_:_:)(v19, v17);
  v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v19, v14);
  sub_100798608((uint64_t)v21);
  result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v14);
  *(_QWORD *)(a2 + v22[9]) = (a1 & 1) == 0;
  return result;
}

double sub_100BBEECC@<D0>(int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  double result;

  v5 = v3;
  sub_10005B704(v5, a2, _s21OmnidirectionalOutsetVMa);
  v8 = a1[6];
  *(double *)(a2 + a1[5]) = *(double *)(a2 + a1[5]) - a3;
  *(double *)(a2 + v8) = *(double *)(a2 + v8) - a3;
  v9 = a1[8];
  *(double *)(a2 + a1[7]) = *(double *)(a2 + a1[7]) - a3;
  result = *(double *)(a2 + v9) - a3;
  *(double *)(a2 + v9) = result;
  return result;
}

double sub_100BBEF44@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  char v27;

  v4 = v2;
  v6 = type metadata accessor for RoundedCornerStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect.outset(by:for:)(*(double *)((char *)v4 + a1[5]), *(double *)((char *)v4 + a1[6]), *(double *)((char *)v4 + a1[7]), *(double *)((char *)v4 + a1[8]));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = *v4;
  v22 = v4[1];
  sub_10005B704((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, &v12[*(int *)(v10 + 20)], v6);
  Path.init(roundedRect:cornerSize:style:)(v26, v9, v14, v16, v18, v20, v21, v22);
  result = *(double *)v26;
  v24 = v26[1];
  *(_OWORD *)a2 = v26[0];
  *(_OWORD *)(a2 + 16) = v24;
  *(_BYTE *)(a2 + 32) = v27;
  return result;
}

uint64_t sub_100BBF0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100048748(&qword_1011DF0E0, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEAC88);
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100BBF148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100048748(&qword_1011DF0E0, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEAC88);
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100BBF1B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100048748(&qword_1011DF0E0, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEAC88);
  return Shape.body.getter(a1, v2);
}

uint64_t sub_100BBF200(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;

  v3 = 0;
  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(result - 24);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v11 = a2 & 0xFFFFFFFFFFFFLL;
  while (1)
  {
    if (!v9)
    {
      v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v12 >= v10)
        return 1;
      v9 = *(_QWORD *)(result + 8 * v12);
      ++v3;
      if (!v9)
      {
        v3 = v12 + 1;
        if (v12 + 1 >= v10)
          return 1;
        v9 = *(_QWORD *)(result + 8 * v3);
        if (!v9)
        {
          v3 = v12 + 2;
          if (v12 + 2 >= v10)
            return 1;
          v9 = *(_QWORD *)(result + 8 * v3);
          if (!v9)
          {
            v3 = v12 + 3;
            if (v12 + 3 >= v10)
              return 1;
            v9 = *(_QWORD *)(result + 8 * v3);
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_7:
    v9 &= v9 - 1;
    if (!v11)
      return 0;
  }
  v13 = v12 + 4;
  if (v13 >= v10)
    return 1;
  v9 = *(_QWORD *)(result + 8 * v13);
  if (v9)
  {
    v3 = v13;
    goto LABEL_7;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v10)
      return 1;
    v9 = *(_QWORD *)(result + 8 * v3);
    ++v13;
    if (v9)
      goto LABEL_7;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_100BBF2FC()
{
  unint64_t result;

  result = qword_1011E3A70;
  if (!qword_1011E3A70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1011E3A70);
  }
  return result;
}

double _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(unsigned int a1, double a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  double v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v4 = static Edge.Set.top.getter();
  v5 = v4;
  v6 = Edge.Set.init(rawValue:)(v4);
  if (Edge.Set.init(rawValue:)(v6 & a1) == v5)
    v7 = a2;
  else
    v7 = 0.0;
  v8 = static Edge.Set.leading.getter();
  v9 = Edge.Set.init(rawValue:)(v8);
  Edge.Set.init(rawValue:)(v9 & a1);
  v10 = static Edge.Set.bottom.getter();
  v11 = Edge.Set.init(rawValue:)(v10);
  Edge.Set.init(rawValue:)(v11 & a1);
  v12 = static Edge.Set.trailing.getter();
  v13 = Edge.Set.init(rawValue:)(v12);
  Edge.Set.init(rawValue:)(v13 & a1);
  return v7;
}

Swift::Int sub_100BBF408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt8 v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100007E8C(&qword_1011DF120);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
      v8 = Axis.rawValue.getter(v7);
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = Axis.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
        result = Axis.rawValue.getter(v7);
        if (v15 == result)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v17 = Axis.rawValue.getter(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
          result = Axis.rawValue.getter(v7);
          if (v17 == result)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v11) = v7;
      v18 = *(_QWORD *)(v3 + 16);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v20;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t _s21OmnidirectionalOutsetVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1011DF070;
  if (!qword_1011DF070)
    return swift_getSingletonMetadata(a1, &_s21OmnidirectionalOutsetVMn);
  return result;
}

unint64_t sub_100BBF5B4()
{
  unint64_t result;

  result = qword_1011DF008;
  if (!qword_1011DF008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Text.StringOption, &type metadata for Text.StringOption);
    atomic_store(result, (unint64_t *)&qword_1011DF008);
  }
  return result;
}

uint64_t _s12StringOptionOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BBF638 + 4 * byte_100EEAB30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BBF658 + 4 * byte_100EEAB35[v4]))();
}

_BYTE *sub_100BBF638(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BBF658(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BBF660(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BBF668(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BBF670(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BBF678(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Text.StringOption()
{
  return &type metadata for Text.StringOption;
}

uint64_t sub_100BBF694()
{
  return sub_100048748(&qword_1011DF010, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEACD8);
}

uint64_t *sub_100BBF6C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    v12 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_100BBF794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v2 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_OWORD *sub_100BBF7D8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_100BBF880(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_100BBF938(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_100BBF9E0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100BBFA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BBFA94);
}

uint64_t sub_100BBFA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100BBFAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BBFADC);
}

uint64_t sub_100BBFADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100BBFB1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for RoundedRectangle(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100BBFB9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DF0B8;
  if (!qword_1011DF0B8)
  {
    v1 = sub_100044B54(&qword_1011DF0C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1011DF0B8);
  }
  return result;
}

unint64_t sub_100BBFBEC()
{
  unint64_t result;

  result = qword_1011DF0C8;
  if (!qword_1011DF0C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_1011DF0C8);
  }
  return result;
}

uint64_t sub_100BBFC30()
{
  return sub_100048748(&qword_1011DF0D0, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEAC38);
}

uint64_t sub_100BBFC5C()
{
  return sub_100048748(&qword_1011DF0D8, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEABE8);
}

uint64_t sub_100BBFC88()
{
  return sub_100048748(&qword_1011DF0E0, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEAC88);
}

uint64_t sub_100BBFCB4()
{
  return sub_100048748(&qword_1011DF010, _s21OmnidirectionalOutsetVMa, (uint64_t)&unk_100EEACD8);
}

Swift::Int sub_100BBFCE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  Swift::UInt64 v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100007E8C(&qword_1011DF110);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(double *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v20, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(0);
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = *(_QWORD *)&v7;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(double *)(v15 + 8 * v11) == v7)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(double *)(v15 + 8 * v11) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(double *)(v15 + 8 * v11) = v7;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100BBFE34(uint64_t a1)
{
  sub_100BBFE68(a1, (uint64_t *)&unk_1011E4370, (void (*)(_QWORD))sub_100BC0440);
}

Swift::Int sub_100BBFE48(uint64_t a1)
{
  return sub_100047594(a1, &qword_1011DF0E8);
}

void sub_100BBFE54(uint64_t a1)
{
  sub_100BBFE68(a1, &qword_1011E3C90, (void (*)(_QWORD))type metadata accessor for SyncedLyricsLineView);
}

void sub_100BBFE68(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  id v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v4 = a1;
  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100007E8C(a2);
      v7 = (_QWORD *)static _SetStorage.allocate(capacity:)(v6);
      if (!v5)
        goto LABEL_4;
LABEL_11:
      if (v4 < 0)
        v10 = v4;
      else
        v10 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease();
      if (!v8)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
  }
  v7 = &_swiftEmptySetSingleton;
  if (v5)
    goto LABEL_11;
LABEL_4:
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    return;
LABEL_15:
  v11 = (char *)(v7 + 7);
  v48 = v8;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v12 = 0;
    v45 = v4;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v4);
      v14 = __OFADD__(v12++, 1);
      if (v14)
      {
        __break(1u);
        goto LABEL_43;
      }
      v15 = v13;
      v16 = NSObject._rawHashValue(seed:)(v7[5]);
      v17 = -1 << *((_BYTE *)v7 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      v20 = *(_QWORD *)&v11[8 * (v18 >> 6)];
      v21 = 1 << v18;
      if (((1 << v18) & v20) != 0)
      {
        a3(0);
        v22 = *(id *)(v7[6] + 8 * v18);
        v23 = static NSObject.== infix(_:_:)(v22, v15);

        if ((v23 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v15);
          v4 = v45;
          goto LABEL_18;
        }
        v24 = ~v17;
        while (1)
        {
          v18 = (v18 + 1) & v24;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)&v11[8 * (v18 >> 6)];
          v21 = 1 << v18;
          if ((v20 & (1 << v18)) == 0)
            break;
          v25 = *(id *)(v7[6] + 8 * v18);
          v26 = static NSObject.== infix(_:_:)(v25, v15);

          if ((v26 & 1) != 0)
            goto LABEL_17;
        }
        v4 = v45;
      }
      *(_QWORD *)&v11[8 * v19] = v21 | v20;
      *(_QWORD *)(v7[6] + 8 * v18) = v15;
      v27 = v7[2];
      v14 = __OFADD__(v27, 1);
      v28 = v27 + 1;
      if (v14)
        goto LABEL_44;
      v7[2] = v28;
LABEL_18:
      if (v12 == v48)
        return;
    }
  }
  v29 = 0;
  v46 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v29 != v46)
  {
    v30 = v7[5];
    v31 = *(id *)(v4 + 32 + 8 * v29);
    v32 = NSObject._rawHashValue(seed:)(v30);
    v33 = -1 << *((_BYTE *)v7 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
    v37 = 1 << v34;
    if (((1 << v34) & v36) != 0)
    {
      a3(0);
      v38 = *(id *)(v7[6] + 8 * v34);
      v39 = static NSObject.== infix(_:_:)(v38, v31);

      if ((v39 & 1) != 0)
        goto LABEL_30;
      v40 = ~v33;
      v34 = (v34 + 1) & v40;
      v35 = v34 >> 6;
      v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
      v37 = 1 << v34;
      if ((v36 & (1 << v34)) != 0)
      {
        while (1)
        {
          v41 = *(id *)(v7[6] + 8 * v34);
          v42 = static NSObject.== infix(_:_:)(v41, v31);

          if ((v42 & 1) != 0)
            break;
          v34 = (v34 + 1) & v40;
          v35 = v34 >> 6;
          v36 = *(_QWORD *)&v11[8 * (v34 >> 6)];
          v37 = 1 << v34;
          if ((v36 & (1 << v34)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v8 = v48;
        goto LABEL_31;
      }
LABEL_38:
      v8 = v48;
    }
    *(_QWORD *)&v11[8 * v35] = v37 | v36;
    *(_QWORD *)(v7[6] + 8 * v34) = v31;
    v43 = v7[2];
    v14 = __OFADD__(v43, 1);
    v44 = v43 + 1;
    if (v14)
      goto LABEL_45;
    v7[2] = v44;
LABEL_31:
    if (++v29 == v8)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

void *sub_100BC01CC(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v3 = type metadata accessor for Calendar.Component(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100007E8C(&qword_1011DF0F0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v4 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v4 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v3);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100048748(&qword_1011DF0F8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v3, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v3);
          v22 = sub_100048748(&qword_1011DF100, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v3, v22);
          v24 = v4;
          v25 = *(void (**)(char *, uint64_t))(v4 + 8);
          v25(v6, v3);
          if ((v23 & 1) != 0)
          {
            v25(v8, v3);
            v4 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v4 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v3);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_100BC0434(uint64_t a1)
{
  return sub_100047594(a1, &qword_1011DF108);
}

unint64_t sub_100BC0440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DF118;
  if (!qword_1011DF118)
  {
    v1 = objc_opt_self(MSVLyricsAgent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DF118);
  }
  return result;
}

uint64_t sub_100BC047C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, qword_10124F288);
  sub_100048B14(v0, (uint64_t)qword_10124F288);
  return static Logger.music(_:)(0x75426C6F626D7953, 0xEC0000006E6F7474);
}

unint64_t SymbolButton.Configuration.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  void *v30;
  int v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  void *v39;
  Swift::String v40;
  void *v41;
  id v42;
  Swift::String v43;
  void *v44;
  Swift::String v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  double v50;
  char v51;
  uint64_t v52;
  void *v53;
  double v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  void *v59;
  double v60;
  id v61;
  uint64_t v62;
  void *v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  Swift::String v71;
  void *v72;
  Swift::String v73;
  void *v74;
  Swift::String v75;
  void *v76;
  Swift::String v77;
  void *v78;
  uint64_t v79;
  Swift::String v80;
  void *v81;
  Swift::String v82;
  void *v83;
  uint64_t v84;
  Swift::String v85;
  void *v86;
  Swift::String v87;
  void *v88;
  char v89;
  uint64_t v90;
  Swift::String v91;
  void *v92;
  Swift::String v93;
  void *v94;
  Swift::String v95;
  void *v96;
  Swift::String v97;
  void *v98;
  id v99;
  Swift::String v100;
  void *v101;
  Swift::String v102;
  void *v103;
  Swift::String v104;
  Swift::String v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  void *v109;
  void *v110;
  void *v111;
  double v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  Swift::String v123;
  void *v124;
  Swift::String v125;
  void *v126;
  uint64_t v127;
  Swift::String v128;
  void *v129;
  Swift::String v130;
  void *v131;
  Swift::String v132;
  void *v133;
  Swift::String v134;
  void *v135;
  id v136;
  Swift::String v137;
  void *v138;
  Swift::String v139;
  void *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  Swift::String v144;
  void *v145;
  Swift::String v146;
  Swift::String v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  Swift::String v152;
  void *v153;
  uint64_t v154;
  double v155;
  id v156;
  Swift::String v157;
  Swift::String v158;
  void *v159;
  Swift::String v160;
  void *v161;
  id v162;
  Swift::String v163;
  void *v164;
  Swift::String v165;
  void *v166;
  Swift::String v167;
  Swift::String v168;
  void *v169;
  Swift::String v170;
  void *v171;
  int v172;
  uint64_t v173;
  id v174;
  id v175;
  Swift::String v176;
  void *v177;
  Swift::String v178;
  void *v179;
  Swift::String v180;
  int *v181;
  uint64_t v182;
  id v183;
  void (**v184)(char *, uint64_t, id);
  Swift::String v185;
  char *v186;
  __n128 v187;
  char *v188;
  Swift::String v189;
  void *v190;
  Swift::String v191;
  void *v192;
  __n128 v193;
  void *v194;
  Swift::String v195;
  void *v196;
  void *v197;
  void *v198;
  uint64_t v199;
  id v200;
  Swift::String v201;
  id v202;
  id v203;
  id v204;
  uint64_t v205;
  void *v206;
  void *v207;
  Swift::String v208;
  Swift::String v209;
  void *v210;
  id v211;
  id v212;
  id v213;
  uint64_t v214;
  void *v215;
  void *v216;
  Swift::String v217;
  Swift::String v218;
  void *v219;
  void (**v220)(char *, uint64_t, id);
  void (**v221)(char *, uint64_t, id);
  id v222;
  uint64_t v223;
  void *v224;
  void *v225;
  Swift::String v226;
  Swift::String v227;
  void *v228;
  Swift::String v229;
  void *v230;
  Swift::String v231;
  void *v232;
  Swift::String v233;
  Swift::String v234;
  void *v235;
  Swift::String v236;
  uint64_t v237;
  void *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  id v245;
  id v246;
  Swift::String v247;
  void *v248;
  Swift::String v249;
  void *v250;
  uint64_t v251;
  Swift::String v252;
  uint64_t *v253;
  void *v254;
  Swift::String v255;
  uint64_t v256;
  uint64_t v257;
  double v258;
  id v259;
  Swift::String v260;
  Swift::String v261;
  void *v262;
  Swift::String v263;
  void *v264;
  Swift::String v265;
  void *v266;
  Swift::String v267;
  void *v268;
  id v269;
  Swift::String v270;
  void *v271;
  Swift::String v272;
  void *v273;
  Swift::String v274;
  unsigned __int8 *v275;
  int v276;
  void *v277;
  void *v278;
  int v279;
  Swift::String v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  Swift::String v284;
  void *v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  id v289;
  Swift::String v290;
  void *v291;
  Swift::String v292;
  void *v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  Swift::String v298;
  void *v299;
  Swift::String v300;
  void *v301;
  Swift::String v302;
  Swift::String v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  Swift::String v307;
  void *v308;
  Swift::String v309;
  Swift::String v310;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  id v318;
  char *v319;
  char *v320;
  uint64_t v321;
  void (**v322)(char *, uint64_t, id);
  id v323;
  uint64_t v324;
  int *v325;
  Swift::String v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  Swift::String v331;
  unint64_t v332;
  unint64_t v333;

  v1 = v0;
  v2 = sub_100007E8C(&qword_1011E6620);
  __chkstk_darwin(v2);
  v321 = (uint64_t)&v312 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)type metadata accessor for UIView.Corner(0);
  v322 = (void (**)(char *, uint64_t, id))*(v4 - 1);
  v323 = v4;
  v5 = __chkstk_darwin(v4);
  v319 = (char *)&v312 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v320 = (char *)&v312 - v7;
  v332 = 0xD00000000000001CLL;
  v333 = 0x8000000100E548D0;
  v326._countAndFlagsBits = 0;
  v326._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v326._object);
  v326._countAndFlagsBits = 0xD000000000000017;
  v326._object = (void *)0x8000000100E548F0;
  v8 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  v9._countAndFlagsBits = Double.description.getter(*(double *)(v0 + v8[12]));
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 10;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = v326._object;
  String.append(_:)(v326);
  swift_bridgeObjectRelease(v12);
  v326._countAndFlagsBits = 0;
  v326._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(v326._object);
  v326._countAndFlagsBits = 0x6D756D696E696D20;
  v326._object = (void *)0xEF203A20657A6953;
  v13._countAndFlagsBits = CGSize.description.getter(*(double *)(v1 + v8[13]), *(double *)(v1 + v8[13] + 8));
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 10;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = v326._object;
  String.append(_:)(v326);
  swift_bridgeObjectRelease(v16);
  v17 = v0 + v8[14];
  if ((*(_BYTE *)(v17 + 16) & 1) == 0)
  {
    v19 = *(double *)v17;
    v18 = *(double *)(v17 + 8);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v326._object);
    v326._countAndFlagsBits = 0xD000000000000014;
    v326._object = (void *)0x8000000100E54CB0;
    v20._countAndFlagsBits = CGSize.description.getter(v19, v18);
    v21 = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v21);
    v22._countAndFlagsBits = 10;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v23);
  }
  v326._countAndFlagsBits = 0;
  v326._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v326._object);
  v331._countAndFlagsBits = 0xD000000000000011;
  v331._object = (void *)0x8000000100E54910;
  v24 = v0 + v8[15];
  v25 = *(_OWORD *)(v24 + 16);
  v326 = *(Swift::String *)v24;
  v327 = v25;
  _s3__C23NSDirectionalEdgeInsetsVMa_0(0);
  v27._countAndFlagsBits = String.init<A>(describing:)(&v326, v26);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._countAndFlagsBits = 10;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v331._object;
  String.append(_:)(v331);
  swift_bridgeObjectRelease(v30);
  v31 = *(unsigned __int8 *)(v0 + v8[19]);
  if (v31 == 2)
  {
    v32._countAndFlagsBits = 0xD00000000000001ALL;
    v32._object = (void *)0x8000000100E54930;
    String.append(_:)(v32);
  }
  else
  {
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v326._object);
    v326._countAndFlagsBits = 0xD000000000000010;
    v326._object = (void *)0x8000000100E54C90;
    if ((v31 & 1) != 0)
      v33 = 1702195828;
    else
      v33 = 0x65736C6166;
    if ((v31 & 1) != 0)
      v34 = 0xE400000000000000;
    else
      v34 = 0xE500000000000000;
    v35 = v34;
    String.append(_:)(*(Swift::String *)&v33);
    swift_bridgeObjectRelease(v34);
    v36._countAndFlagsBits = 10;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    v37 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v37);
  }
  v326._countAndFlagsBits = 0x3A206168706C6120;
  v326._object = (void *)0xE900000000000020;
  v38._countAndFlagsBits = Double.description.getter(*(double *)(v0 + v8[17]));
  v39 = v38._object;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v39);
  v40._countAndFlagsBits = 10;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  v41 = v326._object;
  String.append(_:)(v326);
  swift_bridgeObjectRelease(v41);
  v326._countAndFlagsBits = 0x203A20746E697420;
  v326._object = (void *)0xE800000000000000;
  v325 = v8;
  v331._countAndFlagsBits = *(_QWORD *)(v0 + v8[18]);
  v42 = (id)v331._countAndFlagsBits;
  v324 = sub_100007E8C(&qword_1011DED28);
  v43._countAndFlagsBits = String.init<A>(describing:)(&v331, v324);
  v44 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v44);
  v45._countAndFlagsBits = 10;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46 = v326._object;
  String.append(_:)(v326);
  swift_bridgeObjectRelease(v46);
  v47 = *(void **)(v0 + 8);
  if (v47)
  {
    v48 = *(void **)(v0 + 16);
    v49 = *(void **)(v0 + 24);
    v50 = *(double *)(v0 + 32);
    v51 = *(_BYTE *)(v0 + 40);
    v52 = *(_QWORD *)(v0 + 48);
    v316 = *(_QWORD *)(v0 + 56);
    v314 = *(_QWORD *)(v0 + 64);
    v313 = *(void **)(v0 + 72);
    LODWORD(v317) = *(unsigned __int8 *)(v0 + 80);
    v53 = *(void **)(v0 + 96);
    v315 = *(_QWORD *)(v0 + 88);
    v54 = *(double *)(v0 + 104);
    v318 = *(id *)(v0 + 112);
    v55 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    v56._countAndFlagsBits = 0x6D7953209480E220;
    v56._object = (void *)0xAE000A7B206C6F62;
    String.append(_:)(v56);
    v326._countAndFlagsBits = 0x656D616E20202020;
    v326._object = (void *)0xEB00000000203A20;
    v57._countAndFlagsBits = v55;
    v57._object = v47;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(v47);
    v58._countAndFlagsBits = 10;
    v58._object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    v59 = v326._object;
    String.append(_:)(v326);
    *(_QWORD *)&v60 = swift_bridgeObjectRelease(v59).n128_u64[0];
    if (v48)
    {
      v61 = objc_msgSend(v48, "bundlePath", v60);
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease(v326._object);
      strcpy((char *)&v326, "    bundle : ");
      HIWORD(v326._object) = -4864;
      v65._countAndFlagsBits = v62;
      v65._object = v64;
      String.append(_:)(v65);
      swift_bridgeObjectRelease(v64);
      v66._countAndFlagsBits = 10;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      v67 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v67);
    }
    strcpy((char *)&v326, "    style : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v331._countAndFlagsBits = (uint64_t)v49;
    _s3__C9TextStyleVMa_0(0);
    v69 = v68;
    v70 = v49;
    v71._countAndFlagsBits = String.init<A>(describing:)(&v331, v69);
    v72 = v71._object;
    String.append(_:)(v71);
    swift_bridgeObjectRelease(v72);
    v73._countAndFlagsBits = 10;
    v73._object = (void *)0xE100000000000000;
    String.append(_:)(v73);
    v74 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v74);
    if ((v51 & 1) == 0)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000014;
      v326._object = (void *)0x8000000100E54C70;
      v75._countAndFlagsBits = Double.description.getter(v50);
      v76 = v75._object;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(v76);
      v77._countAndFlagsBits = 10;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      v78 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v78);
    }
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v326._object);
    strcpy((char *)&v326, "    weight : ");
    HIWORD(v326._object) = -4864;
    v331._countAndFlagsBits = v52;
    type metadata accessor for SymbolWeight(0);
    v80._countAndFlagsBits = String.init<A>(describing:)(&v331, v79);
    v81 = v80._object;
    String.append(_:)(v80);
    swift_bridgeObjectRelease(v81);
    v82._countAndFlagsBits = 10;
    v82._object = (void *)0xE100000000000000;
    String.append(_:)(v82);
    v83 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v83);
    strcpy((char *)&v326, "    scale : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v331._countAndFlagsBits = v316;
    type metadata accessor for SymbolScale(0);
    v85._countAndFlagsBits = String.init<A>(describing:)(&v331, v84);
    v86 = v85._object;
    String.append(_:)(v85);
    swift_bridgeObjectRelease(v86);
    v87._countAndFlagsBits = 10;
    v87._object = (void *)0xE100000000000000;
    String.append(_:)(v87);
    v88 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v88);
    v89 = v317;
    if ((_DWORD)v317 != 255)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease(v326._object);
      strcpy((char *)&v331, "    offset : ");
      HIWORD(v331._object) = -4864;
      v326._countAndFlagsBits = v314;
      v326._object = v313;
      LOBYTE(v327) = v89 & 1;
      v90 = sub_100007E8C(&qword_1011E6B40);
      v91._countAndFlagsBits = String.init<A>(describing:)(&v326, v90);
      v92 = v91._object;
      String.append(_:)(v91);
      swift_bridgeObjectRelease(v92);
      v93._countAndFlagsBits = 10;
      v93._object = (void *)0xE100000000000000;
      String.append(_:)(v93);
      v94 = v331._object;
      String.append(_:)(v331);
      swift_bridgeObjectRelease(v94);
    }
    strcpy((char *)&v326, "    alpha : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v95._countAndFlagsBits = Double.description.getter(v54);
    v96 = v95._object;
    String.append(_:)(v95);
    swift_bridgeObjectRelease(v96);
    v97._countAndFlagsBits = 10;
    v97._object = (void *)0xE100000000000000;
    String.append(_:)(v97);
    v98 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v98);
    v326._countAndFlagsBits = 0x746E697420202020;
    v326._object = (void *)0xEB00000000203A20;
    v331._countAndFlagsBits = (uint64_t)v318;
    v99 = v318;
    v100._countAndFlagsBits = String.init<A>(describing:)(&v331, v324);
    v101 = v100._object;
    String.append(_:)(v100);
    swift_bridgeObjectRelease(v101);
    v102._countAndFlagsBits = 10;
    v102._object = (void *)0xE100000000000000;
    String.append(_:)(v102);
    v103 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v103);
    if (v53)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000018;
      v326._object = (void *)0x8000000100E54C50;
      v104._countAndFlagsBits = v315;
      v104._object = v53;
      String.append(_:)(v104);
      swift_bridgeObjectRelease(v53);
      v105._countAndFlagsBits = 10;
      v105._object = (void *)0xE100000000000000;
      String.append(_:)(v105);
      v106 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v106);
    }
    v107._countAndFlagsBits = 687392;
    v107._object = (void *)0xE300000000000000;
    String.append(_:)(v107);
  }
  else
  {
    v108._object = (void *)0x8000000100E54950;
    v108._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v108);
  }
  v109 = *(void **)(v1 + 128);
  if (v109)
  {
    v110 = *(void **)(v1 + 160);
    v317 = *(_QWORD *)(v1 + 152);
    LODWORD(v318) = *(unsigned __int8 *)(v1 + 184);
    v111 = *(void **)(v1 + 176);
    v112 = *(double *)(v1 + 168);
    v113 = *(_QWORD *)(v1 + 144);
    v114 = *(void **)(v1 + 136);
    v115 = *(_QWORD *)(v1 + 120);
    swift_bridgeObjectRetain();
    v116._object = (void *)0xAD00000A7B20656CLL;
    v116._countAndFlagsBits = 0x746954209480E220;
    String.append(_:)(v116);
    v326._countAndFlagsBits = 0x7478657420202020;
    v326._object = (void *)0xEB00000000203A20;
    v117._countAndFlagsBits = v115;
    v117._object = v109;
    String.append(_:)(v117);
    swift_bridgeObjectRelease(v109);
    v118._countAndFlagsBits = 10;
    v118._object = (void *)0xE100000000000000;
    String.append(_:)(v118);
    v119 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v119);
    strcpy((char *)&v326, "    style : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v331._countAndFlagsBits = (uint64_t)v114;
    _s3__C9TextStyleVMa_0(0);
    v121 = v120;
    v122 = v114;
    v123._countAndFlagsBits = String.init<A>(describing:)(&v331, v121);
    v124 = v123._object;
    String.append(_:)(v123);
    swift_bridgeObjectRelease(v124);
    v125._countAndFlagsBits = 10;
    v125._object = (void *)0xE100000000000000;
    String.append(_:)(v125);
    v126 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v126);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v326._object);
    strcpy((char *)&v326, "    weight : ");
    HIWORD(v326._object) = -4864;
    v331._countAndFlagsBits = v113;
    type metadata accessor for Weight(0);
    v128._countAndFlagsBits = String.init<A>(describing:)(&v331, v127);
    v129 = v128._object;
    String.append(_:)(v128);
    swift_bridgeObjectRelease(v129);
    v130._countAndFlagsBits = 10;
    v130._object = (void *)0xE100000000000000;
    String.append(_:)(v130);
    v131 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v131);
    strcpy((char *)&v326, "    alpha : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v132._countAndFlagsBits = Double.description.getter(v112);
    v133 = v132._object;
    String.append(_:)(v132);
    swift_bridgeObjectRelease(v133);
    v134._countAndFlagsBits = 10;
    v134._object = (void *)0xE100000000000000;
    String.append(_:)(v134);
    v135 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v135);
    v326._countAndFlagsBits = 0x746E697420202020;
    v326._object = (void *)0xEB00000000203A20;
    v331._countAndFlagsBits = (uint64_t)v111;
    v136 = v111;
    v137._countAndFlagsBits = String.init<A>(describing:)(&v331, v324);
    v138 = v137._object;
    String.append(_:)(v137);
    swift_bridgeObjectRelease(v138);
    v139._countAndFlagsBits = 10;
    v139._object = (void *)0xE100000000000000;
    String.append(_:)(v139);
    v140 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v140);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v326._object);
    strcpy((char *)&v326, "    hidden : ");
    HIWORD(v326._object) = -4864;
    if ((_DWORD)v318)
      v141 = 1702195828;
    else
      v141 = 0x65736C6166;
    if ((_DWORD)v318)
      v142 = 0xE400000000000000;
    else
      v142 = 0xE500000000000000;
    v143 = v142;
    String.append(_:)(*(Swift::String *)&v141);
    swift_bridgeObjectRelease(v142);
    v144._countAndFlagsBits = 10;
    v144._object = (void *)0xE100000000000000;
    String.append(_:)(v144);
    v145 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v145);
    if (v110)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000018;
      v326._object = (void *)0x8000000100E54C50;
      v146._countAndFlagsBits = v317;
      v146._object = v110;
      String.append(_:)(v146);
      swift_bridgeObjectRelease(v110);
      v147._countAndFlagsBits = 10;
      v147._object = (void *)0xE100000000000000;
      String.append(_:)(v147);
      v148 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v148);
    }
    v149 = 687392;
    v150 = 0xE300000000000000;
  }
  else
  {
    v149 = 0x1000000000000011;
    v150 = 0x8000000100E54970;
  }
  String.append(_:)(*(Swift::String *)&v149);
  v151 = *(void **)(v1 + 200);
  if (v151 == (void *)1)
  {
    v152._countAndFlagsBits = 0x1000000000000016;
    v152._object = (void *)0x8000000100E54990;
    String.append(_:)(v152);
  }
  else
  {
    v154 = *(_QWORD *)(v1 + 208);
    v153 = *(void **)(v1 + 216);
    v155 = *(double *)(v1 + 192);
    swift_bridgeObjectRetain();
    v156 = v151;
    v157._object = (void *)0x8000000100E54C30;
    v157._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v157);
    strcpy((char *)&v326, "    alpha : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v158._countAndFlagsBits = Double.description.getter(v155);
    v159 = v158._object;
    String.append(_:)(v158);
    swift_bridgeObjectRelease(v159);
    v160._countAndFlagsBits = 10;
    v160._object = (void *)0xE100000000000000;
    String.append(_:)(v160);
    v161 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v161);
    v326._countAndFlagsBits = 0x746E697420202020;
    v326._object = (void *)0xEB00000000203A20;
    v331._countAndFlagsBits = (uint64_t)v151;
    v162 = v156;
    v163._countAndFlagsBits = String.init<A>(describing:)(&v331, v324);
    v164 = v163._object;
    String.append(_:)(v163);
    swift_bridgeObjectRelease(v164);
    v165._countAndFlagsBits = 10;
    v165._object = (void *)0xE100000000000000;
    String.append(_:)(v165);
    v166 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v166);
    if (v153)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000018;
      v326._object = (void *)0x8000000100E54C50;
      v167._countAndFlagsBits = v154;
      v167._object = v153;
      String.append(_:)(v167);
      swift_bridgeObjectRelease(v153);
      v168._countAndFlagsBits = 10;
      v168._object = (void *)0xE100000000000000;
      String.append(_:)(v168);
      v169 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v169);
    }
    v170._countAndFlagsBits = 687392;
    v170._object = (void *)0xE300000000000000;
    String.append(_:)(v170);
    swift_bridgeObjectRelease(v153);

  }
  v171 = *(void **)(v1 + 288);
  if (v171)
  {
    v172 = *(_DWORD *)(v1 + 280);
    v173 = *(_QWORD *)(v1 + 272);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    v174 = v171;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v326._object);
    v331._countAndFlagsBits = 0x726F42209480E220;
    v331._object = (void *)0xAE00203A20726564;
    v326._countAndFlagsBits = v173;
    LOBYTE(v326._object) = v172 & 1;
    *(_QWORD *)&v327 = v174;
    v175 = v174;
    v176._countAndFlagsBits = String.init<A>(describing:)(&v326, &type metadata for UIView.Border);
    v177 = v176._object;
    String.append(_:)(v176);
    swift_bridgeObjectRelease(v177);
    v178._countAndFlagsBits = 10;
    v178._object = (void *)0xE100000000000000;
    String.append(_:)(v178);
    v179 = v331._object;
    String.append(_:)(v331);

    swift_bridgeObjectRelease(v179);
  }
  else
  {
    v180._object = (void *)0x8000000100E549B0;
    v180._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v180);
  }
  v181 = v325;
  v182 = v321;
  sub_100BC2030(v1 + v325[9], v321);
  v184 = v322;
  v183 = v323;
  if (((unsigned int (*)(uint64_t, uint64_t, id))v322[6])(v182, 1, v323) == 1)
  {
    sub_100BC2078(v182);
    v185._object = (void *)0x8000000100E549D0;
    v185._countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v185);
  }
  else
  {
    v186 = v320;
    v184[4](v320, v182, v183);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v187 = swift_bridgeObjectRelease(v326._object);
    v326._countAndFlagsBits = 0x726F43209480E220;
    v326._object = (void *)0xAE00203A2072656ELL;
    v188 = v319;
    ((void (*)(char *, char *, id, __n128))v184[2])(v319, v186, v183, v187);
    v189._countAndFlagsBits = String.init<A>(describing:)(v188, v183);
    v190 = v189._object;
    String.append(_:)(v189);
    swift_bridgeObjectRelease(v190);
    v191._countAndFlagsBits = 10;
    v191._object = (void *)0xE100000000000000;
    String.append(_:)(v191);
    v192 = v326._object;
    String.append(_:)(v326);
    v193 = swift_bridgeObjectRelease(v192);
    ((void (*)(char *, id, __n128))v184[1])(v186, v183, v193);
  }
  v194 = *(void **)(v1 + 224);
  if (v194 == (void *)1)
  {
    v195._countAndFlagsBits = 0x1000000000000014;
    v195._object = (void *)0x8000000100E549F0;
    String.append(_:)(v195);
  }
  else
  {
    v197 = *(void **)(v1 + 232);
    v196 = *(void **)(v1 + 240);
    v198 = *(void **)(v1 + 264);
    v321 = *(_QWORD *)(v1 + 256);
    v199 = *(unsigned __int8 *)(v1 + 248);
    swift_bridgeObjectRetain();
    v200 = v194;
    v323 = v197;
    v322 = v196;
    v201._countAndFlagsBits = 0x1000000000000010;
    v201._object = (void *)0x8000000100E54BB0;
    String.append(_:)(v201);
    if (v194)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      v202 = v200;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000017;
      v326._object = (void *)0x8000000100E54C10;
      v203 = v202;
      v204 = objc_msgSend(v203, "description");
      v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
      v207 = v206;

      v208._countAndFlagsBits = v205;
      v208._object = v207;
      String.append(_:)(v208);
      swift_bridgeObjectRelease(v207);
      v209._countAndFlagsBits = 10;
      v209._object = (void *)0xE100000000000000;
      String.append(_:)(v209);
      v210 = v326._object;
      String.append(_:)(v326);

      swift_bridgeObjectRelease(v210);
    }
    if (v197)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      v211 = v323;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000017;
      v326._object = (void *)0x8000000100E54BF0;
      v212 = v211;
      v213 = objc_msgSend(v212, "description");
      v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(v213);
      v216 = v215;

      v217._countAndFlagsBits = v214;
      v217._object = v216;
      String.append(_:)(v217);
      swift_bridgeObjectRelease(v216);
      v218._countAndFlagsBits = 10;
      v218._object = (void *)0xE100000000000000;
      String.append(_:)(v218);
      v219 = v326._object;
      String.append(_:)(v326);

      swift_bridgeObjectRelease(v219);
    }
    if (v196)
    {
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      v220 = v322;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000014;
      v326._object = (void *)0x8000000100E54BD0;
      v221 = v220;
      v222 = objc_msgSend(v221, "description");
      v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
      v225 = v224;

      v226._countAndFlagsBits = v223;
      v226._object = v225;
      String.append(_:)(v226);
      swift_bridgeObjectRelease(v225);
      v227._countAndFlagsBits = 10;
      v227._object = (void *)0xE100000000000000;
      String.append(_:)(v227);
      v228 = v326._object;
      String.append(_:)(v326);

      swift_bridgeObjectRelease(v228);
    }
    v181 = v325;
    if (v199 != 2)
    {
      strcpy((char *)&v326, "    color : ");
      BYTE5(v326._object) = 0;
      HIWORD(v326._object) = -5120;
      LOBYTE(v331._countAndFlagsBits) = v199 & 1;
      v229._countAndFlagsBits = String.init<A>(describing:)(&v331, &type metadata for SymbolButton.Material.Color);
      v230 = v229._object;
      String.append(_:)(v229);
      swift_bridgeObjectRelease(v230);
      v231._countAndFlagsBits = 10;
      v231._object = (void *)0xE100000000000000;
      String.append(_:)(v231);
      v232 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v232);
    }
    if (v198)
    {
      strcpy((char *)&v326, "    group : ");
      BYTE5(v326._object) = 0;
      HIWORD(v326._object) = -5120;
      swift_bridgeObjectRetain();
      v233._countAndFlagsBits = v321;
      v233._object = v198;
      String.append(_:)(v233);
      swift_bridgeObjectRelease(v198);
      v234._countAndFlagsBits = 10;
      v234._object = (void *)0xE100000000000000;
      String.append(_:)(v234);
      v235 = v326._object;
      String.append(_:)(v326);
      swift_bridgeObjectRelease(v235);
    }
    v236._countAndFlagsBits = 687392;
    v236._object = (void *)0xE300000000000000;
    String.append(_:)(v236);
    swift_bridgeObjectRelease(v198);

  }
  v237 = v1 + v181[10];
  v238 = *(void **)v237;
  if (*(_QWORD *)v237)
  {
    v240 = *(_QWORD *)(v237 + 40);
    v239 = *(void **)(v237 + 48);
    v242 = *(_QWORD *)(v237 + 24);
    v241 = *(_QWORD *)(v237 + 32);
    v243 = *(void **)(v237 + 8);
    v244 = *(_QWORD *)(v237 + 16);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    sub_100BC20B8(v238, (uint64_t)v243, v244, v242, v241, v240, v239);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(v326._object);
    v331._countAndFlagsBits = 0x1000000000000013;
    v331._object = (void *)0x8000000100E54B90;
    v326._countAndFlagsBits = (uint64_t)v238;
    v326._object = v243;
    *(_QWORD *)&v327 = v244;
    *((_QWORD *)&v327 + 1) = v242;
    v328 = v241;
    v329 = v240;
    v330 = v239;
    v245 = v239;
    v246 = v238;
    v247._countAndFlagsBits = String.init<A>(describing:)(&v326, &type metadata for SymbolButton.CustomView);
    v248 = v247._object;
    String.append(_:)(v247);
    swift_bridgeObjectRelease(v248);
    v249._countAndFlagsBits = 10;
    v249._object = (void *)0xE100000000000000;
    String.append(_:)(v249);
    v250 = v331._object;
    String.append(_:)(v331);
    swift_bridgeObjectRelease(v250);
    v251 = v240;
    v181 = v325;
    sub_100BBA628(v238, (uint64_t)v243, v244, v242, v241, v251, v239);
  }
  else
  {
    v252._countAndFlagsBits = 0x1000000000000017;
    v252._object = (void *)0x8000000100E54A10;
    String.append(_:)(v252);
  }
  v253 = (uint64_t *)(v1 + v181[11]);
  v254 = (void *)v253[2];
  if (v254 == (void *)1)
  {
    v255._countAndFlagsBits = 0x1000000000000011;
    v255._object = (void *)0x8000000100E54A30;
    String.append(_:)(v255);
  }
  else
  {
    v257 = *v253;
    v256 = v253[1];
    v258 = *(double *)v253;
    v259 = v254;
    v260._countAndFlagsBits = 0x646142209480E220;
    v260._object = (void *)0xAD00000A7B206567;
    String.append(_:)(v260);
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v326._object);
    v326._countAndFlagsBits = 0xD000000000000014;
    v326._object = (void *)0x8000000100E54B70;
    v261._countAndFlagsBits = Double.description.getter(v258);
    v262 = v261._object;
    String.append(_:)(v261);
    swift_bridgeObjectRelease(v262);
    v263._countAndFlagsBits = 10;
    v263._object = (void *)0xE100000000000000;
    String.append(_:)(v263);
    v264 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v264);
    strcpy((char *)&v326, "    alpha : ");
    BYTE5(v326._object) = 0;
    HIWORD(v326._object) = -5120;
    v265._countAndFlagsBits = Double.description.getter(*(double *)&v256);
    v266 = v265._object;
    String.append(_:)(v265);
    swift_bridgeObjectRelease(v266);
    v267._countAndFlagsBits = 10;
    v267._object = (void *)0xE100000000000000;
    String.append(_:)(v267);
    v268 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v268);
    v326._countAndFlagsBits = 0x746E697420202020;
    v326._object = (void *)0xEB00000000203A20;
    v331._countAndFlagsBits = (uint64_t)v254;
    v269 = v259;
    v270._countAndFlagsBits = String.init<A>(describing:)(&v331, v324);
    v271 = v270._object;
    String.append(_:)(v270);
    swift_bridgeObjectRelease(v271);
    v272._countAndFlagsBits = 10;
    v272._object = (void *)0xE100000000000000;
    String.append(_:)(v272);
    v273 = v326._object;
    String.append(_:)(v326);
    swift_bridgeObjectRelease(v273);
    v274._countAndFlagsBits = 687392;
    v274._object = (void *)0xE300000000000000;
    String.append(_:)(v274);
    sub_100974130(v257, v256, v254);
  }
  v275 = (unsigned __int8 *)(v1 + v325[16]);
  v276 = *v275;
  v277 = (void *)*((_QWORD *)v275 + 1);
  v278 = (void *)*((_QWORD *)v275 + 2);
  v279 = v275[24];
  v280._countAndFlagsBits = 0x1000000000000015;
  v280._object = (void *)0x8000000100E54A50;
  String.append(_:)(v280);
  v326._countAndFlagsBits = 0;
  v326._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v326._object);
  v326._countAndFlagsBits = 0xD00000000000001BLL;
  v326._object = (void *)0x8000000100E54A70;
  if (v276)
    v281 = 1702195828;
  else
    v281 = 0x65736C6166;
  if (v276)
    v282 = 0xE400000000000000;
  else
    v282 = 0xE500000000000000;
  v283 = v282;
  String.append(_:)(*(Swift::String *)&v281);
  swift_bridgeObjectRelease(v282);
  v284._countAndFlagsBits = 10;
  v284._object = (void *)0xE100000000000000;
  String.append(_:)(v284);
  v285 = v326._object;
  String.append(_:)(v326);
  swift_bridgeObjectRelease(v285);
  if (v277)
  {
    v326._countAndFlagsBits = 0;
    v326._object = (void *)0xE000000000000000;
    v286 = v277;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(v326._object);
    v326._countAndFlagsBits = 0xD000000000000021;
    v326._object = (void *)0x8000000100E54B40;
    v331._countAndFlagsBits = (uint64_t)v286;
    type metadata accessor for UIContentSizeCategory(0);
    v288 = v287;
    v289 = v286;
    v290._countAndFlagsBits = String.init<A>(describing:)(&v331, v288);
    v291 = v290._object;
    String.append(_:)(v290);
    swift_bridgeObjectRelease(v291);
    v292._countAndFlagsBits = 10;
    v292._object = (void *)0xE100000000000000;
    String.append(_:)(v292);
    v293 = v326._object;
    String.append(_:)(v326);

    swift_bridgeObjectRelease(v293);
    if (v278)
    {
LABEL_72:
      v326._countAndFlagsBits = 0;
      v326._object = (void *)0xE000000000000000;
      v294 = v278;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease(v326._object);
      v326._countAndFlagsBits = 0xD000000000000021;
      v326._object = (void *)0x8000000100E54B10;
      v331._countAndFlagsBits = (uint64_t)v294;
      type metadata accessor for UIContentSizeCategory(0);
      v296 = v295;
      v297 = v294;
      v298._countAndFlagsBits = String.init<A>(describing:)(&v331, v296);
      v299 = v298._object;
      String.append(_:)(v298);
      swift_bridgeObjectRelease(v299);
      v300._countAndFlagsBits = 10;
      v300._object = (void *)0xE100000000000000;
      String.append(_:)(v300);
      v301 = v326._object;
      String.append(_:)(v326);

      swift_bridgeObjectRelease(v301);
      goto LABEL_75;
    }
  }
  else
  {
    v302._countAndFlagsBits = 0xD00000000000002DLL;
    v302._object = (void *)0x8000000100E54A90;
    String.append(_:)(v302);
    if (v278)
      goto LABEL_72;
  }
  v303._countAndFlagsBits = 0xD00000000000002DLL;
  v303._object = (void *)0x8000000100E54AC0;
  String.append(_:)(v303);
LABEL_75:
  v326._countAndFlagsBits = 0;
  v326._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v326._object);
  v326._countAndFlagsBits = 0xD00000000000001ELL;
  v326._object = (void *)0x8000000100E54AF0;
  if (v279)
    v304 = 1702195828;
  else
    v304 = 0x65736C6166;
  if (v279)
    v305 = 0xE400000000000000;
  else
    v305 = 0xE500000000000000;
  v306 = v305;
  String.append(_:)(*(Swift::String *)&v304);
  swift_bridgeObjectRelease(v305);
  v307._countAndFlagsBits = 10;
  v307._object = (void *)0xE100000000000000;
  String.append(_:)(v307);
  v308 = v326._object;
  String.append(_:)(v326);
  swift_bridgeObjectRelease(v308);
  v309._countAndFlagsBits = 687392;
  v309._object = (void *)0xE300000000000000;
  String.append(_:)(v309);
  v310._countAndFlagsBits = 41;
  v310._object = (void *)0xE100000000000000;
  String.append(_:)(v310);
  return v332;
}

uint64_t sub_100BC2030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011E6620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BC2078(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011E6620);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100BC20B8(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v7;
  id v8;

  if (result)
  {
    v8 = result;
    v7 = a7;
    return v8;
  }
  return result;
}

void sub_100BC20E8(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC2104, (uint64_t)&unk_101104938, &static UIColor.MusicTint.normal);
}

id sub_100BC2104(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_100BC2C48();
    v5 = 1.0;
    v6 = 250;
    if (v4 == (id)1)
    {
      v7 = 88;
      v8 = 106;
    }
    else
    {
      v7 = 45;
      v8 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 204;
      v7 = 0;
      v8 = 20;
    }
    else
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 250;
      v7 = 35;
      v8 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100E54CF0, "MusicCoreUI/TintColor.swift", 27, 2, 23, 0);
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_1011DDEF0 != -1)
    swift_once(&qword_1011DDEF0, sub_100BC20E8);
  return &static UIColor.MusicTint.normal;
}

id static UIColor.MusicTint.normal.getter()
{
  return sub_100A32784(&qword_1011DDEF0, (id *)&static UIColor.MusicTint.normal, (uint64_t)sub_100BC20E8);
}

void sub_100BC2284(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC22A0, (uint64_t)&unk_101104910, &static UIColor.MusicTint.rollover);
}

id sub_100BC22A0(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_100BC2C48();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 138;
      v8 = 156;
    }
    else
    {
      v7 = 95;
      v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 162;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 198;
      v7 = 0;
      v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100E54CF0, "MusicCoreUI/TintColor.swift", 27, 2, 32, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_1011DDEF8 != -1)
    swift_once(&qword_1011DDEF8, sub_100BC2284);
  return &static UIColor.MusicTint.rollover;
}

id static UIColor.MusicTint.rollover.getter()
{
  return sub_100A32784(&qword_1011DDEF8, (id *)&static UIColor.MusicTint.rollover, (uint64_t)sub_100BC2284);
}

void sub_100BC2420(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC243C, (uint64_t)&unk_1011048E8, &static UIColor.MusicTint.pressed);
}

id sub_100BC243C(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_100BC2C48();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 113;
      v8 = 131;
    }
    else
    {
      v7 = 70;
      v8 = 97;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 187;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 224;
      v7 = 9;
      v8 = 33;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100E54CF0, "MusicCoreUI/TintColor.swift", 27, 2, 41, 0);
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_1011DDF00 != -1)
    swift_once(&qword_1011DDF00, sub_100BC2420);
  return &static UIColor.MusicTint.pressed;
}

id static UIColor.MusicTint.pressed.getter()
{
  return sub_100A32784(&qword_1011DDF00, (id *)&static UIColor.MusicTint.pressed, (uint64_t)sub_100BC2420);
}

void sub_100BC25BC(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC25D8, (uint64_t)&unk_1011048C0, &static UIColor.MusicTint.deepPressed);
}

id sub_100BC25D8(void *a1)
{
  id v2;
  id v3;
  id v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_100BC2C48();
    v5 = 1.0;
    v6 = 255;
    if (v4 == (id)1)
    {
      v7 = 138;
      v8 = 156;
    }
    else
    {
      v7 = 95;
      v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 162;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      sub_100BC2C48();
      v5 = 1.0;
      v6 = 198;
      v7 = 0;
      v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100E54CF0, "MusicCoreUI/TintColor.swift", 27, 2, 50, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_1011DDF08 != -1)
    swift_once(&qword_1011DDF08, sub_100BC25BC);
  return &static UIColor.MusicTint.deepPressed;
}

id static UIColor.MusicTint.deepPressed.getter()
{
  return sub_100A32784(&qword_1011DDF08, (id *)&static UIColor.MusicTint.deepPressed, (uint64_t)sub_100BC25BC);
}

void sub_100BC2758(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC2774, (uint64_t)&unk_101104898, &static UIColor.MusicTint.disabled);
}

id sub_100BC2774(void *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;

  v2 = objc_msgSend(a1, "userInterfaceStyle");
  v3 = objc_msgSend(a1, "accessibilityContrast");
  v4 = v3;
  if (!v2)
    goto LABEL_6;
  if (v2 == (id)2)
  {
    sub_100BC2C48();
    v5 = 250;
    if (v4 == (id)1)
    {
      v6 = 88;
      v7 = 106;
    }
    else
    {
      v6 = 45;
      v7 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_100BC2C48();
      v5 = 214;
      v6 = 0;
      v7 = 23;
    }
    else
    {
      sub_100BC2C48();
      v5 = 250;
      v6 = 35;
      v7 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000062, 0x8000000100E54CF0, "MusicCoreUI/TintColor.swift", 27, 2, 59, 0);
  __break(1u);
  return result;
}

_QWORD *UIColor.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_1011DDF10 != -1)
    swift_once(&qword_1011DDF10, sub_100BC2758);
  return &static UIColor.MusicTint.disabled;
}

id static UIColor.MusicTint.disabled.getter()
{
  return sub_100A32784(&qword_1011DDF10, (id *)&static UIColor.MusicTint.disabled, (uint64_t)sub_100BC2758);
}

uint64_t sub_100BC290C(uint64_t a1)
{
  return sub_100BC2B68(a1, &qword_1011DDEF0, (id *)&static UIColor.MusicTint.normal, &static Color.MusicTint.normal, (uint64_t)sub_100BC20E8);
}

uint64_t *Color.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_1011DDF18 != -1)
    swift_once(&qword_1011DDF18, sub_100BC290C);
  return &static Color.MusicTint.normal;
}

uint64_t static Color.MusicTint.normal.getter()
{
  return sub_100BC2A0C(&qword_1011DDF18, &static Color.MusicTint.normal, (uint64_t)sub_100BC290C);
}

uint64_t sub_100BC298C(uint64_t a1)
{
  return sub_100BC2B68(a1, &qword_1011DDEF8, (id *)&static UIColor.MusicTint.rollover, &static Color.MusicTint.rollover, (uint64_t)sub_100BC2284);
}

uint64_t *Color.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_1011DDF20 != -1)
    swift_once(&qword_1011DDF20, sub_100BC298C);
  return &static Color.MusicTint.rollover;
}

uint64_t static Color.MusicTint.rollover.getter()
{
  return sub_100BC2A0C(&qword_1011DDF20, &static Color.MusicTint.rollover, (uint64_t)sub_100BC298C);
}

uint64_t sub_100BC2A0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return swift_retain(*a2);
}

uint64_t sub_100BC2A44(uint64_t a1)
{
  return sub_100BC2B68(a1, &qword_1011DDF00, (id *)&static UIColor.MusicTint.pressed, &static Color.MusicTint.pressed, (uint64_t)sub_100BC2420);
}

uint64_t *Color.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_1011DDF28 != -1)
    swift_once(&qword_1011DDF28, sub_100BC2A44);
  return &static Color.MusicTint.pressed;
}

uint64_t static Color.MusicTint.pressed.getter()
{
  return sub_100BC2A0C(&qword_1011DDF28, &static Color.MusicTint.pressed, (uint64_t)sub_100BC2A44);
}

uint64_t sub_100BC2AC4(uint64_t a1)
{
  return sub_100BC2B68(a1, &qword_1011DDF08, (id *)&static UIColor.MusicTint.deepPressed, &static Color.MusicTint.deepPressed, (uint64_t)sub_100BC25BC);
}

uint64_t *Color.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_1011DDF30 != -1)
    swift_once(&qword_1011DDF30, sub_100BC2AC4);
  return &static Color.MusicTint.deepPressed;
}

uint64_t static Color.MusicTint.deepPressed.getter()
{
  return sub_100BC2A0C(&qword_1011DDF30, &static Color.MusicTint.deepPressed, (uint64_t)sub_100BC2AC4);
}

uint64_t sub_100BC2B44(uint64_t a1)
{
  return sub_100BC2B68(a1, &qword_1011DDF10, (id *)&static UIColor.MusicTint.disabled, &static Color.MusicTint.disabled, (uint64_t)sub_100BC2758);
}

uint64_t sub_100BC2B68(uint64_t a1, _QWORD *a2, id *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = Color.init(_:)(*a3);
  *a4 = result;
  return result;
}

uint64_t *Color.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_1011DDF38 != -1)
    swift_once(&qword_1011DDF38, sub_100BC2B44);
  return &static Color.MusicTint.disabled;
}

uint64_t static Color.MusicTint.disabled.getter()
{
  return sub_100BC2A0C(&qword_1011DDF38, &static Color.MusicTint.disabled, (uint64_t)sub_100BC2B44);
}

ValueMetadata *type metadata accessor for UIColor.MusicTint()
{
  return &type metadata for UIColor.MusicTint;
}

ValueMetadata *type metadata accessor for Color.MusicTint()
{
  return &type metadata for Color.MusicTint;
}

uint64_t sub_100BC2C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BC2C40(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_100BC2C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011E6AE0;
  if (!qword_1011E6AE0)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011E6AE0);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaLibrary:)(MPMediaLibrary_optional mediaLibrary)
{
  Class isa;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  NSString v6;
  id v7;
  UITraitCollection result;
  void *ObjCClassFromMetadata;
  Class v10;
  id v11;

  isa = mediaLibrary.value.super.isa;
  v2 = sub_100007E8C(&qword_1011DF520);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100EA7A90;
  v4 = (void *)objc_opt_self(UITraitCollection);
  v5 = isa;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "_traitCollectionWithValue:forTraitNamed:", v5, v6);

  if (v7)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(_QWORD *)(v3 + 32) = v7;
    specialized Array._endMutation()(ObjCClassFromMetadata);
    sub_10004A07C(0, &qword_1011DEF38, UITraitCollection_ptr);
    v10 = Array._bridgeToObjectiveC()().super.isa;
    v11 = objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", v10, swift_bridgeObjectRelease().n128_f64[0]);

    return (UITraitCollection)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UITraitCollection.mediaLibrary.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100BC2F00((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10004A07C(0, &qword_1011DF710, MPMediaLibrary_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return (id)v5;
  }
  else
  {
    sub_100BC2F48((uint64_t)v7);
  }
  result = objc_msgSend((id)objc_opt_self(MPMediaLibrary), "deviceMediaLibrary");
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_100BC2F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011E0700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BC2F48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011E0700);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

UITraitCollection __swiftcall UITraitCollection.init(legacyLibraryFilter:)(__C::MPMediaLibraryFilteringOptions legacyLibraryFilter)
{
  UITraitCollection result;

  sub_100BC3300(legacyLibraryFilter.rawValue);
  return result;
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.legacyLibraryFilter.getter()
{
  return sub_100BC346C();
}

BOOL UITraitCollection.isMediaPicker.getter()
{
  void *v0;
  void *v1;

  v0 = (void *)UITraitCollection.mediaPickerConfiguration.getter();
  v1 = v0;
  if (v0)

  return v1 != 0;
}

uint64_t UITraitCollection.mediaPickerConfiguration.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100BC2F00((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_10004A07C(0, &qword_1011DF130, MPMediaPickerConfiguration_ptr);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_100BC2F48((uint64_t)v7);
    return 0;
  }
}

uint64_t UITraitCollection.init(mediaPickerConfiguration:)(void *a1)
{
  void *v2;
  id v3;
  NSString v4;
  id v5;
  __C::MPMediaLibraryFilteringOptions v6;
  Class isa;
  void *ObjCClassFromMetadata;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_class *v12;
  Class v13;
  id v14;
  uint64_t result;

  v2 = (void *)objc_opt_self(UITraitCollection);
  v3 = a1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "_traitCollectionWithValue:forTraitNamed:", v3, v4);

  if (v5)
  {
    v6.rawValue = *(_QWORD *)MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor();
    if (!objc_msgSend(v3, "showsItemsWithProtectedAssets"))
      v6.rawValue |= 0x20;
    if (!objc_msgSend(v3, "showsCloudItems"))
      v6.rawValue |= 2;
    sub_10004A07C(0, &qword_1011DEF38, UITraitCollection_ptr);
    isa = UITraitCollection.init(mediaPickerLibraryFilter:)(v6).super.isa;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v9 = sub_100007E8C(&qword_1011DF520);
    v10 = swift_allocObject(v9, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100EA7DB0;
    *(_QWORD *)(v10 + 32) = v5;
    *(_QWORD *)(v10 + 40) = isa;
    specialized Array._endMutation()(v10);
    v11 = v5;
    v12 = isa;
    v13 = Array._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", v13, swift_bridgeObjectRelease().n128_f64[0]);

    return (uint64_t)v14;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003CLL, 0x8000000100E54DF0, "MusicCoreUI/UIKit+MediaPlayer.swift", 35, 2, 51, 0);
    __break(1u);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaPickerLibraryFilter:)(__C::MPMediaLibraryFilteringOptions mediaPickerLibraryFilter)
{
  UITraitCollection result;

  sub_100BC3300(mediaPickerLibraryFilter.rawValue);
  return result;
}

void sub_100BC3300(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;
  void *ObjCClassFromMetadata;
  Class isa;

  v2 = sub_100007E8C(&qword_1011DF520);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100EA7A90;
  v4 = (void *)objc_opt_self(UITraitCollection);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "_traitCollectionWithValue:forTraitNamed:", v5, v6);

  if (v7)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(_QWORD *)(v3 + 32) = v7;
    specialized Array._endMutation()(ObjCClassFromMetadata);
    sub_10004A07C(0, &qword_1011DEF38, UITraitCollection_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(ObjCClassFromMetadata, "traitCollectionWithTraitsFromCollections:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.mediaPickerLibraryFilter.getter()
{
  return sub_100BC346C();
}

__C::MPMediaLibraryFilteringOptions sub_100BC346C()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  NSNumber_optional v4;
  objc_class *v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "_valueForTraitNamed:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v7, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100BC2F00((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v3 = sub_10004A07C(0, &qword_1011DF128, NSNumber_ptr);
    if (swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, v3, 6))
      v4.value.super.super.isa = v6;
    else
      v4.value.super.super.isa = 0;
  }
  else
  {
    sub_100BC2F48((uint64_t)v8);
    v4.value.super.super.isa = 0;
  }
  return MPMediaLibraryFilteringOptions.init(_:)(v4);
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.combinedLibraryRequestFilter.getter()
{
  Swift::UInt rawValue;

  rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  return (__C::MPMediaLibraryFilteringOptions)(UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue);
}

uint64_t UITraitCollection.configure<A, B>(libraryRequest:)(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  Swift::UInt rawValue;
  Swift::UInt v11;

  v2 = objc_msgSend(a1, "mediaLibrary");
  v3 = UITraitCollection.mediaLibrary.getter();
  v4 = v3;
  if (v2)
  {
    sub_10004A07C(0, &qword_1011DF710, MPMediaLibrary_ptr);
    v5 = v2;
    v6 = static NSObject.== infix(_:_:)(v5, v4);

    if ((v6 & 1) != 0)
    {
      v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {

  }
  v8 = UITraitCollection.mediaLibrary.getter();
  objc_msgSend(a1, "setMediaLibrary:", v8);

  v7 = 1;
LABEL_6:
  v9 = (unint64_t)objc_msgSend(a1, "filteringOptions");
  rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  if (((UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue) & ~v9) != 0)
  {
    v11 = UITraitCollection.legacyLibraryFilter.getter().rawValue;
    objc_msgSend(a1, "setFilteringOptions:", UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | v11 | (unint64_t)objc_msgSend(a1, "filteringOptions"));
    return 1;
  }
  return v7;
}

void static UIButton.Configuration.barButtonConfiguration(imageName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  swift_bridgeObjectRetain();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  if (v14)
  {
    v15 = objc_msgSend(v14, "imageWithConfiguration:", v12);

  }
  else
  {
    v15 = 0;
  }
  UIButton.Configuration.image.setter(v15);
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  UIButton.Configuration.baseBackgroundColor.setter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v3);
  UIButton.Configuration.buttonSize.setter(v6);

}

void static UIButton.Configuration.selectedBarButtonConfiguration(imageName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;

  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  swift_bridgeObjectRetain();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

  if (v14)
  {
    v15 = objc_msgSend(v14, "imageWithConfiguration:", v12);

  }
  else
  {
    v15 = 0;
  }
  UIButton.Configuration.image.setter(v15);
  v16 = (void *)objc_opt_self(UIColor);
  UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v16, "tintColor"));
  UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v16, "systemBackgroundColor"));
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v7);
  UIButton.Configuration.cornerStyle.setter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UIButton.Configuration.Size.small(_:), v3);
  UIButton.Configuration.buttonSize.setter(v6);

}

id static UIButton.contextBarButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  id v36;
  NSString v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v46 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for String.LocalizationValue(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v44 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - v4;
  v6 = type metadata accessor for UIButton.Configuration.Size(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UIButton.Configuration(0);
  v40 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v39 - v17;
  static UIButton.Configuration.gray()(v19);
  v20 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 2, 15.0);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v21);

  if (v22)
  {
    v23 = objc_msgSend(v22, "imageWithConfiguration:", v20);

  }
  else
  {
    v23 = 0;
  }
  sub_100BC3ED4();
  UIButton.Configuration.image.setter(v23);
  v24 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  UIButton.Configuration.baseBackgroundColor.setter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v9);
  UIButton.Configuration.cornerStyle.setter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v8, enum case for UIButton.Configuration.Size.small(_:), v43);
  UIButton.Configuration.buttonSize.setter(v8);

  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v18, v15, v41);
  v25 = (void *)UIButton.init(configuration:primaryAction:)(v18, 0);
  objc_msgSend(v25, "setShowsMenuAsPrimaryAction:", 1);
  String.LocalizationValue.init(stringLiteral:)(1701998413, 0xE400000000000000);
  v27 = v44;
  v26 = v45;
  v28 = v47;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, v5, v47);
  if (qword_1011DDE30 != -1)
    swift_once(&qword_1011DDE30, sub_100BA7618);
  v29 = qword_10124F040;
  v30 = (id)qword_10124F040;
  v31 = v46;
  static Locale.current.getter(v30);
  String.init(localized:table:bundle:locale:comment:)(v27, 0, 0, v29, v31, 0, 0, 256);
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v28);
  v34 = v25;
  v35 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "setAccessibilityLabel:", v35);

  v36 = v34;
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v36, "setLargeContentTitle:", v37, swift_bridgeObjectRelease(v33).n128_f64[0]);

  objc_msgSend(v36, "setShowsLargeContentViewer:", 1);
  return v36;
}

unint64_t sub_100BC3ED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011DF138;
  if (!qword_1011DF138)
  {
    v1 = objc_opt_self(UIButton);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011DF138);
  }
  return result;
}

uint64_t UITraitCollection.isAccessibilitySizeCategory.getter()
{
  void *v0;
  id v1;
  char v2;

  v1 = objc_msgSend(v0, "preferredContentSizeCategory");
  v2 = UIContentSizeCategory.isAccessibilityCategory.getter(v1);

  return v2 & 1;
}

Swift::Bool __swiftcall UIViewController.scrollToTopIfPossible()()
{
  void *v0;
  id v1;
  void *v2;
  unsigned __int8 v3;

  v1 = objc_msgSend(v0, "contentScrollView");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "_scrollToTopIfPossible:", 1);

  return v3;
}

Swift::Bool __swiftcall UIViewController.focusOnSearchBarIfPossible()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  unsigned int v4;
  id v5;
  unsigned __int8 v6;

  v1 = objc_msgSend(v0, "navigationItem");
  v2 = objc_msgSend(v1, "searchController");

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, "searchBar");
  v4 = objc_msgSend(v3, "canBecomeFirstResponder");

  if (v4)
  {
    v5 = objc_msgSend(v2, "searchBar");
    v6 = objc_msgSend(v5, "becomeFirstResponder");

    v2 = v5;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t *UIView.Border.artwork.unsafeMutableAddressor()
{
  if (qword_1011DDF40 != -1)
    swift_once(&qword_1011DDF40, sub_100BC4100);
  return &static UIView.Border.artwork;
}

uint64_t UIView.Corner.medium.unsafeMutableAddressor()
{
  return sub_100BC4624(&qword_1011DDF60, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_100BC4404);
}

uint64_t UIView.Corner.small.unsafeMutableAddressor()
{
  return sub_100BC4624(&qword_1011DDF58, (uint64_t)static UIView.Corner.small, (uint64_t)sub_100BC4358);
}

void sub_100BC4100()
{
  id v0;
  void *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD v5[6];

  v0 = objc_allocWithZone((Class)UIColor);
  v5[4] = sub_10091C05C;
  v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100264780;
  v5[3] = &unk_101104960;
  v1 = _Block_copy(v5);
  objc_msgSend(v0, "initWithDynamicProvider:", v1);
  _Block_release(v1);
  swift_release();
  UIView.Border.init(thickness:color:)();
  static UIView.Border.artwork = v2;
  byte_10124F2F8 = v3 & 1;
  qword_10124F300 = v4;
}

uint64_t static UIView.Border.artwork.getter()
{
  uint64_t v0;
  id v1;

  if (qword_1011DDF40 != -1)
    swift_once(&qword_1011DDF40, sub_100BC4100);
  v0 = static UIView.Border.artwork;
  v1 = (id)qword_10124F300;
  return v0;
}

void sub_100BC4230()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  byte_1011DF140 = v1 == (id)6;
}

uint64_t sub_100BC4290()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10004FACC(v0, static UIView.Corner.extraSmall);
  sub_100048B14(v0, (uint64_t)static UIView.Corner.extraSmall);
  if (qword_1011DDF48 != -1)
    swift_once(&qword_1011DDF48, sub_100BC4230);
  v1 = 3.0;
  if (byte_1011DF140)
    v1 = 6.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.extraSmall.unsafeMutableAddressor()
{
  return sub_100BC4624(&qword_1011DDF50, (uint64_t)static UIView.Corner.extraSmall, (uint64_t)sub_100BC4290);
}

uint64_t static UIView.Corner.extraSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BC4680(&qword_1011DDF50, (uint64_t)static UIView.Corner.extraSmall, (uint64_t)sub_100BC4290, a1);
}

uint64_t sub_100BC4358()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10004FACC(v0, static UIView.Corner.small);
  sub_100048B14(v0, (uint64_t)static UIView.Corner.small);
  if (qword_1011DDF48 != -1)
    swift_once(&qword_1011DDF48, sub_100BC4230);
  v1 = 5.0;
  if (byte_1011DF140)
    v1 = 8.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t static UIView.Corner.small.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BC4680(&qword_1011DDF58, (uint64_t)static UIView.Corner.small, (uint64_t)sub_100BC4358, a1);
}

uint64_t sub_100BC4404()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10004FACC(v0, static UIView.Corner.medium);
  sub_100048B14(v0, (uint64_t)static UIView.Corner.medium);
  if (qword_1011DDF48 != -1)
    swift_once(&qword_1011DDF48, sub_100BC4230);
  v1 = 8.0;
  if (byte_1011DF140)
    v1 = 10.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t static UIView.Corner.medium.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BC4680(&qword_1011DDF60, (uint64_t)static UIView.Corner.medium, (uint64_t)sub_100BC4404, a1);
}

uint64_t sub_100BC44B0()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10004FACC(v0, static UIView.Corner.large);
  sub_100048B14(v0, (uint64_t)static UIView.Corner.large);
  if (qword_1011DDF48 != -1)
    swift_once(&qword_1011DDF48, sub_100BC4230);
  v1 = 10.0;
  if (byte_1011DF140)
    v1 = 16.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.large.unsafeMutableAddressor()
{
  return sub_100BC4624(&qword_1011DDF68, (uint64_t)static UIView.Corner.large, (uint64_t)sub_100BC44B0);
}

uint64_t static UIView.Corner.large.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BC4680(&qword_1011DDF68, (uint64_t)static UIView.Corner.large, (uint64_t)sub_100BC44B0, a1);
}

uint64_t sub_100BC4578()
{
  uint64_t v0;
  double v1;

  v0 = type metadata accessor for UIView.Corner(0);
  sub_10004FACC(v0, static UIView.Corner.extraLarge);
  sub_100048B14(v0, (uint64_t)static UIView.Corner.extraLarge);
  if (qword_1011DDF48 != -1)
    swift_once(&qword_1011DDF48, sub_100BC4230);
  v1 = 14.0;
  if (byte_1011DF140)
    v1 = 24.0;
  return static UIView.Corner.value(_:continuous:)(1, v1);
}

uint64_t UIView.Corner.extraLarge.unsafeMutableAddressor()
{
  return sub_100BC4624(&qword_1011DDF70, (uint64_t)static UIView.Corner.extraLarge, (uint64_t)sub_100BC4578);
}

uint64_t sub_100BC4624(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for UIView.Corner(0);
  return sub_100048B14(v4, a2);
}

uint64_t static UIView.Corner.extraLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100BC4680(&qword_1011DDF70, (uint64_t)static UIView.Corner.extraLarge, (uint64_t)sub_100BC4578, a1);
}

uint64_t sub_100BC4680@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for UIView.Corner(0);
  v7 = sub_100048B14(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100BC46E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BC46F8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100BC4700(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC471C, (uint64_t)&unk_1011049D0, &static HI.Color.prominentTextColor);
}

id sub_100BC471C(void *a1)
{
  return sub_100BC47B4(a1, 224, 9, 33);
}

_QWORD *HI.Color.prominentTextColor.unsafeMutableAddressor()
{
  if (qword_1011DDF78 != -1)
    swift_once(&qword_1011DDF78, sub_100BC4700);
  return &static HI.Color.prominentTextColor;
}

id static HI.Color.prominentTextColor.getter()
{
  return sub_100A32784(&qword_1011DDF78, (id *)&static HI.Color.prominentTextColor, (uint64_t)sub_100BC4700);
}

void sub_100BC4788(uint64_t a1)
{
  sub_100256F90(a1, (uint64_t)sub_100BC47A4, (uint64_t)&unk_1011049A8, &static HI.Color.prominentBackgroundColor);
}

id sub_100BC47A4(void *a1)
{
  return sub_100BC47B4(a1, 250, 35, 59);
}

id sub_100BC47B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = objc_msgSend(a1, "userInterfaceStyle");
  sub_100BC2C48();
  if (v7 == (id)2)
  {
    v8 = 250;
    v9 = 45;
    v10 = 72;
  }
  else
  {
    v8 = a2;
    v9 = a3;
    v10 = a4;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v8, v9, v10, 1.0);
}

_QWORD *HI.Color.prominentBackgroundColor.unsafeMutableAddressor()
{
  if (qword_1011DDF80 != -1)
    swift_once(&qword_1011DDF80, sub_100BC4788);
  return &static HI.Color.prominentBackgroundColor;
}

id static HI.Color.prominentBackgroundColor.getter()
{
  return sub_100A32784(&qword_1011DDF80, (id *)&static HI.Color.prominentBackgroundColor, (uint64_t)sub_100BC4788);
}

ValueMetadata *type metadata accessor for HI.Color()
{
  return &type metadata for HI.Color;
}

uint64_t sub_100BC4898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100BC48A8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double HI.SizeClass.rawValue.getter(char a1)
{
  return dbl_100EEB180[a1];
}

double HI.SizeClass.gutter.getter(char a1)
{
  return dbl_100EEB060[a1];
}

double HI.SizeClass.margin.getter(char a1)
{
  return dbl_100EEB0A0[a1];
}

double HI.SizeClass.peek.getter()
{
  return 36.0;
}

_UNKNOWN **static HI.SizeClass.allCases.getter()
{
  return &off_101102690;
}

BOOL sub_100BC4918(char *a1, char *a2)
{
  return sub_100BC6738(*a1, *a2);
}

uint64_t sub_100BC4924@<X0>(double *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(*a1);
  *a2 = result;
  return result;
}

double sub_100BC494C@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = dbl_100EEB180[*v1];
  *a1 = result;
  return result;
}

void sub_100BC4964(_QWORD *a1@<X8>)
{
  *a1 = &off_101102690;
}

BOOL sub_100BC4974(char *a1, char *a2)
{
  return _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(*a1, *a2);
}

BOOL sub_100BC4980(char *a1, char *a2)
{
  return sub_100BC498C(*a1, *a2);
}

BOOL sub_100BC498C(char a1, char a2)
{
  return dbl_100EEB180[a2] >= dbl_100EEB180[a1];
}

BOOL sub_100BC49B0(char *a1, char *a2)
{
  return sub_100BC49BC(*a1, *a2);
}

BOOL sub_100BC49BC(char a1, char a2)
{
  return dbl_100EEB180[a1] >= dbl_100EEB180[a2];
}

BOOL sub_100BC49E0(char *a1, char *a2)
{
  return sub_100BC49EC(*a1, *a2);
}

BOOL sub_100BC49EC(char a1, char a2)
{
  return dbl_100EEB180[a2] < dbl_100EEB180[a1];
}

Swift::Int sub_100BC4A10()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_100BC4A5C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100BC4A54(uint64_t a1)
{
  char *v1;

  sub_100BC4A5C(a1, *v1);
}

void sub_100BC4A5C(uint64_t a1, char a2)
{
  Hasher._combine(_:)(qword_100EEB140[a2]);
}

uint64_t sub_100BC4A8C(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD000000000000015;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD000000000000014;
      v4 = 0x8000000100E54380;
    }
    else
    {
      v4 = 0x8000000100E543A0;
    }
  }
  else
  {
    v4 = 0x8000000100E54360;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100BC4B08(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100BC4A5C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_100BC4B48(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_100BC4B64 + 4 * byte_100EEAD70[a3]))();
}

double sub_100BC4B64(char a1)
{
  return dbl_100EEB0E0[a1];
}

uint64_t sub_100BC4BF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_100BC4BF0 + 4 * byte_100EEAD80[a1]))(3.0);
}

double sub_100BC4C14()
{
  return 6.0;
}

uint64_t sub_100BC4C1C(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_100BC4BF0 + 4 * byte_100EEAD7C[a1]))(7.0);
}

double sub_100BC4C3C(uint64_t a1, char a2)
{
  double result;

  result = 4.0;
  if ((a2 & 1) != 0)
    return 7.0;
  return result;
}

uint64_t sub_100BC4C50(unsigned __int8 a1)
{
  return ((uint64_t (*)(double))((char *)&locret_100BC4BF0 + 4 * byte_100EEAD78[a1]))(5.0);
}

double sub_100BC4C70()
{
  return 10.0;
}

double sub_100BC4C78()
{
  return 2.0;
}

double sub_100BC4C80(uint64_t a1, char a2)
{
  double result;

  if ((a2 & 1) != 0)
    return 4.0;
  return result;
}

double sub_100BC4C90()
{
  return 4.0;
}

double sub_100BC4C98()
{
  return 7.0;
}

double sub_100BC4CA0(uint64_t a1, char a2)
{
  double result;

  result = 5.0;
  if ((a2 & 1) != 0)
    return 9.0;
  return result;
}

double sub_100BC4CB4()
{
  return 8.0;
}

double sub_100BC4CBC(uint64_t a1, char a2)
{
  double result;

  result = 6.0;
  if ((a2 & 1) != 0)
    return 28.0;
  return result;
}

double sub_100BC4CD0()
{
  return 12.0;
}

double sub_100BC4CD8(uint64_t a1, char a2)
{
  double result;

  result = 7.0;
  if ((a2 & 1) != 0)
    return 15.0;
  return result;
}

double sub_100BC4CEC(char a1, char a2, char a3)
{
  double result;

  switch(a3)
  {
    case 1:
      if (a1 != 3)
        return 1.0;
      result = 3.0;
      if ((a2 & 1) == 0)
        return 1.0;
      return result;
    case 2:
      if (!a1)
        goto LABEL_11;
      return 1.0;
    case 5:
    case 7:
      if (a1 != 3)
        return 1.0;
      goto LABEL_11;
    case 6:
      if (a1 != 3)
      {
        if (!a1)
        {
LABEL_11:
          result = 2.0;
          if ((a2 & 1) != 0)
            return result;
        }
        return 1.0;
      }
      result = 5.0;
      if ((a2 & 1) == 0)
        return 1.0;
      return result;
    default:
      return 1.0;
  }
}

_UNKNOWN **static HI.Grid.Variant.allCases.getter()
{
  return &off_1011026B8;
}

void sub_100BC4D80(_QWORD *a1@<X8>)
{
  *a1 = &off_1011026E0;
}

uint64_t Lyrics.TextLine.agentAlignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Lyrics.TextLine.direction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t Lyrics.TextLine.lyricsDirection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

double Lyrics.TextLine.primaryVocalsStartTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double Lyrics.TextLine.primaryVocalsEndTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void HI.Grid.Metrics.init(width:variant:swiping:isAccessibilitySize:)(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v10;
  double v11;
  char v12;
  unsigned __int8 v13;
  double v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  BOOL v29;

  if (a5 <= 374.0)
  {
    v13 = 0;
    v10 = 10.0;
    v11 = 16.0;
    goto LABEL_19;
  }
  v10 = 12.0;
  v11 = 20.0;
  if (a5 <= 500.0)
  {
    v13 = 1;
    goto LABEL_19;
  }
  if (a5 <= 726.0)
  {
    v13 = 2;
    goto LABEL_19;
  }
  v10 = 20.0;
  if (a5 <= 981.0)
  {
    v13 = 3;
LABEL_18:
    v11 = 34.0;
    goto LABEL_19;
  }
  if (a5 <= 1194.0)
  {
    v13 = 4;
    goto LABEL_18;
  }
  if (a5 <= 2500.0)
    v12 = 6;
  else
    v12 = 7;
  if (a5 > 1500.0)
    v13 = v12;
  else
    v13 = 5;
  v11 = 34.0;
LABEL_19:
  v14 = a5 - (v11 + v11);
  if ((a3 & 1) != 0)
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v15, "scaledValueForValue:", 1.0);
    v17 = v16;

    sub_100BC4B48(a1, a2 & 1, v13);
    v19 = round(v18 * (1.0 / (v17 * 0.7)));
  }
  else
  {
    sub_100BC4B48(a1, a2 & 1, v13);
    v19 = v20;
  }
  v21 = a2 & 1;
  v22 = sub_100BC4CEC(a1, v21, v13);
  v23 = v22 * ((v14 - v10 * (v19 + -1.0)) / v19);
  v24 = v22 + -1.0;
  v25 = v10 * v24;
  v26 = v24 <= 0.0;
  v27 = -0.0;
  if (!v26)
    v27 = v25;
  v28 = v27 + v23;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v11;
  *(_BYTE *)(a4 + 24) = v13;
  v29 = v19 == 1.0 || v28 > 300.0;
  *(_BYTE *)(a4 + 25) = a1;
  *(_BYTE *)(a4 + 26) = v21;
  *(double *)(a4 + 32) = v14;
  *(double *)(a4 + 40) = v19;
  if ((a3 & 1) == 0)
    v29 = 0;
  *(double *)(a4 + 48) = v28;
  *(_BYTE *)(a4 + 56) = v29;
}

void HI.Grid.Metrics.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *(_QWORD *)v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((*(_QWORD *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)(v0 + 8);
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((*(_QWORD *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)(v0 + 16);
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(qword_100EEB140[*(char *)(v0 + 24)]);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 25));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 26) & 1);
  if ((*(_QWORD *)(v0 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v0 + 32);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)(v0 + 40);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((*(_QWORD *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)(v0 + 48);
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 56) & 1);
}

Swift::Int HI.Grid.Metrics.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  HI.Grid.Metrics.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_100BC5134(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  HI.Grid.Metrics.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100BC516C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v5, (uint64_t)v7) & 1;
}

void *HI.IndexBar.NumberOfItemsRequirement.artists.unsafeMutableAddressor()
{
  return &static HI.IndexBar.NumberOfItemsRequirement.artists;
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.artists.getter()
{
  return 50;
}

void *HI.IndexBar.NumberOfItemsRequirement.default.unsafeMutableAddressor()
{
  return &static HI.IndexBar.NumberOfItemsRequirement.default;
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.default.getter()
{
  return 100;
}

double sub_100BC51EC()
{
  double result;

  result = 12.0;
  static Corner.search = xmmword_100EB2A40;
  byte_10124F3A0 = 0;
  return result;
}

__int128 *Corner.search.unsafeMutableAddressor()
{
  if (qword_1011DDF88 != -1)
    swift_once(&qword_1011DDF88, sub_100BC51EC);
  return &static Corner.search;
}

uint64_t static Corner.search.getter()
{
  if (qword_1011DDF88 != -1)
    swift_once(&qword_1011DDF88, sub_100BC51EC);
  return static Corner.search;
}

double sub_100BC5290()
{
  double result;

  result = 16.0;
  static Corner.featured = xmmword_100EE8A70;
  byte_10124F3C0 = 0;
  return result;
}

__int128 *Corner.featured.unsafeMutableAddressor()
{
  if (qword_1011DDF90 != -1)
    swift_once(&qword_1011DDF90, sub_100BC5290);
  return &static Corner.featured;
}

uint64_t static Corner.featured.getter()
{
  if (qword_1011DDF90 != -1)
    swift_once(&qword_1011DDF90, sub_100BC5290);
  return static Corner.featured;
}

void sub_100BC5334()
{
  static HI.HoverOutset.list = 0x4024000000000000;
}

uint64_t *HI.HoverOutset.list.unsafeMutableAddressor()
{
  if (qword_1011DDF98 != -1)
    swift_once(&qword_1011DDF98, sub_100BC5334);
  return &static HI.HoverOutset.list;
}

double static HI.HoverOutset.list.getter()
{
  return sub_100BB5044(&qword_1011DDF98, (uint64_t)&static HI.HoverOutset.list, (uint64_t)sub_100BC5334);
}

void sub_100BC53A0()
{
  static HI.HoverOutset.grid = 0x4028000000000000;
}

uint64_t *HI.HoverOutset.grid.unsafeMutableAddressor()
{
  if (qword_1011DDFA0 != -1)
    swift_once(&qword_1011DDFA0, sub_100BC53A0);
  return &static HI.HoverOutset.grid;
}

double static HI.HoverOutset.grid.getter()
{
  return sub_100BB5044(&qword_1011DDFA0, (uint64_t)&static HI.HoverOutset.grid, (uint64_t)sub_100BC53A0);
}

void sub_100BC540C()
{
  static HI.HoverOutset.text = 0x4010000000000000;
}

uint64_t *HI.HoverOutset.text.unsafeMutableAddressor()
{
  if (qword_1011DDFA8 != -1)
    swift_once(&qword_1011DDFA8, sub_100BC540C);
  return &static HI.HoverOutset.text;
}

double static HI.HoverOutset.text.getter()
{
  return sub_100BB5044(&qword_1011DDFA8, (uint64_t)&static HI.HoverOutset.text, (uint64_t)sub_100BC540C);
}

void sub_100BC5478()
{
  static HI.BottomPlayer.Ornament.overlappingHeight = Int.seconds.getter(20);
}

uint64_t *HI.BottomPlayer.Ornament.overlappingHeight.unsafeMutableAddressor()
{
  if (qword_1011DDFB0 != -1)
    swift_once(&qword_1011DDFB0, sub_100BC5478);
  return &static HI.BottomPlayer.Ornament.overlappingHeight;
}

double static HI.BottomPlayer.Ornament.overlappingHeight.getter()
{
  return sub_100BB5044(&qword_1011DDFB0, (uint64_t)&static HI.BottomPlayer.Ornament.overlappingHeight, (uint64_t)sub_100BC5478);
}

double sub_100BC54F4()
{
  double result;

  if (qword_1011DDFB0 != -1)
    swift_once(&qword_1011DDFB0, sub_100BC5478);
  result = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  static HI.BottomPlayer.Ornament.offset = 0;
  *(double *)&qword_10124F3F0 = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  return result;
}

uint64_t *HI.BottomPlayer.Ornament.offset.unsafeMutableAddressor()
{
  if (qword_1011DDFB8 != -1)
    swift_once(&qword_1011DDFB8, sub_100BC54F4);
  return &static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.Ornament.offset.getter()
{
  if (qword_1011DDFB8 != -1)
    swift_once(&qword_1011DDFB8, sub_100BC54F4);
  return *(double *)&static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.size(dynamicTypeSize:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v15;

  sub_100007E8C(&qword_1011DF000);
  __chkstk_darwin();
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v15 - v8;
  sub_100BC5AC4(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100BC5B0C((uint64_t)v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v3, v4);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.accessibility1(_:), v4);
    v10 = sub_100BC5B4C();
    v11 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v7, v4, v10);
    v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v7, v4);
    v12(v9, v4);
    if ((v11 & 1) == 0)
      return 924.0;
  }
  return 784.0;
}

void sub_100BC5748()
{
  static HI.BottomPlayer.buttonSpacing = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.buttonSpacing.unsafeMutableAddressor()
{
  if (qword_1011DDFC0 != -1)
    swift_once(&qword_1011DDFC0, sub_100BC5748);
  return &static HI.BottomPlayer.buttonSpacing;
}

double static HI.BottomPlayer.buttonSpacing.getter()
{
  return sub_100BB5044(&qword_1011DDFC0, (uint64_t)&static HI.BottomPlayer.buttonSpacing, (uint64_t)sub_100BC5748);
}

void sub_100BC57C4()
{
  static HI.BottomPlayer.contentHorizontalPadding = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.contentHorizontalPadding.unsafeMutableAddressor()
{
  if (qword_1011DDFC8 != -1)
    swift_once(&qword_1011DDFC8, sub_100BC57C4);
  return &static HI.BottomPlayer.contentHorizontalPadding;
}

double static HI.BottomPlayer.contentHorizontalPadding.getter()
{
  return sub_100BB5044(&qword_1011DDFC8, (uint64_t)&static HI.BottomPlayer.contentHorizontalPadding, (uint64_t)sub_100BC57C4);
}

uint64_t _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && dbl_100EEB180[*(char *)(a1 + 24)] == dbl_100EEB180[*(char *)(a2 + 24)]
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && ((*(unsigned __int8 *)(a1 + 26) ^ *(unsigned __int8 *)(a2 + 26)) & 1) == 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    return (((*(_BYTE *)(a1 + 56) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 56)) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(char a1, char a2)
{
  return dbl_100EEB180[a1] < dbl_100EEB180[a2];
}

uint64_t _s11MusicCoreUI2HIO9SizeClassOyAE0B8Graphics7CGFloatVcfC_0(double a1)
{
  int v1;
  unsigned int v2;

  if (a1 <= 374.0)
    return 0;
  if (a1 <= 500.0)
    return 1;
  if (a1 <= 726.0)
    return 2;
  if (a1 <= 981.0)
    return 3;
  if (a1 > 2500.0)
    v1 = 7;
  else
    v1 = 6;
  if (a1 > 1500.0)
    v2 = v1;
  else
    v2 = 5;
  if (a1 > 1194.0)
    return v2;
  else
    return 4;
}

uint64_t _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(double a1)
{
  int v2;
  unsigned int v3;

  if (a1 == 374.0)
    return 0;
  if (a1 == 500.0)
    return 1;
  if (a1 == 726.0)
    return 2;
  if (a1 == 981.0)
    return 3;
  if (a1 == 1194.0)
    return 4;
  if (a1 == 2501.0)
    v2 = 7;
  else
    v2 = 8;
  if (a1 == 2500.0)
    v3 = 6;
  else
    v3 = v2;
  if (a1 == 1500.0)
    return 5;
  else
    return v3;
}

uint64_t sub_100BC5AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007E8C(&qword_1011DF000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BC5B0C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007E8C(&qword_1011DF000);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100BC5B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011E3AD0;
  if (!qword_1011E3AD0)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_1011E3AD0);
  }
  return result;
}

uint64_t sub_100BC5B94()
{
  return sub_100671180(&qword_1011DF148, &qword_1011DF150);
}

unint64_t sub_100BC5BBC()
{
  unint64_t result;

  result = qword_1011DF158;
  if (!qword_1011DF158)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.SizeClass, &type metadata for HI.SizeClass);
    atomic_store(result, (unint64_t *)&qword_1011DF158);
  }
  return result;
}

uint64_t sub_100BC5C00()
{
  return sub_100671180(&qword_1011DF160, &qword_1011DF168);
}

unint64_t sub_100BC5C28()
{
  unint64_t result;

  result = qword_1011DF170;
  if (!qword_1011DF170)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.Grid.Variant, &type metadata for HI.Grid.Variant);
    atomic_store(result, (unint64_t *)&qword_1011DF170);
  }
  return result;
}

unint64_t sub_100BC5C70()
{
  unint64_t result;

  result = qword_1011DF178;
  if (!qword_1011DF178)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.Grid.Metrics, &type metadata for HI.Grid.Metrics);
    atomic_store(result, (unint64_t *)&qword_1011DF178);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI()
{
  return &type metadata for HI;
}

_BYTE *initializeBufferWithCopyOfBuffer for WaveformPlayIndicator.Mode(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for HI.SizeClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100BC5D1C + 4 * byte_100EEAD98[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100BC5D50 + 4 * byte_100EEAD93[v4]))();
}

uint64_t sub_100BC5D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BC5D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BC5D60);
  return result;
}

uint64_t sub_100BC5D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BC5D74);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100BC5D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BC5D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.SizeClass()
{
  return &type metadata for HI.SizeClass;
}

ValueMetadata *type metadata accessor for HI.Grid()
{
  return &type metadata for HI.Grid;
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Variant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100BC5DF8 + 4 * byte_100EEADA2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100BC5E2C + 4 * byte_100EEAD9D[v4]))();
}

uint64_t sub_100BC5E2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BC5E34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BC5E3CLL);
  return result;
}

uint64_t sub_100BC5E48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BC5E50);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100BC5E54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BC5E5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Variant()
{
  return &type metadata for HI.Grid.Variant;
}

__n128 initializeWithCopy for HI.Grid.Metrics(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HI.Grid.Metrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 26);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 26) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Metrics()
{
  return &type metadata for HI.Grid.Metrics;
}

ValueMetadata *type metadata accessor for HI.IndexBar()
{
  return &type metadata for HI.IndexBar;
}

ValueMetadata *type metadata accessor for HI.IndexBar.NumberOfItemsRequirement()
{
  return &type metadata for HI.IndexBar.NumberOfItemsRequirement;
}

ValueMetadata *type metadata accessor for HI.HoverOutset()
{
  return &type metadata for HI.HoverOutset;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer()
{
  return &type metadata for HI.BottomPlayer;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer.Ornament()
{
  return &type metadata for HI.BottomPlayer.Ornament;
}

void sub_100BC5F9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v5, "userInterfaceIdiom");

  __asm { BR              X10 }
}

double static HI.Modal.modalSize(modalType:sceneSize:navigationBarHeight:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  double result;

  sub_100BC5F9C(a2, a3, a4 & 1, a1);
  return result;
}

unint64_t sub_100BC6154()
{
  unint64_t result;

  result = qword_1011DF180;
  if (!qword_1011DF180)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HI.Modal.ModalType, &type metadata for HI.Modal.ModalType);
    atomic_store(result, (unint64_t *)&qword_1011DF180);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal()
{
  return &type metadata for HI.Modal;
}

uint64_t _s5ModalO9ModalTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100BC61F4 + 4 * byte_100EEB1C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100BC6228 + 4 * byte_100EEB1C0[v4]))();
}

uint64_t sub_100BC6228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BC6230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BC6238);
  return result;
}

uint64_t sub_100BC6244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BC624CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100BC6250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BC6258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal.ModalType()
{
  return &type metadata for HI.Modal.ModalType;
}

_QWORD *sub_100BC6274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100007E8C(&qword_1011DE770);
  v6 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v19 = _swiftEmptyArrayStorage;
    sub_100BCD2D4(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v12(v5, v11, v2);
      swift_dynamicCast(v8, v5, v2, v18, 7);
      v10 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_100BCD2D4(0, v10[2] + 1, 1);
        v10 = v19;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_100BCD2D4(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_100065228((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_1011DE770);
      v11 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_100BC6438(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(isa);
      v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, isa);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100BC64DC(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v25 = _swiftEmptyArrayStorage;
    sub_100BCD344(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (_QWORD *)(a1 + 128);
    do
    {
      v5 = *(v4 - 12);
      v6 = *(v4 - 11);
      v19 = *(v4 - 10);
      v7 = *((_BYTE *)v4 - 72);
      v8 = *((_BYTE *)v4 - 71);
      v18 = *((_BYTE *)v4 - 70);
      v9 = *(v4 - 8);
      v10 = *(v4 - 7);
      v11 = *(v4 - 6);
      v17 = *(v4 - 5);
      v20 = *((_OWORD *)v4 - 1);
      v21 = *((_OWORD *)v4 - 2);
      v12 = *v4;
      v13 = v2[2];
      v14 = v2[3];
      v25 = v2;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v13 >= v14 >> 1)
      {
        sub_100BCD344((_QWORD *)(v14 > 1), v13 + 1, 1);
        v2 = v25;
      }
      v23 = &type metadata for Lyrics.TextLine;
      v24 = &protocol witness table for Lyrics.TextLine;
      v15 = swift_allocObject(&unk_101104EE8, 120, 7);
      *(_QWORD *)&v22 = v15;
      *(_QWORD *)(v15 + 16) = v5;
      *(_QWORD *)(v15 + 24) = v6;
      *(_QWORD *)(v15 + 32) = v19;
      *(_BYTE *)(v15 + 40) = v7;
      *(_BYTE *)(v15 + 41) = v8;
      *(_BYTE *)(v15 + 42) = v18;
      *(_QWORD *)(v15 + 48) = v9;
      *(_QWORD *)(v15 + 56) = v10;
      *(_QWORD *)(v15 + 64) = v11;
      *(_QWORD *)(v15 + 72) = v17;
      *(_OWORD *)(v15 + 80) = v21;
      *(_OWORD *)(v15 + 96) = v20;
      *(_QWORD *)(v15 + 112) = v12;
      v2[2] = v13 + 1;
      sub_100064C48(&v22, (uint64_t)&v2[5 * v13 + 4]);
      v4 += 13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100BC668C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756E6576;
  else
    v3 = 0x652D6D617A616873;
  if (v2)
    v4 = 0xED000073746E6576;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756E6576;
  else
    v5 = 0x652D6D617A616873;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xED000073746E6576;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

BOOL sub_100BC6738(char a1, char a2)
{
  return dbl_100EEBA38[a1] == dbl_100EEBA38[a2];
}

uint64_t sub_100BC675C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000015;
  v3 = 0x8000000100E54360;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000014;
    else
      v5 = 0xD000000000000015;
    if (v4 == 1)
      v6 = 0x8000000100E54380;
    else
      v6 = 0x8000000100E543A0;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD000000000000015;
    v6 = 0x8000000100E54360;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v2 = 0xD000000000000014;
    v3 = 0x8000000100E54380;
  }
  else
  {
    v3 = 0x8000000100E543A0;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_100BC6850(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 1701667182;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x73736572646461;
    else
      v4 = 7300455;
    if (v3 == 1)
      v5 = 0xE700000000000000;
    else
      v5 = 0xE300000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x73736572646461;
      else
        v2 = 7300455;
      if (v6 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE300000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701667182;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v4 != 1701667182)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_100BC6948(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365756E6576;
  else
    v3 = 0x73747369747261;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365756E6576;
  else
    v5 = 0x73747369747261;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100BC69E8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1701669236;
  else
    v2 = 1701667182;
  if ((a2 & 1) != 0)
    v3 = 1701669236;
  else
    v3 = 1701667182;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100BC6A50(uint64_t a1, uint64_t a2)
{
  return sub_100A2CB58(a1, a2, (uint64_t)&qword_1011E6AE0, UIColor_ptr);
}

BOOL sub_100BC6A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_100BC6AD0(uint64_t a1, uint64_t a2)
{
  return sub_100A2CB58(a1, a2, (uint64_t)&qword_1011DF420, CAMediaTimingFunction_ptr);
}

uint64_t sub_100BC6AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t *i;
  int32x2_t v5;
  float64_t v6;
  float64_t v7;
  float64_t v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (float64x2_t *)(a2 + 80);
    for (i = (float64x2_t *)(a1 + 80); ; i = (float64x2_t *)((char *)i + 56))
    {
      v5 = vmovn_s64(vceqq_f64(i[-3], v3[-3]));
      if ((v5.i32[0] & v5.i32[1] & 1) == 0)
        break;
      v6 = i[-2].f64[0];
      v7 = i[-2].f64[1];
      v9 = i[-1].f64[0];
      v8 = i[-1].f64[1];
      v10 = i->f64[0];
      v11 = v3[-2].f64[0];
      v12 = v3[-2].f64[1];
      v14 = v3[-1].f64[0];
      v13 = v3[-1].f64[1];
      v15 = v3->f64[0];
      if (*(_QWORD *)&v6 == *(_QWORD *)&v11 && *(_QWORD *)&v7 == *(_QWORD *)&v12)
      {
        result = 0;
      }
      else
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v6, *(_QWORD *)&v7, *(_QWORD *)&v11, *(_QWORD *)&v12, 0);
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
      if (*(_QWORD *)&v9 != *(_QWORD *)&v14 || *(_QWORD *)&v8 != *(_QWORD *)&v13 || *(_QWORD *)&v10 != *(_QWORD *)&v15)
        return result;
      v3 = (float64x2_t *)((char *)v3 + 56);
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t _s11MusicCoreUI16PlaylistCuratorsO4ViewV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for Artwork(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E8C((uint64_t *)&unk_1011E4A00);
  __chkstk_darwin();
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007E8C(&qword_1011DF428);
  __chkstk_darwin();
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlaylistCurators.Curator(0);
  __chkstk_darwin();
  v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v17 = (uint64_t *)((char *)&v36 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 == *(_QWORD *)(a2 + 16))
  {
    v42 = v9;
    if (!v18 || a1 == a2)
      return 1;
    v40 = a1;
    v41 = v14;
    v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = *(_QWORD *)(v15 + 72);
    v37 = v6;
    v38 = v20;
    v39 = a2;
    while (1)
    {
      sub_100BD5368(a1 + v19, (uint64_t)v17);
      sub_100BD5368(a2 + v19, (uint64_t)v13);
      v21 = v17[1];
      v22 = v13[1];
      v23 = *v17 == *v13 && v21 == v22;
      if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v21, *v13, v22, 0) & 1) == 0)
        break;
      v24 = *(int *)(v41 + 20);
      v25 = (uint64_t)v13 + v24;
      v26 = (uint64_t)&v11[*(int *)(v42 + 48)];
      sub_10004A160((uint64_t)v17 + v24, (uint64_t)v11, (uint64_t *)&unk_1011E4A00);
      sub_10004A160(v25, v26, (uint64_t *)&unk_1011E4A00);
      v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      if (v27((uint64_t)v11, 1, v4) == 1)
      {
        if (v27(v26, 1, v4) != 1)
          goto LABEL_19;
        sub_10004FF60((uint64_t)v11, (uint64_t *)&unk_1011E4A00);
      }
      else
      {
        sub_10004A160((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_1011E4A00);
        if (v27(v26, 1, v4) == 1)
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v4);
LABEL_19:
          sub_10004FF60((uint64_t)v11, &qword_1011DF428);
          break;
        }
        v28 = v43;
        v29 = v8;
        v30 = v37;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v37, v26, v4);
        v31 = sub_100048748(&qword_1011E3E30, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
        v32 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v30, v4, v31);
        v33 = *(void (**)(char *, uint64_t))(v28 + 8);
        v34 = v30;
        v8 = v29;
        v33(v34, v4);
        v33(v29, v4);
        sub_10004FF60((uint64_t)v11, (uint64_t *)&unk_1011E4A00);
        if ((v32 & 1) == 0)
          break;
      }
      sub_100BD53AC((uint64_t)v13);
      sub_100BD53AC((uint64_t)v17);
      a2 = v39;
      v19 += v38;
      --v18;
      a1 = v40;
      if (!v18)
        return 1;
    }
    sub_100BD53AC((uint64_t)v13);
    sub_100BD53AC((uint64_t)v17);
  }
  return 0;
}

Swift::Int sub_100BC6F38(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000015;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 0xD000000000000014;
      v4 = 0x8000000100E54380;
    }
    else
    {
      v4 = 0x8000000100E543A0;
    }
  }
  else
  {
    v4 = 0x8000000100E54360;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double TimedElement.duration.getter(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(double (**)(void))(a2 + 16))();
  return v4 - (*(double (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

void TimedElement.timeRange.getter(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = (*(double (**)(void))(a2 + 8))();
  if (v4 > (*(double (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2))
    __break(1u);
}

double Lyrics.Word.startTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v1 + 16))
    return *(double *)(v1 + 32);
  else
    return 0.0;
}

double Lyrics.Word.endTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
    return *(double *)(v1 + 56 * v2 - 16);
  else
    return 0.0;
}

uint64_t Lyrics.Word.range.getter()
{
  uint64_t v0;

  return sub_100BD09E0(*(_QWORD *)(v0 + 16));
}

uint64_t Lyrics.Word.emphasis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

double Lyrics.Word.Emphasis.factor.getter(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 0.0;
  return result;
}

void Lyrics.Word.Emphasis.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt64 v4;

  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a2;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
}

uint64_t static Lyrics.Word.Emphasis.__derived_enum_equals(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  char v4;

  if (((a2 | a4) & 1) != 0)
    v4 = a2 & a4;
  else
    v4 = *(double *)&a1 == *(double *)&a3;
  return v4 & 1;
}

Swift::Int Lyrics.Word.Emphasis.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Swift::UInt64 v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, 0);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100BC71CC()
{
  uint64_t v0;

  return Lyrics.Word.Emphasis.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_100BC71D8()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_QWORD *)v0;
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v2 = v1;
    else
      v2 = 0;
    Hasher._combine(_:)(v2);
  }
}

Swift::Int sub_100BC7224(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  char v3;
  Swift::UInt64 v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v6, a1);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v2;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_100BC728C(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

void Lyrics.Word.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8[2];
  Swift::UInt64 v9;
  char v10;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease();
  v5 = v1[2];
  swift_bridgeObjectRetain();
  sub_100BD079C(a1, v5);
  swift_bridgeObjectRelease();
  sub_100AB563C(v1 + 3, (uint64_t)v8);
  sub_100AB563C(v8, (uint64_t)&v9);
  if (v10 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = v9;
    Hasher._combine(_:)(1uLL);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v6;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
}

uint64_t static Lyrics.Word.__derived_struct_equals(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  double v10;
  uint64_t v11[2];
  uint64_t v12[2];
  double v13;
  char v14;
  double v15;
  char v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    if ((sub_100BC6AE4(a1[2], a2[2]) & 1) != 0)
    {
      sub_100AB563C(a1 + 3, (uint64_t)v12);
      sub_100AB563C(a2 + 3, (uint64_t)v11);
      sub_100AB563C(v12, (uint64_t)&v13);
      if (v14 == 1)
      {
        sub_100AB563C(v11, (uint64_t)&v15);
        if ((v16 & 1) != 0)
          return 1;
      }
      else
      {
        v10 = v13;
        sub_100AB563C(v11, (uint64_t)&v15);
        if ((v16 & 1) == 0 && v10 == v15)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

Swift::Int Lyrics.Word.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Lyrics.Word.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100BC749C()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  char v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v3, 0);
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_100BC74EC(uint64_t a1)
{
  Lyrics.Word.hash(into:)(a1);
}

Swift::Int sub_100BC7524(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  _QWORD v4[9];
  __int128 v5;
  __int128 v6;
  char v7;

  v2 = v1[1];
  v5 = *v1;
  v6 = v2;
  v7 = *((_BYTE *)v1 + 32);
  Hasher.init(_seed:)(v4, a1);
  Lyrics.Word.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_100BC7570(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  BOOL v13;
  char v14;
  uint64_t result;
  int v16;
  int v17;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(double *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = *(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v9;
  if (v13
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v9, 0),
        result = 0,
        (v14 & 1) != 0))
  {
    v16 = sub_100BC6AE4(v6, v10);
    v17 = v16 ^ 1 | v8;
    if (((v17 | v12) & 1) != 0)
      return v16 & v12 & v17;
    else
      return v7 == v11;
  }
  return result;
}

uint64_t Lyrics.TextLine.BackgroundVocals.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Lyrics.Syllable.wordLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void Lyrics.Syllable.hash(into:)(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 *v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt v8;

  v2 = v1;
  if ((*v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2[1];
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  v6 = v2[2];
  v7 = v2[3];
  sub_10062EB98((uint64_t)v2);
  String.hash(into:)(a1, v6, v7);
  sub_10062EBC0((uint64_t)v2);
  v8 = v2[5];
  Hasher._combine(_:)(v2[4]);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v2[6]);
}

Swift::Int Lyrics.Syllable.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  _QWORD v8[9];

  v1 = v0;
  Hasher.init(_seed:)(v8, 0);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[1];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = v0[2];
  v5 = v1[3];
  sub_10062EB98((uint64_t)v1);
  String.hash(into:)(v8, v4, v5);
  sub_10062EBC0((uint64_t)v1);
  v6 = v1[5];
  Hasher._combine(_:)(v1[4]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1[6]);
  return Hasher._finalize()();
}

Swift::Int sub_100BC7764()
{
  return Lyrics.Syllable.hashValue.getter();
}

void sub_100BC77A4(uint64_t a1)
{
  Lyrics.Syllable.hash(into:)(a1);
}

Swift::Int sub_100BC77E4(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  _QWORD v12[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  Hasher.init(_seed:)(v12, a1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v3;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain();
  String.hash(into:)(v12, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

BOOL sub_100BC78A0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t Lyrics.TextLine.backgroundVocals.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[8];

  (*(void (**)(_QWORD *__return_ptr))(v1 + 88))(v4);
  return sub_100065228((uint64_t)v4, a1, &qword_1011DF188);
}

uint64_t Lyrics.TextLine.backgroundText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3[8];
  _BYTE v4[16];
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 88))(v3);
  sub_100065228((uint64_t)v3, (uint64_t)v4, &qword_1011DF188);
  if (!v6)
    return 0;
  v1 = v5;
  swift_bridgeObjectRetain();
  sub_100BD0A20(v3);
  return v1;
}

uint64_t Lyrics.TextLine.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v1._object = (void *)0x8000000100E54E50;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x6954747261747320;
  v4._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)v0);
  v5._countAndFlagsBits = 0x656D6954646E6520;
  v5._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v5);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 8));
  v6._countAndFlagsBits = 0x3D7478657420;
  v6._object = (void *)0xE600000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = (*(uint64_t (**)(void))(v0 + 56))();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  return v10[0];
}

uint64_t Lyrics.TextLine.textAlignment.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 26) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 24) & 1) == 0)
      return 2;
  }
  else if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    return 2;
  }
  return 0;
}

_UNKNOWN **static Lyrics.Capability.allCases.getter()
{
  return &off_101102708;
}

uint64_t Lyrics.TextLine.init(lineIndex:startTime:endTime:primaryVocalsStartTime:primaryVocalsEndTime:agentAlignment:direction:lyricsDirection:capabilities:localizedTextProvider:localizedWordsProvider:localizedBackgroundVocalsProvider:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, __int128 a14, uint64_t a15)
{
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(_QWORD *)(a9 + 16) = result;
  *(_BYTE *)(a9 + 24) = a2 & 1;
  *(_BYTE *)(a9 + 25) = a3 & 1;
  *(_BYTE *)(a9 + 26) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(double *)(a9 + 40) = a12;
  *(double *)(a9 + 48) = a13;
  *(_QWORD *)(a9 + 56) = a6;
  *(_QWORD *)(a9 + 64) = a7;
  *(_QWORD *)(a9 + 72) = a8;
  *(_OWORD *)(a9 + 80) = a14;
  *(_QWORD *)(a9 + 96) = a15;
  return result;
}

uint64_t Lyrics.TextLine.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  if ((*(_QWORD *)v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  v5 = (*(uint64_t (**)(void))(v1 + 56))();
  v7 = v6;
  String.hash(into:)(a1, v5, v6);
  return swift_bridgeObjectRelease(v7);
}

uint64_t Lyrics.TextLine.BackgroundVocals.words.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Int Lyrics.TextLine.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Lyrics.TextLine.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100BC7C2C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 26) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    return 0;
  }
  return 2;
}

Swift::Int sub_100BC7C54(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Lyrics.TextLine.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100BC7C90(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  uint64_t v12;
  _OWORD v13[6];
  uint64_t v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0((uint64_t)v11, (uint64_t)v13) & 1;
}

double JSContainerDetail.LyricsSnippetData.endTime.getter(double a1, double a2)
{
  return a2;
}

uint64_t Lyrics.InstrumentalLine.lyricsDirection.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t Lyrics.InstrumentalLine.textAlignment.getter(uint64_t a1, char a2)
{
  return 2 * (a2 & 1u);
}

uint64_t Lyrics.InstrumentalLine.debugDescription.getter(double a1, double a2)
{
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v4._object = (void *)0x8000000100E54E70;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6954747261747320;
  v7._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v7);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  v8._countAndFlagsBits = 0x656D6954646E6520;
  v8._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v8);
  Double.write<A>(to:)(v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
  return v10[0];
}

uint64_t Lyrics.SongwritersLine.textAlignment.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 24))
    return 2;
  else
    return 0;
}

uint64_t sub_100BC7E4C()
{
  uint64_t v0;

  return Lyrics.InstrumentalLine.debugDescription.getter(*(double *)(v0 + 8), *(double *)(v0 + 16));
}

uint64_t Lyrics.SongwritersLine.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  v1._object = (void *)0x8000000100E54E90;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 8));
  v4._countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 16));
  v5._countAndFlagsBits = 0x697277676E6F7320;
  v5._object = (void *)0xED00003D73726574;
  String.append(_:)(v5);
  v6 = swift_bridgeObjectRetain();
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_100BD0A88(v0);
  return v9[0];
}

uint64_t sub_100BC7FCC()
{
  return Lyrics.SongwritersLine.debugDescription.getter();
}

uint64_t JSApplication.SubscriptionFlowConfiguration.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.availableLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

double Lyrics.leadingSilence.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t Lyrics.vocalistsType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Lyrics.songwriters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.currentLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 112, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Lyrics.currentLanguage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 112, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*Lyrics.currentLanguage.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Lyrics.staticText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 136);
  }
  else
  {
    v1 = sub_100BC816C(v0);
    *(_QWORD *)(v0 + 136) = v1;
    *(_QWORD *)(v0 + 144) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100BC816C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t (*v16)(__n128);
  void (*v17)(uint64_t *__return_ptr);
  __n128 v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31[8];
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 32);
  v29 = 0;
  v30 = 0xE000000000000000;
  v27 = *(_QWORD *)(v1 + 16);
  if (v27)
  {
    v25 = v1;
    v26 = v1 + 32;
    swift_bridgeObjectRetain_n(v1, 2);
    v2 = 0;
    do
    {
      v6 = *(_QWORD *)(v26 + 8 * v2);
      v3 = v29;
      v4 = v30;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v28 = v2;
        swift_bridgeObjectRetain_n(v6, 2);
        swift_bridgeObjectRetain();
        v8 = v6 + 128;
        do
        {
          v16 = *(uint64_t (**)(__n128))(v8 - 40);
          v17 = *(void (**)(uint64_t *__return_ptr))(v8 - 8);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          v18 = swift_retain();
          if ((v30 & 0xF00000000000000) != 0)
          {
            v19._countAndFlagsBits = 10;
            v19._object = (void *)0xE100000000000000;
            String.append(_:)(v19);
          }
          v20 = v16(v18);
          v22 = v21;
          v17(v31);
          sub_100065228((uint64_t)v31, (uint64_t)v32, &qword_1011DF188);
          v12 = v34;
          if (v34)
          {
            v9 = v33;
            swift_bridgeObjectRetain();
            sub_100BD0A20(v31);
            v10._countAndFlagsBits = v9;
            v10._object = (void *)v12;
            String.append(_:)(v10);
            v11._countAndFlagsBits = 41;
            v11._object = (void *)0xE100000000000000;
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
            v12 = 40;
            v13 = (void *)0xE100000000000000;
          }
          else
          {
            v13 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          v14._countAndFlagsBits = v12;
          v14._object = v13;
          String.append(_:)(v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15._countAndFlagsBits = v20;
          v15._object = v22;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          v8 += 104;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v29;
        v4 = v30;
        v2 = v28;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      ++v2;
      v29 = v3;
      v30 = v4;
      v5._countAndFlagsBits = 10;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
    while (v2 != v27);
    swift_bridgeObjectRelease_n(v25, 2);
  }
  countAndFlagsBits = String.trim()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t Lyrics.staticText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*Lyrics.staticText.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Lyrics.staticText.getter();
  a1[1] = v3;
  return sub_100BC8448;
}

uint64_t sub_100BC8448(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 136) = v3;
  *(_QWORD *)(v1 + 144) = v2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t Lyrics.alignment(for:default:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(v3 + 96))
  {
    v4 = a1[3];
    v5 = a1[4];
    sub_100007E68(a1, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  }
  else
  {
    sub_100064C78((uint64_t)a1, (uint64_t)v11);
    if ((a3 & 1) != 0)
    {
      v9 = v12;
      v10 = v13;
      sub_100007E68(v11, v12);
      a2 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    }
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v11);
    return a2;
  }
}

double *Lyrics.originalLine(for:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = 0uLL;
  if (!v4)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    goto LABEL_21;
  }
  v6 = result;
  v33 = a2;
  v7 = *result;
  swift_bridgeObjectRetain_n(v3, 2);
  v8 = 0;
  while (1)
  {
    v9 = v3 + v8;
    v10 = *(_OWORD *)(v3 + v8 + 32);
    if (*(double *)&v10 != v7 || *((double *)&v10 + 1) != v6[1])
      goto LABEL_3;
    v40 = *(_QWORD *)(v9 + 48);
    v36 = *(unsigned __int8 *)(v9 + 56);
    v34 = *(unsigned __int8 *)(v9 + 57);
    v35 = *(unsigned __int8 *)(v9 + 58);
    v37 = *(_OWORD *)(v3 + v8 + 32);
    v38 = *(_OWORD *)(v9 + 72);
    v11 = *(uint64_t (**)(_QWORD))(v9 + 88);
    v43 = *(_OWORD *)(v9 + 112);
    v44 = *(_OWORD *)(v9 + 96);
    v12 = *(_QWORD *)(v9 + 128);
    v42 = *(_QWORD *)(v9 + 64);
    swift_bridgeObjectRetain();
    swift_retain(v44);
    swift_retain(v43);
    v41 = v12;
    v13 = swift_retain(v12);
    v39 = v11;
    v14 = v11(v13);
    v16 = v15;
    v17 = (*((uint64_t (**)(void))v6 + 7))();
    if (v14 == v17 && v16 == v18)
    {
      swift_bridgeObjectRelease_n(v3, 2);
      goto LABEL_16;
    }
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) != 0)
      break;
    swift_release(v41);
    swift_release(v43);
    swift_release(v44);
    swift_bridgeObjectRelease(v42);
LABEL_3:
    v8 += 104;
    if (!--v4)
    {
      result = (double *)swift_bridgeObjectRelease_n(v3, 2);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      a2 = v33;
      v5 = 0uLL;
      goto LABEL_21;
    }
  }
  v16 = v3;
LABEL_16:
  result = (double *)swift_bridgeObjectRelease_n(v16, 2);
  v30 = 256;
  if (!v34)
    v30 = 0;
  v31 = v30 | v36;
  v32 = 0x10000;
  if (!v35)
    v32 = 0;
  v23 = v31 | v32;
  v5 = v37;
  v27 = v38;
  a2 = v33;
  v25 = v39;
  v22 = v40;
  v26 = v41;
  v24 = v42;
  v29 = v43;
  v28 = v44;
LABEL_21:
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v24;
  *(_OWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 56) = v25;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v29;
  *(_QWORD *)(a2 + 96) = v26;
  return result;
}

void sub_100BC876C(_QWORD *a1@<X8>)
{
  *a1 = &off_101102730;
}

NLLanguage sub_100BC877C()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;

  v0 = sub_100007E8C(&qword_1011DF4E8);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100EA7A80;
  *(_QWORD *)(v1 + 32) = NLLanguageArabic;
  *(_QWORD *)(v1 + 40) = NLLanguageHebrew;
  qword_10124F408 = v1;
  v2 = NLLanguageArabic;
  return NLLanguageHebrew;
}

NLLanguage sub_100BC87E8()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  NSString *v3;

  v0 = sub_100007E8C(&qword_1011DF4E8);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100EA7AC0;
  *(_QWORD *)(v1 + 32) = NLLanguageJapanese;
  *(_QWORD *)(v1 + 40) = NLLanguageSimplifiedChinese;
  *(_QWORD *)(v1 + 48) = NLLanguageTraditionalChinese;
  qword_10124F410 = v1;
  v2 = NLLanguageJapanese;
  v3 = NLLanguageSimplifiedChinese;
  return NLLanguageTraditionalChinese;
}

uint64_t Lyrics.audioAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

void Lyrics.AudioAttribute.hash(into:)(double a1)
{
  Swift::UInt64 v2;

  Hasher._combine(_:)(0);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

BOOL static Lyrics.AudioAttribute.__derived_enum_equals(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

Swift::Int Lyrics.AudioAttribute.hashValue.getter(double a1)
{
  Swift::UInt64 v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(0);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *(_QWORD *)&a1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100BC8924()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100BC8978()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100BC89B8(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(0);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void Lyrics.spatialOffset.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (1 << v2 < 64)
    v3 = ~(-1 << (1 << v2));
  if ((v3 & *(_QWORD *)(v1 + 56)) == 0)
  {
    v4 = v2 & 0x3F;
    if (v4 > 6
      && !*(_QWORD *)(v1 + 64)
      && v4 >= 8
      && !*(_QWORD *)(v1 + 72)
      && !*(_QWORD *)(v1 + 80)
      && v4 >= 9
      && !*(_QWORD *)(v1 + 88))
    {
      v5 = (unint64_t)((1 << v2) + 63) >> 6;
      if (v5 <= 5)
        v5 = 5;
      v6 = v5 - 5;
      v7 = (uint64_t *)(v1 + 96);
      v8 = 256;
      do
      {
        if (!v6)
          break;
        v9 = *v7++;
        --v6;
        v8 += 64;
      }
      while (!v9);
    }
  }
}

uint64_t Lyrics.__allocating_init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 160, 7);
  Lyrics.init(identifier:songInfo:)(a1, a2, a3);
  return v7;
}

uint64_t Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  double v40;
  uint64_t v41;
  id v42;
  double v43;
  void *v44;
  char **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t inited;
  void *v50;
  _QWORD *v51;
  void *v52;
  id v53;
  char v54;
  id v55;
  double v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  void *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  int64_t v123;
  char *isUniquelyReferenced_nonNull_native;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __n128 v144;
  char v145;
  _QWORD *v146;
  uint64_t v147;
  int64_t v148;
  char *v149;
  _UNKNOWN **v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  double v156;
  double v157;
  int v158;
  int v159;
  int v160;
  char **v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  __int128 v177;
  double v178;
  id v179;
  uint64_t v180;
  double v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  id v188;
  void *v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t result;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  BOOL *v211;
  uint64_t v212;
  char *v213;
  _BOOL4 v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  __int128 v221;
  _UNKNOWN **v222;
  char *v223;
  int64_t v224;
  void *v225;
  __int128 v226;
  __int128 v227;
  char v228[40];
  __int128 v229;
  ValueMetadata *v230;
  _UNKNOWN **v231;
  _QWORD *v232;
  char v233[12];
  char v234[8];

  *(_QWORD *)&v226 = type metadata accessor for Locale.Language(0);
  v224 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v223 = (char *)&v206 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[14] = 0;
  v8 = v3 + 14;
  v3[15] = 0;
  v9 = sub_100BA7E5C((uint64_t)_swiftEmptyArrayStorage);
  v208 = v3;
  v3[16] = v9;
  v10 = v3 + 16;
  v3[17] = 0;
  v3[18] = 0;
  v3[2] = a1;
  v3[3] = a2;
  v225 = a3;
  v11 = objc_msgSend(a3, "language");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = v208;
  v208[8] = v13;
  v16[9] = v15;
  v17 = v225;
  v18 = objc_msgSend(v225, "availableTranslations");
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);

  v16[10] = v19;
  v21 = v16[8];
  v20 = v16[9];
  swift_beginAccess(v8, v234, 1, 0);
  v16[14] = v21;
  v16[15] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = sub_100BA7E5C((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(v10, v233, 1, 0);
  v16[16] = v22;
  objc_msgSend(v17, "leadingSilence", swift_bridgeObjectRelease().n128_f64[0]);
  v16[11] = v23;
  v24 = objc_msgSend(v17, "songwriters");
  v207 = sub_10004A07C(0, &qword_1011DF190, MSVLyricsSongWriter_ptr);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v207);

  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v41 = v25;
    else
      v41 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_6;
LABEL_19:
    *(_QWORD *)&v40 = swift_bridgeObjectRelease().n128_u64[0];
    v28 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v26)
    goto LABEL_19;
LABEL_6:
  *(_QWORD *)&v229 = _swiftEmptyArrayStorage;
  sub_100BCD30C(0, v26 & ~(v26 >> 63), 0);
  if (v26 < 0)
  {
    __break(1u);
LABEL_113:
    if (v25 < 0)
      v142 = v25;
    else
      v142 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v111 = _CocoaArrayWrapper.endIndex.getter(v142);
    swift_bridgeObjectRelease();
    if (!v111)
      goto LABEL_117;
LABEL_73:
    if (v111 < 1)
    {
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return result;
    }
    *(_QWORD *)&v227 = v16;
    v112 = 0;
    v113 = (char *)_swiftEmptyArrayStorage;
    v215 = _swiftEmptyArrayStorage;
    while (1)
    {
      if ((v25 & 0xC000000000000001) != 0)
        v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v112, v25);
      else
        v114 = *(id *)(v25 + 8 * v112 + 32);
      v115 = v114;
      v116 = objc_msgSend(v114, "lines");
      v117 = sub_10004A07C(0, &qword_1011DF1A8, MSVLyricsLine_ptr);
      v118 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v116, v117);

      sub_100BD2F10(v118, v209, v210, v211, v225, v214, (uint64_t)v222, v212);
      v120 = v119;
      swift_bridgeObjectRelease();
      v121 = *(_QWORD *)(v120 + 16);
      v122 = *((_QWORD *)v113 + 2);
      v123 = v122 + v121;
      if (__OFADD__(v122, v121))
        goto LABEL_101;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v113);
      v125 = v113;
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v123 <= *((_QWORD *)v113 + 3) >> 1)
      {
        if (!*(_QWORD *)(v120 + 16))
          goto LABEL_90;
      }
      else
      {
        if (v122 <= v123)
          v129 = v122 + v121;
        else
          v129 = v122;
        v125 = sub_100BCC570(isUniquelyReferenced_nonNull_native, v129, 1, v113);
        if (!*(_QWORD *)(v120 + 16))
        {
LABEL_90:
          v113 = v125;
          if (v121)
            goto LABEL_102;
          goto LABEL_91;
        }
      }
      v126 = *((_QWORD *)v125 + 2);
      if ((*((_QWORD *)v125 + 3) >> 1) - v126 < v121)
        goto LABEL_103;
      v113 = v125;
      swift_arrayInitWithCopy(&v125[104 * v126 + 32]);
      if (v121)
      {
        v127 = *((_QWORD *)v113 + 2);
        v79 = __OFADD__(v127, v121);
        v128 = v127 + v121;
        if (v79)
          goto LABEL_105;
        *((_QWORD *)v113 + 2) = v128;
      }
LABEL_91:
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v215) & 1) == 0)
        v215 = sub_100BCCA08(0, v215[2] + 1, 1, v215, &qword_1011DF1B0, &qword_1011DF478);
      v131 = v215[2];
      v130 = v215[3];
      if (v131 >= v130 >> 1)
        v215 = sub_100BCCA08((_QWORD *)(v130 > 1), v131 + 1, 1, v215, &qword_1011DF1B0, &qword_1011DF478);
      ++v112;
      v132 = v215;
      v215[2] = v131 + 1;
      v132[v131 + 4] = v120;

      if (v111 == v112)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = (_QWORD *)v227;
        goto LABEL_118;
      }
    }
  }
  v222 = (_UNKNOWN **)v10;
  v27 = 0;
  v28 = (_QWORD *)v229;
  *(_QWORD *)&v227 = v25 & 0xC000000000000001;
  v29 = v25;
  v30 = v26;
  do
  {
    if ((_QWORD)v227)
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
    else
      v31 = *(id *)(v25 + 8 * v27 + 32);
    v32 = v31;
    v33 = objc_msgSend(v31, "name");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    *(_QWORD *)&v229 = v28;
    v38 = v28[2];
    v37 = v28[3];
    if (v38 >= v37 >> 1)
    {
      sub_100BCD30C((char *)(v37 > 1), v38 + 1, 1);
      v28 = (_QWORD *)v229;
    }
    ++v27;
    v28[2] = v38 + 1;
    v39 = &v28[2 * v38];
    v39[4] = v34;
    v39[5] = v36;
    v25 = v29;
  }
  while (v30 != v27);
  *(_QWORD *)&v40 = swift_bridgeObjectRelease().n128_u64[0];
  v10 = v222;
LABEL_20:
  v208[13] = v28;
  v42 = objc_msgSend(v225, "audioAttributes", v40);
  if (v42)
  {
    v44 = v42;
    v45 = &selRef_originalSize;
    if ((objc_msgSend(v42, "isSpatialRole") & 1) != 0)
    {
      objc_msgSend(v44, "lyricsOffset");
      v47 = v46;

      v48 = sub_100007E8C(&qword_1011DF1B8);
      inited = swift_initStackObject(v48, v228);
      *(_OWORD *)(inited + 16) = xmmword_100EA7AA0;
      *(_QWORD *)(inited + 32) = v47;
      v50 = (void *)sub_100BBFCE0(inited);
      *(_QWORD *)&v43 = swift_setDeallocating(inited).n128_u64[0];
    }
    else
    {

      v50 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    v50 = &_swiftEmptySetSingleton;
    v45 = &selRef_originalSize;
  }
  v51 = v208;
  v208[19] = v50;
  v52 = v225;
  v53 = objc_msgSend(v225, "type", v43);
  v54 = v53 == (id)1;
  if (v53 == (id)2)
    v54 = 2;
  *((_BYTE *)v51 + 56) = v54;
  v212 = swift_allocObject(&unk_101104E48, 24, 7);
  v206 = v212 + 16;
  swift_weakInit(v212 + 16, 0);
  v211 = (BOOL *)swift_allocObject(&unk_101104E70, 17, 7);
  v211[16] = 0;
  v210 = swift_allocObject(&unk_101104E98, 24, 7);
  *(_QWORD *)(v210 + 16) = 0;
  v55 = objc_msgSend(v52, v45[368]);
  if (v55)
  {
    v57 = v55;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v60 = v59;

    swift_bridgeObjectRetain();
    v61 = v223;
    v62 = Locale.Language.init(identifier:)(v58, v60);
    v214 = Locale.Language.characterDirection.getter(v62) == 2;
    (*(void (**)(char *, _QWORD))(v224 + 8))(v61, v226);
    *(_QWORD *)&v56 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v214 = 0;
  }
  v63 = objc_msgSend(v225, v45[368], v56);
  if (v63)
  {
    v64 = v63;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v67 = v66;

  }
  else
  {
    v65 = 0;
    v67 = 0;
  }
  v222 = sub_100BD0B08(v65, v67);
  v68 = objc_msgSend(v225, "translationsMap", swift_bridgeObjectRelease().n128_f64[0]);
  v69 = sub_100007E8C(&qword_1011DF198);
  v70 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v68, &type metadata for String, v69, &protocol witness table for String);

  v71 = 0;
  v72 = *(_QWORD *)(v70 + 64);
  v223 = (char *)(v70 + 64);
  *(_QWORD *)&v226 = v70;
  v73 = 1 << *(_BYTE *)(v70 + 32);
  v74 = -1;
  if (v73 < 64)
    v74 = ~(-1 << v73);
  v75 = v74 & v72;
  v224 = (unint64_t)(v73 + 63) >> 6;
  while (1)
  {
    if (v75)
    {
      v77 = __clz(__rbit64(v75));
      v75 &= v75 - 1;
      *(_QWORD *)&v227 = v71;
      v78 = v77 | (v71 << 6);
      goto LABEL_51;
    }
    v79 = __OFADD__(v71, 1);
    v80 = v71 + 1;
    if (v79)
      goto LABEL_100;
    if (v80 >= v224)
      break;
    v81 = *(_QWORD *)&v223[8 * v80];
    if (!v81)
    {
      v82 = v80 + 1;
      if (v80 + 1 >= v224)
        break;
      v81 = *(_QWORD *)&v223[8 * v82];
      if (!v81)
      {
        v82 = v80 + 2;
        if (v80 + 2 >= v224)
          break;
        v81 = *(_QWORD *)&v223[8 * v82];
        if (!v81)
        {
          v82 = v80 + 3;
          if (v80 + 3 >= v224)
            break;
          v81 = *(_QWORD *)&v223[8 * v82];
          if (!v81)
          {
            while (1)
            {
              v80 = v82 + 1;
              if (__OFADD__(v82, 1))
                goto LABEL_104;
              if (v80 >= v224)
                goto LABEL_66;
              v81 = *(_QWORD *)&v223[8 * v80];
              ++v82;
              if (v81)
                goto LABEL_50;
            }
          }
        }
      }
      v80 = v82;
    }
LABEL_50:
    v75 = (v81 - 1) & v81;
    *(_QWORD *)&v227 = v80;
    v78 = __clz(__rbit64(v81)) + (v80 << 6);
LABEL_51:
    v83 = (uint64_t *)(*(_QWORD *)(v226 + 48) + 16 * v78);
    v84 = *v83;
    v85 = v83[1];
    swift_bridgeObjectRetain_n(v85, 2);
    v86 = v225;
    v87 = swift_bridgeObjectRetain();
    v88 = sub_100BD2B98(v87, v86, v84, v85);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_beginAccess(v10, &v229, 33, 0);
    v89 = swift_isUniquelyReferenced_nonNull_native(*v10);
    v232 = (_QWORD *)*v10;
    v90 = v232;
    v91 = v10;
    *v10 = 0x8000000000000000;
    v93 = sub_10079C2C4(v84, v85);
    v94 = v90[2];
    v95 = (v92 & 1) == 0;
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
    {
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v97 = v92;
    if (v90[3] >= v96)
    {
      if ((v89 & 1) != 0)
      {
        if ((v92 & 1) != 0)
          goto LABEL_36;
      }
      else
      {
        sub_100BCF970();
        v90 = v232;
        if ((v97 & 1) != 0)
          goto LABEL_36;
      }
    }
    else
    {
      sub_100BCE9D0(v96, v89);
      v90 = v232;
      v98 = sub_10079C2C4(v84, v85);
      if ((v97 & 1) != (v99 & 1))
        goto LABEL_179;
      v93 = v98;
      if ((v97 & 1) != 0)
      {
LABEL_36:
        v76 = v90[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v76 + 8 * v93) = v88;
        goto LABEL_37;
      }
    }
    v90[(v93 >> 6) + 8] |= 1 << v93;
    v100 = (uint64_t *)(v90[6] + 16 * v93);
    *v100 = v84;
    v100[1] = v85;
    *(_QWORD *)(v90[7] + 8 * v93) = v88;
    v101 = v90[2];
    v79 = __OFADD__(v101, 1);
    v102 = v101 + 1;
    if (v79)
      goto LABEL_99;
    v90[2] = v102;
    swift_bridgeObjectRetain();
LABEL_37:
    v10 = v91;
    *v91 = v90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(&v229);
    v71 = v227;
  }
LABEL_66:
  swift_release();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
LABEL_67:
    v103 = &_swiftEmptySetSingleton;
    goto LABEL_68;
  }
LABEL_106:
  if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    goto LABEL_67;
  sub_100BBFE34((uint64_t)_swiftEmptyArrayStorage);
  v103 = v140;
LABEL_68:
  v104 = swift_allocObject(&unk_101104EC0, 24, 7);
  v209 = v104;
  *(_QWORD *)(v104 + 16) = v103;
  v16 = (_QWORD *)(v104 + 16);
  v105 = objc_msgSend(v225, "lyricsSections");
  v106 = sub_10004A07C(0, &qword_1011DF1A0, MSVLyricsSection_ptr);
  v107 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v105, v106);

  if ((unint64_t)v107 >> 62)
  {
    if (v107 < 0)
      v141 = v107;
    else
      v141 = v107 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v108 = _CocoaArrayWrapper.endIndex.getter(v141);
    swift_bridgeObjectRelease();
  }
  else
  {
    v108 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v109 = swift_bridgeObjectRelease().n128_u64[0];
  if (v108 <= 0)
  {
    v133 = v225;
    v134 = objc_msgSend(v225, "lyricsLines", v109);
    v135 = sub_10004A07C(0, &qword_1011DF1A8, MSVLyricsLine_ptr);
    v136 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v134, v135);

    sub_100BD2F10(v136, v209, v210, v211, v133, v214, (uint64_t)v222, v212);
    v113 = v137;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v138 = sub_100007E8C(&qword_1011DF1B0);
    v139 = swift_allocObject(v138, 40, 7);
    *(_OWORD *)(v139 + 16) = xmmword_100EA7AA0;
    v215 = (_QWORD *)v139;
    *(_QWORD *)(v139 + 32) = v113;
    swift_bridgeObjectRetain();
    goto LABEL_118;
  }
  v110 = objc_msgSend(v225, "lyricsSections", v109);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v110, v106);

  if ((unint64_t)v25 >> 62)
    goto LABEL_113;
  v111 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v111)
    goto LABEL_73;
LABEL_117:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v113 = (char *)_swiftEmptyArrayStorage;
  v215 = _swiftEmptyArrayStorage;
LABEL_118:
  swift_beginAccess(v16, &v232, 0, 0);
  v143 = swift_bridgeObjectRetain();
  v145 = sub_100BD3C20(v143, v144);
  swift_bridgeObjectRelease();
  v146 = v208;
  *((_BYTE *)v208 + 96) = v145;
  v146[6] = v113;
  v147 = *((_QWORD *)v113 + 2);
  v213 = v113;
  if (v147)
  {
    v148 = *((_QWORD *)v113 + 14);
    v149 = (char *)*((_QWORD *)v113 + 12);
    v150 = (_UNKNOWN **)*((_QWORD *)v113 + 8);
    v151 = *((double *)v113 + 4);
    v152 = *((double *)v113 + 5);
    swift_bridgeObjectRetain_n(v113, 2);
    v222 = v150;
    swift_bridgeObjectRetain();
    v223 = v149;
    swift_retain();
    v224 = v148;
    swift_retain();
    swift_retain();
    v153 = 0;
    v154 = 0;
    v155 = _swiftEmptyArrayStorage;
    while (1)
    {
      v157 = *(double *)&v213[v153 + 32];
      v156 = *(double *)&v213[v153 + 40];
      v158 = v213[v153 + 56];
      v159 = v213[v153 + 57];
      v160 = v213[v153 + 58];
      v161 = *(char ***)&v213[v153 + 64];
      v162 = *(_OWORD *)&v213[v153 + 72];
      v163 = *(_QWORD *)&v213[v153 + 88];
      v227 = *(_OWORD *)&v213[v153 + 96];
      v226 = *(_OWORD *)&v213[v153 + 112];
      v164 = *(_QWORD *)&v213[v153 + 128];
      v221 = v162;
      v220 = v158;
      v219 = v159;
      v218 = v160;
      v217 = v163;
      if (v154 || v151 <= 7.0)
      {
        if (v157 - v152 <= 7.0)
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native(v155) & 1) == 0)
            v155 = sub_100BCC68C(0, v155[2] + 1, 1, v155);
          v169 = v155[2];
          v168 = v155[3];
          v170 = v169 + 1;
          if (v169 >= v168 >> 1)
            v155 = sub_100BCC68C((_QWORD *)(v168 > 1), v169 + 1, 1, v155);
          v230 = &type metadata for Lyrics.InstrumentalLine;
          v231 = &protocol witness table for Lyrics.InstrumentalLine;
          v171 = swift_allocObject(&unk_101104F38, 48, 7);
          *(_QWORD *)&v229 = v171;
          *(_QWORD *)(v171 + 16) = v154;
          *(double *)(v171 + 24) = v152 + 0.1;
          *(double *)(v171 + 32) = v157;
          *(_BYTE *)(v171 + 40) = v214;
          v155[2] = v170;
          sub_100064C48(&v229, (uint64_t)&v155[5 * v169 + 4]);
          v79 = __OFADD__(v154++, 1);
          if (v79)
            goto LABEL_168;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v155) & 1) == 0)
          v155 = sub_100BCC68C(0, v155[2] + 1, 1, v155);
        v166 = v155[2];
        v165 = v155[3];
        if (v166 >= v165 >> 1)
          v155 = sub_100BCC68C((_QWORD *)(v165 > 1), v166 + 1, 1, v155);
        v230 = &type metadata for Lyrics.InstrumentalLine;
        v231 = &protocol witness table for Lyrics.InstrumentalLine;
        v167 = swift_allocObject(&unk_101104F38, 48, 7);
        *(_QWORD *)&v229 = v167;
        *(_QWORD *)(v167 + 16) = 0;
        *(_QWORD *)(v167 + 24) = 0;
        *(double *)(v167 + 32) = v151;
        *(_BYTE *)(v167 + 40) = v214;
        v155[2] = v166 + 1;
        sub_100064C48(&v229, (uint64_t)&v155[5 * v166 + 4]);
        v154 = 1;
      }
      v216 = v147;
      swift_bridgeObjectRetain_n(v161, 2);
      v170 = v227;
      swift_retain_n(v227, 2);
      v172 = v226;
      swift_retain_n(v226, 2);
      swift_retain_n(v164, 2);
      if ((swift_isUniquelyReferenced_nonNull_native(v155) & 1) == 0)
        v155 = sub_100BCC68C(0, v155[2] + 1, 1, v155);
      v174 = v155[2];
      v173 = v155[3];
      v175 = v155;
      if (v174 >= v173 >> 1)
        v175 = sub_100BCC68C((_QWORD *)(v173 > 1), v174 + 1, 1, v155);
      v230 = &type metadata for Lyrics.TextLine;
      v231 = &protocol witness table for Lyrics.TextLine;
      v176 = swift_allocObject(&unk_101104EE8, 120, 7);
      *(_QWORD *)&v229 = v176;
      *(double *)(v176 + 16) = v157;
      *(double *)(v176 + 24) = v156;
      *(_QWORD *)(v176 + 32) = v154;
      *(_BYTE *)(v176 + 40) = v220;
      *(_BYTE *)(v176 + 41) = v219;
      *(_BYTE *)(v176 + 42) = v218;
      *(_QWORD *)(v176 + 48) = v161;
      *(_OWORD *)(v176 + 56) = v221;
      *(_QWORD *)(v176 + 72) = v217;
      v177 = v226;
      *(_OWORD *)(v176 + 80) = v227;
      *(_OWORD *)(v176 + 96) = v177;
      *(_QWORD *)(v176 + 112) = v164;
      v175[2] = v174 + 1;
      v155 = v175;
      sub_100064C48(&v229, (uint64_t)&v175[5 * v174 + 4]);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      v79 = __OFADD__(v154++, 1);
      if (v79)
        break;
      v153 += 104;
      v151 = v157;
      v152 = v156;
      v222 = (_UNKNOWN **)v161;
      v223 = (char *)v170;
      v224 = v172;
      v147 = v216 - 1;
      if (v216 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        *(_QWORD *)&v178 = swift_release().n128_u64[0];
        goto LABEL_144;
      }
    }
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    if (v170 < 0)
      v204 = v170;
    else
      v204 = v170 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v180 = _CocoaArrayWrapper.endIndex.getter(v204);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v154 = 0;
    v155 = _swiftEmptyArrayStorage;
    v156 = 0.0;
LABEL_144:
    v161 = &selRef_originalSize;
    v179 = objc_msgSend(v225, "songwriters", v178);
    v170 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v179, v207);

    if ((unint64_t)v170 >> 62)
      goto LABEL_169;
    v180 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v181 = swift_bridgeObjectRelease().n128_u64[0];
  if (!v180)
  {
    swift_bridgeObjectRelease();
    v197 = v206;
    goto LABEL_166;
  }
  v182 = objc_msgSend(v225, v161[452], v181);
  v183 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v182, v207);

  if ((unint64_t)v183 >> 62)
  {
    if (v183 < 0)
      v205 = v183;
    else
      v205 = v183 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v184 = _CocoaArrayWrapper.endIndex.getter(v205);
    swift_bridgeObjectRelease();
  }
  else
  {
    v184 = *(_QWORD *)((v183 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v226 = v155;
  if (!v184)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v186 = _swiftEmptyArrayStorage;
    goto LABEL_161;
  }
  *(_QWORD *)&v229 = _swiftEmptyArrayStorage;
  sub_100BCD30C(0, v184 & ~(v184 >> 63), 0);
  if (v184 < 0)
    goto LABEL_178;
  v185 = 0;
  v186 = (_QWORD *)v229;
  *(_QWORD *)&v227 = v183 & 0xC000000000000001;
  v187 = v183;
  do
  {
    if ((_QWORD)v227)
      v188 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v185, v183);
    else
      v188 = *(id *)(v183 + 8 * v185 + 32);
    v189 = v188;
    v190 = objc_msgSend(v188, "name");
    v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
    v193 = v192;

    *(_QWORD *)&v229 = v186;
    v195 = v186[2];
    v194 = v186[3];
    if (v195 >= v194 >> 1)
    {
      sub_100BCD30C((char *)(v194 > 1), v195 + 1, 1);
      v186 = (_QWORD *)v229;
    }
    ++v185;
    v186[2] = v195 + 1;
    v196 = &v186[2 * v195];
    v196[4] = v191;
    v196[5] = v193;
    v183 = v187;
  }
  while (v184 != v185);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_161:
  v198 = swift_isUniquelyReferenced_nonNull_native(v226);
  v197 = v206;
  if ((v198 & 1) == 0)
    *(_QWORD *)&v226 = sub_100BCC68C(0, *(_QWORD *)(v226 + 16) + 1, 1, (_QWORD *)v226);
  v200 = *(_QWORD *)(v226 + 16);
  v199 = *(_QWORD *)(v226 + 24);
  if (v200 >= v199 >> 1)
    *(_QWORD *)&v226 = sub_100BCC68C((_QWORD *)(v199 > 1), v200 + 1, 1, (_QWORD *)v226);
  v230 = &type metadata for Lyrics.SongwritersLine;
  v231 = &protocol witness table for Lyrics.SongwritersLine;
  v201 = swift_allocObject(&unk_101104F10, 56, 7);
  *(_QWORD *)&v229 = v201;
  *(_QWORD *)(v201 + 16) = v154;
  *(double *)(v201 + 24) = v156;
  *(_QWORD *)(v201 + 32) = 0x7FF0000000000000;
  *(_BYTE *)(v201 + 40) = v214;
  *(_QWORD *)(v201 + 48) = v186;
  v155 = (_QWORD *)v226;
  *(_QWORD *)(v226 + 16) = v200 + 1;
  sub_100064C48(&v229, (uint64_t)&v155[5 * v200 + 4]);
LABEL_166:

  v202 = v208;
  v208[4] = v215;
  v202[5] = v155;
  swift_beginAccess(v197, &v229, 1, 0);
  swift_weakAssign(v197, v202);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (uint64_t)v202;
}

_QWORD *sub_100BCA2B8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100BCD30C(0, v1, 0);
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
      v6 = v5;
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_100BCD30C((char *)(v7 > 1), v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100BCA390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[24];
  char v36[24];
  char v37[32];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v37, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    goto LABEL_19;
  v9 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v36, 0, 0);
  v10 = v9[15];
  if (!v10
    || ((v11 = v9[9]) != 0 ? (v12 = a3 == 0) : (v12 = 1),
        v12
     || ((v13 = v9[14], v14 = v9[8], v13 == v14) ? (v15 = v10 == v11) : (v15 = 0),
         v15
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v9[14], v9[15], v14, v11, 0) & 1) != 0
      || (swift_beginAccess(v9 + 16, v35, 0, 0), v16 = v9[16], !*(_QWORD *)(v16 + 16)))))
  {
    swift_release();
LABEL_19:
    swift_bridgeObjectRetain();
    return a4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_10079C2C4(v13, v10);
  if ((v18 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_10079C2C4(a2, a3), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_23;
  }
  v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 88 * v20);
  v24 = v22[2];
  v23 = v22[3];
  v25 = v22[5];
  v33 = v22[1];
  v34 = v22[4];
  v27 = v22[6];
  v26 = v22[7];
  v31 = v22[8];
  v32 = v22[9];
  v29 = *v22;
  v30 = v22[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100BD55C4(v23, v34, v25, v27);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v33)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  a4 = v29;
  sub_100BD55F4(v29, v33, v24, v23, v34, v25, v27, v26, v31, v32, v30);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_100BCA600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    goto LABEL_16;
  v9 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v33, 0, 0);
  v10 = v9[15];
  if (!v10)
    goto LABEL_15;
  v11 = v9[9];
  if (!v11)
    goto LABEL_15;
  if (!a3)
    goto LABEL_15;
  v12 = v9[14];
  v13 = v9[8];
  if (v12 == v13 && v10 == v11)
    goto LABEL_15;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v9[14], v9[15], v13, v11, 0) & 1) != 0)
    goto LABEL_15;
  swift_beginAccess(v9 + 16, v32, 0, 0);
  v14 = v9[16];
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_10079C2C4(v12, v10);
  if ((v16 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    v26 = (uint64_t *)(a4 + 16);
    swift_beginAccess(v26, v34, 0, 0);
    v21 = *v26;
    swift_bridgeObjectRetain();
    return v21;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v17 + 16) || (v18 = sub_10079C2C4(a2, a3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  v20 = (_QWORD *)(*(_QWORD *)(v17 + 56) + 88 * v18);
  v21 = v20[2];
  v22 = v20[3];
  v23 = v20[4];
  v24 = v20[5];
  v25 = v20[6];
  v31 = v20[8];
  v29 = v20[9];
  v30 = v20[7];
  v28 = v20[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100BD55C4(v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100BD0A58(v22, v23, v24, v25, v30, v31, v29, v28);
  return v21;
}

uint64_t sub_100BCA854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t Strong;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (!Strong)
    goto LABEL_16;
  v11 = (_QWORD *)Strong;
  swift_beginAccess(Strong + 112, v33, 0, 0);
  v12 = v11[15];
  if (!v12)
    goto LABEL_15;
  v13 = v11[9];
  if (!v13)
    goto LABEL_15;
  if (!a3)
    goto LABEL_15;
  v14 = v11[14];
  v15 = v11[8];
  if (v14 == v15 && v12 == v13)
    goto LABEL_15;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11[14], v11[15], v15, v13, 0) & 1) != 0)
    goto LABEL_15;
  swift_beginAccess(v11 + 16, v32, 0, 0);
  v16 = v11[16];
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_10079C2C4(v14, v12);
  if ((v18 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess(a4 + 2, v34, 0, 0);
    v23 = a4[2];
    v24 = a4[3];
    v25 = a4[4];
    v26 = a4[5];
    v27 = a4[6];
    v28 = a4[7];
    v30 = a4[8];
    v29 = a4[9];
    result = sub_100BD55C4(v23, v24, v25, v26);
    goto LABEL_17;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_10079C2C4(a2, a3), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  v22 = (_QWORD *)(*(_QWORD *)(v19 + 56) + 88 * v20);
  v23 = v22[3];
  v24 = v22[4];
  v25 = v22[5];
  v26 = v22[6];
  v27 = v22[7];
  v28 = v22[8];
  v30 = v22[9];
  v29 = v22[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100BD55C4(v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100BD55C4(v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_100BD0A58(v23, v24, v25, v26, v27, v28, v30, v29);
LABEL_17:
  *a5 = v23;
  a5[1] = v24;
  a5[2] = v25;
  a5[3] = v26;
  a5[4] = v27;
  a5[5] = v28;
  a5[6] = v30;
  a5[7] = v29;
  return result;
}

void Lyrics.line(before:useOriginalLines:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if ((a1 & 1) != 0)
  {
    v6 = sub_100BC64DC(*(_QWORD *)(v3 + 48));
    v7 = v6[2];
    if (!v7)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD **)(v3 + 40);
    swift_bridgeObjectRetain();
    v7 = v6[2];
    if (!v7)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return;
    }
  }
  v8 = v6 + 4;
  sub_100064C78((uint64_t)(v6 + 4), (uint64_t)&v29);
  v10 = *((_QWORD *)&v30 + 1);
  v9 = v31;
  sub_100007E68(&v29, *((uint64_t *)&v30 + 1));
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v10);
  _s5Music18DragDropToPlaylistV6OriginVwxx_0(&v29);
  if (v11 > a3)
    goto LABEL_6;
  v12 = 0;
  v13 = v7 - 1;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v14 = v13;
  while (!__OFSUB__(v14, v12))
  {
    v15 = v12 + (v14 - v12) / 2;
    if (__OFADD__(v12, (v14 - v12) / 2))
      goto LABEL_25;
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (v15 >= v6[2])
      goto LABEL_27;
    sub_100064C78((uint64_t)&v8[5 * v15], (uint64_t)v26);
    v17 = v27;
    v16 = v28;
    sub_100007E68(v26, v27);
    v18 = (*(double (**)(uint64_t))(*(_QWORD *)(v16 + 8) + 8))(v17);
    v19 = v18;
    if ((uint64_t)v15 >= v13)
    {
      v22 = INFINITY;
      if (v18 > a3)
        goto LABEL_8;
    }
    else
    {
      if (v15 + 1 >= v6[2])
        goto LABEL_28;
      sub_100064C78((uint64_t)&v8[5 * v15 + 5], (uint64_t)v23);
      v21 = v24;
      v20 = v25;
      sub_100007E68(v23, v24);
      v22 = (*(double (**)(uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v21);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v23);
      if (v19 > a3)
      {
LABEL_8:
        v14 = v15 - 1;
        goto LABEL_9;
      }
    }
    if (v22 >= a3)
    {
      sub_10004FF60((uint64_t)&v29, &qword_1011E04F0);
      swift_bridgeObjectRelease();
      sub_100064C78((uint64_t)v26, (uint64_t)&v29);
      _s5Music18DragDropToPlaylistV6OriginVwxx_0(v26);
      goto LABEL_23;
    }
    v12 = v15 + 1;
LABEL_9:
    _s5Music18DragDropToPlaylistV6OriginVwxx_0(v26);
    if (v14 < v12)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      sub_100065228((uint64_t)&v29, a2, &qword_1011E04F0);
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t Lyrics.line(after:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007E68(a1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v7 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 40);
    if (v7 >= *(_QWORD *)(v8 + 16))
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
    if ((v7 & 0x8000000000000000) == 0)
      return sub_100064C78(v8 + 40 * v7 + 32, a2);
  }
  __break(1u);
  return result;
}

BOOL sub_100BCAE00(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  __C::_NSRange v12;

  objc_msgSend(*a1, "characterRange");
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  v10._countAndFlagsBits = a4;
  v10._object = a5;
  v12 = _NSRange.convert(from:to:preserveLength:)(v9, v10, 1);
  if (!v11)
    return _NSRange.contains(_:)(v12);
  swift_errorRelease(v11);
  return 0;
}

BOOL sub_100BCAEA0(id *a1, char *a2, void *a3, char *a4, void *a5)
{
  id v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  __C::_NSRange v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v9 = *a1;
  objc_msgSend(*a1, "characterRange");
  v10._countAndFlagsBits = (uint64_t)a2;
  v10._object = a3;
  v11._countAndFlagsBits = (uint64_t)a4;
  v11._object = a5;
  v13 = _NSRange.convert(from:to:preserveLength:)(v10, v11, 0);
  if (!v12)
    return _NSRange.intersects(_:)(v13);
  if (qword_1011DDFE0 != -1)
    swift_once(&qword_1011DDFE0, sub_100BCBEB4);
  v14 = type metadata accessor for Logger(0);
  sub_100048B14(v14, (uint64_t)static Logger.lyrics);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v12);
  v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain(v12);
  v16 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(42, -1);
    v25 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(96, -1);
    v27 = v26;
    *(_DWORD *)v19 = 136446978;
    v20 = (char *)_NSRange.description.getter(objc_msgSend(v16, "characterRange"));
    *(_QWORD *)(v19 + 4) = sub_100BBDE38(v20, v21, &v27);

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 14) = sub_100BBDE38(a4, (char *)a5, &v27);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v19 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 24) = sub_100BBDE38(a2, (char *)a3, &v27);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v19 + 32) = 2114;
    swift_errorRetain(v12);
    v22 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(_QWORD *)(v19 + 34) = v22;
    *v25 = v22;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "    Wasn't able to convert syllable range from primaryVocalText to lyricsText indicating a parsing issue.\n    MSVLyricsWord.characterRange=%{public}s\n    primaryVocalsText=%{public}s\n    lyricsText=%{public}s\n    thrownError=%{public}@", (uint8_t *)v19, 0x2Au);
    v23 = sub_100007E8C(&qword_1011DECF0);
    swift_arrayDestroy(v25, 1, v23);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v26, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    swift_errorRelease(v12);
  }
  else
  {
    swift_errorRelease(v12);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a5, 2);

    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  return 0;
}

uint64_t Logger.lyrics.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1011DDFE0 != -1)
    swift_once(&qword_1011DDFE0, sub_100BCBEB4);
  v0 = type metadata accessor for Logger(0);
  return sub_100048B14(v0, (uint64_t)static Logger.lyrics);
}

void sub_100BCB22C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  void *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10004A07C(0, (unint64_t *)&qword_1011DF118, MSVLyricsAgent_ptr);
    v5 = sub_100BD53E8();
    v6 = Set.Iterator.init(_cocoa:)(v36, v3, v4, v5);
    v1 = v36[0];
    v34 = v36[1];
    v7 = v36[2];
    v8 = v36[3];
    v9 = v36[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = 0;
  }
  v32 = v7;
  v33 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v14 = v8;
    if (v1 < 0)
    {
      v17 = __CocoaSet.Iterator.next()(v6);
      if (!v17)
        goto LABEL_40;
      v18 = v17;
      v35 = v17;
      v19 = sub_10004A07C(0, (unint64_t *)&qword_1011DF118, MSVLyricsAgent_ptr);
      swift_unknownObjectRetain(v18, v20);
      swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v21 = v37;
      *(_QWORD *)&v22 = swift_unknownObjectRelease(v18).n128_u64[0];
      if (!v21)
        goto LABEL_40;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v8 << 6);
LABEL_34:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_40;
LABEL_35:
    v26 = objc_msgSend(v21, "type", v22, v32);
    if (v26)
    {
      v27 = v26;
      v28 = v1;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v31 = v30;

      if (v29 == 0x70756F7267 && v31 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
        v1 = v28;
LABEL_40:
        sub_10004FA7C(v1);
        return;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, 0x70756F7267, 0xE500000000000000, 0);

      swift_bridgeObjectRelease();
      v1 = v28;
      if ((v13 & 1) != 0)
        goto LABEL_40;
    }
    else
    {

    }
  }
  v23 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v23 >= v33)
      goto LABEL_40;
    v24 = *(_QWORD *)(v34 + 8 * v23);
    ++v8;
    if (!v24)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v33)
        goto LABEL_40;
      v24 = *(_QWORD *)(v34 + 8 * v8);
      if (!v24)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v33)
          goto LABEL_40;
        v24 = *(_QWORD *)(v34 + 8 * v8);
        if (!v24)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v33)
            goto LABEL_40;
          v24 = *(_QWORD *)(v34 + 8 * v8);
          if (!v24)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v33)
              goto LABEL_40;
            v24 = *(_QWORD *)(v34 + 8 * v8);
            if (!v24)
            {
              v25 = v14 + 6;
              while (v33 != v25)
              {
                v24 = *(_QWORD *)(v34 + 8 * v25++);
                if (v24)
                {
                  v8 = v25 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

void sub_100BCB5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  void *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10004A07C(0, (unint64_t *)&qword_1011DF118, MSVLyricsAgent_ptr);
    v5 = sub_100BD53E8();
    v6 = Set.Iterator.init(_cocoa:)(v36, v3, v4, v5);
    v1 = v36[0];
    v34 = v36[1];
    v7 = v36[2];
    v8 = v36[3];
    v9 = v36[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = 0;
  }
  v32 = v7;
  v33 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v14 = v8;
    if (v1 < 0)
    {
      v17 = __CocoaSet.Iterator.next()(v6);
      if (!v17)
        goto LABEL_40;
      v18 = v17;
      v35 = v17;
      v19 = sub_10004A07C(0, (unint64_t *)&qword_1011DF118, MSVLyricsAgent_ptr);
      swift_unknownObjectRetain(v18, v20);
      swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v21 = v37;
      *(_QWORD *)&v22 = swift_unknownObjectRelease(v18).n128_u64[0];
      if (!v21)
        goto LABEL_40;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v16 = v15 | (v8 << 6);
LABEL_34:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_40;
LABEL_35:
    v26 = objc_msgSend(v21, "type", v22, v32);
    if (v26)
    {
      v27 = v26;
      v28 = v1;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v31 = v30;

      if (v29 == 0x726568746FLL && v31 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
        v1 = v28;
LABEL_40:
        sub_10004FA7C(v1);
        return;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, 0x726568746FLL, 0xE500000000000000, 0);

      swift_bridgeObjectRelease();
      v1 = v28;
      if ((v13 & 1) != 0)
        goto LABEL_40;
    }
    else
    {

    }
  }
  v23 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v23 >= v33)
      goto LABEL_40;
    v24 = *(_QWORD *)(v34 + 8 * v23);
    ++v8;
    if (!v24)
    {
      v8 = v14 + 2;
      if (v14 + 2 >= v33)
        goto LABEL_40;
      v24 = *(_QWORD *)(v34 + 8 * v8);
      if (!v24)
      {
        v8 = v14 + 3;
        if (v14 + 3 >= v33)
          goto LABEL_40;
        v24 = *(_QWORD *)(v34 + 8 * v8);
        if (!v24)
        {
          v8 = v14 + 4;
          if (v14 + 4 >= v33)
            goto LABEL_40;
          v24 = *(_QWORD *)(v34 + 8 * v8);
          if (!v24)
          {
            v8 = v14 + 5;
            if (v14 + 5 >= v33)
              goto LABEL_40;
            v24 = *(_QWORD *)(v34 + 8 * v8);
            if (!v24)
            {
              v25 = v14 + 6;
              while (v33 != v25)
              {
                v24 = *(_QWORD *)(v34 + 8 * v25++);
                if (v24)
                {
                  v8 = v25 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

_QWORD *Lyrics.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return v0;
}

uint64_t Lyrics.__deallocating_deinit()
{
  uint64_t v0;

  Lyrics.deinit();
  return swift_deallocClassInstance(v0, 160, 7);
}

id sub_100BCB9B8(id *a1)
{
  return objc_msgSend(*a1, "isBackgroundVocal");
}

id sub_100BCB9E8()
{
  id *v0;

  return objc_msgSend(*v0, "startTime");
}

id sub_100BCB9F8()
{
  id *v0;

  return objc_msgSend(*v0, "endTime");
}

uint64_t MSVLyricsAgent.isEqual(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  double v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _BYTE v53[24];
  uint64_t v54;

  sub_10004A160(a1, (uint64_t)v53, &qword_1011E0700);
  if (!v54)
  {
    sub_10004FF60((uint64_t)v53, &qword_1011E0700);
    goto LABEL_46;
  }
  v2 = sub_10004A07C(0, (unint64_t *)&qword_1011DF118, MSVLyricsAgent_ptr);
  if ((swift_dynamicCast(&v52, v53, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_46:
    v39 = 0;
    return v39 & 1;
  }
  v3 = v52;
  v4 = objc_msgSend(v1, "type");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(v3, "type");
  if (v9)
  {
    v11 = v9;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v14 = v13;

    if (v8)
    {
      if (!v14)
        goto LABEL_44;
      if (v6 == v12 && v8 == v14)
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v14, 0);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
        if ((v15 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v14)
    {
      goto LABEL_44;
    }
  }
  else if (v8)
  {
    goto LABEL_44;
  }
  v16 = objc_msgSend(v1, "name", v10);
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(v3, "name");
  if (v21)
  {
    v23 = v21;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v26 = v25;

    if (v20)
    {
      if (!v26)
        goto LABEL_44;
      if (v18 == v24 && v20 == v26)
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v24, v26, 0);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        if ((v27 & 1) == 0)
          goto LABEL_51;
      }
    }
    else if (v26)
    {
      goto LABEL_44;
    }
  }
  else if (v20)
  {
    goto LABEL_44;
  }
  v28 = objc_msgSend(v1, "artistID", v22);
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = objc_msgSend(v3, "artistID");
  if (!v33)
  {
    if (v32)
      goto LABEL_44;
    goto LABEL_49;
  }
  v35 = v33;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v38 = v37;

  if (!v32)
  {
    if (v38)
      goto LABEL_44;
    goto LABEL_49;
  }
  if (!v38)
    goto LABEL_44;
  if (v30 == v36 && v32 == v38)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_49;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v36, v38, 0);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v41 & 1) == 0)
  {
LABEL_51:

    goto LABEL_46;
  }
LABEL_49:
  v42 = objc_msgSend(v1, "identifier", v34);
  if (v42)
  {
    v43 = v42;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0;
  }
  v47 = objc_msgSend(v3, "identifier");
  if (!v47)
  {
    if (!v46)
    {

      v39 = 1;
      return v39 & 1;
    }
    goto LABEL_44;
  }
  v48 = v47;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v51 = v50;

  if (!v46)
  {

    if (!v51)
    {
      v39 = 1;
      return v39 & 1;
    }
    goto LABEL_45;
  }
  if (!v51)
  {
LABEL_44:

LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if (v44 == v49 && v46 == v51)
    v39 = 1;
  else
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v49, v51, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v39 & 1;
}

uint64_t sub_100BCBEB4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10004FACC(v0, static Logger.lyrics);
  sub_100048B14(v0, (uint64_t)static Logger.lyrics);
  return static Logger.music(_:)(0x73636972794CLL, 0xE600000000000000);
}

uint64_t static Logger.lyrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1011DDFE0 != -1)
    swift_once(&qword_1011DDFE0, sub_100BCBEB4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100048B14(v2, (uint64_t)static Logger.lyrics);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

size_t sub_100BCBF7C(size_t result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100007E8C(&qword_1011DE778);
  v11 = *(_QWORD *)(sub_100007E8C(&qword_1011DE770) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (char *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size_0(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  *((_QWORD *)v15 + 2) = v8;
  *((_QWORD *)v15 + 3) = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(_QWORD *)(sub_100007E8C(&qword_1011DE770) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = &v15[v18];
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v19 >= &a4[v18 + *(_QWORD *)(v17 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v19);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v19);
    }
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v19);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

char *sub_100BCC0F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF560);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100BCC1F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF4C8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF4D0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100BCC32C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF4D8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF4E0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100BCC460(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF4C0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100BCC570(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF480);
    v11 = (char *)swift_allocObject(v10, 104 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[104 * v8])
      memmove(v13, v14, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100BCC68C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF468);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF470);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100BCC7C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3B8);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[8 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF3C0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_100BCC8E0(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1009BA6B8(a1, a2, a3, a4, &qword_1011DF430, type metadata accessor for Razzmatazz);
}

char *sub_100BCC8F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF460);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_100BCC9F4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100BCCA08(a1, a2, a3, a4, &qword_1011DF448, &qword_1011DF450);
}

_QWORD *sub_100BCCA08(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100007E8C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size_0(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[v11 + 4])
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(a6);
    swift_arrayInitWithCopy(v14 + 4);
  }
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_100BCCB2C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF438);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF440);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_100BCCC4C(size_t a1, int64_t a2, char a3, char *a4)
{
  return sub_1009BA6B8(a1, a2, a3, a4, &qword_1011DF398, (uint64_t (*)(_QWORD))&type metadata accessor for Playlist.Collaborator);
}

char *sub_100BCCC60(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF410);
    v11 = (char *)swift_allocObject(v10, 120 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 120);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[120 * v8])
      memmove(v13, v14, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_100BCCD78(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF400);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100BCCE90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3E0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_100BCCF90(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3E8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF3F0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_100BCD0B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3D0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF3D8);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100BCD1D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DEF80);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

size_t sub_100BCD2D4(size_t a1, int64_t a2, char a3)
{
  char **v3;
  size_t result;

  result = sub_100BCD460(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

char *sub_100BCD2F0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCD5DC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100BCD30C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCD6E0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100BCD328(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCD7E0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_100BCD344(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100BCD8F0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100BCD360(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCDA24(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100BCD37C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCDB40(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_100BCD398(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100BCDC38(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100BCD3B4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCDD58(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_100BCD3D0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_100BCDE50(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_100BCD3EC(size_t a1, int64_t a2, char a3)
{
  char **v3;
  size_t result;

  result = sub_100BCDF70(a1, a2, a3, *v3, &qword_1011DF430, type metadata accessor for Razzmatazz);
  *v3 = (char *)result;
  return result;
}

size_t sub_100BCD418(size_t a1, int64_t a2, char a3)
{
  char **v3;
  size_t result;

  result = sub_100BCDF70(a1, a2, a3, *v3, &qword_1011DF458, (uint64_t (*)(_QWORD))&type metadata accessor for Artist);
  *v3 = (char *)result;
  return result;
}

char *sub_100BCD444(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100BCE1CC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_100BCD460(size_t result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100007E8C(&qword_1011DE778);
  v11 = *(_QWORD *)(sub_100007E8C(&qword_1011DE770) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (char *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size_0(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  *((_QWORD *)v15 + 2) = v8;
  *((_QWORD *)v15 + 3) = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = *(_QWORD *)(sub_100007E8C(&qword_1011DE770) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v19 = &v15[v18];
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v19 >= &a4[v18 + *(_QWORD *)(v17 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v19);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v19);
    }
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v19);
  }
  swift_release(a4);
  return (size_t)v15;
}

char *sub_100BCD5DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DEF80);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release(a4);
  return v11;
}

char *sub_100BCD6E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF560);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release();
  return v11;
}

char *sub_100BCD7E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF4C0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release();
  return v11;
}

_QWORD *sub_100BCD8F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF468);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF470);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release();
  return v11;
}

char *sub_100BCDA24(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF4B8);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release();
  return v11;
}

char *sub_100BCDB40(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3C8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release();
  return v11;
}

_QWORD *sub_100BCDC38(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3B8);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[8 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF3C0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release();
  return v11;
}

char *sub_100BCDD58(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3A0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_release();
  return v11;
}

_QWORD *sub_100BCDE50(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3A8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100007E8C(&qword_1011DF3B0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release();
  return v11;
}

size_t sub_100BCDF70(size_t result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = *((_QWORD *)a4 + 3);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *((_QWORD *)a4 + 2);
  if (v10 <= v11)
    v12 = *((_QWORD *)a4 + 2);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100007E8C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (char *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size_0(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  *((_QWORD *)v18 + 2) = v11;
  *((_QWORD *)v18 + 3) = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = *(_QWORD *)(a6(0) - 8);
  v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v22 = &v18[v21];
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v22 >= &a4[v21 + *(_QWORD *)(v20 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v22);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v22);
    }
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v22);
  }
  swift_release();
  return (size_t)v18;
}

char *sub_100BCE0E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DEF70);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release();
  return v11;
}

char *sub_100BCE1CC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007E8C(&qword_1011DF3F8);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_release();
  return v11;
}

unint64_t sub_100BCE2CC(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  PlaylistCovers.Cover.Representation.hash(into:)((uint64_t)v5);
  v3 = Hasher._finalize()();
  return sub_100BCE3DC(a1, v3);
}

unint64_t sub_100BCE324(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v2 = v1;
  v4 = 0xD000000000000015;
  Hasher.init(_seed:)(v8, *(_QWORD *)(v2 + 40));
  if (a1)
  {
    if (a1 == 1)
    {
      v4 = 0xD000000000000014;
      v5 = 0x8000000100E54380;
    }
    else
    {
      v5 = 0x8000000100E543A0;
    }
  }
  else
  {
    v5 = 0x8000000100E54360;
  }
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_100BCE524(a1, v6);
}

unint64_t sub_100BCE3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v19[3];
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48) + 56 * i;
    v9 = *(_OWORD *)(v7 + 16);
    v8 = *(_OWORD *)(v7 + 32);
    v10 = *(_OWORD *)v7;
    v22 = *(_QWORD *)(v7 + 48);
    v21[1] = v9;
    v21[2] = v8;
    v21[0] = v10;
    sub_1004FEFE4((uint64_t)v21);
    v11 = static PlaylistCovers.Cover.Representation.== infix(_:_:)(v21, a1);
    sub_1004FF038((uint64_t)v21);
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      for (i = (i + 1) & v12; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
      {
        v13 = *(_QWORD *)(v2 + 48) + 56 * i;
        v15 = *(_OWORD *)(v13 + 16);
        v14 = *(_OWORD *)(v13 + 32);
        v16 = *(_OWORD *)v13;
        v20 = *(_QWORD *)(v13 + 48);
        v19[1] = v15;
        v19[2] = v14;
        v19[0] = v16;
        sub_1004FEFE4((uint64_t)v19);
        v17 = static PlaylistCovers.Cover.Representation.== infix(_:_:)(v19, a1);
        sub_1004FF038((uint64_t)v19);
        if ((v17 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100BCE524(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v14 = ~v3;
    while (1)
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v4);
      if (v5 == 1)
        v6 = 0xD000000000000014;
      else
        v6 = 0xD000000000000015;
      if (v5 == 1)
        v7 = 0x8000000100E54380;
      else
        v7 = 0x8000000100E543A0;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v8 = v6;
      else
        v8 = 0xD000000000000015;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v9 = v7;
      else
        v9 = 0x8000000100E54360;
      if (a1)
      {
        if (a1 == 1)
          v10 = 0xD000000000000014;
        else
          v10 = 0xD000000000000015;
        if (a1 == 1)
          v11 = 0x8000000100E54380;
        else
          v11 = 0x8000000100E543A0;
        if (v8 != v10)
          goto LABEL_26;
      }
      else
      {
        v11 = 0x8000000100E54360;
        v10 = 0xD000000000000015;
        if (v8 != 0xD000000000000015)
          goto LABEL_26;
      }
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        return v4;
      }
LABEL_26:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v14;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

void sub_100BCE6C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DE780);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v25 = v38[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100079DE4(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

void sub_100BCE9D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DE768);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_100BCECE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DE760);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_100BCEFF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DF418);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_100048ABC((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_100051FEC(v25, (uint64_t)&v39);
      sub_10004FA40(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_100048ABC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release();
  *v3 = v8;
}

void sub_100BCF304(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  int64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  _QWORD v71[9];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007E8C(&qword_1011DF408);
  v54 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v52 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v50 = v2;
  v51 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  v53 = v5;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v55 = v13;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v51)
      break;
    v25 = v52;
    v26 = v52[v24];
    v27 = v13 + 1;
    if (!v26)
    {
      v27 = v24 + 1;
      if (v24 + 1 >= v51)
        goto LABEL_36;
      v26 = v52[v27];
      if (!v26)
      {
        v28 = v24 + 2;
        if (v28 >= v51)
        {
LABEL_36:
          swift_release();
          v3 = v50;
          if ((v54 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v52[v28];
        if (!v26)
        {
          while (1)
          {
            v27 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v27 >= v51)
              goto LABEL_36;
            v26 = v52[v27];
            ++v28;
            if (v26)
              goto LABEL_33;
          }
        }
        v27 = v28;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v55 = v27;
    v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_34:
    v33 = *(_QWORD *)(v5 + 56);
    v34 = *(_QWORD *)(v5 + 48) + 56 * v23;
    v35 = *(_BYTE *)v34;
    v37 = *(void **)(v34 + 8);
    v36 = *(void **)(v34 + 16);
    v39 = *(void **)(v34 + 24);
    v38 = *(void **)(v34 + 32);
    v41 = *(void **)(v34 + 40);
    v40 = *(void **)(v34 + 48);
    v42 = v33 + 120 * v23;
    v56 = *(void **)v42;
    v57 = *(_QWORD *)(v42 + 8);
    v58 = *(void **)(v42 + 16);
    v59 = *(void **)(v42 + 24);
    v69 = *(void **)(v42 + 48);
    v70 = *(void **)(v42 + 40);
    v67 = *(_QWORD *)(v42 + 64);
    v68 = *(void **)(v42 + 56);
    v65 = *(_QWORD *)(v42 + 80);
    v66 = *(_QWORD *)(v42 + 72);
    v63 = *(_QWORD *)(v42 + 96);
    v64 = *(_QWORD *)(v42 + 88);
    v62 = *(_QWORD *)(v42 + 104);
    v60 = *(void **)(v42 + 32);
    v61 = *(_QWORD *)(v42 + 112);
    if ((v54 & 1) == 0)
    {
      v43 = v37;
      v44 = v36;
      v45 = v39;
      v46 = v38;
      v47 = v41;
      v48 = v40;
      sub_1004FE614(v56, v57, v58, v59, v60, v70, v69, v68);
      sub_1004FE694(v65, v64, v63, v62, v61);
    }
    LOBYTE(v72) = v35;
    *((_QWORD *)&v72 + 1) = v37;
    *(_QWORD *)&v73 = v36;
    *((_QWORD *)&v73 + 1) = v39;
    *(_QWORD *)&v74 = v38;
    *((_QWORD *)&v74 + 1) = v41;
    v75 = v40;
    Hasher.init(_seed:)(v71, *(_QWORD *)(v8 + 40));
    PlaylistCovers.Cover.Representation.hash(into:)((uint64_t)v71);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v5 = v53;
      v13 = v55;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v15) >> 6;
      v5 = v53;
      v13 = v55;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v17 == v30;
        if (v17 == v30)
          v17 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v8 + 48) + 56 * v18;
    v20 = v73;
    *(_OWORD *)v19 = v72;
    *(_OWORD *)(v19 + 16) = v20;
    *(_OWORD *)(v19 + 32) = v74;
    *(_QWORD *)(v19 + 48) = v75;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 120 * v18);
    *v21 = v56;
    v21[1] = v57;
    v21[2] = v58;
    v21[3] = v59;
    v21[4] = v60;
    v21[5] = v70;
    v21[6] = v69;
    v21[7] = v68;
    v21[8] = v67;
    v21[9] = v66;
    v21[10] = v65;
    v21[11] = v64;
    v21[12] = v63;
    v21[13] = v62;
    v21[14] = v61;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v50;
  v25 = v52;
  if ((v54 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v49 = 1 << *(_BYTE *)(v5 + 32);
  if (v49 >= 64)
    bzero(v25, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v49;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

unint64_t sub_100BCF75C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

void sub_100BCF7AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_100007E8C(&qword_1011DE780);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    sub_100079DE4(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100BCF970()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100007E8C(&qword_1011DE768);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v6 = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v6 >= v2 + 64 + 8 * v8)
  {
    memmove(v6, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100BCFB24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100007E8C(&qword_1011DE760);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100BCFCD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100007E8C(&qword_1011DF418);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_100051FEC(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10004FA40(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_100048ABC(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100BCFEB8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void *__src;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;

  sub_100007E8C(&qword_1011DF408);
  v41 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v40 = v3;
    swift_release();
    *v41 = v40;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  v6 = v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5;
  v45 = v3;
  if (v6)
  {
    memmove(v4, __src, 8 * v5);
    v3 = v45;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v43 = (unint64_t)(v8 + 63) >> 6;
  v44 = v1;
  while (1)
  {
    if (v10)
    {
      v46 = (v10 - 1) & v10;
      v47 = v7;
      v11 = __clz(__rbit64(v10)) | (v7 << 6);
      v12 = v44;
      v3 = v45;
      goto LABEL_12;
    }
    v36 = v7 + 1;
    v12 = v44;
    v3 = v45;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v43)
      goto LABEL_26;
    v37 = *((_QWORD *)__src + v36);
    v38 = v7 + 1;
    if (!v37)
    {
      v38 = v7 + 2;
      if (v7 + 2 >= v43)
        goto LABEL_26;
      v37 = *((_QWORD *)__src + v38);
      if (!v37)
        break;
    }
LABEL_25:
    v46 = (v37 - 1) & v37;
    v47 = v38;
    v11 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_12:
    v13 = 56 * v11;
    v14 = *(_QWORD *)(v12 + 48) + 56 * v11;
    v15 = 120 * v11;
    v16 = *(_QWORD *)(v12 + 56) + v15;
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v20 = *(void **)(v16 + 16);
    v19 = *(void **)(v16 + 24);
    v21 = *(void **)(v16 + 32);
    v22 = *(void **)(v16 + 40);
    v23 = *(void **)(v16 + 48);
    v24 = *(void **)(v16 + 56);
    v25 = *(_QWORD *)(v16 + 64);
    v26 = *(_QWORD *)(v16 + 72);
    v52 = *(_QWORD *)(v16 + 88);
    v53 = *(_QWORD *)(v16 + 80);
    v50 = *(_QWORD *)(v16 + 104);
    v51 = *(_QWORD *)(v16 + 96);
    v49 = *(_QWORD *)(v16 + 112);
    v27 = *(_QWORD *)(v3 + 48) + v13;
    v28 = *(_OWORD *)(v14 + 8);
    v54 = *(_OWORD *)(v14 + 24);
    v55 = *(_OWORD *)(v14 + 40);
    *(_BYTE *)v27 = *(_BYTE *)v14;
    *(_OWORD *)(v27 + 8) = v28;
    v48 = (void *)*((_QWORD *)&v28 + 1);
    *(_OWORD *)(v27 + 24) = v54;
    *(_OWORD *)(v27 + 40) = v55;
    v29 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    *v29 = v18;
    v29[1] = v17;
    v29[2] = v20;
    v29[3] = v19;
    v29[4] = v21;
    v29[5] = v22;
    v29[6] = v23;
    v29[7] = v24;
    v29[8] = v25;
    v29[9] = v26;
    v29[10] = v53;
    v29[11] = v52;
    v29[12] = v51;
    v29[13] = v50;
    v29[14] = v49;
    v30 = (id)v28;
    v31 = v48;
    v32 = (id)v54;
    v33 = *((id *)&v54 + 1);
    v34 = (id)v55;
    v35 = *((id *)&v55 + 1);
    sub_1004FE614(v18, v17, v20, v19, v21, v22, v23, v24);
    sub_1004FE694(v53, v52, v51, v50, v49);
    v10 = v46;
    v7 = v47;
  }
  v39 = v7 + 3;
  if (v7 + 3 >= v43)
    goto LABEL_26;
  v37 = *((_QWORD *)__src + v39);
  if (v37)
  {
    v38 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v38 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v38 >= v43)
      goto LABEL_26;
    v37 = *((_QWORD *)__src + v38);
    ++v39;
    if (v37)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100BD01A4(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_100BD0300((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release();
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_100BD0300((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release();
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_100BD0300(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v23;
  uint64_t v25;
  int64_t v26;

  v23 = a2;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v10 = v9 | (v4 << 6);
LABEL_21:
    v14 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v10);
    v15 = objc_msgSend(v14, "type", v23);
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      if (v17 == 0x6E6F73726570 && v19 == 0xE600000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain();
          sub_100BD0540(a1, v23, v25, a3);
          return;
        }
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, 0x6E6F73726570, 0xE600000000000000, 0);

        swift_bridgeObjectRelease();
        if ((v21 & 1) != 0)
          goto LABEL_29;
      }
    }
    else
    {

    }
  }
  v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v11);
  ++v4;
  if (v12)
    goto LABEL_20;
  v4 = v11 + 1;
  if (v11 + 1 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
    goto LABEL_20;
  v4 = v11 + 2;
  if (v11 + 2 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }
  v13 = v11 + 3;
  if (v13 >= v26)
    goto LABEL_32;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      goto LABEL_32;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
}

Swift::Int sub_100BD0540(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100007E8C((uint64_t *)&unk_1011E4370);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100BD079C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v9 = v5[3];
      v10 = v5[4];
      v11 = v5[5];
      if ((*(v5 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v12 = *(v5 - 1);
      else
        v12 = 0;
      Hasher._combine(_:)(v12);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v6;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v7, v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      swift_bridgeObjectRelease(v8);
      v5 += 7;
      --v4;
    }
    while (v4);
  }
}

BOOL _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;

  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
      return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    v3 = (*(uint64_t (**)(void))(a1 + 56))();
    v5 = v4;
    v7 = (*(uint64_t (**)(void))(a2 + 56))();
    v8 = v6;
    if (v3 == v7 && v5 == v6)
    {
      v9 = 1;
      v8 = v5;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_100BD09E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 56 * v1;
  v4 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v4, v3);
  v6 = v4 + v3;
  if (v5)
    goto LABEL_7;
  result = *(_QWORD *)(result + 64);
  if (__OFSUB__(v6, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t *sub_100BD0A20(uint64_t *a1)
{
  sub_100BD0A58(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_100BD0A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t sub_100BD0A88(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100BD0AB0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BD0AD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100BD0AE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_UNKNOWN **sub_100BD0B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  char *v32;

  v4 = sub_100007E8C(&qword_1011DF4F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale.Language(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale.LanguageCode(0, v9);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v32 = (char *)&v31 - v17;
  __chkstk_darwin(v18);
  if (!a2)
    return &off_1011027D0;
  v20 = (char *)&v31 - v19;
  swift_bridgeObjectRetain();
  v21 = Locale.Language.init(identifier:)(a1, a2);
  Locale.Language.languageCode.getter(v21);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12) == 1)
  {
    sub_10004FF60((uint64_t)v6, &qword_1011DF4F8);
    return &off_1011027D0;
  }
  v23 = v20;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v6, v12);
  v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v23, v12);
  Locale.LanguageCode.init(stringLiteral:)(29281, 0xE200000000000000);
  v25 = sub_100048748((unint64_t *)&unk_1011DF500, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode, (uint64_t)&protocol conformance descriptor for Locale.LanguageCode);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v24, v12, v25);
  v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v15, v12);
  if ((v26 & 1) != 0
    || (Locale.LanguageCode.init(stringLiteral:)(25960, 0xE200000000000000),
        v28 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v24, v12, v25),
        v27(v15, v12),
        (v28 & 1) != 0))
  {
    v27(v24, v12);
    v27(v23, v12);
    return &off_101102758;
  }
  Locale.LanguageCode.init(stringLiteral:)(26746, 0xE200000000000000);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v24, v12, v25);
  v27(v15, v12);
  if ((v29 & 1) != 0)
  {
    v27(v24, v12);
LABEL_11:
    v27(v23, v12);
    return &off_101102780;
  }
  Locale.LanguageCode.init(stringLiteral:)(24938, 0xE200000000000000);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v24, v12, v25);
  v27(v15, v12);
  v27(v24, v12);
  if ((v30 & 1) != 0)
    goto LABEL_11;
  v27(v23, v12);
  return &off_1011027A8;
}

uint64_t sub_100BD0E58(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  Swift::Int value;
  uint64_t v57;
  double v58;
  char *v59;
  void *v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  double v67;
  double v68;
  char *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  char *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  id v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  id v135;
  id v136;
  Swift::String v137;
  uint64_t v138;
  __C::_NSRange v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  int64_t v207;
  _QWORD *v208;
  uint64_t *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  void *v218;
  double v219;
  double v220;
  uint64_t v221;
  double v222;
  double v223;
  uint64_t v224;
  int64_t v225;
  char *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char v240;
  double v241;
  double v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[16];
  Swift::String v249;
  uint64_t v250;
  uint64_t v251;
  char **v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  id v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  id v261;
  uint64_t v262;
  Swift::String v263;
  id v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  char *v269;
  uint64_t v270;
  char *v271;
  int64x2_t v272;
  __int128 v273;
  __int128 v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD v278[3];
  char v279;
  char *v280;
  char *v281;
  uint64_t v282;
  Swift::Int_optional v283;
  Swift::Int_optional v284;

  v263._object = a5;
  v263._countAndFlagsBits = a4;
  v8 = a1;
  v282 = a1;
  if ((a8 & 1) == 0)
  {
    v267 = 0;
    v268 = (void *)a3;
    v266 = a2;
    if ((a7 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)&v274 = String._bridgeToObjectiveC()();
      result = String.count.getter(a2, a3);
      if (result < 0)
        goto LABEL_139;
      v40 = (char *)result;
      if (!result)
      {
        v12 = (char *)_swiftEmptyArrayStorage;
LABEL_123:
        swift_bridgeObjectRelease();

        return (uint64_t)v12;
      }
      v41 = 0;
      v42 = 0;
      v12 = (char *)_swiftEmptyArrayStorage;
      v273 = xmmword_100EA7AA0;
      v272 = vdupq_n_s64(1uLL);
      v265 = (char *)result;
      while (1)
      {
        while (1)
        {
          if (__OFSUB__(++v42, v41))
            goto LABEL_128;
          v43 = v41;
          v280 = v41;
          v281 = (char *)(v42 - v41);
          __chkstk_darwin(result);
          v249 = v263;
          v250 = v266;
          v251 = (uint64_t)v268;
          v252 = &v280;
          v44 = sub_100007E8C(&qword_1011DF4A8);
          v8 = v267;
          result = Array.extractFirst(where:)((uint64_t)sub_100BD55A0, (uint64_t)v248, v44, (uint64_t)v278);
          v267 = v8;
          v275 = (char *)v278[0];
          if (v278[0])
            break;
          v41 = v43;
          if (v42 == v40)
            goto LABEL_123;
        }
        if ((unint64_t)v282 >> 62)
        {
          if (v282 < 0)
            v48 = v282;
          else
            v48 = v282 & 0xFFFFFFFFFFFFFF8;
          v49 = v275;
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter(v48);
          swift_bridgeObjectRelease();
          if (v8)
          {
LABEL_22:
            v46 = v280;
            v47 = v281;
            goto LABEL_29;
          }
        }
        else
        {
          v8 = *(_QWORD *)((v282 & 0xFFFFFFFFFFFFF8) + 0x10);
          v45 = v275;
          if (v8)
            goto LABEL_22;
        }
        v50 = (char *)objc_msgSend((id)v274, "length");
        v47 = (char *)(v50 - v43);
        if (__OFSUB__(v50, v43))
          goto LABEL_131;
        v46 = v43;
        v280 = v43;
        v281 = v47;
LABEL_29:
        v269 = v42;
        v271 = v46;
        v51 = (uint64_t)v47;
        _NSRange.makeIterator()();
        v278[0] = v52;
        v278[1] = v53;
        v278[2] = v54;
        v279 = v55 & 1;
        v283 = _NSRange.NSRangeIterator.next()();
        v270 = v51;
        if (!v283.is_nil)
        {
          value = v283.value;
          v57 = 0;
          v58 = (double)v51;
          while (1)
          {
            v59 = v12;
            if (__OFADD__(v57, 1))
              break;
            v60 = (void *)v274;
            v61 = objc_msgSend((id)v274, "substringWithRange:", value, 1);
            v62 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v276 = v63;
            v277 = (uint64_t)v62;

            v64 = sub_100007E8C(&qword_1011DF4B8);
            v65 = swift_allocObject(v64, 88, 7);
            *(_OWORD *)(v65 + 16) = v273;
            v66 = v275;
            objc_msgSend(v275, "startTime");
            v68 = v67;
            v69 = v66;
            objc_msgSend(v69, "endTime");
            v71 = v70;
            objc_msgSend(v69, "startTime");
            v73 = v72;

            v74 = v68 + (v71 - v73) / v58 * (double)v57;
            objc_msgSend(v69, "startTime");
            v76 = v75;
            v77 = v69;
            objc_msgSend(v77, "endTime");
            v79 = v78;
            objc_msgSend(v77, "startTime");
            v81 = v80;

            v82 = objc_msgSend(v60, "substringWithRange:", value, 1);
            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            v85 = v84;

            *(double *)(v65 + 32) = v74;
            *(double *)(v65 + 40) = v76 + (v79 - v81) / v58 * (double)(v57 + 1);
            *(_QWORD *)(v65 + 48) = v83;
            *(_QWORD *)(v65 + 56) = v85;
            *(_QWORD *)(v65 + 64) = value;
            *(int64x2_t *)(v65 + 72) = v272;
            v12 = v59;
            if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
              v12 = sub_100BCC460(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
            v8 = *((_QWORD *)v12 + 2);
            v86 = *((_QWORD *)v12 + 3);
            if (v8 >= v86 >> 1)
              v12 = sub_100BCC460((char *)(v86 > 1), v8 + 1, 1, v12);
            *((_QWORD *)v12 + 2) = v8 + 1;
            v87 = &v12[40 * v8];
            v88 = v276;
            *((_QWORD *)v87 + 4) = v277;
            *((_QWORD *)v87 + 5) = v88;
            *((_QWORD *)v87 + 6) = v65;
            *((_QWORD *)v87 + 7) = 0;
            v87[64] = 1;
            v284 = _NSRange.NSRangeIterator.next()();
            value = v284.value;
            ++v57;
            if (v284.is_nil)
              goto LABEL_37;
          }
          __break(1u);
          goto LABEL_125;
        }
LABEL_37:
        v89 = v275;

        v41 = &v271[v270];
        if (__OFADD__(v271, v270))
          goto LABEL_129;
        v40 = v265;
        v42 = v269;
        if (v269 == v265)
          goto LABEL_123;
      }
    }
    v90 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v90 = a2 & 0xFFFFFFFFFFFFLL;
    v91 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v91 = 11;
    if (!v90)
    {
      swift_bridgeObjectRetain();
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_121:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
    v258 = 4 * v90;
    v92 = a6 ^ 1;
    v259 = v91 | (v90 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v8 = 0;
    LOBYTE(v96) = 1;
    v97 = 15;
    v12 = (char *)_swiftEmptyArrayStorage;
    v260 = _swiftEmptyArrayStorage;
    v277 = (uint64_t)_swiftEmptyArrayStorage;
    LODWORD(v269) = v92;
    while (1)
    {
      v98 = (uint64_t)v268;
      swift_bridgeObjectRetain();
      v99 = v266;
      v262 = String.index(after:)(v97, v266, v98);
      swift_bridgeObjectRelease();
      v100 = (v96 & 1) == 0;
      if ((v96 & 1) != 0)
        v101 = v97;
      else
        v101 = v93;
      v102 = v97;
      if (v100)
        v97 = v94;
      v103 = v102;
      v104 = String.index(after:)(v102, v99, v98);
      if (v101 >> 14 > v104 >> 14)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      v105 = v104;
      v272.i64[0] = v101 >> 14;
      swift_bridgeObjectRetain();
      v106 = _NSRange.init(range:in:)(v101, v105, v99, v98);
      if (v8 < v97 >> 14)
        goto LABEL_127;
      v108 = v107;
      v275 = (char *)v8;
      v276 = v101;
      v264 = v95;
      v109 = (char **)v106;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v274 = v97;
      v110 = v97;
      v111 = v103;
      *(_QWORD *)&v273 = _NSRange.init(range:in:)(v110, v103, v99, v98);
      v113 = v112;
      __chkstk_darwin(v273);
      v249 = v263;
      v250 = v99;
      v251 = v98;
      v270 = (uint64_t)v109;
      v252 = v109;
      v253 = v108;
      v114 = sub_100007E8C(&qword_1011DF4A8);
      v115 = v267;
      Array.extractFirst(where:)((uint64_t)sub_100BD557C, (uint64_t)v248, v114, (uint64_t)v278);
      v267 = v115;
      v96 = v278[0];
      v116 = String.subscript.getter(v111, v99, v98);
      LOBYTE(v115) = Character.isWhitespace.getter(v116);
      swift_bridgeObjectRelease();
      if ((v115 & 1) == 0)
        break;
      v117 = v269;
      v118 = (id)v96;
      if (v96)
      {
        v119 = v264;
        if (v264)
          goto LABEL_59;
LABEL_66:
        v135 = v118;
        LODWORD(v96) = 0;
        v8 = v276;
        v93 = v276;
        goto LABEL_67;
      }
      if (v264)
      {
        v136 = v264;
        objc_msgSend(v136, "characterRange");
        v137._countAndFlagsBits = v266;
        v137._object = v268;
        v139 = _NSRange.convert(from:to:preserveLength:)(v263, v137, 0);
        if (v138)
        {
          swift_errorRelease(v138);

          LODWORD(v96) = 0;
          v267 = 0;
LABEL_83:
          v8 = v276;
          v93 = v276;
          v94 = v274;
          v95 = v264;
          goto LABEL_84;
        }
        v267 = 0;
        if (!_NSRange.contains(_:)(v139))
        {

          LODWORD(v96) = 0;
          goto LABEL_83;
        }
        v265 = (char *)v136;
        v140 = String.subscript.getter(v274, v111, v266, v268);
        v145 = static String._fromSubstring(_:)(v140, v141, v142, v143, v144);
        v264 = v146;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v277) & 1) == 0)
          v277 = (uint64_t)sub_100BCC32C(0, *(_QWORD *)(v277 + 16) + 1, 1, (_QWORD *)v277);
        v148 = *(_QWORD *)(v277 + 16);
        v147 = *(_QWORD *)(v277 + 24);
        if (v148 >= v147 >> 1)
          v277 = (uint64_t)sub_100BCC32C((_QWORD *)(v147 > 1), v148 + 1, 1, (_QWORD *)v277);
        v149 = v276;
        v150 = v277;
        *(_QWORD *)(v277 + 16) = v148 + 1;
        v151 = (_QWORD *)(v150 + 40 * v148);
        v151[4] = v265;
        v151[5] = v145;
        v152 = v273;
        v151[6] = v264;
        v151[7] = v152;
        v151[8] = v113;
        v153 = String.subscript.getter(v149, v105, v266, v268);
        v158 = static String._fromSubstring(_:)(v153, v154, v155, v156, v157);
        v160 = v159;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v260) & 1) == 0)
          v260 = sub_100BCC1F8(0, v260[2] + 1, 1, v260);
        v162 = v260[2];
        v161 = v260[3];
        if (v162 >= v161 >> 1)
          v260 = sub_100BCC1F8((_QWORD *)(v161 > 1), v162 + 1, 1, v260);
        v163 = v260;
        v260[2] = v162 + 1;
        v164 = &v163[5 * v162];
        v164[4] = v158;
        v164[5] = v160;
        v165 = v270;
        v164[6] = v277;
        v164[7] = v165;
        v164[8] = v108;
        v96 = (unint64_t)v265;

        v93 = 0;
        v94 = 0;
        v95 = 0;
        LODWORD(v96) = 1;
        v277 = (uint64_t)_swiftEmptyArrayStorage;
        v8 = v276;
      }
      else
      {
        LODWORD(v96) = 0;
        v95 = 0;
        v8 = v276;
        v93 = v276;
        v94 = v274;
      }
LABEL_84:
      v166 = String.index(before:)(v259, v266, v268);
      if (v275 == (char *)(v166 >> 14) && v95)
      {
        if ((unint64_t)v275 >= v272.i64[0])
        {
          v254 = v94;
          v255 = v93;
          v256 = v96;
          v261 = v118;
          v167 = (uint64_t)v268;
          swift_bridgeObjectRetain();
          v264 = v95;
          v168 = v95;
          v169 = v266;
          v275 = (char *)_NSRange.init(range:in:)(v8, v111, v266, v167);
          *(_QWORD *)&v273 = v170;
          swift_bridgeObjectRetain();
          v171 = v274;
          v272.i64[0] = _NSRange.init(range:in:)(v274, v111, v169, v167);
          v173 = v172;
          swift_bridgeObjectRetain();
          v257 = v168;
          v174 = String.index(after:)(v111, v169, v167);
          v175 = String.subscript.getter(v171, v174, v169, v167);
          v177 = v176;
          v179 = v178;
          v181 = v180;
          v182 = swift_bridgeObjectRelease();
          v183 = static String._fromSubstring(_:)(v175, v177, v179, v181, v182);
          v185 = v184;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v277) & 1) == 0)
            v277 = (uint64_t)sub_100BCC32C(0, *(_QWORD *)(v277 + 16) + 1, 1, (_QWORD *)v277);
          v186 = v276;
          v188 = *(_QWORD *)(v277 + 16);
          v187 = *(_QWORD *)(v277 + 24);
          if (v188 >= v187 >> 1)
            v277 = (uint64_t)sub_100BCC32C((_QWORD *)(v187 > 1), v188 + 1, 1, (_QWORD *)v277);
          v189 = v277;
          *(_QWORD *)(v277 + 16) = v188 + 1;
          v190 = (_QWORD *)(v189 + 40 * v188);
          v190[4] = v257;
          v190[5] = v183;
          v191 = v272.i64[0];
          v190[6] = v185;
          v190[7] = v191;
          v190[8] = v173;
          v192 = v268;
          swift_bridgeObjectRetain();
          v193 = v266;
          v194 = String.index(after:)(v111, v266, v192);
          v195 = String.subscript.getter(v186, v194, v193, v192);
          v197 = v196;
          v199 = v198;
          v201 = v200;
          v202 = swift_bridgeObjectRelease();
          v203 = static String._fromSubstring(_:)(v195, v197, v199, v201, v202);
          v205 = v204;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v260) & 1) == 0)
            v260 = sub_100BCC1F8(0, v260[2] + 1, 1, v260);
          v207 = v260[2];
          v206 = v260[3];
          if (v207 >= v206 >> 1)
            v260 = sub_100BCC1F8((_QWORD *)(v206 > 1), v207 + 1, 1, v260);
          v208 = v260;
          v260[2] = v207 + 1;
          v272.i64[0] = (uint64_t)(v208 + 4);
          v209 = &v208[5 * v207 + 4];
          *v209 = v203;
          v209[1] = v205;
          v210 = (uint64_t)v275;
          v209[2] = v277;
          v209[3] = v210;
          v209[4] = v273;
          v278[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_100BCD328(0, v207 + 1, 0);
          v211 = 0;
          v212 = v278[0];
          v271 = v12;
          v265 = (char *)v207;
          while (1)
          {
            v213 = (uint64_t *)(v272.i64[0] + 40 * (_QWORD)v211);
            v214 = *v213;
            v215 = v213[1];
            v8 = v213[2];
            v216 = (_QWORD *)v213[4];
            v276 = v215;
            v277 = (uint64_t)v216;
            v217 = *(_QWORD *)(v8 + 16);
            v275 = v211;
            *(_QWORD *)&v274 = v214;
            if (v217)
            {
              *(_QWORD *)&v273 = v212;
              v218 = *(void **)(v8 + 40 * v217 - 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              objc_msgSend(v218, "endTime");
              if (!*(_QWORD *)(v8 + 16))
              {
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
              v220 = v219;
              v221 = v117;
              objc_msgSend(*(id *)(v8 + 32), "startTime");
              v223 = v220 - v222;
              v224 = v8;
              v225 = *(_QWORD *)(v8 + 16);
              if (v225)
              {
                v280 = (char *)_swiftEmptyArrayStorage;
                swift_bridgeObjectRetain();
                sub_100BCD360(0, v225, 0);
                v226 = v280;
                v270 = v224;
                v227 = (uint64_t *)(v224 + 64);
                do
                {
                  v228 = *(v227 - 3);
                  v229 = *(v227 - 2);
                  v230 = *(v227 - 1);
                  v231 = *v227;
                  v232 = (id)*(v227 - 4);
                  swift_bridgeObjectRetain();
                  objc_msgSend(v232, "startTime");
                  v234 = v233;
                  objc_msgSend(v232, "endTime");
                  v236 = v235;

                  v280 = v226;
                  v238 = *((_QWORD *)v226 + 2);
                  v237 = *((_QWORD *)v226 + 3);
                  if (v238 >= v237 >> 1)
                  {
                    sub_100BCD360((char *)(v237 > 1), v238 + 1, 1);
                    v226 = v280;
                  }
                  v227 += 5;
                  *((_QWORD *)v226 + 2) = v238 + 1;
                  v239 = &v226[56 * v238];
                  *((_QWORD *)v239 + 4) = v234;
                  *((_QWORD *)v239 + 5) = v236;
                  *((_QWORD *)v239 + 6) = v228;
                  *((_QWORD *)v239 + 7) = v229;
                  *((_QWORD *)v239 + 8) = v230;
                  *((_QWORD *)v239 + 9) = v231;
                  *((_QWORD *)v239 + 10) = v277;
                  --v225;
                }
                while (v225);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v117 = v269;
                v207 = (int64_t)v265;
                v212 = v273;
                goto LABEL_107;
              }
              v212 = v273;
              v117 = v221;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v223 = 0.0;
            }
            swift_bridgeObjectRelease();
            v226 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
            v240 = 1;
            v241 = 0.0;
            if (!(v117 & 1 | (v223 <= 1.0)) && v277 <= 7)
            {
              v242 = v223 + -1.0;
              if (v223 > 2.0)
                v242 = 1.0;
              if (v223 < 1.0)
                v242 = 0.0;
              if (v242 > 0.0)
              {
                v240 = 0;
                v241 = v242;
              }
            }
            v278[0] = v212;
            v244 = *(_QWORD *)(v212 + 16);
            v243 = *(_QWORD *)(v212 + 24);
            if (v244 >= v243 >> 1)
            {
              sub_100BCD328((char *)(v243 > 1), v244 + 1, 1);
              v212 = v278[0];
            }
            v245 = v275;
            *(_QWORD *)(v212 + 16) = v244 + 1;
            v246 = v212 + 40 * v244;
            *(_QWORD *)(v246 + 32) = v274;
            *(_QWORD *)(v246 + 40) = v276;
            *(_QWORD *)(v246 + 48) = v226;
            *(double *)(v246 + 56) = v241;
            *(_BYTE *)(v246 + 64) = v240;
            v211 = v245 + 1;
            if (v245 == (char *)v207)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              v12 = (char *)v212;
              v277 = (uint64_t)_swiftEmptyArrayStorage;
              v97 = v262;
              v95 = v264;
              LOBYTE(v96) = v256;
              v93 = v255;
              v94 = v254;
              goto LABEL_47;
            }
          }
        }
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        if (v8 < 0)
          v247 = v8;
        else
          v247 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter(v247);
        if (v9)
          goto LABEL_4;
LABEL_136:
        swift_bridgeObjectRelease();
        return (uint64_t)_swiftEmptyArrayStorage;
      }

      v97 = v262;
LABEL_47:
      v8 = v97 >> 14;
      if (v97 >> 14 == v258)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_121;
      }
    }
    v117 = v269;
    v118 = (id)v96;
    if (!v96)
      goto LABEL_83;
    v119 = v264;
    if (!v264)
      goto LABEL_66;
LABEL_59:
    v120 = v119;
    v261 = v118;
    v121 = v118;
    v122 = v120;
    v123 = String.subscript.getter(v274, v111, v266, v268);
    v128 = static String._fromSubstring(_:)(v123, v124, v125, v126, v127);
    v130 = v129;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native(v277) & 1) == 0)
      v277 = (uint64_t)sub_100BCC32C(0, *(_QWORD *)(v277 + 16) + 1, 1, (_QWORD *)v277);
    v96 = *(_QWORD *)(v277 + 16);
    v131 = *(_QWORD *)(v277 + 24);
    if (v96 >= v131 >> 1)
      v277 = (uint64_t)sub_100BCC32C((_QWORD *)(v131 > 1), v96 + 1, 1, (_QWORD *)v277);
    v132 = v277;
    *(_QWORD *)(v277 + 16) = v96 + 1;
    v133 = (_QWORD *)(v132 + 40 * v96);
    v133[4] = v122;
    v133[5] = v128;
    v134 = v273;
    v133[6] = v130;
    v133[7] = v134;
    v133[8] = v113;

    LODWORD(v96) = 0;
    v8 = v276;
    v93 = v276;
    v118 = v261;
LABEL_67:
    v94 = v111;
    v95 = v118;
    goto LABEL_84;
  }
  if (a1 >> 62)
    goto LABEL_132;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_136;
LABEL_4:
  v278[0] = _swiftEmptyArrayStorage;
  result = (uint64_t)sub_100BCD328(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v11 = 0;
    v12 = (char *)v278[0];
    v275 = (char *)(v8 & 0xC000000000000001);
    v274 = xmmword_100EA7AA0;
    v276 = v9;
    v277 = v8;
    do
    {
      v271 = v12;
      if (v275)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v8);
      else
        v13 = *(id *)(v8 + 8 * v11 + 32);
      v14 = v13;
      v15 = objc_msgSend(v13, "lyricsText");
      v16 = objc_msgSend(v15, "string");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v20 = sub_100007E8C(&qword_1011DF4B8);
      v21 = swift_allocObject(v20, 88, 7);
      *(_OWORD *)(v21 + 16) = v274;
      objc_msgSend(v14, "startTime");
      v23 = v22;
      objc_msgSend(v14, "endTime");
      v25 = v24;
      v26 = objc_msgSend(v14, "lyricsText");
      v27 = objc_msgSend(v26, "string");

      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v31 = objc_msgSend(v14, "characterRange");
      v33 = v32;
      objc_msgSend(v14, "characterRange");
      *(_QWORD *)(v21 + 32) = v23;
      *(_QWORD *)(v21 + 40) = v25;
      *(_QWORD *)(v21 + 48) = v28;
      *(_QWORD *)(v21 + 56) = v30;
      *(_QWORD *)(v21 + 64) = v31;
      *(_QWORD *)(v21 + 72) = v33;
      *(_QWORD *)(v21 + 80) = v34;

      v12 = v271;
      v278[0] = v271;
      v36 = *((_QWORD *)v271 + 2);
      v35 = *((_QWORD *)v271 + 3);
      if (v36 >= v35 >> 1)
      {
        sub_100BCD328((char *)(v35 > 1), v36 + 1, 1);
        v12 = (char *)v278[0];
      }
      ++v11;
      *((_QWORD *)v12 + 2) = v36 + 1;
      v37 = &v12[40 * v36];
      *((_QWORD *)v37 + 4) = v17;
      *((_QWORD *)v37 + 5) = v19;
      *((_QWORD *)v37 + 6) = v21;
      *((_QWORD *)v37 + 7) = 0;
      v37[64] = 1;
      v8 = v277;
    }
    while (v276 != v11);
    goto LABEL_121;
  }
  __break(1u);
LABEL_139:
  __break(1u);
  return result;
}

uint64_t sub_100BD2228(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _UNKNOWN **v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;

  v6 = objc_msgSend(a1, "words");
  if (v6)
  {
    v7 = v6;
    v8 = sub_10004A07C(0, &qword_1011DF4A0, MSVLyricsWord_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    v9 = sub_100007E8C(&qword_1011DF4A8);
    v10 = sub_100049F28(&qword_1011DF4B0, &qword_1011DF4A8, (uint64_t)&protocol conformance descriptor for [A]);
    v11 = (_QWORD *)Sequence.exclude(_:)((uint64_t)sub_100BCB9B8, 0, v9, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if (qword_1011DDFD8 != -1)
    swift_once(&qword_1011DDFD8, sub_100BC87E8);
  v12 = swift_bridgeObjectRetain();
  v13 = sub_100BCA2B8(v12);
  swift_bridgeObjectRelease();
  if (a3)
    v14 = sub_100413E70(a2, a3, v13);
  else
    v14 = 0;
  swift_bridgeObjectRelease();
  if (qword_1011DDFD0 != -1)
    swift_once(&qword_1011DDFD0, sub_100BC877C);
  v15 = swift_bridgeObjectRetain();
  v16 = sub_100BCA2B8(v15);
  swift_bridgeObjectRelease();
  if (a3)
    v17 = sub_100413E70(a2, a3, v16);
  else
    v17 = 0;
  swift_bridgeObjectRelease();
  v18 = sub_100BD0B08(a2, a3);
  v19 = objc_msgSend(a1, "primaryVocalText");
  v20 = objc_msgSend(v19, "string");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = objc_msgSend(a1, "lyricsText");
  v25 = objc_msgSend(v24, "string");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = a1;
  objc_msgSend(v29, "endTime");
  objc_msgSend(v29, "startTime");

  LOBYTE(v29) = sub_100BF72F8(2, (uint64_t)v18);
  swift_bridgeObjectRelease();
  v30 = sub_100BD0E58((unint64_t)v11, v21, v23, v26, v28, v29 & 1, v14 & 1, v17 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

unint64_t sub_100BD2534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  NSString v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Locale.Language(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(NLLanguageRecognizer);
  v5 = String._bridgeToObjectiveC()();
  v6 = (unint64_t)objc_msgSend(v4, "dominantLanguageForString:", v5);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = Locale.Language.init(identifier:)(v7, v8);
    v10 = Locale.Language.characterDirection.getter(v9);

    v6 = v10 == 2;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

void sub_100BD2620(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  id v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  char v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;

  v9 = objc_msgSend(a1, "subwords");
  if (!v9)
    goto LABEL_13;
  v11 = v9;
  v12 = sub_10004A07C(0, &qword_1011DF4A0, MSVLyricsWord_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v18 = v13;
    else
      v18 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    *(_QWORD *)&v10 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_13:
    objc_msgSend(a1, "startTime", v10);
    v4 = v20;
    goto LABEL_14;
  }
LABEL_4:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
  }
  else
  {
    if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_45;
    }
    v15 = *(id *)(v13 + 32);
  }
  v16 = v15;
  objc_msgSend(v15, "startTime", swift_bridgeObjectRelease().n128_f64[0]);
  v4 = v17;

LABEL_14:
  v21 = objc_msgSend(a1, "subwords");
  if (!v21)
  {
LABEL_28:
    objc_msgSend(a1, "endTime", v22);
    v29 = v31;
    goto LABEL_29;
  }
  v23 = v21;
  v24 = sub_10004A07C(0, &qword_1011DF4A0, MSVLyricsWord_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if (!((unint64_t)v13 >> 62))
  {
    v25 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_17;
    goto LABEL_27;
  }
  if (v13 < 0)
    v30 = v13;
  else
    v30 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_27:
    *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_28;
  }
LABEL_17:
  v14 = v25 - 1;
  if (__OFSUB__(v25, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
LABEL_46:
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v13);
    goto LABEL_22;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v14 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_48:
    __break(1u);
    return;
  }
  v26 = *(id *)(v13 + 8 * v14 + 32);
LABEL_22:
  v27 = v26;
  objc_msgSend(v26, "endTime", swift_bridgeObjectRelease().n128_f64[0]);
  v29 = v28;

LABEL_29:
  if (qword_1011DDFD8 != -1)
    swift_once(&qword_1011DDFD8, sub_100BC87E8);
  v32 = swift_bridgeObjectRetain();
  v33 = sub_100BCA2B8(v32);
  swift_bridgeObjectRelease();
  if (a3)
    v62 = sub_100413E70(a2, a3, v33);
  else
    v62 = 0;
  v34 = objc_msgSend(a1, "lyricsText", swift_bridgeObjectRelease().n128_f64[0]);
  v35 = objc_msgSend(v34, "string");

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v65 = v37;
  v66 = v36;

  v38 = objc_msgSend(a1, "characterRange");
  v63 = v39;
  v64 = v38;
  v40 = objc_msgSend(a1, "lyricsText");
  v41 = objc_msgSend(v40, "string");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v42 = sub_100BD2534();
  v43 = objc_msgSend(a1, "subwords", swift_bridgeObjectRelease().n128_f64[0]);
  if (v43)
  {
    v44 = v43;
    v61 = a2;
    v45 = sub_10004A07C(0, &qword_1011DF4A0, MSVLyricsWord_ptr);
    v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v45);

    swift_bridgeObjectRetain();
    v47 = objc_msgSend(a1, "lyricsText");
    v48 = objc_msgSend(v47, "string");

    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    v52 = objc_msgSend(a1, "lyricsText");
    v53 = objc_msgSend(v52, "string");

    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    if (qword_1011DDFD0 != -1)
      swift_once(&qword_1011DDFD0, sub_100BC877C);
    v57 = swift_bridgeObjectRetain();
    v58 = sub_100BCA2B8(v57);
    swift_bridgeObjectRelease();
    if (a3)
      v59 = sub_100413E70(v61, a3, v58);
    else
      v59 = 0;
    swift_bridgeObjectRelease();
    v60 = (_QWORD *)sub_100BD0E58(v46, v49, v51, v54, v56, 0, v62 & 1, v59 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v46, 2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v60 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = v29;
  *(_QWORD *)(a4 + 16) = v66;
  *(_QWORD *)(a4 + 24) = v65;
  *(_QWORD *)(a4 + 32) = v64;
  *(_QWORD *)(a4 + 40) = v63;
  *(_BYTE *)(a4 + 48) = v42 & 1;
  *(_QWORD *)(a4 + 56) = v60;
}

_QWORD *sub_100BD2B98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;

  sub_100007E8C(&qword_1011DF4F0);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v8 = 0;
  v54 = a1;
  v11 = *(_QWORD *)(a1 + 64);
  v10 = a1 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(v10 - 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v47 = v10;
  v48 = (unint64_t)(v12 + 63) >> 6;
  v52 = result;
  v53 = result + 8;
  v50 = a3;
  v51 = a4;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v56 = (v14 - 1) & v14;
  for (i = __clz(__rbit64(v14)) | (v8 << 6); ; i = __clz(__rbit64(v17)) + (v8 << 6))
  {
    v19 = *(_QWORD *)(v54 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * i);
    v21 = v20[1];
    v65 = *v20;
    v22 = *(void **)(v19 + 8 * i);
    v58 = v21;
    swift_bridgeObjectRetain();
    v23 = v22;
    v24 = objc_msgSend(a2, "type");
    v25 = objc_msgSend(v23, "lyricsText");
    v26 = objc_msgSend(v25, "string");

    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v57 = v8;
    if (v24 == (id)2)
    {
      v49 = v27;
      v30 = (_QWORD *)sub_100BD2228(v23, a3, a4);
      v31 = objc_msgSend(v23, "backgroundVocals");
      if (v31)
      {
        v32 = v31;
        swift_bridgeObjectRetain();
        sub_100BD2620(v32, a3, a4, (uint64_t)&v59);
        v33 = v60;
        v34 = v61;
        v45 = v62;
        v46 = v59;
        v35 = v63;
        v36 = v64;

        v38 = v45;
        v37 = v46;
      }
      else
      {

        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      result = v52;
      v39 = v65;
      v27 = v49;
    }
    else
    {

      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0uLL;
      v38 = 0uLL;
      v30 = _swiftEmptyArrayStorage;
      result = v52;
      v39 = v65;
    }
    *(_QWORD *)((char *)v53 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v40 = (_QWORD *)(result[6] + 16 * i);
    *v40 = v39;
    v40[1] = v58;
    v41 = result[7] + 88 * i;
    *(_QWORD *)v41 = v27;
    *(_QWORD *)(v41 + 8) = v29;
    *(_QWORD *)(v41 + 16) = v30;
    *(_OWORD *)(v41 + 24) = v37;
    *(_QWORD *)(v41 + 40) = v33;
    *(_QWORD *)(v41 + 48) = v34;
    *(_OWORD *)(v41 + 56) = v38;
    *(_QWORD *)(v41 + 72) = v35;
    *(_QWORD *)(v41 + 80) = v36;
    v42 = result[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    result[2] = v44;
    a3 = v50;
    a4 = v51;
    v14 = v56;
    v8 = v57;
    if (v56)
      goto LABEL_4;
LABEL_5:
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_30;
    if (v16 >= v48)
      return result;
    v17 = *(_QWORD *)(v47 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v48)
        return result;
      v17 = *(_QWORD *)(v47 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v48)
          return result;
        v17 = *(_QWORD *)(v47 + 8 * v8);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v56 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v48)
    return result;
  v17 = *(_QWORD *)(v47 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v48)
      return result;
    v17 = *(_QWORD *)(v47 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_100BD2F10(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  id v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id *v21;
  BOOL *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  double v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  id *v49;
  id v50;
  BOOL *v51;
  id v52;
  void *v53;
  uint64_t v54;
  id v55;
  char **v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSString v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  id v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  BOOL *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  id v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  id v155;
  int v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL4 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  void *v167;
  _QWORD v168[3];
  id v169[2];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176[24];
  char v177[24];
  char v178[24];
  _QWORD v179[6];
  unsigned __int8 v180;
  uint64_t v181;

  v152 = a8;
  v164 = a7;
  LOBYTE(v8) = a6;
  v155 = a5;
  v13 = type metadata accessor for Locale.Language(0);
  v144 = *(_QWORD *)(v13 - 8);
  v145 = v13;
  __chkstk_darwin(v13);
  v143 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179[0] = a1;
  KeyPath = swift_getKeyPath(&unk_100EEBA08);
  v16 = sub_100007E8C(&qword_1011DF490);
  v17 = sub_100049F28(&qword_1011DF498, &qword_1011DF490, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = Sequence.sorted<A>(by:comparator:)(KeyPath, (uint64_t)sub_10067E50C, 0, v16, v17, (uint64_t)&protocol witness table for Double);
  swift_release();
  v153 = v18;
  if ((unint64_t)v18 >> 62)
    goto LABEL_100;
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v20 = v155;
  if (v19)
  {
    if (v19 >= 1)
    {
      v148 = v8 & 1;
      v142 = a2 + 16;
      v21 = (id *)(a3 + 16);
      v22 = a4 + 16;
      v149 = v19;
      v151 = v18 & 0xC000000000000001;
      v150 = (id)objc_opt_self(NLLanguageRecognizer);
      swift_beginAccess(v21, v178, 0, 0);
      swift_beginAccess(v21, v177, 0, 0);
      swift_beginAccess(v22, v176, 1, 0);
      v140 = v21;
      swift_beginAccess(v21, &v175, 1, 0);
      swift_beginAccess(v22, &v174, 0, 0);
      swift_beginAccess(v22, &v173, 0, 0);
      v146 = v22;
      swift_beginAccess(v22, &v172, 0, 0);
      v23 = 0;
      v154 = 0;
      v166 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        v163 = v23;
        if (v151)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v18);
        else
          v24 = *(id *)(v18 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v24, "agent");
        v167 = v25;
        if (!v26)
          goto LABEL_19;
        v28 = v26;
        swift_beginAccess(v142, v168, 33, 0);
        v29 = v28;
        sub_100C6E01C((Swift::Int *)v169, v29);
        swift_endAccess(v168);

        v30 = objc_msgSend(v29, "type");
        if (!v30)
        {

          goto LABEL_19;
        }
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

        v35 = v32 == 0x6E6F73726570 && v34 == 0xE600000000000000;
        if (v35
          || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73726570, 0xE600000000000000, v32, v34, 0) & 1) != 0)
        {
          v36 = objc_msgSend(v29, "identifier");
          if (v36)
          {
            v37 = v36;
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
            v40 = v39;

          }
          else
          {
            v38 = 0;
            v40 = 0;
          }
          if (*v140 && (v42 = objc_msgSend(*v140, "identifier")) != 0)
          {
            v43 = v42;
            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
            v46 = v45;

            if (v40)
              goto LABEL_27;
          }
          else
          {
            v44 = 0;
            v46 = 0;
            if (v40)
            {
LABEL_27:
              if (!v46)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v155;
                goto LABEL_42;
              }
              if (v38 == v44 && v40 == v46)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v155;
              }
              else
              {
                v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v44, v46, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v20 = v155;
                if ((v47 & 1) == 0)
                  goto LABEL_41;
              }
              goto LABEL_33;
            }
          }
          v20 = v155;
          if (v46)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            swift_bridgeObjectRelease();
LABEL_42:
            v49 = v140;
            v50 = *v140;
            v51 = v146;
            v25 = v167;
            if (*v140)
            {
              *v146 = !*v146;
              v50 = *v49;
            }
            *v49 = v28;

            v41 = *v51;
            goto LABEL_45;
          }
        }
LABEL_33:
        if (v32 == 0x70756F7267 && v34 == 0xE500000000000000)
        {

          *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
          v156 = 0;
          v25 = v167;
          goto LABEL_46;
        }
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70756F7267, 0xE500000000000000, v32, v34, 0);
        v25 = v167;
        if ((v48 & 1) != 0)
        {

          *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
          v156 = 0;
          goto LABEL_46;
        }
        if (v32 == 0x726568746FLL && v34 == 0xE500000000000000)
        {

          *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
          v41 = 1;
          goto LABEL_45;
        }
        v120 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726568746FLL, 0xE500000000000000, v32, v34, 0);

        *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
        if ((v120 & 1) != 0)
        {
          v41 = 1;
          goto LABEL_45;
        }
LABEL_19:
        v41 = *v146;
LABEL_45:
        v156 = v41;
LABEL_46:
        v52 = objc_msgSend(v25, "translationKey", v27);
        if (v52)
        {
          v53 = v52;
          v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v162 = v54;

        }
        else
        {
          v161 = 0;
          v162 = 0;
        }
        v55 = objc_msgSend(v20, "type");
        v56 = &selRef_primaryVocalText;
        if (v55 != (id)2)
          v56 = &selRef_lyricsText;
        v57 = objc_msgSend(v25, *v56);
        v58 = objc_msgSend(v57, "string");

        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v61 = v60;

        v158 = v59;
        v159 = v61;
        v62 = String._bridgeToObjectiveC()();
        a4 = (BOOL *)objc_msgSend(v150, "dominantLanguageForString:", v62);

        if (a4)
        {
          v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
          v64 = v143;
          v66 = Locale.Language.init(identifier:)(v63, v65);
          v67 = Locale.Language.characterDirection.getter(v66);

          v160 = v67 == 2;
          (*(void (**)(char *, uint64_t))(v144 + 8))(v64, v145);
        }
        else
        {
          v160 = 0;
        }
        v68 = objc_msgSend(v25, "words");
        if (v68)
        {
          v69 = v68;
          v70 = sub_10004A07C(0, &qword_1011DF4A0, MSVLyricsWord_ptr);
          v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, v70);

          v168[0] = v71;
          v72 = sub_100007E8C(&qword_1011DF4A8);
          v73 = sub_100049F28(&qword_1011DF4B0, &qword_1011DF4A8, (uint64_t)&protocol conformance descriptor for [A]);
          v74 = v72;
          a4 = (BOOL *)v154;
          a3 = Sequence.exclude(_:)((uint64_t)sub_100BCB9B8, 0, v74, v73);
          v154 = (char *)a4;
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (uint64_t)_swiftEmptyArrayStorage;
        }
        v75 = swift_allocObject(&unk_1011058D8, 24, 7);
        v165 = v75;
        *(_QWORD *)(v75 + 16) = _swiftEmptyArrayStorage;
        v76 = (uint64_t *)(v75 + 16);
        v77 = swift_allocObject(&unk_101105900, 80, 7);
        *(_OWORD *)(v77 + 16) = 0u;
        v78 = v77 + 16;
        *(_OWORD *)(v77 + 32) = 0u;
        *(_OWORD *)(v77 + 48) = 0u;
        *(_OWORD *)(v77 + 64) = 0u;
        if (objc_msgSend(v20, "type") == (id)2)
        {
          v79 = objc_msgSend(v20, "language");
          if (v79)
          {
            v80 = v79;
            v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
            v83 = v82;

          }
          else
          {
            v81 = 0;
            v83 = 0;
          }
          v84 = v167;
          v85 = sub_100BD2228(v167, v81, v83);
          swift_bridgeObjectRelease();
          swift_beginAccess(v76, &v171, 1, 0);
          *v76 = v85;
          v86 = objc_msgSend(v84, "backgroundVocals", swift_bridgeObjectRelease().n128_f64[0]);
          if (v86)
          {
            v141 = v77 + 16;
            v87 = v86;
            v88 = objc_msgSend(v155, "language");
            if (v88)
            {
              v89 = v88;
              v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
              v92 = v91;

            }
            else
            {

              v90 = 0;
              v92 = 0;
            }
            sub_100BD2620(v87, v90, v92, (uint64_t)v179);
            v93 = v179[0];
            v94 = v179[1];
            v95 = v179[2];
            a4 = (BOOL *)v179[3];
            v96 = v179[4];
            v157 = (id)v179[5];
            v147 = v180;
            v97 = v181;

            v78 = v141;
          }
          else
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            a4 = 0;
            v96 = 0;
            v157 = 0;
            v147 = 0;
            v97 = 0;
          }
          swift_beginAccess(v78, &v170, 1, 0);
          v98 = *(_QWORD *)(v77 + 16);
          v99 = *(_QWORD *)(v77 + 24);
          v100 = *(_QWORD *)(v77 + 32);
          v101 = *(_QWORD *)(v77 + 40);
          v102 = *(_QWORD *)(v77 + 48);
          v103 = *(_QWORD *)(v77 + 56);
          v104 = *(_QWORD *)(v77 + 64);
          v105 = *(_QWORD *)(v77 + 72);
          *(_QWORD *)(v77 + 16) = v93;
          *(_QWORD *)(v77 + 24) = v94;
          *(_QWORD *)(v77 + 32) = v95;
          *(_QWORD *)(v77 + 40) = a4;
          v106 = v157;
          *(_QWORD *)(v77 + 48) = v96;
          *(_QWORD *)(v77 + 56) = v106;
          *(_QWORD *)(v77 + 64) = v147;
          *(_QWORD *)(v77 + 72) = v97;
          sub_100BD0A58(v98, v99, v100, v101, v102, v103, v104, v105);
          v25 = v167;
        }
        v8 = objc_msgSend(v25, "lineIndex");
        objc_msgSend(v25, "startTime");
        v108 = v107;
        objc_msgSend(v25, "endTime");
        v110 = v109;
        if ((unint64_t)a3 >> 62)
        {
          if (a3 < 0)
            a4 = (BOOL *)a3;
          else
            a4 = (BOOL *)(a3 & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain();
          a2 = _CocoaArrayWrapper.endIndex.getter(a4);
          v157 = v8;
          if (!a2)
          {
LABEL_86:
            v117 = v164;
            objc_msgSend(v25, "startTime", swift_bridgeObjectRelease().n128_f64[0]);
            v113 = v121;
            objc_msgSend(v25, "endTime", swift_bridgeObjectRelease().n128_f64[0]);
            v119 = v122;
            goto LABEL_87;
          }
        }
        else
        {
          a2 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v157 = v8;
          if (!a2)
            goto LABEL_86;
        }
        v18 = a3 & 0xC000000000000001;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v111 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
        }
        else
        {
          if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            if (v18 < 0)
              v137 = v153;
            else
              v137 = v18 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v138 = v137;
            v18 = v153;
            v19 = _CocoaArrayWrapper.endIndex.getter(v138);
            swift_bridgeObjectRelease();
            goto LABEL_3;
          }
          v111 = (char *)*(id *)(a3 + 32);
        }
        a4 = (BOOL *)v111;
        objc_msgSend(v111, "startTime", swift_bridgeObjectRelease().n128_f64[0]);
        v113 = v112;

        v114 = a2 - 1;
        if (__OFSUB__(a2, 1))
          goto LABEL_97;
        if (v18)
        {
          v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v114, a3);
        }
        else
        {
          if ((v114 & 0x8000000000000000) != 0)
            goto LABEL_98;
          if (v114 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_99;
          v115 = *(id *)(a3 + 8 * v114 + 32);
        }
        v116 = v115;
        v117 = v164;
        objc_msgSend(v115, "endTime", swift_bridgeObjectRelease().n128_f64[0]);
        v119 = v118;

LABEL_87:
        v123 = (_QWORD *)swift_allocObject(&unk_101105928, 56, 7);
        v124 = v152;
        v126 = v161;
        v125 = v162;
        v123[2] = v152;
        v123[3] = v126;
        v127 = v158;
        v123[4] = v125;
        v123[5] = v127;
        v123[6] = v159;
        v128 = (_QWORD *)swift_allocObject(&unk_101105950, 48, 7);
        v128[2] = v124;
        v128[3] = v126;
        v129 = v165;
        v128[4] = v125;
        v128[5] = v129;
        v130 = (_QWORD *)swift_allocObject(&unk_101105978, 48, 7);
        v130[2] = v124;
        v130[3] = v126;
        v130[4] = v125;
        v130[5] = v77;
        swift_bridgeObjectRetain_n(v125, 2);
        swift_retain_n(v124, 3);
        swift_bridgeObjectRetain_n(v117, 2);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v166) & 1) == 0)
          v166 = sub_100BCC570(0, *((_QWORD *)v166 + 2) + 1, 1, v166);
        v20 = v155;
        v131 = v157;
        v133 = *((_QWORD *)v166 + 2);
        v132 = *((_QWORD *)v166 + 3);
        if (v133 >= v132 >> 1)
          v166 = sub_100BCC570((char *)(v132 > 1), v133 + 1, 1, v166);
        v134 = v163 + 1;
        v135 = v166;
        *((_QWORD *)v166 + 2) = v133 + 1;
        v136 = &v135[104 * v133];
        *((_QWORD *)v136 + 4) = v108;
        *((_QWORD *)v136 + 5) = v110;
        *((_QWORD *)v136 + 6) = v131;
        v23 = v134;
        v136[56] = v156;
        v136[57] = v160;
        v136[58] = v148;
        *((_QWORD *)v136 + 8) = v164;
        *((_QWORD *)v136 + 9) = v113;
        *((_QWORD *)v136 + 10) = v119;
        *((_QWORD *)v136 + 11) = sub_100BD5518;
        *((_QWORD *)v136 + 12) = v123;
        *((_QWORD *)v136 + 13) = sub_100BD552C;
        *((_QWORD *)v136 + 14) = v128;
        *((_QWORD *)v136 + 15) = sub_100BD5570;
        *((_QWORD *)v136 + 16) = v130;

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v18 = v153;
        if (v149 == v23)
          goto LABEL_95;
      }
    }
    __break(1u);
  }
  else
  {
    v166 = (char *)_swiftEmptyArrayStorage;
LABEL_95:
    swift_bridgeObjectRelease();
  }
}

