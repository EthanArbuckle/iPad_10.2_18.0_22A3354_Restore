uint64_t sub_100003324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  return swift_task_switch(sub_100003340, 0, 0);
}

uint64_t sub_100003340()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;

  v1 = dispatch thunk of AppConfigurationManagerType.refresh()(v0[6], v0[7]);
  v2 = (void *)zalgo.getter();
  v0[9] = Promise.timeout(after:on:message:)(v2, 0, 0, 10.0);

  swift_release(v1);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[10] = v3;
  *v3 = v0;
  v3[1] = sub_1000033D8;
  return Promise.resolveAsync()(v0[5]);
}

uint64_t sub_1000033D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10000344C, 0, 0);
  swift_release(*(_QWORD *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10000344C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = v0[11];
  v3 = v0[6];
  v12 = v0[7];
  swift_release(v0[9]);
  sub_100003A40();
  v4 = (void *)static OS_os_log.default.getter();
  v5 = static os_log_type_t.error.getter();
  sub_100003A7C(0);
  v7 = swift_allocObject(v6, 72, 7);
  v0[2] = 0;
  *(_OWORD *)(v7 + 16) = xmmword_1000DB170;
  v0[3] = 0xE000000000000000;
  v0[4] = v2;
  v8 = sub_100003AE0(0, (unint64_t *)&qword_100111900, (uint64_t)&protocol descriptor for Error);
  _print_unlocked<A, B>(_:_:)(v0 + 4, v0 + 2, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v0[2];
  v10 = v1[3];
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_100003B2C();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v10;
  os_log(_:dso:log:type:_:)("failed to refresh app configuration with error: %{public}@", 58, 2, &_mh_execute_header, v4, v5, v7);
  swift_bridgeObjectRelease(v7);

  dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v3, v12);
  swift_errorRelease(v2);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t variable initialization expression of BilingualFeedManager._isBilingualFeedEnabled()
{
  uint64_t v0;
  uint64_t v1;

  v0 = static Settings.News.bilingualFeedEnabled.getter();
  sub_1000035F0();
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return SettingProperty.init(_:)(v0);
}

void sub_1000035F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100111610)
  {
    v0 = type metadata accessor for SettingProperty(0, &type metadata for Bool, &protocol witness table for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100111610);
  }
}

uint64_t sub_10000364C(uint64_t a1, uint64_t a2)
{
  return sub_100003878(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100003664(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000036D8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100003754@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

NSNumber sub_100003794()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_10000379C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1000037EC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_100003840(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100003864(uint64_t a1, uint64_t a2)
{
  return sub_100003878(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100003878(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000038B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000038F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100003968(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

void type metadata accessor for FCSubscriptionState(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111860, (uint64_t)&unk_100103C40);
}

void type metadata accessor for UIStatusBarStyle(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111868, (uint64_t)&unk_100103C60);
}

void type metadata accessor for IndicatorStyle(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111870, (uint64_t)&unk_100103C80);
}

void type metadata accessor for UIKeyboardAppearance(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111878, (uint64_t)&unk_100103CA0);
}

unint64_t sub_100003A40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001118E8;
  if (!qword_1001118E8)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001118E8);
  }
  return result;
}

void sub_100003A7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001118F0)
  {
    v2 = sub_100003AE0(255, (unint64_t *)&qword_1001118F8, (uint64_t)&protocol descriptor for CVarArg);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001118F0);
  }
}

uint64_t sub_100003AE0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = a3;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_100003B2C()
{
  unint64_t result;

  result = qword_100111908;
  if (!qword_100111908)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100111908);
  }
  return result;
}

uint64_t sub_100003B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003D3C(&qword_1001132E0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB62C);
  v3 = sub_100003D3C((unint64_t *)&unk_1001119A0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB314);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003BF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100003C3C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111910, (uint64_t)&unk_100103CC0);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111918, (uint64_t)&unk_100103CE8);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_100003CA0(a1, &qword_100111920, (uint64_t)&unk_100103D10);
}

void sub_100003CA0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100003CE4()
{
  return sub_100003D3C(&qword_100111928, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB2D8);
}

uint64_t sub_100003D10()
{
  return sub_100003D3C(&qword_100111930, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB2AC);
}

uint64_t sub_100003D3C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100003D7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003D3C(&qword_100111988, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB670);
  v3 = sub_100003D3C((unint64_t *)&unk_100111990, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB428);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003E00()
{
  return sub_100003D3C(&qword_100111938, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB3EC);
}

uint64_t sub_100003E2C()
{
  return sub_100003D3C(&qword_100111940, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB3C0);
}

_QWORD *sub_100003E58@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_100003E68@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_100003E74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_100003D3C(&qword_100111970, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1000DB59C);
  v3 = sub_100003D3C(&qword_100111978, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1000DB53C);
  v4 = sub_10000404C();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_100003F14()
{
  return sub_100003D3C(&qword_100111948, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1000DB500);
}

uint64_t sub_100003F40()
{
  return sub_100003D3C(&qword_100111950, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1000DB4D4);
}

uint64_t sub_100003F6C()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_100003F74()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_100003FA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

BOOL sub_100003FB4(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100003FC8()
{
  return sub_100003D3C(&qword_100111958, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1000DB570);
}

uint64_t sub_100003FF4()
{
  return sub_100003D3C(&qword_100111960, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB348);
}

uint64_t sub_100004020()
{
  return sub_100003D3C(&qword_100111968, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB45C);
}

unint64_t sub_10000404C()
{
  unint64_t result;

  result = qword_100111980;
  if (!qword_100111980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100111980);
  }
  return result;
}

uint64_t sub_100004098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v5[37] = a4;
  v5[38] = v4;
  v5[35] = a2;
  v5[36] = a3;
  v5[34] = a1;
  v6 = type metadata accessor for PriceChangeDisplay(0);
  v5[39] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[40] = v7;
  v5[41] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WatchlistSortState(0);
  v5[42] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[43] = v9;
  v5[44] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CachePolicy(0);
  v5[45] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[46] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[47] = swift_task_alloc(v12);
  v5[48] = swift_task_alloc(v12);
  v13 = type metadata accessor for StockPriceData(0);
  v5[49] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[50] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[51] = swift_task_alloc(v15);
  v5[52] = swift_task_alloc(v15);
  v5[53] = swift_task_alloc(v15);
  v16 = type metadata accessor for AppConfiguration(0);
  v5[54] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[55] = v17;
  v5[56] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Watchlist(0);
  v5[57] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[58] = v19;
  v5[59] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
  v21 = (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[60] = swift_task_alloc(v21);
  v5[61] = swift_task_alloc(v21);
  return swift_task_switch(sub_100004238, 0, 0);
}

uint64_t sub_100004238(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  __n128 v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v1[62] = OBJC_IVAR____TtC12StocksWidget25WatchlistViewModelService_logger;
  v2 = Logger.logObject.getter(a1);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v2, v4))
  {
    v5 = v1[37];
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 134349314;
    v1[31] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 31, v1 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(v1 + 2);
    v8 = v1[3];
    v1[33] = sub_10007ECFC(v1[2], v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 33, v1 + 34, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v2, v4, "will fetch watchlist with max count: %{public}ld, id=%{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v9 = (_QWORD *)v1[38];
  v10 = v9[5];
  v11 = v9[6];
  sub_100007184(v9 + 2, v10);
  v1[63] = dispatch thunk of WatchlistManagerType.reloadWatchlists(synchronize:)(1, v10, v11);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v1[64] = v12;
  *v12 = v1;
  v12[1] = sub_100004438;
  return Promise.resolveAsync()(v1 + 32);
}

uint64_t sub_100004438()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 512);
  *(_QWORD *)(*v1 + 520) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100005610;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 504);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 256));
    swift_release(v5);
    v4 = sub_1000044B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000044B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (_QWORD *)v0[38];
  v2 = v0[35];
  v3 = v0[36];
  v4 = v1[5];
  v5 = v1[6];
  sub_100007184(v1 + 2, v4);
  v0[66] = dispatch thunk of WatchlistManagerType.fetchWatchlist(id:)(v2, v3, v4, v5);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[67] = v6;
  *v6 = v0;
  v6[1] = sub_100004544;
  return Promise.resolveAsync()(v0[61]);
}

uint64_t sub_100004544()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000058E4;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 528));
    v4 = sub_1000045B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000045B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  sub_100007294(*(_QWORD *)(v0 + 488), v1, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 288);
    sub_1000072E0(*(_QWORD *)(v0 + 480), &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
    v5 = swift_bridgeObjectRetain_n(v4, 2);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v6, v8))
    {
      v10 = *(_QWORD *)(v0 + 280);
      v9 = *(_QWORD *)(v0 + 288);
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v34 = v12;
      *(_DWORD *)v11 = 136446466;
      swift_bridgeObjectRetain(v9);
      *(_QWORD *)(v0 + 184) = sub_10007ECFC(v10, v9, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease_n(v9, 3);
      *(_WORD *)(v11 + 12) = 2082;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v13 = *(_QWORD *)(v0 + 488);
      TaskLocal.get()((_QWORD *)(v0 + 96));
      v14 = *(_QWORD *)(v0 + 104);
      *(_QWORD *)(v0 + 160) = sub_10007ECFC(*(_QWORD *)(v0 + 96), v14, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "failed fetch watchlist with not found identifier: %{public}s, id=%{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, &type metadata for Any[8]);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      v15 = v13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 488);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 288), 2);

      v15 = v21;
    }
    sub_1000072E0(v15, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
    v22 = *(_QWORD *)(v0 + 272);
    v23 = type metadata accessor for WidgetWatchlist(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    v24 = *(_QWORD *)(v0 + 480);
    v25 = *(_QWORD *)(v0 + 472);
    v26 = *(_QWORD *)(v0 + 448);
    v28 = *(_QWORD *)(v0 + 416);
    v27 = *(_QWORD *)(v0 + 424);
    v29 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 376);
    v30 = *(_QWORD *)(v0 + 384);
    v32 = *(_QWORD *)(v0 + 352);
    v33 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD **)(v0 + 304);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 32))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 456));
    v17 = v16[10];
    v18 = v16[11];
    sub_100007184(v16 + 7, v17);
    v19 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of WatchlistDeprecationServiceType.deprecateStocksIfNeeded()[1]);
    *(_QWORD *)(v0 + 552) = v19;
    *v19 = v0;
    v19[1] = sub_100004940;
    return dispatch thunk of WatchlistDeprecationServiceType.deprecateStocksIfNeeded()(v17, v18);
  }
}

uint64_t sub_100004940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100005BB8;
  else
    v3 = sub_1000049A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000049A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[38];
  v3 = v1[20];
  v2 = v1[21];
  sub_100007184(v1 + 17, v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1001118E4);
  v0[71] = v4;
  *v4 = v0;
  v4[1] = sub_100004A1C;
  return sub_100003324(v0[56], v3, v2);
}

uint64_t sub_100004A1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 440);
  v2 = *(_QWORD *)(*v0 + 448);
  v4 = *(_QWORD *)(*v0 + 432);
  swift_task_dealloc(*(_QWORD *)(*v0 + 568));
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 576) = v5;
  v5(v2, v4);
  return swift_task_switch(sub_100004A90, 0, 0);
}

uint64_t sub_100004A90()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[59];
  v2 = (_QWORD *)v0[38];
  v3 = v2[5];
  v4 = v2[6];
  sub_100007184(v2 + 2, v3);
  v0[73] = dispatch thunk of WatchlistManagerType.fetchStocks(from:)(v1, v3, v4);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[74] = v5;
  *v5 = v0;
  v5[1] = sub_100004B24;
  return Promise.resolveAsync()(v0 + 16);
}

uint64_t sub_100004B24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 592);
  *(_QWORD *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 584));
  if (v0)
    v4 = sub_100005EB0;
  else
    v4 = sub_100004B90;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100004B90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double refreshed;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  __n128 v29;
  void (*v30)(double *, uint64_t, __n128);
  _QWORD *v31;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  double *v35;
  uint64_t v36;
  double *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = v0[16];
  v0[76] = v1;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v41[0] = v7;
    *(_DWORD *)v6 = 136446466;
    type metadata accessor for Stock(0);
    v8 = swift_bridgeObjectRetain(v1);
    v9 = Array.description.getter(v8);
    v11 = v10;
    swift_bridgeObjectRelease(v1);
    v0[28] = sub_10007ECFC(v9, v11, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v1, 2);
    *(_WORD *)(v6 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(v0 + 4);
    v12 = v0[5];
    v0[30] = sub_10007ECFC(v0[4], v12, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "did fetch stocks: %{public}s, id=%{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v1, 2);
  }
  v13 = (void (*)(uint64_t, uint64_t))v0[72];
  v14 = v0[56];
  v15 = v0[54];
  v33 = v15;
  v34 = v13;
  v16 = v0[46];
  v37 = (double *)v0[47];
  v35 = (double *)v0[48];
  v36 = v0[45];
  v17 = (_QWORD *)v0[38];
  v18 = v17 + 17;
  v39 = v17[15];
  v40 = v17[16];
  sub_100007184(v17 + 12, v39);
  v38 = sub_100006818(v1);
  v19 = v17[20];
  v20 = v17[21];
  sub_100007184(v17 + 17, v19);
  v21 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v19, v20);
  refreshed = AppConfiguration.stockPriceAutoRefreshMinimumInterval.getter(v21);
  v13(v14, v15);
  *v35 = refreshed;
  v23 = enum case for CachePolicy.maxAge(_:);
  v24 = *(void (**)(void))(v16 + 104);
  v24();
  v26 = v17[20];
  v25 = v17[21];
  sub_100007184(v18, v26);
  v27 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v26, v25);
  v28 = AppConfiguration.sparklineAutoRefreshMinimumInterval.getter(v27);
  v34(v14, v33);
  *v37 = v28;
  ((void (*)(double *, uint64_t, uint64_t))v24)(v37, v23, v36);
  v0[77] = dispatch thunk of StockPriceDataManagerType.priceData(for:quoteCachePolicy:sparklineCachePolicy:)(v38, v35, v37, v39, v40);
  v29 = swift_bridgeObjectRelease(v38);
  v30 = *(void (**)(double *, uint64_t, __n128))(v16 + 8);
  v30(v37, v36, v29);
  ((void (*)(double *, uint64_t))v30)(v35, v36);
  v31 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[78] = v31;
  *v31 = v0;
  v31[1] = sub_100004F34;
  return Promise.resolveAsync()(v0[52]);
}

uint64_t sub_100004F34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 624);
  *(_QWORD *)(*v1 + 632) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000061A8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 616));
    v4 = sub_100004FA0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100004FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  __n128 v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 392);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 32))(v1, *(_QWORD *)(v0 + 416), v4);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v4);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = *(_QWORD *)(v0 + 408);
    v77 = *(_QWORD *)(v0 + 400);
    v80 = *(_QWORD *)(v0 + 392);
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v87[0] = v11;
    v12.n128_u64[0] = 136446466;
    *(_DWORD *)v10 = 136446466;
    v13 = StockPriceData.quotes.getter(v12);
    v15 = type metadata accessor for Quote(0, v14);
    v16 = Dictionary.description.getter(v13, &type metadata for String, v15, &protocol witness table for String);
    v18 = v17;
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v0 + 200) = sub_10007ECFC(v16, v18, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v10 + 4, v10 + 12);
    v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t, __n128))(v77 + 8))(v9, v80, v19);
    *(_WORD *)(v10 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 64));
    v20 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 216) = sub_10007ECFC(*(_QWORD *)(v0 + 64), v20, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "did fetch quotes: %{public}s, id=%{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, &type metadata for Any[8]);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    v22 = *(_QWORD *)(v0 + 400);
    v21 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 392);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v24 = *(_QWORD *)(v0 + 608);
  v25 = *(_QWORD *)(v0 + 424);
  v26 = *(_QWORD *)(v0 + 344);
  v27 = *(_QWORD *)(v0 + 352);
  v78 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD **)(v0 + 304);
  v81 = *(_QWORD *)(v0 + 296);
  v30 = v28[25];
  v29 = v28[26];
  sub_100007184(v28 + 22, v30);
  Watchlist.sortState.getter();
  v31 = dispatch thunk of WatchlistSortingServiceType.sort(_:by:with:)(v24, v27, v25, v30, v29);
  v32 = swift_bridgeObjectRelease(v24);
  (*(void (**)(uint64_t, uint64_t, __n128))(v26 + 8))(v27, v78, v32);
  v33 = sub_1000858C8(v81, v31);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v40 = swift_task_alloc(32);
  *(_QWORD *)(v40 + 16) = v25;
  *(_QWORD *)(v40 + 24) = v28;
  sub_10001E1B4((void (*)(char *))sub_10000722C, v40, v35, v37, v39);
  v42 = v41;
  swift_unknownObjectRelease(v33);
  swift_task_dealloc(v40);
  v43 = swift_bridgeObjectRetain_n(v42, 2);
  v44 = Logger.logObject.getter(v43);
  v46 = static os_log_type_t.default.getter(v45);
  if (os_log_type_enabled(v44, v46))
  {
    v47 = swift_slowAlloc(22, -1);
    v48 = swift_slowAlloc(64, -1);
    v87[0] = v48;
    *(_DWORD *)v47 = 136446466;
    type metadata accessor for WidgetStock(0);
    v49 = swift_bridgeObjectRetain(v42);
    v50 = Array.description.getter(v49);
    v52 = v51;
    swift_bridgeObjectRelease(v42);
    *(_QWORD *)(v0 + 152) = sub_10007ECFC(v50, v52, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease_n(v42, 2);
    *(_WORD *)(v47 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 112));
    v53 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 168) = sub_10007ECFC(*(_QWORD *)(v0 + 112), v53, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v44, v46, "did fetch watchlist models: %{public}s, id=%{public}s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy(v48, 2, &type metadata for Any[8]);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    v54 = swift_bridgeObjectRelease_n(v42, 2);
  }
  v85 = v42;
  if ((Watchlist.isDefaultWatchlist.getter(v54) & 1) != 0)
    v55 = static Watchlist.defaultWatchlistName.getter();
  else
    v55 = Watchlist.name.getter();
  v57 = *(_QWORD *)(v0 + 488);
  v59 = *(_QWORD *)(v0 + 464);
  v58 = *(_QWORD *)(v0 + 472);
  v60 = *(_QWORD *)(v0 + 456);
  v83 = v55;
  v84 = *(_QWORD *)(v0 + 424);
  v61 = *(_QWORD *)(v0 + 400);
  v79 = v56;
  v82 = *(_QWORD *)(v0 + 392);
  v62 = *(_QWORD *)(v0 + 320);
  v63 = *(_QWORD *)(v0 + 328);
  v64 = *(_QWORD *)(v0 + 312);
  v65 = *(uint64_t **)(v0 + 272);
  Watchlist.displayState.getter(v55);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  sub_1000072E0(v57, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
  *v65 = v83;
  v65[1] = v79;
  v65[2] = v85;
  v66 = type metadata accessor for WidgetWatchlist(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))((char *)v65 + *(int *)(v66 + 24), v63, v64);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v84, v82);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
  v67 = *(_QWORD *)(v0 + 480);
  v68 = *(_QWORD *)(v0 + 472);
  v69 = *(_QWORD *)(v0 + 448);
  v71 = *(_QWORD *)(v0 + 416);
  v70 = *(_QWORD *)(v0 + 424);
  v72 = *(_QWORD *)(v0 + 408);
  v74 = *(_QWORD *)(v0 + 376);
  v73 = *(_QWORD *)(v0 + 384);
  v75 = *(_QWORD *)(v0 + 352);
  v86 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v86);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release(*(_QWORD *)(v0 + 504));
  v1 = *(_QWORD *)(v0 + 520);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 138543618;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 232) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v5 + 4, v5 + 12);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v5 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 48));
    v9 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 208) = sub_10007ECFC(*(_QWORD *)(v0 + 48), v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch watchlist with error: %{public}@, id=%{public}s", (uint8_t *)v5, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v6, 1, v10);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    v11 = swift_errorRelease(v1);
  }
  v13 = *(_QWORD *)(v0 + 480);
  v12 = *(_QWORD *)(v0 + 488);
  v14 = *(_QWORD *)(v0 + 472);
  v15 = *(_QWORD *)(v0 + 448);
  v17 = *(_QWORD *)(v0 + 416);
  v16 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 352);
  v23 = *(_QWORD *)(v0 + 328);
  swift_willThrow(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000058E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release(*(_QWORD *)(v0 + 528));
  v1 = *(_QWORD *)(v0 + 544);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 138543618;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 232) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v5 + 4, v5 + 12);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v5 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 48));
    v9 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 208) = sub_10007ECFC(*(_QWORD *)(v0 + 48), v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch watchlist with error: %{public}@, id=%{public}s", (uint8_t *)v5, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v6, 1, v10);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    v11 = swift_errorRelease(v1);
  }
  v13 = *(_QWORD *)(v0 + 480);
  v12 = *(_QWORD *)(v0 + 488);
  v14 = *(_QWORD *)(v0 + 472);
  v15 = *(_QWORD *)(v0 + 448);
  v17 = *(_QWORD *)(v0 + 416);
  v16 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 352);
  v23 = *(_QWORD *)(v0 + 328);
  swift_willThrow(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 488);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 8))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 456));
  sub_1000072E0(v1, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
  v2 = *(_QWORD *)(v0 + 560);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v25 = v8;
    *(_DWORD *)v6 = 138543618;
    swift_errorRetain(v2);
    v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 232) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v6 + 4, v6 + 12);
    *v7 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    *(_WORD *)(v6 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 48));
    v10 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 208) = sub_10007ECFC(*(_QWORD *)(v0 + 48), v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to fetch watchlist with error: %{public}@, id=%{public}s", (uint8_t *)v6, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v7, 1, v11);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v2);
    v12 = swift_errorRelease(v2);
  }
  v14 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 488);
  v15 = *(_QWORD *)(v0 + 472);
  v16 = *(_QWORD *)(v0 + 448);
  v18 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 424);
  v19 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 384);
  v22 = *(_QWORD *)(v0 + 376);
  v23 = *(_QWORD *)(v0 + 352);
  v24 = *(_QWORD *)(v0 + 328);
  swift_willThrow(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 488);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 8))(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 456));
  sub_1000072E0(v1, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
  v2 = *(_QWORD *)(v0 + 600);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v25 = v8;
    *(_DWORD *)v6 = 138543618;
    swift_errorRetain(v2);
    v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 232) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v6 + 4, v6 + 12);
    *v7 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    *(_WORD *)(v6 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 48));
    v10 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 208) = sub_10007ECFC(*(_QWORD *)(v0 + 48), v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to fetch watchlist with error: %{public}@, id=%{public}s", (uint8_t *)v6, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v7, 1, v11);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v2);
    v12 = swift_errorRelease(v2);
  }
  v14 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 488);
  v15 = *(_QWORD *)(v0 + 472);
  v16 = *(_QWORD *)(v0 + 448);
  v18 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 424);
  v19 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 384);
  v22 = *(_QWORD *)(v0 + 376);
  v23 = *(_QWORD *)(v0 + 352);
  v24 = *(_QWORD *)(v0 + 328);
  swift_willThrow(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000061A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  __n128 v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[2];

  v1 = *(_QWORD *)(v0 + 632);
  v2 = swift_release(*(_QWORD *)(v0 + 616));
  static StockPriceData.empty.getter(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 632);
    v7 = swift_slowAlloc(22, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    v9 = swift_slowAlloc(32, -1);
    v76[0] = v9;
    *(_DWORD *)v7 = 138543618;
    swift_errorRetain(v6);
    v10 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 176) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4, v7 + 12);
    *v8 = v10;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    *(_WORD *)(v7 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v11 = *(_QWORD *)(v0 + 632);
    TaskLocal.get()((_QWORD *)(v0 + 80));
    v12 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 192) = sub_10007ECFC(*(_QWORD *)(v0 + 80), v12, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to fetch quotes with error: %{public}@, id=%{public}s", (uint8_t *)v7, 0x16u);
    sub_100007248(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8);
    swift_arrayDestroy(v8, 1, v13);
    swift_slowDealloc(v8, -1, -1);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_errorRelease(v11);

  }
  else
  {
    v14 = *(_QWORD *)(v0 + 632);
    swift_errorRelease(v14);

    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }
  v15 = *(_QWORD *)(v0 + 608);
  v16 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 344);
  v17 = *(_QWORD *)(v0 + 352);
  v19 = *(_QWORD **)(v0 + 304);
  v69 = *(_QWORD *)(v0 + 336);
  v71 = *(_QWORD *)(v0 + 296);
  v20 = v19[25];
  v21 = v19[26];
  sub_100007184(v19 + 22, v20);
  Watchlist.sortState.getter();
  v22 = dispatch thunk of WatchlistSortingServiceType.sort(_:by:with:)(v15, v17, v16, v20, v21);
  v23 = swift_bridgeObjectRelease(v15);
  (*(void (**)(uint64_t, uint64_t, __n128))(v18 + 8))(v17, v69, v23);
  v24 = sub_1000858C8(v71, v22);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = swift_task_alloc(32);
  *(_QWORD *)(v31 + 16) = v16;
  *(_QWORD *)(v31 + 24) = v19;
  sub_10001E1B4((void (*)(char *))sub_10000722C, v31, v26, v28, v30);
  v33 = v32;
  swift_unknownObjectRelease(v24);
  swift_task_dealloc(v31);
  v34 = swift_bridgeObjectRetain_n(v33, 2);
  v35 = Logger.logObject.getter(v34);
  v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v35, v37))
  {
    v38 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v76[0] = v39;
    *(_DWORD *)v38 = 136446466;
    type metadata accessor for WidgetStock(0);
    v40 = swift_bridgeObjectRetain(v33);
    v41 = Array.description.getter(v40);
    v43 = v42;
    swift_bridgeObjectRelease(v33);
    *(_QWORD *)(v0 + 152) = sub_10007ECFC(v41, v43, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease_n(v33, 2);
    *(_WORD *)(v38 + 12) = 2082;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()((_QWORD *)(v0 + 112));
    v44 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 168) = sub_10007ECFC(*(_QWORD *)(v0 + 112), v44, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v35, v37, "did fetch watchlist models: %{public}s, id=%{public}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 2, &type metadata for Any[8]);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    v45 = swift_bridgeObjectRelease_n(v33, 2);
  }
  v74 = v33;
  if ((Watchlist.isDefaultWatchlist.getter(v45) & 1) != 0)
    v46 = static Watchlist.defaultWatchlistName.getter();
  else
    v46 = Watchlist.name.getter();
  v48 = *(_QWORD *)(v0 + 488);
  v50 = *(_QWORD *)(v0 + 464);
  v49 = *(_QWORD *)(v0 + 472);
  v51 = *(_QWORD *)(v0 + 456);
  v72 = v46;
  v73 = *(_QWORD *)(v0 + 424);
  v52 = *(_QWORD *)(v0 + 400);
  v68 = v47;
  v70 = *(_QWORD *)(v0 + 392);
  v53 = *(_QWORD *)(v0 + 320);
  v54 = *(_QWORD *)(v0 + 328);
  v55 = *(_QWORD *)(v0 + 312);
  v56 = *(uint64_t **)(v0 + 272);
  Watchlist.displayState.getter(v46);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  sub_1000072E0(v48, &qword_100111EB8, (uint64_t (*)(uint64_t))&type metadata accessor for Watchlist);
  *v56 = v72;
  v56[1] = v68;
  v56[2] = v74;
  v57 = type metadata accessor for WidgetWatchlist(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))((char *)v56 + *(int *)(v57 + 24), v54, v55);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v73, v70);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
  v58 = *(_QWORD *)(v0 + 480);
  v59 = *(_QWORD *)(v0 + 472);
  v60 = *(_QWORD *)(v0 + 448);
  v62 = *(_QWORD *)(v0 + 416);
  v61 = *(_QWORD *)(v0 + 424);
  v63 = *(_QWORD *)(v0 + 408);
  v65 = *(_QWORD *)(v0 + 376);
  v64 = *(_QWORD *)(v0 + 384);
  v66 = *(_QWORD *)(v0 + 352);
  v75 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v75);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100006818(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100073774(0, v1, 0);
    v3 = type metadata accessor for Stock(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v3 = Stock.symbol.getter(v3);
      v7 = v3;
      v9 = v8;
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        v3 = sub_100073774(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100006914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v98 = a3;
  v91 = a2;
  v5 = type metadata accessor for Quote(0, a4);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  __chkstk_darwin(v5);
  v94 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v83 - v8;
  sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  __chkstk_darwin(v9);
  v93 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v97 = (char *)&v83 - v12;
  v13 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v13 - 8);
  v89 = v13;
  __chkstk_darwin(v13);
  v90 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Stock(0);
  v100 = *(_QWORD *)(v15 - 8);
  v101 = v15;
  v16 = __chkstk_darwin(v15);
  v87 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Chart(0, v16);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v85 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v86 = (char *)&v83 - v22;
  sub_100007248(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  __chkstk_darwin(v23);
  v99 = (uint64_t)&v83 - v24;
  sub_100007248(0, &qword_100111EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart);
  __chkstk_darwin(v25);
  v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v104 = (uint64_t)&v83 - v29;
  sub_100007248(0, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
  __chkstk_darwin(v30);
  v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v84 = (uint64_t)&v83 - v34;
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v83 - v37;
  v39 = StockPriceData.quotes.getter(v36);
  v105 = a1;
  v40 = Stock.symbol.getter(v39);
  v42 = v41;
  v43 = *(_QWORD *)(v39 + 16);
  v95 = v32;
  if (v43 && (v44 = sub_10002D24C(v40, v41), (v45 & 1) != 0))
  {
    v47 = v102;
    v46 = v103;
    (*(void (**)(char *, unint64_t, uint64_t))(v102 + 16))(v38, *(_QWORD *)(v39 + 56) + *(_QWORD *)(v102 + 72) * v44, v103);
    v48 = 0;
  }
  else
  {
    v48 = 1;
    v47 = v102;
    v46 = v103;
  }
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v50 = 1;
  v49(v38, v48, 1, v46);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v39);
  v52 = StockPriceData.sparklines.getter(v51);
  v53 = Stock.symbol.getter(v52);
  v55 = v54;
  v56 = *(_QWORD *)(v52 + 16);
  v96 = v38;
  if (v56)
  {
    v57 = sub_10002D24C(v53, v54);
    if ((v58 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16))(v104, *(_QWORD *)(v52 + 56) + *(_QWORD *)(v19 + 72) * v57, v18);
      v50 = 0;
    }
  }
  v59 = v103;
  v60 = v104;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v104, v50, 1, v18);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v52);
  sub_100007294(v60, (uint64_t)v27, &qword_100111EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v27, 1, v18) == 1)
  {
    v61 = type metadata accessor for PreparedSparkline(0);
    v62 = v99;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v99, 1, 1, v61);
    v64 = (uint64_t)v96;
    v63 = (uint64_t)v97;
  }
  else
  {
    v65 = v86;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v86, v27, v18);
    v66 = *(double *)&v85;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v85, v65, v18);
    v103 = v18;
    v67 = (uint64_t)v96;
    v68 = v84;
    sub_100007294((uint64_t)v96, v84, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
    v69 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v87, v105, v101);
    v70 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v90, v91 + OBJC_IVAR____TtC12StocksWidget25WatchlistViewModelService_logger, v89);
    v62 = v99;
    v71 = v68;
    v64 = v67;
    sub_100067D80(v66, v71, v69, v70, v99, 0.02);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v65, v103);
    v63 = (uint64_t)v97;
  }
  v72 = v102;
  v73 = (uint64_t)v95;
  sub_100007294(v64, (uint64_t)v95, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v73, 1, v59) == 1)
  {
    sub_1000072E0(v73, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
    v74 = type metadata accessor for WidgetQuote(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v63, 1, 1, v74);
  }
  else
  {
    v75 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v92, v73, v59);
    v76 = v94;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v94, v75, v59);
    v77 = v93;
    WidgetQuote.init(from:)(v76);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v59);
    v78 = type metadata accessor for WidgetQuote(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 0, 1, v78);
    v79 = (uint64_t)v77;
    v62 = v99;
    sub_10000731C(v79, v63);
  }
  v80 = v98;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v98, v105, v101);
  v81 = type metadata accessor for WidgetStock(0);
  sub_100007294(v63, v80 + *(int *)(v81 + 20), &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  sub_100007294(v62, v80 + *(int *)(v81 + 24), (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v63, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  sub_1000072E0(v62, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline);
  sub_1000072E0(v104, &qword_100111EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart);
  return sub_1000072E0(v64, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote);
}

uint64_t sub_100007050()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100007164(v0 + 2);
  sub_100007164(v0 + 7);
  sub_100007164(v0 + 12);
  sub_100007164(v0 + 17);
  sub_100007164(v0 + 22);
  v1 = (char *)v0 + OBJC_IVAR____TtC12StocksWidget25WatchlistViewModelService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000070C8()
{
  return type metadata accessor for WatchlistViewModelService(0);
}

uint64_t type metadata accessor for WatchlistViewModelService(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100111E00, (uint64_t)&nominal type descriptor for WatchlistViewModelService);
}

uint64_t sub_1000070E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  v4[3] = "(";
  v4[4] = "(";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100007164(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_100007184(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1000071A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100111EC8;
  if (!qword_100111EC8)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100111EC8);
  }
  return result;
}

uint64_t type metadata accessor for WidgetWatchlist(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100111F48, (uint64_t)&nominal type descriptor for WidgetWatchlist);
}

uint64_t sub_1000071F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10000722C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;

  return sub_100006914(a1, *(_QWORD *)(v3 + 24), a2, a3);
}

void sub_100007248(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100007294(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_100007248(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1000072E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_100007248(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_10000731C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100007248(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100007370(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[2];
    a1[2] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PriceChangeDisplay(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_100007424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PriceChangeDisplay(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100007474(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PriceChangeDisplay(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

_QWORD *sub_1000074FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_100007590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1000075F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_100007670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000767C);
}

uint64_t sub_10000767C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PriceChangeDisplay(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1000076F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100007704);
}

uint64_t sub_100007704(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PriceChangeDisplay(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100007778(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000DB798;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PriceChangeDisplay(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL static StockChartHighlightStyle.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void StockChartHighlightStyle.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int StockChartHighlightStyle.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_100007870(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100007888()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000078CC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000078F4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100007938()
{
  unint64_t result;

  result = qword_100111F88;
  if (!qword_100111F88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemingStyle, &type metadata for ThemingStyle);
    atomic_store(result, (unint64_t *)&qword_100111F88);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for ValueChangeTrend(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ValueChangeTrend(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ThemingStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100007A68 + 4 * byte_1000DB7C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100007A9C + 4 * byte_1000DB7C0[v4]))();
}

uint64_t sub_100007A9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007AA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100007AACLL);
  return result;
}

uint64_t sub_100007AB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100007AC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100007AC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007ACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007AD8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100007AE4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ThemingStyle()
{
  return &type metadata for ThemingStyle;
}

uint64_t sub_100007B00()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
}

id sub_100007B54()
{
  uint64_t v0;

  return *(id *)(v0 + 72);
}

uint64_t sub_100007B5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  v3[25] = *v2;
  v4 = type metadata accessor for Stock(0);
  v3[26] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[27] = v5;
  v3[28] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Headline(0);
  v3[29] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[30] = v7;
  v3[31] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v9);
  v3[33] = swift_task_alloc(v9);
  v3[34] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v3[35] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[36] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v3[37] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[38] = swift_task_alloc(v13);
  v3[39] = swift_task_alloc(v13);
  v14 = type metadata accessor for NewsFeedFilterOptions(0);
  v3[40] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[41] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[42] = swift_task_alloc(v16);
  v3[43] = swift_task_alloc(v16);
  v17 = type metadata accessor for NewsUserProfile(0);
  v3[44] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[45] = v18;
  v3[46] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for NetworkProxy(0);
  v3[47] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[48] = v20;
  v3[49] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100007D08, 0, 0);
}

uint64_t sub_100007D08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD **)(v0 + 192);
  v3 = v1[12];
  v4 = v1[13];
  sub_100007184(v1 + 9, v3);
  if ((dispatch thunk of FeatureAvailabilityType.isNewsFreeExperienceEnabled.getter(v3, v4) & 1) != 0 || v2 < 1)
  {
    v16 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 336);
    v17 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 312);
    v22 = *(_QWORD *)(v0 + 264);
    v21 = *(_QWORD *)(v0 + 272);
    v24 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 256);
    v26 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 192);
    v6 = objc_msgSend((id)objc_opt_self(SCWPreferences), "sharedPreferences");
    objc_msgSend(v6, "resetLocale");

    v7 = *(_QWORD *)(v5 + 120);
    v8 = *(_QWORD *)(v5 + 128);
    ObjectType = swift_getObjectType(v7);
    v10 = Stock.symbol.getter();
    v12 = v11;
    *(_QWORD *)(v0 + 400) = v11;
    v13 = *(int **)(v8 + 16);
    v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
    v14 = (_QWORD *)swift_task_alloc(v13[1]);
    *(_QWORD *)(v0 + 408) = v14;
    *v14 = v0;
    v14[1] = sub_100007EC0;
    return v25(v10, v12, ObjectType, v8);
  }
}

uint64_t sub_100007EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 408);
  *(_QWORD *)(*v2 + 416) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100008C48;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 400));
    *(_QWORD *)(v4 + 424) = a1;
    v6 = sub_100007F3C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100007F3C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t result;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 424);
  *(_QWORD *)(v0 + 432) = v1;
  v2 = (double)*(uint64_t *)(v0 + 184);
  result = Accessor.value.getter();
  v4 = *(double *)(v0 + 160) * v2;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(v1 + 16);
  v6 = (uint64_t)v4 - v5;
  if (!__OFSUB__((uint64_t)v4, v5))
  {
    v8 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 376);
    v10 = *(_QWORD **)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = v10[5];
    v13 = v10[6];
    sub_100007184(v10 + 2, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v7, enum case for NetworkProxy.none(_:), v9);
    *(_QWORD *)(v0 + 440) = dispatch thunk of StockFeedServiceType.fetchHeadlines(for:networkProxy:maxCount:)(v11, v7, v6, 0, v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
    *(_QWORD *)(v0 + 448) = v14;
    *v14 = v0;
    v14[1] = sub_1000080A4;
    return Promise.resolveAsync()(v0 + 120);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000080A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 440);
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 432));
    v5 = sub_100008FD4;
  }
  else
  {
    v5 = sub_100008120;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100008120()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;

  v1 = v0[24];
  v0[58] = v0[15];
  v2 = *(_QWORD *)(v1 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 56));
  v4 = (_QWORD *)swift_task_alloc(async function pointer to NewsUserProfileProviderType.newsUserProfile.getter[1]);
  v0[59] = v4;
  *v4 = v0;
  v4[1] = sub_10000819C;
  return NewsUserProfileProviderType.newsUserProfile.getter(v0[46], ObjectType, v2);
}

uint64_t sub_10000819C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 472);
  *(_QWORD *)(*v1 + 480) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 464);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 432));
    swift_bridgeObjectRelease(v4);
    v5 = sub_100009098;
  }
  else
  {
    v5 = sub_100008214;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_100008214()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  void (*v97)(uint64_t, unint64_t, uint64_t, __n128);
  uint64_t v98;
  void (*v99)(uint64_t, unint64_t, uint64_t);
  void (*v100)(uint64_t, uint64_t, uint64_t);
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v1 = v0[58];
  v2 = v0[54];
  v4 = v0[45];
  v3 = v0[46];
  v6 = v0[43];
  v5 = v0[44];
  v92 = (void *)NewsUserProfile.bundleSubscription.getter();
  v0[61] = v92;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10006D86C(v1);
  v102 = v2;
  sub_10000EDE8(0, &qword_100112088, (uint64_t (*)(uint64_t))&type metadata accessor for NewsFeedFilterOptions.Option, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v8 = v7;
  v9 = type metadata accessor for NewsFeedFilterOptions.Option(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v90 = v8;
  v89 = v12 | 7;
  v14 = swift_allocObject(v8, v13 + 3 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000DB8B0;
  *(_QWORD *)(v14 + v13) = _swiftEmptyArrayStorage;
  v15 = *(void (**)(void))(v10 + 104);
  v88 = enum case for NewsFeedFilterOptions.Option.duplicateArticles(_:);
  ((void (*)(uint64_t))v15)(v14 + v13);
  *(_QWORD *)(v14 + v13 + v11) = _swiftEmptyArrayStorage;
  v15();
  v16 = enum case for HeadlineCondition.pressRelease(_:);
  v17 = type metadata accessor for HeadlineCondition(0);
  v87 = *(_QWORD *)(v17 - 8);
  v96 = v16;
  v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 104);
  v100(v14 + v13 + 2 * v11, v16, v17);
  v18 = enum case for NewsFeedFilterOptions.Option.condition(_:);
  ((void (*)(uint64_t, _QWORD, uint64_t))v15)(v14 + v13 + 2 * v11, enum case for NewsFeedFilterOptions.Option.condition(_:), v9);
  NewsFeedFilterOptions.init(arrayLiteral:)(v14);
  v19 = Array<A>.filtered(_:)(v6, v102);
  v0[17] = v19;
  v20 = *(_QWORD *)(v19 + 16);
  if (v20 && v20 < v0[23])
  {
    v84 = v0[42];
    v85 = v0[41];
    v86 = v0[40];
    v21 = swift_allocObject(v90, v13 + 3 * v11, v89);
    *(_OWORD *)(v21 + 16) = xmmword_1000DB8B0;
    v22 = (_QWORD *)(v21 + v13);
    *v22 = _swiftEmptyArrayStorage;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v15)(v22, v88, v9);
    *(_QWORD *)((char *)v22 + v11) = _swiftEmptyArrayStorage;
    v15();
    v23 = (_QWORD *)((char *)v22 + 2 * v11);
    sub_10000EDE8(0, (unint64_t *)&unk_1001120F0, (uint64_t (*)(uint64_t))&type metadata accessor for HeadlineCondition, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v24 = *(unsigned __int8 *)(v87 + 80);
    v25 = (v24 + 32) & ~v24;
    v27 = v18;
    v28 = swift_allocObject(v26, v25 + *(_QWORD *)(v87 + 72), v24 | 7);
    *(_OWORD *)(v28 + 16) = xmmword_1000DB170;
    v100(v28 + v25, v96, v17);
    *v23 = v28;
    v100((uint64_t)v23, enum case for HeadlineCondition.none(_:), v17);
    ((void (*)(uint64_t *, uint64_t, uint64_t))v15)(v23, v27, v9);
    NewsFeedFilterOptions.init(arrayLiteral:)(v21);
    v29 = Array<A>.filtered(_:)(v84, v102);
    swift_bridgeObjectRelease(v102);
    sub_10006D86C(v29);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    v19 = v0[17];
  }
  else
  {
    swift_bridgeObjectRelease(v102);
  }
  v0[62] = v19;
  v30 = v0[38];
  v31 = v0[39];
  v33 = v0[36];
  v32 = v0[37];
  v34 = v0[35];
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v35(v31, v0[24] + OBJC_IVAR____TtC12StocksWidget24HeadlineViewModelService_logger, v34);
  v35(v30, v31, v34);
  v36 = *(unsigned __int8 *)(v33 + 80);
  v37 = (v36 + 16) & ~v36;
  v38 = swift_allocObject(&unk_100103EE0, v37 + v32, v36 | 7);
  v0[63] = v38;
  v103 = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v38 + v37, v31, v34);
  v39 = *(_QWORD *)(v19 + 16);
  v101 = v39;
  if (v39)
  {
    v40 = v0[30];
    v41 = v19 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v93 = *(_QWORD *)(v40 + 72);
    v97 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v40 + 16);
    v42 = swift_bridgeObjectRetain(v19);
    v43 = 0;
    do
    {
      v44 = v0[34];
      v45 = v0[31];
      v46 = v0[29];
      v97(v45, v41, v46, v42);
      swift_bridgeObjectRetain(v19);
      swift_retain(v103);
      sub_10000BBE8(v45, v44);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v45, v46);
      swift_bridgeObjectRelease(v19);
      swift_release(v103);
      sub_10000E144(0);
      v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v44, 1, v47);
      sub_10000E770(v0[34], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
      if (v48 != 1)
      {
        v39 = v101;
        goto LABEL_12;
      }
      ++v43;
      v41 += v93;
      v39 = v101;
    }
    while (v101 != v43);
LABEL_28:
    v49 = v39;
  }
  else
  {
    v42 = swift_bridgeObjectRetain(v19);
    v43 = 0;
LABEL_12:
    v49 = v39;
    if (v43 != v39)
    {
      v50 = v0[30];
      v51 = v0[23];
      if (v51 <= 1)
        v51 = 1;
      v94 = v51;
      v52 = 1;
      while (1)
      {
        v98 = v52;
        v53 = v43 + 1;
        if (__OFADD__(v43, 1))
          goto LABEL_42;
        v43 = v39;
        if (v53 != v39)
        {
          if ((v53 & 0x8000000000000000) == 0)
          {
            v54 = v19 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
            while (v53 < *(_QWORD *)(v19 + 16))
            {
              v55 = v0[33];
              v56 = v0[31];
              v57 = v0[29];
              (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v50 + 16))(v56, v54 + *(_QWORD *)(v50 + 72) * v53, v57, v42);
              swift_bridgeObjectRetain(v19);
              swift_retain(v103);
              sub_10000BBE8(v56, v55);
              (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v56, v57);
              swift_bridgeObjectRelease(v19);
              swift_release(v103);
              sub_10000E144(0);
              v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v55, 1, v58);
              sub_10000E770(v0[33], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
              if (v59 != 1)
              {
                v43 = v53;
                v39 = v101;
                goto LABEL_25;
              }
              ++v53;
              v39 = v101;
              if (v101 == v53)
              {
                v43 = v101;
                goto LABEL_25;
              }
            }
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
          }
          __break(1u);
          goto LABEL_45;
        }
LABEL_25:
        if (v98 == v0[23])
          break;
        if (v98 == v94)
          goto LABEL_43;
        v52 = v98 + 1;
        if (v43 == v39)
          goto LABEL_28;
      }
      v49 = v43;
      if (v39)
        goto LABEL_30;
      goto LABEL_36;
    }
  }
  if (!v39)
  {
LABEL_36:
    v60 = 0;
    goto LABEL_37;
  }
LABEL_30:
  v91 = v49;
  v60 = 0;
  v61 = v0[30];
  v62 = v19 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
  v95 = *(_QWORD *)(v61 + 72);
  v99 = *(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 16);
  while (1)
  {
    v64 = v0[31];
    v63 = v0[32];
    v65 = v0[29];
    v99(v64, v62, v65);
    swift_bridgeObjectRetain(v19);
    swift_retain(v103);
    sub_10000BBE8(v64, v63);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v64, v65);
    swift_bridgeObjectRelease(v19);
    swift_release(v103);
    sub_10000E144(0);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v63, 1, v66);
    sub_10000E770(v0[32], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
    if (v67 != 1)
      break;
    ++v60;
    v62 += v95;
    if (v101 == v60)
    {
      v60 = v101;
      break;
    }
  }
  v49 = v91;
LABEL_37:
  (*(void (**)(_QWORD, _QWORD))(v0[36] + 8))(v0[38], v0[35]);
  if (v49 < (uint64_t)v60)
  {
LABEL_45:
    __break(1u);
  }
  else
  {
    v68 = *(_QWORD *)(v19 + 16);
    if (v68 >= v60 && (uint64_t)v68 >= v49)
    {
      v69 = (_QWORD *)v0[24];
      v70 = v0[25];
      v71 = *(unsigned __int8 *)(v0[30] + 80);
      v0[2] = v19;
      v0[3] = v19 + ((v71 + 32) & ~v71);
      v0[4] = v60;
      v0[5] = (2 * v49) | 1;
      v0[6] = sub_10000E1B4;
      v0[7] = v103;
      v0[8] = sub_10000E2CC;
      v0[9] = 0;
      v0[10] = sub_10000E330;
      v0[11] = 0;
      v72 = v69[12];
      v73 = v69[13];
      sub_100007184(v69 + 9, v72);
      v74 = dispatch thunk of FeatureAvailabilityType.isYahooNewsAttributionInWidgetEnabled.getter(v72, v73);
      v75 = swift_allocObject(&unk_100103F08, 40, 7);
      *(_QWORD *)(v75 + 16) = v92;
      *(_BYTE *)(v75 + 24) = v74 & 1;
      *(_QWORD *)(v75 + 32) = v70;
      v76 = swift_allocObject(&unk_100103F30, 32, 7);
      v0[64] = v76;
      *(_QWORD *)(v76 + 16) = &unk_100112098;
      *(_QWORD *)(v76 + 24) = v75;
      v77 = async function pointer to Sequence<>.concurrentMap<A>(_:)[1];
      v78 = v92;
      v79 = (_QWORD *)swift_task_alloc(v77);
      v0[65] = v79;
      sub_10000E55C(0);
      v81 = v80;
      v82 = type metadata accessor for HeadlineViewModel(0);
      v83 = sub_100003D3C(&qword_1001120E8, (uint64_t (*)(uint64_t))sub_10000E55C, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
      *v79 = v0;
      v79[1] = sub_100008AD4;
      Sequence<>.concurrentMap<A>(_:)(&unk_1001120A8, v76, v81, v82, v83);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100008AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 504);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 512);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = a1;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_unknownObjectRelease(v5);
  swift_release(v3);
  return swift_task_switch(sub_100008B58, 0, 0);
}

uint64_t sub_100008B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 528);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

uint64_t sub_100008C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t result;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 416);
    v10 = *(_QWORD *)(v0 + 224);
    v36 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 208);
    v11 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v39 = v38;
    *(_DWORD *)v11 = 136315394;
    v12 = Stock.symbol.getter();
    v14 = v13;
    *(_QWORD *)(v0 + 144) = sub_10007ECFC(v12, v13, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v14);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v10, v37);
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue(v9, v0 + 152, v0 + 96);
    v15 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    v17 = v16;
    *(_QWORD *)(v0 + 168) = sub_10007ECFC(v15, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to fetch top stories for symbol=%s, error=%s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v38, 2, &type metadata for Any[8]);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v18 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }
  v22 = swift_errorRelease(*(_QWORD *)(v0 + 416));
  *(_QWORD *)(v0 + 432) = _swiftEmptyArrayStorage;
  v23 = (double)*(uint64_t *)(v0 + 184);
  result = Accessor.value.getter(v22);
  v25 = *(double *)(v0 + 160) * v23;
  if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v25 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v26 = _swiftEmptyArrayStorage[2];
  v27 = (uint64_t)v25 - v26;
  if (!__OFSUB__((uint64_t)v25, v26))
  {
    v29 = *(_QWORD *)(v0 + 384);
    v28 = *(_QWORD *)(v0 + 392);
    v30 = *(_QWORD *)(v0 + 376);
    v31 = *(_QWORD **)(v0 + 192);
    v32 = *(_QWORD *)(v0 + 176);
    v33 = v31[5];
    v34 = v31[6];
    sub_100007184(v31 + 2, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, enum case for NetworkProxy.none(_:), v30);
    *(_QWORD *)(v0 + 440) = dispatch thunk of StockFeedServiceType.fetchHeadlines(for:networkProxy:maxCount:)(v32, v28, v27, 0, v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    v35 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
    *(_QWORD *)(v0 + 448) = v35;
    *v35 = v0;
    v35[1] = sub_1000080A4;
    return Promise.resolveAsync()(v0 + 120);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100008FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100009098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000915C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  v3[28] = *v2;
  sub_10000EDE8(0, &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v5);
  v3[30] = swift_task_alloc(v5);
  v3[31] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v3[32] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[33] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[34] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[35] = swift_task_alloc(v9);
  v3[36] = swift_task_alloc(v9);
  v10 = type metadata accessor for NewsFeedFilterOptions(0);
  v3[37] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[38] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[39] = swift_task_alloc(v12);
  v3[40] = swift_task_alloc(v12);
  v13 = type metadata accessor for Headline(0);
  v3[41] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[42] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[43] = swift_task_alloc(v15);
  v3[44] = swift_task_alloc(v15);
  v3[45] = swift_task_alloc(v15);
  v3[46] = swift_task_alloc(v15);
  v16 = type metadata accessor for NewsFeedSortMethod(0);
  v3[47] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[48] = v17;
  v3[49] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Stock(0);
  v3[50] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[51] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[52] = swift_task_alloc(v20);
  v3[53] = swift_task_alloc(v20);
  v21 = type metadata accessor for NewsUserProfile(0);
  v3[54] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[55] = v22;
  v3[56] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for NetworkProxy(0);
  v3[57] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[58] = v24;
  v3[59] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100009368, 0, 0);
}

void sub_100009368()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD **)(v0 + 216);
  v3 = v1[12];
  v4 = v1[13];
  sub_100007184(v1 + 9, v3);
  if ((dispatch thunk of FeatureAvailabilityType.isNewsFreeExperienceEnabled.getter(v3, v4) & 1) != 0
    || v2 < 1
    || (v5 = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 16), (*(_QWORD *)(v0 + 480) = v5) == 0))
  {
    v10 = *(_QWORD *)(v0 + 448);
    v12 = *(_QWORD *)(v0 + 416);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 360);
    v14 = *(_QWORD *)(v0 + 368);
    v16 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 352);
    v18 = *(_QWORD *)(v0 + 320);
    v32 = *(_QWORD *)(v0 + 312);
    v33 = *(_QWORD *)(v0 + 288);
    v34 = *(_QWORD *)(v0 + 280);
    v35 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 240);
    v37 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    (*(void (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
    return;
  }
  v6 = *(_QWORD *)(v0 + 208);
  v7 = objc_msgSend((id)objc_opt_self(SCWPreferences), "sharedPreferences");
  objc_msgSend(v7, "resetLocale");

  if (v5 <= v6)
  {
    v19 = *(_QWORD *)(v0 + 208);
    v9 = v19 / v5;
    if (v19 % v5)
    {
      if (__OFADD__(v9++, 1))
        goto LABEL_16;
    }
  }
  else
  {
    v9 = 1;
  }
  *(_QWORD *)(v0 + 488) = v9;
  v21 = (double)v9;
  Accessor.value.getter(v8);
  v22 = *(double *)(v0 + 152) * v21;
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) != 0)
  {
    if (v22 > -9.22337204e18)
    {
      if (v22 < 9.22337204e18)
      {
        v24 = *(_QWORD *)(v0 + 464);
        v23 = *(_QWORD *)(v0 + 472);
        v25 = *(_QWORD *)(v0 + 456);
        v26 = *(_QWORD **)(v0 + 216);
        v27 = *(_QWORD *)(v0 + 200);
        v28 = (uint64_t)v22;
        v29 = v26[5];
        v30 = v26[6];
        sub_100007184(v26 + 2, v29);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v23, enum case for NetworkProxy.none(_:), v25);
        *(_QWORD *)(v0 + 496) = dispatch thunk of StockFeedServiceType.fetchHeadlines(for:networkProxy:maxCount:)(v27, v23, v28, 0, v29, v30);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
        v31 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
        *(_QWORD *)(v0 + 504) = v31;
        *v31 = v0;
        v31[1] = sub_100009650;
        Promise.resolveAsync()(v0 + 184);
        return;
      }
      goto LABEL_15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

uint64_t sub_100009650()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10000A888;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 496));
    v4 = sub_1000096BC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000096BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;

  v1 = v0[27];
  v0[65] = v0[23];
  v2 = *(_QWORD *)(v1 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 56));
  v4 = (_QWORD *)swift_task_alloc(async function pointer to NewsUserProfileProviderType.newsUserProfile.getter[1]);
  v0[66] = v4;
  *v4 = v0;
  v4[1] = sub_100009738;
  return NewsUserProfileProviderType.newsUserProfile.getter(v0[56], ObjectType, v2);
}

uint64_t sub_100009738()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 528);
  *(_QWORD *)(*v1 + 536) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 520));
    v4 = sub_10000A99C;
  }
  else
  {
    v4 = sub_1000097A4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000097A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;
  int *v9;
  _QWORD *v10;
  int *v12;

  v2 = v0[55];
  v1 = v0[56];
  v3 = v0[54];
  v4 = v0[27];
  v5 = v0[25];
  v0[68] = NewsUserProfile.bundleSubscription.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v6 = *(_QWORD *)(v4 + 128);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 120));
  v8 = sub_100006818(v5);
  v0[69] = v8;
  v9 = *(int **)(v6 + 24);
  v12 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  v0[70] = v10;
  *v10 = v0;
  v10[1] = sub_100009870;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v12)(v8, ObjectType, v6);
}

uint64_t sub_100009870(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 560);
  *(_QWORD *)(*v2 + 568) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10000AAA8;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 576) = a1;
    v6 = sub_1000098EC;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_1000098EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, unint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  void (*v105)(uint64_t, unint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(_QWORD, uint64_t, _QWORD, __n128);
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  _QWORD *v151;
  void (*v152)(uint64_t, uint64_t, uint64_t);
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  void (*v159)(uint64_t, unint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;

  v0[16] = _swiftEmptyArrayStorage;
  v0[17] = _swiftEmptyArrayStorage;
  v1 = v0[72];
  v2 = v0[65];
  v3 = v0[61];
  v4 = v0[51];
  v132 = v0[48];
  v148 = v0[42];
  v5 = v0[25];
  v6 = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v136 = *(void (**)(_QWORD, uint64_t, _QWORD, __n128))(v4 + 16);
  v137 = *(_QWORD *)(v4 + 72);
  v131 = enum case for NewsFeedSortMethod.publishDate(_:);
  v7 = swift_bridgeObjectRetain(v5);
  v8 = 0;
  v153 = v0;
  v133 = v1;
  v128 = v4;
  v129 = v2;
  v130 = v3;
  v127 = v6;
  while (1)
  {
    v136(v0[53], v6 + v8 * v137, v0[50], v7);
    if (!*(_QWORD *)(v2 + 16))
      goto LABEL_6;
    v11 = sub_10002D2B0(v0[53]);
    if ((v12 & 1) == 0)
      goto LABEL_6;
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v13);
    v15 = Stock.symbol.getter(v14);
    v17 = v16;
    if (*(_QWORD *)(v1 + 16))
    {
      v18 = sub_10002D24C(v15, v16);
      v19 = _swiftEmptyArrayStorage;
      v20 = _swiftEmptyArrayStorage;
      if ((v21 & 1) != 0)
      {
        v20 = *(_QWORD **)(*(_QWORD *)(v133 + 56) + 8 * v18);
        swift_bridgeObjectRetain(v20);
      }
    }
    else
    {
      v19 = _swiftEmptyArrayStorage;
      v20 = _swiftEmptyArrayStorage;
    }
    v22 = v0[49];
    v23 = v0[47];
    v24 = swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v132 + 104))(v22, v131, v23, v24);
    v25 = Array<A>.sorted(by:)(v22, v20);
    v26 = swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t, __n128))(v132 + 8))(v22, v23, v26);
    sub_10006D86C(v13);
    v165 = _swiftEmptyArrayStorage;
    v145 = *(_QWORD *)(v25 + 16);
    v134 = v25;
    if (v145)
      break;
LABEL_33:
    swift_bridgeObjectRelease(v134);
    if (v130 < 0)
    {
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (v130)
    {
      v46 = v19[2];
      if (v46 >= v0[61])
        v46 = v0[61];
    }
    else
    {
      v46 = 0;
    }
    v1 = v133;
    v47 = (unint64_t)v19;
    v6 = v127;
    v48 = v47 + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
    v49 = (2 * v46) | 1;
    swift_bridgeObjectRetain(v47);
    sub_10006DB34(v50, v48, 0, v49);
    v51 = *(_QWORD *)(v47 + 16);
    if (v130)
    {
      if (v51 >= v0[61])
        v9 = v0[61];
      else
        v9 = *(_QWORD *)(v47 + 16);
    }
    else
    {
      v9 = 0;
    }
    sub_10006DB34(v47, v48, v9, (2 * v51) | 1);
    v4 = v128;
    v2 = v129;
LABEL_6:
    ++v8;
    v10 = v0[60];
    (*(void (**)(_QWORD, _QWORD))(v4 + 8))(v0[53], v0[50]);
    if (v8 == v10)
    {
      v52 = v0[25];
      v155 = v0[26];
      v160 = v0[40];
      swift_bridgeObjectRelease(v0[65]);
      swift_bridgeObjectRelease(v1);
      swift_bridgeObjectRelease(v52);
      sub_10006D86C(v0[17]);
      sub_10000EDE8(0, &qword_100112088, (uint64_t (*)(uint64_t))&type metadata accessor for NewsFeedFilterOptions.Option, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v54 = v53;
      v55 = type metadata accessor for NewsFeedFilterOptions.Option(0);
      v56 = *(_QWORD *)(v55 - 8);
      v57 = *(_QWORD *)(v56 + 72);
      v58 = *(unsigned __int8 *)(v56 + 80);
      v59 = (v58 + 32) & ~v58;
      v146 = v54;
      v141 = v58 | 7;
      v60 = swift_allocObject(v54, v59 + 3 * v57, v58 | 7);
      *(_OWORD *)(v60 + 16) = xmmword_1000DB8B0;
      *(_QWORD *)(v60 + v59) = _swiftEmptyArrayStorage;
      v61 = *(void (**)(void))(v56 + 104);
      v138 = enum case for NewsFeedFilterOptions.Option.duplicateArticles(_:);
      ((void (*)(uint64_t))v61)(v60 + v59);
      *(_QWORD *)(v60 + v59 + v57) = _swiftEmptyArrayStorage;
      v61();
      v62 = v60 + v59 + 2 * v57;
      v63 = enum case for HeadlineCondition.pressRelease(_:);
      v64 = type metadata accessor for HeadlineCondition(0);
      v65 = *(_QWORD *)(v64 - 8);
      v150 = v63;
      v152 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 104);
      v152(v62, v63, v64);
      v144 = enum case for NewsFeedFilterOptions.Option.condition(_:);
      ((void (*)(uint64_t))v61)(v62);
      NewsFeedFilterOptions.init(arrayLiteral:)(v60);
      v66 = v0[16];
      swift_bridgeObjectRetain(v66);
      v34 = Array<A>.filtered(_:)(v160, v66);
      v67 = swift_bridgeObjectRelease(v66);
      v0[18] = v34;
      v68 = *(_QWORD *)(v34 + 16);
      if (v68 && v68 < v155)
      {
        v135 = v153[39];
        v156 = v153[38];
        v161 = v153[37];
        v69 = swift_allocObject(v146, v59 + 3 * v57, v141);
        *(_OWORD *)(v69 + 16) = xmmword_1000DB8B0;
        v70 = (_QWORD *)(v69 + v59);
        *v70 = _swiftEmptyArrayStorage;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v61)(v70, v138, v55);
        *(_QWORD *)((char *)v70 + v57) = _swiftEmptyArrayStorage;
        v61();
        v71 = (_QWORD *)((char *)v70 + 2 * v57);
        sub_10000EDE8(0, (unint64_t *)&unk_1001120F0, (uint64_t (*)(uint64_t))&type metadata accessor for HeadlineCondition, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        v72 = *(unsigned __int8 *)(v65 + 80);
        v73 = (v72 + 32) & ~v72;
        v75 = swift_allocObject(v74, v73 + *(_QWORD *)(v65 + 72), v72 | 7);
        *(_OWORD *)(v75 + 16) = xmmword_1000DB170;
        v152(v75 + v73, v150, v64);
        *v71 = v75;
        v152((uint64_t)v71, enum case for HeadlineCondition.none(_:), v64);
        ((void (*)(uint64_t *, _QWORD, uint64_t))v61)(v71, v144, v55);
        NewsFeedFilterOptions.init(arrayLiteral:)(v69);
        swift_bridgeObjectRetain(v66);
        v76 = Array<A>.filtered(_:)(v135, v66);
        swift_bridgeObjectRelease(v66);
        sub_10006D86C(v76);
        (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v135, v161);
        v34 = v153[18];
      }
      v30 = (uint64_t)v153;
      v153[73] = v34;
      v77 = v153[35];
      v78 = v153[36];
      v80 = v153[33];
      v79 = v153[34];
      v81 = v153[32];
      v82 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v80 + 16);
      v82(v78, v153[27] + OBJC_IVAR____TtC12StocksWidget24HeadlineViewModelService_logger, v81, v67);
      ((void (*)(uint64_t, uint64_t, uint64_t))v82)(v77, v78, v81);
      v83 = *(unsigned __int8 *)(v80 + 80);
      v84 = (v83 + 16) & ~v83;
      v36 = (char *)swift_allocObject(&unk_100103FA8, v84 + v79, v83 | 7);
      v153[74] = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(&v36[v84], v78, v81);
      v0 = *(_QWORD **)(v34 + 16);
      if (v0)
      {
        v85 = v34 + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80));
        v162 = *(_QWORD *)(v148 + 72);
        v86 = *(void (**)(uint64_t, unint64_t, uint64_t))(v148 + 16);
        swift_bridgeObjectRetain_n(v34, 2);
        swift_retain(v36);
        v39 = 0;
        while (1)
        {
          v87 = *(_QWORD *)(v30 + 344);
          v88 = *(_QWORD *)(v30 + 328);
          v89 = v153[31];
          v86(v87, v85, v88);
          swift_bridgeObjectRetain(v34);
          swift_retain(v36);
          v30 = (uint64_t)v153;
          sub_10000BBE8(v87, v89);
          (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v87, v88);
          swift_bridgeObjectRelease(v34);
          swift_release(v36);
          sub_10000E144(0);
          LODWORD(v87) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90);
          sub_10000E770(v153[31], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
          if ((_DWORD)v87 != 1)
            break;
          v39 = (_QWORD *)((char *)v39 + 1);
          v85 += v162;
          if (v0 == v39)
          {
            v91 = (uint64_t)v0;
            v31 = v148;
            goto LABEL_70;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v34, 2);
        swift_retain(v36);
        v39 = 0;
      }
      v31 = v148;
      v91 = (uint64_t)v0;
      if (v39 == v0)
      {
LABEL_69:
        if (!v0)
          goto LABEL_77;
        goto LABEL_70;
      }
      if (*(uint64_t *)(v30 + 208) <= 1)
        v92 = 1;
      else
        v92 = *(_QWORD *)(v30 + 208);
      v93 = 1;
      v157 = v92;
      while (1)
      {
        v94 = (unint64_t)v39 + 1;
        if (__OFADD__(v39, 1))
          goto LABEL_84;
        v39 = v0;
        if ((_QWORD *)v94 != v0)
        {
          if ((v94 & 0x8000000000000000) != 0)
            goto LABEL_86;
          v163 = v93;
          v95 = v34 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
          while (v94 < *(_QWORD *)(v34 + 16))
          {
            v96 = *(_QWORD *)(v30 + 344);
            v97 = *(_QWORD *)(v30 + 328);
            v98 = v153[30];
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v148 + 16))(v96, v95 + *(_QWORD *)(v148 + 72) * v94, v97);
            swift_bridgeObjectRetain(v34);
            swift_retain(v36);
            sub_10000BBE8(v96, v98);
            (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v96, v97);
            swift_bridgeObjectRelease(v34);
            swift_release(v36);
            sub_10000E144(0);
            v100 = v99;
            v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 48);
            v102 = v98;
            v30 = (uint64_t)v153;
            LODWORD(v96) = v101(v102, 1, v100);
            sub_10000E770(v153[30], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
            if ((_DWORD)v96 != 1)
            {
              v39 = (_QWORD *)v94;
              v31 = v148;
              goto LABEL_64;
            }
            if (v0 == (_QWORD *)++v94)
            {
              v39 = v0;
              v31 = v148;
LABEL_64:
              v92 = v157;
              v93 = v163;
              goto LABEL_65;
            }
          }
          __break(1u);
          goto LABEL_83;
        }
LABEL_65:
        if (v93 == *(_QWORD *)(v30 + 208))
          goto LABEL_76;
        if (v93 == v92)
          goto LABEL_85;
        ++v93;
        if (v39 == v0)
        {
          v91 = (uint64_t)v0;
          goto LABEL_69;
        }
      }
    }
  }
  v27 = 0;
  v28 = (*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
  v143 = v25 + v28;
  v154 = *(_QWORD *)(v148 + 72);
  v159 = *(void (**)(uint64_t, unint64_t, uint64_t))(v148 + 16);
  v147 = v28;
  v140 = v154 + v28;
  v139 = v8;
  while (1)
  {
    v149 = v27;
    v151 = v19;
    v159(v0[46], v143 + v27 * v154, v0[41]);
    v30 = v0[16];
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
      break;
LABEL_27:
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v148 + 32);
    v41((char *)v0[44], v0[46], v0[41]);
    v19 = v151;
    if ((swift_isUniquelyReferenced_nonNull_native(v151) & 1) == 0)
    {
      sub_1000737AC(0, v151[2] + 1, 1);
      v19 = v165;
    }
    v43 = v19[2];
    v42 = v19[3];
    if (v43 >= v42 >> 1)
    {
      sub_1000737AC(v42 > 1, v43 + 1, 1);
      v19 = v165;
    }
    v44 = v0[44];
    v45 = v0[41];
    v19[2] = v43 + 1;
    v41((char *)v19 + v147 + v43 * v154, v44, v45);
    v165 = v19;
LABEL_17:
    v27 = v149 + 1;
    if (v149 + 1 == v145)
      goto LABEL_33;
  }
  v32 = v0[45];
  v33 = v0[46];
  v34 = v0[41];
  v159(v32, v30 + v147, v34);
  v35 = sub_100003D3C(&qword_100112178, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t)&protocol conformance descriptor for Headline);
  swift_bridgeObjectRetain(v30);
  LOBYTE(v33) = dispatch thunk of static Equatable.== infix(_:_:)(v32, v33, v34, v35);
  v36 = *(char **)(v148 + 8);
  ((void (*)(uint64_t, uint64_t))v36)(v32, v34);
  if ((v33 & 1) != 0)
  {
    v29 = swift_bridgeObjectRelease(v30);
LABEL_16:
    v19 = v151;
    ((void (*)(_QWORD, _QWORD, __n128))v36)(v0[46], v0[41], v29);
    goto LABEL_17;
  }
  v142 = v30;
  if (v31 == 1)
  {
    swift_bridgeObjectRelease(v30);
    goto LABEL_27;
  }
  v37 = v30 + v140;
  v38 = 1;
  while (1)
  {
    v159(v0[45], v37, v0[41]);
    v39 = (_QWORD *)(v38 + 1);
    if (__OFADD__(v38, 1))
      break;
    v40 = v0[45];
    v34 = v0[41];
    v30 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v0[46], v34, v35);
    ((void (*)(uint64_t, uint64_t))v36)(v40, v34);
    if ((v30 & 1) != 0)
    {
      v29 = swift_bridgeObjectRelease(v142);
      v0 = v153;
      v8 = v139;
      goto LABEL_16;
    }
    ++v38;
    v0 = v153;
    v37 += v154;
    if (v39 == (_QWORD *)v31)
    {
      swift_bridgeObjectRelease(v142);
      v8 = v139;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_76:
  v91 = (uint64_t)v39;
  if (!v0)
  {
LABEL_77:
    v103 = 0;
    goto LABEL_78;
  }
LABEL_70:
  v103 = 0;
  v104 = v34 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  v158 = (_QWORD *)v91;
  v164 = *(_QWORD *)(v31 + 72);
  v105 = *(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16);
  while (1)
  {
    v106 = *(_QWORD *)(v30 + 344);
    v107 = *(_QWORD *)(v30 + 328);
    v108 = v153[29];
    v105(v106, v104, v107);
    swift_bridgeObjectRetain(v34);
    swift_retain(v36);
    v30 = (uint64_t)v153;
    sub_10000BBE8(v106, v108);
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v106, v107);
    swift_bridgeObjectRelease(v34);
    swift_release(v36);
    sub_10000E144(0);
    LODWORD(v106) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 48))(v108, 1, v109);
    sub_10000E770(v153[29], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
    if ((_DWORD)v106 != 1)
      break;
    v103 = (_QWORD *)((char *)v103 + 1);
    v104 += v164;
    if (v0 == v103)
    {
      v103 = v0;
      break;
    }
  }
  v31 = v148;
  v91 = (uint64_t)v158;
LABEL_78:
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v30 + 264) + 8))(*(_QWORD *)(v30 + 280), *(_QWORD *)(v30 + 256));
  if (v91 < (uint64_t)v103)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v110 = *(_QWORD *)(v34 + 16);
  if (v110 >= (unint64_t)v103 && v110 >= v91)
  {
    v111 = *(void **)(v30 + 544);
    v112 = *(_QWORD **)(v30 + 216);
    v113 = *(_QWORD *)(v30 + 224);
    v114 = v34 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    *(_QWORD *)(v30 + 16) = v34;
    *(_QWORD *)(v30 + 24) = v114;
    *(_QWORD *)(v30 + 32) = v103;
    *(_QWORD *)(v30 + 40) = (2 * v91) | 1;
    *(_QWORD *)(v30 + 48) = sub_10000E1B4;
    *(_QWORD *)(v30 + 56) = v36;
    *(_QWORD *)(v30 + 64) = sub_10000E2CC;
    *(_QWORD *)(v30 + 72) = 0;
    *(_QWORD *)(v30 + 80) = sub_10000E330;
    *(_QWORD *)(v30 + 88) = 0;
    v115 = v112[12];
    v116 = v112[13];
    sub_100007184(v112 + 9, v115);
    v117 = dispatch thunk of FeatureAvailabilityType.isYahooNewsAttributionInWidgetEnabled.getter(v115, v116);
    v118 = swift_allocObject(&unk_100103FD0, 40, 7);
    *(_QWORD *)(v118 + 16) = v111;
    *(_BYTE *)(v118 + 24) = v117 & 1;
    *(_QWORD *)(v118 + 32) = v113;
    v119 = swift_allocObject(&unk_100103FF8, 32, 7);
    *(_QWORD *)(v30 + 600) = v119;
    *(_QWORD *)(v119 + 16) = &unk_100112168;
    *(_QWORD *)(v119 + 24) = v118;
    v120 = async function pointer to Sequence<>.concurrentMap<A>(_:)[1];
    v121 = v111;
    v122 = (uint64_t *)swift_task_alloc(v120);
    *(_QWORD *)(v30 + 608) = v122;
    sub_10000E55C(0);
    v124 = v123;
    v125 = type metadata accessor for HeadlineViewModel(0);
    v126 = sub_100003D3C(&qword_1001120E8, (uint64_t (*)(uint64_t))sub_10000E55C, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
    *v122 = v30;
    v122[1] = (uint64_t)sub_10000A6A8;
    Sequence<>.concurrentMap<A>(_:)(&unk_100112170, v119, v124, v125, v126);
    return;
  }
LABEL_88:
  __break(1u);
}

uint64_t sub_10000A6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  *(_QWORD *)(*(_QWORD *)v1 + 616) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  swift_unknownObjectRelease(v5);
  swift_release(v4);
  return swift_task_switch(sub_10000A730, 0, 0);
}

uint64_t sub_10000A730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);

  swift_bridgeObjectRelease(v2);
  swift_release(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  v22 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 416);
  v7 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
}

uint64_t sub_10000A888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_release(*(_QWORD *)(v0 + 496));
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000A99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000AAA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  __n128 v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void (*v80)(char *, uint64_t, uint64_t);
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(void);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, unint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, unint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  void *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  void (*v178)(_QWORD, uint64_t, _QWORD, __n128);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unsigned int v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  char *v196;
  unsigned int v197;
  os_log_type_t v198;
  uint64_t v199;
  unsigned int v200;
  _QWORD *v201;
  _QWORD *v202;
  void (*v203)(uint64_t, uint64_t, uint64_t);
  uint64_t v204;
  NSObject *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t (*v208)(uint64_t, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;

  v1 = v0[25];
  v2 = v0[71];
  swift_bridgeObjectRelease(v0[69]);
  swift_bridgeObjectRetain(v1);
  swift_errorRetain(v2);
  swift_bridgeObjectRetain(v1);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v207 = v0;
  if (os_log_type_enabled(v4, v5))
  {
    v198 = v5;
    v205 = v4;
    v187 = v0 + 12;
    v182 = v0 + 21;
    v185 = v0 + 22;
    v6 = v0[60];
    v7 = v0[51];
    v201 = v0 + 25;
    v190 = v0 + 24;
    v8 = v0[25];
    v9 = (_DWORD *)swift_slowAlloc(22, -1);
    v192 = swift_slowAlloc(64, -1);
    v218 = v192;
    v219 = _swiftEmptyArrayStorage;
    v195 = v9;
    *v9 = 136315394;
    sub_100073774(0, v6, 0);
    v10 = 0;
    v11 = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v12 = v7;
    v208 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v214 = *(_QWORD *)(v7 + 72);
    v13 = v0;
    do
    {
      v14 = v13[52];
      v15 = v13[50];
      v16 = v208(v14, v11, v15);
      v17 = Stock.symbol.getter(v16);
      v19 = v18;
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v15);
      v20 = v219;
      if ((swift_isUniquelyReferenced_nonNull_native(v219) & 1) == 0)
      {
        sub_100073774(0, v219[2] + 1, 1);
        v20 = v219;
      }
      v22 = v20[2];
      v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_100073774(v21 > 1, v22 + 1, 1);
        v20 = v219;
      }
      v13 = v207;
      v23 = v207[60];
      ++v10;
      v20[2] = v22 + 1;
      v24 = &v20[2 * v22];
      v24[4] = v17;
      v24[5] = v19;
      v11 += v214;
    }
    while (v10 != v23);
    v26 = v207[71];
    v27 = v207[25];
    v207[20] = v20;
    sub_10000F054();
    v29 = v28;
    v30 = sub_100003D3C((unint64_t *)&qword_100112188, (uint64_t (*)(uint64_t))sub_10000F054, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v29, v30);
    v33 = v32;
    swift_release(v20);
    v207[21] = sub_10007ECFC(v31, v33, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v182, v185, v195 + 1, v195 + 3);
    swift_bridgeObjectRelease_n(v27, 2);
    swift_bridgeObjectRelease(v33);
    *((_WORD *)v195 + 6) = 2080;
    swift_getErrorValue(v26, v185, v187);
    v34 = Error.localizedDescription.getter(v207[13], v207[14]);
    v36 = v35;
    v207[24] = sub_10007ECFC(v34, v35, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, v201, (char *)v195 + 14, (char *)v195 + 22);
    swift_bridgeObjectRelease(v36);
    swift_errorRelease(v26);
    swift_errorRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v205, v198, "Failed to fetch top stories for symbols=[%s], error=%s", (uint8_t *)v195, 0x16u);
    swift_arrayDestroy(v192, 2, &type metadata for Any[8]);
    swift_slowDealloc(v192, -1, -1);
    swift_slowDealloc(v195, -1, -1);

    v0 = v207;
  }
  else
  {
    v25 = v0[71];
    swift_bridgeObjectRelease_n(v0[25], 2);

    swift_errorRelease(v25);
    swift_errorRelease(v25);
  }
  v37 = v0[71];
  v175 = sub_10002C71C((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v37);
  v38 = v0[65];
  v177 = v0[61];
  v39 = v0[51];
  v174 = v0[48];
  v206 = v0[42];
  v40 = v0[25];
  v0[16] = _swiftEmptyArrayStorage;
  v0[17] = _swiftEmptyArrayStorage;
  v181 = v40 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
  v178 = *(void (**)(_QWORD, uint64_t, _QWORD, __n128))(v39 + 16);
  v179 = *(_QWORD *)(v39 + 72);
  v173 = enum case for NewsFeedSortMethod.publishDate(_:);
  v41 = swift_bridgeObjectRetain(v40);
  v42 = 0;
  v171 = v39;
  v172 = v38;
  while (1)
  {
    v178(v0[53], v181 + v42 * v179, v0[50], v41);
    if (!*(_QWORD *)(v38 + 16))
      goto LABEL_15;
    v188 = v42;
    v47 = sub_10002D2B0(v0[53]);
    if ((v48 & 1) == 0)
      goto LABEL_15;
    v49 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v47);
    swift_bridgeObjectRetain(v49);
    v51 = Stock.symbol.getter(v50);
    v53 = v52;
    if (*(_QWORD *)(v175 + 16))
    {
      v54 = sub_10002D24C(v51, v52);
      v55 = _swiftEmptyArrayStorage;
      if ((v56 & 1) != 0)
      {
        v55 = *(_QWORD **)(*(_QWORD *)(v175 + 56) + 8 * v54);
        swift_bridgeObjectRetain(v55);
      }
    }
    else
    {
      v55 = _swiftEmptyArrayStorage;
    }
    v57 = v0[49];
    v58 = v0[47];
    v59 = swift_bridgeObjectRelease(v53);
    (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v174 + 104))(v57, v173, v58, v59);
    v60 = Array<A>.sorted(by:)(v57, v55);
    v61 = swift_bridgeObjectRelease(v55);
    (*(void (**)(uint64_t, uint64_t, __n128))(v174 + 8))(v57, v58, v61);
    v219 = (_QWORD *)v60;
    sub_10006D86C(v49);
    v62 = v219;
    v219 = _swiftEmptyArrayStorage;
    v63 = v62[2];
    v64 = _swiftEmptyArrayStorage;
    v176 = v62;
    if (v63)
      break;
LABEL_44:
    swift_bridgeObjectRelease(v176);
    v85 = v177;
    if ((v177 & 0x8000000000000000) != 0)
    {
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    if (v177)
    {
      v85 = v64[2];
      if (v85 >= v0[61])
        v85 = v0[61];
    }
    v86 = (uint64_t)v64 + ((*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80));
    v87 = (2 * v85) | 1;
    swift_bridgeObjectRetain(v64);
    sub_10006DB34(v88, v86, 0, v87);
    v89 = v64[2];
    if (v177)
    {
      if (v89 >= v0[61])
        v43 = v0[61];
      else
        v43 = v64[2];
    }
    else
    {
      v43 = 0;
    }
    sub_10006DB34((unint64_t)v64, v86, v43, (2 * v89) | 1);
    v39 = v171;
    v38 = v172;
    v42 = v188;
LABEL_15:
    v44 = v42 + 1;
    v45 = v0[60];
    (*(void (**)(_QWORD, _QWORD))(v39 + 8))(v0[53], v0[50]);
    v46 = v44 == v45;
    v42 = v44;
    if (v46)
    {
      v90 = v0[65];
      v210 = v207[26];
      v216 = v207[40];
      swift_bridgeObjectRelease(v207[25]);
      swift_bridgeObjectRelease(v175);
      swift_bridgeObjectRelease(v90);
      sub_10006D86C(v207[17]);
      sub_10000EDE8(0, &qword_100112088, (uint64_t (*)(uint64_t))&type metadata accessor for NewsFeedFilterOptions.Option, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v92 = v91;
      v93 = type metadata accessor for NewsFeedFilterOptions.Option(0);
      v94 = *(_QWORD *)(v93 - 8);
      v95 = *(_QWORD *)(v94 + 72);
      v96 = *(unsigned __int8 *)(v94 + 80);
      v97 = (v96 + 32) & ~v96;
      v194 = v92;
      v189 = v96 | 7;
      v98 = swift_allocObject(v92, v97 + 3 * v95, v96 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_1000DB8B0;
      *(_QWORD *)(v98 + v97) = _swiftEmptyArrayStorage;
      v99 = *(void (**)(void))(v94 + 104);
      v184 = enum case for NewsFeedFilterOptions.Option.duplicateArticles(_:);
      ((void (*)(uint64_t))v99)(v98 + v97);
      *(_QWORD *)(v98 + v97 + v95) = _swiftEmptyArrayStorage;
      v99();
      v100 = v98 + v97 + 2 * v95;
      v101 = enum case for HeadlineCondition.pressRelease(_:);
      v102 = type metadata accessor for HeadlineCondition(0);
      v103 = *(_QWORD *)(v102 - 8);
      v200 = v101;
      v203 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 104);
      v203(v100, v101, v102);
      v197 = enum case for NewsFeedFilterOptions.Option.condition(_:);
      ((void (*)(uint64_t))v99)(v100);
      NewsFeedFilterOptions.init(arrayLiteral:)(v98);
      v104 = v207[16];
      swift_bridgeObjectRetain(v104);
      v105 = v207;
      v72 = Array<A>.filtered(_:)(v216, v104);
      v106 = swift_bridgeObjectRelease(v104);
      v207[18] = v72;
      v107 = *(_QWORD *)(v72 + 16);
      if (v107 && v107 < v210)
      {
        v180 = v207[39];
        v211 = v207[38];
        v217 = v207[37];
        v108 = swift_allocObject(v194, v97 + 3 * v95, v189);
        *(_OWORD *)(v108 + 16) = xmmword_1000DB8B0;
        v109 = (_QWORD *)(v108 + v97);
        *v109 = _swiftEmptyArrayStorage;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v99)(v109, v184, v93);
        *(_QWORD *)((char *)v109 + v95) = _swiftEmptyArrayStorage;
        v99();
        v110 = (_QWORD *)((char *)v109 + 2 * v95);
        sub_10000EDE8(0, (unint64_t *)&unk_1001120F0, (uint64_t (*)(uint64_t))&type metadata accessor for HeadlineCondition, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        v111 = *(unsigned __int8 *)(v103 + 80);
        v112 = (v111 + 32) & ~v111;
        v114 = swift_allocObject(v113, v112 + *(_QWORD *)(v103 + 72), v111 | 7);
        *(_OWORD *)(v114 + 16) = xmmword_1000DB170;
        v203(v114 + v112, v200, v102);
        *v110 = v114;
        v203((uint64_t)v110, enum case for HeadlineCondition.none(_:), v102);
        ((void (*)(uint64_t *, _QWORD, uint64_t))v99)(v110, v197, v93);
        NewsFeedFilterOptions.init(arrayLiteral:)(v108);
        swift_bridgeObjectRetain(v104);
        v115 = Array<A>.filtered(_:)(v180, v104);
        swift_bridgeObjectRelease(v104);
        sub_10006D86C(v115);
        v105 = v207;
        (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v180, v217);
        v72 = v207[18];
      }
      v105[73] = v72;
      v117 = v105[35];
      v116 = v105[36];
      v118 = v105[33];
      v119 = v105[34];
      v120 = v105[32];
      v121 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v118 + 16);
      v121(v116, v105[27] + OBJC_IVAR____TtC12StocksWidget24HeadlineViewModelService_logger, v120, v106);
      ((void (*)(uint64_t, uint64_t, uint64_t))v121)(v117, v116, v120);
      v122 = *(unsigned __int8 *)(v118 + 80);
      v123 = (v122 + 16) & ~v122;
      v74 = (char *)swift_allocObject(&unk_100103FA8, v123 + v119, v122 | 7);
      v105[74] = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(&v74[v123], v116, v120);
      v75 = *(_QWORD **)(v72 + 16);
      v215 = v75;
      if (v75)
      {
        v124 = v72 + ((*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80));
        v125 = *(_QWORD *)(v206 + 72);
        v126 = *(void (**)(uint64_t, unint64_t, uint64_t))(v206 + 16);
        swift_bridgeObjectRetain_n(v72, 2);
        swift_retain(v74);
        v0 = 0;
        do
        {
          v127 = v105[43];
          v128 = v105[41];
          v129 = v207[31];
          v126(v127, v124, v128);
          swift_bridgeObjectRetain(v72);
          swift_retain(v74);
          sub_10000BBE8(v127, v129);
          (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v127, v128);
          swift_release(v74);
          swift_bridgeObjectRelease(v72);
          sub_10000E144(0);
          v131 = v130;
          v132 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 48);
          v133 = v129;
          v105 = v207;
          LODWORD(v127) = v132(v133, 1, v131);
          sub_10000E770(v207[31], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
          if ((_DWORD)v127 != 1)
          {
            v75 = v215;
            goto LABEL_61;
          }
          v0 = (_QWORD *)((char *)v0 + 1);
          v124 += v125;
        }
        while (v215 != v0);
        v134 = (uint64_t)v215;
        if (v215)
          goto LABEL_79;
        goto LABEL_58;
      }
      swift_bridgeObjectRetain_n(v72, 2);
      swift_retain(v74);
      v0 = 0;
LABEL_61:
      v134 = (uint64_t)v75;
      if (v0 == v75)
      {
LABEL_78:
        if (!v75)
          goto LABEL_58;
        goto LABEL_79;
      }
      v136 = v105[26];
      if (v136 <= 1)
        v136 = 1;
      v204 = v136;
      v137 = 1;
      while (1)
      {
        v212 = v137;
        v138 = (unint64_t)v0 + 1;
        if (__OFADD__(v0, 1))
          goto LABEL_93;
        v0 = v75;
        if ((_QWORD *)v138 != v75)
        {
          if ((v138 & 0x8000000000000000) != 0)
            goto LABEL_95;
          v139 = v72 + ((*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80));
          while (v138 < *(_QWORD *)(v72 + 16))
          {
            v140 = v207[43];
            v141 = v207[41];
            v142 = v207[30];
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v206 + 16))(v140, v139 + *(_QWORD *)(v206 + 72) * v138, v141);
            swift_bridgeObjectRetain(v72);
            swift_retain(v74);
            sub_10000BBE8(v140, v142);
            (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v140, v141);
            swift_release(v74);
            swift_bridgeObjectRelease(v72);
            sub_10000E144(0);
            LODWORD(v140) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 48))(v142, 1, v143);
            sub_10000E770(v207[30], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
            if ((_DWORD)v140 != 1)
            {
              v0 = (_QWORD *)v138;
              v75 = v215;
              goto LABEL_74;
            }
            ++v138;
            v75 = v215;
            if (v215 == (_QWORD *)v138)
            {
              v0 = v215;
              goto LABEL_74;
            }
          }
          __break(1u);
          goto LABEL_92;
        }
LABEL_74:
        if (v212 == v207[26])
          goto LABEL_89;
        if (v212 == v204)
          goto LABEL_94;
        v137 = v212 + 1;
        if (v0 == v75)
        {
          v134 = (uint64_t)v75;
          v105 = v207;
          goto LABEL_78;
        }
      }
    }
  }
  v65 = 0;
  v66 = (*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80);
  v196 = (char *)v62 + v66;
  v209 = *(_QWORD *)(v206 + 72);
  v215 = *(_QWORD **)(v206 + 16);
  v183 = v62[2];
  v186 = v209 + v66;
  v193 = v66;
  ((void (*)(_QWORD, char *, _QWORD))v215)(v0[46], (char *)v62 + v66, v0[41]);
  while (1)
  {
    v68 = v0[16];
    v69 = *(_QWORD *)(v68 + 16);
    if (!v69)
      goto LABEL_38;
    v199 = v65;
    v202 = v64;
    v70 = v0[45];
    v71 = v0[46];
    v72 = v0[41];
    ((void (*)(uint64_t, unint64_t, uint64_t))v215)(v70, v68 + v66, v72);
    v73 = sub_100003D3C(&qword_100112178, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t)&protocol conformance descriptor for Headline);
    swift_bridgeObjectRetain(v68);
    LOBYTE(v71) = dispatch thunk of static Equatable.== infix(_:_:)(v70, v71, v72, v73);
    v74 = *(char **)(v206 + 8);
    ((void (*)(uint64_t, uint64_t))v74)(v70, v72);
    if ((v71 & 1) == 0)
      break;
    v67 = swift_bridgeObjectRelease(v68);
    v64 = v202;
LABEL_25:
    v66 = v193;
    ((void (*)(_QWORD, _QWORD, __n128))v74)(v0[46], v0[41], v67);
    v65 = v199;
LABEL_26:
    if (++v65 == v63)
      goto LABEL_44;
    ((void (*)(_QWORD, char *, _QWORD))v215)(v0[46], &v196[v65 * v209], v0[41]);
  }
  if (v69 == 1)
  {
    swift_bridgeObjectRelease(v68);
    v64 = v202;
LABEL_37:
    v65 = v199;
    v66 = v193;
LABEL_38:
    v80 = *(void (**)(char *, uint64_t, uint64_t))(v206 + 32);
    v80((char *)v0[44], v0[46], v0[41]);
    if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
    {
      sub_1000737AC(0, v64[2] + 1, 1);
      v64 = v219;
    }
    v82 = v64[2];
    v81 = v64[3];
    if (v82 >= v81 >> 1)
    {
      sub_1000737AC(v81 > 1, v82 + 1, 1);
      v64 = v219;
    }
    v83 = v0[44];
    v84 = v0[41];
    v64[2] = v82 + 1;
    v80((char *)v64 + v66 + v82 * v209, v83, v84);
    v219 = v64;
    goto LABEL_26;
  }
  v191 = v68;
  v75 = (_QWORD *)(v68 + v186);
  v76 = 1;
  while (1)
  {
    ((void (*)(_QWORD, _QWORD *, _QWORD))v215)(v0[45], v75, v0[41]);
    v77 = v76 + 1;
    if (__OFADD__(v76, 1))
      break;
    v78 = v0[45];
    v72 = v0[41];
    v79 = dispatch thunk of static Equatable.== infix(_:_:)(v78, v0[46], v72, v73);
    ((void (*)(uint64_t, uint64_t))v74)(v78, v72);
    if ((v79 & 1) != 0)
    {
      v67 = swift_bridgeObjectRelease(v191);
      v0 = v207;
      v64 = v202;
      v63 = v183;
      goto LABEL_25;
    }
    ++v76;
    v0 = v207;
    v75 = (_QWORD *)((char *)v75 + v209);
    if (v77 == v69)
    {
      swift_bridgeObjectRelease(v191);
      v64 = v202;
      v63 = v183;
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_89:
  v134 = (uint64_t)v0;
  v105 = v207;
  if (!v75)
  {
LABEL_58:
    v135 = 0;
    goto LABEL_84;
  }
LABEL_79:
  v213 = (_QWORD *)v134;
  v135 = 0;
  v144 = v72 + ((*(unsigned __int8 *)(v206 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80));
  v145 = *(_QWORD *)(v206 + 72);
  v146 = *(void (**)(uint64_t, unint64_t, uint64_t))(v206 + 16);
  while (1)
  {
    v147 = v105[43];
    v148 = v105[41];
    v149 = v207[29];
    v146(v147, v144, v148);
    swift_bridgeObjectRetain(v72);
    swift_retain(v74);
    sub_10000BBE8(v147, v149);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v147, v148);
    swift_release(v74);
    swift_bridgeObjectRelease(v72);
    sub_10000E144(0);
    v151 = v150;
    v152 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 48);
    v153 = v149;
    v105 = v207;
    LODWORD(v147) = v152(v153, 1, v151);
    sub_10000E770(v207[29], &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144);
    if ((_DWORD)v147 != 1)
      break;
    v135 = (_QWORD *)((char *)v135 + 1);
    v144 += v145;
    if (v215 == v135)
    {
      v135 = v215;
      break;
    }
  }
  v134 = (uint64_t)v213;
LABEL_84:
  (*(void (**)(_QWORD, _QWORD))(v105[33] + 8))(v105[35], v105[32]);
  if (v134 < (uint64_t)v135)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  v154 = *(_QWORD *)(v72 + 16);
  if (v154 >= (unint64_t)v135 && v154 >= v134)
  {
    v155 = (void *)v105[68];
    v156 = (_QWORD *)v105[27];
    v157 = v105[28];
    v158 = *(unsigned __int8 *)(v206 + 80);
    v105[2] = v72;
    v105[3] = v72 + ((v158 + 32) & ~v158);
    v105[4] = v135;
    v105[5] = (2 * v134) | 1;
    v105[6] = sub_10000E1B4;
    v105[7] = v74;
    v105[8] = sub_10000E2CC;
    v105[9] = 0;
    v105[10] = sub_10000E330;
    v105[11] = 0;
    v159 = v156[12];
    v160 = v156[13];
    sub_100007184(v156 + 9, v159);
    v161 = dispatch thunk of FeatureAvailabilityType.isYahooNewsAttributionInWidgetEnabled.getter(v159, v160);
    v162 = swift_allocObject(&unk_100103FD0, 40, 7);
    *(_QWORD *)(v162 + 16) = v155;
    *(_BYTE *)(v162 + 24) = v161 & 1;
    *(_QWORD *)(v162 + 32) = v157;
    v163 = swift_allocObject(&unk_100103FF8, 32, 7);
    v105[75] = v163;
    *(_QWORD *)(v163 + 16) = &unk_100112168;
    *(_QWORD *)(v163 + 24) = v162;
    v164 = async function pointer to Sequence<>.concurrentMap<A>(_:)[1];
    v165 = v155;
    v166 = (_QWORD *)swift_task_alloc(v164);
    v105[76] = v166;
    sub_10000E55C(0);
    v168 = v167;
    v169 = type metadata accessor for HeadlineViewModel(0);
    v170 = sub_100003D3C(&qword_1001120E8, (uint64_t (*)(uint64_t))sub_10000E55C, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
    *v166 = v105;
    v166[1] = sub_10000A6A8;
    Sequence<>.concurrentMap<A>(_:)(&unk_100112170, v163, v168, v169, v170);
    return;
  }
LABEL_97:
  __break(1u);
}

uint64_t sub_10000BBE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for Headline(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v46 - v10;
  v12 = Headline.title.getter(v9);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    v16 = (void *)Headline.fcHeadline.getter();
    v17 = objc_msgSend(v16, "sourceName");
    swift_unknownObjectRelease(v16);
    if (v17)
    {
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      sub_10000ED80(0);
      v22 = v21;
      v23 = (uint64_t *)(a2 + *(int *)(v21 + 48));
      v24 = v4;
      v25 = (uint64_t *)(a2 + *(int *)(v21 + 64));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v24);
      *v23 = v14;
      v23[1] = v15;
      *v25 = v18;
      v25[1] = v20;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 0, 1, v22);
    }
    swift_bridgeObjectRelease(v15);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    v28 = Logger.logObject.getter(v37);
    v38 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v28, v38))
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      goto LABEL_15;
    }
    v46 = a2;
    v39 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v49 = v40;
    *(_DWORD *)v39 = 136315394;
    v41 = Headline.articleID.getter();
    v43 = v42;
    v47 = sub_10007ECFC(v41, v42, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease(v43);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    *(_WORD *)(v39 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(&v47);
    v44 = v48;
    v47 = sub_10007ECFC(v47, v48, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v28, v38, "Dropping headline without source: %s. id=%s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2, &type metadata for Any[8]);
    swift_slowDealloc(v40, -1, -1);
    v36 = v39;
  }
  else
  {
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, a1, v4);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v28, v29))
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      goto LABEL_15;
    }
    v46 = a2;
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v49 = v31;
    *(_DWORD *)v30 = 136315394;
    v32 = Headline.articleID.getter();
    v34 = v33;
    v47 = sub_10007ECFC(v32, v33, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    *(_WORD *)(v30 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(&v47);
    v35 = v48;
    v47 = sub_10007ECFC(v47, v48, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Dropping headline without title: %s. id=%s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2, &type metadata for Any[8]);
    swift_slowDealloc(v31, -1, -1);
    v36 = v30;
  }
  swift_slowDealloc(v36, -1, -1);

  a2 = v46;
LABEL_15:
  sub_10000ED80(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(a2, 1, 1, v45);
}

uint64_t sub_10000C0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_BYTE *)(v8 + 1716) = a8;
  *(_QWORD *)(v8 + 1536) = a7;
  *(_QWORD *)(v8 + 1528) = a6;
  *(_QWORD *)(v8 + 1520) = a5;
  *(_QWORD *)(v8 + 1512) = a4;
  *(_QWORD *)(v8 + 1504) = a3;
  *(_QWORD *)(v8 + 1496) = a2;
  *(_QWORD *)(v8 + 1448) = a1;
  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 1544) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 1552) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 1560) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 1568) = swift_task_alloc(v10);
  v11 = type metadata accessor for Headline(0);
  *(_QWORD *)(v8 + 1576) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 1584) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 1592) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 1600) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 1608) = swift_task_alloc(v13);
  return swift_task_switch(sub_10000C1AC, 0, 0);
}

uint64_t sub_10000C1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t ObjectType;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 1608);
  v2 = *(_QWORD *)(v0 + 1584);
  v3 = *(_QWORD *)(v0 + 1576);
  v4 = *(_QWORD *)(v0 + 1496);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 1616) = v5;
  v5(v1, v4, v3);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v6 == enum case for Headline.headline(_:))
  {
    v7 = *(uint64_t **)(v0 + 1608);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 1584) + 96))(v7, *(_QWORD *)(v0 + 1576));
    v8 = *v7;
    *(_QWORD *)(v0 + 1624) = *v7;
    v9 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 1632) = v9;
    *(_QWORD *)(v9 + 16) = v8;
    sub_10000EDE8(255, &qword_100112118, (uint64_t (*)(uint64_t))sub_10000E874, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v11 = v10;
    swift_asyncLet_begin(v0 + 656, 0, v10, &unk_100112110, v9, v0 + 1400);
    v12 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 1640) = v12;
    *(_QWORD *)(v12 + 16) = v8;
    swift_asyncLet_begin(v0 + 16, 0, v11, &unk_100112130, v12, v0 + 1352);
    return swift_asyncLet_get(v0 + 656, v0 + 1400, sub_10000C6D8, v0 + 1360);
  }
  else if (v6 == enum case for Headline.yahooHeadline(_:))
  {
    v14 = *(_QWORD **)(v0 + 1608);
    v15 = *(_QWORD *)(v0 + 1544);
    v16 = *(unsigned __int8 *)(v0 + 1716);
    v17 = *(_QWORD *)(v0 + 1528);
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v0 + 1584) + 96))(v14, *(_QWORD *)(v0 + 1576));
    v18 = (void *)*v14;
    ObjectType = swift_getObjectType(*v14);
    swift_bridgeObjectRetain(v17);
    v20 = objc_msgSend(v18, "identifier");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v51 = v22;
    v52 = v21;

    v53 = v17;
    swift_bridgeObjectRetain(v17);
    FCHeadlineProviding.stocksArticleURL.getter(ObjectType);
    v23 = type metadata accessor for URL(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v15, 1, v23) == 1)
    {
      v25 = *(_QWORD *)(v0 + 1544);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1528));
      swift_unknownObjectRelease(v18);
      sub_10000E770(v25, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      v26 = 1;
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 1544);
      v32 = *(_QWORD *)(v0 + 1528);
      sub_10000EDE8(0, &qword_100112100, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v34 = v33;
      v35 = type metadata accessor for URLQueryItem(0);
      v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v35 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) | 7);
      *(_OWORD *)(v36 + 16) = xmmword_1000DB170;
      URLQueryItem.init(name:value:)(0x724664656E65706FLL, 0xEA00000000006D6FLL, 0xD000000000000011, 0x80000001000E5030);
      URL.appending(queryItems:)(v36);
      swift_bridgeObjectRelease(v32);
      swift_unknownObjectRelease(v18);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v31, v23);
      v26 = 0;
    }
    if (v16)
      v37 = 1;
    else
      v37 = 2;
    v38 = *(_QWORD *)(v0 + 1552);
    v39 = *(_QWORD *)(v0 + 1520);
    v40 = *(_QWORD *)(v0 + 1512);
    v41 = *(_QWORD *)(v0 + 1504);
    v42 = *(_QWORD *)(v0 + 1448);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v38, v26, 1, v23);
    *(_QWORD *)v42 = v52;
    *(_QWORD *)(v42 + 8) = v51;
    *(_BYTE *)(v42 + 16) = v37;
    *(_QWORD *)(v42 + 24) = v39;
    *(_QWORD *)(v42 + 32) = v53;
    *(_QWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_BYTE *)(v42 + 56) = 1;
    *(_QWORD *)(v42 + 64) = v41;
    *(_QWORD *)(v42 + 72) = v40;
    *(_OWORD *)(v42 + 80) = xmmword_1000DB8C0;
    *(_OWORD *)(v42 + 96) = xmmword_1000DB8D0;
    *(_BYTE *)(v42 + 112) = 0;
    v43 = type metadata accessor for HeadlineViewModel(0);
    sub_10000E7B4(v38, v42 + *(int *)(v43 + 36));
    v44 = *(_QWORD *)(v0 + 1608);
    v45 = *(_QWORD *)(v0 + 1600);
    v46 = *(_QWORD *)(v0 + 1592);
    v47 = *(_QWORD *)(v0 + 1568);
    v48 = *(_QWORD *)(v0 + 1560);
    v49 = *(_QWORD *)(v0 + 1552);
    v50 = *(_QWORD *)(v0 + 1544);
    swift_bridgeObjectRetain(v40);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 1592);
    v28 = *(_QWORD *)(v0 + 1576);
    v5(v27, *(_QWORD *)(v0 + 1496), v28);
    _StringGuts.grow(_:)(61);
    *(_QWORD *)(v0 + 1336) = 0;
    *(_QWORD *)(v0 + 1344) = 0xE000000000000000;
    v29._countAndFlagsBits = 0xD000000000000014;
    v29._object = (void *)0x80000001000E4FE0;
    String.append(_:)(v29);
    _print_unlocked<A, B>(_:_:)(v27, v0 + 1336, v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v30._countAndFlagsBits = 0xD000000000000027;
    v30._object = (void *)0x80000001000E5000;
    String.append(_:)(v30);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), "StocksWidget/HeadlineViewModelService.swift", 43, 2, 293, 0);
  }
}

uint64_t sub_10000C6D8()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 1400);
  *(_QWORD *)(v0 + 1648) = v1;
  v2 = v1;
  return swift_asyncLet_get(v0 + 16, v0 + 1352, sub_10000C730, v0 + 1408);
}

uint64_t sub_10000C730()
{
  return swift_task_switch(sub_10000C744, 0, 0);
}

uint64_t sub_10000C744()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  double v5;
  id v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  __int128 v67;
  uint64_t ObjectType;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;

  v1 = *(void **)(v0 + 1352);
  *(_QWORD *)(v0 + 1656) = v1;
  if (v1)
  {
    v2 = *(void **)(v0 + 1624);
    v3 = v1;
    v4 = objc_msgSend(v2, "sourceChannel");
    v5 = 1.0;
    if (v4)
    {
      v6 = v4;
      v7 = objc_msgSend(v4, "theme");
      swift_unknownObjectRelease(v6);
      if (v7)
      {
        objc_msgSend(v7, "bannerImageScale");
        v5 = v8;
        swift_unknownObjectRelease(v7);
      }
    }
    v9 = *(double *)(v0 + 1528);
    if (v5 > 0.1)
      v10 = v5;
    else
      v10 = 1.0;
    v11 = v10;
    v12 = *(_QWORD *)(v0 + 1520);
    v13 = *(_QWORD *)(v0 + 1528);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v9 = *(double *)(v0 + 1528);
    v1 = *(void **)(v0 + 1520);
    v11 = v9;
  }
  *(_QWORD *)(v0 + 1688) = v13;
  *(_QWORD *)(v0 + 1680) = v12;
  *(double *)(v0 + 1672) = v11;
  *(_QWORD *)(v0 + 1664) = v1;
  v14 = *(void **)(v0 + 1648);
  if (v14)
  {
    v15 = type metadata accessor for MainActor(0);
    v16 = v14;
    v17 = swift_bridgeObjectRetain(*(_QWORD *)&v9);
    *(_QWORD *)(v0 + 1696) = static MainActor.shared.getter(v17);
    v18 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
    v20 = v19;
    v21 = sub_10000CC30;
    return swift_task_switch(v21, v18, v20);
  }
  v22 = swift_bridgeObjectRetain(*(_QWORD *)&v9);
  if ((Headline.hasAudio.getter(v22) & 1) != 0)
  {
    v23 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 1704) = ((uint64_t (*)(void))static MainActor.shared.getter)();
    v18 = dispatch thunk of Actor.unownedExecutor.getter(v23, &protocol witness table for MainActor);
    v20 = v24;
    v21 = sub_10000D424;
    return swift_task_switch(v21, v18, v20);
  }
  v26 = *(_QWORD *)(v0 + 1688);
  v27 = *(_QWORD *)(v0 + 1680);
  v28 = *(_QWORD *)(v0 + 1672);
  v29 = *(void **)(v0 + 1664);
  v30 = *(void **)(v0 + 1624);
  v31 = *(_QWORD *)(v0 + 1560);
  v32 = *(void **)(v0 + 1536);
  v33 = *(_QWORD *)(v0 + 1656) == 0;
  ObjectType = swift_getObjectType(v30);
  v34 = objc_msgSend(v30, "identifier");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v72 = v36;
  v73 = v35;

  sub_10000EBD8(v29, v28, v27, v26, v33);
  swift_unknownObjectRetain(v30);
  v37 = sub_10000E95C(v30, v32);
  v70 = v38;
  v71 = v37;
  v69 = v39;
  FCHeadlineProviding.stocksArticleURL.getter(ObjectType);
  v40 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v31, 1, v40);
  v43 = *(_QWORD *)(v0 + 1688);
  v44 = *(_QWORD *)(v0 + 1680);
  v45 = *(_QWORD *)(v0 + 1672);
  v46 = *(void **)(v0 + 1664);
  v47 = *(void **)(v0 + 1656);
  v48 = *(void **)(v0 + 1648);
  if (v42 == 1)
  {
    v49 = *(_QWORD *)(v0 + 1560);
    sub_10000EC04(*(void **)(v0 + 1664), *(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1680), *(_QWORD *)(v0 + 1688), v47 == 0);

    sub_10000E770(v49, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v50 = 1;
  }
  else
  {
    v65 = *(_QWORD *)(v0 + 1560);
    sub_10000EDE8(0, &qword_100112100, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v66 = v48;
    v52 = v51;
    v53 = type metadata accessor for URLQueryItem(0);
    v54 = swift_allocObject(v52, ((*(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v53 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v53 - 8) + 80) | 7);
    *(_OWORD *)(v54 + 16) = xmmword_1000DB170;
    URLQueryItem.init(name:value:)(0x724664656E65706FLL, 0xEA00000000006D6FLL, 0xD000000000000011, 0x80000001000E5030);
    URL.appending(queryItems:)(v54);
    sub_10000EC04(v46, v45, v44, v43, v47 == 0);

    swift_bridgeObjectRelease(v54);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v65, v40);
    v50 = 0;
  }
  v55 = *(_QWORD *)(v0 + 1688);
  v56 = *(_QWORD *)(v0 + 1680);
  v67 = *(_OWORD *)(v0 + 1664);
  v57 = *(_QWORD *)(v0 + 1568);
  v58 = *(_QWORD *)(v0 + 1512);
  v59 = *(_QWORD *)(v0 + 1504);
  v60 = v41;
  v61 = *(_QWORD *)(v0 + 1448);
  v62 = *(_QWORD *)(v0 + 1656) == 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v57, v50, 1, v40);
  sub_10000EC30(0);
  *(_DWORD *)(v0 + 1712) = *(_DWORD *)(v63 + 48);
  *(_QWORD *)v61 = v73;
  *(_QWORD *)(v61 + 8) = v72;
  *(_BYTE *)(v61 + 16) = 0;
  *(_OWORD *)(v61 + 24) = v67;
  *(_QWORD *)(v61 + 40) = v56;
  *(_QWORD *)(v61 + 48) = v55;
  *(_BYTE *)(v61 + 56) = v62;
  *(_QWORD *)(v61 + 64) = v59;
  *(_QWORD *)(v61 + 72) = v58;
  *(_QWORD *)(v61 + 80) = v71;
  *(_QWORD *)(v61 + 88) = v70;
  *(_QWORD *)(v61 + 96) = v69;
  *(_QWORD *)(v61 + 104) = 1;
  *(_BYTE *)(v61 + 112) = 0;
  v64 = type metadata accessor for HeadlineViewModel(0);
  sub_10000E7B4(v57, v61 + *(int *)(v64 + 36));
  swift_bridgeObjectRetain(v58);
  return swift_asyncLet_finish(v0 + 16, v0 + 1352, sub_10000DB9C, v0 + 1456);
}

uint64_t sub_10000CC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = swift_release(*(_QWORD *)(v0 + 1696));
  v2 = static Account.storefrontID.getter(v1);
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (!v6)
  {
    v8 = static Account.StorefrontID.us.getter();
    v10 = v9;
    if (v8 == v2 && v9 == v4)
    {
      swift_bridgeObjectRelease_n(v4, 2);
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v2, v4, 0);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v4);
      if ((v11 & 1) == 0)
        goto LABEL_3;
    }
    v7 = sub_10000CD24;
    return swift_task_switch(v7, 0, 0);
  }
  swift_bridgeObjectRelease(v4);
LABEL_3:
  v7 = sub_10000D0B0;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10000CD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 1616))(*(_QWORD *)(v0 + 1600), *(_QWORD *)(v0 + 1496), *(_QWORD *)(v0 + 1576));
  v51 = Headline.hasAudio.getter(v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1584) + 8))(*(_QWORD *)(v0 + 1600), *(_QWORD *)(v0 + 1576));
  v52 = *(_QWORD *)(v0 + 1648);
  v2 = *(_QWORD *)(v0 + 1688);
  v3 = *(_QWORD *)(v0 + 1680);
  v4 = *(_QWORD *)(v0 + 1672);
  v5 = *(void **)(v0 + 1664);
  v6 = *(void **)(v0 + 1624);
  v7 = *(_QWORD *)(v0 + 1560);
  v8 = *(void **)(v0 + 1536);
  v9 = *(_QWORD *)(v0 + 1656) == 0;
  ObjectType = swift_getObjectType(v6);
  v10 = objc_msgSend(v6, "identifier");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v49 = v12;
  v50 = v11;

  sub_10000EBD8(v5, v4, v3, v2, v9);
  swift_unknownObjectRetain(v6);
  v13 = sub_10000E95C(v6, v8);
  v47 = v14;
  v48 = v13;
  v46 = v15;
  FCHeadlineProviding.stocksArticleURL.getter(ObjectType);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16);
  v19 = *(_QWORD *)(v0 + 1688);
  v20 = *(_QWORD *)(v0 + 1680);
  v21 = *(_QWORD *)(v0 + 1672);
  v22 = *(void **)(v0 + 1664);
  v23 = *(void **)(v0 + 1656);
  v24 = *(void **)(v0 + 1648);
  if (v18 == 1)
  {
    v25 = *(_QWORD *)(v0 + 1560);
    sub_10000EC04(*(void **)(v0 + 1664), *(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1680), *(_QWORD *)(v0 + 1688), v23 == 0);

    sub_10000E770(v25, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v26 = 1;
  }
  else
  {
    v42 = *(_QWORD *)(v0 + 1560);
    sub_10000EDE8(0, &qword_100112100, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v44 = v24;
    v28 = v27;
    v29 = type metadata accessor for URLQueryItem(0);
    v30 = swift_allocObject(v28, ((*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80) | 7);
    *(_OWORD *)(v30 + 16) = xmmword_1000DB170;
    URLQueryItem.init(name:value:)(0x724664656E65706FLL, 0xEA00000000006D6FLL, 0xD000000000000011, 0x80000001000E5030);
    URL.appending(queryItems:)(v30);
    sub_10000EC04(v22, v21, v20, v19, v23 == 0);

    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v42, v16);
    v26 = 0;
  }
  v31 = v17;
  v32 = *(_QWORD *)(v0 + 1688);
  v33 = *(_QWORD *)(v0 + 1680);
  v43 = *(_OWORD *)(v0 + 1664);
  v34 = *(_QWORD *)(v0 + 1568);
  v35 = *(_QWORD *)(v0 + 1512);
  v36 = *(_QWORD *)(v0 + 1504);
  v37 = *(_QWORD *)(v0 + 1448);
  v38 = *(_QWORD *)(v0 + 1656) == 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v34, v26, 1, v16);
  sub_10000EC30(0);
  *(_DWORD *)(v0 + 1712) = *(_DWORD *)(v39 + 48);
  *(_QWORD *)v37 = v50;
  *(_QWORD *)(v37 + 8) = v49;
  *(_BYTE *)(v37 + 16) = 0;
  *(_OWORD *)(v37 + 24) = v43;
  *(_QWORD *)(v37 + 40) = v33;
  *(_QWORD *)(v37 + 48) = v32;
  *(_BYTE *)(v37 + 56) = v38;
  *(_QWORD *)(v37 + 64) = v36;
  *(_QWORD *)(v37 + 72) = v35;
  *(_QWORD *)(v37 + 80) = v48;
  *(_QWORD *)(v37 + 88) = v47;
  *(_QWORD *)(v37 + 96) = v46;
  *(_QWORD *)(v37 + 104) = v52;
  *(_BYTE *)(v37 + 112) = v51 & 1;
  v40 = type metadata accessor for HeadlineViewModel(0);
  sub_10000E7B4(v34, v37 + *(int *)(v40 + 36));
  swift_bridgeObjectRetain(v35);
  return swift_asyncLet_finish(v0 + 16, v0 + 1352, sub_10000DB9C, v0 + 1456);
}

uint64_t sub_10000D0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  __int128 v42;
  void *v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1616))(*(_QWORD *)(v0 + 1600), *(_QWORD *)(v0 + 1496), *(_QWORD *)(v0 + 1576));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1584) + 8))(*(_QWORD *)(v0 + 1600), *(_QWORD *)(v0 + 1576));
  v50 = *(_QWORD *)(v0 + 1648);
  v1 = *(_QWORD *)(v0 + 1688);
  v2 = *(_QWORD *)(v0 + 1680);
  v3 = *(_QWORD *)(v0 + 1672);
  v4 = *(void **)(v0 + 1664);
  v5 = *(void **)(v0 + 1624);
  v6 = *(_QWORD *)(v0 + 1560);
  v7 = *(void **)(v0 + 1536);
  v8 = *(_QWORD *)(v0 + 1656) == 0;
  ObjectType = swift_getObjectType(v5);
  v9 = objc_msgSend(v5, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v48 = v11;
  v49 = v10;

  sub_10000EBD8(v4, v3, v2, v1, v8);
  swift_unknownObjectRetain(v5);
  v12 = sub_10000E95C(v5, v7);
  v46 = v13;
  v47 = v12;
  v45 = v14;
  FCHeadlineProviding.stocksArticleURL.getter(ObjectType);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15);
  v18 = *(_QWORD *)(v0 + 1688);
  v19 = *(_QWORD *)(v0 + 1680);
  v20 = *(_QWORD *)(v0 + 1672);
  v21 = *(void **)(v0 + 1664);
  v22 = *(void **)(v0 + 1656);
  v23 = *(void **)(v0 + 1648);
  if (v17 == 1)
  {
    v24 = *(_QWORD *)(v0 + 1560);
    sub_10000EC04(*(void **)(v0 + 1664), *(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1680), *(_QWORD *)(v0 + 1688), v22 == 0);

    sub_10000E770(v24, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v25 = 1;
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 1560);
    sub_10000EDE8(0, &qword_100112100, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v43 = v23;
    v27 = v26;
    v28 = type metadata accessor for URLQueryItem(0);
    v29 = swift_allocObject(v27, ((*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) | 7);
    *(_OWORD *)(v29 + 16) = xmmword_1000DB170;
    URLQueryItem.init(name:value:)(0x724664656E65706FLL, 0xEA00000000006D6FLL, 0xD000000000000011, 0x80000001000E5030);
    URL.appending(queryItems:)(v29);
    sub_10000EC04(v21, v20, v19, v18, v22 == 0);

    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v41, v15);
    v25 = 0;
  }
  v30 = v16;
  v31 = *(_QWORD *)(v0 + 1688);
  v32 = *(_QWORD *)(v0 + 1680);
  v42 = *(_OWORD *)(v0 + 1664);
  v33 = *(_QWORD *)(v0 + 1568);
  v34 = *(_QWORD *)(v0 + 1512);
  v35 = *(_QWORD *)(v0 + 1504);
  v36 = *(_QWORD *)(v0 + 1448);
  v37 = *(_QWORD *)(v0 + 1656) == 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v33, v25, 1, v15);
  sub_10000EC30(0);
  *(_DWORD *)(v0 + 1712) = *(_DWORD *)(v38 + 48);
  *(_QWORD *)v36 = v49;
  *(_QWORD *)(v36 + 8) = v48;
  *(_BYTE *)(v36 + 16) = 0;
  *(_OWORD *)(v36 + 24) = v42;
  *(_QWORD *)(v36 + 40) = v32;
  *(_QWORD *)(v36 + 48) = v31;
  *(_BYTE *)(v36 + 56) = v37;
  *(_QWORD *)(v36 + 64) = v35;
  *(_QWORD *)(v36 + 72) = v34;
  *(_QWORD *)(v36 + 80) = v47;
  *(_QWORD *)(v36 + 88) = v46;
  *(_QWORD *)(v36 + 96) = v45;
  *(_QWORD *)(v36 + 104) = v50;
  *(_BYTE *)(v36 + 112) = 0;
  v39 = type metadata accessor for HeadlineViewModel(0);
  sub_10000E7B4(v33, v36 + *(int *)(v39 + 36));
  swift_bridgeObjectRetain(v34);
  return swift_asyncLet_finish(v0 + 16, v0 + 1352, sub_10000DB9C, v0 + 1456);
}

uint64_t sub_10000D424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = swift_release(*(_QWORD *)(v0 + 1704));
  v2 = static Account.storefrontID.getter(v1);
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (!v6)
  {
    v8 = static Account.StorefrontID.us.getter();
    v10 = v9;
    if (v8 == v2 && v9 == v4)
    {
      swift_bridgeObjectRelease_n(v4, 2);
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v2, v4, 0);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v4);
      if ((v11 & 1) == 0)
        goto LABEL_3;
    }
    v7 = sub_10000D85C;
    return swift_task_switch(v7, 0, 0);
  }
  swift_bridgeObjectRelease(v4);
LABEL_3:
  v7 = sub_10000D518;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10000D518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  __int128 v42;
  void *v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 1688);
  v2 = *(_QWORD *)(v0 + 1680);
  v3 = *(_QWORD *)(v0 + 1672);
  v4 = *(void **)(v0 + 1664);
  v5 = *(void **)(v0 + 1624);
  v6 = *(_QWORD *)(v0 + 1560);
  v7 = *(void **)(v0 + 1536);
  v8 = *(_QWORD *)(v0 + 1656) == 0;
  ObjectType = swift_getObjectType(v5);
  v9 = objc_msgSend(v5, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v48 = v11;
  v49 = v10;

  sub_10000EBD8(v4, v3, v2, v1, v8);
  swift_unknownObjectRetain(v5);
  v12 = sub_10000E95C(v5, v7);
  v46 = v13;
  v47 = v12;
  v45 = v14;
  FCHeadlineProviding.stocksArticleURL.getter(ObjectType);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15);
  v18 = *(_QWORD *)(v0 + 1688);
  v19 = *(_QWORD *)(v0 + 1680);
  v20 = *(_QWORD *)(v0 + 1672);
  v21 = *(void **)(v0 + 1664);
  v22 = *(void **)(v0 + 1656);
  v23 = *(void **)(v0 + 1648);
  if (v17 == 1)
  {
    v24 = *(_QWORD *)(v0 + 1560);
    sub_10000EC04(*(void **)(v0 + 1664), *(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1680), *(_QWORD *)(v0 + 1688), v22 == 0);

    sub_10000E770(v24, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v25 = 1;
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 1560);
    sub_10000EDE8(0, &qword_100112100, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v43 = v23;
    v27 = v26;
    v28 = type metadata accessor for URLQueryItem(0);
    v29 = swift_allocObject(v27, ((*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) | 7);
    *(_OWORD *)(v29 + 16) = xmmword_1000DB170;
    URLQueryItem.init(name:value:)(0x724664656E65706FLL, 0xEA00000000006D6FLL, 0xD000000000000011, 0x80000001000E5030);
    URL.appending(queryItems:)(v29);
    sub_10000EC04(v21, v20, v19, v18, v22 == 0);

    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v41, v15);
    v25 = 0;
  }
  v30 = v16;
  v31 = *(_QWORD *)(v0 + 1688);
  v32 = *(_QWORD *)(v0 + 1680);
  v42 = *(_OWORD *)(v0 + 1664);
  v33 = *(_QWORD *)(v0 + 1568);
  v34 = *(_QWORD *)(v0 + 1512);
  v35 = *(_QWORD *)(v0 + 1504);
  v36 = *(_QWORD *)(v0 + 1448);
  v37 = *(_QWORD *)(v0 + 1656) == 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v33, v25, 1, v15);
  sub_10000EC30(0);
  *(_DWORD *)(v0 + 1712) = *(_DWORD *)(v38 + 48);
  *(_QWORD *)v36 = v49;
  *(_QWORD *)(v36 + 8) = v48;
  *(_BYTE *)(v36 + 16) = 0;
  *(_OWORD *)(v36 + 24) = v42;
  *(_QWORD *)(v36 + 40) = v32;
  *(_QWORD *)(v36 + 48) = v31;
  *(_BYTE *)(v36 + 56) = v37;
  *(_QWORD *)(v36 + 64) = v35;
  *(_QWORD *)(v36 + 72) = v34;
  *(_QWORD *)(v36 + 80) = v47;
  *(_QWORD *)(v36 + 88) = v46;
  *(_QWORD *)(v36 + 96) = v45;
  *(_QWORD *)(v36 + 104) = 1;
  *(_BYTE *)(v36 + 112) = 0;
  v39 = type metadata accessor for HeadlineViewModel(0);
  sub_10000E7B4(v33, v36 + *(int *)(v39 + 36));
  swift_bridgeObjectRetain(v34);
  return swift_asyncLet_finish(v0 + 16, v0 + 1352, sub_10000DB9C, v0 + 1456);
}

uint64_t sub_10000D85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  __int128 v42;
  void *v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 1688);
  v2 = *(_QWORD *)(v0 + 1680);
  v3 = *(_QWORD *)(v0 + 1672);
  v4 = *(void **)(v0 + 1664);
  v5 = *(void **)(v0 + 1624);
  v6 = *(_QWORD *)(v0 + 1560);
  v7 = *(void **)(v0 + 1536);
  v8 = *(_QWORD *)(v0 + 1656) == 0;
  ObjectType = swift_getObjectType(v5);
  v9 = objc_msgSend(v5, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v48 = v11;
  v49 = v10;

  sub_10000EBD8(v4, v3, v2, v1, v8);
  swift_unknownObjectRetain(v5);
  v12 = sub_10000E95C(v5, v7);
  v46 = v13;
  v47 = v12;
  v45 = v14;
  FCHeadlineProviding.stocksArticleURL.getter(ObjectType);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15);
  v18 = *(_QWORD *)(v0 + 1688);
  v19 = *(_QWORD *)(v0 + 1680);
  v20 = *(_QWORD *)(v0 + 1672);
  v21 = *(void **)(v0 + 1664);
  v22 = *(void **)(v0 + 1656);
  v23 = *(void **)(v0 + 1648);
  if (v17 == 1)
  {
    v24 = *(_QWORD *)(v0 + 1560);
    sub_10000EC04(*(void **)(v0 + 1664), *(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1680), *(_QWORD *)(v0 + 1688), v22 == 0);

    sub_10000E770(v24, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v25 = 1;
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 1560);
    sub_10000EDE8(0, &qword_100112100, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v43 = v23;
    v27 = v26;
    v28 = type metadata accessor for URLQueryItem(0);
    v29 = swift_allocObject(v27, ((*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) | 7);
    *(_OWORD *)(v29 + 16) = xmmword_1000DB170;
    URLQueryItem.init(name:value:)(0x724664656E65706FLL, 0xEA00000000006D6FLL, 0xD000000000000011, 0x80000001000E5030);
    URL.appending(queryItems:)(v29);
    sub_10000EC04(v21, v20, v19, v18, v22 == 0);

    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v41, v15);
    v25 = 0;
  }
  v30 = v16;
  v31 = *(_QWORD *)(v0 + 1688);
  v32 = *(_QWORD *)(v0 + 1680);
  v42 = *(_OWORD *)(v0 + 1664);
  v33 = *(_QWORD *)(v0 + 1568);
  v34 = *(_QWORD *)(v0 + 1512);
  v35 = *(_QWORD *)(v0 + 1504);
  v36 = *(_QWORD *)(v0 + 1448);
  v37 = *(_QWORD *)(v0 + 1656) == 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v33, v25, 1, v15);
  sub_10000EC30(0);
  *(_DWORD *)(v0 + 1712) = *(_DWORD *)(v38 + 48);
  *(_QWORD *)v36 = v49;
  *(_QWORD *)(v36 + 8) = v48;
  *(_BYTE *)(v36 + 16) = 0;
  *(_OWORD *)(v36 + 24) = v42;
  *(_QWORD *)(v36 + 40) = v32;
  *(_QWORD *)(v36 + 48) = v31;
  *(_BYTE *)(v36 + 56) = v37;
  *(_QWORD *)(v36 + 64) = v35;
  *(_QWORD *)(v36 + 72) = v34;
  *(_QWORD *)(v36 + 80) = v47;
  *(_QWORD *)(v36 + 88) = v46;
  *(_QWORD *)(v36 + 96) = v45;
  *(_QWORD *)(v36 + 104) = 0;
  *(_BYTE *)(v36 + 112) = 0;
  v39 = type metadata accessor for HeadlineViewModel(0);
  sub_10000E7B4(v33, v36 + *(int *)(v39 + 36));
  swift_bridgeObjectRetain(v34);
  return swift_asyncLet_finish(v0 + 16, v0 + 1352, sub_10000DB9C, v0 + 1456);
}

uint64_t sub_10000DB9C()
{
  return swift_task_switch(sub_10000DBB0, 0, 0);
}

uint64_t sub_10000DBB0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 1640));
  return swift_asyncLet_finish(v0 + 656, v0 + 1400, sub_10000DC04, v0 + 1296);
}

uint64_t sub_10000DC04()
{
  return swift_task_switch(sub_10000DC18, 0, 0);
}

uint64_t sub_10000DC18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 1632);
  v2 = *(_QWORD *)(v0 + 1608) + *(int *)(v0 + 1712);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1624));
  swift_task_dealloc(v1);
  v3 = type metadata accessor for NewsHeadlineScore(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = *(_QWORD *)(v0 + 1600);
  v5 = *(_QWORD *)(v0 + 1592);
  v6 = *(_QWORD *)(v0 + 1568);
  v7 = *(_QWORD *)(v0 + 1560);
  v8 = *(_QWORD *)(v0 + 1552);
  v9 = *(_QWORD *)(v0 + 1544);
  swift_task_dealloc(*(_QWORD *)(v0 + 1608));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000DCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10000DCF4, 0, 0);
}

void sub_10000DCF4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  _QWORD *v4;

  v1 = objc_msgSend(*(id *)(v0 + 24), "thumbnailWidget");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "thumbnailAssetHandle");
    *(_QWORD *)(v0 + 32) = v3;

    if (v3)
    {
      v4 = (_QWORD *)swift_task_alloc(dword_100118A2C);
      *(_QWORD *)(v0 + 40) = v4;
      *v4 = v0;
      v4[1] = sub_10000DDA0;
      sub_1000D45D4();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    **(_QWORD **)(v0 + 16) = 0;
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000DDA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = *(void **)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);

  return swift_task_switch(sub_10000F0B4, 0, 0);
}

uint64_t sub_10000DE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10000DE18, 0, 0);
}

uint64_t sub_10000DE18()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  _QWORD *v4;

  v1 = objc_msgSend(*(id *)(v0 + 24), "sourceChannel");
  if (v1
    && (v2 = v1,
        v3 = objc_msgSend(v1, "nameImageMaskWidgetHQAssetHandle"),
        *(_QWORD *)(v0 + 32) = v3,
        swift_unknownObjectRelease(v2),
        v3))
  {
    v4 = (_QWORD *)swift_task_alloc(dword_100118A2C);
    *(_QWORD *)(v0 + 40) = v4;
    *v4 = v0;
    v4[1] = sub_10000DEC4;
    return sub_1000D45D4();
  }
  else
  {
    **(_QWORD **)(v0 + 16) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000DEC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = *(void **)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);

  return swift_task_switch(sub_10000DF24, 0, 0);
}

uint64_t sub_10000DF24()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000DF3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_10000E144(0);
  v8 = (uint64_t *)(a2 + *(int *)(v7 + 48));
  v9 = *v8;
  v10 = v8[1];
  v11 = (uint64_t *)(a2 + *(int *)(v7 + 64));
  v12 = *v11;
  v13 = v11[1];
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)a3 + *a3);
  v14 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v14;
  *v14 = v3;
  v14[1] = sub_10000F0A8;
  return v16(a1, a2, v9, v10, v12, v13);
}

uint64_t sub_10000DFF4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100007164(v0 + 2);
  swift_unknownObjectRelease(v0[7]);
  sub_100007164(v0 + 9);
  swift_release(v0[14]);
  swift_unknownObjectRelease(v0[15]);
  v1 = (char *)v0 + OBJC_IVAR____TtC12StocksWidget24HeadlineViewModelService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10000E06C()
{
  return type metadata accessor for HeadlineViewModelService(0);
}

uint64_t type metadata accessor for HeadlineViewModelService(uint64_t a1)
{
  uint64_t result;

  result = qword_100111FC0;
  if (!qword_100111FC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeadlineViewModelService);
  return result;
}

uint64_t sub_10000E0B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "(";
  v4[1] = &unk_1000DB988;
  v4[2] = "(";
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_1000DB988;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10000E144(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!qword_100112080)
  {
    v2 = type metadata accessor for Headline(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for String, &type metadata for String, "headline title sourceName ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100112080);
  }
}

id sub_10000E1B8(void *a1, void *a2, void *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (objc_msgSend(a1, "userInterfaceStyle") == (id)2)
    a3 = a2;
  objc_msgSend(a3, "red");
  v6 = v5;
  objc_msgSend(a3, "green");
  v8 = v7;
  objc_msgSend(a3, "blue");
  v10 = v9;
  objc_msgSend(a3, "alpha");
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", v6, v8, v10, v11);
}

id sub_10000E270(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

BOOL sub_10000E2C0(uint64_t a1)
{
  return sub_10000E2D8(a1, (uint64_t (*)(_QWORD))sub_10000EE40);
}

BOOL sub_10000E2CC(uint64_t a1)
{
  return sub_10000E2D8(a1, (uint64_t (*)(_QWORD))sub_10000E144);
}

BOOL sub_10000E2D8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1, 1, v3) != 1;
}

uint64_t sub_10000E31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000E344(a1, &qword_100112150, (uint64_t (*)(uint64_t))sub_10000EE40, a2);
}

uint64_t sub_10000E330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000E344(a1, &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144, a2);
}

uint64_t sub_10000E344@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  sub_10000EDE8(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  sub_10000EEA8(a1, (uint64_t)&v13 - v9, a2, a3);
  v11 = a3(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if ((_DWORD)result != 1)
    return sub_10000ED3C((uint64_t)v10, a4, a3);
  __break(1u);
  return result;
}

uint64_t sub_10000E408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  v14 = *(_QWORD *)(v6 + 16);
  v15 = *(_BYTE *)(v6 + 24);
  v16 = (_QWORD *)swift_task_alloc(dword_100112094);
  *(_QWORD *)(v7 + 16) = v16;
  *v16 = v7;
  v16[1] = sub_10000F0A8;
  return sub_10000C0B4(a1, a2, a3, a4, a5, a6, v14, v15);
}

uint64_t sub_10000E4B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000E4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001120A4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001120A0 + dword_1001120A0))(a1, a2, v6);
}

void sub_10000E55C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1001120B0)
  {
    sub_10000E5F0(255);
    v3 = v2;
    sub_10000E144(255);
    v5 = v4;
    v6 = sub_100003D3C(&qword_1001120E0, (uint64_t (*)(uint64_t))sub_10000E5F0, (uint64_t)&protocol conformance descriptor for LazyFilterSequence<A>);
    v7 = type metadata accessor for LazyMapSequence(a1, v3, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1001120B0);
  }
}

void sub_10000E5F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001120B8)
  {
    sub_10000E668(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_1001120D8, (uint64_t (*)(uint64_t))sub_10000E668, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
    v5 = type metadata accessor for LazyFilterSequence(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001120B8);
  }
}

void sub_10000E668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1001120C0)
  {
    sub_10000EDE8(255, &qword_1001120C8, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for ArraySlice);
    v3 = v2;
    sub_10000EDE8(255, &qword_100112078, (uint64_t (*)(uint64_t))sub_10000E144, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v5 = v4;
    v6 = sub_10000E710();
    v7 = type metadata accessor for LazyMapSequence(a1, v3, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1001120C0);
  }
}

unint64_t sub_10000E710()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001120D0;
  if (!qword_1001120D0)
  {
    sub_10000EDE8(255, &qword_1001120C8, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for ArraySlice);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001120D0);
  }
  return result;
}

uint64_t sub_10000E770(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_10000EDE8(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_10000E7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10011210C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000F0A8;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10000DCF4, 0, 0);
}

unint64_t sub_10000E874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112120;
  if (!qword_100112120)
  {
    v1 = objc_opt_self(UIImage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100112120);
  }
  return result;
}

uint64_t sub_10000E8B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10011212C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000E914;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_10000DE18, 0, 0);
}

uint64_t sub_10000E914()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id sub_10000E95C(void *a1, id a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id result;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[5];
  uint64_t v18;

  if (objc_msgSend(a2, "containsHeadline:", a1))
    goto LABEL_9;
  if (objc_msgSend(a1, "isPressRelease"))
    goto LABEL_9;
  v4 = objc_msgSend(a1, "storyStyle");
  if (!v4)
    goto LABEL_9;
  v5 = v4;
  if (objc_msgSend(a1, "storyType") == (id)1 || objc_msgSend(a1, "storyType") == (id)5 || objc_msgSend(a1, "storyType"))
  {

LABEL_9:
    swift_unknownObjectRelease(a1);

    return 0;
  }
  result = objc_msgSend(v5, "label");
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

  result = objc_msgSend(v5, "foreground_color");
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = result;
  result = objc_msgSend(v5, "dark_style_foreground_color");
  if (result)
  {
    v10 = result;
    v11 = swift_allocObject(&unk_100103F58, 32, 7);
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = v9;
    v12 = objc_allocWithZone((Class)UIColor);
    v17[4] = sub_10000ED1C;
    v18 = v11;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_10000E270;
    v17[3] = &unk_100103F70;
    v13 = _Block_copy(v17);
    v14 = v10;
    v15 = v9;
    v16 = objc_msgSend(v12, "initWithDynamicProvider:", v13);
    _Block_release(v13);
    swift_release(v18);
    Color.init(uiColor:)(v16);

    swift_unknownObjectRelease(a1);
    return (id)v6;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10000EBD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v6;

  if ((a5 & 1) == 0)
  {
    v6 = a1;
    a2 = a4;
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000EC04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
  {

    a2 = a4;
  }
  return swift_bridgeObjectRelease(a2);
}

void sub_10000EC30(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!qword_100112138)
  {
    v2 = sub_10000EC9C();
    v3 = type metadata accessor for NewsHeadlineScore(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112138);
  }
}

unint64_t sub_10000EC9C()
{
  unint64_t result;
  char *v1;

  result = qword_100112140;
  if (!qword_100112140)
  {
    v1 = (char *)&OBJC_PROTOCOL___FCHeadlineProviding.isa + 1;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_100112140);
  }
  return result;
}

uint64_t sub_10000ECF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10000ED1C(void *a1)
{
  uint64_t v1;

  return sub_10000E1B8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10000ED24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000ED34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000ED3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10000ED80(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!qword_100112148)
  {
    v2 = type metadata accessor for Headline(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for String, &type metadata for String, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100112148);
  }
}

void sub_10000EDE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_10000EE40(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100112158)
  {
    v2 = type metadata accessor for Date(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, &type metadata for Double, "date closingPrice ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, &qword_100112158);
  }
}

uint64_t sub_10000EEA8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10000EDE8(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_10000EF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000EF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Logger(0);
  return sub_10000BBE8(a1, a2);
}

uint64_t sub_10000EFB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000EFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001120A4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000E914;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001120A0 + dword_1001120A0))(a1, a2, v6);
}

void sub_10000F054()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112180)
  {
    v0 = type metadata accessor for Array(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112180);
  }
}

unint64_t sub_10000F0BC()
{
  unint64_t result;

  result = qword_1001121B8;
  if (!qword_1001121B8)
  {
    result = swift_getWitnessTable(&unk_1000DB9F0, &type metadata for ResetPrivacyIdentifierSettingEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1001121B8);
  }
  return result;
}

unint64_t sub_10000F104()
{
  unint64_t result;

  result = qword_1001121C0;
  if (!qword_1001121C0)
  {
    result = swift_getWitnessTable(&unk_1000DBCC0, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001121C0);
  }
  return result;
}

uint64_t sub_10000F148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for PrivacyIdentifierManager();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = static Settings.Identification.resetOnNextLaunch.getter();
  sub_1000035F0();
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = SettingProperty.init(_:)(v2);
  *(_QWORD *)(v1 + 16) = result;
  off_100112190 = (_UNKNOWN *)v1;
  return result;
}

uint64_t BilingualFeedManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10000F1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Configurable.setting<A>(_:)(a1, a4, a5);
}

uint64_t sub_10000F1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Configurable.setting<A>(_:defaultValue:)(a1, a2, a5, a6);
}

uint64_t sub_10000F1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Configurable.setting<A>(_:_:)(a1, a2, a3, a6, a7);
}

uint64_t sub_10000F1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Configurable.setting<A>(_:defaultValue:_:)(a1, a2, a3, a4, a7, a8);
}

uint64_t sub_10000F204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Updatable.save<A>(setting:value:)(a1, a2, a5, a6);
}

uint64_t sub_10000F210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Updatable.reset<A>(setting:)(a1, a4, a5);
}

uint64_t sub_10000F220(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1001124C0 + dword_1001124C0);
  v2 = (_QWORD *)swift_task_alloc(unk_1001124C4);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_10000F27C;
  return v4();
}

uint64_t sub_10000F27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 24);
  v10 = *v4;
  swift_task_dealloc(v9);
  if (!v3)
  {
    v11 = *(_QWORD **)(v8 + 16);
    *v11 = a1;
    v11[1] = a2;
    v11[2] = a3;
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

unint64_t sub_10000F2F0()
{
  unint64_t result;

  result = qword_1001121D0;
  if (!qword_1001121D0)
  {
    result = swift_getWitnessTable(&unk_1000DBA28, &type metadata for ResetPrivacyIdentifierSettingEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1001121D0);
  }
  return result;
}

uint64_t sub_10000F334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000126C4();
  *v4 = v2;
  v4[1] = sub_10000F39C;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_10000F39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_10000F400()
{
  unint64_t result;

  result = qword_1001121E0;
  if (!qword_1001121E0)
  {
    result = swift_getWitnessTable(&unk_1000DBA80, &type metadata for ResetPrivacyIdentifierSettingEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1001121E0);
  }
  return result;
}

unint64_t sub_10000F448()
{
  unint64_t result;

  result = qword_1001121E8;
  if (!qword_1001121E8)
  {
    result = swift_getWitnessTable(&unk_1000DBAE0, &type metadata for ResetPrivacyIdentifierSettingEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1001121E8);
  }
  return result;
}

unint64_t sub_10000F490()
{
  unint64_t result;

  result = qword_1001121F0[0];
  if (!qword_1001121F0[0])
  {
    result = swift_getWitnessTable(&unk_1000DBC68, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, qword_1001121F0);
  }
  return result;
}

uint64_t sub_10000F4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000126C4();
  *v5 = v2;
  v5[1] = sub_10000F540;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_10000F540(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10000F594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_1000126C4();
  *v4 = v2;
  v4[1] = sub_100012708;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_10000F600()
{
  unint64_t result;

  result = qword_100112208;
  if (!qword_100112208)
  {
    result = swift_getWitnessTable(&unk_1000DBB08, &type metadata for ResetPrivacyIdentifierSettingEntityQuery);
    atomic_store(result, (unint64_t *)&qword_100112208);
  }
  return result;
}

unint64_t sub_10000F648()
{
  unint64_t result;

  result = qword_100112210;
  if (!qword_100112210)
  {
    result = swift_getWitnessTable(&unk_1000DBDE0, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100112210);
  }
  return result;
}

unint64_t sub_10000F690()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112218;
  if (!qword_100112218)
  {
    sub_10000F6F0();
    v2 = v1;
    sub_10000F648();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v2);
    atomic_store(result, (unint64_t *)&qword_100112218);
  }
  return result;
}

void sub_10000F6F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112220[0])
  {
    v0 = type metadata accessor for Array(0, &type metadata for ResetPrivacyIdentifierSettingEntity);
    if (!v1)
      atomic_store(v0, qword_100112220);
  }
}

uint64_t sub_10000F744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10000F2F0();
  *v5 = v2;
  v5[1] = sub_10000F0A8;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10000F7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000E914;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_10000F828()
{
  unint64_t result;

  result = qword_100112238;
  if (!qword_100112238)
  {
    result = swift_getWitnessTable(&unk_1000DBB94, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100112238);
  }
  return result;
}

uint64_t sub_10000F86C()
{
  return sub_100003D3C(&qword_100112240, (uint64_t (*)(uint64_t))sub_10000F898, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

void sub_10000F898(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  if (!qword_100112248)
  {
    sub_10000F94C(255);
    v5[0] = &type metadata for ResetPrivacyIdentifierSettingEntity;
    v5[1] = v2;
    v5[2] = &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value;
    v5[3] = sub_10000F490();
    v5[4] = sub_100003D3C(&qword_100112260, (uint64_t (*)(uint64_t))sub_10000F94C, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
    v5[5] = sub_10000FA08();
    v3 = type metadata accessor for _IntentUpdatableEntityProperty(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112248);
  }
}

void sub_10000F94C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100112250)
  {
    v4[0] = &type metadata for ResetPrivacyIdentifierSettingEntity;
    v4[1] = &type metadata for Bool;
    v4[2] = sub_10000F490();
    v4[3] = sub_10000F9C4();
    v2 = type metadata accessor for _EntityDeferredPropertyValue(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100112250);
  }
}

unint64_t sub_10000F9C4()
{
  unint64_t result;

  result = qword_100112258;
  if (!qword_100112258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_100112258);
  }
  return result;
}

unint64_t sub_10000FA08()
{
  unint64_t result;

  result = qword_100112268;
  if (!qword_100112268)
  {
    result = swift_getWitnessTable(&unk_1000DBB24, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100112268);
  }
  return result;
}

uint64_t sub_10000FA4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_100012608(0, &qword_1001122A8, (uint64_t (*)(void))sub_10000F104, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _UniqueEntityProvider);
  v1 = v0;
  sub_10001253C(v0, qword_100126730);
  sub_100012524(v1, (uint64_t)qword_100126730);
  v2 = sub_10000F104();
  return _UniqueEntityProvider.init(_:)(&unk_100112448, 0, &type metadata for ResetPrivacyIdentifierSettingEntity, v2);
}

uint64_t sub_10000FADC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = a1;
  v2 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000FB9C, 0, 0);
}

uint64_t sub_10000FB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD **)(v0 + 16);
  sub_10000F898(0);
  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000001000E5210);
  static Locale.current.getter(v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v1, 0, 0, v4, v3, "Title of the value of the 'Reset Privacy Identifier' Settings entity", 68, 2);
  v9 = sub_100003D3C(&qword_100112460, (uint64_t (*)(uint64_t))sub_10000F94C, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v10 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v2, &unk_100112450, 0, &unk_100112458, 0, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value, v9);
  *v7 = 0xD000000000000023;
  v7[1] = 0x80000001000DC150;
  v7[2] = v10;
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FD00()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001253C(v0, qword_100126748);
  sub_100012524(v0, (uint64_t)qword_100126748);
  return TypeDisplayRepresentation.init(stringLiteral:)(0xD000000000000018, 0x80000001000E5210);
}

uint64_t sub_10000FD60()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  sub_100007248(0, &qword_100112440, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - v1;
  sub_100007248(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - v4;
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v15 - v11;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x80000001000E5210);
  LocalizedStringResource.init(stringLiteral:)(0x9286E22073707041, 0xAF736B636F745320);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v13 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v2, 1, 1, v13);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x80000001000E5210);
  return DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v12, v5, v2, &_swiftEmptyArrayStorage, v10);
}

uint64_t sub_10000FF28(uint64_t a1)
{
  return sub_10000FF4C(a1, qword_100126760, 0xD00000000000001FLL, 0x80000001000E53A0);
}

uint64_t sub_10000FF4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for LocalizedStringResource(0);
  sub_10001253C(v7, a2);
  sub_100012524(v7, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

uint64_t sub_10000FFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100007248(0, &qword_1001124B0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v1 = v0;
  sub_10001253C(v0, qword_100126778);
  v2 = sub_100012524(v1, (uint64_t)qword_100126778);
  IntentDescription.init(stringLiteral:)(0xD000000000000045, 0x80000001000E5350);
  v3 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
}

uint64_t sub_10001003C()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1000DC250);
  qword_100126790 = result;
  return result;
}

uint64_t sub_100010060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_retain(a3);
}

uint64_t sub_100010068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  sub_100007248(0, &qword_100112480, (uint64_t (*)(uint64_t))&type metadata accessor for _GeneratedContentFallback);
  v3[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112488, (uint64_t (*)(uint64_t))&type metadata accessor for _GeneratedContentOptions);
  v3[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012590(0);
  v3[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IntentDialog(0);
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v3[28] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100112498, (uint64_t (*)(void))sub_10000F648, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentDialog._CapturedContent);
  v3[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[30] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v11);
  v3[32] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000101A4, 0, 0);
}

uint64_t sub_1000101A4()
{
  uint64_t v0;
  __int128 v1;
  _QWORD *v2;
  unint64_t v3;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 48) = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 264) = v2;
  v3 = sub_10000F490();
  *v2 = v0;
  v2[1] = sub_100010234;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 256), v0 + 40, sub_10001068C, 0, &type metadata for ResetPrivacyIdentifierSettingEntity, v3);
}

uint64_t sub_100010234()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  return swift_task_switch(sub_100010288, 0, 0);
}

uint64_t sub_100010288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)(v0 + 104) = v2;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 313));
  *(_BYTE *)(v0 + 312) = *(_BYTE *)(v0 + 313);
  if (qword_1001113F8 != -1)
    swift_once(&qword_1001113F8, sub_10001003C);
  v3 = qword_100126790;
  *(_QWORD *)(v0 + 288) = qword_100126790;
  v4 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 296) = v5;
  v6 = sub_100003D3C(&qword_100112460, (uint64_t (*)(uint64_t))sub_10000F94C, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v5 = v0;
  v5[1] = sub_10001038C;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 312, v3, &type metadata for Bool, v6);
}

uint64_t sub_10001038C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  if (v0)
    v6 = sub_100010600;
  else
    v6 = sub_100010414;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100010414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 200);
  v15 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 224);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 136));
  v6 = *(_OWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 120) = v6;
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = type metadata accessor for _GeneratedContentFallback(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  v9 = sub_10000F828();
  v10 = sub_10000F648();
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_10001068C, 0, v5, v4, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value, &type metadata for ResetPrivacyIdentifierSettingEntity, v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v13, v12);
  IntentDialog.init<A, B>(from:capturedContent:)(v3, v1, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value, &type metadata for ResetPrivacyIdentifierSettingEntity, v9, v10);
  static IntentResult.result<A>(value:dialog:)(v0 + 112, v14, &type metadata for ResetPrivacyIdentifierSettingEntity, v10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v1);
  swift_task_dealloc(v14);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(v2, *(_QWORD *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_100012608(0, &qword_1001124A0, (uint64_t (*)(void))sub_10000F648, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _NLGRepresentationEntity);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (char *)&v10 - v3;
  if (qword_1001113F8 != -1)
    swift_once(&qword_1001113F8, sub_10001003C);
  v5 = qword_100126790;
  v6 = swift_retain(qword_100126790);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v6);
  swift_release(v5);
  v7 = sub_10000F648();
  v8 = sub_100011154(&qword_1001124A8, &qword_1001124A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _NLGRepresentationEntity, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v4, &type metadata for ResetPrivacyIdentifierSettingEntity, v1, v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

__n128 sub_1000107B8@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;
  uint64_t v3;
  __n128 v4;

  IntentParameter.wrappedValue.getter(&v3);
  result = v4;
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000107F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];

  v1 = a1[1];
  v2 = a1[2];
  v4[0] = *a1;
  v4[1] = v1;
  v4[2] = v2;
  swift_bridgeObjectRetain(v1);
  swift_retain(v2);
  IntentParameter.wrappedValue.setter(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v1);
}

uint64_t (*sub_10001085C(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000108A4;
}

_QWORD *sub_1000108A8@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000108E0(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*sub_100010914(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000108A4;
}

uint64_t sub_10001095C()
{
  if (qword_1001113F8 != -1)
    swift_once(&qword_1001113F8, sub_10001003C);
  return swift_retain(qword_100126790);
}

unint64_t sub_1000109A0()
{
  unint64_t result;

  result = qword_100112270;
  if (!qword_100112270)
  {
    result = swift_getWitnessTable(&unk_1000DBC24, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100112270);
  }
  return result;
}

unint64_t sub_1000109E8()
{
  unint64_t result;

  result = qword_100112278;
  if (!qword_100112278)
  {
    result = swift_getWitnessTable(&unk_1000DBC4C, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_100112278);
  }
  return result;
}

uint64_t sub_100010A2C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000E807C, 1) + 8);
}

uint64_t sub_100010A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000115C8(a1, a2, a3, (uint64_t (*)(void))sub_10000F828);
}

uint64_t sub_100010A5C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_1001113E8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100126760, (uint64_t)sub_10000FF28, a1);
}

uint64_t sub_100010A90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1001113F0 != -1)
    swift_once(&qword_1001113F0, sub_10000FFA8);
  sub_100007248(0, &qword_1001124B0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v3 = sub_100012524(v2, (uint64_t)qword_100126778);
  return sub_100012670(v3, a1);
}

uint64_t sub_100010AFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_10011247C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000E914;
  return sub_100010068(a1, v5, v4);
}

uint64_t sub_100010B60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100011E7C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100010B84()
{
  return 0xD000000000000034;
}

unint64_t sub_100010BA4()
{
  unint64_t result;

  result = qword_100112288;
  if (!qword_100112288)
  {
    result = swift_getWitnessTable(&unk_1000DBCF0, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100112288);
  }
  return result;
}

unint64_t sub_100010BEC()
{
  unint64_t result;

  result = qword_100112290;
  if (!qword_100112290)
  {
    result = swift_getWitnessTable(&unk_1000DBD28, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100112290);
  }
  return result;
}

unint64_t sub_100010C34()
{
  unint64_t result;

  result = qword_100112298;
  if (!qword_100112298)
  {
    result = swift_getWitnessTable(&unk_1000DBD58, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100112298);
  }
  return result;
}

uint64_t sub_100010C78()
{
  return sub_100010F3C(&qword_1001122A0, (uint64_t)&protocol conformance descriptor for _UniqueEntityProvider<A>);
}

void *sub_100010C9C()
{
  return &protocol witness table for String;
}

uint64_t sub_100010CA8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100010CC0, 0, 0);
}

uint64_t sub_100010CC0()
{
  uint64_t v0;
  _BYTE *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1001113D0 != -1)
    swift_once(&qword_1001113D0, sub_10000F148);
  v1 = *(_BYTE **)(v0 + 16);
  v2 = off_100112190;
  v3 = *((_QWORD *)off_100112190 + 2);
  swift_retain(off_100112190);
  v4 = swift_retain(v3);
  SettingProperty.wrappedValue.getter(v4);
  swift_release(v3);
  swift_release(v2);
  *v1 = *(_BYTE *)(v0 + 24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010D64(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 17) = *a2;
  return swift_task_switch(sub_100010D80, 0, 0);
}

uint64_t sub_100010D80()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSString v4;

  if (qword_1001113D0 != -1)
    swift_once(&qword_1001113D0, sub_10000F148);
  v1 = off_100112190;
  v2 = *((_QWORD *)off_100112190 + 2);
  *(_BYTE *)(v0 + 16) = *(_BYTE *)(v0 + 17);
  swift_retain(v1);
  swift_retain(v2);
  SettingProperty.wrappedValue.setter(v0 + 16);
  swift_release(v2);
  swift_release(v1);
  v3 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "postNotificationName:object:userInfo:options:", v4, 0, 0, 1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010E88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1001113D8 != -1)
    swift_once(&qword_1001113D8, sub_10000FA4C);
  sub_100012608(0, &qword_1001122A8, (uint64_t (*)(void))sub_10000F104, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _UniqueEntityProvider);
  v3 = v2;
  v4 = sub_100012524(v2, (uint64_t)qword_100126730);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

uint64_t sub_100010F18()
{
  return sub_100010F3C(&qword_1001122B0, (uint64_t)&protocol conformance descriptor for _UniqueEntityProvider<A>);
}

uint64_t sub_100010F3C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_100012608(255, &qword_1001122A8, (uint64_t (*)(void))sub_10000F104, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _UniqueEntityProvider);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100010FA0()
{
  unint64_t result;

  result = qword_1001122B8;
  if (!qword_1001122B8)
  {
    result = swift_getWitnessTable(&unk_1000DBD90, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001122B8);
  }
  return result;
}

unint64_t sub_100010FE8()
{
  unint64_t result;

  result = qword_1001122C0;
  if (!qword_1001122C0)
  {
    result = swift_getWitnessTable(&unk_1000DBDB8, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001122C0);
  }
  return result;
}

unint64_t sub_100011030()
{
  unint64_t result;

  result = qword_1001122C8;
  if (!qword_1001122C8)
  {
    result = swift_getWitnessTable(&unk_1000DBE38, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001122C8);
  }
  return result;
}

void *sub_100011074()
{
  return &protocol witness table for String;
}

uint64_t sub_100011080@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001108C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_1001113E0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100126748, (uint64_t)sub_10000FD00, a1);
}

uint64_t sub_1000110B0@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_100012524(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_100011120()
{
  return sub_100011154(&qword_1001122D0, &qword_1001122D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EmptyResolverSpecification, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100011154(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_100012608(255, a2, (uint64_t (*)(void))sub_10000F648, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000111A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000F490();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000111E4()
{
  unint64_t result;

  result = qword_1001122E0;
  if (!qword_1001122E0)
  {
    result = swift_getWitnessTable(&unk_1000DBE68, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001122E0);
  }
  return result;
}

uint64_t sub_10001122C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100011030();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100011264()
{
  uint64_t v0;

  v0 = qword_100112198;
  swift_bridgeObjectRetain(off_1001121A0);
  return v0;
}

unint64_t sub_10001129C()
{
  unint64_t result;

  result = qword_1001122E8;
  if (!qword_1001122E8)
  {
    result = swift_getWitnessTable(&unk_1000DBEF8, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_1001122E8);
  }
  return result;
}

uint64_t sub_1000112E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000F490();
  return _EntityURLRepresentation.init(stringLiteral:)(0xD00000000000004CLL, 0x80000001000E51C0, a1, v2);
}

uint64_t sub_100011328(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000124E0();
  v4 = _URLRepresentableEntity.urlRepresentationParameter.getter(a1, v3);
  return sub_10001257C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_100011374()
{
  unint64_t result;

  result = qword_1001122F8;
  if (!qword_1001122F8)
  {
    result = swift_getWitnessTable(&unk_1000DBFF0, &type metadata for OpenResetPrivacyIdentifierSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1001122F8);
  }
  return result;
}

uint64_t sub_1000113B8(uint64_t a1)
{
  return sub_10000FF4C(a1, qword_100126798, 0xD000000000000025, 0x80000001000E5190);
}

void sub_1000113DC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_100011410()
{
  unint64_t result;

  result = qword_100112300;
  if (!qword_100112300)
  {
    result = swift_getWitnessTable(&unk_1000DC018, &type metadata for OpenResetPrivacyIdentifierSettingIntent);
    atomic_store(result, (unint64_t *)&qword_100112300);
  }
  return result;
}

unint64_t sub_100011458()
{
  unint64_t result;

  result = qword_100112308;
  if (!qword_100112308)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_100112308);
  }
  return result;
}

uint64_t sub_10001149C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100012458();
  v5 = sub_1000124E0();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_1000114F4()
{
  uint64_t v0;

  v0 = qword_1001121A8;
  swift_bridgeObjectRetain(off_1001121B0);
  return v0;
}

unint64_t sub_100011530()
{
  unint64_t result;

  result = qword_100112310;
  if (!qword_100112310)
  {
    result = swift_getWitnessTable(&unk_1000DC0A8, &type metadata for OpenResetPrivacyIdentifierSettingIntent);
    atomic_store(result, (unint64_t *)&qword_100112310);
  }
  return result;
}

unint64_t sub_100011578()
{
  unint64_t result;

  result = qword_100112318;
  if (!qword_100112318)
  {
    result = swift_getWitnessTable(&unk_1000DC0D0, &type metadata for OpenResetPrivacyIdentifierSettingIntent);
    atomic_store(result, (unint64_t *)&qword_100112318);
  }
  return result;
}

uint64_t sub_1000115BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000115C8(a1, a2, a3, (uint64_t (*)(void))sub_100011410);
}

uint64_t sub_1000115C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a4();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100011608@<X0>(uint64_t a1@<X8>)
{
  return sub_1000110B0(&qword_100111400, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100126798, (uint64_t)sub_1000113B8, a1);
}

uint64_t sub_10001162C()
{
  return 0;
}

uint64_t sub_100011634()
{
  return 1;
}

uint64_t sub_100011640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100012458();
  v7 = sub_10001249C();
  v8 = sub_1000124E0();
  *v5 = v2;
  v5[1] = sub_1000116CC;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000116CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_100011728@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000121F8();
  *a1 = result;
  return result;
}

uint64_t sub_10001174C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100011410();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t type metadata accessor for PrivacyIdentifierManager()
{
  return objc_opt_self(_TtC12StocksWidgetP33_FF27D8BF76F01AF2C9E2EE984262C66D24PrivacyIdentifierManager);
}

ValueMetadata *type metadata accessor for OpenResetPrivacyIdentifierSettingIntent()
{
  return &type metadata for OpenResetPrivacyIdentifierSettingIntent;
}

uint64_t destroy for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s12StocksWidget35ResetPrivacyIdentifierSettingEntityV18UpdateIntent_valueVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value()
{
  return &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value;
}

uint64_t destroy for ResetPrivacyIdentifierSettingEntity(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *_s12StocksWidget35ResetPrivacyIdentifierSettingEntityVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for ResetPrivacyIdentifierSettingEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for ResetPrivacyIdentifierSettingEntity(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for ResetPrivacyIdentifierSettingEntity(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResetPrivacyIdentifierSettingEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResetPrivacyIdentifierSettingEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResetPrivacyIdentifierSettingEntity()
{
  return &type metadata for ResetPrivacyIdentifierSettingEntity;
}

ValueMetadata *type metadata accessor for ResetPrivacyIdentifierSettingEntityQuery()
{
  return &type metadata for ResetPrivacyIdentifierSettingEntityQuery;
}

uint64_t sub_100011B08()
{
  return sub_100003D3C(&qword_1001123E8, (uint64_t (*)(uint64_t))sub_100011B34, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

void sub_100011B34(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_1001123F0)
  {
    v4[0] = &type metadata for ResetPrivacyIdentifierSettingEntity;
    v4[1] = &type metadata for Never;
    v4[2] = &type metadata for Never;
    v4[3] = type metadata accessor for IntentDialog(255);
    v4[4] = sub_10000F648();
    v4[5] = sub_100011BC4();
    v2 = type metadata accessor for IntentResultContainer(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1001123F0);
  }
}

unint64_t sub_100011BC4()
{
  unint64_t result;

  result = qword_1001123F8;
  if (!qword_1001123F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1001123F8);
  }
  return result;
}

uint64_t sub_100011C08()
{
  return sub_100003D3C(&qword_100112400, (uint64_t (*)(uint64_t))sub_100011B34, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100011C34()
{
  return sub_100003D3C(&qword_100112408, (uint64_t (*)(uint64_t))type metadata accessor for PrivacyIdentifierManager, (uint64_t)&unk_1000DC20C);
}

uint64_t sub_100011C60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v0[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  v0[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource(0);
  v0[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100011D1C, 0, 0);
}

uint64_t sub_100011D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  sub_10000F898(0);
  v7 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000001000E5210);
  static Locale.current.getter(v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v1, 0, 0, v4, v3, "Title of the value of the 'Reset Privacy Identifier' Settings entity", 68, 2);
  v8 = sub_100003D3C(&qword_100112460, (uint64_t (*)(uint64_t))sub_10000F94C, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v9 = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v2, &unk_100112450, 0, &unk_100112458, 0, &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value, v8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(v0 + 8))(0xD000000000000023, 0x80000001000DC150, v9);
}

uint64_t sub_100011E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD v34[3];

  sub_100007248(0, &qword_100112468, (uint64_t (*)(uint64_t))&type metadata accessor for Bool.IntentDisplayName);
  __chkstk_darwin(v0);
  v33 = (char *)&v27 - v1;
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v32 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112410, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  sub_100007248(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100112420, (uint64_t (*)(void))sub_10000F648, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentParameter);
  v28 = v18;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x80000001000E52E0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v30(v13, 1, 1, v14);
  v19 = type metadata accessor for IntentDialog(0);
  memset(v34, 0, sizeof(v34));
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v10, 1, 1, v19);
  v20(v8, 1, 1, v19);
  v21 = enum case for InputConnectionBehavior.default(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v22 = v32;
  v29(v32, enum case for InputConnectionBehavior.default(_:), v2);
  v23 = sub_10000F490();
  v28 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v17, v13, v34, v10, v8, v22, v23);
  sub_100012608(0, &qword_100112470, (uint64_t (*)(void))sub_10000F9C4, (uint64_t)&type metadata for Bool, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentParameter);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003ELL, 0x80000001000E5310);
  v30(v13, 1, 1, v31);
  LOBYTE(v34[0]) = 2;
  v24 = type metadata accessor for Bool.IntentDisplayName(0);
  v25 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v33, 1, 1, v24);
  v20(v10, 1, 1, v19);
  v29(v22, v21, v2);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v17, v13, v34, v25, v10, v22);
  return v28;
}

uint64_t sub_1000121F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _QWORD v22[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112410, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v22[-1] - v8;
  sub_100007248(0, &qword_100112418, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v10);
  v12 = (char *)&v22[-1] - v11;
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v22[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100112420, (uint64_t (*)(void))sub_10000F648, (uint64_t)&type metadata for ResetPrivacyIdentifierSettingEntity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IntentParameter);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x80000001000E5140);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x80000001000E5170);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v17 = type metadata accessor for IntentDialog(0);
  memset(v22, 0, sizeof(v22));
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10000F490();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v16, v12, v22, v9, v7, v3, v19);
}

unint64_t sub_100012458()
{
  unint64_t result;

  result = qword_100112428;
  if (!qword_100112428)
  {
    result = swift_getWitnessTable(&unk_1000DBF20, &type metadata for OpenResetPrivacyIdentifierSettingIntent);
    atomic_store(result, (unint64_t *)&qword_100112428);
  }
  return result;
}

unint64_t sub_10001249C()
{
  unint64_t result;

  result = qword_100112430;
  if (!qword_100112430)
  {
    result = swift_getWitnessTable(&unk_1000DBF70, &type metadata for OpenResetPrivacyIdentifierSettingIntent);
    atomic_store(result, (unint64_t *)&qword_100112430);
  }
  return result;
}

unint64_t sub_1000124E0()
{
  unint64_t result;

  result = qword_100112438;
  if (!qword_100112438)
  {
    result = swift_getWitnessTable(&unk_1000DBEC0, &type metadata for ResetPrivacyIdentifierSettingEntity);
    atomic_store(result, (unint64_t *)&qword_100112438);
  }
  return result;
}

uint64_t sub_100012524(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_10001253C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10001257C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

void sub_100012590(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100112490)
  {
    v4[0] = &type metadata for ResetPrivacyIdentifierSettingEntity.UpdateIntent_value;
    v4[1] = &type metadata for ResetPrivacyIdentifierSettingEntity;
    v4[2] = sub_10000F828();
    v4[3] = sub_10000F648();
    v2 = type metadata accessor for IntentDialog._GeneratedDialogContent(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100112490);
  }
}

void sub_100012608(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_100012664@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100012670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100007248(0, &qword_1001124B0, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000126C4()
{
  unint64_t result;

  result = qword_1001124B8;
  if (!qword_1001124B8)
  {
    result = swift_getWitnessTable(&unk_1000DB9B0, &type metadata for ResetPrivacyIdentifierSettingEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1001124B8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for QuoteDetailItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for QuoteDetailItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for QuoteDetailItem()
{
  return &type metadata for QuoteDetailItem;
}

BOOL sub_100012778(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10001278C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701667182;
  if (*v0 != 1)
    v1 = 0x65756C6176;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t sub_1000127D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100013580(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000127F4()
{
  return 0;
}

void sub_100012800(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10001280C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000138E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100012834(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000138E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001285C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  sub_100013924(0, &qword_1001124E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_1000138E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for QuoteDetailItem.CodingKeys, &type metadata for QuoteDetailItem.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v23, v6);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v22, v6);
    v17 = v3[4];
    v18 = v3[5];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v21, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int sub_1000129A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)(v8, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v8, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v8, v6, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100012A50(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v8, v7);
  return swift_bridgeObjectRelease(v7);
}

Swift::Int sub_100012AEC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v9, v7, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_100012B98(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1000134E0((uint64_t *)v7, v8) & 1;
}

unint64_t sub_100012BE0()
{
  unint64_t result;

  result = qword_1001124C8;
  if (!qword_1001124C8)
  {
    result = swift_getWitnessTable(&unk_1000DC2A8, &type metadata for QuoteDetailItem);
    atomic_store(result, (unint64_t *)&qword_1001124C8);
  }
  return result;
}

double sub_100012C24@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1000136A4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100012C64(_QWORD *a1)
{
  return sub_10001285C(a1);
}

uint64_t sub_100012C78@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE v26[129];
  _OWORD v27[6];
  _OWORD v28[2];
  _OWORD v29[8];
  char v30;
  _OWORD v31[9];
  char v32;

  v24 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001413C(0);
  v10 = v9;
  v21 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static VerticalAlignment.center.getter(v11);
  sub_100012F08(v1, (uint64_t)v27);
  *(_OWORD *)((char *)&v29[4] + 7) = v27[4];
  *(_OWORD *)((char *)&v29[5] + 7) = v27[5];
  *(_OWORD *)((char *)&v29[6] + 7) = v28[0];
  v29[7] = *(_OWORD *)((char *)v28 + 9);
  *(_OWORD *)((char *)v29 + 7) = v27[0];
  *(_OWORD *)((char *)&v29[1] + 7) = v27[1];
  *(_OWORD *)((char *)&v29[2] + 7) = v27[2];
  *(_OWORD *)((char *)&v29[3] + 7) = v27[3];
  *(_OWORD *)&v26[65] = v29[4];
  *(_OWORD *)&v26[81] = v29[5];
  *(_OWORD *)&v26[97] = v29[6];
  *(_OWORD *)&v26[113] = *(_OWORD *)((char *)v28 + 9);
  *(_OWORD *)&v26[1] = v29[0];
  *(_OWORD *)&v26[17] = v29[1];
  *(_OWORD *)&v26[33] = v29[2];
  v30 = 1;
  v25 = (unint64_t)v14;
  v26[0] = 1;
  *(_OWORD *)&v26[49] = v29[3];
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DynamicTypeSize.large(_:), v5);
  sub_1000141C8(0);
  v16 = v15;
  v17 = sub_100003D3C(&qword_100112588, (uint64_t (*)(uint64_t))sub_1000141C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.dynamicTypeSize(_:)(v8, v16, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v31[6] = *(_OWORD *)&v26[80];
  v31[7] = *(_OWORD *)&v26[96];
  v31[8] = *(_OWORD *)&v26[112];
  v32 = v26[128];
  v31[2] = *(_OWORD *)&v26[16];
  v31[3] = *(_OWORD *)&v26[32];
  v31[4] = *(_OWORD *)&v26[48];
  v31[5] = *(_OWORD *)&v26[64];
  v31[0] = v25;
  v31[1] = *(_OWORD *)v26;
  v18 = sub_100014408((uint64_t)v31);
  static AccessibilityChildBehavior.combine.getter(v18);
  *(_QWORD *)&v25 = v16;
  *((_QWORD *)&v25 + 1) = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  View.accessibilityElement(children:)(v4, v10, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v10);
}

uint64_t sub_100012F08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  char v66;
  char v67;

  v3 = a1[3];
  v51 = a1[5];
  v52 = a1[4];
  v58 = a1[2];
  v59 = v3;
  v50 = sub_1000144A0();
  swift_bridgeObjectRetain(v3);
  v4 = Text.init<A>(_:)(&v58, &type metadata for String, v50);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Font.caption2.getter();
  static Font.Weight.medium.getter();
  v12 = Font.weight(_:)(v11);
  swift_release(v11);
  v13 = Text.font(_:)(v12, v4, v6, v10, v8);
  v15 = v14;
  LOBYTE(v11) = v16;
  v18 = v17;
  swift_release(v12);
  sub_100014490(v4, v6, v10);
  v19 = swift_bridgeObjectRelease(v8);
  LODWORD(v58) = static HierarchicalShapeStyle.secondary.getter(v19);
  v20 = Text.foregroundStyle<A>(_:)(&v58, v13, v15, v11 & 1, v18, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v55 = v21;
  v56 = v20;
  v57 = v22;
  v53 = v23 & 1;
  sub_100014490(v13, v15, v11 & 1);
  swift_bridgeObjectRelease(v18);
  KeyPath = swift_getKeyPath(&unk_1000DC588);
  v58 = v52;
  v59 = v51;
  swift_bridgeObjectRetain(v51);
  v24 = Text.init<A>(_:)(&v58, &type metadata for String, v50);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v31 = static Font.caption2.getter();
  static Font.Weight.medium.getter();
  v32 = Font.weight(_:)(v31);
  swift_release(v31);
  v33 = Text.font(_:)(v32, v24, v26, v30, v28);
  v35 = v34;
  LOBYTE(v31) = v36;
  v38 = v37;
  swift_release(v32);
  LOBYTE(v32) = v31 & 1;
  sub_100014490(v24, v26, v30);
  v39 = swift_bridgeObjectRelease(v28);
  LODWORD(v58) = static HierarchicalShapeStyle.secondary.getter(v39);
  v40 = Text.foregroundStyle<A>(_:)(&v58, v33, v35, v31 & 1, v38, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v42 = v41;
  v44 = v43;
  LOBYTE(v31) = v45 & 1;
  sub_100014490(v33, v35, v32);
  swift_bridgeObjectRelease(v38);
  v46 = swift_getKeyPath(&unk_1000DC588);
  v67 = v53;
  v66 = 0;
  v64 = 0;
  v62 = v31;
  v60 = 0;
  *(_DWORD *)(a2 + 17) = v58;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v58 + 3);
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v65;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v65[3];
  v47 = *(_DWORD *)v63;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a2 + 65) = v47;
  v48 = *(_DWORD *)v61;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a2 + 89) = v48;
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = v55;
  *(_BYTE *)(a2 + 16) = v53;
  *(_QWORD *)(a2 + 24) = v57;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0x4014000000000000;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v40;
  *(_QWORD *)(a2 + 80) = v42;
  *(_BYTE *)(a2 + 88) = v31;
  *(_QWORD *)(a2 + 96) = v44;
  *(_QWORD *)(a2 + 104) = v46;
  *(_QWORD *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  sub_1000144EC(v56, v55, v53);
  swift_bridgeObjectRetain(v57);
  swift_retain(KeyPath);
  sub_1000144EC(v40, v42, v31);
  swift_bridgeObjectRetain(v44);
  swift_retain(v46);
  sub_100014490(v40, v42, v31);
  swift_release(v46);
  swift_bridgeObjectRelease(v44);
  sub_100014490(v56, v55, v53);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v57);
}

uint64_t sub_10001329C@<X0>(uint64_t a1@<X8>)
{
  return sub_100012C78(a1);
}

uint64_t sub_1000132D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_100013318()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100013330@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v19[1] = a1;
  v20 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013BDC(0);
  v6 = v5;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0x4000000000000000;
  v9[16] = 0;
  sub_100013DE0(0);
  v21 = v10;
  sub_1000143C4(0, (unint64_t *)&qword_100112510, (uint64_t)&type metadata for QuoteDetailItem, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
  v12 = v11;
  v13 = sub_100013CDC();
  v14 = sub_100013D9C();
  v15 = sub_100013E44();
  swift_bridgeObjectRetain(v10);
  v16 = ForEach<>.init(_:content:)(&v21, sub_1000132D4, 0, v12, &type metadata for String, &type metadata for QuoteDetailItemView, v13, v14, v15);
  static AccessibilityChildBehavior.contain.getter(v16);
  v17 = sub_100003D3C(&qword_100112540, (uint64_t (*)(uint64_t))sub_100013BDC, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v4, v6, v17);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  return sub_100013E88((uint64_t)v9);
}

uint64_t sub_1000134E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      v16 = a1[4];
      v17 = a1[5];
      v18 = a2[4];
      v19 = a2[5];
      if (v16 == v18 && v17 == v19)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
    }
  }
  return result;
}

uint64_t sub_100013580(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000136A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  sub_100013924(0, &qword_1001124D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_1000138E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for QuoteDetailItem.CodingKeys, &type metadata for QuoteDetailItem.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_100007164(a1);
  v31 = 0;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v6);
  v15 = v14;
  v28 = v13;
  v30 = 1;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v6);
  v18 = v17;
  v26 = v16;
  v29 = 2;
  swift_bridgeObjectRetain(v17);
  v27 = v18;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v6);
  v21 = v20;
  v22 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain(v21);
  sub_100007164(a1);
  swift_bridgeObjectRelease(v21);
  v23 = v27;
  swift_bridgeObjectRelease(v27);
  result = swift_bridgeObjectRelease(v15);
  *a2 = v28;
  a2[1] = v15;
  a2[2] = v26;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v21;
  return result;
}

unint64_t sub_1000138E0()
{
  unint64_t result;

  result = qword_1001124D8;
  if (!qword_1001124D8)
  {
    result = swift_getWitnessTable(&unk_1000DC45C, &type metadata for QuoteDetailItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001124D8);
  }
  return result;
}

void sub_100013924(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1000138E0();
    v7 = a3(a1, &type metadata for QuoteDetailItem.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t getEnumTagSinglePayload for QuoteDetailItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for QuoteDetailItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100013A5C + 4 * byte_1000DC285[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100013A90 + 4 * byte_1000DC280[v4]))();
}

uint64_t sub_100013A90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100013A98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100013AA0);
  return result;
}

uint64_t sub_100013AAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100013AB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100013AB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100013AC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100013ACC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for QuoteDetailItem.CodingKeys()
{
  return &type metadata for QuoteDetailItem.CodingKeys;
}

unint64_t sub_100013AE8()
{
  unint64_t result;

  result = qword_1001124E8;
  if (!qword_1001124E8)
  {
    result = swift_getWitnessTable(&unk_1000DC434, &type metadata for QuoteDetailItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001124E8);
  }
  return result;
}

unint64_t sub_100013B30()
{
  unint64_t result;

  result = qword_1001124F0;
  if (!qword_1001124F0)
  {
    result = swift_getWitnessTable(&unk_1000DC3A4, &type metadata for QuoteDetailItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001124F0);
  }
  return result;
}

unint64_t sub_100013B78()
{
  unint64_t result;

  result = qword_1001124F8;
  if (!qword_1001124F8)
  {
    result = swift_getWitnessTable(&unk_1000DC3CC, &type metadata for QuoteDetailItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001124F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuoteDetailsView()
{
  return &type metadata for QuoteDetailsView;
}

uint64_t sub_100013BCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8138, 1);
}

void sub_100013BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112500)
  {
    sub_100013C3C(255);
    v3 = v2;
    v4 = sub_100013D3C();
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112500);
  }
}

void sub_100013C3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (!qword_100112508)
  {
    sub_1000143C4(255, (unint64_t *)&qword_100112510, (uint64_t)&type metadata for QuoteDetailItem, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v5[0] = v2;
    v5[1] = &type metadata for String;
    v5[2] = &type metadata for QuoteDetailItemView;
    v5[3] = sub_100013CDC();
    v5[4] = &protocol witness table for String;
    v3 = type metadata accessor for ForEach(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112508);
  }
}

unint64_t sub_100013CDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112518;
  if (!qword_100112518)
  {
    sub_1000143C4(255, (unint64_t *)&qword_100112510, (uint64_t)&type metadata for QuoteDetailItem, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100112518);
  }
  return result;
}

unint64_t sub_100013D3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112520;
  if (!qword_100112520)
  {
    sub_100013C3C(255);
    v2 = v1;
    sub_100013D9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
    atomic_store(result, (unint64_t *)&qword_100112520);
  }
  return result;
}

unint64_t sub_100013D9C()
{
  unint64_t result;

  result = qword_100112528;
  if (!qword_100112528)
  {
    result = swift_getWitnessTable(&unk_1000DC534, &type metadata for QuoteDetailItemView);
    atomic_store(result, (unint64_t *)&qword_100112528);
  }
  return result;
}

void sub_100013DE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112530)
  {
    sub_100013C3C(255);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v2, &protocol witness table for _VStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112530);
  }
}

unint64_t sub_100013E44()
{
  unint64_t result;

  result = qword_100112538;
  if (!qword_100112538)
  {
    result = swift_getWitnessTable(&unk_1000DC310, &type metadata for QuoteDetailItem);
    atomic_store(result, (unint64_t *)&qword_100112538);
  }
  return result;
}

uint64_t sub_100013E88(uint64_t a1)
{
  uint64_t v2;

  sub_100013BDC(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s12StocksWidget15QuoteDetailItemVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *_s12StocksWidget15QuoteDetailItemVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *_s12StocksWidget15QuoteDetailItemVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *_s12StocksWidget15QuoteDetailItemVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t _s12StocksWidget15QuoteDetailItemVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100014070(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuoteDetailItemView()
{
  return &type metadata for QuoteDetailItemView;
}

uint64_t sub_1000140CC()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_100013BDC(255);
  v2[0] = v0;
  v2[1] = sub_100003D3C(&qword_100112540, (uint64_t (*)(uint64_t))sub_100013BDC, (uint64_t)&protocol conformance descriptor for VStack<A>);
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_10001412C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8160, 1);
}

void sub_10001413C(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100112548)
  {
    sub_1000141C8(255);
    v5[0] = v2;
    v5[1] = sub_100003D3C(&qword_100112588, (uint64_t (*)(uint64_t))sub_1000141C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100112548);
  }
}

void sub_1000141C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112550)
  {
    sub_100014240(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100112580, (uint64_t (*)(uint64_t))sub_100014240, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112550);
  }
}

void sub_100014240(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112558)
  {
    sub_100014294(255);
    v3 = type metadata accessor for TupleView(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112558);
  }
}

void sub_100014294(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!qword_100112560)
  {
    sub_1000142FC(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for Spacer, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100112560);
  }
}

void sub_1000142FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112568)
  {
    sub_100014358(255);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Text, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112568);
  }
}

void sub_100014358(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112570)
  {
    sub_1000143C4(255, &qword_100112578, (uint64_t)&type metadata for Int, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    v3 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112570);
  }
}

void sub_1000143C4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_100014408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  sub_100014490(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_100014490(v4, v5, v6);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100014490(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

unint64_t sub_1000144A0()
{
  unint64_t result;

  result = qword_100112590;
  if (!qword_100112590)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100112590);
  }
  return result;
}

uint64_t sub_1000144EC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000144FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;

  sub_10001413C(255);
  v1 = v0;
  sub_1000141C8(255);
  v5 = v2;
  v6 = sub_100003D3C(&qword_100112588, (uint64_t (*)(uint64_t))sub_1000141C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_100014588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000145C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000145F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10001463C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100014680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000146C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100014708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100014714);
}

uint64_t sub_100014714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100014750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001475C);
}

uint64_t sub_10001475C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DetailTimelineProvider(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001125F0, (uint64_t)&nominal type descriptor for DetailTimelineProvider);
}

uint64_t sub_1000147B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001481C()
{
  return sub_100003D3C(&qword_100112628, type metadata accessor for DetailTimelineEntry, (uint64_t)&unk_1000DDF50);
}

uint64_t sub_100014838()
{
  return sub_100003D3C(qword_100112630, (uint64_t (*)(uint64_t))&type metadata accessor for SymbolWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for SymbolWidgetConfigurationIntent);
}

_QWORD *sub_100014864(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v32 = _swiftEmptyArrayStorage;
    sub_1000737D8(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = (char *)(a3 + 32);
    while (1)
    {
      v9 = *v8++;
      v25 = v9;
      a1(&v26, &v25);
      if (v4)
        break;
      v4 = 0;
      v11 = v26;
      v10 = v27;
      v13 = v28;
      v12 = v29;
      v14 = v30;
      v15 = v31;
      v32 = v6;
      v17 = v6[2];
      v16 = v6[3];
      if (v17 >= v16 >> 1)
      {
        v19 = v27;
        v22 = v30;
        v23 = v29;
        v21 = v31;
        sub_1000737D8(v16 > 1, v17 + 1, 1);
        v15 = v21;
        v14 = v22;
        v12 = v23;
        v10 = v19;
        v6 = v32;
      }
      v6[2] = v17 + 1;
      v18 = &v6[6 * v17];
      v18[4] = v11;
      v18[5] = v10;
      v18[6] = v13;
      v18[7] = v12;
      v18[8] = v14;
      v18[9] = v15;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

_QWORD *sub_100014994(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for WidgetStock(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_100073748(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(type metadata accessor for Stock(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_100073748(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_10000ED3C((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, type metadata accessor for WidgetStock);
      v13 += v18;
      if (!--v10)
        return v11;
    }
    swift_release(v11);
  }
  return v11;
}

_QWORD *sub_100014B08(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  result = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    v9 = *(_QWORD *)(type metadata accessor for PreparedSparkline.Entry(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      v12 = a1(&v16, v10);
      if (v4)
        break;
      v4 = 0;
      v13 = v16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = v17[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
      specialized ContiguousArray._endMutation()(v15);
      v10 += v11;
      if (!--v6)
        return v17;
    }
    return (_QWORD *)swift_release(v17);
  }
  return result;
}

uint64_t sub_100014C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_10001D7CC(0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IntentSystemContext(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SymbolWidgetEntity(0);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v4[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D7E8(0);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100014D04, 0, 0);
}

uint64_t sub_100014D04()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *object;
  int8x16_t *v33;
  int8x16_t **v34;
  uint64_t v35;
  uint64_t v37;
  int8x16_t v38;

  v1 = v0[8].i64[0];
  v2 = v0[6].i64[1];
  v3 = v0[7].i64[0];
  SymbolWidgetConfigurationIntent.stock.getter();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[8].i64[0];
  if (v4)
  {
    sub_10001DF70(v0[8].i64[0], (uint64_t (*)(_QWORD))sub_10001D7E8);
    v6 = (void *)0xE300000000000000;
    v7 = 7104878;
  }
  else
  {
    v9 = v0[7].i64[0];
    v8 = v0[7].i64[1];
    v10 = v0[6].i64[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v0[8].i64[0], v10);
    v11 = sub_10001DF70(v5, (uint64_t (*)(_QWORD))sub_10001D7E8);
    v7 = SymbolWidgetEntity.symbol.getter(v11);
    v6 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  v13 = v0[5].i64[1];
  v37 = v0[5].i64[0];
  v14 = v0[4].i64[0];
  v15 = v0[4].i64[1];
  v16 = v0[3].i64[0];
  v17 = v0[3].i64[1];
  v18._countAndFlagsBits = v7;
  v18._object = v6;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v6);
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = type metadata accessor for SymbolWidgetConfigurationIntent(0);
  v21 = sub_100003D3C(&qword_1001126E0, (uint64_t (*)(uint64_t))&type metadata accessor for SymbolWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for SymbolWidgetConfigurationIntent);
  v22 = AppIntent.systemContext.getter(v20, v21);
  IntentSystemContext.preciseTimestamp.getter(v22);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v17);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1, v37);
  v24 = v0[6].i64[0];
  if (v23 == 1)
  {
    v25 = v0[3].i64[0];
    static Date.now.getter(v24);
    sub_10001DF70(v25, (uint64_t (*)(_QWORD))sub_10001D7CC);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[5].i64[1] + 32))(v24, v0[3].i64[0], v0[5].i64[0]);
  }
  v27 = v0[5].i64[1];
  v26 = v0[6].i64[0];
  v28 = v0[5].i64[0];
  v29 = v0[1].i64[1];
  v30 = sub_100003D3C(&qword_1001126E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v38 = v0[2];
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v30);
  object = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  v0[8].i64[1] = 0xE700000000000000;
  v33 = (int8x16_t *)swift_task_alloc(64);
  v0[9].i64[0] = (uint64_t)v33;
  v33[1].i64[0] = 0x2D6C6F626D7973;
  v33[1].i64[1] = 0xE700000000000000;
  v33[2] = vextq_s8(v38, v38, 8uLL);
  v33[3].i64[0] = v29;
  v34 = (int8x16_t **)swift_task_alloc(async function pointer to withOSActivity<A>(_:operation:)[1]);
  v0[9].i64[1] = (uint64_t)v34;
  v35 = type metadata accessor for DetailTimelineEntry(0);
  *v34 = v0;
  v34[1] = (int8x16_t *)sub_100014FC8;
  return withOSActivity<A>(_:operation:)(v0[1].i64[0], "Symbol Widget Snapshot", 22, 2, &unk_1001126F8, v33, v35);
}

uint64_t sub_100014FC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(*v0 + 144);
  v3 = *(_QWORD *)(*v0 + 128);
  v2 = *(_QWORD *)(*v0 + 136);
  v4 = *(_QWORD *)(*v0 + 120);
  v5 = *(_QWORD *)(*v0 + 96);
  v6 = *(_QWORD *)(*v0 + 72);
  v7 = *(_QWORD *)(*v0 + 48);
  v9 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_100015074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  return swift_task_switch(sub_100015094, 0, 0);
}

uint64_t sub_100015094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (qword_100111468 != -1)
    swift_once(&qword_100111468, sub_10002DFB0);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 80) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 32) = v1;
  v4 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
  swift_bridgeObjectRetain(v2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 88) = v5;
  type metadata accessor for DetailTimelineEntry(0);
  *v5 = v0;
  v5[1] = sub_1000151A4;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(*(_QWORD *)(v0 + 32), v0 + 16, &unk_100112708, v3, 0, 0, 0xD000000000000029, 0x80000001000E53E0);
}

uint64_t sub_1000151A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000151FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = type metadata accessor for DetailTimelineProvider.Configuration(0);
  v4[11] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v6);
  v4[13] = swift_task_alloc(v6);
  v7 = type metadata accessor for WidgetFamily(0);
  v4[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[15] = v8;
  v4[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimelineProviderContext(0);
  v4[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[18] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v11);
  v4[20] = swift_task_alloc(v11);
  v12 = type metadata accessor for Logger(0);
  v4[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[22] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v14);
  v4[24] = swift_task_alloc(v14);
  v4[25] = swift_task_alloc(v14);
  return swift_task_switch(sub_100015310, 0, 0);
}

uint64_t sub_100015310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  __n128 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v49;
  os_log_type_t type;
  uint64_t v51;
  uint64_t v52;
  NSObject *log;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v58 = v0 + 48;
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 16);
  *(_QWORD *)(v0 + 208) = v4;
  v5 = v4(v1, v3, v2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v59 = v10;
    *(_DWORD *)v9 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v11 = *(_QWORD *)(v0 + 176);
    v54 = *(_QWORD *)(v0 + 168);
    v56 = *(_QWORD *)(v0 + 200);
    TaskLocal.get()((_QWORD *)(v0 + 16));
    v12 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 48) = sub_10007ECFC(*(_QWORD *)(v0 + 16), v12, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v0 + 56, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Starting snapshot fetch, id=%s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, &type metadata for Any[8]);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v56, v54);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 200);
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 176);

    v13 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v13(v14, v15);
  }
  v57 = v13;
  *(_QWORD *)(v0 + 216) = v13;
  v17 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 72);
  v4(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 168));
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v22(v17, v21, v20);
  v23 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v22)(v18, v21, v20);
  v24 = Logger.logObject.getter(v23);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v24, v26);
  v28 = *(_QWORD *)(v0 + 192);
  v29 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 168);
  v31 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 152);
  v33 = *(_QWORD *)(v0 + 136);
  if (v27)
  {
    log = v24;
    v55 = *(_QWORD *)(v0 + 192);
    v34 = *(_QWORD *)(v0 + 128);
    v49 = *(_QWORD *)(v0 + 120);
    v35 = *(_QWORD *)(v0 + 112);
    v36 = swift_slowAlloc(18, -1);
    v52 = swift_slowAlloc(32, -1);
    v59 = v52;
    *(_DWORD *)v36 = 136315394;
    type = v26;
    TimelineProviderContext.family.getter(v52);
    v37 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v35, v37);
    v51 = v30;
    v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v34, v35);
    *(_QWORD *)(v0 + 40) = sub_10007ECFC(v38, v40, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v58, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v40);
    v41 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    v42 = v41(v29, v33);
    *(_WORD *)(v36 + 12) = 1024;
    v43 = TimelineProviderContext.isPreview.getter(v42) & 1;
    v41(v32, v33);
    *(_DWORD *)(v0 + 240) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 244, v36 + 14, v36 + 18);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Snapshot context. family: %s, isPreview: %{BOOL}d", (uint8_t *)v36, 0x12u);
    swift_arrayDestroy(v52, 1, &type metadata for Any[8]);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v44 = v55;
    v45 = v51;
  }
  else
  {
    v46 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v46(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    v46(v29, v33);

    v44 = v28;
    v45 = v30;
  }
  v57(v44, v45);
  v47 = (_QWORD *)swift_task_alloc(dword_100112714);
  *(_QWORD *)(v0 + 224) = v47;
  *v47 = v0;
  v47[1] = sub_100015744;
  return sub_100015A90(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100015744()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_100015798, 0, 0);
}

uint64_t sub_100015798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  __n128 v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 168));
  v3 = sub_10001DE2C(v1, v2, type metadata accessor for DetailTimelineProvider.Configuration);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    v19 = *(_QWORD *)(v0 + 184);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v7 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = NewsDisplayConfiguration.rawValue.getter();
    v13 = v12;
    *(_QWORD *)(v0 + 32) = sub_10007ECFC(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    sub_10001DF70(v8, type metadata accessor for DetailTimelineProvider.Configuration);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Resolved configuration. newsDisplayConfiguration: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, &type metadata for Any[8]);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v20(v19, v7);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    sub_10001DF70(*(_QWORD *)(v0 + 96), type metadata accessor for DetailTimelineProvider.Configuration);

    v14(v15, v16);
  }
  v17 = (_QWORD *)swift_task_alloc(dword_10011271C);
  *(_QWORD *)(v0 + 232) = v17;
  *v17 = v0;
  v17[1] = sub_100015994;
  return sub_1000166D0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100015994()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_task_switch(sub_1000159E8, 0, 0);
}

uint64_t sub_1000159E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  sub_10001DF70(v7, type metadata accessor for DetailTimelineProvider.Configuration);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for NewsDisplayConfiguration(0);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[15] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v8);
  v3[17] = swift_task_alloc(v8);
  sub_10001D7E8(0);
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[18] = swift_task_alloc(v10);
  v3[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for SymbolWidgetEntity(0);
  v3[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[21] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v13);
  v3[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_100015B94, 0, 0);
}

uint64_t sub_100015B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 192) = static SymbolWidgetEntity.defaultQuery.getter();
  SymbolWidgetConfigurationIntent.stock.getter();
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 200) = v4;
  if (v4(v3, 1, v1) == 1)
  {
    v6 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 80);
    sub_10001DF70(*(_QWORD *)(v0 + 152), (uint64_t (*)(_QWORD))sub_10001D7E8);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v40 = v13;
      *(_DWORD *)v12 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v14 = *(_QWORD *)(v0 + 120);
      v38 = *(_QWORD *)(v0 + 112);
      v39 = *(_QWORD *)(v0 + 128);
      TaskLocal.get()((_QWORD *)(v0 + 16));
      v15 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 48) = sub_10007ECFC(*(_QWORD *)(v0 + 16), v15, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Malformed widget configuration, id=%s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, &type metadata for Any[8]);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v39, v38);
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 120);
      v25 = *(_QWORD *)(v0 + 128);
      v27 = *(_QWORD *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    }
    v29 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    v30 = *(char **)(v0 + 64);
    swift_release(*(_QWORD *)(v0 + 192));
    v31 = type metadata accessor for DetailTimelineProvider.Configuration(0);
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(&v30[*(int *)(v31 + 20)], enum case for NewsDisplayConfiguration.afterHours(_:), v29);
    *(_QWORD *)v30 = 1280328001;
    *((_QWORD *)v30 + 1) = 0xE400000000000000;
    v32 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 144);
    v33 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 136);
    v37 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 152);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
    *(_QWORD *)(v0 + 208) = v19;
    v19(v16, v18, v17);
    sub_10001DEA0();
    v21 = swift_allocObject(v20, 48, 7);
    *(_QWORD *)(v0 + 216) = v21;
    *(_OWORD *)(v21 + 16) = xmmword_1000DB170;
    *(_QWORD *)(v21 + 32) = SymbolWidgetEntity.identifier.getter();
    *(_QWORD *)(v21 + 40) = v22;
    v23 = (_QWORD *)swift_task_alloc(async function pointer to SymbolWidgetQuery.entities(for:)[1]);
    *(_QWORD *)(v0 + 224) = v23;
    *v23 = v0;
    v23[1] = sub_100015EC8;
    return SymbolWidgetQuery.entities(for:)(v21);
  }
}

uint64_t sub_100015EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  *(_QWORD *)(*(_QWORD *)v2 + 232) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_10001644C;
  }
  else
  {
    v5 = sub_100015F44;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100015F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 232);
  if (*(_QWORD *)(v1 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 16))(*(_QWORD *)(v0 + 144), v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80)), *(_QWORD *)(v0 + 160));
    v2 = 0;
    v1 = *(_QWORD *)(v0 + 232);
  }
  else
  {
    v2 = 1;
  }
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 56))(v5, v2, 1, v4);
  swift_bridgeObjectRelease(v1);
  if (v3(v5, 1, v4) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
    v7 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 80);
    sub_10001DF70(*(_QWORD *)(v0 + 144), (uint64_t (*)(_QWORD))sub_10001D7E8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v66 = v14;
      *(_DWORD *)v13 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v58 = *(_QWORD *)(v0 + 120);
      v60 = *(_QWORD *)(v0 + 112);
      v63 = *(_QWORD *)(v0 + 128);
      TaskLocal.get()((_QWORD *)(v0 + 16));
      v15 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 48) = sub_10007ECFC(*(_QWORD *)(v0 + 16), v15, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Malformed widget configuration, id=%s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, &type metadata for Any[8]);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v63, v60);
    }
    else
    {
      v30 = *(_QWORD *)(v0 + 120);
      v29 = *(_QWORD *)(v0 + 128);
      v31 = *(_QWORD *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    }
    v33 = *(_QWORD *)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 96);
    v34 = *(char **)(v0 + 64);
    swift_release(*(_QWORD *)(v0 + 192));
    v35 = type metadata accessor for DetailTimelineProvider.Configuration(0);
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(&v34[*(int *)(v35 + 20)], enum case for NewsDisplayConfiguration.afterHours(_:), v33);
    *(_QWORD *)v34 = 1280328001;
    *((_QWORD *)v34 + 1) = 0xE400000000000000;
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 208))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 160));
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v19, v17);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v66 = v25;
      *(_DWORD *)v24 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v26 = *(_QWORD *)(v0 + 120);
      v61 = *(_QWORD *)(v0 + 112);
      v64 = *(_QWORD *)(v0 + 136);
      TaskLocal.get()((_QWORD *)(v0 + 32));
      v27 = *(_QWORD *)(v0 + 40);
      *(_QWORD *)(v0 + 56) = sub_10007ECFC(*(_QWORD *)(v0 + 32), v27, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "Successfully loaded widget entity, id=%s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, &type metadata for Any[8]);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v64, v61);
    }
    else
    {
      v36 = *(_QWORD *)(v0 + 136);
      v37 = *(_QWORD *)(v0 + 112);
      v38 = *(_QWORD *)(v0 + 120);

      v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    }
    v39 = *(_QWORD *)(v0 + 192);
    v40 = *(_QWORD *)(v0 + 176);
    v57 = *(_QWORD *)(v0 + 168);
    v59 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 104);
    v43 = *(_QWORD *)(v0 + 80);
    v62 = *(_QWORD *)(v0 + 96);
    v65 = *(_QWORD *)(v0 + 88);
    v44 = *(uint64_t **)(v0 + 64);
    v45 = SymbolWidgetEntity.symbol.getter(v28);
    v47 = v46;
    sub_10001CB40(v43, v42);
    swift_release(v39);
    v48 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v48(v40, v41);
    v48(v59, v41);
    *v44 = v45;
    v44[1] = v47;
    v49 = type metadata accessor for DetailTimelineProvider.Configuration(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))((char *)v44 + *(int *)(v49 + 20), v42, v65);
  }
  v50 = *(_QWORD *)(v0 + 176);
  v52 = *(_QWORD *)(v0 + 144);
  v51 = *(_QWORD *)(v0 + 152);
  v54 = *(_QWORD *)(v0 + 128);
  v53 = *(_QWORD *)(v0 + 136);
  v55 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001644C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 160));
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  sub_10001DF70(*(_QWORD *)(v0 + 144), (uint64_t (*)(_QWORD))sub_10001D7E8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v28 = v9;
    *(_DWORD *)v8 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v10 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 128);
    TaskLocal.get()((_QWORD *)(v0 + 16));
    v11 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 48) = sub_10007ECFC(*(_QWORD *)(v0 + 16), v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Malformed widget configuration, id=%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v27, v26);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 112);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(char **)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 192));
  v18 = type metadata accessor for DetailTimelineProvider.Configuration(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(&v17[*(int *)(v18 + 20)], enum case for NewsDisplayConfiguration.afterHours(_:), v16);
  *(_QWORD *)v17 = 1280328001;
  *((_QWORD *)v17 + 1) = 0xE400000000000000;
  v19 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000166D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4[447] = v3;
  v4[446] = a3;
  v4[445] = a2;
  v4[444] = a1;
  v5 = type metadata accessor for WidgetFamily(0);
  v4[448] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[449] = v6;
  v4[450] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  v4[451] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DetailContentViewModel(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[452] = swift_task_alloc(v8);
  v4[453] = swift_task_alloc(v8);
  v9 = type metadata accessor for HeadlineViewModel(0);
  v4[454] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v4[455] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[456] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[457] = swift_task_alloc(v12);
  v4[458] = swift_task_alloc(v12);
  sub_10001D6B0(0);
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[459] = swift_task_alloc(v14);
  v4[460] = swift_task_alloc(v14);
  v4[461] = swift_task_alloc(v14);
  v15 = type metadata accessor for Date(0);
  v4[462] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[463] = v16;
  v4[464] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v4[465] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[466] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[467] = swift_task_alloc(v19);
  v4[468] = swift_task_alloc(v19);
  v4[469] = swift_task_alloc(v19);
  v4[470] = swift_task_alloc(v19);
  v4[471] = swift_task_alloc(v19);
  v4[472] = swift_task_alloc(v19);
  v4[473] = swift_task_alloc(v19);
  v4[474] = swift_task_alloc(v19);
  v20 = type metadata accessor for WidgetStock(0);
  v4[475] = v20;
  v21 = (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[476] = swift_task_alloc(v21);
  v4[477] = swift_task_alloc(v21);
  v4[478] = swift_task_alloc(v21);
  v4[479] = swift_task_alloc(v21);
  v22 = type metadata accessor for TimelineProviderContext(0);
  v4[480] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[481] = v23;
  v24 = *(_QWORD *)(v23 + 64);
  v4[482] = v24;
  v4[483] = swift_task_alloc((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider(0) - 8);
  v4[484] = v25;
  v26 = *(_QWORD *)(v25 + 64);
  v4[485] = v26;
  v4[486] = swift_task_alloc((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D8FC(0);
  v4[487] = v27;
  v4[488] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v27 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider.Configuration(0) - 8);
  v4[489] = v28;
  v29 = *(_QWORD *)(v28 + 64);
  v4[490] = v29;
  v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[491] = swift_task_alloc(v30);
  v4[492] = swift_task_alloc(v30);
  v31 = type metadata accessor for QuoteDetail(0);
  v4[493] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v4[494] = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[495] = swift_task_alloc(v33);
  v4[496] = swift_task_alloc(v33);
  v4[497] = swift_task_alloc(v33);
  v34 = type metadata accessor for PriceChangeDisplay(0);
  v4[498] = v34;
  v35 = *(_QWORD *)(v34 - 8);
  v4[499] = v35;
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[500] = swift_task_alloc(v36);
  v4[501] = swift_task_alloc(v36);
  v4[502] = swift_task_alloc(v36);
  v4[503] = swift_task_alloc(v36);
  v37 = type metadata accessor for MainActor(0);
  v4[504] = static MainActor.shared.getter(v37);
  v38 = dispatch thunk of Actor.unownedExecutor.getter(v37, &protocol witness table for MainActor);
  v4[505] = v38;
  v4[506] = v39;
  return swift_task_switch(sub_100016AB0, v38, v39);
}

uint64_t sub_100016AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 3096);
  v1 = *(_QWORD *)(v0 + 3120);
  v2 = *(_QWORD *)(v0 + 3128);
  sub_100007184((_QWORD *)(v0 + 3096), v1);
  v3 = sub_100003AE0(0, (unint64_t *)&unk_100113DB0, (uint64_t)&protocol descriptor for QuoteDetailItemFactoryType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (!*(_QWORD *)(v0 + 3000))
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_10001D968((__int128 *)(v0 + 2976), v0 + 3176);
  sub_100007164((_QWORD *)(v0 + 3096));
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 2056);
  v5 = *(_QWORD *)(v0 + 2080);
  v6 = *(_QWORD *)(v0 + 2088);
  sub_100007184((_QWORD *)(v0 + 2056), v5);
  v7 = sub_100003AE0(0, &qword_100113ED0, (uint64_t)&protocol descriptor for WatchlistManagerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (!*(_QWORD *)(v0 + 2160))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  sub_10001D968((__int128 *)(v0 + 2136), v0 + 1976);
  sub_100007164((_QWORD *)(v0 + 2056));
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 2296);
  v8 = *(_QWORD *)(v0 + 2320);
  v9 = *(_QWORD *)(v0 + 2328);
  sub_100007184((_QWORD *)(v0 + 2296), v8);
  v10 = sub_100003AE0(0, &qword_100112730, (uint64_t)&protocol descriptor for QuoteDetailManagerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!*(_QWORD *)(v0 + 2400))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_10001D968((__int128 *)(v0 + 2376), v0 + 2216);
  sub_100007164((_QWORD *)(v0 + 2296));
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 2536);
  v11 = *(_QWORD *)(v0 + 2560);
  v12 = *(_QWORD *)(v0 + 2568);
  sub_100007184((_QWORD *)(v0 + 2536), v11);
  v13 = sub_100003AE0(0, &qword_100112738, (uint64_t)&protocol descriptor for TodayViewModelServiceType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!*(_QWORD *)(v0 + 2640))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_10001D968((__int128 *)(v0 + 2616), v0 + 2456);
  sub_100007164((_QWORD *)(v0 + 2536));
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 2776);
  v14 = *(_QWORD *)(v0 + 2800);
  v15 = *(_QWORD *)(v0 + 2808);
  sub_100007184((_QWORD *)(v0 + 2776), v14);
  v16 = sub_100003AE0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!*(_QWORD *)(v0 + 2880))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  sub_10001D968((__int128 *)(v0 + 2856), v0 + 2696);
  sub_100007164((_QWORD *)(v0 + 2776));
  type metadata accessor for SettingReader(0);
  v17 = static SettingReader.shared.getter();
  if (qword_100111538 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v32 = *(_QWORD *)(v0 + 4024);
  v18 = *(_QWORD *)(v0 + 3984);
  v35 = *(_QWORD *)(v0 + 3944);
  v36 = *(_QWORD *)(v0 + 3976);
  v38 = *(_QWORD *)(v0 + 3928);
  v19 = *(_QWORD *)(v0 + 3920);
  v33 = *(_QWORD *)(v0 + 3936);
  v34 = *(_QWORD *)(v0 + 3912);
  v47 = *(_QWORD *)(v0 + 3904);
  v41 = *(_QWORD *)(v0 + 3888);
  v45 = *(_QWORD *)(v0 + 3880);
  v46 = *(_QWORD *)(v0 + 3896);
  v43 = *(_QWORD *)(v0 + 3872);
  v48 = *(_QWORD *)(v0 + 3864);
  v44 = *(_QWORD *)(v0 + 3856);
  v42 = *(_QWORD *)(v0 + 3840);
  v37 = *(_QWORD *)(v0 + 3576);
  v39 = *(_QWORD *)(v0 + 3848);
  v40 = *(_QWORD *)(v0 + 3568);
  v20 = *(_QWORD *)(v0 + 3560);
  SettingReader.read<A>(_:)(static Settings.UserPreferences.showCurrency);
  swift_release(v17);
  *(_BYTE *)(v0 + 4133) = *(_BYTE *)(v0 + 4132);
  sub_10001DB68(v0 + 1976, v0 + 2936);
  v21 = swift_allocObject(&unk_1001048B0, 56, 7);
  *(_QWORD *)(v0 + 4056) = v21;
  sub_10001D968((__int128 *)(v0 + 2936), v21 + 16);
  swift_retain(v21);
  swift_asyncLet_begin(v0 + 1296, 0, v18, &unk_100112750, v21, v32);
  sub_10001DB68(v0 + 2696, v0 + 3016);
  sub_10001DB68(v0 + 2216, v0 + 3056);
  sub_10001DE2C(v20, v33, type metadata accessor for DetailTimelineProvider.Configuration);
  v22 = *(unsigned __int8 *)(v34 + 80);
  v23 = (v22 + 96) & ~v22;
  v24 = v22 | 7;
  v25 = swift_allocObject(&unk_1001048D8, v23 + v19, v22 | 7);
  *(_QWORD *)(v0 + 4064) = v25;
  sub_10001D968((__int128 *)(v0 + 3016), v25 + 16);
  sub_10001D968((__int128 *)(v0 + 3056), v25 + 56);
  sub_10000ED3C(v33, v25 + v23, type metadata accessor for DetailTimelineProvider.Configuration);
  swift_retain(v25);
  swift_asyncLet_begin(v0 + 656, 0, v35, &unk_100112760, v25, v36);
  sub_10001DB68(v0 + 2456, v0 + 3136);
  sub_10001DE2C(v20, v38, type metadata accessor for DetailTimelineProvider.Configuration);
  sub_10001DE2C(v37, v41, type metadata accessor for DetailTimelineProvider);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v48, v40, v42);
  v26 = (v22 + 56) & ~v22;
  v27 = *(unsigned __int8 *)(v43 + 80);
  v28 = (v26 + v19 + v27) & ~v27;
  v29 = *(unsigned __int8 *)(v39 + 80);
  v30 = (v45 + v29 + v28) & ~v29;
  v31 = swift_allocObject(&unk_100104900, v30 + v44, v24 | v27 | v29);
  *(_QWORD *)(v0 + 4072) = v31;
  sub_10001D968((__int128 *)(v0 + 3136), v31 + 16);
  sub_10000ED3C(v38, v31 + v26, type metadata accessor for DetailTimelineProvider.Configuration);
  sub_10000ED3C(v41, v31 + v28, type metadata accessor for DetailTimelineProvider);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v31 + v30, v48, v42);
  swift_retain(v31);
  swift_asyncLet_begin(v0 + 16, 0, v46, &unk_100112770, v31, v47);
  return swift_asyncLet_get_throwing(v0 + 16, *(_QWORD *)(v0 + 3904), sub_100017100, v0 + 2016);
}

uint64_t sub_100017100()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();

  v1[510] = v0;
  if (v0)
    v2 = sub_1000187C0;
  else
    v2 = sub_100017128;
  return swift_task_switch(v2, v1[505], v1[506]);
}

uint64_t sub_100017128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  __n128 v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 3832);
  v2 = *(_QWORD *)(v0 + 3824);
  v3 = *(_QWORD *)(v0 + 3816);
  v4 = *(_QWORD *)(v0 + 3792);
  v5 = *(_QWORD *)(v0 + 3728);
  v6 = *(_QWORD *)(v0 + 3720);
  v7 = *(_QWORD *)(v0 + 3576);
  sub_10001DE2C(*(_QWORD *)(v0 + 3904), v1, type metadata accessor for WidgetStock);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 4088) = v8;
  v8(v4, v7, v6);
  sub_10001DE2C(v1, v2, type metadata accessor for WidgetStock);
  v9 = sub_10001DE2C(v1, v3, type metadata accessor for WidgetStock);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = *(_QWORD *)(v0 + 3824);
    v14 = *(_QWORD *)(v0 + 3816);
    v15 = swift_slowAlloc(32, -1);
    v34 = swift_slowAlloc(64, -1);
    v35 = v34;
    *(_DWORD *)v15 = 136315650;
    v16 = Stock.symbol.getter();
    v18 = v17;
    *(_QWORD *)(v0 + 3528) = sub_10007ECFC(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3528, v0 + 3536, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v18);
    sub_10001DF70(v13, type metadata accessor for WidgetStock);
    *(_WORD *)(v15 + 12) = 2048;
    v19 = sub_1000B57BC();
    v21 = v20;
    swift_bridgeObjectRelease(v22);
    v23 = *(double *)&v19;
    if ((v21 & 1) != 0)
      v23 = 0.0;
    *(double *)(v0 + 3536) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3536, v0 + 3544, v15 + 14, v15 + 22);
    sub_10001DF70(v14, type metadata accessor for WidgetStock);
    *(_WORD *)(v15 + 22) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v24 = *(_QWORD *)(v0 + 3792);
    v25 = *(_QWORD *)(v0 + 3728);
    v26 = *(_QWORD *)(v0 + 3720);
    TaskLocal.get()((_QWORD *)(v0 + 3392));
    v27 = *(_QWORD *)(v0 + 3400);
    *(_QWORD *)(v0 + 3448) = sub_10007ECFC(*(_QWORD *)(v0 + 3392), v27, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3448, v0 + 3456, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Fetched stockViewModel=%s, price=%f id=%s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v34, 2, &type metadata for Any[8]);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v28(v24, v26);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 3816);
    v30 = *(_QWORD *)(v0 + 3792);
    v31 = *(_QWORD *)(v0 + 3728);
    v32 = *(_QWORD *)(v0 + 3720);
    sub_10001DF70(*(_QWORD *)(v0 + 3824), type metadata accessor for WidgetStock);
    sub_10001DF70(v29, type metadata accessor for WidgetStock);

    v28 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v28(v30, v32);
  }
  *(_QWORD *)(v0 + 4096) = v28;
  return swift_asyncLet_get(v0 + 656, *(_QWORD *)(v0 + 3976), sub_100017434, v0 + 2736);
}

uint64_t sub_100017434()
{
  uint64_t v0;

  return swift_task_switch(sub_100017448, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_100017448()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  __n128 v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[511];
  v2 = v0[496];
  v3 = v0[495];
  v4 = v0[493];
  v5 = v0[473];
  v6 = v0[465];
  v7 = v0[447];
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[494] + 16);
  v8(v2, v0[497], v4);
  v1(v5, v7, v6);
  v9 = v8(v3, v2, v4);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v10, v12))
  {
    v31 = v12;
    v13 = v0[495];
    v28 = v0[494];
    v29 = v0[493];
    v14 = v0[464];
    v15 = v0[463];
    v16 = v0[462];
    v17 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v32 = v30;
    *(_DWORD *)v17 = 136315394;
    QuoteDetail.dateLastRefreshed.getter();
    v18 = Date.formatted()();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v0[438] = sub_10007ECFC(v18._countAndFlagsBits, (unint64_t)v18._object, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 438, v0 + 439, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v18._object);
    v19 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v19(v13, v29);
    *(_WORD *)(v17 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v20 = (void (*)(uint64_t, uint64_t))v0[512];
    v21 = v0[473];
    v22 = v0[465];
    TaskLocal.get()(v0 + 414);
    v23 = v0[415];
    v0[440] = sub_10007ECFC(v0[414], v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 441, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v10, v31, "Fetched quoteDetail, dateLastRefreshed=%s, id=%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v30, 2, &type metadata for Any[8]);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v20(v21, v22);
  }
  else
  {
    v24 = (void (*)(uint64_t, uint64_t))v0[512];
    v25 = v0[473];
    v26 = v0[465];
    v19 = *(void (**)(uint64_t, uint64_t))(v0[494] + 8);
    v19(v0[495], v0[493]);

    v24(v25, v26);
  }
  v0[513] = v19;
  return swift_asyncLet_get_throwing(v0 + 2, v0[488], sub_10001771C, v0 + 352);
}

uint64_t sub_10001771C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;

  v1[514] = v0;
  if (v0)
    v2 = sub_100018DD4;
  else
    v2 = sub_100017744;
  return swift_task_switch(v2, v1[505], v1[506]);
}

_QWORD *sub_100017744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  __n128 v25;
  os_log_type_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *result;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  os_log_t loga;
  NSObject *log;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(uint64_t, os_log_t);
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;

  v1 = *(_QWORD *)(v0 + 3688);
  v2 = *(_QWORD *)(v0 + 3680);
  v3 = *(_QWORD *)(v0 + 3648);
  v4 = *(_QWORD *)(v0 + 3640);
  sub_10001DE2C(*(_QWORD *)(v0 + 3904) + *(int *)(*(_QWORD *)(v0 + 3896) + 48), v1, (uint64_t (*)(_QWORD))sub_10001D6B0);
  sub_10001DE2C(v1, v2, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 4088);
  v7 = *(_QWORD *)(v0 + 3720);
  if (v5 == 1)
  {
    v8 = *(_QWORD *)(v0 + 3768);
    v9 = *(_QWORD *)(v0 + 3576);
    sub_10001DF70(*(_QWORD *)(v0 + 3680), (uint64_t (*)(_QWORD))sub_10001D6B0);
    v10 = v6(v8, v9, v7);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(32, -1);
      v95 = v15;
      *(_DWORD *)v14 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v90 = *(_QWORD *)(v0 + 3768);
      v92 = *(void (**)(uint64_t, os_log_t))(v0 + 4096);
      loga = *(os_log_t *)(v0 + 3720);
      TaskLocal.get()((_QWORD *)(v0 + 3344));
      v16 = *(_QWORD *)(v0 + 3352);
      *(_QWORD *)(v0 + 3456) = sub_10007ECFC(*(_QWORD *)(v0 + 3344), v16, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3456, v0 + 3464, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Fetched no headlines, id=%s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, &type metadata for Any[8]);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v92(v90, loga);
    }
    else
    {
      v47 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
      v48 = *(_QWORD *)(v0 + 3768);
      v49 = *(_QWORD *)(v0 + 3720);

      v47(v48, v49);
    }
  }
  else
  {
    v93 = (_QWORD *)(v0 + 3464);
    v17 = *(_QWORD *)(v0 + 3776);
    v18 = *(_QWORD *)(v0 + 3664);
    v19 = *(_QWORD *)(v0 + 3656);
    v20 = *(_QWORD *)(v0 + 3648);
    v21 = *(_QWORD *)(v0 + 3640);
    v22 = *(_QWORD *)(v0 + 3576);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 32))(v18, *(_QWORD *)(v0 + 3680), v21);
    v6(v17, v22, v7);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v24, v26))
    {
      v84 = v26;
      log = v24;
      v27 = *(_QWORD *)(v0 + 3640);
      v28 = (_DWORD *)swift_slowAlloc(22, -1);
      v83 = swift_slowAlloc(64, -1);
      v94 = v83;
      *v28 = 136315394;
      v29 = sub_10001DDC4();
      v30 = dispatch thunk of Collection.count.getter(v27, v29);
      v32 = _swiftEmptyArrayStorage;
      v86 = v28;
      if (v30)
      {
        v33 = v30;
        v34 = *(_QWORD *)(v0 + 3640);
        v95 = _swiftEmptyArrayStorage;
        sub_100073774(0, v30 & ~(v30 >> 63), 0);
        v35 = v0 + 3464;
        result = dispatch thunk of Collection.startIndex.getter(v93, v34, v29);
        if (v33 < 0)
        {
          __break(1u);
          return result;
        }
        v37 = *(_QWORD *)(v0 + 3632);
        v91 = v29;
        do
        {
          v38 = *(_QWORD *)(v0 + 3632);
          v39 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v0 + 3216, v35, *(_QWORD *)(v0 + 3640), v29);
          sub_10001DE2C(v40, v38, type metadata accessor for HeadlineViewModel);
          v39(v0 + 3216, 0);
          v42 = *(_QWORD *)(v37 + 64);
          v41 = *(_QWORD *)(v37 + 72);
          swift_bridgeObjectRetain(v41);
          sub_10001DF70(v38, type metadata accessor for HeadlineViewModel);
          v32 = v95;
          if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
          {
            sub_100073774(0, v95[2] + 1, 1);
            v32 = v95;
          }
          v44 = v32[2];
          v43 = v32[3];
          if (v44 >= v43 >> 1)
          {
            sub_100073774(v43 > 1, v44 + 1, 1);
            v32 = v95;
          }
          v45 = *(_QWORD *)(v0 + 3640);
          v32[2] = v44 + 1;
          v46 = &v32[2 * v44];
          v46[4] = v42;
          v46[5] = v41;
          v29 = v91;
          v35 = v0 + 3464;
          dispatch thunk of Collection.formIndex(after:)(v93, v45, v91);
          --v33;
        }
        while (v33);
      }
      v58 = *(_QWORD *)(v0 + 3656);
      v59 = *(_QWORD *)(v0 + 3648);
      v60 = *(_QWORD *)(v0 + 3640);
      v61 = Array.description.getter(v31);
      v63 = v62;
      swift_bridgeObjectRelease(v32);
      *(_QWORD *)(v0 + 3480) = sub_10007ECFC(v61, v63, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3480, v0 + 3488, v86 + 1, v86 + 3);
      swift_bridgeObjectRelease(v63);
      v64 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v64(v58, v60);
      *((_WORD *)v86 + 6) = 2080;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v65 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
      v66 = *(_QWORD *)(v0 + 3776);
      v67 = *(_QWORD *)(v0 + 3720);
      v68 = *(_QWORD *)(v0 + 3664);
      v69 = *(_QWORD *)(v0 + 3640);
      TaskLocal.get()((_QWORD *)(v0 + 3296));
      v70 = *(_QWORD *)(v0 + 3304);
      *(_QWORD *)(v0 + 3496) = sub_10007ECFC(*(_QWORD *)(v0 + 3296), v70, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3496, v0 + 3504, (char *)v86 + 14, (char *)v86 + 22);
      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, log, v84, "Fetched headlines=%s, id=%s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v83, 2, &type metadata for Any[8]);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v65(v66, v67);
      v64(v68, v69);
    }
    else
    {
      v50 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
      v51 = *(_QWORD *)(v0 + 3776);
      v52 = *(_QWORD *)(v0 + 3720);
      v53 = *(_QWORD *)(v0 + 3664);
      v54 = *(_QWORD *)(v0 + 3656);
      v55 = *(_QWORD *)(v0 + 3648);
      v56 = *(_QWORD *)(v0 + 3640);

      v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v57(v54, v56);
      v50(v51, v52);
      v57(v53, v56);
    }
  }
  v71 = *(_QWORD *)(v0 + 3832);
  v72 = *(_QWORD *)(v0 + 3800);
  sub_10001DE2C(v71, *(_QWORD *)(v0 + 3808), type metadata accessor for WidgetStock);
  v73 = sub_100007184((_QWORD *)(v0 + 3176), *(_QWORD *)(v0 + 3200));
  v74 = *(int *)(v72 + 20);
  *(_DWORD *)(v0 + 4128) = v74;
  v75 = *v73;
  if (qword_100111520 != -1)
    swift_once(&qword_100111520, sub_10008F424);
  v76 = v71 + v74;
  v77 = *(_QWORD *)(v0 + 3968);
  v78 = *(_QWORD *)(v0 + 3688);
  v79 = *(_QWORD *)(v0 + 3672);
  v85 = *(_QWORD *)(v0 + 3624);
  v87 = *(_QWORD *)(v0 + 3808);
  v80 = qword_100116478;
  v81 = (_QWORD *)swift_task_alloc(48);
  v81[2] = v75;
  v81[3] = v76;
  v81[4] = v77;
  swift_bridgeObjectRetain(v80);
  v82 = sub_100014864((void (*)(uint64_t *__return_ptr, char *))sub_10001DDA4, (uint64_t)v81, v80);
  swift_bridgeObjectRelease(v80);
  swift_task_dealloc(v81);
  sub_10001DE2C(v78, v79, (uint64_t (*)(_QWORD))sub_10001D6B0);
  sub_100095528(v87, (uint64_t)v82, v79, v85);
  return (_QWORD *)swift_asyncLet_get_throwing(v0 + 1296, *(_QWORD *)(v0 + 4024), sub_100017EAC, v0 + 2496);
}

uint64_t sub_100017EAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();

  v1[515] = v0;
  if (v0)
    v2 = sub_10001943C;
  else
    v2 = sub_100017ED4;
  return swift_task_switch(v2, v1[505], v1[506]);
}

uint64_t sub_100017ED4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  __n128 v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;

  v1 = v0 + 3432;
  v61 = v0 + 3440;
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 4088);
  v3 = *(_QWORD *)(v0 + 4016);
  v4 = *(_QWORD *)(v0 + 4008);
  v5 = *(_QWORD *)(v0 + 3984);
  v6 = *(_QWORD *)(v0 + 3760);
  v7 = *(_QWORD *)(v0 + 3720);
  v8 = *(_QWORD *)(v0 + 3576);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 3992) + 16);
  v9(v3, *(_QWORD *)(v0 + 4024), v5);
  v2(v6, v8, v7);
  v10 = v9(v4, v3, v5);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = *(_QWORD *)(v0 + 4008);
    v15 = *(_QWORD *)(v0 + 3992);
    v16 = *(_QWORD *)(v0 + 3984);
    v17 = swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(32, -1);
    v62 = v58;
    *(_DWORD *)v17 = 134218242;
    v18 = PriceChangeDisplay.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    *(_QWORD *)(v0 + 3424) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3424, v1, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
    v20 = *(_QWORD *)(v0 + 3760);
    v21 = *(_QWORD *)(v0 + 3720);
    TaskLocal.get()((_QWORD *)(v0 + 3376));
    v22 = *(_QWORD *)(v0 + 3384);
    *(_QWORD *)(v0 + 3440) = sub_10007ECFC(*(_QWORD *)(v0 + 3376), v22, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v0 + 3448, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "Fetched priceChangeDisplay=%ld, id=%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v58, 1, &type metadata for Any[8]);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v19(v20, v21);
    v1 = v0 + 3432;
  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
    v24 = *(_QWORD *)(v0 + 3760);
    v25 = *(_QWORD *)(v0 + 3720);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 3992) + 8))(*(_QWORD *)(v0 + 4008), *(_QWORD *)(v0 + 3984));

    v23(v24, v25);
  }
  v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 4088))(*(_QWORD *)(v0 + 3752), *(_QWORD *)(v0 + 3576), *(_QWORD *)(v0 + 3720));
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v27, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v62 = v31;
    *(_DWORD *)v30 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v59 = *(_QWORD *)(v0 + 3752);
    v60 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
    v32 = *(_QWORD *)(v0 + 3720);
    TaskLocal.get()((_QWORD *)(v0 + 3360));
    v33 = *(_QWORD *)(v0 + 3368);
    *(_QWORD *)(v0 + 3432) = sub_10007ECFC(*(_QWORD *)(v0 + 3360), v33, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v61, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "Successfully created timeline entry, id=%s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, &type metadata for Any[8]);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v60(v59, v32);
  }
  else
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
    v35 = *(_QWORD *)(v0 + 3752);
    v36 = *(_QWORD *)(v0 + 3720);

    v34(v35, v36);
  }
  v37 = *(_QWORD *)(v0 + 4016);
  v38 = *(_QWORD *)(v0 + 4000);
  v39 = *(_QWORD *)(v0 + 3992);
  v40 = *(_QWORD *)(v0 + 3984);
  v52 = *(_QWORD *)(v0 + 3944);
  v53 = *(_QWORD *)(v0 + 3968);
  v41 = *(_QWORD *)(v0 + 3712);
  v54 = *(_QWORD *)(v0 + 3704);
  v55 = *(void (**)(uint64_t, uint64_t))(v0 + 4104);
  v50 = *(_QWORD *)(v0 + 3688);
  v51 = *(_QWORD *)(v0 + 3832);
  v42 = *(_QWORD *)(v0 + 3624);
  v56 = *(_QWORD *)(v0 + 3696);
  v57 = *(_QWORD *)(v0 + 3616);
  v43 = *(_QWORD *)(v0 + 3608);
  v44 = v51 + *(int *)(v0 + 4128);
  v45 = *(_QWORD *)(v0 + 3552);
  sub_10001DE2C(v42, v57, type metadata accessor for DetailContentViewModel);
  sub_10001DE2C(v44, v43, (uint64_t (*)(_QWORD))sub_10001D694);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v37, v40);
  Date.init()(v46);
  v47 = v39;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v40);
  sub_10001DF70(v42, type metadata accessor for DetailContentViewModel);
  sub_10001DF70(v50, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v55(v53, v52);
  sub_10001DF70(v51, type metadata accessor for WidgetStock);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v45, v41, v56);
  v48 = (int *)type metadata accessor for DetailTimelineEntry(0);
  sub_10000ED3C(v57, v45 + v48[5], type metadata accessor for DetailContentViewModel);
  sub_10000ED3C(v43, v45 + v48[6], (uint64_t (*)(_QWORD))sub_10001D694);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v45 + v48[7], v38, v40);
  *(_BYTE *)(v45 + v48[8]) = 0;
  *(_BYTE *)(v45 + v48[9]) = 0;
  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 3904), sub_100018458, v0 + 2416);
}

uint64_t sub_100018458()
{
  uint64_t v0;

  return swift_task_switch(sub_10001846C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_10001846C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4072));
  return swift_asyncLet_finish(v0 + 656, *(_QWORD *)(v0 + 3976), sub_1000184B4, v0 + 2336);
}

uint64_t sub_1000184B4()
{
  uint64_t v0;

  return swift_task_switch(sub_1000184C8, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_1000184C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4064));
  return swift_asyncLet_finish(v0 + 1296, *(_QWORD *)(v0 + 4024), sub_100018510, v0 + 1936);
}

uint64_t sub_100018510()
{
  uint64_t v0;

  return swift_task_switch(sub_100018524, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_100018524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 4056);
  swift_release(*(_QWORD *)(v0 + 4032));
  sub_100007164((_QWORD *)(v0 + 2696));
  sub_100007164((_QWORD *)(v0 + 2456));
  sub_100007164((_QWORD *)(v0 + 2216));
  sub_100007164((_QWORD *)(v0 + 1976));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 4072);
  v3 = *(_QWORD *)(v0 + 4064);
  v4 = *(_QWORD *)(v0 + 4056);
  v5 = *(_QWORD *)(v0 + 4024);
  v6 = *(_QWORD *)(v0 + 4016);
  v7 = *(_QWORD *)(v0 + 4008);
  v8 = *(_QWORD *)(v0 + 4000);
  v9 = *(_QWORD *)(v0 + 3976);
  v11 = *(_QWORD *)(v0 + 3968);
  v12 = *(_QWORD *)(v0 + 3960);
  v13 = *(_QWORD *)(v0 + 3936);
  v14 = *(_QWORD *)(v0 + 3928);
  v15 = *(_QWORD *)(v0 + 3904);
  v16 = *(_QWORD *)(v0 + 3888);
  v17 = *(_QWORD *)(v0 + 3864);
  v18 = *(_QWORD *)(v0 + 3832);
  v19 = *(_QWORD *)(v0 + 3824);
  v20 = *(_QWORD *)(v0 + 3816);
  v21 = *(_QWORD *)(v0 + 3808);
  v22 = *(_QWORD *)(v0 + 3792);
  v23 = *(_QWORD *)(v0 + 3784);
  v24 = *(_QWORD *)(v0 + 3776);
  v25 = *(_QWORD *)(v0 + 3768);
  v26 = *(_QWORD *)(v0 + 3760);
  v27 = *(_QWORD *)(v0 + 3752);
  v28 = *(_QWORD *)(v0 + 3744);
  v29 = *(_QWORD *)(v0 + 3736);
  v30 = *(_QWORD *)(v0 + 3712);
  v31 = *(_QWORD *)(v0 + 3688);
  v32 = *(_QWORD *)(v0 + 3680);
  v33 = *(_QWORD *)(v0 + 3672);
  v34 = *(_QWORD *)(v0 + 3664);
  v35 = *(_QWORD *)(v0 + 3656);
  v36 = *(_QWORD *)(v0 + 3632);
  v37 = *(_QWORD *)(v0 + 3624);
  v38 = *(_QWORD *)(v0 + 3616);
  v39 = *(_QWORD *)(v0 + 3608);
  v40 = *(_QWORD *)(v0 + 3600);
  sub_100007164((_QWORD *)(v0 + 3176));
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000187C0()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 3904), sub_1000187D8, v0 + 2096);
}

uint64_t sub_1000187D8()
{
  uint64_t v0;

  return swift_task_switch(sub_1000187EC, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_1000187EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4072));
  return swift_asyncLet_finish(v0 + 656, *(_QWORD *)(v0 + 3976), sub_100018834, v0 + 2176);
}

uint64_t sub_100018834()
{
  uint64_t v0;

  return swift_task_switch(sub_100018848, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_100018848()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4064));
  return swift_asyncLet_finish(v0 + 1296, *(_QWORD *)(v0 + 4024), sub_100018890, v0 + 2256);
}

uint64_t sub_100018890()
{
  uint64_t v0;

  return swift_task_switch(sub_1000188A4, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_1000188A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];

  v1 = *(_QWORD *)(v0 + 4080);
  v2 = *(_QWORD *)(v0 + 4056);
  v3 = *(_QWORD *)(v0 + 3744);
  v4 = *(_QWORD *)(v0 + 3728);
  v5 = *(_QWORD *)(v0 + 3720);
  v6 = *(_QWORD *)(v0 + 3576);
  swift_release(*(_QWORD *)(v0 + 4032));
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = v1;
    v12 = swift_slowAlloc(64, -1);
    v71[0] = v12;
    *(_DWORD *)v10 = 136315394;
    swift_getErrorValue(v11, v0 + 3472, v0 + 3272);
    v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 3280), *(_QWORD *)(v0 + 3288));
    v15 = v14;
    *(_QWORD *)(v0 + 3488) = sub_10007ECFC(v13, v14, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3488, v0 + 3496, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v11);
    v69 = v11;
    swift_errorRelease(v11);
    *(_WORD *)(v10 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v16 = *(_QWORD *)(v0 + 3744);
    v17 = *(_QWORD *)(v0 + 3728);
    v18 = *(_QWORD *)(v0 + 3720);
    TaskLocal.get()((_QWORD *)(v0 + 3328));
    v19 = *(_QWORD *)(v0 + 3336);
    *(_QWORD *)(v0 + 3544) = sub_10007ECFC(*(_QWORD *)(v0 + 3328), v19, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3544, v0 + 3552, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to create timeline entry, error=%s, id=%s ", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v12, 2, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    v21 = v69;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 3744);
    v23 = *(_QWORD *)(v0 + 3728);
    v24 = *(_QWORD *)(v0 + 3720);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v21 = v1;
  }
  v25 = *(_QWORD *)(v0 + 3600);
  v26 = *(_QWORD *)(v0 + 3592);
  v27 = *(_QWORD *)(v0 + 3584);
  v28 = *(_QWORD *)(v0 + 3552);
  v29 = TimelineProviderContext.isPreview.getter(v20);
  v30 = v29;
  TimelineProviderContext.family.getter(v29);
  sub_100052A40(v25, (v30 & 1) == 0, v28);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  swift_errorRelease(v21);
  sub_100007164((_QWORD *)(v0 + 2696));
  sub_100007164((_QWORD *)(v0 + 2456));
  sub_100007164((_QWORD *)(v0 + 2216));
  sub_100007164((_QWORD *)(v0 + 1976));
  v31 = *(_QWORD *)(v0 + 4072);
  v32 = *(_QWORD *)(v0 + 4064);
  v33 = *(_QWORD *)(v0 + 4056);
  v34 = *(_QWORD *)(v0 + 4024);
  v35 = *(_QWORD *)(v0 + 4016);
  v36 = *(_QWORD *)(v0 + 4008);
  v37 = *(_QWORD *)(v0 + 4000);
  v38 = *(_QWORD *)(v0 + 3976);
  v39 = *(_QWORD *)(v0 + 3968);
  v41 = *(_QWORD *)(v0 + 3960);
  v42 = *(_QWORD *)(v0 + 3936);
  v43 = *(_QWORD *)(v0 + 3928);
  v44 = *(_QWORD *)(v0 + 3904);
  v45 = *(_QWORD *)(v0 + 3888);
  v46 = *(_QWORD *)(v0 + 3864);
  v47 = *(_QWORD *)(v0 + 3832);
  v48 = *(_QWORD *)(v0 + 3824);
  v49 = *(_QWORD *)(v0 + 3816);
  v50 = *(_QWORD *)(v0 + 3808);
  v51 = *(_QWORD *)(v0 + 3792);
  v52 = *(_QWORD *)(v0 + 3784);
  v53 = *(_QWORD *)(v0 + 3776);
  v54 = *(_QWORD *)(v0 + 3768);
  v55 = *(_QWORD *)(v0 + 3760);
  v56 = *(_QWORD *)(v0 + 3752);
  v57 = *(_QWORD *)(v0 + 3744);
  v58 = *(_QWORD *)(v0 + 3736);
  v59 = *(_QWORD *)(v0 + 3712);
  v60 = *(_QWORD *)(v0 + 3688);
  v61 = *(_QWORD *)(v0 + 3680);
  v62 = *(_QWORD *)(v0 + 3672);
  v63 = *(_QWORD *)(v0 + 3664);
  v64 = *(_QWORD *)(v0 + 3656);
  v65 = *(_QWORD *)(v0 + 3632);
  v66 = *(_QWORD *)(v0 + 3624);
  v67 = *(_QWORD *)(v0 + 3616);
  v68 = *(_QWORD *)(v0 + 3608);
  v70 = *(_QWORD *)(v0 + 3600);
  sub_100007164((_QWORD *)(v0 + 3176));
  swift_release(v33);
  swift_release(v32);
  swift_release(v31);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018DD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 3832);
  (*(void (**)(_QWORD, _QWORD))(v0 + 4104))(*(_QWORD *)(v0 + 3968), *(_QWORD *)(v0 + 3944));
  sub_10001DF70(v1, type metadata accessor for WidgetStock);
  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 3904), sub_100018E40, v0 + 2896);
}

uint64_t sub_100018E40()
{
  uint64_t v0;

  return swift_task_switch(sub_100018E54, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_100018E54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4072));
  return swift_asyncLet_finish(v0 + 656, *(_QWORD *)(v0 + 3976), sub_100018E9C, v0 + 2656);
}

uint64_t sub_100018E9C()
{
  uint64_t v0;

  return swift_task_switch(sub_100018EB0, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_100018EB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4064));
  return swift_asyncLet_finish(v0 + 1296, *(_QWORD *)(v0 + 4024), sub_100018EF8, v0 + 2576);
}

uint64_t sub_100018EF8()
{
  uint64_t v0;

  return swift_task_switch(sub_100018F0C, *(_QWORD *)(v0 + 4040), *(_QWORD *)(v0 + 4048));
}

uint64_t sub_100018F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];

  v1 = *(_QWORD *)(v0 + 4112);
  v2 = *(_QWORD *)(v0 + 4056);
  v3 = *(_QWORD *)(v0 + 3744);
  v4 = *(_QWORD *)(v0 + 3728);
  v5 = *(_QWORD *)(v0 + 3720);
  v6 = *(_QWORD *)(v0 + 3576);
  swift_release(*(_QWORD *)(v0 + 4032));
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = v1;
    v12 = swift_slowAlloc(64, -1);
    v71[0] = v12;
    *(_DWORD *)v10 = 136315394;
    swift_getErrorValue(v11, v0 + 3472, v0 + 3272);
    v13 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 3280), *(_QWORD *)(v0 + 3288));
    v15 = v14;
    *(_QWORD *)(v0 + 3488) = sub_10007ECFC(v13, v14, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3488, v0 + 3496, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v11);
    v69 = v11;
    swift_errorRelease(v11);
    *(_WORD *)(v10 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v16 = *(_QWORD *)(v0 + 3744);
    v17 = *(_QWORD *)(v0 + 3728);
    v18 = *(_QWORD *)(v0 + 3720);
    TaskLocal.get()((_QWORD *)(v0 + 3328));
    v19 = *(_QWORD *)(v0 + 3336);
    *(_QWORD *)(v0 + 3544) = sub_10007ECFC(*(_QWORD *)(v0 + 3328), v19, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3544, v0 + 3552, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to create timeline entry, error=%s, id=%s ", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v12, 2, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    v21 = v69;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 3744);
    v23 = *(_QWORD *)(v0 + 3728);
    v24 = *(_QWORD *)(v0 + 3720);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v21 = v1;
  }
  v25 = *(_QWORD *)(v0 + 3600);
  v26 = *(_QWORD *)(v0 + 3592);
  v27 = *(_QWORD *)(v0 + 3584);
  v28 = *(_QWORD *)(v0 + 3552);
  v29 = TimelineProviderContext.isPreview.getter(v20);
  v30 = v29;
  TimelineProviderContext.family.getter(v29);
  sub_100052A40(v25, (v30 & 1) == 0, v28);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  swift_errorRelease(v21);
  sub_100007164((_QWORD *)(v0 + 2696));
  sub_100007164((_QWORD *)(v0 + 2456));
  sub_100007164((_QWORD *)(v0 + 2216));
  sub_100007164((_QWORD *)(v0 + 1976));
  v31 = *(_QWORD *)(v0 + 4072);
  v32 = *(_QWORD *)(v0 + 4064);
  v33 = *(_QWORD *)(v0 + 4056);
  v34 = *(_QWORD *)(v0 + 4024);
  v35 = *(_QWORD *)(v0 + 4016);
  v36 = *(_QWORD *)(v0 + 4008);
  v37 = *(_QWORD *)(v0 + 4000);
  v38 = *(_QWORD *)(v0 + 3976);
  v39 = *(_QWORD *)(v0 + 3968);
  v41 = *(_QWORD *)(v0 + 3960);
  v42 = *(_QWORD *)(v0 + 3936);
  v43 = *(_QWORD *)(v0 + 3928);
  v44 = *(_QWORD *)(v0 + 3904);
  v45 = *(_QWORD *)(v0 + 3888);
  v46 = *(_QWORD *)(v0 + 3864);
  v47 = *(_QWORD *)(v0 + 3832);
  v48 = *(_QWORD *)(v0 + 3824);
  v49 = *(_QWORD *)(v0 + 3816);
  v50 = *(_QWORD *)(v0 + 3808);
  v51 = *(_QWORD *)(v0 + 3792);
  v52 = *(_QWORD *)(v0 + 3784);
  v53 = *(_QWORD *)(v0 + 3776);
  v54 = *(_QWORD *)(v0 + 3768);
  v55 = *(_QWORD *)(v0 + 3760);
  v56 = *(_QWORD *)(v0 + 3752);
  v57 = *(_QWORD *)(v0 + 3744);
  v58 = *(_QWORD *)(v0 + 3736);
  v59 = *(_QWORD *)(v0 + 3712);
  v60 = *(_QWORD *)(v0 + 3688);
  v61 = *(_QWORD *)(v0 + 3680);
  v62 = *(_QWORD *)(v0 + 3672);
  v63 = *(_QWORD *)(v0 + 3664);
  v64 = *(_QWORD *)(v0 + 3656);
  v65 = *(_QWORD *)(v0 + 3632);
  v66 = *(_QWORD *)(v0 + 3624);
  v67 = *(_QWORD *)(v0 + 3616);
  v68 = *(_QWORD *)(v0 + 3608);
  v70 = *(_QWORD *)(v0 + 3600);
  sub_100007164((_QWORD *)(v0 + 3176));
  swift_release(v33);
  swift_release(v32);
  swift_release(v31);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001943C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 4120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 4088))(*(_QWORD *)(v0 + 3736), *(_QWORD *)(v0 + 3576), *(_QWORD *)(v0 + 3720));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 4120);
    v50 = *(_QWORD *)(v0 + 3736);
    v52 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 4096);
    v49 = *(_QWORD *)(v0 + 3720);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v54 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 3408, v0 + 3248);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 3256), *(_QWORD *)(v0 + 3264));
    v10 = v9;
    *(_QWORD *)(v0 + 3416) = sub_10007ECFC(v8, v9, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3416, v0 + 3424, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch price change display, falling back to default, error=%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, &type metadata for Any[8]);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v11 = v52(v50, v49);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 4120);
    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 4096);
    v14 = *(_QWORD *)(v0 + 3736);
    v15 = *(_QWORD *)(v0 + 3720);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

    v11 = v13(v14, v15);
  }
  v16 = *(_QWORD *)(v0 + 4120);
  static Watchlist.defaultWatchlistDisplay.getter(v11);
  swift_errorRelease(v16);
  v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 4088))(*(_QWORD *)(v0 + 3752), *(_QWORD *)(v0 + 3576), *(_QWORD *)(v0 + 3720));
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v18, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v54 = v22;
    *(_DWORD *)v21 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v51 = *(_QWORD *)(v0 + 3752);
    v53 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
    v23 = *(_QWORD *)(v0 + 3720);
    TaskLocal.get()((_QWORD *)(v0 + 3360));
    v24 = *(_QWORD *)(v0 + 3368);
    *(_QWORD *)(v0 + 3432) = sub_10007ECFC(*(_QWORD *)(v0 + 3360), v24, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3432, v0 + 3440, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "Successfully created timeline entry, id=%s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, &type metadata for Any[8]);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v53(v51, v23);
  }
  else
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 4096);
    v26 = *(_QWORD *)(v0 + 3752);
    v27 = *(_QWORD *)(v0 + 3720);

    v25(v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 4016);
  v29 = *(_QWORD *)(v0 + 4000);
  v30 = *(_QWORD *)(v0 + 3992);
  v31 = *(_QWORD *)(v0 + 3984);
  v43 = *(_QWORD *)(v0 + 3944);
  v44 = *(_QWORD *)(v0 + 3968);
  v32 = *(_QWORD *)(v0 + 3712);
  v45 = *(_QWORD *)(v0 + 3704);
  v46 = *(void (**)(uint64_t, uint64_t))(v0 + 4104);
  v41 = *(_QWORD *)(v0 + 3688);
  v42 = *(_QWORD *)(v0 + 3832);
  v33 = *(_QWORD *)(v0 + 3624);
  v47 = *(_QWORD *)(v0 + 3696);
  v48 = *(_QWORD *)(v0 + 3616);
  v34 = *(_QWORD *)(v0 + 3608);
  v35 = v42 + *(int *)(v0 + 4128);
  v36 = *(_QWORD *)(v0 + 3552);
  sub_10001DE2C(v33, v48, type metadata accessor for DetailContentViewModel);
  sub_10001DE2C(v35, v34, (uint64_t (*)(_QWORD))sub_10001D694);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
  Date.init()(v37);
  v38 = v30;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
  sub_10001DF70(v33, type metadata accessor for DetailContentViewModel);
  sub_10001DF70(v41, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v46(v44, v43);
  sub_10001DF70(v42, type metadata accessor for WidgetStock);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v36, v32, v47);
  v39 = (int *)type metadata accessor for DetailTimelineEntry(0);
  sub_10000ED3C(v48, v36 + v39[5], type metadata accessor for DetailContentViewModel);
  sub_10000ED3C(v34, v36 + v39[6], (uint64_t (*)(_QWORD))sub_10001D694);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v36 + v39[7], v29, v31);
  *(_BYTE *)(v36 + v39[8]) = 0;
  *(_BYTE *)(v36 + v39[9]) = 0;
  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 3904), sub_100018458, v0 + 2416);
}

uint64_t sub_100019944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v3[22] = a1;
  v6 = type metadata accessor for AppConfiguration(0);
  v3[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[24] = v7;
  v3[25] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D724(0, &qword_100112680, type metadata accessor for DetailTimelineEntry, sub_10001481C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Timeline);
  v3[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[27] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v10);
  v3[29] = swift_task_alloc(v10);
  v11 = type metadata accessor for WidgetQuote(0);
  v3[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[31] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v13);
  v3[33] = swift_task_alloc(v13);
  sub_10001D694(0);
  v3[34] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[35] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v16);
  v3[37] = swift_task_alloc(v16);
  sub_10001D6B0(0);
  v3[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date(0);
  v3[39] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[40] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[41] = swift_task_alloc(v20);
  v3[42] = swift_task_alloc(v20);
  v3[43] = swift_task_alloc(v20);
  v21 = type metadata accessor for TimelineReloadPolicy(0);
  v3[44] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[45] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[46] = swift_task_alloc(v23);
  v3[47] = swift_task_alloc(v23);
  v24 = type metadata accessor for DetailTimelineEntry(0);
  v3[48] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v3[49] = v25;
  v26 = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[50] = v26;
  v27 = type metadata accessor for MainActor(0);
  v3[51] = v27;
  v3[52] = static MainActor.shared.getter(v27);
  v28 = (_QWORD *)swift_task_alloc(dword_1001126B4);
  v3[53] = v28;
  *v28 = v3;
  v28[1] = sub_100019B8C;
  return sub_100014C10(v26, a2, a3);
}

uint64_t sub_100019B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 424));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100019BFC, v2, v3);
}

uint64_t sub_100019BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;

  swift_release(*(_QWORD *)(v0 + 416));
  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, v0 + 56);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  sub_100007184((_QWORD *)(v0 + 56), v1);
  v3 = sub_100003AE0(0, (unint64_t *)&unk_100113DA0, (uint64_t)&protocol descriptor for ReloadPolicyProviderType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (*(_QWORD *)(v0 + 120))
  {
    v5 = *(_QWORD *)(v0 + 400);
    v6 = *(_QWORD *)(v0 + 384);
    sub_10001D968((__int128 *)(v0 + 96), v0 + 16);
    sub_100007164((_QWORD *)(v0 + 56));
    v7 = *(_BYTE *)(v5 + *(int *)(v6 + 36));
    v8 = *(_QWORD *)(v0 + 400);
    v121 = (_QWORD *)(v0 + 16);
    if ((v7 & 1) != 0)
    {
      v9 = *(_QWORD *)(v0 + 392);
      v10 = *(_QWORD *)(v0 + 328);
      v11 = *(_QWORD *)(v0 + 336);
      v12 = *(_QWORD *)(v0 + 312);
      v106 = *(_QWORD *)(v0 + 368);
      v108 = *(_QWORD *)(v0 + 320);
      v13 = *(_QWORD *)(v0 + 200);
      v110 = *(_QWORD *)(v0 + 192);
      v113 = *(_QWORD *)(v0 + 184);
      v119 = *(_QWORD *)(v0 + 384);
      sub_10000EDE8(0, &qword_1001126C0, type metadata accessor for DetailTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v14 = *(_QWORD *)(v9 + 72);
      v15 = *(unsigned __int8 *)(v9 + 80);
      v16 = (v15 + 32) & ~v15;
      v18 = swift_allocObject(v17, v16 + v14, v15 | 7);
      *(_OWORD *)(v18 + 16) = xmmword_1000DB170;
      sub_10001DE2C(v8, v18 + v16, type metadata accessor for DetailTimelineEntry);
      v19 = sub_100007184((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      static Date.now.getter(v19);
      v20 = *(_QWORD *)(*v19 + 40);
      v21 = *(_QWORD *)(*v19 + 48);
      sub_100007184((_QWORD *)(*v19 + 16), v20);
      v22 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v20, v21);
      v23 = AppConfiguration.widgetSystemReloadJitterMax.getter(v22);
      v24 = (double)v23;
      AppConfiguration.openMarketWidgetSystemReloadInterval.getter(v23);
      static Date.+ infix(_:_:)(v11);
      static TimelineReloadPolicy.after(_:jitteredUpTo:)(v10, v106, v24);
      v25 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      v25(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v13, v113);
      v25(v11, v12);
      v26 = sub_10001481C();
      Timeline.init(entries:policy:)(v18, v106, v119, v26);
      sub_10001DF70(v8, type metadata accessor for DetailTimelineEntry);
LABEL_22:
      v95 = *(_QWORD *)(v0 + 400);
      v97 = *(_QWORD *)(v0 + 368);
      v96 = *(_QWORD *)(v0 + 376);
      v99 = *(_QWORD *)(v0 + 336);
      v98 = *(_QWORD *)(v0 + 344);
      v100 = *(_QWORD *)(v0 + 328);
      v102 = *(_QWORD *)(v0 + 296);
      v101 = *(_QWORD *)(v0 + 304);
      v103 = *(_QWORD *)(v0 + 288);
      v109 = *(_QWORD *)(v0 + 264);
      v112 = *(_QWORD *)(v0 + 256);
      v116 = *(_QWORD *)(v0 + 232);
      v118 = *(_QWORD *)(v0 + 224);
      v120 = *(_QWORD *)(v0 + 200);
      sub_100007164(v121);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v109);
      swift_task_dealloc(v112);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v117 = (_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 384);
    v28 = *(_QWORD *)(v0 + 288);
    v29 = *(_QWORD *)(v0 + 296);
    v30 = *(_QWORD *)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 240);
    v32 = *(_QWORD *)(v0 + 248);
    sub_10000EDE8(0, &qword_1001126B8, (uint64_t (*)(uint64_t))sub_10001D694, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v33 = *(unsigned __int8 *)(v30 + 80);
    v34 = (v33 + 32) & ~v33;
    v36 = swift_allocObject(v35, v34 + *(_QWORD *)(v30 + 72), v33 | 7);
    *(_OWORD *)(v36 + 16) = xmmword_1000DB170;
    v37 = v36 + v34;
    sub_10001DE2C(v8 + *(int *)(v27 + 24), v37, (uint64_t (*)(_QWORD))sub_10001D694);
    sub_10001DE2C(v37, v29, (uint64_t (*)(_QWORD))sub_10001D694);
    sub_10000ED3C(v29, v28, (uint64_t (*)(_QWORD))sub_10001D694);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v28, 1, v31) == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 288), (uint64_t (*)(_QWORD))sub_10001D694);
      v38 = _swiftEmptyArrayStorage;
    }
    else
    {
      v40 = *(_QWORD *)(v0 + 256);
      v39 = *(_QWORD *)(v0 + 264);
      v41 = *(_QWORD *)(v0 + 240);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 248) + 32);
      v42(v39, *(_QWORD *)(v0 + 288), v41);
      v42(v40, v39, v41);
      v38 = _swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        v38 = (_QWORD *)sub_1000733D0(0, _swiftEmptyArrayStorage[2] + 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v44 = v38[2];
      v43 = v38[3];
      if (v44 >= v43 >> 1)
        v38 = (_QWORD *)sub_1000733D0(v43 > 1, v44 + 1, 1, (unint64_t)v38);
      v46 = *(_QWORD *)(v0 + 248);
      v45 = *(_QWORD *)(v0 + 256);
      v47 = *(_QWORD *)(v0 + 240);
      v38[2] = v44 + 1;
      v42((uint64_t)v38+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v44, v45, v47);
    }
    v48 = *(_QWORD *)(v0 + 400);
    v49 = *(_QWORD *)(v0 + 384);
    v50 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 272);
    swift_setDeallocating(v36);
    swift_arrayDestroy(v37, *(_QWORD *)(v36 + 16), v51);
    swift_deallocClassInstance(v36, 32, 7);
    v114 = sub_100007184(v121, *(_QWORD *)(v0 + 40));
    static Date.now.getter(v114);
    v52 = *(int *)(v49 + 20);
    v53 = type metadata accessor for DetailContentViewModel(0);
    sub_10001DE2C(v48 + *(int *)(v53 + 44) + v52, v50, (uint64_t (*)(_QWORD))sub_10001D6B0);
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v55 = v54;
    v56 = *(_QWORD *)(v54 - 8);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v50, 1, v54);
    v58 = *(_QWORD *)(v0 + 304);
    if (v57 == 1)
    {
      sub_10001DF70(*(_QWORD *)(v0 + 304), (uint64_t (*)(_QWORD))sub_10001D6B0);
      v59 = 0;
    }
    else
    {
      v59 = NonEmpty.count.getter(v55);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v55);
    }
    v60 = *(_QWORD *)(v0 + 392);
    v61 = *(_QWORD *)(v0 + 376);
    v62 = *(_QWORD *)(v0 + 368);
    v104 = *(_QWORD *)(v0 + 360);
    v105 = *(_QWORD *)(v0 + 400);
    v63 = *(_QWORD *)(v0 + 344);
    v107 = *(_QWORD *)(v0 + 352);
    v65 = *(_QWORD *)(v0 + 312);
    v64 = *(_QWORD *)(v0 + 320);
    v111 = *(_QWORD *)(v0 + 384);
    sub_1000C6490(v63, (uint64_t)v38, v59, v61);
    swift_bridgeObjectRelease(v38);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
    sub_10000EDE8(0, &qword_1001126C0, type metadata accessor for DetailTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v66 = *(unsigned __int8 *)(v60 + 80);
    v67 = (v66 + 32) & ~v66;
    v68 = v67 + *(_QWORD *)(v60 + 72);
    v69 = v66 | 7;
    v115 = v70;
    v71 = swift_allocObject(v70, v68, v66 | 7);
    *(_OWORD *)(v71 + 16) = xmmword_1000DB170;
    sub_10001DE2C(v105, v71 + v67, type metadata accessor for DetailTimelineEntry);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v62, v61, v107);
    v72 = sub_10001481C();
    Timeline.init(entries:policy:)(v71, v62, v111, v72);
    sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v117);
    v73 = *(_QWORD *)(v0 + 160);
    v74 = *(_QWORD *)(v0 + 168);
    sub_100007184(v117, v73);
    v75 = type metadata accessor for DemoTimelineManager(0);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v75, v75, v73, v74);
    if (result)
    {
      v76 = result;
      v77 = sub_100007164(v117);
      v78 = static Settings.Widget.dumpEntries.getter(v77);
      v79 = sub_100003D3C(&qword_1001126C8, type metadata accessor for DemoTimelineManager, (uint64_t)&unk_1000DD320);
      Configurable.setting<A>(_:)(v78, v75, v79);
      v80 = swift_release(v78);
      if (*(_BYTE *)(v0 + 432) == 1)
      {
        v81 = *(_QWORD *)(v0 + 400);
        v82 = *(_QWORD *)(v0 + 384);
        v83 = swift_allocObject(v115, v68, v69);
        *(_OWORD *)(v83 + 16) = xmmword_1000DB170;
        sub_10001DE2C(v81, v83 + v67, type metadata accessor for DetailTimelineEntry);
        sub_1000333B4(v83);
        swift_setDeallocating(v83);
        swift_arrayDestroy(v83 + v67, *(_QWORD *)(v83 + 16), v82);
        v80 = swift_deallocClassInstance(v83, 32, 7);
      }
      v84 = static Settings.Widget.demoMode.getter(v80);
      Configurable.setting<A>(_:)(v84, v75, v79);
      swift_release(v84);
      v85 = *(_QWORD *)(v0 + 400);
      v86 = *(_QWORD *)(v0 + 376);
      v87 = *(_QWORD *)(v0 + 352);
      v88 = *(_QWORD *)(v0 + 360);
      if (*(_BYTE *)(v0 + 433) == 1)
      {
        v90 = *(_QWORD *)(v0 + 224);
        v89 = *(_QWORD *)(v0 + 232);
        v91 = *(_QWORD *)(v0 + 208);
        v92 = *(_QWORD *)(v0 + 216);
        sub_100033D5C(v90);
        swift_release(v76);
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v89, v91);
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
        sub_10001DF70(v85, type metadata accessor for DetailTimelineEntry);
        v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32);
        v93(v89, v90, v91);
        v93(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
      }
      else
      {
        v94 = *(_QWORD *)(v0 + 216);
        swift_release(v76);
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
        sub_10001DF70(v85, type metadata accessor for DetailTimelineEntry);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v94 + 32))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 208));
      }
      goto LABEL_22;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001A49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001127CC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000E914;
  return sub_10001A4F4(a1, a2);
}

uint64_t sub_10001A4F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Watchlist(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001A554, 0, 0);
}

uint64_t sub_10001A554()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[4];
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  v0[8] = dispatch thunk of WatchlistManagerType.reloadWatchlists(synchronize:)(1, v2, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_10001A5DC;
  return Promise.resolveAsync()(v0 + 2);
}

uint64_t sub_10001A5DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10001A6E8;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 64);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
    swift_release(v5);
    v4 = sub_10001A654;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001A654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = v3[3];
  v6 = v3[4];
  sub_100007184(v3, v5);
  v7 = dispatch thunk of WatchlistManagerType.defaultAllSymbolsWatchlist.getter(v5, v6);
  Watchlist.displayState.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A6E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001A724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1001127B4);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001A794;
  return sub_10001A7E0(a1, a2, a3, a4);
}

uint64_t sub_10001A794()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001A7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  sub_10000EDE8(0, &qword_1001127B8, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[7] = swift_task_alloc(v7);
  v4[8] = swift_task_alloc(v7);
  sub_10001D7CC(0);
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v9);
  v4[10] = swift_task_alloc(v9);
  v10 = type metadata accessor for NetworkProxy(0);
  v4[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[12] = v11;
  v4[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v4[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[15] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v14);
  v4[17] = swift_task_alloc(v14);
  v15 = type metadata accessor for CachePolicy(0);
  v4[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[19] = v16;
  v4[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DF38(0);
  v4[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AppConfiguration(0);
  v4[22] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[23] = v19;
  v4[24] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001A99C, 0, 0);
}

uint64_t sub_10001A99C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[3];
  v3 = v1[3];
  v2 = v1[4];
  sub_100007184(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1001118E4);
  v0[25] = v4;
  *v4 = v0;
  v4[1] = sub_10001AA10;
  return sub_100003324(v0[24], v3, v2);
}

uint64_t sub_10001AA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_10001AA80, 0, 0);
}

uint64_t sub_10001AA80()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = v0[19];
  v2 = (_QWORD *)v0[20];
  v3 = v0[18];
  v4 = v0[13];
  v5 = (_QWORD *)v0[4];
  v6 = (uint64_t *)v0[5];
  v7 = v5[3];
  v15 = v5[4];
  sub_100007184(v5, v7);
  v8 = *v6;
  v9 = v6[1];
  *v2 = 0x4014000000000000;
  v10 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v2, enum case for CachePolicy.maxAge(_:), v3);
  Date.init()(v10);
  v11 = enum case for NetworkProxy.none(_:);
  v12 = type metadata accessor for NetworkProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v4, v11, v12);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to QuoteDetailManagerType.fetchQuoteDetail(for:cachePolicy:earliestBeginDate:networkProxy:)[1]);
  v0[26] = v13;
  *v13 = v0;
  v13[1] = sub_10001AB8C;
  return QuoteDetailManagerType.fetchQuoteDetail(for:cachePolicy:earliestBeginDate:networkProxy:)(v0[21], v8, v9, v0[20], v0[17], v0[13], v7, v15);
}

uint64_t sub_10001AB8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 208));
  v3 = v2[19];
  v13 = v2[20];
  v5 = v2[17];
  v4 = v2[18];
  v6 = v2[14];
  v7 = v2[15];
  v8 = v2[12];
  v9 = v2[13];
  v10 = v2[11];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v4);
    v11 = sub_10001AD8C;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v4);
    v11 = sub_10001AC8C;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_10001AC8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = type metadata accessor for QuoteDetail(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v1, v3);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = type metadata accessor for QuoteDetail(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v1, 1, 1, v9);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v10(v5, 1, 1, v4);
  v10(v6, 1, 1, v4);
  v11 = type metadata accessor for URL(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v7, 1, 1, v11);
  v12(v25, 1, 1, v11);
  v13 = type metadata accessor for TimeZone(0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  Date.init()(v14);
  QuoteDetail.init(dayOpenPrice:dayLowPrice:dayHighPrice:yearLowPrice:yearHighPrice:dividendYield:volume:averageVolume:priceEarningsRatio:beta:earningsPerShare:earningsStartDate:earningsEndDate:currencyCode:detailsURL:keyStatisticsURL:marketTimeZone:fundAssetClass:fundCategory:fundFocus:fundNiche:fundRegion:fundTopHoldings:fundSectors:dateLastRefreshed:)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    v5,
    v6,
    0,
    0,
    v7,
    v25,
    v8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    &_swiftEmptyArrayStorage,
    &_swiftEmptyArrayStorage,
    v3);
  sub_10001DF70(v1, (uint64_t (*)(_QWORD))sub_10001DF38);
  v15 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 56);
  v22 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001AFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for WidgetStock(0);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001B038, 0, 0);
}

uint64_t sub_10001B038()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = *(uint64_t **)(v0 + 32);
  sub_100007184(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v3 = *v1;
  v2 = v1[1];
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100112780 + dword_100112780);
  v4 = (_QWORD *)swift_task_alloc(unk_100112784);
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = sub_10001B0BC;
  return v6(*(_QWORD *)(v0 + 56), v3, v2);
}

uint64_t sub_10001B0BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10001B20C;
  }
  else
  {
    sub_10001D8FC(0);
    *(_DWORD *)(v2 + 88) = *(_DWORD *)(v5 + 48);
    v4 = sub_10001B130;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10001B130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(int *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 16);
  sub_10001DE2C(*(_QWORD *)(v0 + 56), v2, type metadata accessor for WidgetStock);
  v3 = (_QWORD *)swift_task_alloc(dword_10011278C);
  *(_QWORD *)(v0 + 80) = v3;
  *v3 = v0;
  v3[1] = sub_10001B1A0;
  return sub_10001B6C8(v2 + v1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_10001B1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 80));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_10001B284;
  }
  else
  {
    v2 = sub_10001B240;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001B20C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B240()
{
  uint64_t v0;

  sub_10001DF70(*(_QWORD *)(v0 + 56), type metadata accessor for WidgetStock);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16) + *(int *)(v0 + 88);
  sub_10001DF70(*(_QWORD *)(v0 + 56), type metadata accessor for WidgetStock);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for WidgetStock(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DE84(0);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001B39C, 0, 0);
}

uint64_t sub_10001B39C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[3];
  v1 = v0[4];
  sub_10001DEA0();
  v4 = swift_allocObject(v3, 48, 7);
  v0[10] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_1000DB170;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  v5 = dword_1001173B4;
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_10001B42C;
  return sub_1000AB9F8(v4);
}

uint64_t sub_10001B42C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10001B684;
  }
  else
  {
    swift_bridgeObjectRelease(v3[10]);
    v5 = sub_10001B4A0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001B4A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 56);
    v5 = (_QWORD *)(v0 + 32);
    v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v7 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v9 = *(_QWORD *)(v0 + 24);
      v8 = *(_QWORD *)(v0 + 32);
      v10 = sub_10001DE2C(v6, *(_QWORD *)(v0 + 64), type metadata accessor for WidgetStock);
      v11 = Stock.symbol.getter(v10);
      if (v11 == v9 && v12 == v8)
      {
        swift_bridgeObjectRelease(*v2);
        goto LABEL_13;
      }
      v14 = v12;
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), 0);
      swift_bridgeObjectRelease(v14);
      if ((v15 & 1) != 0)
        break;
      sub_10001DF70(*(_QWORD *)(v0 + 64), type metadata accessor for WidgetStock);
      v6 += v7;
      if (!--v3)
      {
        swift_bridgeObjectRelease(*v2);
        goto LABEL_10;
      }
    }
    v5 = (_QWORD *)(v0 + 96);
LABEL_13:
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 72);
    swift_bridgeObjectRelease(*v5);
    sub_10000ED3C(v17, v18, type metadata accessor for WidgetStock);
    v16 = 0;
  }
  else
  {
LABEL_10:
    v16 = 1;
  }
  v19 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 48);
  v22 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, v16, 1, v21);
  swift_bridgeObjectRelease(v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10001DF70(*(_QWORD *)(v0 + 72), (uint64_t (*)(_QWORD))sub_10001DE84);
    v23 = sub_10001DEF4();
    swift_allocError(&type metadata for Errors, v23, 0, 0);
    swift_willThrow();
    v24 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 64);
    v25 = *(_QWORD *)(v0 + 72);
    sub_10000ED3C(v25, *(_QWORD *)(v0 + 16), type metadata accessor for WidgetStock);
    swift_task_dealloc(v25);
  }
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B684()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001B6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[39] = a4;
  v5[40] = v4;
  v5[37] = a2;
  v5[38] = a3;
  v5[36] = a1;
  v6 = *(_QWORD *)(type metadata accessor for HeadlineViewModel(0) - 8);
  v5[41] = v6;
  v5[42] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v5[43] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[44] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[45] = swift_task_alloc(v9);
  v5[46] = swift_task_alloc(v9);
  v5[47] = swift_task_alloc(v9);
  v5[48] = swift_task_alloc(v9);
  v10 = type metadata accessor for WidgetFamily(0);
  v5[49] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[50] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[51] = swift_task_alloc(v12);
  v5[52] = swift_task_alloc(v12);
  v13 = type metadata accessor for MainActor(0);
  v5[53] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  v5[54] = v14;
  v5[55] = v15;
  return swift_task_switch(sub_10001B7E8, v14, v15);
}

uint64_t sub_10001B7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((sub_10001CDDC(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312)) & 1) != 0)
  {
    if (qword_100111588 != -1)
      swift_once(&qword_100111588, sub_1000B0BAC);
    sub_10001DB68((uint64_t)qword_100126A08, v0 + 96);
    v1 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 128);
    sub_100007184((_QWORD *)(v0 + 96), v1);
    v3 = sub_100003AE0(0, &qword_100112790, (uint64_t)&protocol descriptor for HeadlineViewModelServiceType);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
    if (*(_QWORD *)(v0 + 40))
    {
      v6 = *(_QWORD *)(v0 + 408);
      v5 = *(_QWORD *)(v0 + 416);
      v7 = *(_QWORD *)(v0 + 392);
      v8 = *(_QWORD *)(v0 + 400);
      sub_10001D968((__int128 *)(v0 + 16), v0 + 56);
      v9 = sub_100007164((_QWORD *)(v0 + 96));
      TimelineProviderContext.family.getter(v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v6, v7);
      v11 = 0;
      v12 = 1;
      if (v10 != enum case for WidgetFamily.systemSmall(_:) && v10 != enum case for WidgetFamily.systemMedium(_:))
      {
        if (v10 == enum case for WidgetFamily.systemLarge(_:))
        {
          v11 = 1;
          v12 = 4;
        }
        else
        {
          v12 = 0;
          v11 = 0;
          if (v10 != enum case for WidgetFamily.accessoryCircular(_:)
            && v10 != enum case for WidgetFamily.accessoryRectangular(_:)
            && v10 != enum case for WidgetFamily.accessoryInline(_:))
          {
            return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001000E5410, "StocksWidget/DetailTimelineProvider.swift", 41, 2, 282, 0);
          }
        }
      }
      *(_QWORD *)(v0 + 448) = v12;
      *(_BYTE *)(v0 + 480) = v11;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 392));
      sub_100007184((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v36 = (_QWORD *)swift_task_alloc(dword_100112074);
      *(_QWORD *)(v0 + 456) = v36;
      *v36 = v0;
      v36[1] = sub_10001BC9C;
      return sub_100007B5C(*(_QWORD *)(v0 + 312), v12);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 320);
    swift_release(*(_QWORD *)(v0 + 424));
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v39 = v22;
      *(_DWORD *)v21 = 136315138;
      if (qword_100111468 != -1)
        swift_once(&qword_100111468, sub_10002DFB0);
      v23 = *(_QWORD *)(v0 + 352);
      v37 = *(_QWORD *)(v0 + 344);
      v38 = *(_QWORD *)(v0 + 360);
      TaskLocal.get()((_QWORD *)(v0 + 160));
      v24 = *(_QWORD *)(v0 + 168);
      *(_QWORD *)(v0 + 272) = sub_10007ECFC(*(_QWORD *)(v0 + 160), v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "Skipping news fetch due to configuration or context. id=%s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, &type metadata for Any[8]);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v38, v37);
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 352);
      v25 = *(_QWORD *)(v0 + 360);
      v27 = *(_QWORD *)(v0 + 344);

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    }
    v28 = *(_QWORD *)(v0 + 288);
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
    v30 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 376);
    v31 = *(_QWORD *)(v0 + 384);
    v34 = *(_QWORD *)(v0 + 360);
    v33 = *(_QWORD *)(v0 + 368);
    v35 = *(_QWORD *)(v0 + 336);
    swift_task_dealloc(*(_QWORD *)(v0 + 416));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10001BC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 456);
  v3[58] = a1;
  v3[59] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10001C240;
  else
    v5 = sub_10001BD04;
  return swift_task_switch(v5, v3[54], v3[55]);
}

uint64_t sub_10001BD04()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __n128 v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;

  v1 = (uint8_t *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(unsigned __int8 *)(v0 + 480);
  swift_release(*(_QWORD *)(v0 + 424));
  *(_QWORD *)(v0 + 256) = v2;
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(v0 + 464);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5 >= *(_QWORD *)(v0 + 448) && v5 != 0)
    {
      v7 = *(_QWORD *)(v0 + 328);
      v8 = *(_QWORD *)(v0 + 336);
      v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v10 = v4 + v9;
      v11 = *(_QWORD *)(v7 + 72);
      swift_bridgeObjectRetain(v4);
      while (1)
      {
        v12 = *(_QWORD *)(v0 + 336);
        sub_10001DE2C(v10, v12, type metadata accessor for HeadlineViewModel);
        v13 = *(_QWORD *)(v8 + 104);
        sub_10001DF70(v12, type metadata accessor for HeadlineViewModel);
        if (v13 != 1)
          break;
        v10 += v11;
        if (!--v5)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 464));
          goto LABEL_18;
        }
      }
      v14 = *(_QWORD *)(v0 + 376);
      v15 = *(_QWORD *)(v0 + 344);
      v16 = *(_QWORD *)(v0 + 352);
      v17 = *(_QWORD *)(v0 + 320);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 464));
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v17, v15);
      v19 = Logger.logObject.getter(v18);
      v21 = static os_log_type_t.default.getter(v20);
      if (!os_log_type_enabled(v19, v21))
      {
        v25 = *(_QWORD *)(v0 + 376);
        v26 = *(_QWORD *)(v0 + 344);
        v22 = *(uint8_t **)(v0 + 352);

        (*((void (**)(uint64_t, uint64_t))v22 + 1))(v25, v26);
        goto LABEL_14;
      }
      v57 = (uint8_t *)(v0 + 256);
      v1 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v59 = v13;
      *(_DWORD *)v1 = 136315138;
      v22 = v1 + 4;
      if (qword_100111468 != -1)
        goto LABEL_27;
      while (1)
      {
        v23 = *(_QWORD *)(v0 + 352);
        v54 = *(_QWORD *)(v0 + 344);
        v55 = *(_QWORD *)(v0 + 376);
        TaskLocal.get()((_QWORD *)(v0 + 192));
        v24 = *(_QWORD *)(v0 + 200);
        *(_QWORD *)(v0 + 280) = sub_10007ECFC(*(_QWORD *)(v0 + 192), v24, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v22, v1 + 12);
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v19, v21, "Dropping headline because some have thumbnails. id=%s", v1, 0xCu);
        swift_arrayDestroy(v13, 1, &type metadata for Any[8]);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v1, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v55, v54);
        v1 = v57;
LABEL_14:
        v27 = *(_QWORD *)v1;
        if (*(_QWORD *)(*(_QWORD *)v1 + 16))
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v1);
          *(_QWORD *)v1 = v27;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v29 = *(_QWORD *)(v27 + 16);
            if (v29)
              goto LABEL_17;
            goto LABEL_26;
          }
        }
        else
        {
          __break(1u);
        }
        v27 = sub_10001DE70(v27);
        *(_QWORD *)v1 = v27;
        v29 = *(_QWORD *)(v27 + 16);
        if (v29)
        {
LABEL_17:
          v30 = v29 - 1;
          sub_10001DF70(v27 + v9 + (v29 - 1) * v11, type metadata accessor for HeadlineViewModel);
          *(_QWORD *)(v27 + 16) = v30;
          *(_QWORD *)v1 = v27;
          break;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        swift_once(&qword_100111468, sub_10002DFB0);
      }
    }
  }
LABEL_18:
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 16))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 344));
  v31 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRetain(v31);
  v33 = Logger.logObject.getter(v32);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v33, v35))
  {
    v58 = v1;
    v36 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(32, -1);
    v59 = v37;
    *(_DWORD *)v36 = 134218242;
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v31 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v36 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v56 = *(_QWORD *)(v0 + 368);
    v39 = *(_QWORD *)(v0 + 344);
    v38 = *(_QWORD *)(v0 + 352);
    TaskLocal.get()((_QWORD *)(v0 + 208));
    v40 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 240) = sub_10007ECFC(*(_QWORD *)(v0 + 208), v40, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v33, v35, "Attempting to create NonEmpty headlines with %ld headlines. id=%s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 1, &type metadata for Any[8]);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v56, v39);
    v1 = v58;
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 368);
    v42 = *(_QWORD *)(v0 + 344);
    v43 = *(_QWORD *)(v0 + 352);
    swift_bridgeObjectRelease(v31);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  }
  swift_beginAccess(v1, v0 + 136, 0, 0);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 256);
  sub_10001D794(0);
  v45 = v44;
  v46 = sub_10001D7B0();
  NonEmpty.init(_:)(v0 + 232, v45, v46);
  sub_100007164((_QWORD *)(v0 + 56));
  v47 = *(_QWORD *)(v0 + 408);
  v49 = *(_QWORD *)(v0 + 376);
  v48 = *(_QWORD *)(v0 + 384);
  v51 = *(_QWORD *)(v0 + 360);
  v50 = *(_QWORD *)(v0 + 368);
  v52 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  __n128 v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 320);
  swift_release(*(_QWORD *)(v0 + 424));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = *(_QWORD *)(v0 + 472);
    v11 = swift_slowAlloc(22, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v47 = swift_slowAlloc(32, -1);
    v48 = v47;
    *(_DWORD *)v11 = 138412546;
    swift_errorRetain(v10);
    v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 248) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    *(_WORD *)(v11 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v14 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 352);
    TaskLocal.get()((_QWORD *)(v0 + 176));
    v17 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)(v0 + 264) = sub_10007ECFC(*(_QWORD *)(v0 + 176), v17, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Fetching headlines failed with error=%@, id=%s", (uint8_t *)v11, 0x16u);
    sub_10000EDE8(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    swift_arrayDestroy(v12, 1, v18);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v47, 1, &type metadata for Any[8]);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 472);
    v20 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 344);
    v22 = *(_QWORD *)(v0 + 352);
    swift_errorRelease(v19);
    swift_errorRelease(v19);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 472));
  *(_QWORD *)(v0 + 256) = _swiftEmptyArrayStorage;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 16))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 344));
  v23 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRetain(v23);
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v25, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(32, -1);
    v48 = v29;
    *(_DWORD *)v28 = 134218242;
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v23 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v28 + 12) = 2080;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    v46 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 344);
    v30 = *(_QWORD *)(v0 + 352);
    TaskLocal.get()((_QWORD *)(v0 + 208));
    v32 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 240) = sub_10007ECFC(*(_QWORD *)(v0 + 208), v32, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v25, v27, "Attempting to create NonEmpty headlines with %ld headlines. id=%s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 1, &type metadata for Any[8]);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v46, v31);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 368);
    v34 = *(_QWORD *)(v0 + 344);
    v35 = *(_QWORD *)(v0 + 352);
    swift_bridgeObjectRelease(v23);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  }
  swift_beginAccess(v0 + 256, v0 + 136, 0, 0);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 256);
  sub_10001D794(0);
  v37 = v36;
  v38 = sub_10001D7B0();
  NonEmpty.init(_:)(v0 + 232, v37, v38);
  sub_100007164((_QWORD *)(v0 + 56));
  v39 = *(_QWORD *)(v0 + 408);
  v41 = *(_QWORD *)(v0 + 376);
  v40 = *(_QWORD *)(v0 + 384);
  v43 = *(_QWORD *)(v0 + 360);
  v42 = *(_QWORD *)(v0 + 368);
  v44 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8[2] = a4;
  v8[3] = a5;
  v11 = type metadata accessor for DetailTimelineEntry(0);
  v12 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1001126B4);
  v8[5] = v13;
  *v13 = v8;
  v13[1] = sub_10001C7E4;
  return sub_100014C10(v12, a7, a8);
}

uint64_t sub_10001C7E4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_10001C838, 0, 0);
}

uint64_t sub_10001C838()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  sub_10001DF70(v1, type metadata accessor for DetailTimelineEntry);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10001DF70(a1, (uint64_t (*)(_QWORD))sub_10001D48C);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100104888, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100112678, v16);
}

uint64_t sub_10001C9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8[2] = a4;
  v8[3] = a5;
  sub_10001D724(0, &qword_100112680, type metadata accessor for DetailTimelineEntry, sub_10001481C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Timeline);
  v8[4] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[5] = v12;
  v13 = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[6] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_10011268C);
  v8[7] = v14;
  *v14 = v8;
  v14[1] = sub_10001CA90;
  return sub_100019944(v13, a7, a8);
}

uint64_t sub_10001CA90()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_10001CAE4, 0, 0);
}

uint64_t sub_10001CAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CB40@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  __n128 v16;
  os_log_type_t v17;
  uint8_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DF54(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  SymbolWidgetConfigurationIntent.newsDisplayConfiguration.getter(v9);
  v12 = type metadata accessor for NewsDisplayConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v11, v12);
  sub_10001DF70((uint64_t)v11, (uint64_t (*)(_QWORD))sub_10001DF54);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v15, v17))
  {
    v24 = a2;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v27 = v23;
    *(_DWORD *)v18 = 136315138;
    if (qword_100111468 != -1)
      swift_once(&qword_100111468, sub_10002DFB0);
    TaskLocal.get()(&v25);
    v19 = v26;
    v25 = sub_10007ECFC(v25, v26, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "Missing newsDisplayConfiguration on intent, id=%s", v18, 0xCu);
    v20 = v23;
    swift_arrayDestroy(v23, 1, &type metadata for Any[8]);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    a2 = v24;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(a2, enum case for NewsDisplayConfiguration.afterHours(_:), v12);
}

uint64_t sub_10001CDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;

  v5 = type metadata accessor for ExchangeStatus(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NewsDisplayConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DetailTimelineProvider.Configuration(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1 + *(int *)(v16 + 20), v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v17 == enum case for NewsDisplayConfiguration.afterHours(_:))
  {
    v18 = type metadata accessor for WidgetStock(0);
    sub_10001DE2C(a3 + *(int *)(v18 + 20), (uint64_t)v11, (uint64_t (*)(_QWORD))sub_10001D694);
    v19 = type metadata accessor for WidgetQuote(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v19);
    if ((_DWORD)v21 != 1)
    {
      WidgetQuote.exchangeStatus.getter(v21);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v19);
      v22 = ExchangeStatus.isClosed.getter(v23);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return v22 & 1;
    }
    sub_10001DF70((uint64_t)v11, (uint64_t (*)(_QWORD))sub_10001D694);
    goto LABEL_5;
  }
  if (v17 == enum case for NewsDisplayConfiguration.always(_:))
  {
LABEL_5:
    v22 = 1;
    return v22 & 1;
  }
  if (v17 != enum case for NewsDisplayConfiguration.never(_:))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_10001CFEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TimelineProviderContext.family.getter(v4);
  sub_100052A40((uint64_t)v6, 0, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10001D080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1001126B4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return sub_100014C10(a1, a2, a3);
}

uint64_t sub_10001D0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10011268C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return sub_100019944(a1, a2, a3);
}

uint64_t sub_10001D150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10001D178(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_100104928, (uint64_t)&unk_1001127E0);
}

uint64_t sub_10001D164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10001D178(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_100104860, (uint64_t)&unk_100112668);
}

uint64_t sub_10001D178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a4;
  v43 = a8;
  v40 = a7;
  v41 = a3;
  v38 = a1;
  v39 = a2;
  v44 = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(v44 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v44);
  v36 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SymbolWidgetConfigurationIntent(0);
  v12 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v35 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a5 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v16);
  v17 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D48C(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  sub_10001DE2C(v37, (uint64_t)v17, type metadata accessor for DetailTimelineProvider);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v11);
  v22 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v36, v39, v44);
  v23 = *(unsigned __int8 *)(v14 + 80);
  v24 = (v23 + 48) & ~v23;
  v25 = *(unsigned __int8 *)(v12 + 80);
  v26 = (v15 + v25 + v24) & ~v25;
  v27 = *(unsigned __int8 *)(v9 + 80);
  v28 = (v13 + v27 + v26) & ~v27;
  v29 = (char *)swift_allocObject(v40, v28 + v10, v23 | v25 | v27 | 7);
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 3) = 0;
  v30 = v42;
  *((_QWORD *)v29 + 4) = v41;
  *((_QWORD *)v29 + 5) = v30;
  sub_10000ED3C((uint64_t)v17, (uint64_t)&v29[v24], type metadata accessor for DetailTimelineProvider);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v29[v26], v35, v34);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v29[v28], v22, v44);
  swift_retain(v30);
  v31 = sub_10001C888((uint64_t)v20, v43, (uint64_t)v29);
  return swift_release(v31);
}

uint64_t sub_10001D3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppIntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return AppIntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10001D420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppIntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000F0A8;
  return AppIntentTimelineProvider.relevance()(a1, a2, a3);
}

void sub_10001D48C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112658, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_10001D4AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for SymbolWidgetConfigurationIntent(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8) + 80);
  v11 = v8 + v9 + v10;
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = v1[5];
  v16 = (uint64_t)v1 + v5;
  v17 = (uint64_t)v1 + v8;
  v18 = (uint64_t)v1 + (v11 & ~v10);
  v19 = (_QWORD *)swift_task_alloc(dword_100112664);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_10000E914;
  return sub_10001C9D4(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_10001D59C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001E80C;
  return v6(a1);
}

uint64_t sub_10001D600()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001D624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100112674);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000F0A8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100112670 + dword_100112670))(a1, v4);
}

void sub_10001D694(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10001D6B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112690)
  {
    sub_10001D724(255, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112690);
  }
}

void sub_10001D724(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_10001D794(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001126A0, type metadata accessor for HeadlineViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

uint64_t sub_10001D7B0()
{
  return sub_100003D3C(&qword_1001126A8, (uint64_t (*)(uint64_t))sub_10001D794, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_10001D7CC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10001D7E8(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001126D8, (uint64_t (*)(uint64_t))&type metadata accessor for SymbolWidgetEntity, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_10001D804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc(dword_1001126F4);
  v6 = *(_OWORD *)(v1 + 24);
  v7 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_10000F0A8;
  *(_OWORD *)(v5 + 48) = v6;
  *(_OWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = v4;
  return swift_task_switch(sub_100015094, 0, 0);
}

uint64_t sub_10001D87C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100112704);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000F0A8;
  return sub_1000151FC(a1, v4, v5, v6);
}

uint64_t type metadata accessor for DetailTimelineProvider.Configuration(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100112840, (uint64_t)&nominal type descriptor for DetailTimelineProvider.Configuration);
}

void sub_10001D8FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!qword_100112728)
  {
    v2 = type metadata accessor for WidgetStock(255);
    sub_10001D6B0(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112728);
  }
}

uint64_t sub_10001D968(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10001D980()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10001D9A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)swift_task_alloc(dword_10011274C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10000F0A8;
  v5 = (_QWORD *)swift_task_alloc(dword_1001127CC);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_10000E914;
  return sub_10001A4F4(a1, v1 + 16);
}

uint64_t sub_10001DA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DetailTimelineProvider.Configuration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 96) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_100007164((_QWORD *)(v0 + 16));
  sub_100007164((_QWORD *)(v0 + 56));
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001DABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DetailTimelineProvider.Configuration(0) - 8) + 80);
  v5 = v1 + 16;
  v6 = v1 + 56;
  v7 = v1 + ((v4 + 96) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10011275C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000E914;
  v9 = (_QWORD *)swift_task_alloc(dword_1001127B4);
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_10001A794;
  return sub_10001A7E0(a1, v5, v6, v7);
}

uint64_t sub_10001DB68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001DBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for DetailTimelineProvider.Configuration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider(0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for TimelineProviderContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v14 = v13 + *(_QWORD *)(v11 + 64);
  v15 = v3 | v7 | v12 | 7;
  sub_100007164((_QWORD *)(v0 + 16));
  v16 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8));
  v17 = v16 + *(int *)(v1 + 20);
  v18 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v0 + v8, v19);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v13, v10);
  return swift_deallocObject(v0, v14, v15);
}

uint64_t sub_10001DCCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider.Configuration(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8) + 80);
  v11 = v8 + v9 + v10;
  v12 = v1 + 16;
  v13 = v1 + v5;
  v14 = v1 + v8;
  v15 = v1 + (v11 & ~v10);
  v16 = (_QWORD *)swift_task_alloc(dword_10011276C);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_10000F0A8;
  return sub_10001AFD8(a1, v12, v13, v14, v15);
}

void sub_10001DDA4(uint64_t a1)
{
  sub_10008F438(a1);
}

unint64_t sub_10001DDC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112778;
  if (!qword_100112778)
  {
    sub_10001D724(255, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    result = swift_getWitnessTable(&protocol conformance descriptor for NonEmpty<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100112778);
  }
  return result;
}

uint64_t sub_10001DE2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001DE70(unint64_t a1)
{
  return sub_1000733F8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_10001DE84(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112798, type metadata accessor for WidgetStock, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10001DEA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1001127A0)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1001127A0);
  }
}

unint64_t sub_10001DEF4()
{
  unint64_t result;

  result = qword_1001127A8;
  if (!qword_1001127A8)
  {
    result = swift_getWitnessTable(&unk_1000E2280, &type metadata for Errors);
    atomic_store(result, &qword_1001127A8);
  }
  return result;
}

void sub_10001DF38(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001127C0, (uint64_t (*)(uint64_t))&type metadata accessor for QuoteDetail, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10001DF54(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001127D0, (uint64_t (*)(uint64_t))&type metadata accessor for NewsDisplayConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_10001DF70(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001DFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for SymbolWidgetConfigurationIntent(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for TimelineProviderContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v17 = v13 + *(_QWORD *)(v11 + 64);
  v14 = v2 | v7 | v12 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  v15 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v0 + v3, v15);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v13, v10);
  return swift_deallocObject(v0, v17, v14);
}

uint64_t sub_10001E0C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(type metadata accessor for DetailTimelineProvider(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for SymbolWidgetConfigurationIntent(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8) + 80);
  v11 = v8 + v9 + v10;
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = v1[5];
  v16 = (uint64_t)v1 + v5;
  v17 = (uint64_t)v1 + v8;
  v18 = (uint64_t)v1 + (v11 & ~v10);
  v19 = (_QWORD *)swift_task_alloc(dword_1001127DC);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_10000F0A8;
  return sub_10001C750(a1, v12, v13, v14, v15, v16, v17, v18);
}

void sub_10001E1B4(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *);
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v6 = v5;
  v27 = a2;
  v28 = a3;
  v26 = a1;
  v9 = type metadata accessor for Stock(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetStock(0);
  v25 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a5 >> 1;
  v30 = a4;
  v16 = __OFSUB__(a5 >> 1, a4);
  v17 = (a5 >> 1) - a4;
  if (v16)
    goto LABEL_19;
  if (v17)
  {
    v31 = _swiftEmptyArrayStorage;
    sub_100073748(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
    {
LABEL_20:
      __break(1u);
      return;
    }
    v18 = 0;
    v23 = v15;
    v24 = v9;
    while (1)
    {
      v19 = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      if (v30 + v18 >= v29 || v18 >= v17)
        goto LABEL_18;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v28 + *(_QWORD *)(v10 + 72) * (v30 + v18), v9);
      v26(v12);
      if (v6)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        swift_release(v31);
        return;
      }
      v6 = 0;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v20 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      {
        sub_100073748(0, v20[2] + 1, 1);
        v20 = v31;
      }
      v22 = v20[2];
      v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_100073748(v21 > 1, v22 + 1, 1);
        v20 = v31;
      }
      v20[2] = v22 + 1;
      sub_10000ED3C((uint64_t)v23, (uint64_t)v20+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v22, type metadata accessor for WidgetStock);
      ++v18;
      v9 = v24;
      if (v19 == v17)
        return;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
}

uint64_t *sub_10001E3F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for NewsDisplayConfiguration(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10001E494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for NewsDisplayConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10001E4DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for NewsDisplayConfiguration(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10001E54C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10001E5C8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10001E624(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NewsDisplayConfiguration(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10001E690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001E69C);
}

uint64_t sub_10001E69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NewsDisplayConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10001E718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E724);
}

uint64_t sub_10001E724(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NewsDisplayConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10001E798(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000DC688;
  result = type metadata accessor for NewsDisplayConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

__n128 initializeWithCopy for VFlowGridLayout(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for VFlowGridLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VFlowGridLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VFlowGridLayout()
{
  return &type metadata for VFlowGridLayout;
}

uint64_t sub_10001E878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10001E880(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10001E8B4(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_10001E8BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *sub_10001E904(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[2];
  v4 = a1[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10001E93C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10001E984(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for EqualWidthColumnsLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021720(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EqualWidthColumnsLayout);
}

unint64_t sub_10001E9D4()
{
  unint64_t result;

  result = qword_1001128F8;
  if (!qword_1001128F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_1001128F8);
  }
  return result;
}

uint64_t sub_10001EA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a5;
  v34 = a6;
  v10 = type metadata accessor for LayoutSubviews(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000211DC(&qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  result = Collection.count.getter(v10, v14);
  v16 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  result = Array.count.getter(a3, a4);
  if (!result)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if (v16 == 0x8000000000000000 && result == -1)
    goto LABEL_12;
  v18 = v16 / result;
  if (v16 / result <= a2)
    v18 = a2;
  v32 = v18;
  v36 = a3;
  v19 = type metadata accessor for Array(0, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  Sequence.enumerated()(&v37, v19, WitnessTable);
  v21 = v37;
  v35 = v37;
  v22 = type metadata accessor for EnumeratedSequence(0, v19, WitnessTable);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v22);
  Sequence.lazy.getter(&v36, v22, v23);
  swift_bridgeObjectRelease(v21);
  v35 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v24 = *(unsigned __int8 *)(v11 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_100104A98, v26 + 8, v24 | 7);
  v28 = v33;
  *(_QWORD *)(v27 + 16) = a4;
  *(_QWORD *)(v27 + 24) = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v27 + v25, v13, v10);
  *(_QWORD *)(v27 + v26) = v32;
  v29 = (_QWORD *)swift_allocObject(&unk_100104AC0, 48, 7);
  v29[2] = a4;
  v29[3] = v28;
  v29[4] = sub_1000214CC;
  v29[5] = v27;
  v30 = type metadata accessor for LazySequence(0, v22, v23);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for LazySequence<A>, v30);
  LazySequenceProtocol.map<A>(_:)(sub_10002156C, v29, v30, v10, v31);
  swift_release(v29);
  return swift_bridgeObjectRelease(v35);
}

void sub_10001EC84(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for LayoutSubviews(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v10, a2, v8, v12);
  if ((unsigned __int128)(a1 * (__int128)a3) >> 64 == (a1 * a3) >> 63)
  {
    v14 = sub_1000211DC(&qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
    Collection.dropFirst(_:)(a1 * a3, v8, v14);
    sub_100085938(a3, a4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10001ED80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];

  v38 = a3;
  swift_bridgeObjectRetain(a3);
  sub_10001EA18(a1, a2, a3, a4, a5, (uint64_t)&v36);
  v10 = v37;
  v24 = v36;
  v33 = v36;
  v34 = v37;
  v11 = type metadata accessor for Array(0, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v13 = type metadata accessor for EnumeratedSequence(255, v11, WitnessTable);
  v14 = type metadata accessor for LayoutSubviews(255);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v13);
  v16 = type metadata accessor for LazyMapSequence(0, v13, v14, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v16);
  zip<A, B>(_:_:)(v39, &v38, &v33, v11, v16, WitnessTable, v17);
  swift_bridgeObjectRelease(a3);
  swift_release(v10);
  swift_bridgeObjectRelease(v24);
  v36 = v39[0];
  v37 = v39[1];
  v31 = a4;
  v32 = a5;
  v26 = a4;
  v27 = a5;
  v28 = sub_10002167C;
  v29 = &v30;
  *(_QWORD *)&v33 = v11;
  *((_QWORD *)&v33 + 1) = v16;
  v34 = WitnessTable;
  v35 = v17;
  v18 = type metadata accessor for Zip2Sequence(0, &v33);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for Zip2Sequence<A, B>, v18);
  v22 = sub_10001EF9C((void (*)(char *, char *))sub_1000216AC, (uint64_t)v25, v18, AssociatedTypeWitness, (uint64_t)&type metadata for Never, v20, (uint64_t)&protocol witness table for Never, v21);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(*((_QWORD *)&v36 + 1));
  swift_release(*((_QWORD *)&v37 + 1));
  return v22;
}

uint64_t sub_10001EF9C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v50 = a8;
  v51 = a5;
  v9 = v8;
  v63 = a4;
  v64 = a1;
  v65 = a2;
  v49 = *(_QWORD *)(a5 - 8);
  v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (char *)&v46 - v13;
  v55 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v48 = (char *)&v46 - v19;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v52 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v21 = __chkstk_darwin(v20);
  v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v26 = __chkstk_darwin(v23);
  v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v46 - v29;
  v58 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v28);
  v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = swift_getAssociatedTypeWitness(0, a6);
  v54 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v56 = (char *)&v46 - v32;
  v33 = v16;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  v35 = v63;
  v67 = ContiguousArray.init()(v63);
  v63 = type metadata accessor for ContiguousArray(0, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, _QWORD, _QWORD *))(v58 + 16))(v57, v60, v16);
  v36 = v56;
  v60 = v33;
  v37 = v33;
  v38 = v55;
  result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v34)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        v41 = v59;
        v42 = v66;
        goto LABEL_9;
      }
    }
  }
  v42 = v66;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }
  else
  {
    v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v47;
    v45 = v48;
    v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }
}

uint64_t sub_10001F4A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  result = sub_10001ED80(a2, a3, a4, a5, a6);
  *a1 = result;
  return result;
}

uint64_t sub_10001F51C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double *v45;
  double v46;
  double v47;
  _QWORD v48[12];
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  __int128 v53;
  double v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  void *v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;

  result = Array.count.getter(a8, a10);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v55 = a3;
    v56 = a4;
    v57 = a6;
    v21 = *(double *)&a1;
    v59 = a2;
    if ((a2 & 1) == 0)
      v21 = (*(double *)&a1 - (double)(result - 1) * a9) / (double)Array.count.getter(a8, a10);
    v54 = v21;
    v58 = a1;
    sub_10001EA18(a5, a7, a8, a10, a11, (uint64_t)&v63);
    v22 = v64;
    v53 = v63;
    v60 = v63;
    v61 = v64;
    *(_QWORD *)&v70 = a8;
    v23 = type metadata accessor for Array(0, a10);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
    RandomAccessCollection<>.indices.getter(&v69, v23, WitnessTable, &protocol witness table for Int);
    v68 = v69;
    v25 = swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
    v26 = type metadata accessor for EnumeratedSequence(255, v23, v25);
    v27 = type metadata accessor for LayoutSubviews(255);
    v28 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v26);
    v29 = type metadata accessor for LazyMapSequence(0, v26, v27, v28);
    sub_1000213C0();
    v31 = v30;
    v32 = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v29);
    v33 = sub_10002141C();
    v66 = &protocol witness table for Int;
    v67 = v33;
    v34 = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v31);
    zip<A, B>(_:_:)(&v70, &v60, &v68, v29, v31, v32, v34);
    swift_release(v22);
    v35 = swift_bridgeObjectRelease(v53);
    v63 = v70;
    v64 = v71;
    v65 = v72;
    __chkstk_darwin(v35);
    v48[6] = a10;
    v48[7] = a11;
    *(double *)&v48[8] = a9;
    v48[9] = a7;
    v48[10] = a8;
    *(double *)&v48[11] = v54;
    v49 = v59 & 1;
    v50 = v55;
    v51 = v56 & 1;
    v52 = v57;
    __chkstk_darwin(v36);
    v48[2] = sub_1000215D8;
    v48[3] = v37;
    *(_QWORD *)&v60 = v29;
    *((_QWORD *)&v60 + 1) = v31;
    v61 = v32;
    v62 = v34;
    v38 = type metadata accessor for Zip2Sequence(0, &v60);
    v39 = swift_getWitnessTable(&protocol conformance descriptor for Zip2Sequence<A, B>, v38);
    v41 = sub_10001EF9C((void (*)(char *, char *))sub_100021624, (uint64_t)v48, v38, (uint64_t)&type metadata for Double, (uint64_t)&type metadata for Never, v39, (uint64_t)&protocol witness table for Never, v40);
    swift_bridgeObjectRelease(v63);
    swift_release(v64);
    v42 = *(_QWORD *)(v41 + 16);
    if (v42)
    {
      v43 = *(double *)(v41 + 32);
      v44 = v42 - 1;
      if (v44)
      {
        v45 = (double *)(v41 + 40);
        do
        {
          v46 = *v45++;
          v47 = v46;
          if (v43 < v46)
            v43 = v47;
          --v44;
        }
        while (v44);
      }
    }
    return swift_bridgeObjectRelease(v41);
  }
  return result;
}

double sub_10001F914(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  double v22;
  double v23;
  _QWORD v25[2];
  char v26;
  char v27;

  v25[0] = a1;
  v25[1] = a7;
  v15 = *(_QWORD *)(a10 - 8);
  v16 = __chkstk_darwin(a1);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Array.subscript.getter(v19, v20, a10, v16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a11);
  type metadata accessor for Array(0, AssociatedTypeWitness);
  Array._makeMutableAndUnique()();
  sub_100020C4C(a2, *a9, AssociatedTypeWitness);
  _swift_isClassOrObjCExistentialType(AssociatedTypeWitness, AssociatedTypeWitness);
  v27 = a6 & 1;
  v26 = a8 & 1;
  dispatch thunk of Layout.sizeThatFits(proposal:subviews:cache:)(a5);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a10);
  return v23;
}

uint64_t sub_10001FA78(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15)
{
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t result;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t AssociatedTypeWitness;
  uint64_t *v58;
  uint64_t v59;
  char isClassOrObjCExistentialType;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE v64[4];
  int v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  void *v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  *(_QWORD *)&v77 = a7;
  v73 = a6;
  v72 = a3;
  v71 = *(_QWORD *)(a14 - 8);
  __chkstk_darwin(a1);
  v25 = &v64[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = type metadata accessor for LayoutSubviews(0);
  v70 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = &v64[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007248(0, &qword_100112948, (uint64_t (*)(uint64_t))sub_10002135C);
  __chkstk_darwin(v29);
  v31 = &v64[-v30];
  result = Array.count.getter(a8, a14);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v33 = *(double *)&a1;
    if ((a2 & 1) != 0)
      v33 = 10.0;
    v34 = (v33 - (double)(result - 1) * a13) / (double)result;
    v66 = v34;
    v67 = a15;
    sub_10001EA18(a5, v77, a8, a14, a15, (uint64_t)&v88);
    v65 = a4;
    v35 = v89;
    v77 = v88;
    v78 = v88;
    v79 = v89;
    v69 = a8;
    *(_QWORD *)&v85 = a8;
    v36 = type metadata accessor for Array(0, a14);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v36);
    RandomAccessCollection<>.indices.getter(&v84, v36, WitnessTable, &protocol witness table for Int);
    v83 = v84;
    v38 = swift_getWitnessTable(&protocol conformance descriptor for [A], v36);
    v39 = type metadata accessor for EnumeratedSequence(255, v36, v38);
    v40 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v39);
    v68 = v26;
    v41 = type metadata accessor for LazyMapSequence(0, v39, v26, v40);
    sub_1000213C0();
    v43 = v42;
    v44 = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v41);
    v45 = sub_10002141C();
    v81 = &protocol witness table for Int;
    v82 = v45;
    v46 = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v43);
    zip<A, B>(_:_:)(&v85, &v78, &v83, v41, v43, v44, v46);
    swift_release(v35);
    swift_bridgeObjectRelease(v77);
    v78 = v85;
    v79 = v86;
    v80 = v87;
    *(_QWORD *)&v77 = v41;
    *(_QWORD *)&v88 = v41;
    *((_QWORD *)&v88 + 1) = v43;
    v76 = v43;
    v75 = v44;
    v89 = v44;
    v90 = v46;
    v74 = v46;
    v47 = type metadata accessor for Zip2Sequence(0, &v88);
    Zip2Sequence.makeIterator()(&v88, v47);
    v48 = v34 + a13;
    v65 &= 1u;
    v49 = v70;
    v50 = v68;
    v51 = v67;
    while (1)
    {
      *(_QWORD *)&v85 = v77;
      *((_QWORD *)&v85 + 1) = v76;
      v86 = v75;
      *(_QWORD *)&v87 = v74;
      v52 = type metadata accessor for Zip2Sequence.Iterator(0, &v85);
      Zip2Sequence.Iterator.next()(v52);
      sub_10002135C(0);
      v54 = v53;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v31, 1, v53) == 1)
        break;
      v55 = *(_QWORD *)&v31[*(int *)(v54 + 48)];
      v56.n128_f64[0] = (*(double (**)(_BYTE *, _BYTE *, uint64_t))(v49 + 32))(v28, v31, v50);
      Array.subscript.getter(v55, v69, a14, v56);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v51);
      type metadata accessor for Array(0, AssociatedTypeWitness);
      v58 = v73;
      Array._makeMutableAndUnique()();
      v59 = *v58;
      sub_100020C4C(v55, v59, AssociatedTypeWitness);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(AssociatedTypeWitness, AssociatedTypeWitness);
      v61 = v59 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0)
        v61 = v59;
      v62 = v61
          + ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72) * v55;
      LOBYTE(v85) = 0;
      LOBYTE(v78) = v65;
      dispatch thunk of Layout.placeSubviews(in:proposal:subviews:cache:)(*(_QWORD *)&v66, 0, v72, v65, v28, v62, a14, v51, a9, a10, v34, a12);
      (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v25, a14);
      (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v28, v50);
      a9 = v48 + a9;
    }
    v63 = v88;
    swift_release(v91);
    return swift_bridgeObjectRelease(v63);
  }
  return result;
}

uint64_t sub_10001FFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_10001ED80(a1, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t sub_100020018(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10001F4A8(a1, a2, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_100020030(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  return sub_10001F51C(a1, a2 & 1, a3, a4 & 1, a5, a6, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(double *)v7, *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24));
}

uint64_t sub_100020070(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;

  return sub_10001FA78(a1, a2 & 1, a3, a4 & 1, a5, a6, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), a8, a9, a10, a11, *(double *)v11, *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24));
}

uint64_t sub_1000200B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100020108(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000200DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100020108(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100020108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_100020144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a2, a3);
}

uint64_t (*sub_100020150(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000201AC;
}

uint64_t sub_1000201B4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, double a11, uint64_t a12, uint64_t a13, void (*a14)(char *, uint64_t, uint64_t))
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  void (*v45)(void (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t, __n128);
  CGFloat v46;
  double x;
  double y;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD);
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, _QWORD);
  uint64_t v63;
  char *v64;
  double v65;
  char *v66;
  uint64_t v67;
  uint64_t result;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  CGFloat v76;
  CGFloat v77;
  double MidX;
  double MidY;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  double v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (*v92)(void (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t, __n128);
  void (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t i;
  double v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  char v104;
  _QWORD v105[4];
  uint64_t v106;
  CGFloat v107;
  CGFloat v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;

  v93 = a14;
  v97 = (char *)a13;
  LODWORD(i) = a4;
  v100 = *(double *)&a3;
  LODWORD(v94) = a2;
  v96 = *(double *)&a1;
  sub_100020B68(0);
  v103 = v21;
  v98 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v91 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview);
  __chkstk_darwin(v23);
  v25 = (char *)&v83 - v24;
  *(double *)&v26 = COERCE_DOUBLE(type metadata accessor for LayoutSubview(0));
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v102 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v90 = (char *)&v83 - v30;
  sub_100007248(0, &qword_100112918, (uint64_t (*)(uint64_t))sub_100020B68);
  __chkstk_darwin(v31);
  v101 = (uint64_t *)((char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v33);
  v35 = (uint64_t *)((char *)&v83 - v34);
  sub_100020BD0(0, &qword_100112920, &qword_100112928, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumeratedSequence);
  __chkstk_darwin(v36);
  v84 = (char *)&v83 - v37;
  sub_100020BD0(0, &qword_100112930, &qword_100112928, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumeratedSequence.Iterator);
  v89 = v38;
  __chkstk_darwin(v38);
  v99 = (uint64_t)&v83 - v39;
  v40 = type metadata accessor for LayoutSubviews(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (void (*)(char *, uint64_t, uint64_t))((char *)&v83 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = *(void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t, __n128))(v41 + 16);
  v45(v44, a5, v40, v42);
  LOBYTE(v106) = v94 & 1;
  LOBYTE(v105[0]) = i & 1;
  v88 = a10;
  sub_100020D70((uint64_t)v97, v93, v96, v94 & 1, v100, i & 1, (uint64_t)v44, (double *)&v106, a10, a11);
  v85 = a6;
  v109.origin.x = a6;
  v86 = a7;
  v109.origin.y = a7;
  v87 = a8;
  v109.size.width = a8;
  v46 = a9;
  v109.size.height = a9;
  v110 = CGRectStandardize(v109);
  x = v110.origin.x;
  y = v110.origin.y;
  v49 = v84;
  v92 = v45;
  ((void (*)(char *, uint64_t, uint64_t))v45)(v84, a5, v40);
  v94 = v41;
  (*(void (**)(_QWORD, char *, uint64_t))(v41 + 32))(v44, v49, v40);
  sub_1000211DC(&qword_100112928, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v50 = v99;
  v93 = v44;
  dispatch thunk of Sequence.makeIterator()(v40);
  v89 = *(int *)(v89 + 36);
  *(_QWORD *)(v50 + v89) = 0;
  sub_100020BD0(0, &qword_100112938, &qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
  *(_QWORD *)&v52 = v50 + *(int *)(v51 + 36);
  v53 = v40;
  v54 = sub_1000211DC(&qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v97 = v25;
  v100 = *(double *)&v26;
  v96 = v52;
  for (i = v54; ; v54 = i)
  {
    v55 = **(_QWORD **)&v52;
    dispatch thunk of Collection.endIndex.getter(v105, v53, v54);
    if (v55 == v105[0])
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v25, 1, 1, v26);
LABEL_7:
      sub_10002121C((uint64_t)v25);
      v58 = 1;
      goto LABEL_10;
    }
    v56 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v105, *(_QWORD *)&v52, v53, v54);
    (*(void (**)(char *))(v27 + 16))(v25);
    v56(v105, 0);
    v57 = v93;
    ((void (*)(_QWORD, uint64_t, uint64_t))v92)(v93, v50, v53);
    dispatch thunk of Collection.formIndex(after:)(*(_QWORD *)&v52, v53, v54);
    (*(void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v94 + 8))(v57, v53);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
      goto LABEL_7;
    v59 = v35;
    v60 = v53;
    v61 = v27;
    v62 = *(void (**)(char *, char *, _QWORD))(v27 + 32);
    v63 = v89;
    v64 = v90;
    v65 = v100;
    v62(v90, v25, *(_QWORD *)&v100);
    v66 = &v91[*(int *)(v103 + 48)];
    v67 = *(_QWORD *)(v50 + v63);
    result = ((uint64_t (*)(char *, char *, _QWORD))v62)(v66, v64, *(_QWORD *)&v65);
    if (__OFADD__(v67, 1))
      goto LABEL_19;
    *(_QWORD *)(v50 + v63) = v67 + 1;
    v69 = (char *)v101 + *(int *)(v103 + 48);
    *v101 = v67;
    v62(v69, v66, *(_QWORD *)&v65);
    v58 = 0;
    v53 = v60;
    v27 = v61;
    v35 = v59;
LABEL_10:
    v70 = v98;
    v71 = (uint64_t)v101;
    v72 = v103;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v101, v58, 1, v103);
    sub_100021268(v71, (uint64_t)v35);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v70 + 48))(v35, 1, v72) == 1)
      return sub_1000212BC(v99, &qword_100112930, &qword_100112928, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumeratedSequence.Iterator);
    v73 = *v35;
    *(double *)&v26 = v100;
    (*(void (**)(char *, char *, double))(v27 + 32))(v102, (char *)v35 + *(int *)(v103 + 48), COERCE_DOUBLE(*(_QWORD *)&v100));
    v74 = v107;
    v75 = v108;
    v76 = v107;
    v77 = v108;
    v112.origin.x = x;
    v112.origin.y = y;
    v112.size.width = v107;
    v112.size.height = v108;
    MidX = CGRectGetMidX(v112);
    v113.origin.x = x;
    v113.origin.y = y;
    v113.size.width = v74;
    v113.size.height = v75;
    MidY = CGRectGetMidY(v113);
    v80 = static UnitPoint.center.getter();
    LOBYTE(v105[0]) = 0;
    v104 = 0;
    result = LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v76, 0, *(_QWORD *)&v77, 0, MidX, MidY, v80, v81);
    v82 = v73 + 1;
    if (__OFADD__(v73, 1))
      break;
    v25 = v97;
    v50 = v99;
    v52 = v96;
    if (v106)
    {
      if (v106 == -1)
        goto LABEL_2;
      v82 %= v106;
    }
    if (!v82)
    {
LABEL_2:
      v111.origin.x = v85;
      v111.origin.y = v86;
      v111.size.width = v87;
      v111.size.height = v46;
      y = CGRectGetMinY(v111);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v102, v26);
      x = x + v74 + v88;
      continue;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v102, v26);
    y = y + v75 + a11;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_10002099C()
{
  LayoutProperties.init()();
  return LayoutProperties.stackOrientation.setter(1);
}

double sub_1000209CC(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  double v16;
  void (*v17)(char *, uint64_t, uint64_t);
  double v18;
  uint64_t v19;
  _BYTE v21[8];
  double v22[4];

  v11 = type metadata accessor for LayoutSubviews(0);
  v12 = __chkstk_darwin(v11);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *v5;
  v16 = *((double *)v5 + 1);
  v17 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  v18 = *((double *)v5 + 3);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v19 + 16))(v14, a5, v12);
  LOBYTE(v22[0]) = a2 & 1;
  v21[0] = a4 & 1;
  sub_100020D70(v15, v17, *(double *)&a1, a2 & 1, *(double *)&a3, a4 & 1, (uint64_t)v14, v22, v16, v18);
  return v22[3];
}

uint64_t sub_100020ABC(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  uint64_t v10;

  return sub_1000201B4(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, *(double *)(v10 + 8), *(double *)(v10 + 24), a6, *(_QWORD *)v10, *(void (**)(char *, uint64_t, uint64_t))(v10 + 16));
}

void sub_100020AE4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_100020B10(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DC700, a1);
}

unint64_t sub_100020B24()
{
  unint64_t result;

  result = qword_100112900;
  if (!qword_100112900)
  {
    result = swift_getWitnessTable(&unk_1000DC750, &type metadata for VFlowGridLayout);
    atomic_store(result, (unint64_t *)&qword_100112900);
  }
  return result;
}

void sub_100020B68(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100112908)
  {
    v2 = type metadata accessor for LayoutSubview(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for Int, v2, "offset element ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112908);
  }
}

void sub_100020BD0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v10 = type metadata accessor for LayoutSubviews(255);
    v11 = sub_1000211DC(a3, a4);
    v12 = a5(a1, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

uint64_t sub_100020C4C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_100020C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for LayoutSubviews(0);
  v6 = sub_1000211DC(&qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(&v11, v5, v6);
  dispatch thunk of Collection.endIndex.getter(&v10, v5, v6);
  result = dispatch thunk of Collection.distance(from:to:)(&v11, &v10, v5, v6);
  if (!a2)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (result == 0x8000000000000000 && a2 == -1)
    goto LABEL_13;
  v9 = result % a2 > 0;
  if (__OFADD__(result / a2, v9))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (result / a2 + v9 <= a3)
    return a3;
  else
    return result / a2 + v9;
}

uint64_t sub_100020D70@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t)@<X1>, double a3@<X2>, int a4@<W3>, double a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, double *a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  double v41;
  void (*v42)(_QWORD *, _QWORD);
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  double v46;
  double v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  double v53;
  double v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char v61;
  _QWORD v62[5];

  v58 = a4;
  v59 = a6;
  v53 = a5;
  v56 = a2;
  v51 = a8;
  v15 = type metadata accessor for LayoutSubview(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v55 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LayoutSubviews(0);
  v60 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v57 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007248(0, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview);
  __chkstk_darwin(v20);
  v22 = (char *)&v50 - v21;
  sub_100020BD0(0, &qword_100112938, &qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
  v24 = v23;
  __chkstk_darwin(v23);
  v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v50 - v28;
  v52 = a7;
  result = sub_100020C9C(a7, a1, (uint64_t)v56);
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (__OFSUB__(result, 1))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v31 = (double)(a1 - 1) * a9;
  v32 = (double)(result - 1) * a10;
  v33 = (double)a1;
  if ((v58 & 1) != 0)
    v34 = a3;
  else
    v34 = (a3 - v31) / (double)a1;
  v50 = result;
  v35 = (double)result;
  v36 = (v53 - v32) / (double)result;
  if ((v59 & 1) != 0)
    v36 = v53;
  v53 = v36;
  v54 = v34;
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v56(v26, v52, v18);
  v37 = sub_1000211DC(&qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(v62, v18, v37);
  *(_QWORD *)&v26[*(int *)(v24 + 36)] = v62[0];
  sub_1000212F8((uint64_t)v26, (uint64_t)v29);
  v38 = &v29[*(int *)(v24 + 36)];
  v39 = *(_QWORD *)v38;
  dispatch thunk of Collection.endIndex.getter(v62, v18, v37);
  if (v39 == v62[0])
  {
    v40 = 0.0;
    v41 = 0.0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v22, 1, 1, v15);
  }
  else
  {
    v41 = 0.0;
    v40 = 0.0;
    while (1)
    {
      v42 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v62, v38, v18, v37);
      (*(void (**)(char *))(v16 + 16))(v22);
      v42(v62, 0);
      v43 = v57;
      v56(v57, (uint64_t)v29, v18);
      dispatch thunk of Collection.formIndex(after:)(v38, v18, v37);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v18);
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v44(v22, 0, 1, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v22, 1, v15) == 1)
        break;
      v45 = v55;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v55, v22, v15);
      LOBYTE(v62[0]) = v58 & 1;
      v61 = v59 & 1;
      v46 = LayoutSubview.sizeThatFits(_:)(*(_QWORD *)&v54);
      if (v41 <= v46)
        v41 = v46;
      if (v40 <= v47)
        v40 = v47;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v45, v15);
      v48 = *(_QWORD *)v38;
      dispatch thunk of Collection.endIndex.getter(v62, v18, v37);
      if (v48 == v62[0])
      {
        v44(v22, 1, 1, v15);
        break;
      }
    }
  }
  sub_1000212BC((uint64_t)v29, &qword_100112938, &qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v52, v18);
  v49 = v51;
  *(_QWORD *)v51 = v50;
  v49[1] = v41;
  v49[2] = v40;
  v49[3] = v31 + v41 * v33;
  v49[4] = v32 + v40 * v35;
  return result;
}

uint64_t sub_1000211DC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002121C(uint64_t a1)
{
  uint64_t v2;

  sub_100007248(0, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100021268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100007248(0, &qword_100112918, (uint64_t (*)(uint64_t))sub_100020B68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000212BC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_100020BD0(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1000212F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100020BD0(0, &qword_100112938, &qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10002135C(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100112950)
  {
    v2 = type metadata accessor for LayoutSubviews(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, &type metadata for Int, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112950);
  }
}

void sub_1000213C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112958)
  {
    v0 = type metadata accessor for Range(0, &type metadata for Int, &protocol witness table for Int);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112958);
  }
}

unint64_t sub_10002141C()
{
  unint64_t result;

  result = qword_100112960[0];
  if (!qword_100112960[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, qword_100112960);
  }
  return result;
}

uint64_t sub_100021460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for LayoutSubviews(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_1000214CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for LayoutSubviews(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10001EC84(a1, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_100021548()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002156C(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  v4 = *(_QWORD *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, *(_QWORD *)(v1 + 16), "offset element ", 0);
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

double sub_1000215D8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10001F914(a1, a2, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_BYTE *)(v2 + 80), *(uint64_t **)(v2 + 88), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_100021624(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double (*v5)(uint64_t, _QWORD);
  uint64_t v6;

  v5 = *(double (**)(uint64_t, _QWORD))(v2 + 16);
  sub_10002135C(0);
  *a2 = v5(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)));
}

uint64_t sub_10002167C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of Layout.makeCache(subviews:)(a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000216AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t TupleTypeMetadata2;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  v5 = type metadata accessor for LayoutSubviews(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v3, v5, 0, 0);
  return v4(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_100021720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10002174C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for EqualWidthColumnsLayout.Cache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021720(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EqualWidthColumnsLayout.Cache);
}

id sub_100021764(uint64_t a1)
{
  return sub_1000217B4(a1, 2, &qword_1001267B0);
}

id sub_100021774(uint64_t a1)
{
  return sub_1000217B4(a1, 3, &qword_1001267B8);
}

id sub_100021784()
{
  id result;

  result = sub_100021888(3);
  qword_1001267C0 = (uint64_t)result;
  return result;
}

id sub_1000217A4(uint64_t a1)
{
  return sub_1000217B4(a1, 0, &qword_1001267C8);
}

id sub_1000217B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  id result;

  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v5, "setNumberStyle:", 1);
  objc_msgSend(v5, "setMinimumFractionDigits:", a2);
  objc_msgSend(v5, "setMaximumFractionDigits:", a2);
  result = objc_msgSend(v5, "setMinimumIntegerDigits:", 1);
  *a3 = v5;
  return result;
}

id sub_100021848()
{
  id result;

  result = sub_100021888(2);
  qword_1001267D0 = (uint64_t)result;
  return result;
}

id sub_100021868()
{
  id result;

  result = sub_100021888(0);
  qword_1001267D8 = (uint64_t)result;
  return result;
}

id sub_100021888(uint64_t a1)
{
  id v2;
  NSString v3;
  NSString v4;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v2, "setNumberStyle:", 1);
  objc_msgSend(v2, "setMinimumFractionDigits:", a1);
  objc_msgSend(v2, "setMaximumFractionDigits:", a1);
  objc_msgSend(v2, "setMinimumIntegerDigits:", 1);
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setPositivePrefix:", v3);

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setNegativePrefix:", v4);

  return v2;
}

uint64_t sub_100021960(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, double a6)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t inited;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  Class isa;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t ObjCClassFromMetadata;
  id v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;

  v97 = a2;
  v91 = a1;
  sub_10000EDE8(0, &qword_100112A98, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v11 = __chkstk_darwin(v10);
  v94 = (char *)&v87 - v12;
  v96 = type metadata accessor for Locale.Language(0, v11);
  v13 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v93 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v87 - v16;
  v18 = type metadata accessor for Locale(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v92 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v87 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v87 - v25;
  sub_10000EDE8(0, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v27);
  v29 = (char *)&v87 - v28;
  v30 = (void *)sub_1000221F8(a5, a3, a4, a6);
  v31 = v30;
  if ((a5 & 2) != 0 && v97)
  {
    v32 = (char *)v95 + OBJC_IVAR____TtC12StocksWidget14PriceFormatter_locale;
    v33 = (char *)v95 + OBJC_IVAR____TtC12StocksWidget14PriceFormatter_locale;
    v34 = v18;
    v95 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v95(v26, v33, v18);
    v90 = v31;
    ((void (*)(void))Locale.language.getter)();
    v35 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
    v36 = v35(v26, v34);
    Locale.Language.languageCode.getter(v36);
    v37 = *(void (**)(char *, uint64_t))(v13 + 8);
    v37(v17, v96);
    v38 = type metadata accessor for Locale.LanguageCode(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v29, 1, v38) == 1)
    {
      sub_10000E770((uint64_t)v29, &qword_100112AA0, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
    }
    else
    {
      v88 = Locale.LanguageCode.identifier.getter();
      v89 = v45;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v38);
      v46 = ((uint64_t (*)(char *, char *, uint64_t))v95)(v23, v32, v34);
      v47 = v93;
      Locale.language.getter(v46);
      v48 = v35(v23, v34);
      v49 = (uint64_t)v94;
      Locale.Language.region.getter(v48);
      v37(v47, v96);
      v50 = type metadata accessor for Locale.Region(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50) != 1)
      {
        v52 = (void (*)(char *, uint64_t))v35;
        v53 = Locale.Region.identifier.getter();
        v54 = v49;
        v55 = v53;
        v57 = v56;
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v50);
        sub_10000EDE8(0, &qword_100112AA8, (uint64_t (*)(uint64_t))sub_1000224C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1000DB8B0;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocaleCurrencyCode);
        *(_QWORD *)(inited + 40) = v59;
        v60 = v91;
        v61 = v97;
        *(_QWORD *)(inited + 48) = v91;
        *(_QWORD *)(inited + 56) = v61;
        *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocaleLanguageCode);
        *(_QWORD *)(inited + 72) = v62;
        v63 = v89;
        *(_QWORD *)(inited + 80) = v88;
        *(_QWORD *)(inited + 88) = v63;
        *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocaleCountryCode);
        *(_QWORD *)(inited + 104) = v64;
        *(_QWORD *)(inited + 112) = v55;
        *(_QWORD *)(inited + 120) = v57;
        swift_bridgeObjectRetain(v61);
        v65 = sub_10002C83C(inited);
        v66 = static Locale.identifier(fromComponents:)();
        v68 = v67;
        swift_bridgeObjectRelease(v65);
        v69 = v92;
        Locale.init(identifier:)(v66, v68);
        isa = Locale._bridgeToObjectiveC()().super.isa;
        v71 = v90;
        objc_msgSend(v90, "setLocale:", isa);

        if (v60 == 7356999 && v61 == 0xE300000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, 7356999, 0xE300000000000000, 0) & 1) != 0)
        {
          objc_msgSend(v71, "setNumberStyle:", 1);
          v72 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a6);
          v73 = objc_msgSend(v71, "stringFromNumber:", v72);

          if (!v73)
          {

            v52(v69, v34);
            return 0;
          }
          v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
          v76 = v75;

          v77 = type metadata accessor for Localized();
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v77);
          v79 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
          v98._object = (void *)0x80000001000E5460;
          v80._countAndFlagsBits = 0x402520704247;
          v80._object = (void *)0xE600000000000000;
          v81._countAndFlagsBits = 0;
          v81._object = (void *)0xE000000000000000;
          v98._countAndFlagsBits = 0xD000000000000021;
          v82 = NSLocalizedString(_:tableName:bundle:value:comment:)(v80, (Swift::String_optional)0, (NSBundle)v79, v81, v98);

          sub_10000EDE8(0, (unint64_t *)&qword_1001118F0, (uint64_t (*)(uint64_t))sub_100022520, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
          v84 = swift_allocObject(v83, 72, 7);
          *(_OWORD *)(v84 + 16) = xmmword_1000DB170;
          *(_QWORD *)(v84 + 56) = &type metadata for String;
          *(_QWORD *)(v84 + 64) = sub_100003B2C();
          *(_QWORD *)(v84 + 32) = v74;
          *(_QWORD *)(v84 + 40) = v76;
          v43 = String.init(format:_:)(v82._countAndFlagsBits, v82._object, v84);

          swift_bridgeObjectRelease(v82._object);
        }
        else
        {
          objc_msgSend(v71, "setNumberStyle:", 2);
          v85 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a6);
          v86 = objc_msgSend(v71, "stringFromNumber:", v85);

          if (v86)
          {
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);

          }
          else
          {

            v43 = 0;
          }
        }
        v52(v69, v34);
        return v43;
      }
      swift_bridgeObjectRelease(v89);
      sub_10000E770(v49, &qword_100112A98, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.Region);
    }
  }
  else
  {
    v40 = v30;
  }
  objc_msgSend(v31, "setNumberStyle:", 1);
  v41 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a6);
  v42 = objc_msgSend(v31, "stringFromNumber:", v41);

  if (!v42)
  {

    return 0;
  }
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);

  return v43;
}

uint64_t sub_1000220F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC12StocksWidget14PriceFormatter_locale;
  v2 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100022148()
{
  return type metadata accessor for PriceFormatter(0);
}

uint64_t type metadata accessor for PriceFormatter(uint64_t a1)
{
  uint64_t result;

  result = qword_100112A10;
  if (!qword_100112A10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PriceFormatter);
  return result;
}

uint64_t sub_10002218C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000221F8(char a1, uint64_t a2, char a3, double a4)
{
  double v5;
  double v9;
  uint64_t *v10;
  double v11;

  v5 = fabs(a4);
  if (a4 != 0.0 && v5 < 5.0 && (a1 & 1) == 0)
  {
    if (a3)
    {
      if (qword_100111410 != -1)
        swift_once(&qword_100111410, sub_100021774);
      v10 = &qword_1001267B8;
    }
    else
    {
      if (qword_100111418 != -1)
        swift_once(&qword_100111418, sub_100021784);
      v10 = &qword_1001267C0;
    }
  }
  else
  {
    if (a3)
    {
      if (a3 != 1)
      {
        if (!a2)
          goto LABEL_18;
        goto LABEL_40;
      }
      if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
      {
        if (v5 > -9.22337204e18)
        {
          if (v5 < 9.22337204e18)
          {
            if ((uint64_t)v5 < 1)
            {
LABEL_18:
              if (qword_100111408 != -1)
                swift_once(&qword_100111408, sub_100021764);
              v10 = &qword_1001267B0;
              return *v10;
            }
            v9 = log10(v5);
            if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
            {
              if (v9 > -9.22337204e18)
              {
                if (v9 < 9.22337204e18)
                {
                  if ((uint64_t)v9 < a2)
                    goto LABEL_18;
LABEL_40:
                  if (qword_100111420 == -1)
                  {
LABEL_41:
                    v10 = &qword_1001267C8;
                    return *v10;
                  }
LABEL_51:
                  swift_once(&qword_100111420, sub_1000217A4);
                  goto LABEL_41;
                }
                goto LABEL_54;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          goto LABEL_47;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v5 >= 9.22337204e18)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if ((uint64_t)v5 >= 1)
    {
      v11 = log10(v5);
      if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      if (v11 <= -9.22337204e18)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (v11 >= 9.22337204e18)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if ((uint64_t)v11 >= a2)
      {
        if (qword_100111430 == -1)
        {
LABEL_43:
          v10 = &qword_1001267D8;
          return *v10;
        }
LABEL_58:
        swift_once(&qword_100111430, sub_100021868);
        goto LABEL_43;
      }
    }
    if (qword_100111428 != -1)
      swift_once(&qword_100111428, sub_100021848);
    v10 = &qword_1001267D0;
  }
  return *v10;
}

void sub_1000224C0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_100112AB0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, &type metadata for String, 0, 0);
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112AB0);
  }
}

unint64_t sub_100022520()
{
  unint64_t result;
  void *v1;

  result = qword_1001118F8;
  if (!qword_1001118F8)
  {
    v1 = &protocol descriptor for CVarArg;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1001118F8);
  }
  return result;
}

uint64_t sub_100022574(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t *, uint64_t, int *, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = (_OWORD *)(a1 + 48);
    v11 = a2 + 6;
    v12 = a2[9];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v12 == 1)
    {
      v13 = *((_OWORD *)a2 + 4);
      *v10 = *v11;
      *(_OWORD *)(a1 + 64) = v13;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRetain(v12);
    }
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v15 = a2[13];
    v16 = a2[14];
    v17 = a2[15];
    *(_QWORD *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 120) = v17;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    *(_QWORD *)(a1 + 136) = a2[17];
    v18 = *(int *)(a3 + 36);
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    *(_QWORD *)(a1 + 104) = v15;
    v21 = (int *)type metadata accessor for PreparedSparkline(0);
    v22 = *((_QWORD *)v21 - 1);
    v23 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v22 + 48);
    v24 = swift_bridgeObjectRetain(v16);
    if (v23(v20, 1, v21, v24))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      v27 = v21[5];
      v43 = (char *)v19 + v27;
      v44 = v22;
      v28 = (char *)v20 + v27;
      v29 = type metadata accessor for Date(0);
      v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
      v31 = swift_bridgeObjectRetain(v26);
      v30(v43, v28, v29, v31);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v30)(&v43[*(int *)(v32 + 36)], &v28[*(int *)(v32 + 36)], v29);
      v33 = v21[6];
      v34 = (char *)v19 + v33;
      v35 = (char *)v20 + v33;
      v36 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      *(_OWORD *)((char *)v19 + v21[7]) = *(_OWORD *)((char *)v20 + v21[7]);
      v37 = v21[8];
      v38 = (char *)v19 + v37;
      v39 = (char *)v20 + v37;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v44 + 56))(v19, 0, 1, v21);
    }
    v40 = *(int *)(a3 + 40);
    v41 = *(uint64_t *)((char *)a2 + v40);
    *(_QWORD *)(a1 + v40) = v41;
    swift_bridgeObjectRetain(v41);
  }
  return a1;
}

void sub_100022800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100112AB8)
  {
    v2 = type metadata accessor for Date(255);
    v3 = sub_100022860();
    v4 = type metadata accessor for ClosedRange(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100112AB8);
  }
}

unint64_t sub_100022860()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112AC0;
  if (!qword_100112AC0)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100112AC0);
  }
  return result;
}

uint64_t sub_1000228A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[9];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[14]);
  v5 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  v6 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for Date(0);
    v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    sub_100022800(0);
    v9(&v7[*(int *)(v10 + 36)], v8);
    v11 = (char *)v5 + *(int *)(v6 + 24);
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 40)));
}

uint64_t sub_1000229B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t *, uint64_t, int *, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = (_OWORD *)(a1 + 48);
  v10 = a2 + 48;
  v11 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(v10 + 16);
    *v9 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(v10 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v11;
    swift_bridgeObjectRetain(v11);
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v15;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v16 = *(int *)(a3 + 36);
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  *(_QWORD *)(a1 + 104) = v13;
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v20 + 48);
  v22 = swift_bridgeObjectRetain(v14);
  if (v21(v18, 1, v19, v22))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = *v18;
    *v17 = *v18;
    v25 = v19[5];
    v26 = (char *)v17 + v25;
    v45 = a3;
    v27 = (char *)v18 + v25;
    v28 = type metadata accessor for Date(0);
    v44 = v20;
    v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
    v30 = swift_bridgeObjectRetain(v24);
    v29(v26, v27, v28, v30);
    sub_100022800(0);
    v32 = *(int *)(v31 + 36);
    v33 = &v27[v32];
    a3 = v45;
    ((void (*)(char *, char *, uint64_t))v29)(&v26[v32], v33, v28);
    v34 = v19[6];
    v35 = (char *)v17 + v34;
    v36 = (char *)v18 + v34;
    v37 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
    v38 = v19[8];
    v39 = (char *)v17 + v38;
    v40 = (char *)v18 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v44 + 56))(v17, 0, 1, v19);
  }
  v41 = *(int *)(a3 + 40);
  v42 = *(_QWORD *)(a2 + v41);
  *(_QWORD *)(a1 + v41) = v42;
  swift_bridgeObjectRetain(v42);
  return a1;
}

uint64_t sub_100022C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t, int *);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v75;
  uint64_t v76;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  if (v14 == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 64);
      *v12 = *v13;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      v18 = *(_QWORD *)v13;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)v12 = v18;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v19;
      swift_bridgeObjectRetain(v19);
    }
  }
  else if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
    v17 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v17;
  }
  else
  {
    v20 = *(_QWORD *)v13;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v12 = v20;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v21 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v14);
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v22 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v22;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v25;
  v26 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v26;
  v27 = *(int *)(a3 + 36);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = (int *)type metadata accessor for PreparedSparkline(0);
  v31 = *((_QWORD *)v30 - 1);
  v32 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v36 = *v29;
      *v28 = *v29;
      v37 = v30[5];
      v75 = (char *)v28 + v37;
      v38 = (char *)v29 + v37;
      v76 = a3;
      v39 = type metadata accessor for Date(0);
      v40 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v39 - 8) + 16);
      v41 = swift_bridgeObjectRetain(v36);
      v40(v75, v38, v39, v41);
      sub_100022800(0);
      v43 = v39;
      a3 = v76;
      ((void (*)(char *, char *, uint64_t))v40)(&v75[*(int *)(v42 + 36)], &v38[*(int *)(v42 + 36)], v43);
      v44 = v30[6];
      v45 = (char *)v28 + v44;
      v46 = (char *)v29 + v44;
      v47 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      *(_OWORD *)((char *)v28 + v30[7]) = *(_OWORD *)((char *)v29 + v30[7]);
      v48 = v30[8];
      v49 = (char *)v28 + v48;
      v50 = (char *)v29 + v48;
      v51 = v50[8];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v51;
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_16;
    }
  }
  else
  {
    if (!v34)
    {
      v52 = *v29;
      v53 = *v28;
      *v28 = *v29;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRelease(v53);
      v54 = v30[5];
      v55 = (char *)v28 + v54;
      v56 = (char *)v29 + v54;
      v57 = type metadata accessor for Date(0);
      v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 24);
      v58(v55, v56, v57);
      sub_100022800(0);
      v58(&v55[*(int *)(v59 + 36)], &v56[*(int *)(v59 + 36)], v57);
      v60 = v30[6];
      v61 = (char *)v28 + v60;
      v62 = (char *)v29 + v60;
      v63 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
      v64 = v30[7];
      v65 = (_QWORD *)((char *)v28 + v64);
      v66 = (_QWORD *)((char *)v29 + v64);
      *v65 = *v66;
      v65[1] = v66[1];
      v67 = v30[8];
      v68 = (char *)v28 + v67;
      v69 = (char *)v29 + v67;
      v70 = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v70;
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      goto LABEL_16;
    }
    sub_10001DF70((uint64_t)v28, type metadata accessor for PreparedSparkline);
  }
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
LABEL_16:
  v71 = *(int *)(a3 + 40);
  v72 = *(_QWORD *)(a2 + v71);
  v73 = *(_QWORD *)(a1 + v71);
  *(_QWORD *)(a1 + v71) = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73);
  return a1;
}

uint64_t sub_10002304C(uint64_t a1)
{
  destroy for StockPrice(a1);
  return a1;
}

uint64_t sub_100023080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v28;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(int *)(a3 + 36);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v11 = (int *)type metadata accessor for PreparedSparkline(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = v11[5];
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    v17 = type metadata accessor for Date(0);
    v28 = v3;
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    sub_100022800(0);
    v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
    v3 = v28;
    v20 = v11[6];
    v21 = (char *)v9 + v20;
    v22 = (char *)v10 + v20;
    v23 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_OWORD *)((char *)v9 + v11[7]) = *(_OWORD *)((char *)v10 + v11[7]);
    v24 = v11[8];
    v25 = (char *)v9 + v24;
    v26 = (char *)v10 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *((_BYTE *)v9 + v11[9]) = *((_BYTE *)v10 + v11[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)(a1 + *(int *)(v3 + 40)) = *(_QWORD *)(a2 + *(int *)(v3 + 40));
  return a1;
}

uint64_t sub_10002325C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, int *);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14 == 1)
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 72);
  if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
LABEL_4:
    v16 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v16;
    goto LABEL_6;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v19 = *(int *)(a3 + 36);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for PreparedSparkline(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v28 = v22[5];
      v29 = (char *)v20 + v28;
      v30 = (char *)v21 + v28;
      v31 = type metadata accessor for Date(0);
      v58 = a3;
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
      v32(v29, v30, v31);
      sub_100022800(0);
      v32(&v29[*(int *)(v33 + 36)], &v30[*(int *)(v33 + 36)], v31);
      a3 = v58;
      v34 = v22[6];
      v35 = (char *)v20 + v34;
      v36 = (char *)v21 + v34;
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v38 = v22[8];
      v39 = (char *)v20 + v38;
      v40 = (char *)v21 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_14;
    }
  }
  else
  {
    if (!v26)
    {
      v41 = *v20;
      *v20 = *v21;
      swift_bridgeObjectRelease(v41);
      v42 = v22[5];
      v43 = (char *)v20 + v42;
      v44 = (char *)v21 + v42;
      v45 = type metadata accessor for Date(0);
      v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 40);
      v46(v43, v44, v45);
      sub_100022800(0);
      v46(&v43[*(int *)(v47 + 36)], &v44[*(int *)(v47 + 36)], v45);
      v48 = v22[6];
      v49 = (char *)v20 + v48;
      v50 = (char *)v21 + v48;
      v51 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v52 = v22[8];
      v53 = (char *)v20 + v52;
      v54 = (char *)v21 + v52;
      v53[8] = v54[8];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      goto LABEL_14;
    }
    sub_10001DF70((uint64_t)v20, type metadata accessor for PreparedSparkline);
  }
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_14:
  v55 = *(int *)(a3 + 40);
  v56 = *(_QWORD *)(a1 + v55);
  *(_QWORD *)(a1 + v55) = *(_QWORD *)(a2 + v55);
  swift_bridgeObjectRelease(v56);
  return a1;
}

uint64_t sub_1000235D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000235E0);
}

uint64_t sub_1000235E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_100023674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023680);
}

uint64_t sub_100023680(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MediumDetailContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100112B20;
  if (!qword_100112B20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MediumDetailContentView);
  return result;
}

void sub_100023748(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = " ";
  v4[1] = &unk_1000DC900;
  v4[2] = &unk_1000DC918;
  v4[3] = &unk_1000DC930;
  v4[4] = &unk_1000DC948;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t sub_100023808(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E82E4, 1);
}

_QWORD *sub_100023818@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t KeyPath;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _QWORD v126[2];
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t (*v172)();
  uint64_t v173;

  v92 = a2;
  v3 = type metadata accessor for RegularSparklineView(0);
  __chkstk_darwin(v3);
  v87 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v99 = (uint64_t)&v73 - v6;
  sub_100024310(0);
  __chkstk_darwin(v7);
  v98 = (uint64_t *)((char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000242AC(0);
  v90 = v9;
  __chkstk_darwin(v9);
  v89 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v100 = (uint64_t)&v73 - v12;
  v96 = *((unsigned __int8 *)a1 + 80);
  v13 = *a1;
  v14 = a1[1];
  v15 = a1[3];
  v94 = a1[2];
  v95 = v13;
  v106 = v15;
  v107 = v14;
  v16 = a1[5];
  v93 = a1[4];
  v18 = a1[7];
  v104 = a1[6];
  v17 = v104;
  v105 = v16;
  v19 = a1[9];
  v102 = a1[8];
  v20 = v102;
  v103 = v18;
  v88 = v19;
  v91 = a1[11];
  v115 = *((unsigned __int8 *)a1 + 96);
  v21 = a1[13];
  v101 = a1[14];
  v22 = v101;
  v113 = a1[15];
  v114 = v21;
  v112 = *((unsigned __int8 *)a1 + 128);
  v111 = a1[17];
  v110 = *((unsigned __int8 *)a1 + 144);
  KeyPath = swift_getKeyPath(&unk_1000DC9B0);
  v23 = swift_allocObject(&unk_100104B88, 41, 7);
  v108 = v23;
  *(_QWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 24) = 1;
  *(_QWORD *)(v23 + 32) = 0;
  *(_BYTE *)(v23 + 40) = 0;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  sub_100024540(v17, v18, v20, v19);
  swift_bridgeObjectRetain(v22);
  v25 = static VerticalAlignment.center.getter(v24);
  v26 = v98;
  *v98 = v25;
  v26[1] = 0x4040000000000000;
  *((_BYTE *)v26 + 16) = 0;
  sub_100024554(0);
  v28 = (_OWORD *)((char *)v26 + *(int *)(v27 + 44));
  v97 = static HorizontalAlignment.leading.getter();
  sub_100023EE0(a1, (uint64_t)&v152);
  v29 = v152;
  v30 = v153;
  v31 = v154;
  v82 = v154;
  v83 = v153;
  v32 = v155;
  v84 = v155;
  v85 = v152;
  v33 = v156;
  LOBYTE(v16) = v157;
  v80 = v158;
  v81 = v156;
  v78 = v160;
  v79 = v159;
  v76 = v162;
  v77 = v161;
  v74 = v164;
  v75 = v163;
  v117 = 1;
  v116 = v157;
  v86 = v157;
  v34 = type metadata accessor for MediumDetailContentView(0);
  v35 = v99;
  sub_1000245D0((uint64_t)a1 + *(int *)(v34 + 36), v99);
  v36 = v35;
  v37 = v87;
  sub_10001DE2C(v36, v87, type metadata accessor for RegularSparklineView);
  v118 = (unint64_t)v97;
  LOBYTE(v119) = 1;
  *((_QWORD *)&v119 + 1) = v29;
  *(_QWORD *)&v120 = v30;
  *((_QWORD *)&v120 + 1) = v31;
  *(_QWORD *)&v121 = v32;
  *((_QWORD *)&v121 + 1) = v33;
  LOBYTE(v122) = v16;
  v39 = v79;
  v38 = v80;
  *((_QWORD *)&v122 + 1) = v80;
  *(_QWORD *)&v123 = v79;
  v41 = v77;
  v40 = v78;
  *((_QWORD *)&v123 + 1) = v78;
  *(_QWORD *)&v124 = v77;
  v43 = v75;
  v42 = v76;
  *((_QWORD *)&v124 + 1) = v76;
  *(_QWORD *)&v125 = v75;
  v44 = v74;
  *((_QWORD *)&v125 + 1) = v74;
  v45 = v121;
  v28[2] = v120;
  v28[3] = v45;
  v46 = v125;
  v28[6] = v124;
  v28[7] = v46;
  v47 = v123;
  v28[4] = v122;
  v28[5] = v47;
  v48 = v119;
  *v28 = v118;
  v28[1] = v48;
  sub_1000243A8(0);
  sub_10001DE2C(v37, (uint64_t)v28 + *(int *)(v49 + 48), type metadata accessor for RegularSparklineView);
  sub_10002462C(&v118);
  sub_10001DF70(v99, type metadata accessor for RegularSparklineView);
  sub_10001DF70(v37, type metadata accessor for RegularSparklineView);
  v126[0] = v97;
  v126[1] = 0;
  v127 = 1;
  v128 = v85;
  v129 = v83;
  v130 = v82;
  v131 = v84;
  v132 = v81;
  v133 = v86;
  v134 = v38;
  v135 = v39;
  v136 = v40;
  v137 = v41;
  v138 = v42;
  v139 = v43;
  v140 = v44;
  sub_1000246C0(v126);
  v50 = swift_getKeyPath(&unk_1000DC9B0);
  v51 = swift_allocObject(&unk_100104BB0, 41, 7);
  *(_QWORD *)(v51 + 16) = 0;
  *(_BYTE *)(v51 + 24) = 0;
  *(_QWORD *)(v51 + 32) = 0;
  *(_BYTE *)(v51 + 40) = 1;
  v52 = v98;
  v53 = v89;
  sub_10001DE2C((uint64_t)v98, v89, (uint64_t (*)(_QWORD))sub_100024310);
  v54 = (uint64_t *)(v53 + *(int *)(v90 + 36));
  *v54 = v50;
  v54[1] = (uint64_t)sub_10002453C;
  v54[2] = v51;
  sub_10001DF70((uint64_t)v52, (uint64_t (*)(_QWORD))sub_100024310);
  v55 = v100;
  sub_100024774(v53, v100);
  sub_10001DE2C(v55, v53, (uint64_t (*)(_QWORD))sub_1000242AC);
  LOBYTE(v41) = v96;
  LOBYTE(v141) = v96;
  v57 = v94;
  v56 = v95;
  *((_QWORD *)&v141 + 1) = v95;
  *(_QWORD *)&v142 = v107;
  *((_QWORD *)&v142 + 1) = v94;
  *(_QWORD *)&v143 = v106;
  v58 = v93;
  *((_QWORD *)&v143 + 1) = v93;
  *(_QWORD *)&v144 = v105;
  *((_QWORD *)&v144 + 1) = v104;
  *(_QWORD *)&v145 = v103;
  *((_QWORD *)&v145 + 1) = v102;
  v59 = v88;
  *(_QWORD *)&v146 = v88;
  v60 = v91;
  *((_QWORD *)&v146 + 1) = v91;
  *(_QWORD *)&v147 = v115;
  *((_QWORD *)&v147 + 1) = v114;
  *(_QWORD *)&v148 = v101;
  *((_QWORD *)&v148 + 1) = v113;
  *(_QWORD *)&v149 = v112;
  *((_QWORD *)&v149 + 1) = v111;
  LOBYTE(v150) = v110;
  *((_QWORD *)&v150 + 1) = KeyPath;
  *(_QWORD *)&v151 = sub_10002453C;
  *((_QWORD *)&v151 + 1) = v108;
  v61 = v146;
  v62 = v92;
  v92[4] = v145;
  v62[5] = v61;
  v63 = v141;
  v64 = v142;
  v65 = v144;
  v62[2] = v143;
  v62[3] = v65;
  *v62 = v63;
  v62[1] = v64;
  v66 = v147;
  v67 = v148;
  v68 = v151;
  v69 = v149;
  v62[9] = v150;
  v62[10] = v68;
  v62[7] = v67;
  v62[8] = v69;
  v62[6] = v66;
  v70 = v62;
  sub_1000241DC(0);
  sub_10001DE2C(v53, (uint64_t)v70 + *(int *)(v71 + 48), (uint64_t (*)(_QWORD))sub_1000242AC);
  sub_1000247B8(&v141);
  sub_10001DF70(v100, (uint64_t (*)(_QWORD))sub_1000242AC);
  sub_10001DF70(v53, (uint64_t (*)(_QWORD))sub_1000242AC);
  LOBYTE(v152) = v41;
  v153 = v56;
  v154 = v107;
  v155 = v57;
  v156 = v106;
  v157 = v58;
  v158 = v105;
  v159 = v104;
  v160 = v103;
  v161 = v102;
  v162 = v59;
  v163 = v60;
  v164 = v115;
  v165 = v114;
  v166 = v101;
  v167 = v113;
  v168 = v112;
  v169 = v111;
  v170 = v110;
  v171 = KeyPath;
  v172 = sub_10002453C;
  v173 = v108;
  return sub_100024898(&v152);
}

uint64_t sub_100023EE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)((char *)a1 + *(int *)(type metadata accessor for MediumDetailContentView(0) + 40));
  if (*(_QWORD *)(v4 + 16) >= 3uLL)
    v5 = 3;
  else
    v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v7 = swift_bridgeObjectRetain(v4);
  v8 = swift_unknownObjectRetain_n(v7);
  v9 = (_QWORD *)swift_dynamicCastClass(v8, v6);
  if (!v9)
  {
    swift_bridgeObjectRelease(v4);
    v9 = _swiftEmptyArrayStorage;
  }
  v10 = v9[2];
  swift_release(v9);
  if (v10 == v5)
  {
    v11 = (_QWORD *)swift_dynamicCastClass(v4, v6);
    if (!v11)
    {
      swift_bridgeObjectRelease(v4);
      v11 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    v11 = sub_10007F354(v4, v4 + 32, 0, (2 * v5) | 1);
  }
  swift_bridgeObjectRelease(v4);
  KeyPath = swift_getKeyPath(&unk_1000DC9B0);
  v13 = swift_allocObject(&unk_100104BD8, 41, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 24) = 1;
  *(_QWORD *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 40) = 0;
  v14 = a1[6];
  v15 = a1[7];
  v16 = a1[8];
  v17 = a1[9];
  v18 = swift_getKeyPath(&unk_1000DC9B0);
  v19 = swift_allocObject(&unk_100104C00, 41, 7);
  *(_QWORD *)(v19 + 16) = 0;
  *(_BYTE *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_BYTE *)(v19 + 40) = 1;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = sub_10002453C;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = 0x4010000000000000;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v17;
  *(_QWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = sub_10002453C;
  *(_QWORD *)(a2 + 96) = v19;
  swift_bridgeObjectRetain(v11);
  swift_retain(KeyPath);
  swift_retain(v13);
  sub_100024540(v14, v15, v16, v17);
  swift_retain(v18);
  swift_retain(v19);
  sub_100024540(v14, v15, v16, v17);
  sub_100024750(v14, v15, v16, v17);
  swift_release(v13);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v11);
  swift_release(v19);
  return swift_release(v18);
}

_QWORD *sub_10002411C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  *(_QWORD *)a1 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a1 + 8) = 0x4020000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  sub_100024160(0);
  return sub_100023818(v1, (_OWORD *)(a1 + *(int *)(v3 + 44)));
}

void sub_100024160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112B70)
  {
    sub_10000EDE8(255, &qword_100112B78, (uint64_t (*)(uint64_t))sub_1000241DC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v2, &protocol witness table for _VStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112B70);
  }
}

void sub_1000241DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100112B80)
  {
    sub_1000244C8(255, &qword_100112B88, (uint64_t)&type metadata for SymbolSummaryTicker);
    v3 = v2;
    sub_1000242AC(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112B80);
  }
}

void sub_100024258()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112B90)
  {
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier(0, &type metadata for EdgeInsets);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112B90);
  }
}

void sub_1000242AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112B98)
  {
    sub_100024310(255);
    v3 = v2;
    sub_100024258();
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112B98);
  }
}

void sub_100024310(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112BA0)
  {
    sub_10000EDE8(255, &qword_100112BA8, (uint64_t (*)(uint64_t))sub_1000243A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_100024AA8(&qword_100112BE8, &qword_100112BA8, (uint64_t (*)(uint64_t))sub_1000243A8);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112BA0);
  }
}

void sub_1000243A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100112BB0)
  {
    sub_100024A18(255, &qword_100112BB8, &qword_100112BC0, (uint64_t (*)(uint64_t))sub_100024434, &qword_100112BE0);
    v3 = v2;
    v4 = type metadata accessor for RegularSparklineView(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112BB0);
  }
}

void sub_100024434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata3;
  uint64_t v6;

  if (!qword_100112BC8)
  {
    sub_1000244C8(255, &qword_100112BD0, (uint64_t)&type metadata for QuoteDetailsView);
    v3 = v2;
    sub_1000244C8(255, &qword_100112BD8, (uint64_t)&type metadata for LargePriceView);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, &type metadata for Spacer, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100112BC8);
  }
}

void sub_1000244C8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_100024258();
    v7 = type metadata accessor for ModifiedContent(a1, a3, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10002452C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100024540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRetain(a4);
  return result;
}

void sub_100024554(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112BF0)
  {
    sub_10000EDE8(255, &qword_100112BA8, (uint64_t (*)(uint64_t))sub_1000243A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112BF0);
  }
}

uint64_t sub_1000245D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10002462C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[15];
  swift_bridgeObjectRetain(a1[3]);
  swift_retain(v2);
  swift_retain(v3);
  sub_100024540(v4, v5, v6, v7);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

_QWORD *sub_1000246C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[15];
  swift_release(a1[6]);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_100024750(v4, v5, v6, v7);
  swift_release(v9);
  swift_release(v8);
  return a1;
}

uint64_t sub_100024750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t sub_100024764()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100024774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000242AC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1000247B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[13];
  v11 = a1[14];
  v12 = a1[11];
  v13 = a1[19];
  v14 = a1[21];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100024540(v4, v5, v6, v7);
  sub_100024540(v12, v8, v9, v11);
  swift_retain(v13);
  swift_retain(v14);
  return a1;
}

_QWORD *sub_100024898(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[13];
  v11 = a1[14];
  v12 = a1[11];
  v13 = a1[21];
  v14 = a1[19];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  sub_100024750(v4, v5, v6, v7);
  sub_100024750(v12, v8, v9, v11);
  swift_release(v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_100024978()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100024988()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

_QWORD *sub_100024998(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000550E4(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

unint64_t sub_1000249B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112BF8;
  if (!qword_100112BF8)
  {
    sub_100024A18(255, &qword_100112C00, &qword_100112B78, (uint64_t (*)(uint64_t))sub_1000241DC, &qword_100112C08);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100112BF8);
  }
  return result;
}

void sub_100024A18(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    sub_10000EDE8(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v11 = v10;
    v12 = sub_100024AA8(a5, a3, a4);
    v13 = type metadata accessor for VStack(a1, v11, v12);
    if (!v14)
      atomic_store(v13, a2);
  }
}

uint64_t sub_100024AA8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_10000EDE8(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100024AF0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a2[4];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    a1[3] = a2[3];
    a1[4] = v8;
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v13 = v12;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
    {
      v14 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v13, v15);
    v18 = a3[7];
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v22 = v21;
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v23 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v19, v20, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v20;
      *v19 = *v20;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v22, v24);
    v26 = a3[8];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = v28[8];
    sub_100024CBC(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    v27[8] = v30;
  }
  return v4;
}

uint64_t sub_100024CBC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100024CC8(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v4 = (_QWORD *)(a1 + a2[6]);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[7]);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return sub_100024DD8(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
}

uint64_t sub_100024DD8(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100024DE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = a3[6];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v12 = v11;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
  {
    v13 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v10;
    *v9 = *v10;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v12, v14);
  v16 = a3[7];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v20 = v19;
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v21 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v18;
    *v17 = *v18;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v20, v22);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_100024CBC(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  return a1;
}

uint64_t sub_100024F84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100028528(a1 + v10, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v12;
      *v11 = *v12;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v14, v16);
    v18 = a3[7];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    sub_100028528(a1 + v18, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v22 = v21;
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v23 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v19, v20, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v20;
      *v19 = *v20;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v22, v24);
  }
  v26 = a3[8];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  sub_100024CBC(*(_QWORD *)v28, v30);
  v31 = *(_QWORD *)v27;
  v32 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = v30;
  sub_100024DD8(v31, v32);
  return a1;
}

uint64_t sub_100025190(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload(v7, v10, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v16 = v15;
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v17 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v13, v14, v17);
    swift_storeEnumTagMultiPayload(v13, v16, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

uint64_t sub_100025314(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_100028528(a1 + v10, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v11, v12, v15);
      swift_storeEnumTagMultiPayload(v11, v14, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    v16 = a3[7];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_100028528(a1 + v16, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v20 = v19;
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v21 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v17, v18, v21);
      swift_storeEnumTagMultiPayload(v17, v20, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  LOBYTE(v24) = *((_BYTE *)v24 + 8);
  v26 = *(_QWORD *)v23;
  v27 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = (_BYTE)v24;
  sub_100024DD8(v26, v27);
  return a1;
}

uint64_t sub_1000254FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025508);
}

uint64_t sub_100025508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      sub_10000EDE8(0, &qword_100112C50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000255D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000255E4);
}

uint64_t sub_1000255E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      sub_10000EDE8(0, &qword_100112C50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SymbolTrendView(uint64_t a1)
{
  uint64_t result;

  result = qword_100112CB0;
  if (!qword_100112CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SymbolTrendView);
  return result;
}

void sub_1000256EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_1000DC9F0;
  v6[1] = &unk_1000DCA08;
  sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000EDE8(319, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1000DCA20;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000257BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8350, 1);
}

void sub_1000257CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = type metadata accessor for Text.Layout(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = sub_100003D3C(&qword_100112E78, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
    dispatch thunk of Collection.startIndex.getter(&v16, v6, v10);
    dispatch thunk of Collection.endIndex.getter(&v15, v6, v10);
    dispatch thunk of Collection.index(_:offsetBy:limitedBy:)(&v13, &v16, a1, &v15, v6, v10);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v2, v6);
    if ((v14 & 1) != 0)
    {
      dispatch thunk of Collection.endIndex.getter(&v16, v6, v10);
      v11 = *(void (**)(char *, uint64_t))(v7 + 8);
      v11(v9, v6);
    }
    else
    {
      v12 = v13;
      v11 = *(void (**)(char *, uint64_t))(v7 + 8);
      v11(v9, v6);
      v16 = v12;
    }
    dispatch thunk of Collection.endIndex.getter(&v15, v6, v10);
    if (v15 >= v16)
    {
      v13 = v16;
      v14 = v15;
      dispatch thunk of Collection.subscript.getter(a2, &v13, v6, v10);
      v11(v3, v6);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100025958@<X0>(uint64_t a1@<X8>)
{
  return sub_10002597C((uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, &qword_100112940, (uint64_t)&protocol conformance descriptor for LayoutSubviews, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutSubview, a1);
}

uint64_t sub_10002597C@<X0>(uint64_t (*a1)(uint64_t)@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(_QWORD *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;

  v10 = a1(0);
  v11 = sub_100003D3C(a2, a1, a3);
  dispatch thunk of Collection.startIndex.getter(&v20, v10, v11);
  dispatch thunk of Collection.endIndex.getter(v19, v10, v11);
  if (v20 == v19[0])
  {
    v12 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a5, 1, 1, v12);
  }
  else
  {
    v14 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v19, &v20, v10, v11);
    v16 = v15;
    v17 = a4(0);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a5, v16, v17);
    v14(v19, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a5, 0, 1, v17);
  }
}

uint64_t sub_100025AA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v6);
  v0 = v7;
  v1 = v8;
  sub_100007184(v6, v7);
  v2 = sub_1000280C4();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v2, v2, v0, v1);
  if (v5)
  {
    sub_10001D968(&v4, (uint64_t)&unk_100112C10);
    return sub_100007164(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100025B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  void (*v13)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - v10;
  sub_100045E2C((uint64_t *)((char *)&v22 - v10));
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  if (v12 == enum case for WidgetFamily.accessoryCircular(_:)
    || v12 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v12 == enum case for WidgetFamily.accessoryInline(_:))
  {
    v13(v11, v5);
    sub_10001DE2C(v1, (uint64_t)v4, type metadata accessor for SymbolTrendView);
    v20 = 1;
  }
  else
  {
    v13(v8, v5);
    v13(v11, v5);
    sub_10001DE2C(v1, (uint64_t)v4, type metadata accessor for SymbolTrendView);
    v16 = &v4[*(int *)(v2 + 32)];
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_100024CBC(*(_QWORD *)v16, v18);
    v19 = sub_100045C74(v17, v18);
    sub_100024DD8(v17, v18);
    v20 = v19 ^ 1;
  }
  sub_10001DF70((uint64_t)v4, type metadata accessor for SymbolTrendView);
  return v20 & 1;
}

uint64_t sub_100025D28@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t OpaqueTypeConformance2;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char v193;
  char v194;
  char v195;
  char v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v163 = a1;
  v180 = a2;
  v3 = type metadata accessor for DynamicTypeSize(0);
  v156 = *(_QWORD *)(v3 - 8);
  v157 = v3;
  __chkstk_darwin(v3);
  v155 = (char *)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000270DC(0, &qword_100112DB8, (uint64_t (*)(uint64_t))sub_10002715C, (uint64_t (*)(void))sub_100027424, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>);
  v177 = v5;
  v160 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v159 = (char *)&v152 - v6;
  sub_10002701C(0);
  v179 = v7;
  v162 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v158 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v161 = (char *)&v152 - v10;
  sub_100027728(0, &qword_100112E40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v173 = v11;
  __chkstk_darwin(v11);
  v175 = (char *)&v152 - v12;
  sub_1000270DC(0, &qword_100112D58, (uint64_t (*)(uint64_t))sub_100026D54, (uint64_t (*)(void))sub_100026E4C, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>);
  v174 = v13;
  v154 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v153 = (char *)&v152 - v14;
  sub_100026D40(0);
  __chkstk_darwin(v15);
  v178 = (uint64_t)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v176 = (char *)&v152 - v18;
  v19 = type metadata accessor for WidgetRenderingMode(0);
  v168 = *(_QWORD *)(v19 - 8);
  v169 = v19;
  __chkstk_darwin(v19);
  v167 = (char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v165 = (uint64_t *)((char *)&v152 - v22);
  sub_10000EDE8(0, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  v164 = v23;
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v152 - v24);
  v26 = type metadata accessor for Image.Scale(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026C6C(0);
  v31 = v30;
  __chkstk_darwin(v30);
  v33 = (uint64_t *)((char *)&v152 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100026BF0(0);
  v166 = v34;
  __chkstk_darwin(v34);
  v36 = (char *)&v152 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026B74(0);
  v171 = v37;
  __chkstk_darwin(v37);
  v172 = (uint64_t)&v152 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v170 = (uint64_t)&v152 - v40;
  v42 = __chkstk_darwin(v41);
  v181 = (uint64_t)&v152 - v43;
  v44 = *a1;
  v45 = 0xD000000000000015;
  if ((v44 & 1) != 0)
    v45 = 0xD000000000000017;
  v46 = 0x80000001000E5490;
  if ((v44 & 1) == 0)
    v46 = 0x80000001000E54B0;
  if (v44 == 2)
    v47 = 0x73756E696DLL;
  else
    v47 = v45;
  if (v44 == 2)
    v48 = 0xE500000000000000;
  else
    v48 = v46;
  v49 = Image.init(systemName:)(v47, v48, v42);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for Image.Scale.small(_:), v26);
  KeyPath = swift_getKeyPath(&unk_1000DCA88);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v25 + *(int *)(v164 + 28), v29, v26);
  *v25 = KeyPath;
  sub_100027E9C((uint64_t)v25, (uint64_t)v33 + *(int *)(v31 + 36));
  *v33 = v49;
  swift_retain(v49);
  sub_100028528((uint64_t)v25, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  v51 = v49;
  v52 = v163;
  swift_release(v51);
  type metadata accessor for SymbolTrendView(0);
  v53 = v165;
  v54 = sub_100045EC0(v165);
  v55 = v167;
  static WidgetRenderingMode.fullColor.getter(v54);
  v56 = static WidgetRenderingMode.== infix(_:_:)(v53, v55);
  v57 = *(void (**)(char *, uint64_t))(v168 + 8);
  v58 = v55;
  v59 = v169;
  v57(v58, v169);
  v60 = ((uint64_t (*)(_QWORD *, uint64_t))v57)(v53, v59);
  if ((v56 & 1) != 0)
    v61 = sub_100026940();
  else
    v61 = static Color.primary.getter(v60);
  v62 = v61;
  v63 = swift_getKeyPath(&unk_1000DCAB8);
  sub_10001DE2C((uint64_t)v33, (uint64_t)v36, (uint64_t (*)(_QWORD))sub_100026C6C);
  v64 = (uint64_t *)&v36[*(int *)(v166 + 36)];
  *v64 = v63;
  v64[1] = v62;
  sub_10001DF70((uint64_t)v33, (uint64_t (*)(_QWORD))sub_100026C6C);
  if ((sub_100025B54() & 1) != 0)
  {
    v65 = static Font.headline.getter();
  }
  else
  {
    v66 = static Font.footnote.getter();
    static Font.Weight.regular.getter();
    v65 = Font.weight(_:)(v66);
    swift_release(v66);
  }
  v67 = swift_getKeyPath(&unk_1000DCAE8);
  v68 = v170;
  sub_10001DE2C((uint64_t)v36, v170, (uint64_t (*)(_QWORD))sub_100026BF0);
  v69 = (uint64_t *)(v68 + *(int *)(v171 + 36));
  *v69 = v67;
  v69[1] = v65;
  sub_10001DF70((uint64_t)v36, (uint64_t (*)(_QWORD))sub_100026BF0);
  sub_100027F08(v68, v181);
  if ((sub_100025B54() & 1) != 0)
  {
    v70 = v52[2];
    *(_QWORD *)&v197 = v52[1];
    *((_QWORD *)&v197 + 1) = v70;
    v71 = sub_1000144A0();
    swift_bridgeObjectRetain(v70);
    v72 = Text.init<A>(_:)(&v197, &type metadata for String, v71);
    v74 = v73;
    v76 = v75;
    v78 = v77 & 1;
    v79 = static Font.headline.getter();
    v80 = Text.font(_:)(v79, v72, v74, v78, v76);
    v169 = v80;
    v170 = v81;
    v83 = v82;
    v85 = v84;
    v171 = v84;
    swift_release(v79);
    sub_100014490(v72, v74, v78);
    swift_bridgeObjectRelease(v76);
    v86 = swift_getKeyPath(&unk_1000DCB40);
    v87 = swift_getKeyPath(&unk_1000DCB70);
    v88 = swift_getKeyPath(&unk_1000DCBA0);
    v89 = v170;
    *(_QWORD *)&v197 = v80;
    *((_QWORD *)&v197 + 1) = v170;
    LOBYTE(v198) = v83 & 1;
    LOBYTE(v80) = v83 & 1;
    *((_QWORD *)&v198 + 1) = v85;
    *(_QWORD *)&v199 = v86;
    *((_QWORD *)&v199 + 1) = 1;
    LOBYTE(v200) = 0;
    *((_QWORD *)&v200 + 1) = v87;
    *(_QWORD *)&v201 = 0x3FEB333333333333;
    *((_QWORD *)&v201 + 1) = v88;
    LOBYTE(v202) = 1;
    sub_100026D54(0);
    v91 = v90;
    v92 = sub_100026E4C();
    v93 = v153;
    View.widgetAccentable(_:)(1, v91, v92);
    sub_100014490(v169, v89, v80);
    swift_release(v88);
    swift_release(v87);
    swift_release(v86);
    swift_bridgeObjectRelease(v171);
    v94 = v154;
    v96 = v174;
    v95 = v175;
    (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v175, v93, v174);
    swift_storeEnumTagMultiPayload(v95, v173, 0);
    *(_QWORD *)&v197 = v91;
    *((_QWORD *)&v197 + 1) = v92;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    sub_10002715C(255);
    v99 = v98;
    v100 = sub_100027424();
    *(_QWORD *)&v197 = v99;
    *((_QWORD *)&v197 + 1) = v100;
    v101 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    *(_QWORD *)&v197 = v177;
    *((_QWORD *)&v197 + 1) = v101;
    v102 = swift_getOpaqueTypeConformance2(&v197, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v103 = (uint64_t)v176;
    _ConditionalContent<>.init(storage:)(v95, v96, v179, OpaqueTypeConformance2, v102);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v96);
  }
  else
  {
    v104 = v52[4];
    *(_QWORD *)&v197 = v52[3];
    *((_QWORD *)&v197 + 1) = v104;
    v105 = sub_1000144A0();
    swift_bridgeObjectRetain(v104);
    v106 = Text.init<A>(_:)(&v197, &type metadata for String, v105);
    v170 = v107;
    v171 = v106;
    v109 = v108;
    v169 = v110;
    v111 = v52[2];
    *(_QWORD *)&v197 = v52[1];
    *((_QWORD *)&v197 + 1) = v111;
    swift_bridgeObjectRetain(v111);
    v112 = Text.init<A>(_:)(&v197, &type metadata for String, v105);
    v167 = v113;
    v168 = v112;
    v115 = v114;
    v117 = v116;
    v118 = swift_getKeyPath(&unk_1000DCB18);
    v119 = static Font.footnote.getter();
    v120 = Font.bold()();
    swift_release(v119);
    v121 = swift_getKeyPath(&unk_1000DCAE8);
    v195 = v109 & 1;
    v194 = v115 & 1;
    v193 = 0;
    v122 = swift_getKeyPath(&unk_1000DCB40);
    v123 = v195;
    LOBYTE(v105) = v194;
    v124 = v193;
    v196 = 0;
    v125 = static Color.primary.getter(v122);
    v126 = swift_getKeyPath(&unk_1000DCAB8);
    *(_QWORD *)&v182 = v171;
    *((_QWORD *)&v182 + 1) = v170;
    LOBYTE(v183) = v123;
    *((_QWORD *)&v183 + 1) = v169;
    *(_QWORD *)&v184 = v168;
    *((_QWORD *)&v184 + 1) = v167;
    LOBYTE(v185) = v105;
    *((_QWORD *)&v185 + 1) = v117;
    *(_QWORD *)&v186 = 0;
    *((_QWORD *)&v186 + 1) = v118;
    v187 = 0uLL;
    *(_QWORD *)&v188 = 0;
    BYTE8(v188) = v124;
    *(_QWORD *)&v189 = v121;
    *((_QWORD *)&v189 + 1) = v120;
    *(_QWORD *)&v190 = v122;
    *((_QWORD *)&v190 + 1) = 1;
    LOBYTE(v191) = v196;
    *((_QWORD *)&v191 + 1) = v126;
    v192 = v125;
    v128 = v155;
    v127 = v156;
    v129 = v157;
    (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for DynamicTypeSize.large(_:), v157);
    sub_10002715C(0);
    v131 = v130;
    v132 = sub_100027424();
    v133 = v159;
    View.dynamicTypeSize(_:)(v128, v131, v132);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v128, v129);
    v205 = v190;
    v206 = v191;
    v207 = v192;
    v201 = v186;
    v202 = v187;
    v203 = v188;
    v204 = v189;
    v197 = v182;
    v198 = v183;
    v199 = v184;
    v200 = v185;
    sub_100027F5C((uint64_t)&v197);
    *(_QWORD *)&v182 = v131;
    *((_QWORD *)&v182 + 1) = v132;
    v134 = swift_getOpaqueTypeConformance2(&v182, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    v135 = v158;
    v136 = v177;
    View.widgetAccentable(_:)(1, v177, v134);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v133, v136);
    v138 = v161;
    v137 = v162;
    v139 = v179;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v161, v135, v179);
    v140 = v175;
    (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v175, v138, v139);
    swift_storeEnumTagMultiPayload(v140, v173, 1);
    sub_100026D54(255);
    v142 = v141;
    v143 = sub_100026E4C();
    *(_QWORD *)&v182 = v142;
    *((_QWORD *)&v182 + 1) = v143;
    v144 = swift_getOpaqueTypeConformance2(&v182, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    *(_QWORD *)&v182 = v136;
    *((_QWORD *)&v182 + 1) = v134;
    v145 = swift_getOpaqueTypeConformance2(&v182, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v103 = (uint64_t)v176;
    _ConditionalContent<>.init(storage:)(v140, v174, v139, v144, v145);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v139);
  }
  v146 = v181;
  v147 = v172;
  sub_10001DE2C(v181, v172, (uint64_t (*)(_QWORD))sub_100026B74);
  v148 = v178;
  sub_10001DE2C(v103, v178, (uint64_t (*)(_QWORD))sub_100026D40);
  v149 = v180;
  sub_10001DE2C(v147, v180, (uint64_t (*)(_QWORD))sub_100026B74);
  sub_100026B08(0);
  sub_10001DE2C(v148, v149 + *(int *)(v150 + 48), (uint64_t (*)(_QWORD))sub_100026D40);
  sub_10001DF70(v103, (uint64_t (*)(_QWORD))sub_100026D40);
  sub_10001DF70(v146, (uint64_t (*)(_QWORD))sub_100026B74);
  sub_10001DF70(v148, (uint64_t (*)(_QWORD))sub_100026D40);
  return sub_10001DF70(v147, (uint64_t (*)(_QWORD))sub_100026B74);
}

uint64_t sub_100026940()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  if (v1 == 2)
  {
    if (qword_100111438 != -1)
      swift_once(&qword_100111438, sub_100025AA0);
    v2 = qword_100112C28;
    v3 = unk_100112C30;
    sub_100007184(qword_100112C10, qword_100112C28);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 16) + 432))(v2, *(_QWORD *)(v3 + 16));
  }
  else if ((v1 & 1) != 0)
  {
    if (qword_100111438 != -1)
      swift_once(&qword_100111438, sub_100025AA0);
    v7 = qword_100112C28;
    v8 = unk_100112C30;
    sub_100007184(qword_100112C10, qword_100112C28);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  }
  else
  {
    if (qword_100111438 != -1)
      swift_once(&qword_100111438, sub_100025AA0);
    v5 = qword_100112C28;
    v6 = unk_100112C30;
    sub_100007184(qword_100112C10, qword_100112C28);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6);
  }
  return Color.init(_:)(v4);
}

uint64_t sub_100026A48@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *(_QWORD *)a1 = static VerticalAlignment.firstTextBaseline.getter();
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  sub_100026A8C(0);
  return sub_100025D28(v1, a1 + *(int *)(v3 + 44));
}

void sub_100026A8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112CF8)
  {
    sub_10000EDE8(255, &qword_100112D00, (uint64_t (*)(uint64_t))sub_100026B08, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112CF8);
  }
}

void sub_100026B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100112D08)
  {
    sub_100026B74(255);
    v3 = v2;
    sub_100026D40(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112D08);
  }
}

void sub_100026B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112D10)
  {
    sub_100026BF0(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112D10);
  }
}

void sub_100026BF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112D18)
  {
    sub_100026C6C(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112D18);
  }
}

void sub_100026C6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112D20)
  {
    sub_10000EDE8(255, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Image, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112D20);
  }
}

void sub_100026CE0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1000143C4(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    v7 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_100026D40(uint64_t a1)
{
  sub_100027728(a1, &qword_100112D50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_100026D54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112D60)
  {
    sub_100026DD0(255);
    v3 = v2;
    sub_1000143C4(255, &qword_100112D78, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112D60);
  }
}

void sub_100026DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112D68)
  {
    sub_1000142FC(255);
    v3 = v2;
    sub_1000143C4(255, (unint64_t *)&qword_100112D70, (uint64_t)&type metadata for CGFloat, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112D68);
  }
}

unint64_t sub_100026E4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112D80;
  if (!qword_100112D80)
  {
    sub_100026D54(255);
    v2 = v1;
    sub_100026ECC();
    sub_100026FD4(&qword_100112DA8, &qword_100112D78, (uint64_t)&type metadata for Bool);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112D80);
  }
  return result;
}

unint64_t sub_100026ECC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112D88;
  if (!qword_100112D88)
  {
    sub_100026DD0(255);
    v2 = v1;
    sub_100026F4C();
    sub_100026FD4((unint64_t *)&qword_100112DA0, (unint64_t *)&qword_100112D70, (uint64_t)&type metadata for CGFloat);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112D88);
  }
  return result;
}

unint64_t sub_100026F4C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112D90;
  if (!qword_100112D90)
  {
    sub_1000142FC(255);
    v2 = v1;
    sub_1000276E8(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112D90);
  }
  return result;
}

uint64_t sub_100026FD4(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1000143C4(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10002701C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!qword_100112DB0)
  {
    sub_1000270DC(255, &qword_100112DB8, (uint64_t (*)(uint64_t))sub_10002715C, (uint64_t (*)(void))sub_100027424, (uint64_t)&opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>);
    v3 = v2;
    sub_10002715C(255);
    v8 = v4;
    v9 = sub_100027424();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100112DB0);
  }
}

void sub_1000270DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v11, a5, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, a2);
  }
}

void sub_10002715C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112DC0)
  {
    sub_1000271D8(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112DC0);
  }
}

void sub_1000271D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112DC8)
  {
    sub_100027254(255);
    v3 = v2;
    sub_100026CE0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112DC8);
  }
}

void sub_100027254(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112DD0)
  {
    sub_1000272D0(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112DD0);
  }
}

void sub_1000272D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112DD8)
  {
    sub_10002732C(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for OverflowIntoTextMarginsModifier);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112DD8);
  }
}

void sub_10002732C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112DE0)
  {
    sub_100027388(255);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Text, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112DE0);
  }
}

void sub_100027388(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112DE8)
  {
    v2 = sub_1000273E0();
    v3 = type metadata accessor for _TextRendererViewModifier(a1, &type metadata for AlternateRenderer, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112DE8);
  }
}

unint64_t sub_1000273E0()
{
  unint64_t result;

  result = qword_100112DF0;
  if (!qword_100112DF0)
  {
    result = swift_getWitnessTable(&unk_1000DCC34, &type metadata for AlternateRenderer);
    atomic_store(result, (unint64_t *)&qword_100112DF0);
  }
  return result;
}

unint64_t sub_100027424()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112DF8;
  if (!qword_100112DF8)
  {
    sub_10002715C(255);
    v2 = v1;
    sub_1000274AC();
    sub_1000276E8((unint64_t *)&qword_100112E38, &qword_100112D30, (unint64_t *)&qword_100112D38, (uint64_t)&type metadata for Color);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112DF8);
  }
  return result;
}

unint64_t sub_1000274AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112E00;
  if (!qword_100112E00)
  {
    sub_1000271D8(255);
    v2 = v1;
    sub_100027534();
    sub_1000276E8(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112E00);
  }
  return result;
}

unint64_t sub_100027534()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112E08;
  if (!qword_100112E08)
  {
    sub_100027254(255);
    v2 = v1;
    sub_1000275BC();
    sub_1000276E8(&qword_100112E30, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112E08);
  }
  return result;
}

unint64_t sub_1000275BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112E10;
  if (!qword_100112E10)
  {
    sub_1000272D0(255);
    v2 = v1;
    sub_100027624();
    sub_1000276A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112E10);
  }
  return result;
}

unint64_t sub_100027624()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100112E18;
  if (!qword_100112E18)
  {
    sub_10002732C(255);
    v2 = v1;
    sub_100003D3C(&qword_100112E20, (uint64_t (*)(uint64_t))sub_100027388, (uint64_t)&protocol conformance descriptor for _TextRendererViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100112E18);
  }
  return result;
}

unint64_t sub_1000276A4()
{
  unint64_t result;

  result = qword_100112E28;
  if (!qword_100112E28)
  {
    result = swift_getWitnessTable(&unk_1000DE260, &type metadata for OverflowIntoTextMarginsModifier);
    atomic_store(result, (unint64_t *)&qword_100112E28);
  }
  return result;
}

uint64_t sub_1000276E8(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_100026CE0(255, a2, a3, a4);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100027728(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1000270DC(255, &qword_100112D58, (uint64_t (*)(uint64_t))sub_100026D54, (uint64_t (*)(void))sub_100026E4C, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>);
    v7 = v6;
    sub_10002701C(255);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1000277B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  double v40;
  double v41;
  uint64_t v42;
  void (*v43)(double *, _QWORD);
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  BOOL v56;
  char *v57;
  void (*v58)(double *, _QWORD);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  char *v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;

  v70 = a4;
  v71 = a6;
  v68 = a5;
  v69 = a3;
  v76 = a2;
  sub_100028458(0, &qword_100112E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
  v8 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - v12;
  v14 = type metadata accessor for Text.Layout(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028458(0, &qword_100112E80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Slice);
  v67 = v18;
  __chkstk_darwin(v18);
  v72 = (double *)((char *)&v61 - v19);
  sub_10000EDE8(0, &qword_100112E88, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v20);
  v73 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v61 - v24;
  v26 = type metadata accessor for Text.Layout.Line(0, v23);
  v77 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v74 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v66 = (char *)&v61 - v29;
  v31 = __chkstk_darwin(v30);
  v75 = (char *)&v61 - v32;
  if ((Text.Layout.isTruncated.getter(v31) & 1) != 0)
  {
    v65 = v10;
    v64 = v8;
    sub_10002597C((uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, &qword_100112E78, (uint64_t)&protocol conformance descriptor for Text.Layout, (uint64_t (*)(_QWORD))&type metadata accessor for Text.Layout.Line, (uint64_t)v25);
    v33 = v77;
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
    if (v34((uint64_t)v25, 1, v26) == 1)
    {
      sub_100028528((uint64_t)v25, &qword_100112E88, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    }
    else
    {
      v63 = v34;
      v61 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v61(v75, v25, v26);
      v35 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v62 = a1;
      v36 = v14;
      v35(v17, a1, v14);
      v37 = 1;
      v38 = v33;
      v39 = v72;
      sub_1000257CC(1, v72);
      v40 = *v39;
      v41 = v39[1];
      if (*(_QWORD *)v39 != *(_QWORD *)&v41)
      {
        v78 = *v39;
        v79 = v40;
        v80 = v41;
        v42 = sub_100003D3C(&qword_100112E78, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
        dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)(&v78, &v79, v36, v42);
        v43 = (void (*)(double *, _QWORD))dispatch thunk of Collection.subscript.read(&v79, &v78, v36, v42);
        v44 = v66;
        (*(void (**)(char *))(v38 + 16))(v66);
        v43(&v79, 0);
        v61(v73, v44, v26);
        v37 = 0;
      }
      v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
      v46 = (uint64_t)v73;
      v45(v73, v37, 1, v26);
      sub_100028564((uint64_t)v39, &qword_100112E80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Slice);
      v47 = v63(v46, 1, v26);
      v48 = sub_100028528(v46, &qword_100112E88, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout.Line, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v47 == 1)
      {
        v49 = v26;
        v50 = v75;
        v51 = *v76;
        Text.Layout.Line.typographicBounds.getter(&v79, v48);
        GraphicsContext.draw(_:in:)(v69, v70, v68 & 1, v71, v51, v79, v80 - v82, v81, v82 + v83);
        return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v50, v49);
      }
      (*(void (**)(char *, uint64_t))(v77 + 8))(v75, v26);
      v14 = v36;
      a1 = v62;
    }
    v8 = v64;
    v10 = v65;
  }
  v75 = *(char **)(v15 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v75)(v10, a1, v14);
  v53 = sub_100003D3C(&qword_100112E78, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
  dispatch thunk of Collection.startIndex.getter(&v79, v14, v53);
  *(double *)&v10[*(int *)(v8 + 36)] = v79;
  sub_1000284D4((uint64_t)v10, (uint64_t)v13);
  v54 = &v13[*(int *)(v8 + 36)];
  v55 = *(_QWORD *)v54;
  dispatch thunk of Collection.endIndex.getter(&v79, v14, v53);
  v56 = v55 == *(_QWORD *)&v79;
  v57 = v74;
  if (!v56)
  {
    do
    {
      v58 = (void (*)(double *, _QWORD))dispatch thunk of Collection.subscript.read(&v79, v54, v14, v53);
      v59 = v77;
      (*(void (**)(char *))(v77 + 16))(v57);
      v58(&v79, 0);
      ((void (*)(char *, char *, uint64_t))v75)(v17, v13, v14);
      dispatch thunk of Collection.formIndex(after:)(v54, v14, v53);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      GraphicsContext.draw(_:options:)(v57, 0, *v76);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v26);
      v60 = *(_QWORD *)v54;
      dispatch thunk of Collection.endIndex.getter(&v79, v14, v53);
    }
    while (v60 != *(_QWORD *)&v79);
  }
  return sub_100028564((uint64_t)v13, &qword_100112E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
}

uint64_t sub_100027DD4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1000277B0(a1, a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100027DEC(uint64_t a1, char a2)
{
  return TextProxy.sizeThatFits(_:)(a1, a2 & 1);
}

double sub_100027E24()
{
  return 0.0;
}

void (*sub_100027E38(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100020AE4;
}

uint64_t sub_100027E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, &qword_100112D28, (uint64_t (*)(uint64_t))&type metadata accessor for Image.Scale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100026B74(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027F5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v13 = *(_BYTE *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 160);
  sub_100014490(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_100014490(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  swift_release(v7);
  sub_100028060(v8, v9, v10, v14, v13);
  swift_release(v12);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_100028060(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100028074@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000280A0(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

unint64_t sub_1000280C4()
{
  unint64_t result;
  ProtocolDescriptor *v1;

  result = qword_100112E48;
  if (!qword_100112E48)
  {
    v1 = &protocol descriptor for BaseStylerType;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_100112E48);
  }
  return result;
}

uint64_t destroy for AlternateRenderer(uint64_t a1)
{
  sub_100014490(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for AlternateRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1000144EC(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for AlternateRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1000144EC(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100014490(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for AlternateRenderer(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100014490(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlternateRenderer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlternateRenderer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlternateRenderer()
{
  return &type metadata for AlternateRenderer;
}

uint64_t sub_10002830C()
{
  return sub_100003D3C(&qword_100112E50, (uint64_t (*)(uint64_t))sub_100028338, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

void sub_100028338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112E58)
  {
    sub_10000EDE8(255, &qword_100112D00, (uint64_t (*)(uint64_t))sub_100026B08, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_1000283B0();
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112E58);
  }
}

unint64_t sub_1000283B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112E60;
  if (!qword_100112E60)
  {
    sub_10000EDE8(255, &qword_100112D00, (uint64_t (*)(uint64_t))sub_100026B08, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100112E60);
  }
  return result;
}

unint64_t sub_100028414()
{
  unint64_t result;

  result = qword_100112E68;
  if (!qword_100112E68)
  {
    result = swift_getWitnessTable(&unk_1000DCBE4, &type metadata for AlternateRenderer);
    atomic_store(result, (unint64_t *)&qword_100112E68);
  }
  return result;
}

void sub_100028458(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for Text.Layout(255);
    v7 = sub_100003D3C(&qword_100112E78, (uint64_t (*)(uint64_t))&type metadata accessor for Text.Layout, (uint64_t)&protocol conformance descriptor for Text.Layout);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1000284D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100028458(0, &qword_100112E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for IndexingIterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028528(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  sub_10000EDE8(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_100028564(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  sub_100028458(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

ValueMetadata *type metadata accessor for OverviewWidget()
{
  return &type metadata for OverviewWidget;
}

uint64_t sub_1000285B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E83C4, 1);
}

uint64_t sub_1000285C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v66 = a1;
  v1 = type metadata accessor for OverviewTimelineProvider(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028BA8(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000270DC(0, &qword_100112EA8, v9, sub_100028CAC, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v58 - v11;
  sub_100028CC8(0);
  v64 = v13;
  v62 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v58 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028D88(0);
  v65 = v15;
  v63 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v61 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WatchlistWidgetConfigurationIntent(0);
  if (qword_100111448 != -1)
    swift_once(&qword_100111448, sub_10002DE2C);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100012524(v18, (uint64_t)qword_100126800);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v3, v19, v18);
  v20 = type metadata accessor for OverviewWidgetView(0);
  v21 = sub_100003D3C(&qword_100112EA0, type metadata accessor for OverviewWidgetView, (uint64_t)&unk_1000DCD34);
  v22 = sub_100003D3C(&qword_100112EC8, type metadata accessor for OverviewTimelineProvider, (uint64_t)&unk_1000E0E6C);
  AppIntentConfiguration.init<A>(kind:intent:provider:content:)(0x776569767265766FLL, 0xE800000000000000, v17, v3, sub_10002A3D0, 0, v17, v20, v1, v21, v22);
  v23 = LocalizedStringKey.init(stringLiteral:)(0x73696C6863746157, 0xE900000000000074);
  v24 = Text.init(_:tableName:bundle:comment:)(v23);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v31 = sub_100028CAC();
  WidgetConfiguration.configurationDisplayName(_:)(v24, v26, v30, v28, v5, v31);
  sub_100014490(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v32 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000008DLL, 0x80000001000E5520);
  v33 = Text.init(_:tableName:bundle:comment:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  v67 = v5;
  v68 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v41 = v58;
  v42 = v60;
  WidgetConfiguration.description(_:)(v33, v35, v39, v37, v60, OpaqueTypeConformance2);
  sub_100014490(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v42);
  sub_10000EDE8(0, &qword_100112ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v44 = v43;
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_QWORD *)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v50 = swift_allocObject(v44, v49 + 4 * v47, v48 | 7);
  *(_OWORD *)(v50 + 16) = xmmword_1000DCC80;
  v51 = *(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104);
  v51(v50 + v49, enum case for WidgetFamily.systemSmall(_:), v45);
  v51(v50 + v49 + v47, enum case for WidgetFamily.systemMedium(_:), v45);
  v51(v50 + v49 + 2 * v47, enum case for WidgetFamily.systemLarge(_:), v45);
  v51(v50 + v49 + 3 * v47, enum case for WidgetFamily.accessoryRectangular(_:), v45);
  v67 = v42;
  v68 = OpaqueTypeConformance2;
  v52 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v53 = v61;
  v54 = v64;
  WidgetConfiguration.supportedFamilies(_:)(v50, v64, v52);
  swift_bridgeObjectRelease(v50);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v41, v54);
  v67 = v54;
  v68 = v52;
  v55 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v56 = v65;
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v65, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v53, v56);
}

uint64_t sub_100028B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  sub_10001DE2C(a1, a2, type metadata accessor for OverviewTimelineEntry);
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for OverviewWidgetView(0) + 20));
  *v3 = swift_getKeyPath(&unk_1000DCCF0);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  return swift_storeEnumTagMultiPayload(v3, v4, 0);
}

void sub_100028BA8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100112E90)
  {
    v4[0] = type metadata accessor for WatchlistWidgetConfigurationIntent(255);
    v4[1] = type metadata accessor for OverviewWidgetView(255);
    v4[2] = sub_100003D3C(&qword_100112E98, (uint64_t (*)(uint64_t))&type metadata accessor for WatchlistWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for WatchlistWidgetConfigurationIntent);
    v4[3] = sub_100003D3C(&qword_100112EA0, type metadata accessor for OverviewWidgetView, (uint64_t)&unk_1000DCD34);
    v2 = type metadata accessor for AppIntentConfiguration(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100112E90);
  }
}

uint64_t type metadata accessor for OverviewWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_100112F60;
  if (!qword_100112F60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OverviewWidgetView);
  return result;
}

uint64_t sub_100028CAC()
{
  return sub_100003D3C(&qword_100112EB0, (uint64_t (*)(uint64_t))sub_100028BA8, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
}

void sub_100028CC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!qword_100112EB8)
  {
    sub_1000270DC(255, &qword_100112EA8, (uint64_t (*)(uint64_t))sub_100028BA8, sub_100028CAC, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
    v3 = v2;
    sub_100028BA8(255);
    v8 = v4;
    v9 = sub_100028CAC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100112EB8);
  }
}

void sub_100028D88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!qword_100112EC0)
  {
    sub_100028CC8(255);
    v3 = v2;
    sub_1000270DC(255, &qword_100112EA8, (uint64_t (*)(uint64_t))sub_100028BA8, sub_100028CAC, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
    v5 = v4;
    sub_100028BA8(255);
    v11 = v6;
    v12 = sub_100028CAC();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
    v11 = v5;
    v12 = OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
    v11 = v3;
    v12 = v8;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100112EC0);
  }
}

uint64_t sub_100028E74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];

  v52 = a1;
  v1 = type metadata accessor for DynamicTypeSize(0);
  v50 = *(_QWORD *)(v1 - 8);
  v51 = v1;
  v2 = __chkstk_darwin(v1);
  v49 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContainerBackgroundPlacement(0, v2);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BAD4(0);
  __chkstk_darwin(v11);
  v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BE14(0);
  __chkstk_darwin(v14);
  v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100113018, (uint64_t (*)(uint64_t))sub_10002BE14, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v18 = v17;
  __chkstk_darwin(v17);
  v20 = (char *)v44 - v19;
  sub_10002BE44(0);
  v22 = *(_QWORD *)(v21 - 8);
  v45 = v21;
  v46 = v22;
  __chkstk_darwin(v21);
  v24 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100029264(v44[1], (uint64_t)v13);
  v26 = static Alignment.center.getter(v25);
  sub_100029C80(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, INFINITY, 0, v26, v27, (void (*)(uint64_t, uint64_t))sub_10002C250, (uint64_t (*)(_QWORD))sub_10002BE14);
  sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_10002BAD4);
  KeyPath = swift_getKeyPath(&unk_1000DCD88);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ColorScheme.dark(_:), v7);
  v29 = (uint64_t *)&v20[*(int *)(v18 + 36)];
  sub_10002BE28(0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v29 + *(int *)(v30 + 28), v10, v7);
  *v29 = KeyPath;
  sub_10001DE2C((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_10002BE14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v31 = sub_10001DF70((uint64_t)v16, (uint64_t (*)(_QWORD))sub_10002BE14);
  v32 = static ContainerBackgroundPlacement.widget.getter(v31);
  v33 = static Alignment.center.getter(v32);
  v35 = v34;
  v36 = sub_10002BEF4();
  v37 = sub_10002C1A8();
  View.containerBackground<A>(for:alignment:content:)(v6, v33, v35, nullsub_1, 0, v18, &type metadata for TodayBackgroundView, v36, v37);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v48);
  sub_10002C1F4((uint64_t)v20);
  v38 = v49;
  v39 = v50;
  v40 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v49, enum case for DynamicTypeSize.large(_:), v51);
  v53[0] = v18;
  v53[1] = &type metadata for TodayBackgroundView;
  v53[2] = v36;
  v53[3] = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v53, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v42 = v45;
  View.dynamicTypeSize(_:)(v38, v45, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v24, v42);
}

uint64_t sub_100029264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  int v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE v85[12];
  int v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  __int128 v101;
  char v102;
  __int128 v103;
  char v104;
  int v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char v109;

  v99 = a2;
  v100 = (_BYTE *)a1;
  v2 = type metadata accessor for RedactionReasons(0);
  v96 = *(_QWORD *)(v2 - 8);
  v97 = v2;
  __chkstk_darwin(v2);
  v95 = &v85[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v94 = type metadata accessor for WatchlistOverviewContentView(0);
  __chkstk_darwin(v94);
  v5 = &v85[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002BDB8(0);
  v7 = v6;
  v93 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v92 = &v85[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002BD94(0);
  v98 = v9;
  __chkstk_darwin(v9);
  v11 = &v85[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v85[-v13];
  v15 = type metadata accessor for WatchlistOverviewContentViewModel(0);
  __chkstk_darwin(v15);
  v91 = &v85[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v19 = &v85[-v18];
  sub_10002BC34(0, &qword_100113078, (uint64_t (*)(uint64_t))sub_10002BB48, (uint64_t (*)(uint64_t))sub_10002BD94, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v21 = v20;
  __chkstk_darwin(v20);
  v23 = &v85[-v22];
  v24 = type metadata accessor for OverviewTimelineEntry(0);
  __chkstk_darwin(v24);
  v26 = &v85[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001DE2C((uint64_t)v100, (uint64_t)v26, v27);
  if (swift_getEnumCaseMultiPayload(v26, v24) == 1)
  {
    v87 = v15;
    v88 = v11;
    v89 = v7;
    v90 = v21;
    v100 = v14;
    v28 = v98;
    sub_10002A7CC(0);
    v30 = (uint64_t)&v26[*(int *)(v29 + 48)];
    v86 = v26[*(int *)(v29 + 80)];
    sub_10000ED3C(v30, (uint64_t)v19, type metadata accessor for WatchlistOverviewContentViewModel);
    v31 = v91;
    sub_10001DE2C((uint64_t)v19, (uint64_t)v91, type metadata accessor for WatchlistOverviewContentViewModel);
    *v5 = swift_getKeyPath(&unk_1000DCCF0);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    swift_storeEnumTagMultiPayload(v5, v32, 0);
    v33 = v94;
    v34 = (char *)v5 + *(int *)(v94 + 20);
    *(_QWORD *)v34 = swift_getKeyPath(&unk_1000DCDB8);
    v34[8] = 0;
    v35 = (char *)v5 + *(int *)(v33 + 24);
    *(_QWORD *)v35 = swift_getKeyPath(&unk_1000DCDE0);
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = 0;
    *((_QWORD *)v35 + 3) = 0;
    v35[32] = 0;
    v36 = sub_10000ED3C((uint64_t)v31, (uint64_t)v5 + *(int *)(v33 + 28), type metadata accessor for WatchlistOverviewContentViewModel);
    v91 = v19;
    v37 = v92;
    v38 = v95;
    if (v86 == 1)
    {
      static RedactionReasons.placeholder.getter(v36);
      v65 = v97;
    }
    else
    {
      *(_QWORD *)&v101 = _swiftEmptyArrayStorage;
      v60 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
      sub_10000EDE8(0, &qword_100113088, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      v62 = v61;
      v63 = sub_10002C338();
      v64 = v62;
      v65 = v97;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v64, v63, v97, v60);
    }
    v66 = v96;
    v67 = sub_10002BDDC();
    View.redacted(reason:)(v38, v33, v67);
    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v38, v65);
    sub_10001DF70((uint64_t)v5, type metadata accessor for WatchlistOverviewContentView);
    v68 = v91;
    v69 = &v91[*(int *)(v87 + 28)];
    KeyPath = swift_getKeyPath(&unk_1000DCE10);
    v71 = v28;
    v72 = (uint64_t)v88;
    v73 = (uint64_t *)&v88[*(int *)(v28 + 36)];
    sub_10002BDF8(0);
    v75 = v37;
    v76 = (char *)v73 + *(int *)(v74 + 28);
    v77 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v76, v69, v77);
    *v73 = KeyPath;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v93 + 32))(v72, v75, v89);
    v78 = (uint64_t)v100;
    sub_10000ED3C(v72, (uint64_t)v100, (uint64_t (*)(_QWORD))sub_10002BD94);
    sub_10001DE2C(v78, (uint64_t)v23, (uint64_t (*)(_QWORD))sub_10002BD94);
    swift_storeEnumTagMultiPayload(v23, v90, 1);
    sub_10002BB48(0);
    v80 = v79;
    v81 = sub_100003D3C(&qword_100113050, (uint64_t (*)(uint64_t))sub_10002BB48, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v82 = sub_10002C104();
    _ConditionalContent<>.init(storage:)(v23, v80, v71, v81, v82);
    sub_10001DF70(v78, (uint64_t (*)(_QWORD))sub_10002BD94);
    sub_10001DF70((uint64_t)v68, type metadata accessor for WatchlistOverviewContentViewModel);
  }
  else
  {
    sub_10002A734(0);
    v40 = (uint64_t *)&v26[*(int *)(v39 + 48)];
    v41 = *v40;
    v42 = v40[1];
    v43 = (uint64_t *)&v26[*(int *)(v39 + 64)];
    v44 = *v43;
    v45 = v43[1];
    v46 = static HorizontalAlignment.center.getter(v39);
    sub_100029914(v41, v42, v44, v45, (uint64_t)&v101);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v45);
    v47 = v102;
    v48 = v104;
    v49 = v105;
    v50 = v108;
    v51 = v109;
    v52 = v103;
    v53 = v101;
    v54 = v106;
    v55 = v107;
    *(_QWORD *)v23 = v46;
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 1;
    *(_OWORD *)(v23 + 24) = v53;
    v23[40] = v47;
    *((_OWORD *)v23 + 3) = v52;
    v23[64] = v48;
    *((_DWORD *)v23 + 17) = v49;
    *(_OWORD *)(v23 + 72) = v54;
    *(_OWORD *)(v23 + 88) = v55;
    *((_QWORD *)v23 + 13) = v50;
    v23[112] = v51;
    swift_storeEnumTagMultiPayload(v23, v21, 0);
    sub_10002BB48(0);
    v57 = v56;
    v58 = sub_100003D3C(&qword_100113050, (uint64_t (*)(uint64_t))sub_10002BB48, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v59 = sub_10002C104();
    _ConditionalContent<>.init(storage:)(v23, v57, v98, v58, v59);
  }
  v83 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v26, v83);
}

uint64_t sub_100029914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v68 = a1;
  v69 = a2;
  v7 = sub_1000144A0();
  swift_bridgeObjectRetain(a2);
  v61 = v7;
  v8 = Text.init<A>(_:)(&v68, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.body.getter();
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release(v15);
  sub_100014490(v8, v10, v14);
  v23 = swift_bridgeObjectRelease(v12);
  v24 = static Font.Weight.bold.getter(v23);
  v25 = Text.fontWeight(_:)(*(_QWORD *)&v24, 0, v16, v18, v20 & 1, v22);
  v66 = v26;
  v67 = v27;
  v29 = v28;
  sub_100014490(v16, v18, v20 & 1);
  swift_bridgeObjectRelease(v22);
  KeyPath = swift_getKeyPath(&unk_1000DCE38);
  v30 = static HierarchicalShapeStyle.primary.getter();
  if (a4)
  {
    v68 = a3;
    v69 = a4;
    v57 = v30;
    swift_bridgeObjectRetain(a4);
    v31 = Text.init<A>(_:)(&v68, &type metadata for String, v61);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    v38 = static Font.subheadline.getter();
    v58 = v29;
    v39 = Text.font(_:)(v38, v31, v33, v37, v35);
    v41 = v40;
    v43 = v42;
    v56 = v44;
    swift_release(v38);
    sub_100014490(v31, v33, v37);
    v45 = swift_bridgeObjectRelease(v35);
    LODWORD(v68) = static HierarchicalShapeStyle.secondary.getter(v45);
    v46 = Text.foregroundStyle<A>(_:)(&v68, v39, v41, v43 & 1, v56, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v62 = v47;
    v64 = v46;
    v60 = v48;
    v50 = v49 & 1;
    v51 = v39;
    v29 = v58;
    sub_100014490(v51, v41, v43 & 1);
    swift_bridgeObjectRelease(v56);
    v52 = swift_getKeyPath(&unk_1000DCE38);
    v30 = v57;
    v53 = 1;
  }
  else
  {
    v62 = 0;
    v64 = 0;
    v50 = 0;
    v60 = 0;
    v52 = 0;
    v53 = 0;
  }
  *(_QWORD *)a5 = v25;
  *(_QWORD *)(a5 + 8) = v66;
  *(_BYTE *)(a5 + 16) = v29 & 1;
  *(_QWORD *)(a5 + 24) = v67;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_BYTE *)(a5 + 40) = 1;
  *(_DWORD *)(a5 + 44) = v30;
  *(_QWORD *)(a5 + 48) = v64;
  *(_QWORD *)(a5 + 56) = v62;
  *(_QWORD *)(a5 + 64) = v50;
  *(_QWORD *)(a5 + 72) = v60;
  *(_QWORD *)(a5 + 80) = v52;
  *(_BYTE *)(a5 + 88) = v53;
  v54 = v52;
  sub_1000144EC(v25, v66, v29 & 1);
  swift_bridgeObjectRetain(v67);
  swift_retain(KeyPath);
  sub_10002C438(v64, v62, v50, v60, v54);
  sub_10002C474(v64, v62, v50, v60, v54);
  sub_100014490(v25, v66, v29 & 1);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v67);
}

double sub_100029C28@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100029C80(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))sub_10002C5CC, (uint64_t (*)(_QWORD))sub_10002C5D8).n128_u64[0];
  return result;
}

__n128 sub_100029C80@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t), uint64_t (*a17)(_QWORD))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a7 = v49;
    a5 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  a16(v18, v19);
  v41 = v19 + *(int *)(v20(0) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

id sub_100029E48@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  double v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a1;
  v19 = a15;
  v20 = a12;
  v21 = a10;
  v22 = a2 & 1;
  v23 = a1;
  if ((_DWORD)v22)
    v23 = -INFINITY;
  v24 = a4 & 1;
  v25 = a3;
  if ((a4 & 1) != 0)
    v25 = v23;
  v26 = a6 & 1;
  v27 = a8 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v25;
  if (v23 > v25 || v25 > v28)
    goto LABEL_22;
  v30 = a7;
  if ((a8 & 1) != 0)
    v30 = -INFINITY;
  v31 = a10;
  if ((a11 & 1) != 0)
    v31 = v30;
  v32 = a12;
  if ((a13 & 1) != 0)
    v32 = v31;
  if (v30 > v31 || v31 > v32)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v40 = v22;
    v34 = static os_log_type_t.fault.getter();
    v35 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v19 = a15;
    v22 = v40;
    v17 = a1;
    v21 = a10;
    a3 = v42;
    v20 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&v17, v22, *(_QWORD *)&a3, v24, *(_QWORD *)&a5, v26, *(_QWORD *)&a7, v27, *(_QWORD *)&v21, a11 & 1, *(_QWORD *)&v20, a13 & 1, a14, v19);
  *(_QWORD *)a9 = a16;
  *(_BYTE *)(a9 + 8) = a17;
  v36 = v45[5];
  *(_OWORD *)(a9 + 80) = v45[4];
  *(_OWORD *)(a9 + 96) = v36;
  *(_OWORD *)(a9 + 112) = v45[6];
  v37 = v45[1];
  *(_OWORD *)(a9 + 16) = v45[0];
  *(_OWORD *)(a9 + 32) = v37;
  v38 = v45[3];
  *(_OWORD *)(a9 + 48) = v45[2];
  *(_OWORD *)(a9 + 64) = v38;
  return a16;
}

double sub_100029FF8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100029C80(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (void (*)(uint64_t, uint64_t))sub_10002C558, (uint64_t (*)(_QWORD))sub_10002C564).n128_u64[0];
  return result;
}

uint64_t sub_10002A050@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_bridgeObjectRetain(a16);
}

uint64_t sub_10002A1F8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v43;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v20 = a17;
  v19 = a18;
  v21 = a15;
  v22 = a14;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v45 = a3;
    v46 = a1;
    v44 = v25;
    v43 = v27;
    v37 = static os_log_type_t.fault.getter();
    v38 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v43;
    v22 = a14;
    v21 = a15;
    v25 = v44;
    v24 = a10;
    v23 = a12;
    a3 = v45;
    a1 = v46;
    a5 = v47;
    a7 = v48;
    v20 = a17;
    v19 = a18;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  v39 = v49[2];
  *(_OWORD *)(a9 + 72) = v49[3];
  v40 = v49[5];
  *(_OWORD *)(a9 + 88) = v49[4];
  *(_OWORD *)(a9 + 104) = v40;
  *(_OWORD *)(a9 + 120) = v49[6];
  v41 = v49[1];
  *(_OWORD *)(a9 + 24) = v49[0];
  *(_OWORD *)(a9 + 40) = v41;
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v20;
  *(_QWORD *)(a9 + 16) = v19;
  *(_OWORD *)(a9 + 56) = v39;
  swift_retain(v19);
  swift_retain(a16);
  return swift_retain(v20);
}

_QWORD *sub_10002A3D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v59;
  uint64_t v60;
  uint64_t v61;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for OverviewTimelineEntry(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
    v9 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    if (EnumCaseMultiPayload == 1)
    {
      v60 = v7;
      v61 = v6;
      sub_10002A7CC(0);
      v59 = v10;
      v11 = v10[12];
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = *(_QWORD *)((char *)a2 + v11 + 8);
      *v12 = *(_QWORD *)((char *)a2 + v11);
      v12[1] = v14;
      v15 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v16 = v15[5];
      v17 = (char *)v12 + v16;
      v18 = &v13[v16];
      sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      v20 = v19;
      v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
      v22 = swift_bridgeObjectRetain(v14);
      v21(v17, v18, v20, v22);
      *((_BYTE *)v12 + v15[6]) = v13[v15[6]];
      v23 = v15[7];
      v24 = (char *)v12 + v23;
      v25 = &v13[v23];
      v26 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      *(_QWORD *)((char *)v12 + v15[8]) = *(_QWORD *)&v13[v15[8]];
      *(_QWORD *)((char *)v12 + v15[9]) = *(_QWORD *)&v13[v15[9]];
      *((_BYTE *)v12 + v15[10]) = v13[v15[10]];
      v27 = v15[11];
      v28 = (char *)v12 + v27;
      v29 = &v13[v27];
      sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      v31 = v30;
      v32 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
      {
        sub_10001D6B0(0);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v28, v29, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
      }
      v46 = v60;
      v6 = v61;
      *((_BYTE *)a1 + v59[16]) = *((_BYTE *)a2 + v59[16]);
      *((_BYTE *)a1 + v59[20]) = *((_BYTE *)a2 + v59[20]);
      *((_BYTE *)a1 + v59[24]) = *((_BYTE *)a2 + v59[24]);
      v45 = a1;
      v47 = 1;
    }
    else
    {
      sub_10002A734(0);
      v36 = *(int *)(v35 + 48);
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      v40 = *v38;
      v39 = v38[1];
      *v37 = v40;
      v37[1] = v39;
      v41 = *(int *)(v35 + 64);
      v42 = (_QWORD *)((char *)a1 + v41);
      v43 = (_QWORD *)((char *)a2 + v41);
      v44 = v43[1];
      *v42 = *v43;
      v42[1] = v44;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v44);
      v45 = a1;
      v46 = v7;
      v47 = 0;
    }
    swift_storeEnumTagMultiPayload(v45, v46, v47);
    v48 = *(int *)(v6 + 20);
    v49 = (_QWORD *)((char *)a1 + v48);
    v50 = (_QWORD *)((char *)a2 + v48);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v52 = v51;
    if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
    {
      v53 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v49, v50, v53);
      v54 = v49;
      v55 = v52;
      v56 = 1;
    }
    else
    {
      v57 = *v50;
      *v49 = *v50;
      swift_retain(v57);
      v54 = v49;
      v55 = v52;
      v56 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v55, v56);
  }
  return a1;
}

void sub_10002A734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!qword_100112ED8)
  {
    v2 = type metadata accessor for Date(255);
    sub_1000143C4(255, &qword_100112EE0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for String, v3, " title subtitle ", 0);
    if (!v5)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100112ED8);
  }
}

void sub_10002A7CC(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100112EE8)
  {
    __chkstk_darwin(0);
    type metadata accessor for Date(255);
    type metadata accessor for WatchlistOverviewContentViewModel(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 65541);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100112EE8);
  }
}

void sub_10002A8DC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112EF8, type metadata accessor for TickerCellViewModel, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

uint64_t sub_10002A8F8()
{
  return sub_100003D3C(&qword_100112F00, (uint64_t (*)(uint64_t))sub_10002A8DC, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_10002A914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for OverviewTimelineEntry(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  if (EnumCaseMultiPayload == 1)
  {
    sub_10002A7CC(0);
    v8 = a1 + *(int *)(v7 + 48);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
    v9 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v10 = v8 + v9[5];
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = v8 + v9[7];
    v13 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    v14 = v8 + v9[11];
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
  }
  else
  {
    sub_10002A734(0);
    v19 = v18;
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v18 + 48) + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v19 + 64) + 8));
  }
  v20 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v20, v21) != 1)
    return swift_release(*v20);
  v22 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
}

uint64_t sub_10002AB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = type metadata accessor for OverviewTimelineEntry(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  if (EnumCaseMultiPayload == 1)
  {
    v55 = v6;
    v56 = a3;
    sub_10002A7CC(0);
    v54 = v9;
    v10 = v9[12];
    v11 = (_QWORD *)(a1 + v10);
    v12 = a2 + v10;
    v13 = *(_QWORD *)(a2 + v10 + 8);
    *v11 = *(_QWORD *)(a2 + v10);
    v11[1] = v13;
    v14 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v15 = v14[5];
    v16 = (char *)v11 + v15;
    v17 = v12 + v15;
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v19 = v18;
    v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
    v21 = swift_bridgeObjectRetain(v13);
    v20(v16, v17, v19, v21);
    *((_BYTE *)v11 + v14[6]) = *(_BYTE *)(v12 + v14[6]);
    v22 = v14[7];
    v23 = (char *)v11 + v22;
    v24 = v12 + v22;
    v25 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    *(_QWORD *)((char *)v11 + v14[8]) = *(_QWORD *)(v12 + v14[8]);
    *(_QWORD *)((char *)v11 + v14[9]) = *(_QWORD *)(v12 + v14[9]);
    *((_BYTE *)v11 + v14[10]) = *(_BYTE *)(v12 + v14[10]);
    v26 = v14[11];
    v27 = (char *)v11 + v26;
    v28 = (const void *)(v12 + v26);
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v30 = v29;
    v31 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v29))
    {
      sub_10001D6B0(0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v31 + 16))(v27, v28, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
    }
    *(_BYTE *)(a1 + v54[16]) = *(_BYTE *)(a2 + v54[16]);
    *(_BYTE *)(a1 + v54[20]) = *(_BYTE *)(a2 + v54[20]);
    *(_BYTE *)(a1 + v54[24]) = *(_BYTE *)(a2 + v54[24]);
    swift_storeEnumTagMultiPayload(a1, v55, 1);
    a3 = v56;
  }
  else
  {
    sub_10002A734(0);
    v34 = *(int *)(v33 + 48);
    v35 = (_QWORD *)(a1 + v34);
    v36 = (uint64_t *)(a2 + v34);
    v38 = *v36;
    v37 = v36[1];
    *v35 = v38;
    v35[1] = v37;
    v39 = *(int *)(v33 + 64);
    v40 = (_QWORD *)(a1 + v39);
    v41 = (_QWORD *)(a2 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v42);
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v43 = *(int *)(a3 + 20);
  v44 = (uint64_t *)(a1 + v43);
  v45 = (uint64_t *)(a2 + v43);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v47 = v46;
  if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
  {
    v48 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v44, v45, v48);
    v49 = v44;
    v50 = v47;
    v51 = 1;
  }
  else
  {
    v52 = *v45;
    *v44 = *v45;
    swift_retain(v52);
    v49 = v44;
    v50 = v47;
    v51 = 0;
  }
  swift_storeEnumTagMultiPayload(v49, v50, v51);
  return a1;
}

uint64_t sub_10002AE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v56;
  uint64_t v57;
  uint64_t v58;

  if (a1 != a2)
  {
    sub_10001DF70(a1, type metadata accessor for OverviewTimelineEntry);
    v6 = type metadata accessor for OverviewTimelineEntry(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v57 = v6;
      v58 = a3;
      sub_10002A7CC(0);
      v56 = v9;
      v10 = v9[12];
      v11 = (_QWORD *)(a1 + v10);
      v12 = a2 + v10;
      *v11 = *(_QWORD *)(a2 + v10);
      v13 = *(_QWORD *)(a2 + v10 + 8);
      v11[1] = v13;
      v14 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v15 = v14[5];
      v16 = (char *)v11 + v15;
      v17 = v12 + v15;
      sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      v19 = v18;
      v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
      v21 = swift_bridgeObjectRetain(v13);
      v20(v16, v17, v19, v21);
      *((_BYTE *)v11 + v14[6]) = *(_BYTE *)(v12 + v14[6]);
      v22 = v14[7];
      v23 = (char *)v11 + v22;
      v24 = v12 + v22;
      v25 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      *(_QWORD *)((char *)v11 + v14[8]) = *(_QWORD *)(v12 + v14[8]);
      *(_QWORD *)((char *)v11 + v14[9]) = *(_QWORD *)(v12 + v14[9]);
      *((_BYTE *)v11 + v14[10]) = *(_BYTE *)(v12 + v14[10]);
      v26 = v14[11];
      v27 = (char *)v11 + v26;
      v28 = (const void *)(v12 + v26);
      sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      v30 = v29;
      v31 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v29))
      {
        sub_10001D6B0(0);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v31 + 16))(v27, v28, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
      }
      v43 = v57;
      a3 = v58;
      *(_BYTE *)(a1 + v56[16]) = *(_BYTE *)(a2 + v56[16]);
      *(_BYTE *)(a1 + v56[20]) = *(_BYTE *)(a2 + v56[20]);
      *(_BYTE *)(a1 + v56[24]) = *(_BYTE *)(a2 + v56[24]);
      v42 = a1;
      v44 = 1;
    }
    else
    {
      sub_10002A734(0);
      v34 = *(int *)(v33 + 48);
      v35 = (_QWORD *)(a1 + v34);
      v36 = (_QWORD *)(a2 + v34);
      *v35 = *v36;
      v37 = v36[1];
      v35[1] = v37;
      v38 = *(int *)(v33 + 64);
      v39 = (_QWORD *)(a1 + v38);
      v40 = (_QWORD *)(a2 + v38);
      *v39 = *v40;
      v41 = v40[1];
      v39[1] = v41;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v41);
      v42 = a1;
      v43 = v6;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
    v45 = *(int *)(a3 + 20);
    v46 = (uint64_t *)(a1 + v45);
    v47 = (uint64_t *)(a2 + v45);
    sub_10002B1A4(a1 + v45);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v49 = v48;
    if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
    {
      v50 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v46, v47, v50);
      v51 = v46;
      v52 = v49;
      v53 = 1;
    }
    else
    {
      v54 = *v47;
      *v46 = *v47;
      swift_retain(v54);
      v51 = v46;
      v52 = v49;
      v53 = 0;
    }
    swift_storeEnumTagMultiPayload(v51, v52, v53);
  }
  return a1;
}

uint64_t sub_10002B1A4(uint64_t a1)
{
  uint64_t v2;

  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002B1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v6 = type metadata accessor for OverviewTimelineEntry(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  if (EnumCaseMultiPayload == 1)
  {
    v38 = a3;
    sub_10002A7CC(0);
    v10 = v9;
    v11 = v9[12];
    v12 = a1 + v11;
    v13 = a2 + v11;
    *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
    v14 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v15 = v14[5];
    v16 = v12 + v15;
    v17 = v13 + v15;
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_BYTE *)(v12 + v14[6]) = *(_BYTE *)(v13 + v14[6]);
    v19 = v14[7];
    v20 = v12 + v19;
    v21 = v13 + v19;
    v22 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
    *(_QWORD *)(v12 + v14[8]) = *(_QWORD *)(v13 + v14[8]);
    *(_QWORD *)(v12 + v14[9]) = *(_QWORD *)(v13 + v14[9]);
    *(_BYTE *)(v12 + v14[10]) = *(_BYTE *)(v13 + v14[10]);
    v23 = v14[11];
    v24 = (void *)(v12 + v23);
    v25 = (const void *)(v13 + v23);
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v27 = v26;
    v28 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      sub_10001D6B0(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v24, v25, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
    }
    *(_BYTE *)(a1 + v10[16]) = *(_BYTE *)(a2 + v10[16]);
    *(_BYTE *)(a1 + v10[20]) = *(_BYTE *)(a2 + v10[20]);
    *(_BYTE *)(a1 + v10[24]) = *(_BYTE *)(a2 + v10[24]);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
    a3 = v38;
  }
  else
  {
    sub_10002A734(0);
    *(_OWORD *)(a1 + *(int *)(v30 + 48)) = *(_OWORD *)(a2 + *(int *)(v30 + 48));
    *(_OWORD *)(a1 + *(int *)(v30 + 64)) = *(_OWORD *)(a2 + *(int *)(v30 + 64));
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v31 = *(int *)(a3 + 20);
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v35 = v34;
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v36 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v32, v33, v36);
    swift_storeEnumTagMultiPayload(v32, v35, 1);
  }
  else
  {
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10002B4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1 != a2)
  {
    sub_10001DF70(a1, type metadata accessor for OverviewTimelineEntry);
    v6 = type metadata accessor for OverviewTimelineEntry(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      sub_10002A7CC(0);
      v10 = v9;
      v11 = v9[12];
      v12 = a1 + v11;
      v13 = a2 + v11;
      *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
      v14 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v15 = v14[5];
      v16 = v12 + v15;
      v17 = v13 + v15;
      sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_BYTE *)(v12 + v14[6]) = *(_BYTE *)(v13 + v14[6]);
      v19 = v14[7];
      v20 = v12 + v19;
      v21 = v13 + v19;
      v22 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
      *(_QWORD *)(v12 + v14[8]) = *(_QWORD *)(v13 + v14[8]);
      *(_QWORD *)(v12 + v14[9]) = *(_QWORD *)(v13 + v14[9]);
      *(_BYTE *)(v12 + v14[10]) = *(_BYTE *)(v13 + v14[10]);
      v23 = v14[11];
      v24 = (void *)(v12 + v23);
      v25 = (const void *)(v13 + v23);
      sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      v27 = v26;
      v28 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
      {
        sub_10001D6B0(0);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v24, v25, v27);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
      }
      *(_BYTE *)(a1 + v10[16]) = *(_BYTE *)(a2 + v10[16]);
      *(_BYTE *)(a1 + v10[20]) = *(_BYTE *)(a2 + v10[20]);
      *(_BYTE *)(a1 + v10[24]) = *(_BYTE *)(a2 + v10[24]);
      v31 = a1;
      v32 = v6;
      v33 = 1;
    }
    else
    {
      sub_10002A734(0);
      *(_OWORD *)(a1 + *(int *)(v30 + 48)) = *(_OWORD *)(a2 + *(int *)(v30 + 48));
      *(_OWORD *)(a1 + *(int *)(v30 + 64)) = *(_OWORD *)(a2 + *(int *)(v30 + 64));
      v31 = a1;
      v32 = v6;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    v34 = *(int *)(a3 + 20);
    v35 = (void *)(a1 + v34);
    v36 = (const void *)(a2 + v34);
    sub_10002B1A4(a1 + v34);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v38 = v37;
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v39 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v35, v36, v39);
      swift_storeEnumTagMultiPayload(v35, v38, 1);
    }
    else
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10002B80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B818);
}

uint64_t sub_10002B818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for OverviewTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10002B8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B8B0);
}

uint64_t sub_10002B8B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for OverviewTimelineEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10002B944(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for OverviewTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_10002B9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_100028D88(255);
  v1 = v0;
  sub_100028CC8(255);
  v3 = v2;
  sub_1000270DC(255, &qword_100112EA8, (uint64_t (*)(uint64_t))sub_100028BA8, sub_100028CAC, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>);
  v5 = v4;
  sub_100028BA8(255);
  v11 = v6;
  v12 = sub_100028CAC();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v11 = v5;
  v12 = OpaqueTypeConformance2;
  v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v11 = v3;
  v12 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v11 = v1;
  v12 = v9;
  return swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, 1);
}

uint64_t sub_10002BAC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E83EC, 1);
}

void sub_10002BAD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112F98)
  {
    sub_10002BC34(255, &qword_100112FA0, (uint64_t (*)(uint64_t))sub_10002BB48, (uint64_t (*)(uint64_t))sub_10002BD94, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for Group(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112F98);
  }
}

void sub_10002BB48(uint64_t a1)
{
  sub_10001D724(a1, &qword_100112FA8, (uint64_t (*)(uint64_t))sub_10002BB6C, sub_10002BD78, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
}

void sub_10002BB6C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112FB0, (uint64_t (*)(uint64_t))sub_10002BB88, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10002BB88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100112FB8)
  {
    sub_10002BC34(255, &qword_100112FC0, (uint64_t (*)(uint64_t))sub_10002BCA8, (uint64_t (*)(uint64_t))sub_10002BD1C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v3 = v2;
    sub_10000EDE8(255, &qword_100112FE0, (uint64_t (*)(uint64_t))sub_10002BCA8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100112FB8);
  }
}

void sub_10002BC34(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_10002BCA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100112FC8)
  {
    sub_1000143C4(255, &qword_100112FD0, (uint64_t)&type metadata for TextAlignment, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for Text, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100112FC8);
  }
}

void sub_10002BD1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100112FD8)
  {
    v0 = type metadata accessor for _ForegroundStyleModifier(0, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100112FD8);
  }
}

uint64_t sub_10002BD78()
{
  return sub_100003D3C(&qword_100112FE8, (uint64_t (*)(uint64_t))sub_10002BB6C, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

void sub_10002BD94(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100112FF0, (uint64_t (*)(uint64_t))sub_10002BDB8, (uint64_t (*)(uint64_t))sub_10002BDF8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

void sub_10002BDB8(uint64_t a1)
{
  sub_1000270DC(a1, &qword_100112FF8, type metadata accessor for WatchlistOverviewContentView, sub_10002BDDC, (uint64_t)&opaque type descriptor for <<opaque return type of View.redacted(reason:)>>);
}

uint64_t sub_10002BDDC()
{
  return sub_100003D3C(&qword_100113000, type metadata accessor for WatchlistOverviewContentView, (uint64_t)&unk_1000DD430);
}

void sub_10002BDF8(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113008, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
}

void sub_10002BE14(uint64_t a1)
{
  sub_10002C578(a1, &qword_100113010, (uint64_t (*)(uint64_t))sub_10002BAD4);
}

void sub_10002BE28(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113020, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
}

void sub_10002BE44(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_100113028)
  {
    sub_10002BC34(255, &qword_100113018, (uint64_t (*)(uint64_t))sub_10002BE14, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v5[0] = v2;
    v5[1] = &type metadata for TodayBackgroundView;
    v5[2] = sub_10002BEF4();
    v5[3] = sub_10002C1A8();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100113028);
  }
}

unint64_t sub_10002BEF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113030;
  if (!qword_100113030)
  {
    sub_10002BC34(255, &qword_100113018, (uint64_t (*)(uint64_t))sub_10002BE14, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_10002BF9C();
    sub_100003D3C(&qword_100113068, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113030);
  }
  return result;
}

unint64_t sub_10002BF9C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113038;
  if (!qword_100113038)
  {
    sub_10002BE14(255);
    v2 = v1;
    sub_10002C004();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113038);
  }
  return result;
}

unint64_t sub_10002C004()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113040;
  if (!qword_100113040)
  {
    sub_10002BAD4(255);
    v2 = v1;
    sub_10002C064();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_100113040);
  }
  return result;
}

unint64_t sub_10002C064()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113048;
  if (!qword_100113048)
  {
    sub_10002BC34(255, &qword_100112FA0, (uint64_t (*)(uint64_t))sub_10002BB48, (uint64_t (*)(uint64_t))sub_10002BD94, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_100003D3C(&qword_100113050, (uint64_t (*)(uint64_t))sub_10002BB48, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10002C104();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113048);
  }
  return result;
}

unint64_t sub_10002C104()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_100113058;
  if (!qword_100113058)
  {
    sub_10002BD94(255);
    v2 = v1;
    v3[0] = type metadata accessor for WatchlistOverviewContentView(255);
    v3[1] = sub_10002BDDC();
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_100003D3C(&qword_100113060, (uint64_t (*)(uint64_t))sub_10002BDF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113058);
  }
  return result;
}

unint64_t sub_10002C1A8()
{
  unint64_t result;

  result = qword_100113070;
  if (!qword_100113070)
  {
    result = swift_getWitnessTable(&unk_1000E3704, &type metadata for TodayBackgroundView);
    atomic_store(result, (unint64_t *)&qword_100113070);
  }
  return result;
}

uint64_t sub_10002C1F4(uint64_t a1)
{
  uint64_t v2;

  sub_10002BC34(0, &qword_100113018, (uint64_t (*)(uint64_t))sub_10002BE14, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002C250(uint64_t a1, uint64_t a2)
{
  return sub_10001DE2C(a1, a2, (uint64_t (*)(_QWORD))sub_10002BAD4);
}

uint64_t sub_10002C25C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_100003D3C(&qword_100113098, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_10002C2BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_100003D3C(&qword_100113098, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

unint64_t sub_10002C338()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113090;
  if (!qword_100113090)
  {
    sub_10000EDE8(255, &qword_100113088, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100113090);
  }
  return result;
}

uint64_t sub_10002C3A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002C3C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002C3F0(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10002C414(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10002C438(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_1000144EC(result, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    return swift_retain(a5);
  }
  return result;
}

uint64_t sub_10002C474(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_100014490(result, a2, a3 & 1);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10002C4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  ValueMetadata *v6;
  unint64_t v7;
  unint64_t v8;

  sub_10002BE44(255);
  v1 = v0;
  sub_10002BC34(255, &qword_100113018, (uint64_t (*)(uint64_t))sub_10002BE14, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v5 = v2;
  v6 = &type metadata for TodayBackgroundView;
  v7 = sub_10002BEF4();
  v8 = sub_10002C1A8();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v5 = v1;
  v6 = (ValueMetadata *)OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
}

uint64_t sub_10002C558(uint64_t a1, uint64_t a2)
{
  return sub_10001DE2C(a1, a2, type metadata accessor for LargeSparklineView);
}

void sub_10002C564(uint64_t a1)
{
  sub_10002C578(a1, &qword_1001130A0, type metadata accessor for LargeSparklineView);
}

void sub_10002C578(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for ModifiedContent(a1, v5, &type metadata for _FlexFrameLayout);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10002C5CC(uint64_t a1, uint64_t a2)
{
  return sub_10001DE2C(a1, a2, type metadata accessor for HeadlineView);
}

void sub_10002C5D8(uint64_t a1)
{
  sub_10002C578(a1, &qword_1001130A8, type metadata accessor for HeadlineView);
}

unint64_t sub_10002C5EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002DBEC(0, &qword_100113270, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10002D24C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002C710(uint64_t a1)
{
  return sub_10002C728(a1, sub_10002D66C);
}

unint64_t sub_10002C71C(uint64_t a1)
{
  return sub_10002C728(a1, sub_10002D5F0);
}

unint64_t sub_10002C728(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  a2(0);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_10002D24C(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002C83C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002DBEC(0, &qword_1001132C0, (uint64_t)&type metadata for String);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10002D24C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002C968(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002D58C(0, a2, a3, a4);
  v6 = static _DictionaryStorage.allocate(capacity:)(v5);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  swift_retain(v6);
  v9 = (void **)(a1 + 48);
  while (1)
  {
    v10 = (uint64_t)*(v9 - 2);
    v11 = (uint64_t)*(v9 - 1);
    v12 = *v9;
    swift_bridgeObjectRetain(v11);
    v13 = v12;
    result = sub_10002D24C(v10, v11);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v16 = (uint64_t *)(v7[6] + 16 * result);
    *v16 = v10;
    v16[1] = v11;
    *(_QWORD *)(v7[7] + 8 * result) = v13;
    v17 = v7[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v7[2] = v19;
    v9 += 3;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002CA7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002DD7C(0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_10002D31C((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002CB80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002DC3C(0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002DCC0(v7, (uint64_t)&v14);
    v8 = v14;
    result = sub_10002D31C(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10002DD6C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002CC94(uint64_t a1)
{
  return sub_10002CCCC(a1, (unint64_t *)&qword_100113288, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation, &qword_100113290);
}

unint64_t sub_10002CCB0(uint64_t a1)
{
  return sub_10002CCCC(a1, (unint64_t *)&qword_1001132A0, (uint64_t (*)(uint64_t))sub_10002DA9C, &qword_1001132B8);
}

unint64_t sub_10002CCCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_10002DA40(0, a2, a3);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v28 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v28);
    return (unint64_t)v14;
  }
  sub_10002DB38(0, a4, a3);
  v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    goto LABEL_9;
  v16 = v13 + 64;
  v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v9 + 72);
  swift_retain(v13);
  while (1)
  {
    sub_10002DBA0(v18, (uint64_t)v11, a2, a3);
    result = sub_10002D9F4();
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = v14[7];
    v24 = a3(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v11, v24);
    v25 = v14[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_12;
    v14[2] = v27;
    v18 += v19;
    if (!--v15)
    {
      swift_release(v14);
      v28 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10002CE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10002CE64, 0, 0);
}

uint64_t sub_10002CE64()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100007184((_QWORD *)(*(_QWORD *)(v0 + 24) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 40));
  v1 = (_QWORD *)swift_task_alloc(dword_1001147A4);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_10002CEBC;
  return sub_100054310();
}

uint64_t sub_10002CEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch(sub_10002CF38, 0, 0);
}

uint64_t sub_10002CF38()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CF50(id *a1, uint64_t a2)
{
  id v3;
  id v4;
  unint64_t v5;
  id v6;
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[40];

  v3 = *a1;
  v4 = objc_msgSend(*a1, "derivedPersonalizationData");
  if (!v4)
  {
    v5 = sub_10002C968((uint64_t)_swiftEmptyArrayStorage, &qword_100113258, &qword_100113250, NTPBPersonalizationAggregate_ptr);
    v6 = objc_allocWithZone((Class)FCDerivedPersonalizationData);
    sub_10002D554(0, &qword_100113250, NTPBPersonalizationAggregate_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v4 = objc_msgSend(v6, "initWithAggregates:scoringType:decayRate:", isa, 0, 0.0);

  }
  type metadata accessor for XavierScoringService(0);
  v8 = objc_msgSend(objc_allocWithZone((Class)FCReadonlyPersonalizationAggregateStore), "initWithGenerator:", v4);
  sub_10001DB68(a2 + 56, (uint64_t)v12);
  swift_unknownObjectRetain(v3);
  v9 = XavierScoringService.__allocating_init(aggregateStore:configurationManager:translationProvider:todayPrivateData:)(v8, v12, 0, v3);

  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  return swift_unknownObjectRelease(v10);
}

uint64_t sub_10002D0C0()
{
  _QWORD *v0;

  sub_100007164(v0 + 2);
  sub_100007164(v0 + 7);
  swift_unknownObjectRelease(v0[12]);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for WidgetScoringService()
{
  return objc_opt_self(_TtC12StocksWidget20WidgetScoringService);
}

uint64_t sub_10002D114()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *v0;
  sub_10000EDE8(0, (unint64_t *)&unk_1001131D0, (uint64_t (*)(uint64_t))sub_10002D488, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Promise);
  swift_retain(v1);
  v2 = Promise.__allocating_init<A>(task:)(&unk_100113248, v1);
  v3 = swift_retain(v1);
  v4 = (void *)zalgo.getter(v3);
  v5 = Promise.then<A>(on:closure:)(v4, sub_10002D53C, v1, (char *)&type metadata for () + 8);
  swift_release(v2);
  swift_release(v1);

  return v5;
}

unint64_t sub_10002D1C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  if (!v2)
    return sub_10002C968((uint64_t)_swiftEmptyArrayStorage, &qword_1001131C0, &qword_1001131C8, FCFeedPersonalizedItemScoreProfile_ptr);
  ObjectType = swift_getObjectType(v2);
  swift_unknownObjectRetain(v2);
  v5 = FCFeedPersonalizing.score(items:options:)(a1, 0, ObjectType);
  swift_unknownObjectRelease(v2);
  return v5;
}

unint64_t sub_10002D24C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10002D3A8(a1, a2, v5);
}

unint64_t sub_10002D2B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Stock(0);
  v6 = sub_100003D3C(&qword_1001132C8, (uint64_t (*)(uint64_t))&type metadata accessor for Stock, (uint64_t)&protocol conformance descriptor for Stock);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10002D714(a1, v7);
}

unint64_t sub_10002D31C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10002D854(a1, v7);
}

unint64_t sub_10002D3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10002D488()
{
  unint64_t result;
  char *v1;

  result = qword_100114860;
  if (!qword_100114860)
  {
    v1 = (char *)&OBJC_PROTOCOL___FCTodayPrivateData.isa + 1;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v1);
    atomic_store(result, &qword_100114860);
  }
  return result;
}

uint64_t sub_10002D4DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100113244);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10000E914;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_10002CE64, 0, 0);
}

uint64_t sub_10002D53C(id *a1)
{
  uint64_t v1;

  return sub_10002CF50(a1, v1);
}

uint64_t sub_10002D554(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_10002D58C(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10002D554(255, a3, a4);
    v7 = type metadata accessor for _DictionaryStorage(a1, &type metadata for String, v6, &protocol witness table for String);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_10002D5F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113260)
  {
    sub_10000EDE8(255, &qword_100113268, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = type metadata accessor for _DictionaryStorage(a1, &type metadata for String, v2, &protocol witness table for String);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113260);
  }
}

void sub_10002D66C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113278)
  {
    sub_10000F054();
    v3 = type metadata accessor for _DictionaryStorage(a1, &type metadata for String, v2, &protocol witness table for String);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113278);
  }
}

unint64_t sub_10002D6D0()
{
  unint64_t result;

  result = qword_100113298;
  if (!qword_100113298)
  {
    result = swift_getWitnessTable(&unk_1000E2B34, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100113298);
  }
  return result;
}

unint64_t sub_10002D714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v19 = a1;
  v5 = type metadata accessor for Stock(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      v15 = sub_100003D3C(&qword_1001132D0, (uint64_t (*)(uint64_t))&type metadata accessor for Stock, (uint64_t)&protocol conformance descriptor for Stock);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v19, v5, v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

unint64_t sub_10002D854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_10002D9C8(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_10002D9F4()
{
  uint64_t v0;
  Swift::Int v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v0 + 40));
  String.hash(into:)(v3, 1953460082, 0xE400000000000000);
  v1 = Hasher._finalize()();
  return sub_10002D9C8(v1);
}

void sub_10002DA40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for StocksSettingsDeepLinks, v5, 0, 0);
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_10002DA9C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001132A8)
  {
    v2 = sub_10002DAF4();
    v3 = type metadata accessor for _EnumURLRepresentation.EnumSingleURLRepresentation(a1, &type metadata for StocksSettingsDeepLinks, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001132A8);
  }
}

unint64_t sub_10002DAF4()
{
  unint64_t result;

  result = qword_1001132B0;
  if (!qword_1001132B0)
  {
    result = swift_getWitnessTable(&unk_1000E2BE4, &type metadata for StocksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1001132B0);
  }
  return result;
}

void sub_10002DB38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = sub_10002D6D0();
    v7 = type metadata accessor for _DictionaryStorage(a1, &type metadata for StocksSettingsDeepLinks, v5, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10002DBA0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10002DA40(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_10002DBEC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for _DictionaryStorage(0, &type metadata for String, a3, &protocol witness table for String);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_10002DC3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001132D8)
  {
    type metadata accessor for AttributeName(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_1001132E0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1000DB62C);
    v5 = type metadata accessor for _DictionaryStorage(a1, v3, &type metadata for Any[8], v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001132D8);
  }
}

uint64_t sub_10002DCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10002DD04(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10002DD04(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1001132E8)
  {
    type metadata accessor for AttributeName(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, &type metadata for Any[8], 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001132E8);
  }
}

_OWORD *sub_10002DD6C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_10002DD7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_1001132F0)
  {
    type metadata accessor for TraitKey(255);
    v3 = v2;
    type metadata accessor for Weight(255);
    v5 = v4;
    v6 = sub_100003D3C(&qword_100111988, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1000DB670);
    v7 = type metadata accessor for _DictionaryStorage(a1, v3, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1001132F0);
  }
}

uint64_t sub_10002DE10(uint64_t a1)
{
  return sub_10002DECC(a1, qword_1001267E8, 0x746567646957, 0xE600000000000000);
}

uint64_t sub_10002DE2C(uint64_t a1)
{
  return sub_10002DECC(a1, qword_100126800, 0x776569767265764FLL, 0xEE00746567646957);
}

uint64_t sub_10002DE58(uint64_t a1)
{
  return sub_10002DECC(a1, qword_100126818, 0x69576C6961746544, 0xEC00000074656764);
}

uint64_t sub_10002DE80(uint64_t a1)
{
  return sub_10002DECC(a1, qword_100126830, 0x6469577472616843, 0xEB00000000746567);
}

uint64_t sub_10002DEA8(uint64_t a1)
{
  return sub_10002DECC(a1, qword_100126848, 0x6544746567646957, 0xEA00000000006F6DLL);
}

uint64_t sub_10002DECC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = type metadata accessor for Logger(0);
  sub_10001253C(v7, a2);
  sub_100012524(v7, (uint64_t)a2);
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = objc_msgSend(v8, "bundleIdentifier");

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v12 = 0x80000001000E5710;
    v10 = 0xD000000000000017;
  }
  return Logger.init(subsystem:category:)(v10, v12, a3, a4);
}

uint64_t sub_10002DFB0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD v2[2];

  v2[0] = 1701736302;
  v2[1] = 0xE400000000000000;
  sub_10002E008();
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = TaskLocal.init(wrappedValue:)(v2);
  qword_100126860 = result;
  return result;
}

void sub_10002E008()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1001132F8)
  {
    v0 = type metadata accessor for TaskLocal(0, &type metadata for LoggingActivity);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1001132F8);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for LoggingActivity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for LoggingActivity(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for LoggingActivity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for LoggingActivity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoggingActivity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoggingActivity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoggingActivity()
{
  return &type metadata for LoggingActivity;
}

uint64_t sub_10002E198(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = a2[3];
    if (v7 == 1)
    {
      v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v7;
      swift_bridgeObjectRetain(v7);
    }
    v10 = a2[4];
    *(_QWORD *)(a1 + 32) = v10;
    v11 = a3[6];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v15 = v14;
    swift_retain(v10);
    if (swift_getEnumCaseMultiPayload(v13, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v13;
      *v12 = *v13;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v15, v17);
    v19 = a3[7];
    v20 = a1 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    sub_100024CBC(*(_QWORD *)v21, v23);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v23;
    v24 = a3[8];
    v9 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)(a1 + v24) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_10002E304(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  swift_release(*(_QWORD *)(a1 + 32));
  v5 = (_QWORD *)(a1 + a2[6]);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  sub_100024DD8(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  return swift_release(*(_QWORD *)(a1 + a2[8]));
}

uint64_t sub_10002E3C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain(v6);
  }
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a3[6];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v13 = v12;
  swift_retain(v8);
  if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v11;
    *v10 = *v11;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v13, v15);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  sub_100024CBC(*(_QWORD *)v19, v21);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v21;
  v22 = a3[8];
  v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_retain(v23);
  return a1;
}

uint64_t sub_10002E508(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = a2[3];
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      v10 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 16) = a2[2];
      v11 = a2[3];
      *(_QWORD *)(a1 + 24) = v11;
      swift_bridgeObjectRetain(v11);
    }
  }
  else if (v7 == 1)
  {
    sub_10002304C(a1);
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    v12 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 16) = a2[2];
    v13 = a2[3];
    *(_QWORD *)(a1 + 24) = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(v6);
  }
  v14 = a2[4];
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v14;
  swift_retain(v14);
  swift_release(v15);
  if ((uint64_t *)a1 != a2)
  {
    v16 = a3[6];
    v17 = (uint64_t *)(a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    sub_10002B1A4(a1 + v16);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v20 = v19;
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v21 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v18;
      *v17 = *v18;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v20, v22);
  }
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_100024CBC(*(_QWORD *)v26, v28);
  v29 = *(_QWORD *)v25;
  v30 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  sub_100024DD8(v29, v30);
  v31 = a3[8];
  v32 = *(uint64_t *)((char *)a2 + v31);
  v33 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = v32;
  swift_retain(v32);
  swift_release(v33);
  return a1;
}

uint64_t sub_10002E6D4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v11 = v10;
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
    swift_storeEnumTagMultiPayload(v8, v11, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  return a1;
}

uint64_t sub_10002E7CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 == 1)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 == 1)
  {
    sub_10002304C(a1);
LABEL_4:
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease(v6);
LABEL_6:
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v9);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_10002B1A4(a1 + v10);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v11, v12, v15);
      swift_storeEnumTagMultiPayload(v11, v14, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = (uint64_t *)(a2 + v16);
  v19 = *v18;
  LOBYTE(v18) = *((_BYTE *)v18 + 8);
  v20 = *(_QWORD *)v17;
  v21 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = (_BYTE)v18;
  sub_100024DD8(v20, v21);
  v22 = a3[8];
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  swift_release(v23);
  return a1;
}

uint64_t sub_10002E934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002E940);
}

uint64_t sub_10002E940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10002E9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002E9E0);
}

uint64_t sub_10002E9E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for StockPriceView(uint64_t a1)
{
  uint64_t result;

  result = qword_100113358;
  if (!qword_100113358)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StockPriceView);
  return result;
}

void sub_10002EAA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = " ";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000DCF40;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_10002EB4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8494, 1);
}

uint64_t sub_10002EB5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  char *v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD v122[4];

  v2 = (uint64_t)v1;
  v110 = a1;
  v106 = type metadata accessor for ContentTransition.NumericTextConfiguration(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v103 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v104 = (char *)&v88 - v5;
  v6 = type metadata accessor for ContentTransition(0);
  v108 = *(_QWORD *)(v6 - 8);
  v109 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DynamicTypeSize(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v95 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v88 - v14;
  v16 = type metadata accessor for StockPriceView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v88 - v20;
  sub_10002F2F4(0);
  v98 = v22;
  v96 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v94 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F76C(0);
  v93 = v24;
  __chkstk_darwin(v24);
  v102 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F7E8(0);
  v100 = v26;
  __chkstk_darwin(v26);
  v101 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v1[1];
  v29 = v1[2];
  v30 = v1[3];
  v92 = *v1;
  v91 = v28;
  v90 = v29;
  v31 = sub_100024540(v92, v28, v29, v30);
  SettingProperty.wrappedValue.getter(v31);
  v32 = v111;
  sub_10001DE2C(v2, (uint64_t)v21, type metadata accessor for StockPriceView);
  if (v32 == 1)
  {
    sub_100045E2C(v15);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    v33 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
    v34 = *(void (**)(char *, uint64_t))(v10 + 8);
    if (v33 != enum case for WidgetFamily.accessoryCircular(_:)
      && v33 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v33 != enum case for WidgetFamily.accessoryInline(_:))
    {
      v34(v12, v9);
      v34(v15, v9);
      sub_10001DF70((uint64_t)v21, type metadata accessor for StockPriceView);
      sub_10001DE2C(v2, (uint64_t)v18, type metadata accessor for StockPriceView);
      v35 = &v18[*(int *)(v16 + 28)];
      v36 = *(_QWORD *)v35;
      v37 = v35[8];
      sub_100024CBC(*(_QWORD *)v35, v37);
      v38 = sub_100045C74(v36, v37);
      sub_100024DD8(v36, v37);
      goto LABEL_8;
    }
    v34(v15, v9);
  }
  sub_10001DF70((uint64_t)v21, type metadata accessor for StockPriceView);
  sub_10001DE2C(v2, (uint64_t)v18, type metadata accessor for StockPriceView);
  v38 = 0;
LABEL_8:
  sub_10001DF70((uint64_t)v18, type metadata accessor for StockPriceView);
  v122[0] = v92;
  v122[1] = v91;
  v122[2] = v90;
  v122[3] = v30;
  LOBYTE(v111) = v38 & 1;
  v112 = 0;
  v113 = 0;
  LOBYTE(v114) = 0;
  v115 = xmmword_1000DCF00;
  v116 = 0xA300000000000000;
  v117 = 9666786;
  v118 = 0xA300000000000000;
  v119 = 9666786;
  v120 = 0xA300000000000000;
  sub_10002F864(0);
  v40 = v39;
  v41 = sub_10002F92C();
  v42 = sub_10002F974();
  v43 = Text.init<A>(_:format:)(v122, &v111, v40, v41, v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  KeyPath = swift_getKeyPath(&unk_1000DCFA8);
  v51 = static HierarchicalShapeStyle.primary.getter();
  v89 = (unint64_t *)v2;
  v52 = *(_QWORD *)(v2 + 32);
  v53 = swift_getKeyPath(&unk_1000DCFD0);
  v111 = v43;
  v112 = v45;
  LOBYTE(v113) = v47 & 1;
  v114 = v49;
  *(_QWORD *)&v115 = 0;
  *((_QWORD *)&v115 + 1) = KeyPath;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  LOBYTE(v119) = 0;
  HIDWORD(v119) = v51;
  v120 = v53;
  v121 = v52;
  v54 = v97;
  v55 = v95;
  v56 = v99;
  (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v95, enum case for DynamicTypeSize.large(_:), v99);
  sub_10002F368(0);
  v58 = v57;
  v59 = sub_10002F524();
  swift_retain(v52);
  v60 = v94;
  View.dynamicTypeSize(_:)(v55, v58, v59);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  v61 = v114;
  v63 = v115;
  v62 = v116;
  v64 = v117;
  v65 = v118;
  LOBYTE(v52) = v119;
  v66 = v120;
  v67 = v121;
  sub_100014490(v111, v112, v113);
  swift_bridgeObjectRelease(v61);
  swift_release(v63);
  sub_100028060(*((uint64_t *)&v63 + 1), v62, v64, v65, v52);
  swift_release(v66);
  swift_release(v67);
  v68 = swift_getKeyPath(&unk_1000DD000);
  v69 = v96;
  v70 = (uint64_t)v102;
  v71 = v98;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v102, v60, v98);
  v72 = v70 + *(int *)(v93 + 36);
  *(_QWORD *)v72 = v68;
  *(_QWORD *)(v72 + 8) = 1;
  *(_BYTE *)(v72 + 16) = 0;
  v73 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v60, v71);
  v74.n128_u64[0] = *v89;
  if ((v89[1] & 1) != 0)
    v74.n128_f64[0] = 0.0;
  if (v89[3] == 1)
    v74.n128_f64[0] = 0.0;
  v75 = v103;
  static ContentTransition.NumericTextConfiguration.automatic(value:)(v73, v74);
  v76 = v104;
  ContentTransition.NumericTextConfiguration.reversed(_:)(1);
  v77 = *(void (**)(char *, uint64_t))(v105 + 8);
  v78 = v75;
  v79 = v106;
  v77(v78, v106);
  v80 = v107;
  static ContentTransition.numericText(_:)(v76);
  v77(v76, v79);
  v81 = swift_getKeyPath(&unk_1000DD030);
  v82 = (uint64_t)v101;
  v83 = (uint64_t *)&v101[*(int *)(v100 + 36)];
  sub_10000EDE8(0, &qword_1001133F0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentTransition, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  v86 = v108;
  v85 = v109;
  (*(void (**)(char *, char *, uint64_t))(v108 + 16))((char *)v83 + *(int *)(v84 + 28), v80, v109);
  *v83 = v81;
  sub_10001DE2C(v70, v82, (uint64_t (*)(_QWORD))sub_10002F76C);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v80, v85);
  sub_10001DF70(v70, (uint64_t (*)(_QWORD))sub_10002F76C);
  return sub_10002FB24(v82, v110);
}

void sub_10002F2F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1001133A0)
  {
    sub_10002F368(255);
    v5[0] = v2;
    v5[1] = sub_10002F524();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001133A0);
  }
}

void sub_10002F368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001133A8)
  {
    sub_10002F3E4(255);
    v3 = v2;
    sub_10002F4D0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001133A8);
  }
}

void sub_10002F3E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001133B0)
  {
    sub_10002F488(255, (unint64_t *)&qword_1001133B8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v3 = v2;
    sub_10002F488(255, (unint64_t *)&qword_100112FD8, (uint64_t)&type metadata for HierarchicalShapeStyle, (uint64_t)&protocol witness table for HierarchicalShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ForegroundStyleModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001133B0);
  }
}

void sub_10002F488(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_10002F4D0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10002F9E4(255, a3, a4);
    v7 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_10002F524()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001133C0;
  if (!qword_1001133C0)
  {
    sub_10002F368(255);
    v2 = v1;
    sub_10002F5CC(&qword_1001133C8, (uint64_t (*)(uint64_t))sub_10002F3E4, (void (*)(void))sub_10002F63C, (void (*)(void))sub_10002F6C4);
    sub_10002F72C(&qword_100112E30, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001133C0);
  }
  return result;
}

uint64_t sub_10002F5CC(unint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002F63C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001133D0;
  if (!qword_1001133D0)
  {
    sub_10002F488(255, (unint64_t *)&qword_1001133B8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_1000276A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001133D0);
  }
  return result;
}

unint64_t sub_10002F6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001133D8;
  if (!qword_1001133D8)
  {
    sub_10002F488(255, (unint64_t *)&qword_100112FD8, (uint64_t)&type metadata for HierarchicalShapeStyle, (uint64_t)&protocol witness table for HierarchicalShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ForegroundStyleModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ForegroundStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001133D8);
  }
  return result;
}

uint64_t sub_10002F72C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_10002F4D0(255, a2, a3, a4);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10002F76C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001133E0)
  {
    sub_10002F2F4(255);
    v3 = v2;
    sub_10002F4D0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001133E0);
  }
}

void sub_10002F7E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001133E8)
  {
    sub_10002F76C(255);
    v3 = v2;
    sub_10000EDE8(255, &qword_1001133F0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentTransition, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001133E8);
  }
}

void sub_10002F864(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[5];

  if (!qword_1001133F8)
  {
    v4[0] = &_s17WidgetFormatStyleVN;
    v4[1] = sub_10002F8E8();
    v4[2] = &protocol witness table for String;
    v4[3] = &protocol witness table for String;
    v4[4] = &protocol witness table for String;
    v2 = type metadata accessor for NilPlaceholderFormatStyle(a1, (uint64_t)v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1001133F8);
  }
}

unint64_t sub_10002F8E8()
{
  unint64_t result;

  result = qword_100113400;
  if (!qword_100113400)
  {
    result = swift_getWitnessTable(&unk_1000DE57C, &_s17WidgetFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100113400);
  }
  return result;
}

unint64_t sub_10002F92C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113408;
  if (!qword_100113408)
  {
    sub_10002F864(255);
    result = swift_getWitnessTable(&unk_1000DEF58, v1);
    atomic_store(result, (unint64_t *)&qword_100113408);
  }
  return result;
}

unint64_t sub_10002F974()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113410;
  if (!qword_100113410)
  {
    sub_10002F9E4(255, &qword_100113418, (uint64_t)&type metadata for StockPrice);
    v2 = v1;
    sub_10002FA28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(result, (unint64_t *)&qword_100113410);
  }
  return result;
}

void sub_10002F9E4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Optional(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_10002FA28()
{
  unint64_t result;

  result = qword_100113420;
  if (!qword_100113420)
  {
    result = swift_getWitnessTable(&unk_1000E0CF0, &type metadata for StockPrice);
    atomic_store(result, (unint64_t *)&qword_100113420);
  }
  return result;
}

uint64_t sub_10002FA74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentTransition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.contentTransition.setter(v4);
}

uint64_t sub_10002FB00()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_10002FB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10002F7E8(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FB68()
{
  return sub_10002F5CC(&qword_100113428, (uint64_t (*)(uint64_t))sub_10002F7E8, (void (*)(void))sub_10002FB9C, (void (*)(void))sub_10002FC48);
}

unint64_t sub_10002FB9C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100113430;
  if (!qword_100113430)
  {
    sub_10002F76C(255);
    v2 = v1;
    sub_10002F368(255);
    v4[0] = v3;
    v4[1] = sub_10002F524();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    sub_10002F72C(&qword_100112D98, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113430);
  }
  return result;
}

unint64_t sub_10002FC48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113438;
  if (!qword_100113438)
  {
    sub_10000EDE8(255, &qword_1001133F0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentTransition, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100113438);
  }
  return result;
}

void sub_10002FCAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100111ED8)
  {
    v2 = type metadata accessor for PreparedSparkline(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100111ED8);
  }
}

uint64_t sub_10002FD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002FD20);
}

uint64_t sub_10002FD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002FD30);
}

uint64_t type metadata accessor for SmallSparklineView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100113498, (uint64_t)&nominal type descriptor for SmallSparklineView);
}

_QWORD *sub_10002FD4C(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, int *);
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;

  v4 = (int *)type metadata accessor for PreparedSparkline(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      v27 = *a2;
      v28 = *a1;
      *a1 = *a2;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28);
      v29 = v4[5];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for Date(0);
      v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24);
      v33(v30, v31, v32);
      sub_100022800(0);
      v33(&v30[*(int *)(v34 + 36)], &v31[*(int *)(v34 + 36)], v32);
      v35 = v4[6];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
      v39 = v4[7];
      v40 = (_QWORD *)((char *)a1 + v39);
      v41 = (_QWORD *)((char *)a2 + v39);
      *v40 = *v41;
      v40[1] = v41[1];
      v42 = v4[8];
      v43 = (char *)a1 + v42;
      v44 = (char *)a2 + v42;
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
      return a1;
    }
    sub_10001DF70((uint64_t)a1, type metadata accessor for PreparedSparkline);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_10002FCAC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  v9 = *a2;
  *a1 = *a2;
  v10 = v4[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  v15 = swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13, v15);
  sub_100022800(0);
  ((void (*)(char *, char *, uint64_t))v14)(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v13);
  v17 = v4[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  v21 = v4[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

_QWORD *sub_10002FFB0(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, int *);
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;

  v4 = (int *)type metadata accessor for PreparedSparkline(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      v24 = *a1;
      *a1 = *a2;
      swift_bridgeObjectRelease(v24);
      v25 = v4[5];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = type metadata accessor for Date(0);
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40);
      v29(v26, v27, v28);
      sub_100022800(0);
      v29(&v26[*(int *)(v30 + 36)], &v27[*(int *)(v30 + 36)], v28);
      v31 = v4[6];
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      v34 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
      *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
      v35 = v4[8];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v36[8] = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
      return a1;
    }
    sub_10001DF70((uint64_t)a1, type metadata accessor for PreparedSparkline);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_10002FCAC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  v9 = v4[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  sub_100022800(0);
  v13(&v10[*(int *)(v14 + 36)], &v11[*(int *)(v14 + 36)], v12);
  v15 = v4[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  v19 = v4[8];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1000301EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000301F8);
}

uint64_t sub_1000301FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030208);
}

uint64_t type metadata accessor for RegularSparklineView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100113528, (uint64_t)&nominal type descriptor for RegularSparklineView);
}

uint64_t sub_100030220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003022C);
}

uint64_t sub_100030230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003023C);
}

uint64_t type metadata accessor for LargeSparklineView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001135B8, (uint64_t)&nominal type descriptor for LargeSparklineView);
}

uint64_t sub_100030254(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E85AC, 1);
}

uint64_t sub_100030264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  _QWORD v39[5];
  _OWORD v40[3];

  v2 = v1;
  v37 = a1;
  sub_10002FCAC(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SparklineView(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000307C4(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030F58(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000245D0(v2, (uint64_t)v5);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v38, 1, 0, _swiftEmptyArrayStorage, 1.5, 10.0, 0.0);
  sub_100030850();
  v20 = swift_allocObject(v19, 48, 7);
  __asm { FMOV            V1.2D, #3.0 }
  *(_OWORD *)(v20 + 16) = xmmword_1000DD060;
  *(_OWORD *)(v20 + 32) = _Q1;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 1, 0, v20, 0.75, 10.0, 0.0);
  sub_100046A84((uint64_t)v5, v38, (uint64_t)v39, 0, 0, 3, 1, (uint64_t)v8, 1.0);
  v26 = sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
  View.chartXAxis(_:)(2, v6, v26);
  sub_10001DF70((uint64_t)v8, type metadata accessor for SparklineView);
  *(_QWORD *)&v40[0] = v6;
  *((_QWORD *)&v40[0] + 1) = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
  View.chartYAxis(_:)(2, v10, OpaqueTypeConformance2);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v29 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(v40, 0x4050000000000000, 0, 0x4037000000000000, 0, v29, v30);
  v31 = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v37, v18, v15);
  sub_100031010(0);
  v33 = (_OWORD *)(v31 + *(int *)(v32 + 36));
  v34 = v40[1];
  *v33 = v40[0];
  v33[1] = v34;
  v33[2] = v40[2];
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_100030518@<X0>(uint64_t a1@<X8>)
{
  return sub_10003053C(0, 1, 2, 2u, a1);
}

uint64_t sub_10003053C@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  unsigned int v32;
  _QWORD v33[2];
  _OWORD v34[2];
  _QWORD v35[5];

  v32 = a4;
  v9 = v5;
  v31 = a5;
  sub_10002FCAC(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SparklineView(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000307C4(0);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000245D0(v9, (uint64_t)v12);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v34, 1, 0, _swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
  sub_100030850();
  v22 = swift_allocObject(v21, 48, 7);
  __asm { FMOV            V1.2D, #2.0 }
  *(_OWORD *)(v22 + 16) = xmmword_1000DD060;
  *(_OWORD *)(v22 + 32) = _Q1;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v35, 1, 0, v22, 1.0, 10.0, 0.0);
  sub_100046A84((uint64_t)v12, v34, (uint64_t)v35, a1, 0, 3, a2, (uint64_t)v15, 0.4);
  v28 = sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
  View.chartXAxis(_:)(a3, v13, v28);
  sub_10001DF70((uint64_t)v15, type metadata accessor for SparklineView);
  v33[0] = v13;
  v33[1] = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v33, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
  View.chartYAxis(_:)(v32, v17, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

uint64_t sub_10003075C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003053C(1, 0, 1, 2u, a1);
}

uint64_t sub_100030780@<X0>(uint64_t a1@<X8>)
{
  return sub_10003053C(1, 0, 1, 1u, a1);
}

uint64_t sub_1000307A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8584, 1);
}

uint64_t sub_1000307B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E855C, 1);
}

void sub_1000307C4(uint64_t a1)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1001135F0)
  {
    v4[0] = type metadata accessor for SparklineView(255);
    v4[1] = sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v4, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 0);
    if (!v3)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001135F0);
  }
}

void sub_100030850()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100113600)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, &type metadata for CGFloat);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100113600);
  }
}

uint64_t *sub_1000308A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  sub_10002FCAC(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = (int *)type metadata accessor for PreparedSparkline(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      v11 = v7[5];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for Date(0);
      v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
      v16 = swift_bridgeObjectRetain(v10);
      v15(v12, v13, v14, v16);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v15)(&v12[*(int *)(v17 + 36)], &v13[*(int *)(v17 + 36)], v14);
      v18 = v7[6];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      v22 = v7[8];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100030A2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = type metadata accessor for PreparedSparkline(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*a1);
    v4 = (char *)a1 + *(int *)(v2 + 20);
    v5 = type metadata accessor for Date(0);
    v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(v4, v5);
    sub_100022800(0);
    v6(&v4[*(int *)(v7 + 36)], v5);
    v8 = (char *)a1 + *(int *)(v2 + 24);
    v9 = type metadata accessor for TimeZone(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  return result;
}

uint64_t *sub_100030AFC(uint64_t *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = (int *)type metadata accessor for PreparedSparkline(0);
  v5 = *((_QWORD *)v4 - 1);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v5 + 48))(a2, 1, v4))
  {
    sub_10002FCAC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = *a2;
    *a1 = *a2;
    v8 = v4[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v12)(&v9[*(int *)(v14 + 36)], &v10[*(int *)(v14 + 36)], v11);
    v15 = v4[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
    v19 = v4[8];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

_QWORD *sub_100030C5C(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = (int *)type metadata accessor for PreparedSparkline(0);
  v5 = *((_QWORD *)v4 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v5 + 48))(a2, 1, v4))
  {
    sub_10002FCAC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = v4[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
    v11(v8, v9, v10);
    sub_100022800(0);
    v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
    v13 = v4[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
    v17 = v4[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

uint64_t sub_100030DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100030DB8);
}

uint64_t sub_100030DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10002FCAC(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100030DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030E04);
}

uint64_t sub_100030E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10002FCAC(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RowSparklineView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100113660, (uint64_t)&nominal type descriptor for RowSparklineView);
}

void sub_100030E5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10002FCAC(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_100030EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  sub_1000307C4(255);
  v1 = v0;
  v4 = type metadata accessor for SparklineView(255);
  v5 = sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
  v4 = v1;
  v5 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.chartYAxis(_:)>>, 1);
}

uint64_t sub_100030F48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E85D4, 1);
}

void sub_100030F58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!qword_100113698)
  {
    sub_1000307C4(255);
    v3 = v2;
    v7 = type metadata accessor for SparklineView(255);
    v8 = sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v7, &opaque type descriptor for <<opaque return type of View.chartYAxis(_:)>>, 0);
    if (!v6)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100113698);
  }
}

void sub_100031010(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001136A0)
  {
    sub_100030F58(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _FrameLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001136A0);
  }
}

unint64_t sub_100031070()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;

  result = qword_1001136A8;
  if (!qword_1001136A8)
  {
    sub_100031010(255);
    v2 = v1;
    sub_1000307C4(255);
    v4 = v3;
    v6 = type metadata accessor for SparklineView(255);
    v7 = sub_100003D3C(&qword_1001135F8, type metadata accessor for SparklineView, (uint64_t)&unk_1000DDD08);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
    v6 = v4;
    v7 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.chartYAxis(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001136A8);
  }
  return result;
}

void sub_100031140(void *a1, _BOOL8 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjCClassFromMetadata;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  NSString v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  unint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  Swift::String v24;

  objc_msgSend(a1, "setSearchBarStyle:", 2);
  v5 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v24._object = (void *)0x80000001000E5770;
  v8._countAndFlagsBits = 0x686372616553;
  v8._object = (void *)0xE600000000000000;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0xD000000000000027;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v24)._object;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(a1, "setPlaceholder:", v11);

  v12 = (_QWORD *)(v2 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 32);
  sub_100007184(v12, v14);
  objc_msgSend(a1, "setKeyboardAppearance:", (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 8))(v14));
  if (a2)
    a2 = objc_msgSend((id)a2, "horizontalSizeClass") == (id)2;
  v15 = v12[3];
  v16 = v12[4];
  sub_100007184(v12, v15);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 40))(v15, v16) & 1) != 0)
  {
    objc_msgSend(a1, "setTranslucent:", a2);
  }
  else
  {
    v17 = (void *)objc_opt_self(UITraitCollection);
    v18 = objc_msgSend(v17, "traitCollectionWithUserInterfaceStyle:", 1);
    v19 = sub_1000330A0();
    v20 = (void *)swift_getObjCClassFromMetadata(v19);
    v21 = objc_msgSend(v20, "appearanceForTraitCollection:", v18);
    objc_msgSend(v21, "setBarStyle:", 0);
    v22 = objc_msgSend(v17, "traitCollectionWithUserInterfaceStyle:", 2);
    v23 = objc_msgSend(v20, "appearanceForTraitCollection:", v22);
    objc_msgSend(v23, "setBarStyle:", 1);

  }
}

uint64_t sub_1000313B8(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  void (*v13)(char *, char *, uint64_t);
  void *v14;
  id v15;
  id v16;
  id v17;
  void (*v18)(char *, char *, uint64_t);
  id v19;
  uint64_t result;
  uint64_t v21;
  __int128 v22[2];
  __int128 v23;
  ValueMetadata *v24;
  _UNKNOWN **v25;
  __int128 v26[2];

  v3 = *v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v21 - v10;
  v12 = objc_msgSend(a1, "userInterfaceStyle", v9);
  if (!v12)
  {
    swift_retain(v1);
    return (uint64_t)v1;
  }
  if (v12 == (id)1)
  {
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v7, (char *)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_locale, v4);
    sub_10001DB68((uint64_t)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_systemTheme, (uint64_t)v26);
    v1 = (uint64_t *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v13((char *)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_locale, v7, v4);
    v14 = (void *)objc_opt_self(UIDevice);
    v15 = a1;
    v16 = objc_msgSend(v14, "currentDevice");
    v17 = objc_msgSend(v16, "userInterfaceIdiom");

    if ((unint64_t)v17 + 1 <= 6)
    {
      if (((1 << (v17 + 1)) & 0x5D) != 0)
      {
        sub_10001DB68((uint64_t)v26, (uint64_t)v22);
        v24 = &type metadata for LightTheme;
        v25 = &off_100107770;
        *(_QWORD *)&v23 = swift_allocObject(&unk_100105228, 424, 7);
        sub_1000802A4(v22, v23 + 16);

LABEL_6:
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_10:
        sub_10001D968(&v23, (uint64_t)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
        sub_10001D968(v26, (uint64_t)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_systemTheme);
        return (uint64_t)v1;
      }
      if (!v17)
      {
        sub_10001DB68((uint64_t)v26, (uint64_t)v22);
        v24 = &type metadata for DarkTheme;
        v25 = &off_100106560;
        *(_QWORD *)&v23 = swift_allocObject(&unk_100105250, 416, 7);
        sub_100061378(v22, (uint64_t)v15, v23 + 16);
        goto LABEL_6;
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005BLL, 0x80000001000E57C0, "StocksWidget/Theme.swift", 24, 2, 37, 0);
  }
  else
  {
    if (v12 == (id)2)
    {
      v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v18(v11, (char *)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_locale, v4);
      sub_10001DB68((uint64_t)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_systemTheme, (uint64_t)v26);
      v1 = (uint64_t *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
      v18((char *)v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_locale, v11, v4);
      v19 = a1;
      sub_1000A3C50((uint64_t)v26, a1, 2u, (uint64_t *)&v23);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      goto LABEL_10;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005BLL, 0x80000001000E57C0, "StocksWidget/BaseStyler.swift", 29, 2, 180, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100031738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_locale;
  v2 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100007164((_QWORD *)(v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme));
  sub_100007164((_QWORD *)(v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_systemTheme));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000317A8()
{
  return type metadata accessor for BaseStyler(0);
}

uint64_t type metadata accessor for BaseStyler(uint64_t a1)
{
  uint64_t result;

  result = qword_1001136E0;
  if (!qword_1001136E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BaseStyler);
  return result;
}

uint64_t sub_1000317EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Locale(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100031864()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = Locale.shouldSwapPriceChangeColors.getter();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = 168;
  if ((v2 & 1) != 0)
    v6 = 184;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + v6))(v4, v5);
}

uint64_t sub_1000318D8()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = Locale.shouldSwapPriceChangeColors.getter();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = 184;
  if ((v2 & 1) != 0)
    v6 = 168;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + v6))(v4, v5);
}

uint64_t sub_10003194C()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = Locale.shouldSwapPriceChangeColors.getter();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = 208;
  if ((v2 & 1) != 0)
    v6 = 216;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + v6))(v4, v5);
}

uint64_t sub_1000319C0()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = Locale.shouldSwapPriceChangeColors.getter();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = 216;
  if ((v2 & 1) != 0)
    v6 = 208;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + v6))(v4, v5);
}

uint64_t sub_100031A34()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = Locale.shouldSwapPriceChangeColors.getter();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = 224;
  if ((v2 & 1) != 0)
    v6 = 232;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + v6))(v4, v5);
}

uint64_t sub_100031AA8()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = Locale.shouldSwapPriceChangeColors.getter();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = 232;
  if ((v2 & 1) != 0)
    v6 = 224;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + v6))(v4, v5);
}

uint64_t sub_100031B1C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_10001DB68(*v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme, a1);
}

void sub_100031B44(void *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = (_QWORD *)(*v1 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v4 = v3[3];
  v5 = v3[4];
  sub_100007184(v3, v4);
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 104))(v4, v5);
  objc_msgSend(a1, "setTintColor:", v6);

  v7 = v3[3];
  v8 = v3[4];
  sub_100007184(v3, v7);
  v9 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  objc_msgSend(a1, "setBackgroundColor:", v9);

}

void sub_100031C08(void *a1, _BOOL8 a2)
{
  sub_100031140(a1, a2);
}

void sub_100031C28(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *v1;
  v3 = objc_msgSend(a1, "customView");
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 24);
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme + 32);
    sub_100007184((_QWORD *)(v2 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme), v5);
    v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(v5, v6);
    objc_msgSend(v4, "setTintColor:", v7);

  }
}

uint64_t sub_100031CD0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000313B8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100031CF8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3) & 1;
}

uint64_t sub_100031D4C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3) & 1;
}

uint64_t sub_100031DA0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
}

uint64_t sub_100031DF4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v2, v3);
}

uint64_t sub_100031E44()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
}

uint64_t sub_100031E94()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
}

uint64_t sub_100031EE4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v3);
}

uint64_t sub_100031F34()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v2, v3);
}

uint64_t sub_100031F84()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 104))(v2, v3);
}

uint64_t sub_100031FD4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v2, v3);
}

uint64_t sub_100032024()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 120))(v2, v3);
}

uint64_t sub_100032074()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 128))(v2, v3);
}

uint64_t sub_1000320C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 136))(v2, v3);
}

uint64_t sub_100032114()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 144))(v2, v3);
}

uint64_t sub_100032164()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 152))(v2, v3);
}

uint64_t sub_1000321B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 160))(v2, v3);
}

uint64_t sub_100032204()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 168))(v2, v3);
}

uint64_t sub_100032254()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 176))(v2, v3);
}

uint64_t sub_1000322A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 184))(v2, v3);
}

uint64_t sub_1000322F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 192))(v2, v3);
}

uint64_t sub_100032344()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 200))(v2, v3);
}

uint64_t sub_100032394()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 208))(v2, v3);
}

uint64_t sub_1000323E4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 216))(v2, v3);
}

uint64_t sub_100032434()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 224))(v2, v3);
}

uint64_t sub_100032484()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 232))(v2, v3);
}

uint64_t sub_1000324D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 248))(v2, v3);
}

uint64_t sub_100032524()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 256))(v2, v3);
}

uint64_t sub_100032574()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 264))(v2, v3);
}

uint64_t sub_1000325C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 272))(v2, v3);
}

uint64_t sub_100032614()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 280))(v2, v3);
}

uint64_t sub_100032664()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 288))(v2, v3);
}

uint64_t sub_1000326B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 296))(v2, v3);
}

uint64_t sub_100032704()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 304))(v2, v3);
}

uint64_t sub_100032754()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 312))(v2, v3);
}

uint64_t sub_1000327A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 320))(v2, v3);
}

uint64_t sub_1000327F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 328))(v2, v3);
}

uint64_t sub_100032844()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 336))(v2, v3);
}

uint64_t sub_100032894()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 344))(v2, v3);
}

uint64_t sub_1000328E4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 352))(v2, v3);
}

uint64_t sub_100032934()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 360))(v2, v3);
}

uint64_t sub_100032984()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 368))(v2, v3) & 1;
}

uint64_t sub_1000329D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 376))(v2, v3);
}

uint64_t sub_100032A28()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 384))(v2, v3);
}

uint64_t sub_100032A78()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 392))(v2, v3);
}

uint64_t sub_100032AC8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 400))(v2, v3);
}

uint64_t sub_100032B18()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 408))(v2, v3);
}

uint64_t sub_100032B68()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 416))(v2, v3);
}

uint64_t sub_100032BB8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 424))(v2, v3);
}

uint64_t sub_100032C08()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 432))(v2, v3);
}

uint64_t sub_100032C58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 440))(v2, v3);
}

uint64_t sub_100032CA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 448))(v2, v3);
}

uint64_t sub_100032CF8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 456))(v2, v3);
}

uint64_t sub_100032D48()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 464))(v2, v3);
}

uint64_t sub_100032D98()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 472))(v2, v3);
}

uint64_t sub_100032DE8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 480))(v2, v3);
}

uint64_t sub_100032E38()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3);
}

uint64_t sub_100032E88()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 496))(v2, v3);
}

uint64_t sub_100032ED8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 504))(v2, v3);
}

uint64_t sub_100032F28()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 512))(v2, v3);
}

uint64_t sub_100032F78()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 520))(v2, v3);
}

uint64_t sub_100032FC8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 24) + 8))(v2);
}

uint64_t sub_100033010()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v2);
}

uint64_t sub_100033058()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
  v2 = v1[3];
  v3 = v1[4];
  sub_100007184(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(v2);
}

unint64_t sub_1000330A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113778;
  if (!qword_100113778)
  {
    v1 = objc_opt_self(UISearchBar);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100113778);
  }
  return result;
}

uint64_t sub_1000330DC()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 424, 7);
}

uint64_t sub_100033248()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 416, 7);
}

void sub_1000333B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  Swift::String v47;
  id v48;
  NSString v49;
  char *v50;
  uint64_t v51;
  Class isa;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  void *v58;
  char *v59;
  Swift::String v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  os_log_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __n128 v106;
  uint64_t v107;
  char *v108;
  os_log_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  __n128 v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void (*v132)(unint64_t, uint64_t);
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v3 = *v1;
  v112 = type metadata accessor for String.Encoding(0);
  v111 = *(_QWORD *)(v112 - 8);
  v4 = __chkstk_darwin(v112);
  v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v113 = (char *)&v104 - v7;
  v126 = type metadata accessor for Date(0);
  v124 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v125 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v130 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v129 = (unint64_t)&v104 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v104 - v15;
  v123 = type metadata accessor for DetailTimelineEntry(0);
  v117 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v135 = (uint64_t)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000353E0(0);
  v19 = v18;
  v127 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v116 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100113858, v21, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v23 = __chkstk_darwin(v22);
  v25 = (unint64_t *)((char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = __chkstk_darwin(v23);
  v128 = (char *)&v104 - v27;
  v28 = static Settings.Widget.dumpEntries.getter(v26);
  v29 = sub_100003D3C(&qword_1001126C8, type metadata accessor for DemoTimelineManager, (uint64_t)&unk_1000DD320);
  Configurable.setting<A>(_:)(v28, v3, v29);
  swift_release(v28);
  if (v136 == 1)
  {
    v108 = v12;
    v110 = v6;
    v122 = (char *)v1 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager_logger;
    v30 = *(_QWORD *)(a1 + 16);
    v115 = a1;
    v31 = swift_bridgeObjectRetain(a1);
    v32 = 0;
    v134 = 0;
    v31.n128_u64[0] = 136446210;
    v106 = v31;
    v105 = &type metadata for Any[8];
    v31.n128_u64[0] = 138543362;
    v114 = v31;
    v33 = (uint64_t)v128;
    v119 = v19;
    v120 = v1;
    v118 = v25;
    v121 = v30;
    v131 = v16;
    v34 = v30 == 0;
    if (!v30)
      goto LABEL_8;
LABEL_3:
    if (v34)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      v35 = v32 + 1;
      v36 = (uint64_t)&v116[*(int *)(v19 + 48)];
      sub_100035448(v115+ ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))+ *(_QWORD *)(v117 + 72) * v32, v36);
      v37 = (uint64_t)v25 + *(int *)(v19 + 48);
      *v25 = v32;
      sub_10003548C(v36, v37);
      for (i = 0; ; i = 1)
      {
        v39 = v127;
        (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v127 + 56))(v25, i, 1, v19);
        sub_1000354D0((uint64_t)v25, v33);
        v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v33, 1, v19);
        v41 = v126;
        if (v40 == 1)
          break;
        v133 = v35;
        v42 = v135;
        sub_10003548C(v33 + *(int *)(v19 + 48), v135);
        v43 = v129;
        sub_100034360(v129);
        v44 = v123;
        v45 = (uint64_t *)(v42 + *(int *)(v123 + 20));
        v46 = v45[1];
        v136 = *v45;
        v137 = v46;
        swift_bridgeObjectRetain(v46);
        v47._countAndFlagsBits = 95;
        v47._object = (void *)0xE100000000000000;
        String.append(_:)(v47);
        v48 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
        v49 = String._bridgeToObjectiveC()();
        objc_msgSend(v48, "setDateFormat:", v49);

        v50 = v125;
        static Date.now.getter(v51);
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v124 + 8))(v50, v41);
        v53 = objc_msgSend(v48, "stringFromDate:", isa);

        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        v57._countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        v58 = v56;
        v59 = v131;
        swift_bridgeObjectRelease(v58);
        v60._countAndFlagsBits = 0x6E6F736A2ELL;
        v60._object = (void *)0xE500000000000000;
        String.append(_:)(v60);
        v61 = v137;
        URL.appendingPathComponent(_:)(v136, v137);
        swift_bridgeObjectRelease(v61);
        v62 = v43;
        v63 = v9;
        v132 = *(void (**)(unint64_t, uint64_t))(v130 + 8);
        v132(v62, v9);
        v64 = type metadata accessor for JSONEncoder(0);
        swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
        v65 = JSONEncoder.init()();
        v66 = sub_100003D3C(&qword_100113860, type metadata accessor for DetailTimelineEntry, (uint64_t)&unk_1000DDF00);
        v67 = v134;
        v68 = dispatch thunk of JSONEncoder.encode<A>(_:)(v42, v44, v66);
        if (v67)
        {
          swift_release(v65);
          v134 = 0;
          swift_errorRetain(v67);
          v79 = swift_errorRetain(v67);
          v80 = Logger.logObject.getter(v79);
          v81 = static os_log_type_t.error.getter();
          v82 = os_log_type_enabled(v80, v81);
          v9 = v63;
          v30 = v121;
          if (v82)
          {
            v83 = swift_slowAlloc(12, -1);
            v84 = (uint64_t *)swift_slowAlloc(8, -1);
            *(_DWORD *)v83 = v114.n128_u32[0];
            swift_errorRetain(v67);
            v85 = _swift_stdlib_bridgeErrorToNSError(v67);
            *(_QWORD *)(v83 + 4) = v85;
            *v84 = v85;
            swift_errorRelease(v67);
            swift_errorRelease(v67);
            _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed writing entry to disk. error=%{public}@", (uint8_t *)v83, 0xCu);
            sub_10000EDE8(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            swift_arrayDestroy(v84, 1, v86);
            v87 = v84;
            v59 = v131;
            swift_slowDealloc(v87, -1, -1);
            swift_slowDealloc(v83, -1, -1);

          }
          else
          {

            swift_errorRelease(v67);
            swift_errorRelease(v67);
          }
          swift_errorRelease(v67);
          v132((unint64_t)v59, v63);
          sub_10003552C(v135);
          v19 = v119;
          v25 = v118;
          v33 = (uint64_t)v128;
        }
        else
        {
          v70 = v68;
          v71 = v69;
          v72 = v113;
          static String.Encoding.utf8.getter();
          v73 = String.init(data:encoding:)(v70, v71, v72);
          if (!v74)
            goto LABEL_23;
          v75 = v74;
          v136 = v73;
          v137 = v74;
          v76 = v110;
          static String.Encoding.utf8.getter();
          v77 = sub_1000144A0();
          v78 = v131;
          StringProtocol.write(to:atomically:encoding:)(v131, 1, v76, &type metadata for String, v77);
          v134 = 0;
          (*(void (**)(char *, uint64_t))(v111 + 8))(v76, v112);
          swift_bridgeObjectRelease(v75);
          v88 = *(uint64_t (**)(char *, char *, uint64_t))(v130 + 16);
          v89 = v108;
          v90 = v63;
          v91 = v88(v108, v78, v63);
          v92 = Logger.logObject.getter(v91);
          v93 = static os_log_type_t.default.getter();
          v109 = v92;
          if (os_log_type_enabled(v92, v93))
          {
            v94 = swift_slowAlloc(12, -1);
            v107 = swift_slowAlloc(32, -1);
            v136 = v107;
            *(_DWORD *)v94 = v106.n128_u32[0];
            v95 = v129;
            v88((char *)v129, v89, v90);
            v96 = String.init<A>(reflecting:)(v95, v90);
            v98 = v97;
            *(_QWORD *)(v94 + 4) = sub_10007ECFC(v96, v97, &v136);
            swift_bridgeObjectRelease(v98);
            v99 = v89;
            v100 = (void (*)(char *, uint64_t))v132;
            v132((unint64_t)v99, v90);
            v101 = v109;
            _os_log_impl((void *)&_mh_execute_header, v109, v93, "Demo entries to disk: %{public}s.", (uint8_t *)v94, 0xCu);
            v102 = v107;
            swift_arrayDestroy(v107, 1, v105);
            swift_slowDealloc(v102, -1, -1);
            swift_slowDealloc(v94, -1, -1);
            sub_100035568(v70, v71);

            swift_release(v65);
          }
          else
          {
            sub_100035568(v70, v71);

            swift_release(v65);
            v103 = v89;
            v100 = (void (*)(char *, uint64_t))v132;
            v132((unint64_t)v103, v63);
          }
          v100(v78, v90);
          sub_10003552C(v135);
          v9 = v90;
          v19 = v119;
          v25 = v118;
          v33 = (uint64_t)v128;
          v30 = v121;
        }
        v32 = v133;
        v34 = v133 >= v30;
        if (v133 != v30)
          goto LABEL_3;
LABEL_8:
        v35 = v30;
      }
      swift_bridgeObjectRelease(v115);
    }
  }
}

uint64_t sub_100033D5C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  void *v27;
  unint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  char *v58;
  uint64_t v59;
  uint64_t result;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[24];
  uint64_t v75[4];
  _QWORD v76[2];

  v64 = a1;
  v2 = *v1;
  v3 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v3);
  v63 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  v6 = __chkstk_darwin(v5);
  v66 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v67 = (char *)&v61 - v8;
  v62 = type metadata accessor for DetailTimelineEntry(0);
  v71 = *(_QWORD *)(v62 - 8);
  v9 = __chkstk_darwin(v62);
  v72 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v61 - v11;
  sub_1000353E0(0);
  v14 = v13;
  v70 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v65 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100113858, v16, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v18 = __chkstk_darwin(v17);
  v20 = (unint64_t *)((char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __chkstk_darwin(v18);
  v23 = (uint64_t *)((char *)&v61 - v22);
  v76[0] = _swiftEmptyArrayStorage;
  v24 = static Settings.Widget.entryInterval.getter(v21);
  v25 = sub_100003D3C(&qword_1001126C8, type metadata accessor for DemoTimelineManager, (uint64_t)&unk_1000DD320);
  Configurable.setting<A>(_:)(v24, v2, v25);
  swift_release(v24);
  v26 = *(double *)v75;
  v61 = v1;
  v27 = sub_10003456C();
  v75[0] = (uint64_t)v27;
  swift_bridgeObjectRetain(v27);
  sub_100035664(v75);
  swift_bridgeObjectRelease(v27);
  i = 0;
  v29 = v75[0];
  v30 = *(_QWORD *)(v75[0] + 16);
  if (v30)
    goto LABEL_3;
LABEL_2:
  v31 = 1;
  for (i = v30; ; ++i)
  {
    v34 = v70;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v20, v31, 1, v14);
    sub_1000354D0((uint64_t)v20, (uint64_t)v23);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v23, 1, v14) == 1)
      break;
    v35 = *v23;
    v36 = sub_10003548C((uint64_t)v23 + *(int *)(v14 + 48), (uint64_t)v12);
    v37 = v66;
    Date.init()(v36);
    v38 = v67;
    Date.addingTimeInterval(_:)(v26 * (double)v35);
    v39 = v68;
    v40 = v37;
    v41 = v69;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v40, v69);
    (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v12, v38, v41);
    sub_100035448((uint64_t)v12, v72);
    v42 = v76[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v76[0]) & 1) == 0)
      v42 = sub_1000733BC(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
    v44 = *(_QWORD *)(v42 + 16);
    v43 = *(_QWORD *)(v42 + 24);
    if (v44 >= v43 >> 1)
      v42 = sub_1000733BC(v43 > 1, v44 + 1, 1, v42);
    *(_QWORD *)(v42 + 16) = v44 + 1;
    sub_10003548C(v72, v42+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v44);
    v76[0] = v42;
    sub_10003552C((uint64_t)v12);
    if (i == v30)
      goto LABEL_2;
LABEL_3:
    if (i >= *(_QWORD *)(v29 + 16))
    {
      __break(1u);
      result = swift_release(v75[0]);
      __break(1u);
      return result;
    }
    v32 = (uint64_t)&v65[*(int *)(v14 + 48)];
    sub_100035448(v29+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * i, v32);
    v33 = (uint64_t)v20 + *(int *)(v14 + 48);
    *v20 = i;
    sub_10003548C(v32, v33);
    v31 = 0;
  }
  v45 = swift_release(v29);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v75[0] = v49;
    *(_DWORD *)v48 = 136315138;
    swift_beginAccess(v76, v74, 0, 0);
    v50 = v76[0];
    v51 = swift_bridgeObjectRetain(v76[0]);
    v52 = v62;
    v53 = Array.description.getter(v51);
    v55 = v54;
    swift_bridgeObjectRelease(v50);
    v73 = sub_10007ECFC(v53, v55, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Returning entries:%s", v48, 0xCu);
    swift_arrayDestroy(v49, 1, &type metadata for Any[8]);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

  }
  else
  {

    v52 = v62;
  }
  swift_beginAccess(v76, v75, 0, 0);
  v56 = v76[0];
  v57 = swift_bridgeObjectRetain(v76[0]);
  v58 = v63;
  static TimelineReloadPolicy.atEnd.getter(v57);
  v59 = sub_100003D3C(&qword_100112628, type metadata accessor for DetailTimelineEntry, (uint64_t)&unk_1000DDF50);
  Timeline.init(entries:policy:)(v56, v58, v52, v59);
  return swift_bridgeObjectRelease(v56);
}

void sub_100034360(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  void (*v15)(unint64_t, unint64_t, uint64_t);
  _BYTE v16[24];
  _BYTE v17[24];

  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v4 = __chkstk_darwin(v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v16[-v7];
  v9 = v1 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager____lazy_storage___demoDirectory;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager____lazy_storage___demoDirectory, v17, 0, 0);
  sub_1000355AC(v9, (uint64_t)v8);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_10000E770((uint64_t)v8, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v12 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v13 = objc_msgSend(v12, "URLsForDirectory:inDomains:", 9, 1);

    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v10);
    if (*(_QWORD *)(v14 + 16))
    {
      v15 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
      v15(a1, v14 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v10);
      swift_bridgeObjectRelease(v14);
      v15((unint64_t)v6, a1, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
      swift_beginAccess(v9, v16, 33, 0);
      sub_100035608((uint64_t)v6, v9);
      swift_endAccess(v16);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
}

void *sub_10003456C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  id v28;
  NSURL *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  void *v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(char *, char *, uint64_t);
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  os_log_t v105;
  void *v106;
  char *v107;
  unint64_t v108;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  void *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  uint64_t v127;
  os_log_t v128;
  void *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  __int128 v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;

  v1 = v0;
  sub_10000EDE8(0, &qword_100113870, type metadata accessor for DetailTimelineEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2);
  v4 = (char *)&v127 - v3;
  v5 = type metadata accessor for DetailTimelineEntry(0);
  v140 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v134 = (uint64_t)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v139 = (uint64_t)&v127 - v8;
  v9 = type metadata accessor for String.Encoding(0);
  v145 = *(_QWORD *)(v9 - 8);
  v146 = v9;
  __chkstk_darwin(v9);
  v144 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11);
  v149 = (char *)&v127 - v12;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v132 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v127 - v18;
  v20 = __chkstk_darwin(v17);
  v154 = (char *)&v127 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v127 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v127 - v25;
  sub_100034360((unint64_t)v24);
  URL.appendingPathComponent(_:)(1869440356, 0xE400000000000000);
  v150 = v14;
  v27 = *(void (**)(char *, uint64_t))(v14 + 8);
  v27(v24, v13);
  v28 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v29);
  v31 = v30;
  v157 = 0;
  v32 = objc_msgSend(v28, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v30, 0, 0, &v157);

  v33 = v157;
  if (v32)
  {
    v131 = v26;
    v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v13);
    v35 = v33;

    v127 = v1;
    v36 = v1 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager_logger;
    v37 = swift_bridgeObjectRetain_n(v34, 2);
    v148 = v36;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    v40 = os_log_type_enabled(v38, v39);
    v136 = v4;
    v135 = v5;
    v151 = v13;
    v152 = v27;
    v143 = v19;
    if (v40)
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (void *)swift_slowAlloc(32, -1);
      v157 = v42;
      *(_DWORD *)v41 = 136315138;
      v43 = swift_bridgeObjectRetain(v34);
      v44 = Array.description.getter(v43);
      v46 = v45;
      swift_bridgeObjectRelease(v34);
      v155 = sub_10007ECFC(v44, v46, (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease_n(v34, 2);
      v47 = v46;
      v27 = v152;
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Found Content:%s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, &type metadata for Any[8]);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      v50 = v149;
      v49 = v150;
      v51 = *(_QWORD *)(v34 + 16);
      if (v51)
        goto LABEL_4;
    }
    else
    {
      swift_bridgeObjectRelease_n(v34, 2);

      v50 = v149;
      v49 = v150;
      v51 = *(_QWORD *)(v34 + 16);
      if (v51)
      {
LABEL_4:
        v153 = 0;
        v52 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
        v130 = v34;
        v53 = v34 + v52;
        v142 = *(_QWORD *)(v49 + 72);
        v54 = *(uint64_t (**)(char *, char *, uint64_t))(v49 + 16);
        v138 = &_swiftEmptyArrayStorage;
        *(_QWORD *)&v48 = 136315138;
        v137 = v48;
        v133 = &type metadata for Any[8];
        v55 = type metadata accessor for DetailTimelineEntry;
        v56 = v151;
        v147 = v54;
        v54(v50, (char *)v53, v151);
        while (1)
        {
          v141 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
          v141(v50, 0, 1, v56);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v50, 1, v56) == 1)
          {
            v34 = v130;
            v116 = v138;
            goto LABEL_32;
          }
          v57 = v51;
          v58 = v55;
          v59 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
          v60 = v154;
          v59(v154, v50, v56);
          v61 = v143;
          v62 = v54(v143, v60, v56);
          v63 = Logger.logObject.getter(v62);
          v64 = v56;
          v65 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v63, v65))
          {
            v66 = swift_slowAlloc(12, -1);
            v67 = (void *)swift_slowAlloc(32, -1);
            v157 = v67;
            *(_DWORD *)v66 = v137;
            v68 = sub_100003D3C(&qword_100113880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
            v69 = dispatch thunk of CustomStringConvertible.description.getter(v64, v68);
            v71 = v70;
            *(_QWORD *)(v66 + 4) = sub_10007ECFC(v69, v70, (uint64_t *)&v157);
            swift_bridgeObjectRelease(v71);
            v152(v61, v64);
            _os_log_impl((void *)&_mh_execute_header, v63, v65, "Found URL:%s", (uint8_t *)v66, 0xCu);
            swift_arrayDestroy(v67, 1, v133);
            v72 = v67;
            v27 = v152;
            swift_slowDealloc(v72, -1, -1);
            swift_slowDealloc(v66, -1, -1);

          }
          else
          {

            v73 = ((uint64_t (*)(char *, uint64_t))v27)(v61, v64);
          }
          v74 = URL.path.getter(v73);
          v76 = v75;
          v77 = v153;
          v78 = String.init(contentsOfFile:)(v74);
          if (v77)
          {
            swift_bridgeObjectRelease(v76);
            v117 = v151;
            v27(v154, v151);
            swift_bridgeObjectRelease(v138);
            swift_bridgeObjectRelease(v130);
            v27(v131, v117);
            goto LABEL_27;
          }
          v80 = v78;
          v81 = v79;
          v55 = v58;
          v82 = v57;
          v83 = swift_bridgeObjectRelease(v76);
          v84 = v144;
          static String.Encoding.utf8.getter(v83);
          v85 = String.data(using:allowLossyConversion:)(v84, 0, v80, v81);
          v87 = v86;
          swift_bridgeObjectRelease(v81);
          (*(void (**)(char *, uint64_t))(v145 + 8))(v84, v146);
          if (v87 >> 60 == 15)
          {
            v153 = 0;
            v56 = v151;
            v27(v154, v151);
            v50 = v149;
          }
          else
          {
            v88 = type metadata accessor for JSONDecoder(0);
            swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
            v89 = JSONDecoder.init()();
            v90 = sub_100003D3C(&qword_100113878, v58, (uint64_t)&unk_1000DDF28);
            v91 = (uint64_t)v136;
            v92 = v135;
            dispatch thunk of JSONDecoder.decode<A>(_:from:)(v135, v85, v87, v135, v90);
            v153 = 0;
            swift_release(v89);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v91, 0, 1, v92);
            sub_10003548C(v91, v139);
            v93 = v132;
            v94 = v151;
            v95 = v147(v132, v154, v151);
            v96 = Logger.logObject.getter(v95);
            v97 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v96, (os_log_type_t)v97))
            {
              v98 = (_DWORD *)swift_slowAlloc(12, -1);
              v129 = (void *)swift_slowAlloc(32, -1);
              v157 = v129;
              *v98 = v137;
              v128 = v96;
              v99 = v98;
              v100 = sub_100003D3C(&qword_100113880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
              v101 = dispatch thunk of CustomStringConvertible.description.getter(v94, v100);
              v103 = v102;
              *(_QWORD *)(v99 + 1) = sub_10007ECFC(v101, v102, (uint64_t *)&v157);
              swift_bridgeObjectRelease(v103);
              v104 = v93;
              v27 = v152;
              v152(v104, v94);
              v105 = v128;
              _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v97, "Succeeded decoding:%s", (uint8_t *)v99, 0xCu);
              v106 = v129;
              swift_arrayDestroy(v129, 1, &type metadata for Any[8]);
              swift_slowDealloc(v106, -1, -1);
              swift_slowDealloc(v99, -1, -1);

            }
            else
            {

              v107 = v93;
              v27 = v152;
              v152(v107, v94);
            }
            sub_100035448(v139, v134);
            v108 = (unint64_t)v138;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v138);
            v50 = v149;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              v108 = sub_1000733BC(0, *(_QWORD *)(v108 + 16) + 1, 1, v108);
            v111 = *(_QWORD *)(v108 + 16);
            v110 = *(_QWORD *)(v108 + 24);
            v138 = (void *)v108;
            if (v111 >= v110 >> 1)
              v138 = (void *)sub_1000733BC(v110 > 1, v111 + 1, 1, (unint64_t)v138);
            v112 = v138;
            *((_QWORD *)v138 + 2) = v111 + 1;
            sub_10003548C(v134, (uint64_t)v112+ ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80))+ *(_QWORD *)(v140 + 72) * v111);
            sub_1000368C8(v85, v87);
            sub_10003552C(v139);
            v56 = v151;
            v27(v154, v151);
          }
          v53 += v142;
          v51 = v82 - 1;
          v49 = v150;
          v54 = v147;
          if (!v51)
            break;
          v147(v50, (char *)v53, v56);
        }
        v34 = v130;
        v116 = v138;
        v141(v50, 1, 1, v56);
        goto LABEL_32;
      }
    }
    v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
    v116 = &_swiftEmptyArrayStorage;
    v56 = v151;
    v115(v50, 1, 1, v151);
LABEL_32:
    swift_bridgeObjectRelease(v34);
    v27(v131, v56);
    return v116;
  }
  v113 = v157;
  v114 = _convertNSErrorToError(_:)(v33);

  swift_willThrow();
  v77 = v114;
  v27(v26, v13);
LABEL_27:
  swift_errorRetain(v77);
  v118 = swift_errorRetain(v77);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v119, v120))
  {
    v121 = (uint8_t *)swift_slowAlloc(12, -1);
    v122 = v77;
    v123 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v121 = 138543362;
    swift_errorRetain(v122);
    v124 = (void *)_swift_stdlib_bridgeErrorToNSError(v122);
    v157 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v121 + 4, v121 + 12);
    *v123 = v124;
    swift_errorRelease(v122);
    swift_errorRelease(v122);
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "WidgetDemo failed to decode entries. error=%{public}@", v121, 0xCu);
    sub_10000EDE8(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    swift_arrayDestroy(v123, 1, v125);
    swift_slowDealloc(v123, -1, -1);
    swift_slowDealloc(v121, -1, -1);
    swift_errorRelease(v122);

  }
  else
  {
    swift_errorRelease(v77);

    swift_errorRelease(v77);
    swift_errorRelease(v77);
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100035240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager_stocksSuiteKey + 8));
  sub_10000E770(v0 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager____lazy_storage___demoDirectory, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000352C4()
{
  return type metadata accessor for DemoTimelineManager(0);
}

uint64_t type metadata accessor for DemoTimelineManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1001137B8;
  if (!qword_1001137B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DemoTimelineManager);
  return result;
}

void sub_100035308(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1000DD308;
    sub_10000EDE8(319, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t sub_1000353B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return Configurable.setting<A>(_:)(a1, *v5, a5);
}

uint64_t sub_1000353BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  return Configurable.setting<A>(_:defaultValue:)(a1, a2, *v6, a6);
}

uint64_t sub_1000353C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  return Configurable.setting<A>(_:_:)(a1, a2, a3, *v7, a7);
}

uint64_t sub_1000353D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  return Configurable.setting<A>(_:defaultValue:_:)(a1, a2, a3, a4, *v8, a8);
}

void sub_1000353E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100113850)
  {
    v2 = type metadata accessor for DetailTimelineEntry(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for Int, v2, "offset element ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100113850);
  }
}

uint64_t sub_100035448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003548C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DetailTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000354D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, &qword_100113858, (uint64_t (*)(uint64_t))sub_1000353E0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003552C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DetailTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100035568(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000355AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::Int sub_100035664(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for DetailTimelineEntry(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1000368B0(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1000356E4(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1000356E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  Swift::Int v30;
  int v31;
  uint64_t v32;
  int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  Swift::Int v122;
  char *v123;
  uint64_t v124;
  Swift::Int v125;
  Swift::Int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  Swift::Int v134;
  uint64_t v135;
  uint64_t v136;

  v130 = type metadata accessor for DetailTimelineEntry(0);
  v128 = *(_QWORD *)(v130 - 8);
  v2 = __chkstk_darwin(v130);
  v124 = (uint64_t)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v135 = (uint64_t)&v120 - v5;
  v6 = __chkstk_darwin(v4);
  v132 = (uint64_t)&v120 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v120 - v8;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_138;
    if (v10)
      return sub_100036040(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_146;
  v122 = result;
  if (v10 < 2)
  {
    v16 = (char *)&_swiftEmptyArrayStorage;
    v127 = (unint64_t)&_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
    v121 = &_swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
LABEL_105:
      if (v18 >= 2)
      {
        v112 = *a1;
        v113 = v129;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_133;
          if (!v112)
            goto LABEL_145;
          v115 = *(_QWORD *)&v16[16 * v114 + 32];
          v116 = *(_QWORD *)&v16[16 * v18 + 24];
          sub_100036244(v112 + *(_QWORD *)(v128 + 72) * v115, v112 + *(_QWORD *)(v128 + 72) * *(_QWORD *)&v16[16 * v18 + 16], v112 + *(_QWORD *)(v128 + 72) * v116, v127);
          if (v113)
            break;
          if (v116 < v115)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            v16 = sub_10003689C((uint64_t)v16);
          if (v114 >= *((_QWORD *)v16 + 2))
            goto LABEL_135;
          v117 = &v16[16 * v114 + 32];
          *(_QWORD *)v117 = v115;
          *((_QWORD *)v117 + 1) = v116;
          v118 = *((_QWORD *)v16 + 2);
          if (v18 > v118)
            goto LABEL_136;
          memmove(&v16[16 * v18 + 16], &v16[16 * v18 + 32], 16 * (v118 - v18));
          *((_QWORD *)v16 + 2) = v118 - 1;
          v18 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease(v16);
      v119 = v121;
      v121[2] = 0;
      return swift_bridgeObjectRelease(v119);
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v130);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v128 + 80);
    v121 = (_QWORD *)v14;
    v127 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)&_swiftEmptyArrayStorage;
  v133 = a1;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      v26 = v17 + 1;
    }
    else
    {
      v21 = *a1;
      v22 = *(_QWORD *)(v128 + 72);
      sub_100035448(*a1 + v22 * v20, (uint64_t)v9);
      v23 = v21 + v22 * v19;
      v126 = v19;
      v24 = v132;
      sub_100035448(v23, v132);
      v136 = Date.compare(_:)(v24);
      v25 = v24;
      v19 = v126;
      sub_10003552C(v25);
      sub_10003552C((uint64_t)v9);
      v26 = v19 + 2;
      v131 = v21;
      if (v19 + 2 < v10)
      {
        v123 = v16;
        v134 = v22 * v20;
        v27 = v21;
        v28 = v19 + 2;
        v29 = v22 * (v19 + 2);
        while (1)
        {
          v30 = v10;
          v31 = v136 == -1;
          sub_100035448(v27 + v29, (uint64_t)v9);
          v32 = v132;
          sub_100035448(v27 + v134, v132);
          v33 = Date.compare(_:)(v32) != -1;
          sub_10003552C(v32);
          sub_10003552C((uint64_t)v9);
          if (v31 == v33)
            break;
          v27 += v22;
          ++v28;
          v10 = v30;
          if (v30 == v28)
          {
            v26 = v30;
            a1 = v133;
            v16 = v123;
            v19 = v126;
            goto LABEL_23;
          }
        }
        a1 = v133;
        v16 = v123;
        v26 = v28;
        v10 = v30;
        v19 = v126;
      }
LABEL_23:
      if (v136 == -1)
      {
        if (v26 < v19)
          goto LABEL_141;
        if (v19 < v26)
        {
          v125 = v10;
          v123 = v16;
          v34 = v26;
          v35 = 0;
          v36 = v22 * (v34 - 1);
          v37 = v19;
          v38 = v34 * v22;
          v39 = v37;
          v40 = v37 * v22;
          v134 = v34;
          do
          {
            if (v39 != v34 + v35 - 1)
            {
              v43 = v131;
              if (!v131)
                goto LABEL_144;
              v44 = v131 + v40;
              v136 = v131 + v36;
              sub_10003548C(v131 + v40, v124);
              if (v40 < v36 || v44 >= v43 + v38)
              {
                v41 = v43 + v40;
                v42 = v136;
                swift_arrayInitWithTakeFrontToBack(v41, v136, 1, v130);
              }
              else
              {
                v42 = v136;
                if (v40 != v36)
                  swift_arrayInitWithTakeBackToFront(v44);
              }
              sub_10003548C(v124, v42);
              a1 = v133;
            }
            ++v39;
            --v35;
            v34 = v134;
            v36 -= v22;
            v38 -= v22;
            v40 += v22;
          }
          while (v39 < v134 + v35);
          v16 = v123;
          v26 = v134;
          v10 = v125;
          v19 = v126;
        }
      }
    }
    if (v26 < v10)
    {
      if (__OFSUB__(v26, v19))
        goto LABEL_137;
      if (v26 - v19 < v122)
        break;
    }
LABEL_55:
    if (v26 < v19)
      goto LABEL_132;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_100036684(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_100036684((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v26;
    v134 = v26;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_121;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_122;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_124;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_127;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_131;
            v92 = v67 < v102;
            goto LABEL_92;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_86;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_123;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_126;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_129;
        if (__OFADD__(v86, v91))
          goto LABEL_130;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_92:
          if (v92)
            v64 = v76;
          goto LABEL_94;
        }
LABEL_86:
        if ((v87 & 1) != 0)
          goto LABEL_125;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_128;
        if (v98 < v86)
          goto LABEL_14;
LABEL_94:
        v103 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v104 = *a1;
        if (!*a1)
          goto LABEL_143;
        v105 = v16;
        v106 = &v62[16 * v103];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v129;
        sub_100036244(v104 + *(_QWORD *)(v128 + 72) * *(_QWORD *)v106, v104 + *(_QWORD *)(v128 + 72) * *(_QWORD *)v108, v104 + *(_QWORD *)(v128 + 72) * v109, v127);
        v129 = v110;
        if (v110)
        {
          v16 = v105;
          goto LABEL_116;
        }
        if (v109 < v107)
          goto LABEL_118;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_119;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v103 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_120;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        a1 = v133;
        if (v111 <= 2)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = a1[1];
    v17 = v134;
    if (v134 >= v10)
      goto LABEL_105;
  }
  if (__OFADD__(v19, v122))
    goto LABEL_139;
  if (v19 + v122 >= v10)
    v45 = v10;
  else
    v45 = v19 + v122;
  if (v45 >= v19)
  {
    if (v26 != v45)
    {
      v125 = v45;
      v126 = v19;
      v123 = v16;
      v46 = *(_QWORD *)(v128 + 72);
      v47 = v46 * (v26 - 1);
      v131 = v46;
      v136 = v26 * v46;
      do
      {
        v49 = 0;
        v50 = v126;
        v134 = v26;
        while (1)
        {
          v51 = *a1;
          sub_100035448(v136 + v49 + *a1, (uint64_t)v9);
          v52 = v47;
          v53 = v47 + v49 + v51;
          v54 = a1;
          v55 = v132;
          sub_100035448(v53, v132);
          v56 = Date.compare(_:)(v55);
          sub_10003552C(v55);
          sub_10003552C((uint64_t)v9);
          if (v56 != -1)
            break;
          v57 = *v54;
          if (!*v54)
            goto LABEL_142;
          v58 = v57 + v136 + v49;
          v47 = v52;
          v59 = v57 + v52 + v49;
          sub_10003548C(v58, v135);
          swift_arrayInitWithTakeFrontToBack(v58, v59, 1, v130);
          sub_10003548C(v135, v59);
          v49 -= v131;
          ++v50;
          a1 = v133;
          v48 = v134;
          if (v134 == v50)
            goto LABEL_48;
        }
        v48 = v134;
        a1 = v54;
        v47 = v52;
LABEL_48:
        v26 = v48 + 1;
        v47 += v131;
        v136 += v131;
      }
      while (v26 != v125);
      v26 = v125;
      v16 = v123;
      v19 = v126;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100036040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a1;
  v27 = type metadata accessor for DetailTimelineEntry(0);
  v7 = __chkstk_darwin(v27);
  v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24 - v10;
  result = __chkstk_darwin(v9);
  v15 = (char *)&v24 - v14;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v32 = v16 * (v29 - 1);
    v28 = v16;
    v31 = v16 * v29;
LABEL_5:
    v17 = 0;
    v18 = v26;
    while (1)
    {
      v19 = *a4;
      sub_100035448(v31 + v17 + *a4, (uint64_t)v15);
      sub_100035448(v32 + v17 + v19, (uint64_t)v11);
      v20 = Date.compare(_:)(v11);
      sub_10003552C((uint64_t)v11);
      result = sub_10003552C((uint64_t)v15);
      if (v20 != -1)
      {
LABEL_4:
        v32 += v28;
        v31 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v21 = *a4;
      if (!*a4)
        break;
      v22 = v21 + v31 + v17;
      v23 = v21 + v32 + v17;
      sub_10003548C(v22, v30);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v27);
      result = sub_10003548C(v30, v23);
      v17 -= v28;
      if (v29 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100036244(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v37 = type metadata accessor for DetailTimelineEntry(0);
  v8 = __chkstk_darwin(v37);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_61;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_62;
  v16 = (uint64_t)(a2 - a1) / v14;
  v40 = a1;
  v39 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v37);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v26 = a4 + v19;
      v38 = a4 + v19;
      v40 = a2;
      v36 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        v28 = -v14;
        do
        {
          v29 = a3 + v28;
          sub_100035448(v26 + v28, (uint64_t)v12);
          v30 = a2 + v28;
          sub_100035448(a2 + v28, (uint64_t)v10);
          v31 = Date.compare(_:)(v10);
          sub_10003552C((uint64_t)v10);
          sub_10003552C((uint64_t)v12);
          if (v31 == -1)
          {
            if (a3 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v28, a2 + v28, 1, v37);
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v28);
            }
            v40 += v28;
          }
          else
          {
            v32 = v38;
            v33 = v38 + v28;
            v38 += v28;
            if (a3 < v32 || v29 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v28, v33, 1, v37);
            }
            else if (a3 != v32)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v28);
            }
            v30 = a2;
          }
          v26 = v38;
          if (v38 <= a4)
            break;
          a2 = v30;
          a3 += v28;
        }
        while (v30 > v36);
      }
      goto LABEL_59;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v37);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v20 = a4 + v18;
    v38 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_100035448(a2, (uint64_t)v12);
        sub_100035448(a4, (uint64_t)v10);
        v22 = Date.compare(_:)(v10);
        sub_10003552C((uint64_t)v10);
        sub_10003552C((uint64_t)v12);
        v23 = v40;
        if (v22 == -1)
        {
          v25 = a2 + v14;
          if (v40 < a2 || v40 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v40, a2, 1, v37);
          }
          else if (v40 == a2)
          {
            v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v40);
          }
        }
        else
        {
          v24 = v39 + v14;
          if (v40 < v39 || v40 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v40, v39, 1, v37);
          }
          else if (v40 != v39)
          {
            swift_arrayInitWithTakeBackToFront(v40);
          }
          v39 = v24;
          v25 = a2;
        }
        v40 = v23 + v14;
        a4 = v39;
        if (v39 >= v20)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_59:
    sub_100036790(&v40, &v39, (uint64_t *)&v38);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100036684(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_10000EDE8(0, &qword_100113868, (uint64_t (*)(uint64_t))sub_1000213C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100036790(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for DetailTimelineEntry(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_10003689C(uint64_t a1)
{
  return sub_100036684(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000368B0(_QWORD *a1)
{
  return sub_100073CCC(0, a1[2], 0, a1);
}

uint64_t sub_1000368C8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100035568(result, a2);
  return result;
}

_QWORD *sub_1000368DC(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v12 = v11;
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v14 = swift_bridgeObjectRetain(v7);
    v13(v9, v10, v12, v14);
    v15 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v19) = *(_QWORD *)((char *)a2 + v19);
    v20 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v24 = v23;
    v25 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
    {
      sub_10001D6B0(0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v21, v22, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    }
  }
  return v4;
}

uint64_t sub_100036AA0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[11];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  return result;
}

_QWORD *sub_100036BA4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v11 = v10;
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v13 = swift_bridgeObjectRetain(v6);
  v12(v8, v9, v11, v13);
  v14 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v23 = v22;
  v24 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v22))
  {
    sub_10001D6B0(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v20, v21, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
  }
  return a1;
}

_QWORD *sub_100036D3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v16 = a3[11];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v13) = v22(v17, 1, v19);
  v23 = v22(v18, 1, v20);
  if (!(_DWORD)v13)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v17, v18, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v20);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    sub_10001D6B0(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v17, v18, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  return a1;
}

_OWORD *sub_100036F28(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v18))
  {
    sub_10001D6B0(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v16, v17, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
  }
  return a1;
}

_QWORD *sub_1000370A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v17 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v13) = v23(v18, 1, v20);
  v24 = v23(v19, 1, v21);
  if (!(_DWORD)v13)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v18, v19, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_10001D6B0(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v18, v19, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
  return a1;
}

uint64_t sub_100037274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037280);
}

uint64_t sub_100037280(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = a3[5];
    }
    else
    {
      v13 = type metadata accessor for PriceChangeDisplay(0);
      v10 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v13;
        v12 = a3[7];
      }
      else
      {
        sub_10001D6B0(0);
        v11 = v14;
        v10 = *(_QWORD *)(v14 - 8);
        v12 = a3[11];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_100037370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003737C);
}

uint64_t sub_10003737C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for PriceChangeDisplay(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        sub_10001D6B0(0);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[11];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for WatchlistOverviewContentViewModel(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001138E0, (uint64_t)&nominal type descriptor for WatchlistOverviewContentViewModel);
}

void sub_100037470(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = &unk_1000DD398;
  sub_10001D724(319, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_1000DD3B0;
    v4 = type metadata accessor for PriceChangeDisplay(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[6] = &unk_1000DD3C8;
      sub_10001D6B0(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10003755C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  int *v98;
  char *v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  Swift::String v103;
  void *object;
  Swift::String v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  __int128 v120;

  v119 = a2;
  v114 = a3;
  v4 = type metadata accessor for PriceChangeDisplay(0);
  v117 = *(_QWORD *)(v4 - 8);
  v118 = v4;
  __chkstk_darwin(v4);
  v109 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v113 = (char *)&v107 - v7;
  sub_10000EDE8(0, &qword_100113930, (uint64_t (*)(uint64_t))sub_100038004, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8);
  v110 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v111 = (char *)&v107 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v107 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v107 - v16;
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v115 = *(_QWORD *)(v18 - 8);
  v116 = v18;
  __chkstk_darwin(v18);
  v107 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v108 = (char *)&v107 - v21;
  __chkstk_darwin(v22);
  v112 = (char *)&v107 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v107 - v25;
  v27 = type metadata accessor for WidgetFamily(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (uint64_t)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v107 - v33;
  v35 = *(_QWORD *)(v28 + 16);
  v36 = a1;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v35)((char *)&v107 - v33, a1, v27, v32);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v34, v27);
  if (v37 == enum case for WidgetFamily.systemSmall(_:))
  {
    v120 = xmmword_1000DD360;
    sub_10002F488(0, (unint64_t *)&qword_100112958, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
    v30 = v38;
    v39 = sub_100038084();
    NonEmpty.init(_:)(&v120, v30, v39);
    sub_100038004(0);
    v41 = v40;
    v42 = *(_QWORD *)(v40 - 8);
    v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v17, 1, v40);
    if ((_DWORD)v43 != 1)
    {
      v44 = v119 & 1;
      __chkstk_darwin(v43);
      LOBYTE(v106) = v44;
      v45 = type metadata accessor for TickerCellViewModel(0);
      NonEmpty.map<A>(_:)(sub_10003C338, &v107 - 4, v41, v45);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v41);
      v46 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v47 = v114;
      (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(&v114[v46[7]], enum case for PriceChangeDisplay.currency(_:), v118);
      v48 = &v47[v46[11]];
      sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = 0;
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v115 + 32))(&v47[v46[5]], v26, v116);
      v47[v46[6]] = v44;
      *(_QWORD *)&v47[v46[8]] = 3;
      *(_QWORD *)&v47[v46[9]] = 1;
      v47[v46[10]] = v44;
      return result;
    }
    __break(1u);
    goto LABEL_36;
  }
  if (v37 == enum case for WidgetFamily.systemMedium(_:))
  {
    v27 = v119;
    v51 = 3;
    if ((v119 & 1) != 0)
      v51 = 4;
    *(_QWORD *)&v120 = 0;
    *((_QWORD *)&v120 + 1) = v51;
    sub_10002F488(0, (unint64_t *)&qword_100112958, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
    v53 = v52;
    v54 = sub_100038084();
    NonEmpty.init(_:)(&v120, v53, v54);
    sub_100038004(0);
    v56 = v55;
    v35 = *(_QWORD *)(v55 - 8);
    v30 = 1;
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v14, 1, v55);
    if ((_DWORD)v57 == 1)
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    __chkstk_darwin(v57);
    v119 = v27 & 1;
    if ((v27 & 1) != 0)
      v58 = 1;
    else
      v58 = 2;
    LOBYTE(v106) = v58;
    if ((v27 & 1) != 0)
      v59 = 2;
    else
      v59 = 1;
    v111 = (char *)v59;
    if ((v27 & 1) != 0)
      v60 = 2;
    else
      v60 = 3;
    v61 = type metadata accessor for TickerCellViewModel(0);
    v62 = v112;
    NonEmpty.map<A>(_:)(sub_100038134, &v107 - 4, v56, v61);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v56);
    v64 = v117;
    v63 = v118;
    v65 = v113;
    (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v113, enum case for PriceChangeDisplay.currency(_:), v118);
    v66 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v67 = v114;
    v68 = &v114[v66[11]];
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 1, 1, v69);
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(&v67[v66[5]], v62, v116);
    v67[v66[6]] = v58;
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 32))(&v67[v66[7]], v65, v63);
    *(_QWORD *)&v67[v66[8]] = v60;
    *(_QWORD *)&v67[v66[9]] = v111;
    goto LABEL_29;
  }
  v70 = v119;
  if (v37 == enum case for WidgetFamily.systemLarge(_:))
  {
    v71 = 6;
    if ((v119 & 1) != 0)
      v71 = 12;
    *(_QWORD *)&v120 = 0;
    *((_QWORD *)&v120 + 1) = v71;
    sub_10002F488(0, (unint64_t *)&qword_100112958, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
    v73 = v72;
    v74 = sub_100038084();
    v75 = v111;
    NonEmpty.init(_:)(&v120, v73, v74);
    sub_100038004(0);
    v77 = v76;
    v27 = *(_QWORD *)(v76 - 8);
    v30 = 1;
    v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v75, 1, v76);
    if ((_DWORD)v78 == 1)
      goto LABEL_37;
    __chkstk_darwin(v78);
    v119 = v70 & 1;
    if ((v70 & 1) != 0)
      v79 = 1;
    else
      v79 = 2;
    LOBYTE(v106) = v79;
    if ((v70 & 1) != 0)
      v80 = 2;
    else
      v80 = 1;
    v81 = type metadata accessor for TickerCellViewModel(0);
    v82 = v108;
    NonEmpty.map<A>(_:)(sub_10003C338, &v107 - 4, v77, v81);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v75, v77);
    v84 = v117;
    v83 = v118;
    v85 = v109;
    (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v109, enum case for PriceChangeDisplay.currency(_:), v118);
    v66 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v67 = v114;
    v86 = &v114[v66[11]];
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 1, 1, v87);
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(&v67[v66[5]], v82, v116);
    v67[v66[6]] = v79;
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v84 + 32))(&v67[v66[7]], v85, v83);
    *(_QWORD *)&v67[v66[8]] = 6;
    *(_QWORD *)&v67[v66[9]] = v80;
LABEL_29:
    v88 = v66[10];
    v89 = v119;
    goto LABEL_33;
  }
  if (v37 != enum case for WidgetFamily.accessoryRectangular(_:))
  {
LABEL_39:
    ((void (*)(uint64_t, uint64_t, uint64_t))v35)(v30, v36, v27);
    *(_QWORD *)&v120 = 0;
    *((_QWORD *)&v120 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v101._object = (void *)0x80000001000E59A0;
    v101._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v101);
    v102 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v103._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v27, v102);
    object = v103._object;
    String.append(_:)(v103);
    swift_bridgeObjectRelease(object);
    v105._countAndFlagsBits = 11815;
    v105._object = (void *)0xE200000000000000;
    String.append(_:)(v105);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v120, *((_QWORD *)&v120 + 1), "StocksWidget/WatchlistOverviewContentView.swift", 47, 2, 79, 0);
    __break(1u);
    return result;
  }
  v120 = xmmword_1000DD360;
  sub_10002F488(0, (unint64_t *)&qword_100112958, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
  v91 = v90;
  v92 = sub_100038084();
  v93 = v110;
  NonEmpty.init(_:)(&v120, v91, v92);
  sub_100038004(0);
  v35 = v94;
  v95 = *(_QWORD *)(v94 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94) == 1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v96 = type metadata accessor for TickerCellViewModel(0);
  v97 = v107;
  NonEmpty.map<A>(_:)(sub_10003810C, 0, v35, v96);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v35);
  v98 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v67 = v114;
  (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(&v114[v98[7]], enum case for PriceChangeDisplay.currency(_:), v118);
  v99 = &v67[v98[11]];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v99, 1, 1, v100);
  *(_QWORD *)v67 = 0;
  *((_QWORD *)v67 + 1) = 0;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v115 + 32))(&v67[v98[5]], v97, v116);
  v67[v98[6]] = 3;
  *(_QWORD *)&v67[v98[8]] = 3;
  *(_QWORD *)&v67[v98[9]] = 1;
  v88 = v98[10];
  v89 = v70 & 1;
LABEL_33:
  v67[v88] = v89;
  return result;
}

void sub_100038004(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100113938)
  {
    sub_10002F488(255, (unint64_t *)&qword_100112958, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
    v3 = v2;
    v4 = sub_100038084();
    v5 = type metadata accessor for NonEmpty(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100113938);
  }
}

unint64_t sub_100038084()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113940;
  if (!qword_100113940)
  {
    sub_10002F488(255, (unint64_t *)&qword_100112958, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
    v2 = v1;
    sub_10002141C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v2);
    atomic_store(result, (unint64_t *)&qword_100113940);
  }
  return result;
}

uint64_t sub_10003810C@<X0>(uint64_t a1@<X8>)
{
  return sub_100077418(3, a1);
}

uint64_t sub_100038134@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100077418(*(unsigned __int8 *)(v1 + 16), a1);
}

uint64_t *sub_10003815C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t, __n128);
  __n128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    sub_100038414(0);
    v8 = v7;
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v9 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v10 = a1;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_100024CBC(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = a3[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = *((_QWORD *)v22 + 1);
    v25 = *((_QWORD *)v22 + 2);
    v26 = *((_QWORD *)v22 + 3);
    v27 = v22[32];
    sub_100038430(*(_QWORD *)v22, v24, v25, v26, v27);
    *(_QWORD *)v21 = v23;
    *((_QWORD *)v21 + 1) = v24;
    *((_QWORD *)v21 + 2) = v25;
    *((_QWORD *)v21 + 3) = v26;
    v21[32] = v27;
    v28 = a3[7];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (char *)a2 + v28;
    v31 = *(uint64_t *)((char *)a2 + v28 + 8);
    *v29 = *(uint64_t *)((char *)a2 + v28);
    v29[1] = v31;
    v32 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v33 = v32[5];
    v34 = (char *)v29 + v33;
    v35 = &v30[v33];
    sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v37 = v36;
    v38 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v36 - 8) + 16);
    v39 = swift_bridgeObjectRetain(v31);
    v38(v34, v35, v37, v39);
    *((_BYTE *)v29 + v32[6]) = v30[v32[6]];
    v40 = v32[7];
    v41 = (char *)v29 + v40;
    v42 = &v30[v40];
    v43 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    *(_QWORD *)((char *)v29 + v32[8]) = *(_QWORD *)&v30[v32[8]];
    *(_QWORD *)((char *)v29 + v32[9]) = *(_QWORD *)&v30[v32[9]];
    *((_BYTE *)v29 + v32[10]) = v30[v32[10]];
    v44 = v32[11];
    v45 = (char *)v29 + v44;
    v46 = &v30[v44];
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v48 = v47;
    v49 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v46, 1, v47))
    {
      sub_10001D6B0(0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v45, v46, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
    }
  }
  return a1;
}

void sub_100038414(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
}

uint64_t sub_100038430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10003843C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  sub_100038414(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_100024DD8(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (char *)a1 + a2[6];
  sub_100028060(*(_QWORD *)v6, *((_QWORD *)v6 + 1), *((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3), v6[32]);
  v7 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
  v8 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v9 = &v7[v8[5]];
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = &v7[v8[7]];
  v12 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = &v7[v8[11]];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  return result;
}

uint64_t *sub_1000385C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_100038414(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = a1;
    v10 = v7;
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v9 = a1;
    v10 = v7;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  v17 = v15[8];
  sub_100024CBC(*(_QWORD *)v15, v17);
  *(_QWORD *)v14 = v16;
  v14[8] = v17;
  v18 = a3[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  v22 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v20 + 2);
  v24 = *((_QWORD *)v20 + 3);
  v25 = v20[32];
  sub_100038430(*(_QWORD *)v20, v22, v23, v24, v25);
  *(_QWORD *)v19 = v21;
  *((_QWORD *)v19 + 1) = v22;
  *((_QWORD *)v19 + 2) = v23;
  *((_QWORD *)v19 + 3) = v24;
  v19[32] = v25;
  v26 = a3[7];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = *(uint64_t *)((char *)a2 + v26 + 8);
  *v27 = *(uint64_t *)((char *)a2 + v26);
  v27[1] = v29;
  v30 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v31 = v30[5];
  v32 = (char *)v27 + v31;
  v33 = &v28[v31];
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v35 = v34;
  v36 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v34 - 8) + 16);
  v37 = swift_bridgeObjectRetain(v29);
  v36(v32, v33, v35, v37);
  *((_BYTE *)v27 + v30[6]) = v28[v30[6]];
  v38 = v30[7];
  v39 = (char *)v27 + v38;
  v40 = &v28[v38];
  v41 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  *(_QWORD *)((char *)v27 + v30[8]) = *(_QWORD *)&v28[v30[8]];
  *(_QWORD *)((char *)v27 + v30[9]) = *(_QWORD *)&v28[v30[9]];
  *((_BYTE *)v27 + v30[10]) = v28[v30[10]];
  v42 = v30[11];
  v43 = (char *)v27 + v42;
  v44 = &v28[v42];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v46 = v45;
  v47 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v44, 1, v45))
  {
    sub_10001D6B0(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v43, v44, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v43, 0, 1, v46);
  }
  return a1;
}

uint64_t *sub_100038850(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  uint64_t v55;

  if (a1 != a2)
  {
    sub_10001DF70((uint64_t)a1, (uint64_t (*)(_QWORD))sub_100038414);
    sub_100038414(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  v17 = v15[8];
  sub_100024CBC(*(_QWORD *)v15, v17);
  v18 = *(_QWORD *)v14;
  v19 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = v17;
  sub_100024DD8(v18, v19);
  v20 = a3[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *((_QWORD *)v22 + 1);
  v25 = *((_QWORD *)v22 + 2);
  v26 = *((_QWORD *)v22 + 3);
  v27 = v22[32];
  sub_100038430(*(_QWORD *)v22, v24, v25, v26, v27);
  v28 = *(_QWORD *)v21;
  v29 = *((_QWORD *)v21 + 1);
  v30 = *((_QWORD *)v21 + 2);
  v31 = *((_QWORD *)v21 + 3);
  v32 = v21[32];
  *(_QWORD *)v21 = v23;
  *((_QWORD *)v21 + 1) = v24;
  *((_QWORD *)v21 + 2) = v25;
  *((_QWORD *)v21 + 3) = v26;
  v21[32] = v27;
  sub_100028060(v28, v29, v30, v31, v32);
  v33 = a3[7];
  v34 = (uint64_t *)((char *)a1 + v33);
  v35 = (char *)a2 + v33;
  *v34 = *(uint64_t *)((char *)a2 + v33);
  v36 = *(uint64_t *)((char *)a2 + v33 + 8);
  v37 = *(uint64_t *)((char *)a1 + v33 + 8);
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v39 = v38[5];
  v40 = (char *)v34 + v39;
  v41 = &v35[v39];
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  *((_BYTE *)v34 + v38[6]) = v35[v38[6]];
  v43 = v38[7];
  v44 = (char *)v34 + v43;
  v45 = &v35[v43];
  v46 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  *(_QWORD *)((char *)v34 + v38[8]) = *(_QWORD *)&v35[v38[8]];
  *(_QWORD *)((char *)v34 + v38[9]) = *(_QWORD *)&v35[v38[9]];
  *((_BYTE *)v34 + v38[10]) = v35[v38[10]];
  v47 = v38[11];
  v48 = (char *)v34 + v47;
  v49 = &v35[v47];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v51 = v50;
  v52 = *(_QWORD *)(v50 - 8);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  LODWORD(v24) = v53(v48, 1, v50);
  v54 = v53(v49, 1, v51);
  if (!(_DWORD)v24)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 24))(v48, v49, v51);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v51);
    goto LABEL_11;
  }
  if (v54)
  {
LABEL_11:
    sub_10001D6B0(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v48, v49, v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
  return a1;
}

char *sub_100038B60(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_100038414(0);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, v7, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = &a1[v10];
  v14 = &a2[v10];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v13[32] = v14[32];
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v19 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v20 = v19[5];
  v21 = &v17[v20];
  v22 = &v18[v20];
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v17[v19[6]] = v18[v19[6]];
  v24 = v19[7];
  v25 = &v17[v24];
  v26 = &v18[v24];
  v27 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  *(_QWORD *)&v17[v19[8]] = *(_QWORD *)&v18[v19[8]];
  *(_QWORD *)&v17[v19[9]] = *(_QWORD *)&v18[v19[9]];
  v17[v19[10]] = v18[v19[10]];
  v28 = v19[11];
  v29 = &v17[v28];
  v30 = &v18[v28];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v32 = v31;
  v33 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v31))
  {
    sub_10001D6B0(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v29, v30, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
  }
  return a1;
}

char *sub_100038DA4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;

  if (a1 != a2)
  {
    sub_10001DF70((uint64_t)a1, (uint64_t (*)(_QWORD))sub_100038414);
    sub_100038414(0);
    v7 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, v7, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(_QWORD *)v11;
  LOBYTE(v11) = v11[8];
  v13 = *(_QWORD *)v10;
  v14 = v10[8];
  *(_QWORD *)v10 = v12;
  v10[8] = (char)v11;
  sub_100024DD8(v13, v14);
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v17[32];
  v19 = *(_QWORD *)v16;
  v20 = *((_QWORD *)v16 + 1);
  v21 = *((_QWORD *)v16 + 2);
  v22 = *((_QWORD *)v16 + 3);
  v23 = v16[32];
  v24 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v24;
  v16[32] = v18;
  sub_100028060(v19, v20, v21, v22, v23);
  v25 = a3[7];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_QWORD *)&a2[v25 + 8];
  v29 = *(_QWORD *)&a1[v25 + 8];
  *(_QWORD *)v26 = *(_QWORD *)&a2[v25];
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v31 = v30[5];
  v32 = &v26[v31];
  v33 = &v27[v31];
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v26[v30[6]] = v27[v30[6]];
  v35 = v30[7];
  v36 = &v26[v35];
  v37 = &v27[v35];
  v38 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  *(_QWORD *)&v26[v30[8]] = *(_QWORD *)&v27[v30[8]];
  *(_QWORD *)&v26[v30[9]] = *(_QWORD *)&v27[v30[9]];
  v26[v30[10]] = v27[v30[10]];
  v39 = v30[11];
  v40 = &v26[v39];
  v41 = &v27[v39];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v43 = v42;
  v44 = *(_QWORD *)(v42 - 8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v40, 1, v42);
  v47 = v45(v41, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 40))(v40, v41, v43);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v43);
    goto LABEL_10;
  }
  if (v47)
  {
LABEL_10:
    sub_10001D6B0(0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v40, v41, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v40, 0, 1, v43);
  return a1;
}

uint64_t sub_10003906C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039078);
}

uint64_t sub_100039078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for WatchlistOverviewContentViewModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_100039134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100039140);
}

void sub_100039140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
      return;
    }
    v10 = type metadata accessor for WatchlistOverviewContentViewModel(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for WatchlistOverviewContentView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001139A0, (uint64_t)&nominal type descriptor for WatchlistOverviewContentView);
}

void sub_100039210(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100038414(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = &unk_1000DD418;
    v4 = type metadata accessor for WatchlistOverviewContentViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000392A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E878C, 1);
}

_QWORD *sub_1000392B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t KeyPath;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[2];
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)();
  uint64_t v140;
  _OWORD v141[9];
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD v156[2];
  char v157;
  _OWORD v158[2];
  char v159;
  _BYTE v160[40];
  _QWORD v161[28];

  v95 = a2;
  sub_10003B610(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10003B594(0, &qword_100113A98, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v91 = v7;
  v92 = v8;
  __chkstk_darwin(v7);
  v90 = (uint64_t)&v72 - v9;
  sub_10001D6B0(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v14 = *(_QWORD *)(v13 - 8);
  v96 = v13;
  v97 = v14;
  __chkstk_darwin(v13);
  v89 = (char *)&v72 - v15;
  sub_10003B530(0);
  __chkstk_darwin(v16);
  v94 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v72 - v19;
  sub_10001D724(0, &qword_100113A38, (uint64_t (*)(uint64_t))sub_10003B2CC, sub_10003B514, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  __chkstk_darwin(v21);
  v93 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v72 - v24;
  __chkstk_darwin(v26);
  v98 = (uint64_t)&v72 - v27;
  v28 = type metadata accessor for WatchlistOverviewContentView(0);
  v29 = (_QWORD *)(a1 + *(int *)(v28 + 28));
  v30 = v29[1];
  v88 = v28;
  if (v30)
  {
    v31 = v28;
    v161[0] = *v29;
    v161[1] = v30;
    v32 = sub_1000144A0();
    v85 = v12;
    v33 = v32;
    swift_bridgeObjectRetain(v30);
    v34 = Text.init<A>(_:)(v161, &type metadata for String, v33);
    v83 = v35;
    v84 = v34;
    v86 = v5;
    v87 = v20;
    LOBYTE(v33) = v36;
    v82 = v37;
    KeyPath = swift_getKeyPath(&unk_1000DD480);
    v80 = swift_getKeyPath(&unk_1000DD4A8);
    v79 = static HierarchicalShapeStyle.primary.getter();
    v38 = static Font.callout.getter();
    static Font.Weight.heavy.getter();
    v78 = Font.weight(_:)(v38);
    swift_release(v38);
    v73 = swift_getKeyPath(&unk_1000DD4D8);
    v39 = a1 + *(int *)(v31 + 24);
    v159 = *(_BYTE *)(v39 + 32);
    v40 = *(_OWORD *)(v39 + 16);
    v158[0] = *(_OWORD *)v39;
    v158[1] = v40;
    sub_10003BD5C((uint64_t)v158, (uint64_t)v160);
    sub_10003BDB8((uint64_t)v160, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
    v41 = sub_100045EEC();
    sub_10003BDB8((uint64_t)v158, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
    v42 = swift_getKeyPath(&unk_1000DD480);
    v43 = swift_allocObject(&unk_1001052E8, 41, 7);
    *(double *)(v43 + 16) = v41;
    *(_BYTE *)(v43 + 24) = 0;
    *(_QWORD *)(v43 + 32) = 0;
    *(_BYTE *)(v43 + 40) = 0;
    v101 = v33 & 1;
    v100 = 0;
    v99 = 0;
    v44 = static Alignment.center.getter(v43);
    _FrameLayout.init(width:height:alignment:)(&v150, 0, 1, 0x402C000000000000, 0, v44, v45);
    v76 = v152;
    v77 = v150;
    v74 = v155;
    v75 = v154;
    *(_QWORD *)&v102 = v84;
    *((_QWORD *)&v102 + 1) = v83;
    LOBYTE(v103) = v101;
    *((_QWORD *)&v103 + 1) = v82;
    *(_QWORD *)&v104 = 0;
    *((_QWORD *)&v104 + 1) = KeyPath;
    v105 = 0;
    v106 = 0;
    *(_QWORD *)&v107 = 0;
    BYTE8(v107) = v100;
    *(_QWORD *)&v108 = v80;
    *((_QWORD *)&v108 + 1) = 1;
    LOBYTE(v109) = v99;
    DWORD1(v109) = v79;
    *((_QWORD *)&v109 + 1) = v73;
    *(_QWORD *)&v110 = v78;
    *((_QWORD *)&v110 + 1) = v42;
    *(_QWORD *)&v111 = sub_10002453C;
    *((_QWORD *)&v111 + 1) = v43;
    v116 = v104;
    v117 = 0u;
    v114 = v102;
    v115 = v103;
    v121 = v110;
    v122 = v111;
    v119 = v108;
    v120 = v109;
    v118 = v107;
    LOBYTE(v156[0]) = 1;
    v113 = v151;
    v112 = v153;
    LOBYTE(v31) = v151;
    LOBYTE(v33) = v153;
    v123[0] = v84;
    v123[1] = v83;
    v124 = v101;
    v125 = v82;
    v126 = 0;
    v127 = KeyPath;
    v128 = 0;
    v130 = 0;
    v129 = 0;
    v131 = v100;
    v132 = v80;
    v133 = 1;
    v134 = v99;
    v135 = v79;
    v136 = v73;
    v137 = v78;
    v138 = v42;
    v139 = sub_10002453C;
    v140 = v43;
    v20 = v87;
    sub_10003BE74((uint64_t)&v102);
    sub_10003BF44((uint64_t)v123);
    v141[6] = v120;
    v141[7] = v121;
    v141[8] = v122;
    v141[2] = v116;
    v141[3] = v117;
    v141[4] = v118;
    v141[5] = v119;
    v141[0] = v114;
    v141[1] = v115;
    v142 = 0;
    v143 = 1;
    v144 = v77;
    v145 = v31;
    v146 = v76;
    v147 = v33;
    v12 = v85;
    v5 = v86;
    v148 = v75;
    v149 = v74;
    nullsub_1(v141, v46);
  }
  else
  {
    sub_10003B938(v141);
  }
  v47 = sub_10000ED3C((uint64_t)v141, (uint64_t)v161, (uint64_t (*)(_QWORD))sub_10003B05C);
  *(_QWORD *)v25 = static HorizontalAlignment.center.getter(v47);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 0;
  sub_10003B95C(0, &qword_100113AE8, (uint64_t (*)(uint64_t))sub_10003B2CC);
  sub_100039B0C(a1, (uint64_t)&v25[*(int *)(v48 + 44)]);
  sub_10003B9B8((uint64_t)v25, v98);
  v49 = type metadata accessor for WatchlistOverviewContentViewModel(0);
  sub_10001DE2C((uint64_t)v29 + *(int *)(v49 + 44), (uint64_t)v12, (uint64_t (*)(_QWORD))sub_10001D6B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v12, 1, v96) == 1)
  {
    sub_10001DF70((uint64_t)v12, (uint64_t (*)(_QWORD))sub_10001D6B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v20, 1, 1, v91);
  }
  else
  {
    v50 = v96;
    v51 = (uint64_t)v89;
    v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v97 + 32))(v89, v12, v96);
    *v5 = static Alignment.center.getter(v52);
    v5[1] = v53;
    sub_10003BCE8(0);
    sub_10003A720(a1, v51, (uint64_t)v5 + *(int *)(v54 + 44));
    v55 = a1 + *(int *)(v88 + 24);
    v56 = *(_OWORD *)(v55 + 16);
    v156[0] = *(_OWORD *)v55;
    v156[1] = v56;
    v157 = *(_BYTE *)(v55 + 32);
    sub_10003BD5C((uint64_t)v156, (uint64_t)&v102);
    sub_10003BDB8((uint64_t)&v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
    sub_100045EEC();
    v58 = v57;
    sub_10003BDB8((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
    v59 = swift_getKeyPath(&unk_1000DD480);
    v60 = v50;
    v61 = swift_allocObject(&unk_1001052C0, 41, 7);
    *(_QWORD *)(v61 + 16) = 0;
    *(_BYTE *)(v61 + 24) = 0;
    *(_QWORD *)(v61 + 32) = v58;
    *(_BYTE *)(v61 + 40) = 0;
    v62 = v90;
    sub_10001DE2C((uint64_t)v5, v90, (uint64_t (*)(_QWORD))sub_10003B610);
    v63 = v91;
    v64 = (uint64_t *)(v62 + *(int *)(v91 + 36));
    *v64 = v59;
    v64[1] = (uint64_t)sub_10002453C;
    v64[2] = v61;
    sub_10001DF70((uint64_t)v5, (uint64_t (*)(_QWORD))sub_10003B610);
    sub_10003BE08(v62, (uint64_t)v20, &qword_100113A98, (uint64_t (*)(uint64_t))sub_10003B610);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v20, 0, 1, v63);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v51, v60);
  }
  v66 = (uint64_t)v94;
  v65 = v95;
  v67 = (uint64_t)v93;
  sub_10000ED3C((uint64_t)v161, (uint64_t)&v114, (uint64_t (*)(_QWORD))sub_10003B05C);
  v68 = v98;
  sub_10003BA1C(v98, v67);
  sub_10001DE2C((uint64_t)v20, v66, (uint64_t (*)(_QWORD))sub_10003B530);
  sub_10000ED3C((uint64_t)&v114, (uint64_t)v123, (uint64_t (*)(_QWORD))sub_10003B05C);
  sub_10000ED3C((uint64_t)v123, v65, (uint64_t (*)(_QWORD))sub_10003B05C);
  sub_10003AFB8(0);
  v70 = v69;
  sub_10003BA1C(v67, v65 + *(int *)(v69 + 48));
  sub_10001DE2C(v66, v65 + *(int *)(v70 + 64), (uint64_t (*)(_QWORD))sub_10003B530);
  sub_10003BBAC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003BA80);
  sub_10001DF70((uint64_t)v20, (uint64_t (*)(_QWORD))sub_10003B530);
  sub_10003BB50(v68);
  sub_10001DF70(v66, (uint64_t (*)(_QWORD))sub_10003B530);
  sub_10003BB50(v67);
  sub_10000ED3C((uint64_t)&v114, (uint64_t)v141, (uint64_t (*)(_QWORD))sub_10003B05C);
  return sub_10003BBAC(v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003BC18);
}

uint64_t sub_100039B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  BOOL v49;
  uint64_t (**v50)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v51;
  double v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t (*v58)(uint64_t, uint64_t, _QWORD);
  int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(_QWORD *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  Swift::String v114;
  _QWORD *v115;
  uint64_t v116;
  Swift::String v117;
  void *object;
  Swift::String v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE v142[66];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  unsigned __int8 v147;
  char v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  unsigned __int8 v152;
  __int128 v153;
  _OWORD v154[2];
  char v155;
  _OWORD v156[2];
  char v157;
  _BYTE v158[40];
  _BYTE v159[48];

  v139 = a2;
  v3 = type metadata accessor for WidgetFamily(0);
  v125 = *(_QWORD *)(v3 - 8);
  v126 = v3;
  __chkstk_darwin(v3);
  v122 = (uint64_t *)((char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v124 = (uint64_t *)((char *)&v120 - v6);
  __chkstk_darwin(v7);
  v121 = (uint64_t *)((char *)&v120 - v8);
  __chkstk_darwin(v9);
  v123 = (uint64_t *)((char *)&v120 - v10);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  *(_QWORD *)&v137 = *(_QWORD *)(v11 - 8);
  *((_QWORD *)&v137 + 1) = v11;
  __chkstk_darwin(v11);
  v127 = (char *)&v120 - v12;
  sub_10001D6B0(0);
  __chkstk_darwin(v13);
  *((_QWORD *)&v136 + 1) = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  *(_QWORD *)&v136 = (char *)&v120 - v16;
  v17 = (int *)type metadata accessor for WatchlistOverviewContentView(0);
  __chkstk_darwin(v17);
  v120 = (uint64_t)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v130 = (char *)&v120 - v20;
  sub_10001D724(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v25 = (char *)&v120 - v24;
  sub_10003B364(0);
  v27 = v26;
  __chkstk_darwin(v26);
  v29 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_100113A50, v30);
  v135 = v31;
  __chkstk_darwin(v31);
  v138 = (uint64_t)&v120 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v134 = (uint64_t)&v120 - v34;
  __chkstk_darwin(v35);
  v141 = (uint64_t)&v120 - v36;
  v37 = a1 + v17[7];
  v38 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
  v39 = v37 + v38[5];
  v131 = v25;
  v132 = v23;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v133 = v22;
  v40(v25, v39, v22);
  v41 = *(_QWORD *)(v37 + v38[8]);
  v128 = *(_QWORD *)(v37 + v38[9]);
  v129 = v41;
  v42 = a1 + v17[5];
  v43 = a1;
  v44 = *(_QWORD *)v42;
  LOBYTE(v23) = *(_BYTE *)(v42 + 8);
  sub_100024CBC(*(_QWORD *)v42, v23);
  LOBYTE(v22) = sub_100045C74(v44, v23);
  v45 = v44;
  v46 = (uint64_t)v130;
  sub_100024DD8(v45, v23);
  v140 = v43;
  sub_10001DE2C(v43, v46, type metadata accessor for WatchlistOverviewContentView);
  if ((v22 & 1) != 0)
  {
    v47 = *(unsigned __int8 *)(v46 + v17[7] + v38[6]);
    sub_10001DF70(v46, type metadata accessor for WatchlistOverviewContentView);
    v48 = v47 != 3;
  }
  else
  {
    sub_10001DF70(v46, type metadata accessor for WatchlistOverviewContentView);
    v48 = 0;
  }
  v49 = *(_BYTE *)(v37 + v38[6]) != 3;
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v29, v131, v133);
  *(_QWORD *)&v29[v27[13]] = v128;
  *(_QWORD *)&v29[v27[14]] = v129;
  *(_QWORD *)&v29[v27[15]] = 0x4038000000000000;
  v29[v27[16]] = v48;
  v29[v27[17]] = v49;
  v50 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v29[v27[18]];
  *v50 = sub_10003A6A8;
  v50[1] = 0;
  v51 = 0;
  v52 = 0.0;
  if (!*(_QWORD *)(v37 + 8))
  {
    v53 = v140 + v17[6];
    v54 = *(_OWORD *)(v53 + 16);
    v156[0] = *(_OWORD *)v53;
    v156[1] = v54;
    v157 = *(_BYTE *)(v53 + 32);
    sub_10003BD5C((uint64_t)v156, (uint64_t)v158);
    sub_10003BDB8((uint64_t)v158, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
    v52 = sub_100045EEC();
    sub_10003BDB8((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  }
  v55 = v37 + v38[11];
  v56 = v136;
  sub_10001DE2C(v55, v136, (uint64_t (*)(_QWORD))sub_10001D6B0);
  v57 = v137;
  v58 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v137 + 48);
  v59 = v58(v56, 1, *((_QWORD *)&v137 + 1));
  sub_10001DF70(v56, (uint64_t (*)(_QWORD))sub_10001D6B0);
  if (v59 == 1)
  {
    v60 = v140 + v17[6];
    v61 = *(_OWORD *)(v60 + 16);
    v154[0] = *(_OWORD *)v60;
    v154[1] = v61;
    v155 = *(_BYTE *)(v60 + 32);
    sub_10003BD5C((uint64_t)v154, (uint64_t)v159);
    sub_10003BDB8((uint64_t)v159, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
    sub_100045EEC();
    v51 = v62;
    sub_10003BDB8((uint64_t)v154, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  }
  KeyPath = swift_getKeyPath(&unk_1000DD480);
  v64 = swift_allocObject(&unk_100105310, 41, 7);
  *(double *)(v64 + 16) = v52;
  *(_BYTE *)(v64 + 24) = 0;
  *(_QWORD *)(v64 + 32) = v51;
  *(_BYTE *)(v64 + 40) = 0;
  v65 = v134;
  sub_10001DE2C((uint64_t)v29, v134, (uint64_t (*)(_QWORD))sub_10003B364);
  v66 = (uint64_t *)(v65 + *(int *)(v135 + 36));
  *v66 = KeyPath;
  v66[1] = (uint64_t)sub_10002453C;
  v66[2] = v64;
  sub_10001DF70((uint64_t)v29, (uint64_t (*)(_QWORD))sub_10003B364);
  sub_10003BE08(v65, v141, &qword_100113A50, (uint64_t (*)(uint64_t))sub_10003B364);
  v67 = *((_QWORD *)&v136 + 1);
  sub_10001DE2C(v55, *((uint64_t *)&v136 + 1), (uint64_t (*)(_QWORD))sub_10001D6B0);
  if (v58(v67, 1, *((_QWORD *)&v57 + 1)) == 1)
  {
    sub_10001DF70(v67, (uint64_t (*)(_QWORD))sub_10001D6B0);
LABEL_11:
    v137 = 0uLL;
    v136 = 0uLL;
    v70 = 0;
    v135 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 65280;
LABEL_26:
    LODWORD(v140) = v73;
    v105 = v141;
    v106 = v138;
    sub_10003C138(v141, v138, (uint64_t)&qword_100113A50, (uint64_t)sub_10003B364, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_10003B594);
    v107 = v139;
    sub_10003C138(v106, v139, (uint64_t)&qword_100113A50, (uint64_t)sub_10003B364, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_10003B594);
    sub_10003B2E8(0);
    v109 = v107 + *(int *)(v108 + 48);
    v110 = *((_QWORD *)&v137 + 1);
    *(_QWORD *)v109 = v137;
    *(_QWORD *)(v109 + 8) = v110;
    v111 = *((_QWORD *)&v136 + 1);
    *(_QWORD *)(v109 + 16) = v136;
    *(_QWORD *)(v109 + 24) = v111;
    v112 = v135;
    *(_QWORD *)(v109 + 32) = v70;
    *(_QWORD *)(v109 + 40) = v112;
    *(_QWORD *)(v109 + 48) = v71;
    *(_QWORD *)(v109 + 56) = v72;
    *(_WORD *)(v109 + 64) = v140;
    sub_10003C184(v105, (uint64_t)&qword_100113A50, (uint64_t)sub_10003B364, (uint64_t (*)(_QWORD))sub_10003B594);
    return sub_10003C184(v106, (uint64_t)&qword_100113A50, (uint64_t)sub_10003B364, (uint64_t (*)(_QWORD))sub_10003B594);
  }
  v68 = v127;
  (*(void (**)(char *, uint64_t, _QWORD))(v57 + 32))(v127, v67, *((_QWORD *)&v57 + 1));
  v69 = NonEmpty.isEmpty.getter(*((_QWORD *)&v57 + 1));
  (*(void (**)(char *, _QWORD))(v57 + 8))(v68, *((_QWORD *)&v57 + 1));
  if ((v69 & 1) != 0)
    goto LABEL_11;
  v74 = v123;
  v75 = v140;
  sub_100045E2C(v123);
  v76 = v125;
  v77 = v126;
  v78 = (*(uint64_t (**)(_QWORD *, uint64_t))(v125 + 88))(v74, v126);
  if ((_DWORD)v78 == enum case for WidgetFamily.systemSmall(_:)
    || (v79 = v78, (_DWORD)v78 == enum case for WidgetFamily.systemMedium(_:)))
  {
    v93 = v121;
    sub_100045E2C(v121);
    v94 = v124;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v76 + 104))(v124, enum case for WidgetFamily.systemLarge(_:), v77);
    v95 = sub_100003D3C(&qword_100113B18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v143, v77, v95);
    dispatch thunk of RawRepresentable.rawValue.getter(v142, v77, v95);
    v96 = v143;
    v97 = *(_QWORD *)v142;
    v98 = *(void (**)(_QWORD *, uint64_t))(v76 + 8);
    v98(v94, v77);
    v98(v93, v77);
    v99 = 0x4020000000000000;
    if (v96 == v97)
      v99 = 0x4030000000000000;
    *(_QWORD *)v142 = v99;
    sub_10002F488(0, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v91 = v100;
    v92 = sub_10003C1C0();
    memset(&v142[8], 0, 57);
    goto LABEL_22;
  }
  if ((_DWORD)v78 == enum case for WidgetFamily.systemLarge(_:))
  {
    v80 = v122;
    sub_100045E2C(v122);
    v81 = v124;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v76 + 104))(v124, v79, v77);
    v82 = sub_100003D3C(&qword_100113B18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v143, v77, v82);
    dispatch thunk of RawRepresentable.rawValue.getter(v142, v77, v82);
    v83 = v143;
    v84 = *(_QWORD *)v142;
    v85 = *(void (**)(_QWORD *, uint64_t))(v76 + 8);
    v85(v81, v77);
    v86 = ((uint64_t (*)(_QWORD *, uint64_t))v85)(v80, v77);
    if (v83 == v84)
      v87 = 0x4030000000000000;
    else
      v87 = 0x4020000000000000;
    v88 = static Alignment.center.getter(v86);
    _FrameLayout.init(width:height:alignment:)(&v149, 0, 1, v87, 0, v88, v89);
    *(_OWORD *)v142 = xmmword_1000DB8D0;
    *(_QWORD *)&v142[16] = v149;
    *(_QWORD *)&v142[24] = v150;
    *(_QWORD *)&v142[32] = v151;
    *(_QWORD *)&v142[40] = v152;
    *(_OWORD *)&v142[48] = v153;
    v142[64] = 1;
    sub_10002F488(0, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v91 = v90;
    v92 = sub_10003C1C0();
LABEL_22:
    _ConditionalContent<>.init(storage:)(v142, &type metadata for Spacer, v91, &protocol witness table for Spacer, v92);
    *(_OWORD *)v142 = v143;
    *(_OWORD *)&v142[16] = v144;
    *(_OWORD *)&v142[32] = v145;
    *(_OWORD *)&v142[48] = v146;
    *(_WORD *)&v142[64] = v147;
    sub_10003B498(0);
    v102 = v101;
    v103 = sub_10003C240();
    _ConditionalContent<>.init(storage:)(v142, v102, &type metadata for Never, v103, &protocol witness table for Never);
    v70 = v145;
    v72 = *((_QWORD *)&v146 + 1);
    v71 = v146;
    v135 = *((_QWORD *)&v145 + 1);
    v136 = v144;
    v137 = v143;
    if (v148)
      v104 = 256;
    else
      v104 = 0;
    v73 = v104 | v147;
    goto LABEL_26;
  }
  sub_10001DE2C(v75, v120, type metadata accessor for WatchlistOverviewContentView);
  *(_QWORD *)&v143 = 0;
  *((_QWORD *)&v143 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v114._object = (void *)0x80000001000E5A10;
  v114._countAndFlagsBits = 0xD000000000000037;
  String.append(_:)(v114);
  v115 = v124;
  sub_100045E2C(v124);
  v116 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v117._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v77, v116);
  object = v117._object;
  String.append(_:)(v117);
  swift_bridgeObjectRelease(object);
  (*(void (**)(_QWORD *, uint64_t))(v76 + 8))(v115, v77);
  v119._countAndFlagsBits = 11815;
  v119._object = (void *)0xE200000000000000;
  String.append(_:)(v119);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v143, *((_QWORD *)&v143 + 1), "StocksWidget/WatchlistOverviewContentView.swift", 47, 2, 143, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003A6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  sub_10001DE2C(a1, a2, type metadata accessor for TickerCellViewModel);
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for TickerCellView(0) + 20));
  *v3 = swift_getKeyPath(&unk_1000DD538);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  return swift_storeEnumTagMultiPayload(v3, v4, 0);
}

uint64_t sub_10003A720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t result;
  Swift::String v62;
  _QWORD *v63;
  uint64_t v64;
  Swift::String v65;
  void *object;
  Swift::String v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v76 = a2;
  v78 = a3;
  v4 = type metadata accessor for WatchlistOverviewContentView(0);
  __chkstk_darwin(v4);
  v70 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003C014(0, &qword_100113B00, type metadata accessor for HeadlinesList, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent.Storage);
  v71 = v6;
  __chkstk_darwin(v6);
  v72 = (uint64_t)&v68 - v7;
  sub_10003C014(0, &qword_100113AB8, type metadata accessor for HeadlinesList, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
  v81 = v8;
  __chkstk_darwin(v8);
  v73 = (char *)&v68 - v9;
  v75 = type metadata accessor for HeadlinesList(0);
  __chkstk_darwin(v75);
  v74 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B680(0, &qword_100113B08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v79 = v11;
  __chkstk_darwin(v11);
  v77 = (uint64_t)&v68 - v12;
  sub_10003B718(0, &qword_100113B10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v14 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v68 - v15;
  sub_10003B718(0, &qword_100113AB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
  v80 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v68 - v18;
  v20 = type metadata accessor for HeadlineView(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v68 - v24;
  v26 = type metadata accessor for WidgetFamily(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v69 = (uint64_t *)((char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29);
  v31 = (char *)&v68 - v30;
  sub_100045E2C((uint64_t *)((char *)&v68 - v30));
  v32 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v31, v26);
  if (v32 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    NonEmpty.first.getter(v33);
    v34 = &v22[*(int *)(v20 + 20)];
    *(_QWORD *)v34 = swift_getKeyPath(&unk_1000DD508);
    sub_100038414(0);
    swift_storeEnumTagMultiPayload(v34, v35, 0);
    sub_10000ED3C((uint64_t)v22, (uint64_t)v25, type metadata accessor for HeadlineView);
    sub_10001DE2C((uint64_t)v25, (uint64_t)v16, type metadata accessor for HeadlineView);
    swift_storeEnumTagMultiPayload(v16, v14, 0);
    v36 = sub_100003D3C(&qword_100113AD0, type metadata accessor for HeadlineView, (uint64_t)&unk_1000E1F0C);
    v37 = sub_100003D3C(&qword_100113AD8, type metadata accessor for HeadlinesList, (uint64_t)&unk_1000E0BDC);
    _ConditionalContent<>.init(storage:)(v16, v20, v75, v36, v37);
    v38 = v77;
    sub_10003C138((uint64_t)v19, v77, (uint64_t)&qword_100113AB0, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_10003B718);
    swift_storeEnumTagMultiPayload(v38, v79, 0);
    v39 = sub_10003B7F8();
    v40 = sub_10003B8A0();
    _ConditionalContent<>.init(storage:)(v38, v80, v81, v39, v40);
    sub_10003C184((uint64_t)v19, (uint64_t)&qword_100113AB0, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD))sub_10003B718);
    v41 = (uint64_t)v25;
    v42 = type metadata accessor for HeadlineView;
    return sub_10001DF70(v41, v42);
  }
  v43 = (uint64_t)v19;
  v44 = v75;
  v45 = v76;
  if (v32 == enum case for WidgetFamily.systemMedium(_:))
  {
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v47 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v74, v45, v46);
    *(_QWORD *)(v47 + *(int *)(v44 + 20)) = 1;
    *(_QWORD *)(v47 + *(int *)(v44 + 24)) = 0x4028000000000000;
    sub_10001DE2C(v47, (uint64_t)v16, type metadata accessor for HeadlinesList);
    swift_storeEnumTagMultiPayload(v16, v14, 1);
    v48 = sub_100003D3C(&qword_100113AD0, type metadata accessor for HeadlineView, (uint64_t)&unk_1000E1F0C);
    v49 = sub_100003D3C(&qword_100113AD8, type metadata accessor for HeadlinesList, (uint64_t)&unk_1000E0BDC);
    _ConditionalContent<>.init(storage:)(v16, v20, v44, v48, v49);
    v50 = v77;
    sub_10003C138(v43, v77, (uint64_t)&qword_100113AB0, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_10003B718);
    swift_storeEnumTagMultiPayload(v50, v79, 0);
    v51 = sub_10003B7F8();
    v52 = sub_10003B8A0();
    _ConditionalContent<>.init(storage:)(v50, v80, v81, v51, v52);
    sub_10003C184(v43, (uint64_t)&qword_100113AB0, (uint64_t)&type metadata accessor for _ConditionalContent, (uint64_t (*)(_QWORD))sub_10003B718);
    v41 = v47;
    v42 = type metadata accessor for HeadlinesList;
    return sub_10001DF70(v41, v42);
  }
  if (v32 == enum case for WidgetFamily.systemLarge(_:))
  {
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v54 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v74, v45, v53);
    *(_QWORD *)(v54 + *(int *)(v44 + 20)) = 3;
    *(_QWORD *)(v54 + *(int *)(v44 + 24)) = 0x4028000000000000;
    v55 = v72;
    sub_10001DE2C(v54, v72, type metadata accessor for HeadlinesList);
    swift_storeEnumTagMultiPayload(v55, v71, 0);
    v56 = sub_100003D3C(&qword_100113AD8, type metadata accessor for HeadlinesList, (uint64_t)&unk_1000E0BDC);
    v57 = (uint64_t)v73;
    _ConditionalContent<>.init(storage:)(v55, v44, &type metadata for Never, v56, &protocol witness table for Never);
    v58 = v77;
    sub_10003C074(v57, v77);
    swift_storeEnumTagMultiPayload(v58, v79, 1);
    v59 = sub_10003B7F8();
    v60 = sub_10003B8A0();
    _ConditionalContent<>.init(storage:)(v58, v80, v81, v59, v60);
    sub_10003C0D0(v57);
    v41 = v54;
    v42 = type metadata accessor for HeadlinesList;
    return sub_10001DF70(v41, v42);
  }
  sub_10001DE2C(a1, v70, type metadata accessor for WatchlistOverviewContentView);
  v82 = 0;
  v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v62._object = (void *)0x80000001000E59E0;
  v62._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v62);
  v63 = v69;
  sub_100045E2C(v69);
  v64 = sub_100003D3C(&qword_100112720, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v26, v64);
  object = v65._object;
  String.append(_:)(v65);
  swift_bridgeObjectRelease(object);
  (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(v63, v26);
  v67._countAndFlagsBits = 11815;
  v67._object = (void *)0xE200000000000000;
  String.append(_:)(v67);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v82, v83, "StocksWidget/WatchlistOverviewContentView.swift", 47, 2, 166, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10003AF4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_10003B95C(0, &qword_1001139E0, (uint64_t (*)(uint64_t))sub_10003AF9C);
  return sub_1000392B8(v1, a1 + *(int *)(v3 + 44));
}

void sub_10003AF9C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001139E8, (uint64_t (*)(uint64_t))sub_10003AFB8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10003AFB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t TupleTypeMetadata3;
  uint64_t v8;

  if (!qword_1001139F0)
  {
    sub_10003B05C(255);
    v3 = v2;
    sub_10001D724(255, &qword_100113A38, (uint64_t (*)(uint64_t))sub_10003B2CC, sub_10003B514, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
    v5 = v4;
    sub_10003B530(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, v5, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1001139F0);
  }
}

void sub_10003B05C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001139F8, (uint64_t (*)(uint64_t))sub_10003B078, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10003B078(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113A00, (uint64_t (*)(uint64_t))sub_10003B094, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10003B094(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100113A08)
  {
    sub_10003B594(255, &qword_100113A10, (uint64_t (*)(uint64_t))sub_10003B130);
    v3 = v2;
    sub_10002F488(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100113A08);
  }
}

void sub_10003B130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100113A18)
  {
    sub_10003B1AC(255);
    v3 = v2;
    sub_100026CE0(255, &qword_100112D40, &qword_100112D48, (uint64_t)&type metadata for Font);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100113A18);
  }
}

void sub_10003B1AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100113A20)
  {
    sub_10003B230(255);
    v3 = v2;
    sub_10002F488(255, (unint64_t *)&qword_100112FD8, (uint64_t)&type metadata for HierarchicalShapeStyle, (uint64_t)&protocol witness table for HierarchicalShapeStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _ForegroundStyleModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100113A20);
  }
}

void sub_10003B230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100113A28)
  {
    sub_10002F488(255, (unint64_t *)&qword_1001133B8, (uint64_t)&type metadata for Text, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v3 = v2;
    sub_100026CE0(255, (unint64_t *)&qword_100112570, &qword_100112578, (uint64_t)&type metadata for Int);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100113A28);
  }
}

void sub_10003B2CC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113A40, (uint64_t (*)(uint64_t))sub_10003B2E8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10003B2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100113A48)
  {
    sub_10003B594(255, &qword_100113A50, (uint64_t (*)(uint64_t))sub_10003B364);
    v3 = v2;
    sub_10003B42C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100113A48);
  }
}

void sub_10003B364(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100113A58)
  {
    v4[0] = type metadata accessor for TickerCellViewModel(255);
    v4[1] = type metadata accessor for TickerCellView(255);
    v4[2] = sub_100003D3C(&qword_100113A60, type metadata accessor for TickerCellViewModel, (uint64_t)&unk_1000E00A8);
    v4[3] = sub_100003D3C(&qword_100113A68, type metadata accessor for TickerCellView, (uint64_t)&unk_1000E018C);
    v2 = type metadata accessor for TickerGrid(a1, (uint64_t)v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100113A58);
  }
}

void sub_10003B42C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113A70)
  {
    sub_10003C014(255, &qword_100113A78, (uint64_t (*)(uint64_t))sub_10003B498, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113A70);
  }
}

void sub_10003B498(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113A80)
  {
    sub_10002F488(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v3 = type metadata accessor for _ConditionalContent(a1, &type metadata for Spacer, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113A80);
  }
}

uint64_t sub_10003B514()
{
  return sub_100003D3C(&qword_100113A88, (uint64_t (*)(uint64_t))sub_10003B2CC, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

void sub_10003B530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113A90)
  {
    sub_10003B594(255, &qword_100113A98, (uint64_t (*)(uint64_t))sub_10003B610);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113A90);
  }
}

void sub_10003B594(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = a3(255);
    sub_1000143C4(255, (unint64_t *)&qword_100112B90, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    v7 = type metadata accessor for ModifiedContent(a1, v5, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_10003B610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100113AA0)
  {
    sub_10003B680(255, &qword_100113AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = v2;
    v4 = sub_10003B780();
    v5 = type metadata accessor for ZStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100113AA0);
  }
}

void sub_10003B680(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_10003B718(255, &qword_100113AB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v7 = v6;
    sub_10003C014(255, &qword_100113AB8, type metadata accessor for HeadlinesList, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_10003B718(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for HeadlineView(255);
    v7 = type metadata accessor for HeadlinesList(255);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_10003B780()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113AC0;
  if (!qword_100113AC0)
  {
    sub_10003B680(255, &qword_100113AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_10003B7F8();
    sub_10003B8A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113AC0);
  }
  return result;
}

unint64_t sub_10003B7F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113AC8;
  if (!qword_100113AC8)
  {
    sub_10003B718(255, &qword_100113AB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_100003D3C(&qword_100113AD0, type metadata accessor for HeadlineView, (uint64_t)&unk_1000E1F0C);
    sub_100003D3C(&qword_100113AD8, type metadata accessor for HeadlinesList, (uint64_t)&unk_1000E0BDC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113AC8);
  }
  return result;
}

unint64_t sub_10003B8A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113AE0;
  if (!qword_100113AE0)
  {
    sub_10003C014(255, &qword_100113AB8, type metadata accessor for HeadlinesList, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_100003D3C(&qword_100113AD8, type metadata accessor for HeadlinesList, (uint64_t)&unk_1000E0BDC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113AE0);
  }
  return result;
}

double sub_10003B938(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_10003B95C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v5, &protocol witness table for _VStackLayout);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10003B9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10001D724(0, &qword_100113A38, (uint64_t (*)(uint64_t))sub_10003B2CC, sub_10003B514, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003BA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10001D724(0, &qword_100113A38, (uint64_t (*)(uint64_t))sub_10003B2CC, sub_10003B514, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003BA80(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a4)
  {
    sub_1000144EC(result, a2, a3 & 1);
    swift_retain(a5);
    swift_bridgeObjectRetain(a4);
    sub_100038430(a6, a7, a8, a9, a10 & 1);
    swift_retain(a15);
    swift_retain(a16);
    swift_retain(a18);
    swift_retain(a11);
    return swift_retain(a14);
  }
  return result;
}

uint64_t sub_10003BB50(uint64_t a1)
{
  uint64_t v2;

  sub_10001D724(0, &qword_100113A38, (uint64_t (*)(uint64_t))sub_10003B2CC, sub_10003B514, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10003BBAC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t sub_10003BC18(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a4)
  {
    sub_100014490(result, a2, a3 & 1);
    swift_bridgeObjectRelease(a4);
    swift_release(a5);
    sub_100028060(a6, a7, a8, a9, a10 & 1);
    swift_release(a18);
    swift_release(a16);
    swift_release(a14);
    swift_release(a11);
    return swift_release(a15);
  }
  return result;
}

void sub_10003BCE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113AF0)
  {
    sub_10003B680(255, &qword_100113AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _ZStackLayout, v2, &protocol witness table for _ZStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113AF0);
  }
}

uint64_t sub_10003BD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000143C4(0, &qword_100113AF8, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Environment.Content);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003BDB8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10003BDF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10003BE08(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10003B594(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_10003BE64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10003BE74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 136);
  sub_1000144EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v3);
  swift_bridgeObjectRetain(v2);
  sub_100038430(v4, v5, v6, v7, v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  return a1;
}

uint64_t sub_10003BF44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_BYTE *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 136);
  sub_100014490(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  sub_100028060(v4, v5, v6, v7, v8);
  swift_release(v10);
  swift_release(v9);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  return a1;
}

void sub_10003C014(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, void *))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7, &type metadata for Never);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_10003C074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10003C014(0, &qword_100113AB8, type metadata accessor for HeadlinesList, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C0D0(uint64_t a1)
{
  uint64_t v2;

  sub_10003C014(0, &qword_100113AB8, type metadata accessor for HeadlinesList, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003C128()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10003C138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_10003C184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_10003C1C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113B20;
  if (!qword_100113B20)
  {
    sub_10002F488(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100113B20);
  }
  return result;
}

unint64_t sub_10003C240()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100113B28;
  if (!qword_100113B28)
  {
    sub_10003B498(255);
    v2 = v1;
    sub_10003C1C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113B28);
  }
  return result;
}

unint64_t sub_10003C2B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113B38;
  if (!qword_100113B38)
  {
    sub_10001D724(255, &qword_100113B40, (uint64_t (*)(uint64_t))sub_10003AF9C, sub_10003C31C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100113B38);
  }
  return result;
}

uint64_t sub_10003C31C()
{
  return sub_100003D3C(&qword_100113B48, (uint64_t (*)(uint64_t))sub_10003AF9C, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_10003C338@<X0>(uint64_t a1@<X8>)
{
  return sub_100038134(a1);
}

_BYTE *sub_10003C34C(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[4];
    *((_QWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 4) = v8;
    v9 = v4 + 40;
    v10 = a2 + 5;
    v11 = a2[8];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v11 == 1)
    {
      v12 = *(_OWORD *)(a2 + 7);
      *v9 = *v10;
      *(_OWORD *)(v4 + 56) = v12;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      v4[48] = *((_BYTE *)a2 + 48);
      *((_QWORD *)v4 + 7) = a2[7];
      *((_QWORD *)v4 + 8) = v11;
      swift_bridgeObjectRetain(v11);
    }
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)&v4[v14];
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v18 = v17;
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v19 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
      v20 = v15;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v16;
      *v15 = *v16;
      swift_retain(v23);
      v20 = v15;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  return v4;
}

uint64_t sub_10003C4AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = a1[8];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  v5 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v5, v6) != 1)
    return swift_release(*v5);
  v7 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
}

uint64_t sub_10003C550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = (_OWORD *)(a1 + 40);
  v9 = a2 + 40;
  v10 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v10 == 1)
  {
    v11 = *(_OWORD *)(v9 + 16);
    *v8 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 56) = v11;
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(v9 + 8);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v10;
    swift_bridgeObjectRetain(v10);
  }
  v12 = *(int *)(a3 + 28);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v16 = v15;
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v14, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v14;
    *v13 = *v14;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v16, v18);
  return a1;
}

uint64_t sub_10003C67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 40);
  v11 = (_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a2 + 64);
  if (v12 == 1)
  {
    if (v13 == 1)
    {
      v14 = *(_OWORD *)(a2 + 56);
      *v10 = *v11;
      *(_OWORD *)(a1 + 56) = v14;
      if (a1 == a2)
        return a1;
    }
    else
    {
      v16 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)v10 = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v17 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v17;
      swift_bridgeObjectRetain(v17);
      if (a1 == a2)
        return a1;
    }
  }
  else if (v13 == 1)
  {
    sub_10002304C(a1 + 40);
    v15 = *(_OWORD *)(a2 + 56);
    *v10 = *v11;
    *(_OWORD *)(a1 + 56) = v15;
    if (a1 == a2)
      return a1;
  }
  else
  {
    v18 = *(_QWORD *)v11;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)v10 = v18;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v19 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v12);
    if (a1 == a2)
      return a1;
  }
  v20 = *(int *)(a3 + 28);
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  sub_10002B1A4(a1 + v20);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v24 = v23;
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v25 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v21, v22, v25);
    v26 = 1;
  }
  else
  {
    v27 = *v22;
    *v21 = *v22;
    swift_retain(v27);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v24, v26);
  return a1;
}

uint64_t sub_10003C848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 28);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v8 = v7;
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v9 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload(v5, v8, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003C924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (_QWORD *)(a1 + 40);
  v11 = (_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 64);
  if (v12 != 1)
  {
    v13 = *(_QWORD *)(a2 + 64);
    if (v13 != 1)
    {
      *v10 = *v11;
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v13;
      swift_bridgeObjectRelease(v12);
      if (a1 == a2)
        return a1;
      goto LABEL_7;
    }
    sub_10002304C(a1 + 40);
  }
  v14 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 56) = v14;
  if (a1 == a2)
    return a1;
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  sub_10002B1A4(a1 + v15);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v19 = v18;
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v20 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload(v16, v19, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003CA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003CA84);
}

uint64_t sub_10003CA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_10003CB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003CB24);
}

uint64_t sub_10003CB24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LineTicker(uint64_t a1)
{
  uint64_t result;

  result = qword_100113BA8;
  if (!qword_100113BA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LineTicker);
  return result;
}

void sub_10003CBEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1000DD570;
  v4[1] = &unk_1000DD588;
  v4[2] = &unk_1000DD5A0;
  sub_10000EDE8(319, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_10003CC8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E87DC, 1);
}

uint64_t sub_10003CC9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003D488(0);
  v9 = v8;
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003D658(0);
  v36 = *(_QWORD *)(v12 - 8);
  v13 = v36;
  v37 = v12;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.firstTextBaseline.getter(v14);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  sub_10003D714(0);
  v18 = sub_10003CEB0((char *)v2, (uint64_t)&v11[*(int *)(v17 + 44)]);
  static AccessibilityChildBehavior.ignore.getter(v18);
  v19 = sub_10003D6CC();
  View.accessibilityElement(children:)(v7, v9, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10001DF70((uint64_t)v11, (uint64_t (*)(_QWORD))sub_10003D488);
  v20 = *(_QWORD *)(v2 + 8);
  v21 = *(_QWORD *)(v2 + 16);
  v22 = *(_QWORD *)(v2 + 32);
  v34 = *(_QWORD *)(v2 + 24);
  v35 = v20;
  v23 = *(_QWORD *)(v2 + 40);
  v24 = *(_QWORD *)(v2 + 48);
  v26 = *(_QWORD *)(v2 + 56);
  v25 = *(_QWORD *)(v2 + 64);
  LOBYTE(v2) = *(_BYTE *)v2;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
  v28 = a1;
  v29 = a1;
  v30 = v37;
  v27(v29, v16, v37);
  sub_10003D790(0, &qword_100113C30, (uint64_t (*)(uint64_t))sub_10003D658, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v32 = v28 + *(int *)(v31 + 36);
  *(_BYTE *)v32 = v2;
  *(_QWORD *)(v32 + 8) = v35;
  *(_QWORD *)(v32 + 16) = v21;
  *(_QWORD *)(v32 + 24) = v34;
  *(_QWORD *)(v32 + 32) = v22;
  *(_QWORD *)(v32 + 40) = v23;
  *(_QWORD *)(v32 + 48) = v24;
  *(_QWORD *)(v32 + 56) = v26;
  *(_QWORD *)(v32 + 64) = v25;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_100024540(v23, v24, v26, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v16, v30);
}

uint64_t sub_10003CEB0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *KeyPath;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = a2;
  v3 = type metadata accessor for Font.Leading(0);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  __chkstk_darwin(v3);
  v72 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  __chkstk_darwin(v5);
  v79 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v75 = (char *)&v71 - v8;
  v83 = type metadata accessor for StockPriceView(0);
  __chkstk_darwin(v83);
  v10 = (uint64_t *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10003D574(0);
  v85 = v11;
  __chkstk_darwin(v11);
  v87 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v84 = (uint64_t)&v71 - v14;
  __chkstk_darwin(v15);
  v86 = (uint64_t)&v71 - v16;
  v17 = (int *)type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v71 - v21;
  v23 = *a1;
  v24 = *((_QWORD *)a1 + 1);
  v25 = *((_QWORD *)a1 + 2);
  v27 = *((_QWORD *)a1 + 3);
  v26 = *((_QWORD *)a1 + 4);
  KeyPath = (char *)swift_getKeyPath(&unk_1000DD608);
  *v19 = v23;
  *((_QWORD *)v19 + 1) = v24;
  *((_QWORD *)v19 + 2) = v25;
  *((_QWORD *)v19 + 3) = v27;
  *((_QWORD *)v19 + 4) = v26;
  v28 = &v19[v17[6]];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_1000DD630);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v82 = v29;
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = &v19[v17[7]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1000DD660);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v32 = v31;
  v33 = v30;
  v34 = v75;
  swift_storeEnumTagMultiPayload(v33, v32, 0);
  v35 = &v19[v17[8]];
  *(_QWORD *)v35 = KeyPath;
  v35[8] = 0;
  KeyPath = v22;
  sub_10000ED3C((uint64_t)v19, (uint64_t)v22, type metadata accessor for SymbolTrendView);
  v36 = *((_QWORD *)a1 + 5);
  v37 = *((_QWORD *)a1 + 6);
  v38 = *((_QWORD *)a1 + 7);
  v39 = *((_QWORD *)a1 + 8);
  type metadata accessor for LineTicker(0);
  v40 = v25;
  v41 = v79;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v26);
  v76 = v37;
  v77 = v36;
  sub_100024540(v36, v37, v38, v39);
  sub_100045E2C(v34);
  v42 = v80;
  v43 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v41, v34, v81);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v41, v43);
  v45 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  if (v44 == enum case for WidgetFamily.accessoryCircular(_:)
    || v44 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v44 == enum case for WidgetFamily.accessoryInline(_:))
  {
    v53 = v45(v34, v43);
    v52 = static Font.body.getter(v53);
  }
  else
  {
    v45(v41, v43);
    v46 = v45(v34, v43);
    v47 = static Font.footnote.getter(v46);
    v48 = Font.bold()();
    swift_release(v47);
    v50 = v72;
    v49 = v73;
    v51 = v74;
    (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for Font.Leading.tight(_:), v74);
    v52 = Font.leading(_:)(v50, v48);
    swift_release(v48);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  }
  v54 = swift_getKeyPath(&unk_1000DD608);
  v55 = v76;
  *v10 = v77;
  v10[1] = v55;
  v10[2] = v38;
  v10[3] = v39;
  v10[4] = v52;
  v56 = v83;
  v57 = (uint64_t *)((char *)v10 + *(int *)(v83 + 24));
  *v57 = swift_getKeyPath(&unk_1000DD630);
  swift_storeEnumTagMultiPayload(v57, v82, 0);
  v58 = (char *)v10 + *(int *)(v56 + 28);
  *(_QWORD *)v58 = v54;
  v58[8] = 0;
  v59 = *(int *)(v56 + 32);
  if (qword_100111538 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v60 = static Settings.UserPreferences.showCurrency;
  sub_1000035F0();
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v62 = swift_retain(v60);
  *(uint64_t *)((char *)v10 + v59) = SettingProperty.init(_:)(v62);
  v63 = v84;
  sub_10001DE2C((uint64_t)v10, v84, type metadata accessor for StockPriceView);
  *(_QWORD *)(v63 + *(int *)(v85 + 36)) = 0x3FF0000000000000;
  sub_10001DF70((uint64_t)v10, type metadata accessor for StockPriceView);
  v64 = v86;
  sub_10000ED3C(v63, v86, (uint64_t (*)(_QWORD))sub_10003D574);
  v65 = (uint64_t)KeyPath;
  sub_10001DE2C((uint64_t)KeyPath, (uint64_t)v19, type metadata accessor for SymbolTrendView);
  v66 = v87;
  sub_10001DE2C(v64, v87, (uint64_t (*)(_QWORD))sub_10003D574);
  v67 = v88;
  sub_10001DE2C((uint64_t)v19, v88, type metadata accessor for SymbolTrendView);
  sub_10003D500(0);
  v69 = v67 + *(int *)(v68 + 48);
  *(_QWORD *)v69 = 0x4020000000000000;
  *(_BYTE *)(v69 + 8) = 0;
  sub_10001DE2C(v66, v67 + *(int *)(v68 + 64), (uint64_t (*)(_QWORD))sub_10003D574);
  sub_10001DF70(v64, (uint64_t (*)(_QWORD))sub_10003D574);
  sub_10001DF70(v65, type metadata accessor for SymbolTrendView);
  sub_10001DF70(v66, (uint64_t (*)(_QWORD))sub_10003D574);
  return sub_10001DF70((uint64_t)v19, type metadata accessor for SymbolTrendView);
}

void sub_10003D488(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100113BE8)
  {
    sub_10000EDE8(255, &qword_100113BF0, (uint64_t (*)(uint64_t))sub_10003D500, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_10003D5F8();
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100113BE8);
  }
}

void sub_10003D500(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!qword_100113BF8)
  {
    v2 = type metadata accessor for SymbolTrendView(255);
    sub_10003D574(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for Spacer, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100113BF8);
  }
}

void sub_10003D574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100113C00)
  {
    v2 = type metadata accessor for StockPriceView(255);
    sub_10003D790(255, (unint64_t *)&qword_100113C08, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutPriorityTraitKey, (uint64_t)&protocol witness table for LayoutPriorityTraitKey, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _TraitWritingModifier);
    v4 = type metadata accessor for ModifiedContent(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100113C00);
  }
}

unint64_t sub_10003D5F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113C10;
  if (!qword_100113C10)
  {
    sub_10000EDE8(255, &qword_100113BF0, (uint64_t (*)(uint64_t))sub_10003D500, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100113C10);
  }
  return result;
}

void sub_10003D658(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100113C18)
  {
    sub_10003D488(255);
    v5[0] = v2;
    v5[1] = sub_10003D6CC();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100113C18);
  }
}

unint64_t sub_10003D6CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113C20;
  if (!qword_100113C20)
  {
    sub_10003D488(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100113C20);
  }
  return result;
}

void sub_10003D714(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113C28)
  {
    sub_10000EDE8(255, &qword_100113BF0, (uint64_t (*)(uint64_t))sub_10003D500, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113C28);
  }
}

void sub_10003D790(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_10003D804()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100113C38;
  if (!qword_100113C38)
  {
    sub_10003D790(255, &qword_100113C30, (uint64_t (*)(uint64_t))sub_10003D658, (uint64_t)&type metadata for AccessibilitySimpleTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_10003D488(255);
    v4[0] = v3;
    v4[1] = sub_10003D6CC();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10003D8B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100113C38);
  }
  return result;
}

unint64_t sub_10003D8B0()
{
  unint64_t result;

  result = qword_100113C40;
  if (!qword_100113C40)
  {
    result = swift_getWitnessTable(&unk_1000E194C, &type metadata for AccessibilitySimpleTicker);
    atomic_store(result, (unint64_t *)&qword_100113C40);
  }
  return result;
}

uint64_t sub_10003D8F4(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  Class isa;
  id v14;
  uint64_t v15;
  uint64_t v17;

  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 1)
    return 0;
  v12 = *(void **)(v3 + 16);
  static Locale.current.getter(v9);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v14 = objc_msgSend(v12, "formattedCount:withLocale:longform:compactDisplay:", a1, isa, a2 & 1, a3 & 1);

  if (!v14)
    return 0;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

  return v15;
}

uint64_t sub_10003D9F8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for UnitNumberFormatter()
{
  return objc_opt_self(_TtC12StocksWidget19UnitNumberFormatter);
}

uint64_t sub_10003DA3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_10003FAA0(0, &qword_100113ED0, (uint64_t)&protocol descriptor for WatchlistManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v34)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_10003FAA0(0, &qword_100113ED8, (uint64_t)&protocol descriptor for WatchlistDeprecationServiceType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v32)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_100007184(a1, v11);
  v13 = sub_10003FAA0(0, &qword_100113EB8, (uint64_t)&protocol descriptor for StockPriceDataManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v30)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_100007184(a1, v14);
  v16 = sub_10003FAA0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (!v28)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v17 = a1[3];
  v18 = a1[4];
  sub_100007184(a1, v17);
  v19 = sub_10003FAA0(0, (unint64_t *)&unk_100113EE0, (uint64_t)&protocol descriptor for WatchlistSortingServiceType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v19, v17, v18);
  if (!v26)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v20 = type metadata accessor for WatchlistViewModelService(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = OBJC_IVAR____TtC12StocksWidget25WatchlistViewModelService_logger;
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100012524(v23, (uint64_t)qword_1001267E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21 + v22, v24, v23);
  sub_10001D968(&v33, v21 + 16);
  sub_10001D968(&v31, v21 + 56);
  sub_10001D968(&v29, v21 + 96);
  sub_10001D968(&v27, v21 + 136);
  result = sub_10001D968(&v25, v21 + 176);
  a2[3] = v20;
  a2[4] = (uint64_t)&off_100103DD8;
  *a2 = v21;
  return result;
}

uint64_t sub_10003DCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for DemoTimelineManager(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager_logger;
  if (qword_100111460 != -1)
    swift_once(&qword_100111460, sub_10002DEA8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100012524(v3, (uint64_t)qword_100126848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1 + v2, v4, v3);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager_stocksSuiteKey);
  *v5 = 0xD00000000000001CLL;
  v5[1] = 0x80000001000E5AD0;
  v6 = v1 + OBJC_IVAR____TtC12StocksWidget19DemoTimelineManager____lazy_storage___demoDirectory;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  return v1;
}

uint64_t sub_10003DDC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for NoopStocksIntentHandler();
  v3 = swift_allocObject(v2, 112, 15);
  swift_defaultActor_initialize();
  result = sub_100003D3C(&qword_100113EC8, (uint64_t (*)(uint64_t))type metadata accessor for NoopStocksIntentHandler, (uint64_t)&unk_1000DFD88);
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t sub_10003DE2C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_10003FAA0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v24)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_10003FAA0(0, &qword_100113EB8, (uint64_t)&protocol descriptor for StockPriceDataManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v22)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_100007184(a1, v11);
  v13 = sub_10003FAA0(0, &qword_100113EC0, (uint64_t)&protocol descriptor for StockMetadataManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v20)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v14 = type metadata accessor for TodayViewModelService(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = OBJC_IVAR____TtC12StocksWidget21TodayViewModelService_logger;
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100012524(v17, (uint64_t)qword_1001267E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15 + v16, v18, v17);
  sub_10001D968(&v23, v15 + 16);
  sub_10001D968(&v21, v15 + 56);
  result = sub_10001D968(&v19, v15 + 96);
  a2[3] = v14;
  a2[4] = (uint64_t)&off_100108A98;
  *a2 = v15;
  return result;
}

uint64_t sub_10003E004@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  sub_100007184(a1, v3);
  v5 = sub_10003FAA0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v10)
  {
    v7 = type metadata accessor for ReloadPolicyProvider();
    v8 = swift_allocObject(v7, 56, 7);
    result = sub_10001D968(&v9, v8 + 16);
    a2[3] = v7;
    a2[4] = (uint64_t)&off_100109FA0;
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003E0B4@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_10003FAA0(0, &qword_100113EA8, (uint64_t)&protocol descriptor for StockFeedServiceType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v41)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_10003FAA0(0, &qword_100113EB0, (uint64_t)&protocol descriptor for NewsUserProfileProviderType, 0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  v11 = v38;
  if (!v38)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = v39;
  v13 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v13);
  v15 = sub_10003FAA0(0, &qword_100113E90, (uint64_t)&protocol descriptor for FeatureAvailabilityType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
  if (!v37)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v16 = a1[3];
  v17 = a1[4];
  sub_100007184(a1, v16);
  v18 = sub_10003FAA0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  v19 = v34;
  if (!v34)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v20 = v35;
  sub_100007184(v33, v34);
  KeyPath = swift_getKeyPath(&unk_1000DD710);
  v22 = dispatch thunk of AppConfigurationManagerType.accessor<A>(for:)(KeyPath, &type metadata for Double, v19, v20);
  swift_release(KeyPath);
  v23 = a1[3];
  v24 = a1[4];
  sub_100007184(a1, v23);
  v25 = sub_10003FAA0(0, &qword_100113DC0, (uint64_t)&protocol descriptor for MandatoryHeadlineServiceType, 0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v25, v25, v23, v24);
  if (!v31)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v26 = type metadata accessor for HeadlineViewModelService(0);
  v27 = (char *)swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v28 = OBJC_IVAR____TtC12StocksWidget24HeadlineViewModelService_logger;
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100012524(v29, (uint64_t)qword_1001267E8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(&v27[v28], v30, v29);
  sub_10001D968(&v40, (uint64_t)(v27 + 16));
  *((_QWORD *)v27 + 7) = v11;
  *((_QWORD *)v27 + 8) = v12;
  sub_10001D968(&v36, (uint64_t)(v27 + 72));
  *((_QWORD *)v27 + 14) = v22;
  *((_QWORD *)v27 + 15) = v31;
  *((_QWORD *)v27 + 16) = v32;
  result = sub_100007164(v33);
  a2[3] = (char *)v26;
  a2[4] = (char *)&off_100103EB8;
  *a2 = v27;
  return result;
}

_QWORD *sub_10003E390@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  v2 = type metadata accessor for QuoteDetailItemFactory();
  swift_allocObject(v2, 40, 7);
  result = sub_10008FA3C();
  a1[3] = v2;
  a1[4] = &off_100107EC8;
  *a1 = result;
  return result;
}

uint64_t sub_10003E3E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  __int128 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;

  sub_10003FA24(0);
  __chkstk_darwin(v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100007184(a1, v7);
  v9 = type metadata accessor for Locale(0);
  dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v16 = &type metadata for SystemTheme;
    v17 = &off_100106DA8;
    v12 = type metadata accessor for BaseStyler(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v13 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_locale, v6, v9);
    sub_1000A3C50((uint64_t)&v15, 0, 2u, (uint64_t *)v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
    sub_10001D968(v14, v13 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_theme);
    result = sub_10001D968(&v15, v13 + OBJC_IVAR____TtC12StocksWidget10BaseStyler_systemTheme);
    a2[3] = v12;
    a2[4] = (uint64_t)&off_1001051B0;
    *a2 = v13;
  }
  return result;
}

uint64_t sub_10003E558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v5 = RegistrationContainer.register<A>(_:name:factory:)(v4, 0, 0, j___s10Foundation6LocaleV7currentACvgZ, 0, v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Scope.singleton(_:), v0);
  v6 = Definition.inScope(_:)(v3);
  swift_release(v6);
  swift_release(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

char *sub_10003E624@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_10003FAA0(0, &qword_100113E90, (uint64_t)&protocol descriptor for FeatureAvailabilityType, 1);
  result = (char *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v25)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_10003FAA0(0, &qword_100113DC0, (uint64_t)&protocol descriptor for MandatoryHeadlineServiceType, 0);
  result = (char *)dispatch thunk of ResolverType.resolve<A>(_:name:)(v23, v10, 0x69726F7453706F54, 0xEA00000000007365, v10, v8, v9);
  v11 = v23[0];
  if (!v23[0])
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = v23[1];
  v13 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v13);
  result = (char *)dispatch thunk of ResolverType.resolve<A>(_:name:)(v22, v10, 0x6F43746567646957, 0xEC0000006769666ELL, v10, v13, v14);
  v15 = v22[0];
  if (!v22[0])
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v16 = v22[1];
  v17 = type metadata accessor for MandatoryHeadlineService(0);
  v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  swift_defaultActor_initialize();
  v19 = OBJC_IVAR____TtC12StocksWidget24MandatoryHeadlineService_logger;
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100012524(v20, (uint64_t)qword_1001267E8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(&v18[v19], v21, v20);
  sub_10001D968(&v24, (uint64_t)(v18 + 112));
  *((_QWORD *)v18 + 19) = v11;
  *((_QWORD *)v18 + 20) = v12;
  *((_QWORD *)v18 + 21) = v15;
  *((_QWORD *)v18 + 22) = v16;
  result = (char *)sub_100003D3C(&qword_100113E98, type metadata accessor for MandatoryHeadlineService, (uint64_t)&unk_1000DFF90);
  *a2 = v18;
  a2[1] = result;
  return result;
}

uint64_t sub_10003E82C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v3 = a1[3];
  v4 = a1[4];
  sub_100007184(a1, v3);
  v5 = sub_10003FAA0(0, &qword_100113E80, (uint64_t)&protocol descriptor for TopStoriesServiceType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (v13)
  {
    v7 = type metadata accessor for TopStoriesMandatoryHeadlineService(0);
    v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    swift_defaultActor_initialize();
    v9 = OBJC_IVAR____TtC12StocksWidget34TopStoriesMandatoryHeadlineService_logger;
    if (qword_100111440 != -1)
      swift_once(&qword_100111440, sub_10002DE10);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100012524(v10, (uint64_t)qword_1001267E8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8 + v9, v11, v10);
    sub_10001D968(&v12, v8 + 112);
    result = sub_100003D3C(&qword_100113E88, type metadata accessor for TopStoriesMandatoryHeadlineService, (uint64_t)&unk_1000DFF4C);
    *a2 = v8;
    a2[1] = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003E950@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_10003FAA0(0, &qword_100113DC8, (uint64_t)&protocol descriptor for WidgetSectionConfigRecordServiceType, 0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v24)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v25;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_10003FAA0(0, &qword_100113E68, (uint64_t)&protocol descriptor for NewsHeadlineServiceType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v23)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_100007184(a1, v12);
  v14 = sub_10003FAA0(0, &qword_100113E70, (uint64_t)&protocol descriptor for FeedLookupServiceType, 1);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!v21)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v15 = type metadata accessor for WidgetConfigMandatoryHeadlineService(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  swift_defaultActor_initialize();
  v17 = OBJC_IVAR____TtC12StocksWidget36WidgetConfigMandatoryHeadlineService_logger;
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100012524(v18, (uint64_t)qword_1001267E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16 + v17, v19, v18);
  *(_QWORD *)(v16 + 112) = v24;
  *(_QWORD *)(v16 + 120) = v8;
  sub_10001D968(&v22, v16 + 128);
  sub_10001D968(&v20, v16 + 168);
  result = sub_100003D3C(&qword_100113E78, type metadata accessor for WidgetConfigMandatoryHeadlineService, (uint64_t)&unk_1000DFF08);
  *a2 = v16;
  a2[1] = result;
  return result;
}

uint64_t sub_10003EB3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_10003F97C(0, &qword_100113DD8, &protocolRef_FCJSONRecordTreeSourceType);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v6, 0xD000000000000019, 0x80000001000E5AB0, v6, v4, v5);
  if (result)
  {
    v8 = result;
    v9 = a1[3];
    v10 = a1[4];
    sub_100007184(a1, v9);
    v11 = sub_10003FAA0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType, 1);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
    if (v15)
    {
      v12 = type metadata accessor for WidgetSectionConfigRecordService();
      v13 = swift_allocObject(v12, 160, 15);
      swift_defaultActor_initialize();
      *(_QWORD *)(v13 + 112) = v8;
      sub_10001D968(&v14, v13 + 120);
      result = sub_100003D3C(&qword_100113E60, (uint64_t (*)(uint64_t))type metadata accessor for WidgetSectionConfigRecordService, (uint64_t)&unk_1000DF8C0);
      *a2 = v13;
      a2[1] = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003EC70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;

  v2 = a1[3];
  v3 = a1[4];
  sub_100007184(a1, v2);
  v4 = sub_10003F97C(0, &qword_100113E48, &protocolRef_FCContentContext);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = (void *)result;
    v7 = a1[3];
    v8 = a1[4];
    sub_100007184(a1, v7);
    v9 = sub_10003F940();
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v9, 0xD000000000000019, 0x80000001000E5AB0, v9, v7, v8);
    if (result)
    {
      v10 = (void *)result;
      v11 = objc_msgSend(v6, "recordSourceWithSchema:", result);
      swift_unknownObjectRelease(v6);

      return (uint64_t)v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003ED60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  id v14;
  uint64_t v15;

  v2 = a1[3];
  v3 = a1[4];
  sub_100007184(a1, v2);
  v4 = sub_10003F97C(0, &qword_100113E48, &protocolRef_FCContentContext);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = (void *)result;
    v7 = a1[3];
    v8 = a1[4];
    sub_100007184(a1, v7);
    v9 = sub_10003F97C(0, &qword_100113DD0, &protocolRef_FCJSONRecordSourceType);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v9, 0xD000000000000019, 0x80000001000E5AB0, v9, v7, v8);
    if (result)
    {
      v10 = result;
      sub_10003F9CC();
      v12 = swift_allocObject(v11, 40, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1000DD6C0;
      *(_QWORD *)(v12 + 32) = v10;
      v15 = v12;
      specialized Array._endMutation()();
      swift_unknownObjectRetain(v10);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15);
      v14 = objc_msgSend(v6, "recordTreeSourceWithRecordSources:", isa);
      swift_unknownObjectRelease(v6);
      swift_unknownObjectRelease(v10);

      return (uint64_t)v14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_10003EEC8()
{
  id v0;
  NSString v1;
  NSString v2;
  Class isa;
  Class v4;
  id v5;

  v0 = objc_allocWithZone((Class)FCJSONRecordSourceSchema);
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = Array._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v0, "initWithRecordType:recordIDPrefix:keys:localizableKeys:", v1, v2, isa, v4);

  return v5;
}

uint64_t sub_10003EF9C()
{
  uint64_t v0;

  v0 = type metadata accessor for WidgetTerminationService();
  swift_allocObject(v0, 24, 7);
  return sub_1000B7EF0();
}

uint64_t sub_10003EFD0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a2[3];
  v3 = a2[4];
  sub_100007184(a2, v2);
  v4 = type metadata accessor for WidgetTerminationService();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
    return swift_release(result);
  __break(1u);
  return result;
}

uint64_t sub_10003F024()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for StocksWidgetAssembly()
{
  return objc_opt_self(_TtC12StocksWidget20StocksWidgetAssembly);
}

uint64_t sub_10003F058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  uint64_t v97;
  uint64_t v98;

  v0 = type metadata accessor for CallbackScope(0);
  v94 = *(_QWORD *)(v0 - 8);
  v95 = v0;
  __chkstk_darwin(v0);
  v93 = (char *)&v93 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Scope(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ProxyContainer.public.getter(v4);
  v8 = sub_10003FAA0(0, &qword_100113D88, (uint64_t)&protocol descriptor for WatchlistViewModelServiceType, 1);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_10003DA3C, 0, v8);
  swift_release(v7);
  v10 = enum case for Scope.singleton(_:);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Scope.singleton(_:), v2);
  v12 = Definition.inScope(_:)(v6);
  swift_release(v12);
  swift_release(v9);
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v15 = ProxyContainer.public.getter(v14);
  v16 = type metadata accessor for DemoTimelineManager(0);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_10003DCCC, 0, v16);
  swift_release(v15);
  v11(v6, v10, v2);
  v18 = Definition.inScope(_:)(v6);
  swift_release(v18);
  swift_release(v17);
  v13(v6, v2);
  v20 = ProxyContainer.public.getter(v19);
  v21 = sub_10003FAA0(0, (unint64_t *)&unk_100113D90, (uint64_t)&protocol descriptor for StocksIntentHandlerType, 0);
  v22 = RegistrationContainer.register<A>(_:name:factory:)(v21, 0, 0, sub_10003DDC8, 0, v21);
  swift_release(v20);
  v11(v6, v10, v2);
  v23 = Definition.inScope(_:)(v6);
  swift_release(v23);
  swift_release(v22);
  v13(v6, v2);
  v25 = ProxyContainer.public.getter(v24);
  v26 = sub_10003FAA0(0, &qword_100112738, (uint64_t)&protocol descriptor for TodayViewModelServiceType, 1);
  v27 = RegistrationContainer.register<A>(_:name:factory:)(v26, 0, 0, sub_10003DE2C, 0, v26);
  swift_release(v25);
  v11(v6, v10, v2);
  v28 = Definition.inScope(_:)(v6);
  swift_release(v28);
  swift_release(v27);
  v13(v6, v2);
  v30 = ProxyContainer.public.getter(v29);
  v31 = sub_10003FAA0(0, (unint64_t *)&unk_100113DA0, (uint64_t)&protocol descriptor for ReloadPolicyProviderType, 1);
  v32 = RegistrationContainer.register<A>(_:name:factory:)(v31, 0, 0, sub_10003E004, 0, v31);
  swift_release(v30);
  v11(v6, v10, v2);
  v33 = Definition.inScope(_:)(v6);
  swift_release(v33);
  swift_release(v32);
  v13(v6, v2);
  v35 = ProxyContainer.public.getter(v34);
  v36 = sub_10003FAA0(0, &qword_100112790, (uint64_t)&protocol descriptor for HeadlineViewModelServiceType, 1);
  v37 = RegistrationContainer.register<A>(_:name:factory:)(v36, 0, 0, sub_10003E0B4, 0, v36);
  swift_release(v37);
  swift_release(v35);
  v39 = ProxyContainer.public.getter(v38);
  v40 = sub_10003FAA0(0, (unint64_t *)&unk_100113DB0, (uint64_t)&protocol descriptor for QuoteDetailItemFactoryType, 1);
  v41 = RegistrationContainer.register<A>(_:name:factory:)(v40, 0, 0, sub_10003E390, 0, v40);
  swift_release(v39);
  v11(v6, v10, v2);
  v42 = Definition.inScope(_:)(v6);
  swift_release(v42);
  swift_release(v41);
  v13(v6, v2);
  v44 = ProxyContainer.public.getter(v43);
  v45 = sub_10003FAA0(0, (unint64_t *)&qword_100112E48, (uint64_t)&protocol descriptor for BaseStylerType, 1);
  v46 = RegistrationContainer.register<A>(_:name:factory:)(v45, 0, 0, sub_10003E3E4, 0, v45);
  swift_release(v46);
  v47 = swift_release(v44);
  v48 = ProxyContainer.private.getter(v47);
  RegistrationContainer.lazy(block:)(sub_10003E558, 0);
  v49 = swift_release(v48);
  v50 = ProxyContainer.private.getter(v49);
  v51 = sub_10003FAA0(0, &qword_100113DC0, (uint64_t)&protocol descriptor for MandatoryHeadlineServiceType, 0);
  v52 = RegistrationContainer.register<A>(_:name:factory:)(v51, 0, 0, sub_10003E624, 0, v51);
  swift_release(v50);
  v11(v6, v10, v2);
  v53 = Definition.inScope(_:)(v6);
  swift_release(v53);
  swift_release(v52);
  v54 = ((uint64_t (*)(char *, uint64_t))v13)(v6, v2);
  v55 = ProxyContainer.private.getter(v54);
  v56 = RegistrationContainer.register<A>(_:name:factory:)(v51, 0x69726F7453706F54, 0xEA00000000007365, sub_10003E82C, 0, v51);
  swift_release(v55);
  v11(v6, v10, v2);
  v57 = Definition.inScope(_:)(v6);
  swift_release(v57);
  swift_release(v56);
  v58 = ((uint64_t (*)(char *, uint64_t))v13)(v6, v2);
  v59 = ProxyContainer.private.getter(v58);
  v60 = RegistrationContainer.register<A>(_:name:factory:)(v51, 0x6F43746567646957, 0xEC0000006769666ELL, sub_10003E950, 0, v51);
  swift_release(v59);
  v11(v6, v10, v2);
  v61 = Definition.inScope(_:)(v6);
  swift_release(v61);
  swift_release(v60);
  v62 = ((uint64_t (*)(char *, uint64_t))v13)(v6, v2);
  v63 = ProxyContainer.private.getter(v62);
  v64 = sub_10003FAA0(0, &qword_100113DC8, (uint64_t)&protocol descriptor for WidgetSectionConfigRecordServiceType, 0);
  v65 = RegistrationContainer.register<A>(_:name:factory:)(v64, 0, 0, sub_10003EB3C, 0, v64);
  swift_release(v63);
  v11(v6, v10, v2);
  v66 = Definition.inScope(_:)(v6);
  swift_release(v66);
  swift_release(v65);
  v67 = ((uint64_t (*)(char *, uint64_t))v13)(v6, v2);
  v68 = ProxyContainer.private.getter(v67);
  v69 = sub_10003F97C(0, &qword_100113DD0, &protocolRef_FCJSONRecordSourceType);
  v70 = RegistrationContainer.register<A>(_:name:factory:)(v69, 0xD000000000000019, 0x80000001000E5AB0, sub_10003EC70, 0, v69);
  swift_release(v68);
  v11(v6, v10, v2);
  v71 = Definition.inScope(_:)(v6);
  swift_release(v71);
  swift_release(v70);
  v13(v6, v2);
  v73 = ProxyContainer.public.getter(v72);
  v74 = sub_10003F97C(0, &qword_100113DD8, &protocolRef_FCJSONRecordTreeSourceType);
  v75 = RegistrationContainer.register<A>(_:name:factory:)(v74, 0xD000000000000019, 0x80000001000E5AB0, sub_10003ED60, 0, v74);
  swift_release(v73);
  v11(v6, v10, v2);
  v76 = Definition.inScope(_:)(v6);
  swift_release(v76);
  swift_release(v75);
  v77 = ((uint64_t (*)(char *, uint64_t))v13)(v6, v2);
  v78 = ProxyContainer.private.getter(v77);
  v79 = sub_10003F940();
  v80 = RegistrationContainer.register<A>(_:name:factory:)(v79, 0xD000000000000019, 0x80000001000E5AB0, sub_10003EEC8, 0, v79);
  swift_release(v80);
  v81 = swift_release(v78);
  v82 = ProxyContainer.private.getter(v81);
  v83 = type metadata accessor for WidgetTerminationService();
  v84 = RegistrationContainer.register<A>(_:name:factory:)(v83, 0, 0, sub_10003EF9C, 0, v83);
  swift_release(v82);
  v11(v6, v10, v2);
  v85 = Definition.inScope(_:)(v6);
  swift_release(v85);
  swift_release(v84);
  v86 = ((uint64_t (*)(char *, uint64_t))v13)(v6, v2);
  ProxyContainer.callback.getter(v96, v86);
  v87 = v97;
  v88 = v98;
  sub_100007184(v96, v97);
  v90 = v93;
  v89 = v94;
  v91 = v95;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for CallbackScope.any(_:), v95);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v8, v90, sub_10003EFD0, 0, v8, v87, v88);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
  return sub_100007164(v96);
}

unint64_t sub_10003F940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113E40;
  if (!qword_100113E40)
  {
    v1 = objc_opt_self(FCJSONRecordSourceSchema);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100113E40);
  }
  return result;
}

uint64_t sub_10003F97C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = *a3 | 1;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_10003F9CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100113E50)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, (char *)&type metadata for Swift.AnyObject + 8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100113E50);
  }
}

void sub_10003FA24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113EA0)
  {
    v2 = type metadata accessor for Locale(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113EA0);
  }
}

void sub_10003FA78(double *a1@<X8>)
{
  *a1 = AppConfiguration.widgetHeadlinesFetchMultiplier.getter();
}

uint64_t sub_10003FAA0(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a2;
  if (!*a2)
  {
    v6 = a3;
    result = swift_getExistentialTypeMetadata(a4 & 1, 0, 1, &v6);
    atomic_store(result, a2);
  }
  return result;
}

StocksWidget::MarketOpenState_optional __swiftcall MarketOpenState.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  StocksWidget::MarketOpenState_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103760, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = StocksWidget_MarketOpenState_closed;
  else
    v4.value = StocksWidget_MarketOpenState_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t MarketOpenState.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6465736F6C63;
  else
    return 1852141679;
}

uint64_t sub_10003FB68(char *a1, char *a2)
{
  return sub_1000A3B08(*a1, *a2);
}

Swift::Int sub_10003FB74()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6465736F6C63;
  else
    v2 = 1852141679;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10003FBE8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6465736F6C63;
  else
    v2 = 1852141679;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10003FC38(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6465736F6C63;
  else
    v3 = 1852141679;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003FCA8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103760, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10003FD04(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1852141679;
  if (*v1)
    v2 = 0x6465736F6C63;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10003FD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100040EC0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003FD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100040EC0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10003FDE0()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for PriceChangeFormatter();
  result = swift_initStaticObject(v0, &unk_1001115E8);
  qword_100126880 = result;
  return result;
}

uint64_t sub_10003FE0C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for PercentChangeFormatter();
  result = swift_initStaticObject(v0, &unk_100111600);
  qword_100126888 = result;
  return result;
}

id sub_10003FE38()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v0 = type metadata accessor for UnitNumberFormatter();
  v1 = swift_allocObject(v0, 24, 7);
  result = objc_msgSend(objc_allocWithZone((Class)SCICUNumberFormatter), "init");
  *(_QWORD *)(v1 + 16) = result;
  qword_100126890 = v1;
  return result;
}

uint64_t StockType.shouldShowCurrencySymbol.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for StockType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 != enum case for StockType.unknown(_:)
    && v6 != enum case for StockType.currency(_:)
    && v6 != enum case for StockType.cryptocurrency(_:)
    && v6 != enum case for StockType.equity(_:)
    && v6 != enum case for StockType.etf(_:)
    && v6 != enum case for StockType.futures(_:))
  {
    if (v6 == enum case for StockType.index(_:))
      return 0;
    if (v6 != enum case for StockType.mutualFund(_:))
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 1;
}

unint64_t sub_10003FFBC()
{
  unint64_t result;

  result = qword_100113EF0;
  if (!qword_100113EF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarketOpenState, &type metadata for MarketOpenState);
    atomic_store(result, (unint64_t *)&qword_100113EF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MarketOpenState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004004C + 4 * byte_1000DD745[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100040080 + 4 * byte_1000DD740[v4]))();
}

uint64_t sub_100040080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100040090);
  return result;
}

uint64_t sub_10004009C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000400A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000400A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000400B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MarketOpenState()
{
  return &type metadata for MarketOpenState;
}

uint64_t sub_1000400CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000400FC + 4 * byte_1000DD74A[a1]))(0x6563697270, 0xE500000000000000);
}

uint64_t sub_1000400FC()
{
  return 0x6168436563697270;
}

unint64_t sub_10004011C()
{
  return 0xD000000000000014;
}

uint64_t sub_100040138()
{
  return 0x79636E6572727563;
}

uint64_t sub_100040158()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_100040178()
{
  return 0x704F74656B72616DLL;
}

uint64_t sub_10004019C()
{
  return 0x7079546B636F7473;
}

uint64_t sub_1000401B8()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_1000401CC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v3 = v1;
  sub_1000416F0(0, &qword_100113FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_100041668();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PriceViewModel.CodingKeys, &type metadata for PriceViewModel.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = *((unsigned __int8 *)v3 + 8);
  v40 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v40, v6);
  if (!v2)
  {
    v15 = v3[2];
    v16 = *((unsigned __int8 *)v3 + 24);
    v39 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v39, v6);
    v17 = v3[4];
    v18 = *((unsigned __int8 *)v3 + 40);
    v38 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v38, v6);
    v19 = v3[6];
    v20 = v3[7];
    v37 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v37, v6);
    v21 = v3[8];
    v22 = v3[9];
    v36 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v36, v6);
    v35 = *((_BYTE *)v3 + 80);
    v34 = 5;
    v23 = sub_10004174C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v6, &type metadata for MarketOpenState, v23);
    v24 = type metadata accessor for PriceViewModel(0);
    v25 = (uint64_t)v3 + *(int *)(v24 + 40);
    v33 = 6;
    v26 = type metadata accessor for StockType(0);
    v27 = sub_100003D3C(&qword_100113FE0, (uint64_t (*)(uint64_t))&type metadata accessor for StockType, (uint64_t)&protocol conformance descriptor for StockType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v33, v6, v26, v27);
    v28 = (uint64_t)v3 + *(int *)(v24 + 44);
    HIBYTE(v32) = 7;
    v29 = type metadata accessor for Locale(0);
    v30 = sub_100003D3C(&qword_100113FE8, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, (char *)&v32 + 7, v6, v29, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100040478@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;

  v40 = a2;
  v41 = type metadata accessor for Locale(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v42 = (_QWORD *)((char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = type metadata accessor for StockType(0);
  v4 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000416F0(0, &qword_100113FA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v45 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v38 - v9;
  v11 = type metadata accessor for PriceViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  v46 = a1;
  sub_100007184(a1, v15);
  v16 = sub_100041668();
  v44 = v10;
  v17 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PriceViewModel.CodingKeys, &type metadata for PriceViewModel.CodingKeys, v16, v15, v14);
  if (v17)
    return sub_100007164(v46);
  v18 = v6;
  v47 = v11;
  v19 = v8;
  v20 = v43;
  BYTE5(v51) = 0;
  v21 = v45;
  v22 = (uint64_t)v13;
  *(_QWORD *)v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v51 + 5, v45);
  v13[8] = v23 & 1;
  BYTE4(v51) = 1;
  *((_QWORD *)v13 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v51 + 4, v21);
  v13[24] = v24 & 1;
  BYTE3(v51) = 2;
  *((_QWORD *)v13 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v51 + 3, v21);
  v13[40] = v25 & 1;
  BYTE2(v51) = 3;
  *((_QWORD *)v13 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v51 + 2, v21);
  *((_QWORD *)v13 + 7) = v26;
  BYTE1(v51) = 4;
  *((_QWORD *)v13 + 8) = KeyedDecodingContainer.decode(_:forKey:)((char *)&v51 + 1, v21);
  *((_QWORD *)v13 + 9) = v27;
  v50 = 5;
  v28 = sub_1000416AC();
  v38[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for MarketOpenState, &v50, v21, &type metadata for MarketOpenState, v28);
  v13[80] = v51;
  v49 = 6;
  v29 = sub_100003D3C(&qword_100113FC0, (uint64_t (*)(uint64_t))&type metadata accessor for StockType, (uint64_t)&protocol conformance descriptor for StockType);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v20, &v49, v21, v20, v29);
  v30 = v18;
  v31 = v47;
  (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 32))(&v13[*(int *)(v47 + 40)], v30, v20);
  v48 = 7;
  v32 = sub_100003D3C(&qword_100113FC8, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
  v33 = v42;
  v34 = v21;
  v35 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v41, &v48, v34, v41, v32);
  v36 = v46;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v44, v45);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v39 + 32))(v22 + *(int *)(v31 + 44), v33, v35);
  sub_100040E40(v22, v40);
  sub_100007164(v36);
  return sub_100040E84(v22);
}

uint64_t sub_1000408E4()
{
  unsigned __int8 *v0;

  return sub_1000400CC(*v0);
}

uint64_t sub_1000408EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000419C4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100040910(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10004091C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100041668();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100041668();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004096C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100040478(a1, a2);
}

uint64_t sub_100040980(_QWORD *a1)
{
  return sub_1000401CC(a1);
}

uint64_t sub_100040998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  objc_class *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSBundle v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  unint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for PriceChangeDisplay(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, v1, v2, v4);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == enum case for PriceChangeDisplay.currency(_:) || v7 == enum case for PriceChangeDisplay.percentage(_:))
  {
    v9 = type metadata accessor for Localized();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
    v11 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v12 = 0xD00000000000002FLL;
    v22 = 0x80000001000E5B40;
    v13 = 0x65676E616863;
    v14 = 0xE600000000000000;
    v15.super.isa = v11;
    v16 = 0;
    v17 = 0xE000000000000000;
  }
  else
  {
    if (v7 != enum case for PriceChangeDisplay.marketCapitalization(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      return 0;
    }
    v18 = type metadata accessor for Localized();
    v19 = swift_getObjCClassFromMetadata(v18);
    v11 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v19);
    v22 = 0x80000001000E5B10;
    v13 = 0x632074656B72616DLL;
    v14 = 0xEA00000000007061;
    v15.super.isa = v11;
    v16 = 0;
    v17 = 0xE000000000000000;
    v12 = 0xD00000000000002DLL;
  }
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v13, (Swift::String_optional)0, v15, *(Swift::String *)&v16, *(Swift::String *)&v12)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100040B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v18;
  double v19;
  double v20;
  char v21;
  double v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v4 = type metadata accessor for PriceViewModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - v8;
  __chkstk_darwin(v10);
  v12 = (double *)((char *)&v28 - v11);
  __chkstk_darwin(v13);
  v15 = (double *)((char *)&v28 - v14);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    {
      sub_100040E40(a1, (uint64_t)&v28 - v14);
      sub_100040E40(a2, (uint64_t)v12);
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
LABEL_5:
    sub_100040E40(a1, (uint64_t)&v28 - v14);
    sub_100040E40(a2, (uint64_t)v12);
LABEL_6:
    sub_100040E84((uint64_t)v12);
    sub_100040E84((uint64_t)v15);
    goto LABEL_7;
  }
  v18 = *(double *)a1;
  v19 = *(double *)a2;
  sub_100040E40(a1, (uint64_t)&v28 - v14);
  sub_100040E40(a2, (uint64_t)v12);
  if (v18 != v19)
    goto LABEL_6;
LABEL_12:
  v20 = v15[2];
  v21 = *((_BYTE *)v15 + 24);
  sub_100040E84((uint64_t)v15);
  v22 = v12[2];
  v23 = *((_BYTE *)v12 + 24);
  sub_100040E84((uint64_t)v12);
  if ((v21 & 1) != 0)
  {
    if ((v23 & 1) != 0)
    {
      sub_100040E40(a1, (uint64_t)v9);
      sub_100040E40(a2, (uint64_t)v6);
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if ((v23 & 1) != 0)
  {
LABEL_7:
    sub_100040E40(a1, (uint64_t)v9);
    sub_100040E40(a2, (uint64_t)v6);
LABEL_8:
    sub_100040E84((uint64_t)v6);
    sub_100040E84((uint64_t)v9);
LABEL_9:
    LOBYTE(v16) = 0;
    return v16 & 1;
  }
  sub_100040E40(a1, (uint64_t)v9);
  sub_100040E40(a2, (uint64_t)v6);
  if (v20 != v22)
    goto LABEL_8;
LABEL_17:
  v24 = *((_QWORD *)v9 + 7);
  v16 = *((_QWORD *)v6 + 7);
  if (!v24)
  {
    swift_bridgeObjectRetain(*((_QWORD *)v6 + 7));
    sub_100040E84((uint64_t)v6);
    sub_100040E84((uint64_t)v9);
    if (!v16)
    {
      LOBYTE(v16) = 1;
      return v16 & 1;
    }
    swift_bridgeObjectRelease(v16);
    goto LABEL_9;
  }
  if (v16)
  {
    v25 = *((_QWORD *)v9 + 6);
    v26 = *((_QWORD *)v6 + 6);
    if (v25 == v26 && v24 == v16)
      LOBYTE(v16) = 1;
    else
      LOBYTE(v16) = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((_QWORD *)v9 + 7), v26, *((_QWORD *)v6 + 7), 0);
  }
  swift_bridgeObjectRetain(v24);
  sub_100040E84((uint64_t)v6);
  sub_100040E84((uint64_t)v9);
  swift_bridgeObjectRelease(v24);
  return v16 & 1;
}

uint64_t type metadata accessor for PriceViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100113F58;
  if (!qword_100113F58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PriceViewModel);
  return result;
}

uint64_t sub_100040E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PriceViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040E84(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PriceViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100040EC0()
{
  unint64_t result;

  result = qword_100113EF8;
  if (!qword_100113EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarketOpenState, &type metadata for MarketOpenState);
    atomic_store(result, (unint64_t *)&qword_100113EF8);
  }
  return result;
}

_QWORD *sub_100040F04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v7 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    v8 = a2[8];
    v9 = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v10 = *(int *)(a3 + 40);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v9;
    v13 = type metadata accessor for StockType(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 44);
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for Locale(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v4;
}

uint64_t sub_10004102C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for StockType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 44);
  v7 = type metadata accessor for Locale(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_1000410A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(int *)(a3 + 40);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  v12 = type metadata accessor for StockType(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  v14 = *(int *)(a3 + 44);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t sub_1000411A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = a2[6];
  v9 = a2[7];
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 64) = a2[8];
  v11 = a2[9];
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v13 = *(int *)(a3 + 40);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v16 = type metadata accessor for StockType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = *(int *)(a3 + 44);
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000412AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v11 = type metadata accessor for StockType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(a3 + 44);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  return a1;
}

uint64_t sub_10004137C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for StockType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(a3 + 44);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_100041464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100041470);
}

uint64_t sub_100041470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for StockType(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = type metadata accessor for Locale(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100041510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004151C);
}

uint64_t sub_10004151C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for StockType(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = type metadata accessor for Locale(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000415B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = "\t";
  v5[1] = "\t";
  v5[2] = "\t";
  v5[3] = &unk_1000DD8B8;
  v5[4] = &unk_1000DD8D0;
  v5[5] = &unk_1000DD8E8;
  result = type metadata accessor for StockType(319);
  if (v3 <= 0x3F)
  {
    v5[6] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Locale(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_100041668()
{
  unint64_t result;

  result = qword_100113FB0;
  if (!qword_100113FB0)
  {
    result = swift_getWitnessTable(&unk_1000DDA14, &type metadata for PriceViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100113FB0);
  }
  return result;
}

unint64_t sub_1000416AC()
{
  unint64_t result;

  result = qword_100113FB8;
  if (!qword_100113FB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarketOpenState, &type metadata for MarketOpenState);
    atomic_store(result, (unint64_t *)&qword_100113FB8);
  }
  return result;
}

void sub_1000416F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100041668();
    v7 = a3(a1, &type metadata for PriceViewModel.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_10004174C()
{
  unint64_t result;

  result = qword_100113FD8;
  if (!qword_100113FD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarketOpenState, &type metadata for MarketOpenState);
    atomic_store(result, (unint64_t *)&qword_100113FD8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PriceViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PriceViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10004186C + 4 * byte_1000DD757[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000418A0 + 4 * byte_1000DD752[v4]))();
}

uint64_t sub_1000418A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000418A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000418B0);
  return result;
}

uint64_t sub_1000418BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000418C4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1000418C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000418D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PriceViewModel.CodingKeys()
{
  return &type metadata for PriceViewModel.CodingKeys;
}

unint64_t sub_1000418F0()
{
  unint64_t result;

  result = qword_100113FF0;
  if (!qword_100113FF0)
  {
    result = swift_getWitnessTable(&unk_1000DD9EC, &type metadata for PriceViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100113FF0);
  }
  return result;
}

unint64_t sub_100041938()
{
  unint64_t result;

  result = qword_100113FF8;
  if (!qword_100113FF8)
  {
    result = swift_getWitnessTable(&unk_1000DD95C, &type metadata for PriceViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100113FF8);
  }
  return result;
}

unint64_t sub_100041980()
{
  unint64_t result;

  result = qword_100114000;
  if (!qword_100114000)
  {
    result = swift_getWitnessTable(&unk_1000DD984, &type metadata for PriceViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100114000);
  }
  return result;
}

uint64_t sub_1000419C4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x6563697270 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697270, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6168436563697270 && a2 == 0xEB0000000065676ELL)
  {
    v7 = 0xEB0000000065676ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6168436563697270, 0xEB0000000065676ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x80000001000E5AF0;
    if (a2 == 0x80000001000E5AF0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000E5AF0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43)
  {
    v9 = 0xEC00000065646F43;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79636E6572727563, 0xEC00000065646F43, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000074786554)
  {
    v10 = 0xEC00000074786554;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000074786554, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x704F74656B72616DLL && a2 == 0xEF65746174536E65)
  {
    v11 = 0xEF65746174536E65;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x704F74656B72616DLL, 0xEF65746174536E65, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x7079546B636F7473 && a2 == 0xE900000000000065)
  {
    v12 = 0xE900000000000065;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079546B636F7473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C61636F6CLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

ValueMetadata *type metadata accessor for DetailWidget()
{
  return &type metadata for DetailWidget;
}

uint64_t sub_100041D7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8930, 1);
}

uint64_t sub_100041D8C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100041DAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

uint64_t sub_100041E28()
{
  return EnvironmentValues.widgetFamily.getter();
}

void sub_100041E48(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_100041E74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v64 = a1;
  v1 = type metadata accessor for DetailTimelineProvider(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000424A0(0);
  v5 = v4;
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000425A4(0);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042630(0);
  v62 = v11;
  v60 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000426E8(0);
  v63 = v14;
  v61 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v59 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SymbolWidgetConfigurationIntent(0);
  if (qword_100111450 != -1)
    swift_once(&qword_100111450, sub_10002DE58);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100012524(v17, (uint64_t)qword_100126818);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v3, v18, v17);
  v19 = type metadata accessor for DetailWidgetView(0);
  v20 = sub_100003D3C(&qword_100114010, type metadata accessor for DetailWidgetView, (uint64_t)&unk_1000DDB70);
  v21 = sub_100003D3C(&qword_100114038, type metadata accessor for DetailTimelineProvider, (uint64_t)&unk_1000DC5F8);
  AppIntentConfiguration.init<A>(kind:intent:provider:content:)(0x6C6961746564, 0xE600000000000000, v16, v3, sub_1000427C4, 0, v16, v19, v1, v20, v21);
  v22 = LocalizedStringKey.init(stringLiteral:)(0x6C6F626D7953, 0xE600000000000000);
  v23 = Text.init(_:tableName:bundle:comment:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = sub_100003D3C(&qword_100114020, (uint64_t (*)(uint64_t))sub_1000424A0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v23, v25, v29, v27, v5, v30);
  sub_100014490(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v5);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000007CLL, 0x80000001000E5BB0);
  v32 = Text.init(_:tableName:bundle:comment:)(v31);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v65 = v5;
  v66 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v40 = v58;
  WidgetConfiguration.description(_:)(v32, v34, v38, v36, v58, OpaqueTypeConformance2);
  sub_100014490(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v40);
  sub_10000EDE8(0, &qword_100112ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v42 = v41;
  v43 = type metadata accessor for WidgetFamily(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(_QWORD *)(v44 + 72);
  v46 = *(unsigned __int8 *)(v44 + 80);
  v47 = (v46 + 32) & ~v46;
  v48 = swift_allocObject(v42, v47 + 6 * v45, v46 | 7);
  *(_OWORD *)(v48 + 16) = xmmword_1000DDA70;
  v49 = *(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104);
  v49(v48 + v47, enum case for WidgetFamily.systemSmall(_:), v43);
  v49(v48 + v47 + v45, enum case for WidgetFamily.systemMedium(_:), v43);
  v49(v48 + v47 + 2 * v45, enum case for WidgetFamily.systemLarge(_:), v43);
  v49(v48 + v47 + 3 * v45, enum case for WidgetFamily.accessoryInline(_:), v43);
  v49(v48 + v47 + 4 * v45, enum case for WidgetFamily.accessoryRectangular(_:), v43);
  v49(v48 + v47 + 5 * v45, enum case for WidgetFamily.accessoryCircular(_:), v43);
  v65 = v40;
  v66 = OpaqueTypeConformance2;
  v50 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v51 = v59;
  v52 = v62;
  WidgetConfiguration.supportedFamilies(_:)(v48, v62, v50);
  swift_bridgeObjectRelease(v48);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v52);
  v65 = v52;
  v66 = v50;
  v53 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v54 = v63;
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v63, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v51, v54);
}

uint64_t sub_10004240C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_10001DE2C(a1, a2, type metadata accessor for DetailTimelineEntry);
  v3 = type metadata accessor for DetailWidgetView(0);
  v4 = (_QWORD *)(a2 + *(int *)(v3 + 20));
  *v4 = swift_getKeyPath(&unk_1000DDAE0);
  sub_100038414(0);
  swift_storeEnumTagMultiPayload(v4, v5, 0);
  v6 = a2 + *(int *)(v3 + 24);
  result = swift_getKeyPath(&unk_1000DDB10);
  *(_QWORD *)v6 = result;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  return result;
}

void sub_1000424A0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_100114008)
  {
    v4[0] = type metadata accessor for SymbolWidgetConfigurationIntent(255);
    v4[1] = type metadata accessor for DetailWidgetView(255);
    v4[2] = sub_100003D3C(qword_100112630, (uint64_t (*)(uint64_t))&type metadata accessor for SymbolWidgetConfigurationIntent, (uint64_t)&protocol conformance descriptor for SymbolWidgetConfigurationIntent);
    v4[3] = sub_100003D3C(&qword_100114010, type metadata accessor for DetailWidgetView, (uint64_t)&unk_1000DDB70);
    v2 = type metadata accessor for AppIntentConfiguration(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_100114008);
  }
}

uint64_t type metadata accessor for DetailWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_100114098;
  if (!qword_100114098)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailWidgetView);
  return result;
}

void sub_1000425A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100114018)
  {
    sub_1000424A0(255);
    v5[0] = v2;
    v5[1] = sub_100003D3C(&qword_100114020, (uint64_t (*)(uint64_t))sub_1000424A0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114018);
  }
}

void sub_100042630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!qword_100114028)
  {
    sub_1000425A4(255);
    v3 = v2;
    sub_1000424A0(255);
    v8 = v4;
    v9 = sub_100003D3C(&qword_100114020, (uint64_t (*)(uint64_t))sub_1000424A0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114028);
  }
}

void sub_1000426E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!qword_100114030)
  {
    sub_100042630(255);
    v3 = v2;
    sub_1000425A4(255);
    v5 = v4;
    sub_1000424A0(255);
    v11 = v6;
    v12 = sub_100003D3C(&qword_100114020, (uint64_t (*)(uint64_t))sub_1000424A0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
    v11 = v5;
    v12 = OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
    v11 = v3;
    v12 = v8;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114030);
  }
}

uint64_t sub_1000427C8()
{
  return EnvironmentValues.widgetFamily.getter();
}

void sub_1000427E8(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

_QWORD *sub_100042814(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, int *, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  void (*v86)(char *, char *, uint64_t, __n128);
  uint64_t v87;
  int *v88;
  uint64_t v89;
  _QWORD *v90;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v86 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    v87 = v7;
    ((void (*)(_QWORD *, _QWORD *))v86)(a1, a2);
    v88 = (int *)type metadata accessor for DetailTimelineEntry(0);
    v8 = v88[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = *(_QWORD *)((char *)a2 + v8);
    *((_QWORD *)v9 + 1) = v11;
    v12 = *(_QWORD *)((char *)a2 + v8 + 24);
    *((_QWORD *)v9 + 2) = *(_QWORD *)((char *)a2 + v8 + 16);
    *((_QWORD *)v9 + 3) = v12;
    v13 = *(_QWORD *)((char *)a2 + v8 + 40);
    *((_QWORD *)v9 + 4) = *(_QWORD *)((char *)a2 + v8 + 32);
    *((_QWORD *)v9 + 5) = v13;
    v14 = (_OWORD *)((char *)a1 + v8 + 48);
    v15 = (_OWORD *)((char *)a2 + v8 + 48);
    v16 = *(_QWORD *)((char *)a2 + v8 + 72);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v89 = a3;
    v90 = a2;
    if (v16 == 1)
    {
      v17 = *((_OWORD *)v10 + 4);
      *v14 = *v15;
      *((_OWORD *)v9 + 4) = v17;
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v9[56] = v10[56];
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v16;
      swift_bridgeObjectRetain(v16);
    }
    *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
    v9[88] = v10[88];
    v19 = *((_QWORD *)v10 + 13);
    *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
    *((_QWORD *)v9 + 13) = v19;
    *((_QWORD *)v9 + 14) = *((_QWORD *)v10 + 14);
    v9[120] = v10[120];
    *((_QWORD *)v9 + 16) = *((_QWORD *)v10 + 16);
    v9[136] = v10[136];
    v9[137] = v10[137];
    v20 = (int *)type metadata accessor for DetailContentViewModel(0);
    v21 = v20[9];
    v22 = &v9[v21];
    v23 = &v10[v21];
    v24 = (int *)type metadata accessor for PreparedSparkline(0);
    v25 = *((_QWORD *)v24 - 1);
    v26 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v25 + 48);
    v27 = swift_bridgeObjectRetain(v19);
    if (v26(v23, 1, v24, v27))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *(_QWORD *)v23;
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v30 = v24[5];
      v31 = &v22[v30];
      v32 = &v23[v30];
      v33 = swift_bridgeObjectRetain(v29);
      v86(v31, v32, v87, v33);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v86)(&v31[*(int *)(v34 + 36)], &v32[*(int *)(v34 + 36)], v87);
      v35 = v24[6];
      v36 = &v22[v35];
      v37 = &v23[v35];
      v38 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      *(_OWORD *)&v22[v24[7]] = *(_OWORD *)&v23[v24[7]];
      v39 = v24[8];
      v40 = &v22[v39];
      v41 = &v23[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v22[v24[9]] = v23[v24[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
    }
    v42 = v20[10];
    v43 = *(_QWORD *)&v10[v42];
    *(_QWORD *)&v9[v42] = v43;
    v44 = v20[11];
    v45 = &v9[v44];
    v46 = &v10[v44];
    sub_100042D9C(0);
    v48 = v47;
    v49 = *(_QWORD *)(v47 - 8);
    v50 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v49 + 48);
    v51 = swift_bridgeObjectRetain(v43);
    if (v50(v46, 1, v48, v51))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v45, v46, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
    }
    v53 = v20[12];
    v54 = &v9[v53];
    v55 = &v10[v53];
    v56 = type metadata accessor for URL(0);
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    v59 = v88[6];
    v60 = (char *)a1 + v59;
    v61 = (char *)v90 + v59;
    v62 = type metadata accessor for WidgetQuote(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
    }
    v65 = v88[7];
    v66 = (char *)a1 + v65;
    v67 = (char *)v90 + v65;
    v68 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
    *((_BYTE *)a1 + v88[8]) = *((_BYTE *)v90 + v88[8]);
    *((_BYTE *)a1 + v88[9]) = *((_BYTE *)v90 + v88[9]);
    v69 = *(int *)(v89 + 20);
    v70 = (_QWORD *)((char *)a1 + v69);
    v71 = (_QWORD *)((char *)v90 + v69);
    sub_100038414(0);
    v73 = v72;
    if (swift_getEnumCaseMultiPayload(v71, v72) == 1)
    {
      v74 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v70, v71, v74);
      v75 = 1;
    }
    else
    {
      v76 = *v71;
      *v70 = *v71;
      swift_retain(v76);
      v75 = 0;
    }
    swift_storeEnumTagMultiPayload(v70, v73, v75);
    v77 = *(int *)(v89 + 24);
    v78 = (char *)a1 + v77;
    v79 = (char *)v90 + v77;
    v80 = *(_QWORD *)v79;
    v81 = *((_QWORD *)v79 + 1);
    v82 = *((_QWORD *)v79 + 2);
    v83 = *((_QWORD *)v79 + 3);
    v84 = v79[32];
    sub_100038430(*(_QWORD *)v79, v81, v82, v83, v84);
    *(_QWORD *)v78 = v80;
    *((_QWORD *)v78 + 1) = v81;
    *((_QWORD *)v78 + 2) = v82;
    *((_QWORD *)v78 + 3) = v83;
    v78[32] = v84;
  }
  return a1;
}

void sub_100042D9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100112698)
  {
    sub_10001D794(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_1001126A8, (uint64_t (*)(uint64_t))sub_10001D794, (uint64_t)&protocol conformance descriptor for [A]);
    v5 = type metadata accessor for NonEmpty(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100112698);
  }
}

uint64_t sub_100042E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v7 = (_QWORD *)(a1 + v6[5]);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  v8 = v7[9];
  if (v8 != 1)
    swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7[13]);
  v9 = (int *)type metadata accessor for DetailContentViewModel(0);
  v10 = (_QWORD *)((char *)v7 + v9[9]);
  v11 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease(*v10);
    v12 = (char *)v10 + *(int *)(v11 + 20);
    v5((uint64_t)v12, v4);
    sub_100022800(0);
    v5((uint64_t)&v12[*(int *)(v13 + 36)], v4);
    v14 = (char *)v10 + *(int *)(v11 + 24);
    v15 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v9[10]));
  v16 = (char *)v7 + v9[11];
  sub_100042D9C(0);
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  v20 = (char *)v7 + v9[12];
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  v23 = a1 + v6[6];
  v24 = type metadata accessor for WidgetQuote(0);
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  v26 = a1 + v6[7];
  v27 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  sub_100038414(0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else
  {
    swift_release(*v28);
  }
  v31 = a1 + *(int *)(a2 + 24);
  return sub_100028060(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 24), *(_BYTE *)(v31 + 32));
}

uint64_t sub_10004309C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t *, uint64_t, int *, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(const void *, uint64_t, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  int *v84;
  uint64_t v86;
  uint64_t v87;

  v5 = type metadata accessor for Date(0);
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v83(a1, a2, v5);
  v84 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v6 = v84[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_QWORD *)(a2 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 8) = v9;
  v10 = *(_QWORD *)(a2 + v6 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  *(_QWORD *)(v7 + 24) = v10;
  v11 = *(_QWORD *)(a2 + v6 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + v6 + 32);
  *(_QWORD *)(v7 + 40) = v11;
  v12 = (_OWORD *)(a1 + v6 + 48);
  v13 = (_OWORD *)(a2 + v6 + 48);
  v14 = *(_QWORD *)(a2 + v6 + 72);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v86 = a2;
  v87 = a1;
  if (v14 == 1)
  {
    v15 = *(_OWORD *)(v8 + 64);
    *v12 = *v13;
    *(_OWORD *)(v7 + 64) = v15;
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
    *(_QWORD *)(v7 + 72) = v14;
    swift_bridgeObjectRetain(v14);
  }
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 88) = *(_BYTE *)(v8 + 88);
  v16 = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
  *(_QWORD *)(v7 + 104) = v16;
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_QWORD *)(v7 + 128) = *(_QWORD *)(v8 + 128);
  *(_BYTE *)(v7 + 136) = *(_BYTE *)(v8 + 136);
  *(_BYTE *)(v7 + 137) = *(_BYTE *)(v8 + 137);
  v17 = (int *)type metadata accessor for DetailContentViewModel(0);
  v18 = v17[9];
  v19 = (uint64_t *)(v7 + v18);
  v20 = (uint64_t *)(v8 + v18);
  v21 = (int *)type metadata accessor for PreparedSparkline(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v22 + 48);
  v24 = swift_bridgeObjectRetain(v16);
  if (v23(v20, 1, v21, v24))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = *v20;
    *v19 = *v20;
    v27 = v21[5];
    v28 = (char *)v19 + v27;
    v29 = (char *)v20 + v27;
    v30 = swift_bridgeObjectRetain(v26);
    ((void (*)(char *, char *, uint64_t, __n128))v83)(v28, v29, v5, v30);
    sub_100022800(0);
    v83((uint64_t)&v28[*(int *)(v31 + 36)], (uint64_t)&v29[*(int *)(v31 + 36)], v5);
    v32 = v21[6];
    v33 = (char *)v19 + v32;
    v34 = (char *)v20 + v32;
    v35 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    *(_OWORD *)((char *)v19 + v21[7]) = *(_OWORD *)((char *)v20 + v21[7]);
    v36 = v21[8];
    v37 = (char *)v19 + v36;
    v38 = (char *)v20 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
  }
  v39 = v17[10];
  v40 = *(_QWORD *)(v8 + v39);
  *(_QWORD *)(v7 + v39) = v40;
  v41 = v17[11];
  v42 = (void *)(v7 + v41);
  v43 = (const void *)(v8 + v41);
  sub_100042D9C(0);
  v45 = v44;
  v46 = *(_QWORD *)(v44 - 8);
  v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v46 + 48);
  v48 = swift_bridgeObjectRetain(v40);
  if (v47(v43, 1, v45, v48))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(v42, v43, v45);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
  }
  v50 = v17[12];
  v51 = (void *)(v7 + v50);
  v52 = (const void *)(v8 + v50);
  v53 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v54 + 16))(v51, v52, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v56 = v84[6];
  v57 = (void *)(v87 + v56);
  v58 = (const void *)(v86 + v56);
  v59 = type metadata accessor for WidgetQuote(0);
  v60 = *(_QWORD *)(v59 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v57, v58, v59);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
  }
  v62 = v84[7];
  v63 = v87 + v62;
  v64 = v86 + v62;
  v65 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  *(_BYTE *)(v87 + v84[8]) = *(_BYTE *)(v86 + v84[8]);
  *(_BYTE *)(v87 + v84[9]) = *(_BYTE *)(v86 + v84[9]);
  v66 = *(int *)(a3 + 20);
  v67 = (uint64_t *)(v87 + v66);
  v68 = (uint64_t *)(v86 + v66);
  sub_100038414(0);
  v70 = v69;
  if (swift_getEnumCaseMultiPayload(v68, v69) == 1)
  {
    v71 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v67, v68, v71);
    v72 = 1;
  }
  else
  {
    v73 = *v68;
    *v67 = *v68;
    swift_retain(v73);
    v72 = 0;
  }
  swift_storeEnumTagMultiPayload(v67, v70, v72);
  v74 = *(int *)(a3 + 24);
  v75 = v87 + v74;
  v76 = v86 + v74;
  v77 = *(_QWORD *)v76;
  v78 = *(_QWORD *)(v76 + 8);
  v79 = *(_QWORD *)(v76 + 16);
  v80 = *(_QWORD *)(v76 + 24);
  v81 = *(_BYTE *)(v76 + 32);
  sub_100038430(*(_QWORD *)v76, v78, v79, v80, v81);
  *(_QWORD *)v75 = v77;
  *(_QWORD *)(v75 + 8) = v78;
  *(_QWORD *)(v75 + 16) = v79;
  *(_QWORD *)(v75 + 24) = v80;
  *(_BYTE *)(v75 + 32) = v81;
  return v87;
}

uint64_t sub_1000435FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(void *, uint64_t, uint64_t);
  int v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void *, uint64_t, uint64_t);
  int v89;
  int v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(void *, uint64_t, uint64_t);
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  void (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  int *v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;

  v5 = type metadata accessor for Date(0);
  v129 = *(_QWORD *)(v5 - 8);
  v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 24);
  v128(a1, a2, v5);
  v131 = type metadata accessor for DetailTimelineEntry(0);
  v6 = *(int *)(v131 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(a2 + v6 + 8);
  v10 = *(_QWORD *)(a1 + v6 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = (_OWORD *)(v7 + 48);
  v16 = (_OWORD *)(v8 + 48);
  v17 = *(_QWORD *)(v7 + 72);
  v18 = *(_QWORD *)(v8 + 72);
  v133 = a2;
  v134 = a1;
  if (v17 == 1)
  {
    if (v18 == 1)
    {
      v19 = *(_OWORD *)(v8 + 64);
      *v15 = *v16;
      *(_OWORD *)(v7 + 64) = v19;
    }
    else
    {
      v21 = *(_QWORD *)v16;
      *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
      *(_QWORD *)v15 = v21;
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
      v22 = *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v7 + 72) = v22;
      swift_bridgeObjectRetain(v22);
    }
  }
  else if (v18 == 1)
  {
    sub_10002304C(v7 + 48);
    v20 = *(_OWORD *)(v8 + 64);
    *v15 = *v16;
    *(_OWORD *)(v7 + 64) = v20;
  }
  else
  {
    v23 = *(_QWORD *)v16;
    *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
    *(_QWORD *)v15 = v23;
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
    v24 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v7 + 72) = v24;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRelease(v17);
  }
  v25 = *(_QWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 88) = *(_BYTE *)(v8 + 88);
  *(_QWORD *)(v7 + 80) = v25;
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
  v26 = *(_QWORD *)(v8 + 104);
  v27 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 104) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_QWORD *)(v7 + 112) = v28;
  v29 = *(_QWORD *)(v8 + 128);
  *(_BYTE *)(v7 + 136) = *(_BYTE *)(v8 + 136);
  *(_QWORD *)(v7 + 128) = v29;
  *(_BYTE *)(v7 + 137) = *(_BYTE *)(v8 + 137);
  v130 = (int *)type metadata accessor for DetailContentViewModel(0);
  v30 = v130[9];
  v31 = (_QWORD *)(v7 + v30);
  v32 = (_QWORD *)(v8 + v30);
  v33 = (int *)type metadata accessor for PreparedSparkline(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (v37)
      goto LABEL_13;
    v39 = *v32;
    *v31 = *v32;
    v40 = v33[5];
    v41 = (char *)v31 + v40;
    v42 = (char *)v32 + v40;
    v43 = *(void (**)(char *, char *, uint64_t, __n128))(v129 + 16);
    v44 = swift_bridgeObjectRetain(v39);
    v43(v41, v42, v5, v44);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v43)(&v41[*(int *)(v45 + 36)], &v42[*(int *)(v45 + 36)], v5);
    v46 = v33[6];
    v47 = (char *)v31 + v46;
    v48 = (char *)v32 + v46;
    v49 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    *(_OWORD *)((char *)v31 + v33[7]) = *(_OWORD *)((char *)v32 + v33[7]);
    v50 = v33[8];
    v51 = (char *)v31 + v50;
    v52 = (char *)v32 + v50;
    v53 = v52[8];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v53;
    *((_BYTE *)v31 + v33[9]) = *((_BYTE *)v32 + v33[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  else
  {
    if (v37)
    {
      sub_10001DF70((uint64_t)v31, type metadata accessor for PreparedSparkline);
LABEL_13:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      goto LABEL_16;
    }
    v54 = *v32;
    v55 = *v31;
    *v31 = *v32;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRelease(v55);
    v56 = v33[5];
    v57 = (char *)v31 + v56;
    v58 = (char *)v32 + v56;
    v128((uint64_t)v31 + v56, (uint64_t)v32 + v56, v5);
    sub_100022800(0);
    v128((uint64_t)&v57[*(int *)(v59 + 36)], (uint64_t)&v58[*(int *)(v59 + 36)], v5);
    v60 = v33[6];
    v61 = (char *)v31 + v60;
    v62 = (char *)v32 + v60;
    v63 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
    v64 = v33[7];
    v65 = (_QWORD *)((char *)v31 + v64);
    v66 = (_QWORD *)((char *)v32 + v64);
    *v65 = *v66;
    v65[1] = v66[1];
    v67 = v33[8];
    v68 = (char *)v31 + v67;
    v69 = (char *)v32 + v67;
    v70 = v69[8];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v70;
    *((_BYTE *)v31 + v33[9]) = *((_BYTE *)v32 + v33[9]);
  }
LABEL_16:
  v71 = v130[10];
  v72 = *(_QWORD *)(v8 + v71);
  v73 = *(_QWORD *)(v7 + v71);
  *(_QWORD *)(v7 + v71) = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73);
  v74 = v130[11];
  v75 = (void *)(v7 + v74);
  v76 = (void *)(v8 + v74);
  sub_100042D9C(0);
  v78 = v77;
  v79 = *(_QWORD *)(v77 - 8);
  v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v79 + 48);
  LODWORD(v73) = v80(v75, 1, v77);
  v81 = v80(v76, 1, v78);
  if ((_DWORD)v73)
  {
    if (!v81)
    {
      (*(void (**)(void *, void *, uint64_t))(v79 + 16))(v75, v76, v78);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v75, 0, 1, v78);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v81)
  {
    (*(void (**)(void *, uint64_t))(v79 + 8))(v75, v78);
LABEL_21:
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v79 + 24))(v75, v76, v78);
LABEL_22:
  v83 = v130[12];
  v84 = (void *)(v7 + v83);
  v85 = (void *)(v8 + v83);
  v86 = type metadata accessor for URL(0);
  v87 = *(_QWORD *)(v86 - 8);
  v88 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v87 + 48);
  v89 = v88(v84, 1, v86);
  v90 = v88(v85, 1, v86);
  if (v89)
  {
    v91 = (int *)v131;
    if (!v90)
    {
      (*(void (**)(void *, void *, uint64_t))(v87 + 16))(v84, v85, v86);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v91 = (int *)v131;
  if (v90)
  {
    (*(void (**)(void *, uint64_t))(v87 + 8))(v84, v86);
LABEL_27:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v87 + 24))(v84, v85, v86);
LABEL_28:
  v93 = v91[6];
  v94 = (void *)(v134 + v93);
  v95 = (void *)(v133 + v93);
  v96 = type metadata accessor for WidgetQuote(0);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  if (v99)
  {
    if (!v100)
    {
      (*(void (**)(void *, void *, uint64_t))(v97 + 16))(v94, v95, v96);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v100)
  {
    (*(void (**)(void *, uint64_t))(v97 + 8))(v94, v96);
LABEL_33:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v97 + 24))(v94, v95, v96);
LABEL_34:
  v102 = v91[7];
  v103 = v134 + v102;
  v104 = v133 + v102;
  v105 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 24))(v103, v104, v105);
  *(_BYTE *)(v134 + v91[8]) = *(_BYTE *)(v133 + v91[8]);
  *(_BYTE *)(v134 + v91[9]) = *(_BYTE *)(v133 + v91[9]);
  if (v134 != v133)
  {
    v106 = *(int *)(a3 + 20);
    v107 = (uint64_t *)(v134 + v106);
    v108 = (uint64_t *)(v133 + v106);
    sub_10001DF70(v134 + v106, (uint64_t (*)(_QWORD))sub_100038414);
    sub_100038414(0);
    v110 = v109;
    if (swift_getEnumCaseMultiPayload(v108, v109) == 1)
    {
      v111 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v107, v108, v111);
      v112 = 1;
    }
    else
    {
      v113 = *v108;
      *v107 = *v108;
      swift_retain(v113);
      v112 = 0;
    }
    swift_storeEnumTagMultiPayload(v107, v110, v112);
  }
  v114 = *(int *)(a3 + 24);
  v115 = v134 + v114;
  v116 = v133 + v114;
  v117 = *(_QWORD *)v116;
  v118 = *(_QWORD *)(v116 + 8);
  v119 = *(_QWORD *)(v116 + 16);
  v120 = *(_QWORD *)(v116 + 24);
  v121 = *(_BYTE *)(v116 + 32);
  sub_100038430(*(_QWORD *)v116, v118, v119, v120, v121);
  v122 = *(_QWORD *)v115;
  v123 = *(_QWORD *)(v115 + 8);
  v124 = *(_QWORD *)(v115 + 16);
  v125 = *(_QWORD *)(v115 + 24);
  v126 = *(_BYTE *)(v115 + 32);
  *(_QWORD *)v115 = v117;
  *(_QWORD *)(v115 + 8) = v118;
  *(_QWORD *)(v115 + 16) = v119;
  *(_QWORD *)(v115 + 24) = v120;
  *(_BYTE *)(v115 + 32) = v121;
  sub_100028060(v122, v123, v124, v125, v126);
  return v134;
}

uint64_t sub_100043E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int *v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;

  v5 = type metadata accessor for Date(0);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v72(a1, a2, v5);
  v6 = (int *)type metadata accessor for DetailTimelineEntry(0);
  v7 = v6[5];
  v8 = a1 + v7;
  v74 = a2;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  v11 = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  v12 = *(_OWORD *)(a2 + v7 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + v7 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 121) = *(_OWORD *)(a2 + v7 + 121);
  v13 = *(_OWORD *)(a2 + v7 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 + v7 + 96);
  *(_OWORD *)(v8 + 112) = v13;
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(a2 + v7 + 137);
  v14 = (int *)type metadata accessor for DetailContentViewModel(0);
  v15 = v14[9];
  v16 = (_QWORD *)(v8 + v15);
  v17 = (_QWORD *)(v9 + v15);
  v18 = (int *)type metadata accessor for PreparedSparkline(0);
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v21 = v18[5];
    v70 = v6;
    v71 = a1;
    v22 = (char *)v16 + v21;
    v23 = (char *)v17 + v21;
    v72((uint64_t)v16 + v21, (uint64_t)v17 + v21, v5);
    sub_100022800(0);
    v25 = *(int *)(v24 + 36);
    v26 = &v22[v25];
    a1 = v71;
    v72((uint64_t)v26, (uint64_t)&v23[v25], v5);
    v27 = v18[6];
    v28 = (char *)v16 + v27;
    v29 = (char *)v17 + v27;
    v30 = type metadata accessor for TimeZone(0);
    v31 = v28;
    v6 = v70;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v31, v29, v30);
    *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
    v32 = v18[8];
    v33 = (char *)v16 + v32;
    v34 = (char *)v17 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)(v8 + v14[10]) = *(_QWORD *)(v9 + v14[10]);
  v35 = v14[11];
  v36 = (void *)(v8 + v35);
  v37 = (const void *)(v9 + v35);
  sub_100042D9C(0);
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v38))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v36, v37, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
  }
  v42 = v14[12];
  v43 = (void *)(v8 + v42);
  v44 = (const void *)(v9 + v42);
  v45 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v6[6];
  v49 = (void *)(a1 + v48);
  v50 = (const void *)(v74 + v48);
  v51 = type metadata accessor for WidgetQuote(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v52 + 32))(v49, v50, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  v54 = v6[7];
  v55 = v6;
  v56 = a1 + v54;
  v57 = v74 + v54;
  v58 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
  *(_BYTE *)(a1 + v55[8]) = *(_BYTE *)(v74 + v55[8]);
  *(_BYTE *)(a1 + v55[9]) = *(_BYTE *)(v74 + v55[9]);
  v59 = *(int *)(a3 + 20);
  v60 = (void *)(a1 + v59);
  v61 = (const void *)(v74 + v59);
  sub_100038414(0);
  v63 = v62;
  if (swift_getEnumCaseMultiPayload(v61, v62) == 1)
  {
    v64 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v60, v61, v64);
    swift_storeEnumTagMultiPayload(v60, v63, 1);
  }
  else
  {
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  v65 = *(int *)(a3 + 24);
  v66 = a1 + v65;
  v67 = v74 + v65;
  v68 = *(_OWORD *)(v67 + 16);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *(_OWORD *)(v66 + 16) = v68;
  *(_BYTE *)(v66 + 32) = *(_BYTE *)(v67 + 32);
  return a1;
}

uint64_t sub_1000442D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, int *);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(void *, uint64_t, uint64_t);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(void *, uint64_t, uint64_t);
  int v73;
  int v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(void *, uint64_t, uint64_t);
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  int *v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;

  v5 = type metadata accessor for Date(0);
  v108 = *(_QWORD *)(v5 - 8);
  v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 40);
  v107(a1, a2, v5);
  v110 = type metadata accessor for DetailTimelineEntry(0);
  v6 = *(int *)(v110 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_QWORD *)(a2 + v6 + 8);
  v10 = *(_QWORD *)(a1 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = (_OWORD *)(v7 + 48);
  v16 = (_OWORD *)(v8 + 48);
  v17 = *(_QWORD *)(v7 + 72);
  v112 = a2;
  v113 = a1;
  if (v17 == 1)
    goto LABEL_4;
  v18 = *(_QWORD *)(v8 + 72);
  if (v18 == 1)
  {
    sub_10002304C(v7 + 48);
LABEL_4:
    v19 = *(_OWORD *)(v8 + 64);
    *v15 = *v16;
    *(_OWORD *)(v7 + 64) = v19;
    goto LABEL_6;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = v18;
  swift_bridgeObjectRelease(v17);
LABEL_6:
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
  *(_BYTE *)(v7 + 88) = *(_BYTE *)(v8 + 88);
  v20 = *(_QWORD *)(v8 + 104);
  v21 = *(_QWORD *)(v7 + 104);
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(v8 + 96);
  *(_QWORD *)(v7 + 104) = v20;
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 112);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v8 + 120);
  *(_QWORD *)(v7 + 128) = *(_QWORD *)(v8 + 128);
  *(_WORD *)(v7 + 136) = *(_WORD *)(v8 + 136);
  v109 = (int *)type metadata accessor for DetailContentViewModel(0);
  v22 = v109[9];
  v23 = (char *)(v7 + v22);
  v24 = (char *)(v8 + v22);
  v25 = (int *)type metadata accessor for PreparedSparkline(0);
  v26 = *((_QWORD *)v25 - 1);
  v27 = *(uint64_t (**)(char *, uint64_t, int *))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (v29)
      goto LABEL_11;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v31 = v25[5];
    v32 = &v23[v31];
    v33 = &v24[v31];
    v34 = *(void (**)(char *, char *, uint64_t))(v108 + 32);
    v34(&v23[v31], &v24[v31], v5);
    sub_100022800(0);
    v34(&v32[*(int *)(v35 + 36)], &v33[*(int *)(v35 + 36)], v5);
    v36 = v25[6];
    v37 = &v23[v36];
    v38 = &v24[v36];
    v39 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
    *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
    v40 = v25[8];
    v41 = &v23[v40];
    v42 = &v24[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v23[v25[9]] = v24[v25[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
  }
  else
  {
    if (v29)
    {
      sub_10001DF70((uint64_t)v23, type metadata accessor for PreparedSparkline);
LABEL_11:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      goto LABEL_14;
    }
    v43 = *(_QWORD *)v23;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    swift_bridgeObjectRelease(v43);
    v44 = v25[5];
    v45 = &v23[v44];
    v46 = &v24[v44];
    v107((uint64_t)&v23[v44], (uint64_t)&v24[v44], v5);
    sub_100022800(0);
    v107((uint64_t)&v45[*(int *)(v47 + 36)], (uint64_t)&v46[*(int *)(v47 + 36)], v5);
    v48 = v25[6];
    v49 = &v23[v48];
    v50 = &v24[v48];
    v51 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
    *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
    v52 = v25[8];
    v53 = &v23[v52];
    v54 = &v24[v52];
    v53[8] = v54[8];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v23[v25[9]] = v24[v25[9]];
  }
LABEL_14:
  v55 = v109[10];
  v56 = *(_QWORD *)(v7 + v55);
  *(_QWORD *)(v7 + v55) = *(_QWORD *)(v8 + v55);
  swift_bridgeObjectRelease(v56);
  v57 = v109[11];
  v58 = (void *)(v7 + v57);
  v59 = (void *)(v8 + v57);
  sub_100042D9C(0);
  v61 = v60;
  v62 = *(_QWORD *)(v60 - 8);
  v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v62 + 48);
  v64 = v63(v58, 1, v60);
  v65 = v63(v59, 1, v61);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(void *, void *, uint64_t))(v62 + 32))(v58, v59, v61);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v61);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v65)
  {
    (*(void (**)(void *, uint64_t))(v62 + 8))(v58, v61);
LABEL_19:
    sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v62 + 40))(v58, v59, v61);
LABEL_20:
  v67 = v109[12];
  v68 = (void *)(v7 + v67);
  v69 = (void *)(v8 + v67);
  v70 = type metadata accessor for URL(0);
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v71 + 48);
  v73 = v72(v68, 1, v70);
  v74 = v72(v69, 1, v70);
  if (v73)
  {
    v75 = (int *)v110;
    if (!v74)
    {
      (*(void (**)(void *, void *, uint64_t))(v71 + 32))(v68, v69, v70);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v75 = (int *)v110;
  if (v74)
  {
    (*(void (**)(void *, uint64_t))(v71 + 8))(v68, v70);
LABEL_25:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v71 + 40))(v68, v69, v70);
LABEL_26:
  v77 = v75[6];
  v78 = (void *)(v113 + v77);
  v79 = (void *)(v112 + v77);
  v80 = type metadata accessor for WidgetQuote(0);
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v81 + 48);
  v83 = v82(v78, 1, v80);
  v84 = v82(v79, 1, v80);
  if (v83)
  {
    if (!v84)
    {
      (*(void (**)(void *, void *, uint64_t))(v81 + 32))(v78, v79, v80);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v84)
  {
    (*(void (**)(void *, uint64_t))(v81 + 8))(v78, v80);
LABEL_31:
    sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, void *, uint64_t))(v81 + 40))(v78, v79, v80);
LABEL_32:
  v86 = v75[7];
  v87 = v113 + v86;
  v88 = v112 + v86;
  v89 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
  *(_BYTE *)(v113 + v75[8]) = *(_BYTE *)(v112 + v75[8]);
  *(_BYTE *)(v113 + v75[9]) = *(_BYTE *)(v112 + v75[9]);
  if (v113 != v112)
  {
    v90 = *(int *)(a3 + 20);
    v91 = (void *)(v113 + v90);
    v92 = (const void *)(v112 + v90);
    sub_10001DF70(v113 + v90, (uint64_t (*)(_QWORD))sub_100038414);
    sub_100038414(0);
    v94 = v93;
    if (swift_getEnumCaseMultiPayload(v92, v93) == 1)
    {
      v95 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v91, v92, v95);
      swift_storeEnumTagMultiPayload(v91, v94, 1);
    }
    else
    {
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
  }
  v96 = *(int *)(a3 + 24);
  v97 = v113 + v96;
  v98 = v112 + v96;
  v99 = *(_BYTE *)(v98 + 32);
  v100 = *(_QWORD *)v97;
  v101 = *(_QWORD *)(v97 + 8);
  v102 = *(_QWORD *)(v97 + 16);
  v103 = *(_QWORD *)(v97 + 24);
  v104 = *(_BYTE *)(v97 + 32);
  v105 = *(_OWORD *)(v98 + 16);
  *(_OWORD *)v97 = *(_OWORD *)v98;
  *(_OWORD *)(v97 + 16) = v105;
  *(_BYTE *)(v97 + 32) = v99;
  sub_100028060(v100, v101, v102, v103, v104);
  return v113;
}

uint64_t sub_100044A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044A2C);
}

uint64_t sub_100044A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for DetailTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 32);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100044AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044AF8);
}

void sub_100044AF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for DetailTimelineEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_10000EDE8(0, &qword_100112C48, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 32) = -(char)a2;
}

void sub_100044BB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for DetailTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100038414(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "!";
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100044C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_1000426E8(255);
  v1 = v0;
  sub_100042630(255);
  v3 = v2;
  sub_1000425A4(255);
  v5 = v4;
  sub_1000424A0(255);
  v11 = v6;
  v12 = sub_100003D3C(&qword_100114020, (uint64_t (*)(uint64_t))sub_1000424A0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v11 = v5;
  v12 = OpaqueTypeConformance2;
  v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v11 = v3;
  v12 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v11 = v1;
  v12 = v9;
  return swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, 1);
}

uint64_t sub_100044D18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8958, 1);
}

uint64_t sub_100044D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[2];
  __int128 v116;
  __int128 v117;
  char v118;
  _QWORD v119[2];
  uint64_t v120;
  uint64_t v121;

  v113 = a2;
  v98 = type metadata accessor for RedactionReasons(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v107 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v96);
  v104 = (uint64_t)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for DetailContentView(0);
  __chkstk_darwin(v105);
  v106 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100045AE0(0);
  v102 = v6;
  v101 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v100 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100045A6C(0);
  v112 = v8;
  __chkstk_darwin(v8);
  v99 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v103 = (uint64_t)&v91 - v11;
  sub_10002BC34(0, &qword_100114120, (uint64_t (*)(uint64_t))sub_1000459E0, v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v109 = v13;
  __chkstk_darwin(v13);
  v111 = (uint64_t)&v91 - v14;
  v114 = type metadata accessor for DetailTimelineEntry(0);
  __chkstk_darwin(v114);
  v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for DetailComplicationContentView(0);
  __chkstk_darwin(v108);
  v18 = (uint64_t *)((char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v21 = (char *)&v91 - v20;
  sub_1000459E0(0);
  v110 = v22;
  v95 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v93 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v94 = (char *)&v91 - v25;
  v26 = type metadata accessor for WidgetFamily(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v91 - v31;
  v92 = type metadata accessor for DetailWidgetView(0);
  v33 = a1;
  sub_100046484((uint64_t (*)(_QWORD, __n128))sub_100038414, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v32);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v29, v32, v26);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v29, v26);
  v35 = *(void (**)(char *, uint64_t))(v27 + 8);
  if (v34 == enum case for WidgetFamily.accessoryCircular(_:)
    || v34 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v34 == enum case for WidgetFamily.accessoryInline(_:))
  {
    v35(v32, v26);
    sub_10001DE2C(v33, (uint64_t)v16, type metadata accessor for DetailTimelineEntry);
    if (qword_100111588 != -1)
      swift_once(&qword_100111588, sub_1000B0BAC);
    sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v119);
    v50 = v120;
    v51 = v121;
    sub_100007184(v119, v120);
    v52 = sub_1000280C4();
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v52, v52, v50, v51);
    if (*((_QWORD *)&v117 + 1))
    {
      *v18 = swift_getKeyPath(&unk_1000DDAE0);
      sub_100038414(0);
      swift_storeEnumTagMultiPayload(v18, v53, 0);
      v54 = v108;
      v55 = (_QWORD *)((char *)v18 + *(int *)(v108 + 20));
      *v55 = swift_getKeyPath(&unk_1000DDBF0);
      sub_1000461DC(0);
      swift_storeEnumTagMultiPayload(v55, v56, 0);
      sub_10000ED3C((uint64_t)v16, (uint64_t)v18 + *(int *)(v54 + 24), type metadata accessor for DetailTimelineEntry);
      sub_10001D968(&v116, (uint64_t)v18 + *(int *)(v54 + 28));
      sub_10000ED3C((uint64_t)v18, (uint64_t)v21, type metadata accessor for DetailComplicationContentView);
      sub_100007164(v119);
      v57 = v33 + *(int *)(v114 + 20) + *(int *)(v96 + 48);
      v58 = sub_100003D3C(&qword_1001140F0, type metadata accessor for DetailComplicationContentView, (uint64_t)&unk_1000E4968);
      v59 = v93;
      View.widgetURL(_:)(v57, v54, v58);
      sub_10001DF70((uint64_t)v21, type metadata accessor for DetailComplicationContentView);
      v60 = v95;
      v61 = v94;
      v62 = v59;
      v63 = v110;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v62, v110);
      v64 = v111;
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v111, v61, v63);
      swift_storeEnumTagMultiPayload(v64, v109, 0);
      v119[0] = v54;
      v119[1] = v58;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v119, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v66 = sub_1000460E0();
      _ConditionalContent<>.init(storage:)(v64, v63, v112, OpaqueTypeConformance2, v66);
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v61, v63);
    }
    goto LABEL_16;
  }
  v35(v29, v26);
  v35(v32, v26);
  v36 = v114;
  v37 = v104;
  sub_10001DE2C(v33 + *(int *)(v114 + 20), v104, type metadata accessor for DetailContentViewModel);
  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v119);
  v38 = v120;
  v39 = v121;
  sub_100007184(v119, v120);
  v40 = sub_1000280C4();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v40, v40, v38, v39);
  v42 = v107;
  v43 = (uint64_t)v106;
  v44 = v105;
  if (!*((_QWORD *)&v117 + 1))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  KeyPath = swift_getKeyPath(&unk_1000DDAE0);
  v46 = (uint64_t *)(v43 + *(int *)(v44 + 24));
  *v46 = KeyPath;
  sub_100038414(0);
  swift_storeEnumTagMultiPayload(v46, v47, 0);
  sub_10000ED3C(v37, v43, type metadata accessor for DetailContentViewModel);
  sub_10001D968(&v116, v43 + *(int *)(v44 + 20));
  v48 = sub_100007164(v119);
  v49 = v98;
  if (*(_BYTE *)(v33 + *(int *)(v36 + 32)) == 1)
  {
    static RedactionReasons.placeholder.getter(v48);
  }
  else
  {
    v119[0] = _swiftEmptyArrayStorage;
    v67 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    sub_100045E5C(0);
    v69 = v68;
    v70 = sub_100003D3C((unint64_t *)&qword_100113090, (uint64_t (*)(uint64_t))sub_100045E5C, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v119, v69, v70, v49, v67);
  }
  v71 = v92;
  v72 = sub_100003D3C(&qword_100114108, type metadata accessor for DetailContentView, (uint64_t)&unk_1000E1468);
  v73 = v100;
  View.redacted(reason:)(v42, v44, v72);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v42, v49);
  sub_10001DF70(v43, type metadata accessor for DetailContentView);
  v74 = v33 + *(int *)(v71 + 24);
  v118 = *(_BYTE *)(v74 + 32);
  v75 = *(_OWORD *)(v74 + 16);
  v116 = *(_OWORD *)v74;
  v117 = v75;
  sub_10003BD5C((uint64_t)&v116, (uint64_t)v119);
  sub_10003BDB8((uint64_t)v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
  v76 = sub_100045EEC();
  sub_10003BDB8((uint64_t)&v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  sub_10003BDB8((uint64_t)v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
  sub_100045EEC();
  v78 = v77;
  sub_10003BDB8((uint64_t)&v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  v79 = swift_getKeyPath(&unk_1000DDC18);
  v80 = swift_allocObject(&unk_1001055F8, 41, 7);
  *(double *)(v80 + 16) = v76;
  *(_BYTE *)(v80 + 24) = 0;
  *(_QWORD *)(v80 + 32) = v78;
  *(_BYTE *)(v80 + 40) = 0;
  v81 = v101;
  v82 = (uint64_t)v99;
  v83 = v102;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v99, v73, v102);
  v84 = v112;
  v85 = (uint64_t *)(v82 + *(int *)(v112 + 36));
  *v85 = v79;
  v85[1] = (uint64_t)sub_100024998;
  v85[2] = v80;
  (*(void (**)(char *, uint64_t))(v81 + 8))(v73, v83);
  v86 = v103;
  sub_10000ED3C(v82, v103, (uint64_t (*)(_QWORD))sub_100045A6C);
  v87 = v111;
  sub_10001DE2C(v86, v111, (uint64_t (*)(_QWORD))sub_100045A6C);
  swift_storeEnumTagMultiPayload(v87, v109, 1);
  v88 = sub_100003D3C(&qword_1001140F0, type metadata accessor for DetailComplicationContentView, (uint64_t)&unk_1000E4968);
  v115[0] = v108;
  v115[1] = v88;
  v89 = swift_getOpaqueTypeConformance2(v115, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v90 = sub_1000460E0();
  _ConditionalContent<>.init(storage:)(v87, v110, v84, v89, v90);
  return sub_10001DF70(v86, (uint64_t (*)(_QWORD))sub_100045A6C);
}

uint64_t sub_100045778@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004596C(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100045B6C(0);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044D28(v1, (uint64_t)v9);
  KeyPath = swift_getKeyPath(&unk_1000DDBC0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for ColorScheme.dark(_:), v3);
  v15 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  sub_10002BE28(0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v15 + *(int *)(v16 + 28), v6, v3);
  *v15 = KeyPath;
  sub_10001DE2C((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_10004596C);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_10004596C);
  v17 = v1 + *(int *)(type metadata accessor for DetailTimelineEntry(0) + 28);
  v18 = swift_getKeyPath(&unk_1000DDBF0);
  sub_100045C50(0);
  v20 = (uint64_t *)(a1 + *(int *)(v19 + 36));
  sub_10002BDF8(0);
  v22 = (char *)v20 + *(int *)(v21 + 28);
  v23 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v17, v23);
  *v20 = v18;
  return sub_10000ED3C((uint64_t)v13, a1, (uint64_t (*)(_QWORD))sub_100045B6C);
}

void sub_10004596C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001140D8)
  {
    sub_10002BC34(255, &qword_1001140E0, (uint64_t (*)(uint64_t))sub_1000459E0, (uint64_t (*)(uint64_t))sub_100045A6C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v3 = type metadata accessor for Group(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001140D8);
  }
}

void sub_1000459E0(uint64_t a1)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1001140E8)
  {
    v4[0] = type metadata accessor for DetailComplicationContentView(255);
    v4[1] = sub_100003D3C(&qword_1001140F0, type metadata accessor for DetailComplicationContentView, (uint64_t)&unk_1000E4968);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 0);
    if (!v3)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001140E8);
  }
}

void sub_100045A6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001140F8)
  {
    sub_100045AE0(255);
    v3 = v2;
    sub_100045E78(255, (unint64_t *)&qword_100112B90, (uint64_t (*)(_QWORD, void *))&type metadata accessor for _EnvironmentKeyTransformModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001140F8);
  }
}

void sub_100045AE0(uint64_t a1)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_100114100)
  {
    v4[0] = type metadata accessor for DetailContentView(255);
    v4[1] = sub_100003D3C(&qword_100114108, type metadata accessor for DetailContentView, (uint64_t)&unk_1000E1468);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v4, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 0);
    if (!v3)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114100);
  }
}

void sub_100045B6C(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100114110, (uint64_t (*)(uint64_t))sub_10004596C, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

uint64_t sub_100045B90()
{
  return EnvironmentValues.colorScheme.getter();
}

double sub_100045BB4@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];

  v2 = sub_1000461F8();
  EnvironmentValues.subscript.getter(v5, &type metadata for TextMarginKey, &type metadata for TextMarginKey, v2);
  result = *(double *)v5;
  v4 = v5[1];
  *a1 = v5[0];
  a1[1] = v4;
  return result;
}

uint64_t sub_100045C00(_OWORD *a1)
{
  __int128 v1;
  unint64_t v2;
  _OWORD v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = sub_1000461F8();
  return EnvironmentValues.subscript.setter(v4, &type metadata for TextMarginKey, &type metadata for TextMarginKey, v2);
}

void sub_100045C50(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100114118, (uint64_t (*)(uint64_t))sub_100045B6C, (uint64_t (*)(uint64_t))sub_10002BDF8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

uint64_t sub_100045C74(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10007ECFC(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, &type metadata for Any[8]);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_100024DD8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100045E2C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046484((uint64_t (*)(_QWORD, __n128))sub_100038414, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

void sub_100045E5C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113088, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

void sub_100045E78(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, void *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for EdgeInsets);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_100045EC0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046484((uint64_t (*)(_QWORD, __n128))sub_100046A48, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x80000001000E5CC0, a1);
}

double sub_100045EEC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  double v15;

  v1 = type metadata accessor for EnvironmentValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  if (v0[32] == 1)
    return *(double *)v0;
  v7 = swift_retain(*(_QWORD *)v0);
  v8 = static os_log_type_t.fault.getter(v7);
  v9 = static Log.runtimeIssuesLog.getter();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v15 = *(double *)&v12;
    *(_DWORD *)v11 = 136315138;
    v13 = v11 + 4;
    v14 = sub_10007ECFC(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v15, v4, v5);
  sub_10003BDB8((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v15;
}

uint64_t sub_1000460D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

unint64_t sub_1000460E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_100114128;
  if (!qword_100114128)
  {
    sub_100045A6C(255);
    v2 = v1;
    v3[0] = type metadata accessor for DetailContentView(255);
    v3[1] = sub_100003D3C(&qword_100114108, type metadata accessor for DetailContentView, (uint64_t)&unk_1000E1468);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_100046184();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100114128);
  }
  return result;
}

unint64_t sub_100046184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114130;
  if (!qword_100114130)
  {
    sub_100045E78(255, (unint64_t *)&qword_100112B90, (uint64_t (*)(_QWORD, void *))&type metadata accessor for _EnvironmentKeyTransformModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114130);
  }
  return result;
}

void sub_1000461DC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
}

unint64_t sub_1000461F8()
{
  unint64_t result;

  result = qword_100114138;
  if (!qword_100114138)
  {
    result = swift_getWitnessTable(&unk_1000DE204, &type metadata for TextMarginKey);
    atomic_store(result, (unint64_t *)&qword_100114138);
  }
  return result;
}

uint64_t sub_10004623C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046484((uint64_t (*)(_QWORD, __n128))sub_100046A2C, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x80000001000E5CA0, a1);
}

uint64_t sub_100046268(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_10007ECFC(0x6C616E6F6974704FLL, 0xEE003E746E6F463CLL, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, &type metadata for Any[8]);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v16, v7, a1);
    j__swift_release(a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

uint64_t sub_100046430@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046484((uint64_t (*)(_QWORD, __n128))sub_100046A64, (uint64_t (*)(_QWORD))&type metadata accessor for Font.Context, 0x747865746E6F43, 0xE700000000000000, a1);
}

uint64_t sub_100046458@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046484((uint64_t (*)(_QWORD, __n128))sub_1000461DC, (uint64_t (*)(_QWORD))&type metadata accessor for PriceChangeDisplay, 0xD000000000000012, 0x80000001000E5C80, a1);
}

uint64_t sub_100046484@<X0>(uint64_t (*a1)(_QWORD, __n128)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1(0, v13);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v29 - v17);
  sub_10001DE2C(v9, (uint64_t)&v29 - v17, (uint64_t (*)(_QWORD))a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v16);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v20 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a5, v18, v20);
  }
  else
  {
    v22 = *v18;
    v23 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v24 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v24, v23))
    {
      v30 = a4;
      v25 = swift_slowAlloc(12, -1);
      v31 = a5;
      v26 = (uint8_t *)v25;
      v27 = swift_slowAlloc(32, -1);
      v34 = v27;
      *(_DWORD *)v26 = 136315138;
      v33 = sub_10007ECFC(v32, v30, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v23, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v26, 0xCu);
      swift_arrayDestroy(v27, 1, &type metadata for Any[8]);
      swift_slowDealloc(v27, -1, -1);
      v28 = v26;
      a5 = v31;
      swift_slowDealloc(v28, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v15, v22);
    swift_release(v22);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
}

double sub_1000466B8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10007ECFC(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, &type metadata for Any[8]);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_100024DD8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100046878()
{
  return sub_10002F5CC(&qword_100114140, (uint64_t (*)(uint64_t))sub_100045C50, (void (*)(void))sub_1000468AC, (void (*)(void))sub_100046A10);
}

uint64_t sub_1000468AC()
{
  return sub_10002F5CC(&qword_100114148, (uint64_t (*)(uint64_t))sub_100045B6C, (void (*)(void))sub_1000468D0, (void (*)(void))sub_1000469F4);
}

unint64_t sub_1000468D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100114150;
  if (!qword_100114150)
  {
    sub_10004596C(255);
    v2 = v1;
    sub_100046930();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_100114150);
  }
  return result;
}

unint64_t sub_100046930()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_100114158;
  if (!qword_100114158)
  {
    sub_10002BC34(255, &qword_1001140E0, (uint64_t (*)(uint64_t))sub_1000459E0, (uint64_t (*)(uint64_t))sub_100045A6C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    v3[0] = type metadata accessor for DetailComplicationContentView(255);
    v3[1] = sub_100003D3C(&qword_1001140F0, type metadata accessor for DetailComplicationContentView, (uint64_t)&unk_1000E4968);
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_1000460E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100114158);
  }
  return result;
}

uint64_t sub_1000469F4()
{
  return sub_100003D3C(&qword_100113068, (uint64_t (*)(uint64_t))sub_10002BE28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_100046A10()
{
  return sub_100003D3C(&qword_100113060, (uint64_t (*)(uint64_t))sub_10002BDF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
}

void sub_100046A2C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
}

void sub_100046A48(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
}

void sub_100046A64(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
}

__n128 sub_100046A84@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __n128 result;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _OWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _OWORD v59[2];
  uint64_t v60;

  v53 = a7;
  v58 = a6;
  v57 = a5;
  v56 = a4;
  v54 = a2;
  v55 = a3;
  v52 = a1;
  sub_10002FCAC(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PreparedSparkline(0);
  v50 = *(_QWORD *)(v14 - 8);
  v51 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Color.RGBColorSpace(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_1001141D8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v22);
  v24 = (char *)&v50 - v23;
  v25 = (int *)type metadata accessor for SparklineView(0);
  v26 = (_QWORD *)(a8 + v25[11]);
  *v26 = swift_getKeyPath(&unk_1000DDC70);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v28 = swift_storeEnumTagMultiPayload(v26, v27, 0);
  v29 = v25[12];
  v30 = static Font.Weight.medium.getter(v28);
  v31 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v24, 1, 1, v31);
  v32 = static Font.system(size:weight:design:)(*(_QWORD *)&v30, 0, v24, 8.0);
  sub_100028528((uint64_t)v24, &qword_1001141D8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  *(_QWORD *)(a8 + v29) = v32;
  v33 = v25[13];
  v34 = enum case for Color.RGBColorSpace.sRGB(_:);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 104);
  v35(v21, enum case for Color.RGBColorSpace.sRGB(_:), v18);
  *(_QWORD *)(a8 + v33) = Color.init(_:red:green:blue:opacity:)(v21, 0.337254902, 0.337254902, 0.356862745, 1.0);
  v36 = a8 + v25[14];
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v59, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v37 = v59[1];
  *(_OWORD *)v36 = v59[0];
  *(_OWORD *)(v36 + 16) = v37;
  *(_QWORD *)(v36 + 32) = v60;
  v38 = v25[15];
  v35(v21, v34, v18);
  v39 = v21;
  v40 = v52;
  *(_QWORD *)(a8 + v38) = Color.init(_:red:green:blue:opacity:)(v39, 0.203921569, 0.203921569, 0.231372549, 1.0);
  sub_10001DE2C(v40, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_10002FCAC);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v13, 1, v51) == 1)
  {
    sub_100068B54(v17);
    sub_10001DF70(v40, (uint64_t (*)(_QWORD))sub_10002FCAC);
    sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_10002FCAC);
  }
  else
  {
    sub_10001DF70(v40, (uint64_t (*)(_QWORD))sub_10002FCAC);
    sub_10000ED3C((uint64_t)v13, (uint64_t)v17, type metadata accessor for PreparedSparkline);
  }
  v41 = v53 & 1;
  sub_10000ED3C((uint64_t)v17, a8, type metadata accessor for PreparedSparkline);
  v42 = a8 + v25[5];
  v43 = v54;
  v44 = v54[1];
  *(_OWORD *)v42 = *v54;
  *(_OWORD *)(v42 + 16) = v44;
  *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
  v45 = a8 + v25[6];
  v46 = v55;
  result = *(__n128 *)v55;
  v48 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v55;
  *(_OWORD *)(v45 + 16) = v48;
  *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
  *(double *)(a8 + v25[7]) = a9;
  *(_BYTE *)(a8 + v25[8]) = v56 & 1;
  v49 = a8 + v25[9];
  *(_QWORD *)v49 = v57;
  *(_BYTE *)(v49 + 8) = v58;
  *(_BYTE *)(a8 + v25[10]) = v41;
  return result;
}

uint64_t type metadata accessor for SparklineView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100114240, (uint64_t)&nominal type descriptor for SparklineView);
}

uint64_t sub_100046E7C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  if (qword_100111588 != -1)
    swift_once(&qword_100111588, sub_1000B0BAC);
  sub_10001DB68((uint64_t)qword_100126A08, (uint64_t)v6);
  v0 = v7;
  v1 = v8;
  sub_100007184(v6, v7);
  v2 = sub_1000280C4();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v2, v2, v0, v1);
  if (v5)
  {
    sub_10001D968(&v4, (uint64_t)&unk_100114170);
    return sub_100007164(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100046F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  double v55;
  double *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t OpaqueTypeConformance2;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t KeyPath;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  char v156[8];
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD v162[2];

  v152 = a1;
  v151 = type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(0);
  __chkstk_darwin(v151);
  v150 = (uint64_t)&v112 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v148 = *(_QWORD *)(v3 - 8);
  v149 = v3;
  v4 = __chkstk_darwin(v3);
  v147 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LayoutDirection(0, v4);
  v145 = *(_QWORD *)(v6 - 8);
  v146 = v6;
  __chkstk_darwin(v6);
  v144 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for SparklineView(0);
  v131 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v132 = v8;
  v134 = (uint64_t)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_1001142A0, (uint64_t (*)(uint64_t))&type metadata accessor for ScaleType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v11 = (char *)&v112 - v10;
  sub_10004D11C(0);
  v13 = *(uint64_t **)(v12 - 8);
  v153 = v12;
  v154 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004DDEC(0);
  v117 = v16;
  v116 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004DEF4(0);
  v120 = v19;
  v119 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v118 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004E080(0);
  v123 = v21;
  v122 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v121 = (char *)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004E878(0);
  v126 = v23;
  v125 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v124 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004EBDC(0);
  v130 = v25;
  v129 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v127 = (char *)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_1001144A8, v27, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v133 = v28;
  __chkstk_darwin(v28);
  v128 = (char *)&v112 - v29;
  sub_10004EEF4(0);
  v141 = v30;
  v137 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v135 = (char *)&v112 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F1F4(0);
  v143 = v32;
  v142 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v139 = (char *)&v112 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F2F0(0);
  v140 = v34;
  v138 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v136 = (char *)&v112 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = v1;
  sub_10002BC34(0, &qword_1001142B0, (uint64_t (*)(uint64_t))sub_10004D19C, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for BuilderConditional);
  v37 = v36;
  v38 = sub_10004DCCC();
  Chart.init(content:)(sub_10004F410, v156, v37, v38);
  v39 = (int *)type metadata accessor for PreparedSparkline(0);
  v40 = v1 + v39[5];
  v41 = type metadata accessor for ScaleType(0);
  v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v113(v11, 1, 1, v41);
  sub_100022800(0);
  v43 = v42;
  v44 = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v45 = sub_10004DE9C();
  v115 = v18;
  v46 = v40;
  v47 = v1;
  v48 = v153;
  v114 = v43;
  View.chartXScale<A>(domain:type:)(v46, v11, v153, v43, v44, v45);
  sub_100028528((uint64_t)v11, &qword_1001142A0, (uint64_t (*)(uint64_t))&type metadata accessor for ScaleType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v49 = v48;
  result = ((uint64_t (*)(char *, uint64_t))v154[1])(v15, v48);
  v51 = v47;
  if (*(_BYTE *)(v47 + *(int *)(v155 + 32)) != 1 || (v52 = v47 + v39[8], (*(_BYTE *)(v52 + 8) & 1) != 0))
  {
    v53 = (double *)(v47 + v39[7]);
    v54 = *v53;
    v55 = v53[1];
LABEL_9:
    *(double *)v162 = v54;
    *(double *)&v162[1] = v55;
    v113(v11, 1, 1, v41);
    sub_10002F488(0, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v58 = v57;
    v158 = v49;
    v159 = v114;
    v160 = v44;
    v161 = v45;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v60 = sub_10004E008();
    v61 = v118;
    v62 = v117;
    v63 = v115;
    View.chartYScale<A>(domain:type:)(v162, v11, v117, v58, OpaqueTypeConformance2, v60);
    sub_100028528((uint64_t)v11, &qword_1001142A0, (uint64_t (*)(uint64_t))&type metadata accessor for ScaleType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v64 = (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v63, v62);
    v154 = &v112;
    __chkstk_darwin(v64);
    *(&v112 - 2) = v51;
    sub_10004E204(0);
    v66 = v65;
    v158 = v62;
    v159 = v58;
    v160 = OpaqueTypeConformance2;
    v161 = v60;
    v67 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v68 = sub_10004EB5C(&qword_100114450, (uint64_t (*)(uint64_t))sub_10004E204, (void (*)(void))sub_10004E85C, (uint64_t)&protocol conformance descriptor for <A> A?);
    v69 = v121;
    v70 = v120;
    View.chartXAxis<A>(content:)(sub_10004F418, &v112 - 4, v120, v66, v67, v68);
    v71 = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v61, v70);
    __chkstk_darwin(v71);
    *(&v112 - 2) = v51;
    sub_10004EA54(0);
    v73 = v72;
    v158 = v70;
    v159 = v66;
    v160 = v67;
    v161 = v68;
    v74 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v75 = sub_10004EB5C(&qword_100114478, (uint64_t (*)(uint64_t))sub_10004EA54, (void (*)(void))sub_10004EBC0, (uint64_t)&protocol conformance descriptor for <A> A?);
    v76 = v124;
    v77 = v123;
    View.chartYAxis<A>(content:)(sub_10004F420, &v112 - 4, v123, v73, v74, v75);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v69, v77);
    v78 = v134;
    sub_10001DE2C(v51, v134, type metadata accessor for SparklineView);
    v79 = *(unsigned __int8 *)(v131 + 80);
    v80 = (v79 + 16) & ~v79;
    v81 = swift_allocObject(&unk_1001056A0, v80 + v132, v79 | 7);
    sub_10000ED3C(v78, v81 + v80, type metadata accessor for SparklineView);
    sub_10004EDFC(0);
    v83 = v82;
    v158 = v77;
    v159 = v73;
    v160 = v74;
    v161 = v75;
    v84 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v85 = sub_10004EE58();
    v86 = v127;
    v87 = v126;
    View.chartPlotStyle<A>(content:)(sub_10004F42C, v81, v126, v83, v84, v85);
    swift_release(v81);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v76, v87);
    KeyPath = swift_getKeyPath(&unk_1000DDD58);
    v90 = v144;
    v89 = v145;
    v91 = v146;
    (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v144, enum case for LayoutDirection.leftToRight(_:), v146);
    v92 = v133;
    v93 = (uint64_t)v128;
    v94 = (uint64_t *)&v128[*(int *)(v133 + 36)];
    sub_10004EED8(0);
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))((char *)v94 + *(int *)(v95 + 28), v90, v91);
    *v94 = KeyPath;
    v96 = v129;
    v97 = v130;
    (*(void (**)(uint64_t, char *, uint64_t))(v129 + 16))(v93, v86, v130);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
    v98 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v86, v97);
    v99 = v147;
    static AccessibilityChildBehavior.ignore.getter(v98);
    v100 = sub_10004EF88();
    v101 = v135;
    View.accessibilityElement(children:)(v99, v92, v100);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v99, v149);
    sub_10004F47C(v93);
    v102 = v150;
    sub_10001DE2C(v51, v150, type metadata accessor for PreparedSparkline);
    v158 = v92;
    v159 = v100;
    v103 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v104 = sub_100003D3C(&qword_1001144D8, type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable, (uint64_t)&unk_1000DDE90);
    v105 = v139;
    v106 = v141;
    v107 = v151;
    View.accessibilityChartDescriptor<A>(_:)(v102, v141, v151, v103, v104);
    sub_10001DF70(v102, type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v101, v106);
    v108 = *(unsigned __int8 *)(v51 + *(int *)(v155 + 40));
    v158 = v106;
    v159 = v107;
    v160 = v103;
    v161 = v104;
    v109 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.accessibilityChartDescriptor<A>(_:)>>, 1);
    v110 = v136;
    v111 = v143;
    View.widgetAccentable(_:)(v108, v143, v109);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v105, v111);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v138 + 32))(v152, v110, v140);
  }
  v55 = *(double *)v52;
  v56 = (double *)(v47 + v39[7]);
  v54 = *v56;
  if (v55 < *v56)
    v54 = v55;
  if (v55 <= v56[1])
    v55 = v56[1];
  if (v54 <= v55)
    goto LABEL_9;
  __break(1u);
  return result;
}

uint64_t sub_100047B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  _QWORD v32[2];
  _BYTE v33[16];
  uint64_t v34;
  _QWORD v35[2];

  sub_10004D290(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D19C(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v32 - v15;
  v17 = type metadata accessor for SparklineView(0);
  v32[1] = v32;
  v18 = *(_BYTE *)(a1 + *(int *)(v17 + 40));
  v34 = a1;
  sub_10004D2B4(0);
  v20 = v19;
  v21 = sub_10004D9C4();
  if ((v18 & 1) != 0)
  {
    Plot.init(content:)(sub_10004FA4C, v33, v20, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v8, v5);
    sub_10002BC34(0, &qword_100114528, (uint64_t (*)(uint64_t))sub_10004D19C, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for BuilderConditional.Storage);
    swift_storeEnumTagMultiPayload(a2, v22, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    Plot.init(content:)(sub_1000508EC, v33, v20, v21);
    sub_10004DC24(0);
    v32[0] = v24;
    v25 = sub_100003D3C(&qword_100114388, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t)&protocol conformance descriptor for Plot<A>);
    sub_10004DCB0(255);
    v26 = a2;
    v28 = v27;
    v29 = sub_100003D3C(&qword_100114380, (uint64_t (*)(uint64_t))sub_10004DCB0, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    v35[0] = v28;
    v35[1] = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v35, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    ChartContent.compositingLayer<A>(style:)(sub_100047DB4, 0, v5, v32[0], v25, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v13, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v26, v16, v10);
    sub_10002BC34(0, &qword_100114528, (uint64_t (*)(uint64_t))sub_10004D19C, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for BuilderConditional.Storage);
    swift_storeEnumTagMultiPayload(v26, v31, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
}

uint64_t sub_100047DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004DCB0(0);
  v1 = v0;
  v2 = sub_100003D3C(&qword_100114380, (uint64_t (*)(uint64_t))sub_10004DCB0, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
  return View.widgetAccentable(_:)(1, v1, v2);
}

uint64_t sub_100047E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;

  v94 = a1;
  v90 = a2;
  v2 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v2);
  v84 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_1001144F8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v83 = (char *)&v76 - v6;
  v7 = type metadata accessor for AxisMarkValues(0, v5);
  v8 = __chkstk_darwin(v7);
  v82 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AxisMarkPosition(0, v8);
  __chkstk_darwin(v10);
  v89 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for SparklineView(0);
  v81 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v79 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = v12;
  __chkstk_darwin(v13);
  v93 = (char *)&v76 - v14;
  v96 = type metadata accessor for RedactionReasons(0);
  v98 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v95 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v76 - v17;
  v19 = type metadata accessor for TimeZone(0);
  v91 = *(_QWORD *)(v19 - 8);
  v92 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for Calendar(0);
  v88 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022800(0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Calendar.Component(0, v25);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v76 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DateBins(0, v30);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v76 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v29;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 104);
  v86 = enum case for Calendar.Component.hour(_:);
  v87 = v28;
  v85 = v38;
  ((void (*)(char *, __n128))v38)(v32, v35);
  v39 = type metadata accessor for PreparedSparkline(0);
  v40 = v94;
  v41 = sub_10001DE2C(v94 + *(int *)(v39 + 20), (uint64_t)v27, (uint64_t (*)(_QWORD))sub_100022800);
  static Calendar.current.getter(v41);
  v42 = *(int *)(v39 + 24);
  v43 = (uint64_t)v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v21, v40 + v42, v92);
  Calendar.timeZone.setter(v21);
  v44 = DateBins.init(unit:by:range:calendar:)(v32, 1, v27, v23);
  v45 = DateBins.thresholds.getter(v44);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v33);
  v46 = *(_QWORD *)(v45 + 16);
  swift_bridgeObjectRelease(v45);
  v47 = sub_10004623C(v18);
  v48 = v95;
  static RedactionReasons.placeholder.getter(v47);
  v49 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  v50 = v96;
  LOBYTE(v45) = dispatch thunk of SetAlgebra.isSuperset(of:)(v48, v96, v49);
  v51 = *(void (**)(char *, uint64_t))(v98 + 8);
  v51(v48, v50);
  v51(v18, v50);
  v52 = v40;
  sub_10001DE2C(v40, v43, type metadata accessor for SparklineView);
  if ((v45 & 1) != 0)
  {
    sub_10001DF70(v43, type metadata accessor for SparklineView);
    v53 = v90;
  }
  else
  {
    v54 = v86;
    v55 = v85;
    v56 = v87;
    v57 = v88;
    v58 = v89;
    v59 = *(_QWORD *)(*(_QWORD *)v43 + 16);
    v60 = sub_10001DF70(v43, type metadata accessor for SparklineView);
    v53 = v90;
    if (v59)
    {
      v98 = v46 / 3;
      static AxisMarkPosition.bottom.getter(v60);
      v61 = v32;
      v55(v32, v54, v56);
      v62 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v83, 1, 1, v77);
      v63 = v82;
      static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)(v61, 1, 2, 1, v62);
      sub_100028528(v62, &qword_1001144F8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v61, v56);
      v64 = v79;
      sub_10001DE2C(v52, v79, type metadata accessor for SparklineView);
      v65 = *(unsigned __int8 *)(v81 + 80);
      v66 = (v65 + 24) & ~v65;
      v67 = swift_allocObject(&unk_1001056F0, v66 + v80, v65 | 7);
      *(_QWORD *)(v67 + 16) = v98;
      v68 = sub_10000ED3C(v64, v67 + v66, type metadata accessor for SparklineView);
      v69 = v84;
      static AxisMarkPreset.automatic.getter(v68);
      sub_10004E244(0);
      v71 = v70;
      v72 = sub_10004E618();
      AxisMarks.init(preset:position:values:content:)(v69, v58, v63, sub_10004F90C, v67, v71, v72);
      sub_10004E220(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v53, 0, 1, v73);
    }
  }
  sub_10004E220(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v53, 1, 1, v75);
}

uint64_t sub_100048454@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  int *v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t OpaqueTypeConformance2;
  char *v123;
  uint64_t (*v124)(_QWORD, _QWORD, _QWORD);
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  __int128 *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  char *v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  char *v143;
  void (*v144)(char *, char *, uint64_t);
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t);
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(_QWORD, _QWORD, _QWORD);
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v207 = a2;
  v202 = a3;
  sub_10004F95C(0);
  v201 = v4;
  __chkstk_darwin(v4);
  v200 = (uint64_t)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F9C8(0);
  v196 = v6;
  v7 = __chkstk_darwin(v6);
  v195 = (char *)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisTick.Length(0, v7);
  __chkstk_darwin(v9);
  v187 = (char *)&v161 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for AxisTick(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004E594(0, &qword_100114428, v12, (uint64_t)&protocol witness table for AxisTick);
  v194 = v13;
  v192 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v193 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v188 = (char *)&v161 - v17;
  v18 = type metadata accessor for AxisValueLabelOrientation(0, v16);
  v19 = __chkstk_darwin(v18);
  v181 = (char *)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AxisValueLabelCollisionResolution(0, v19);
  __chkstk_darwin(v21);
  v178 = (char *)&v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F488(0, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
  v183 = v23;
  v182 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v179 = (char *)&v161 - v24;
  sub_10004E498(0);
  v185 = v25;
  v184 = *((_QWORD *)v25 - 1);
  __chkstk_darwin(v25);
  v180 = (char *)&v161 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004E3C4(0);
  v186 = v27;
  v206 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v208 = (char *)&v161 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v29);
  v205 = (char *)&v161 - v31;
  v177 = (void (*)(char *, uint64_t))type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle(0, v30);
  v176 = *((_QWORD *)v177 - 1);
  v32 = __chkstk_darwin(v177);
  v173 = (char *)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for Date.FormatStyle.Symbol.Hour(0, v32);
  v174 = *(_QWORD *)(v175 - 8);
  v34 = __chkstk_darwin(v175);
  v172 = (char *)&v161 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for FormatStyleCapitalizationContext(0, v34);
  __chkstk_darwin(v36);
  v171 = (char *)&v161 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Locale(0);
  __chkstk_darwin(v38);
  v170 = (char *)&v161 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for TimeZone(0);
  v165 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v168 = (char *)&v161 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v41);
  v166 = (char *)&v161 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100114510, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle.TimeStyle, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v43);
  v163 = (char *)&v161 - v44;
  sub_10000EDE8(0, &qword_100114518, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle.DateStyle, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v46 = __chkstk_darwin(v45);
  v162 = (char *)&v161 - v47;
  v204 = type metadata accessor for Date.FormatStyle(0, v46);
  v164 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v169 = (char *)&v161 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v203 = (char *)&v161 - v50;
  sub_10004E320(0);
  __chkstk_darwin(v51);
  v53 = (char *)&v161 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v198 = (uint64_t)&v161 - v55;
  v56 = type metadata accessor for AxisGridLine(0);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v59 = (char *)&v161 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004E594(0, &qword_1001143F0, v60, (uint64_t)&protocol witness table for AxisGridLine);
  v62 = v61;
  v63 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v65 = (char *)&v161 - v64;
  sub_10004E2B4(0);
  __chkstk_darwin(v66);
  v197 = (uint64_t)&v161 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __chkstk_darwin(v68);
  v209 = (uint64_t)&v161 - v70;
  v71 = AxisValue.index.getter(v69);
  if (a1 >= 0)
    v72 = a1;
  else
    v72 = a1 + 1;
  v73 = v72 >> 1;
  v199 = v53;
  if (v73 == -1)
    goto LABEL_9;
  if (v73)
    v71 %= v73;
  if (!v71)
  {
LABEL_9:
    v76 = type metadata accessor for SparklineView(0);
    v77 = v207;
    v78 = (__int128 *)(v207 + *(int *)(v76 + 56));
    v80 = *((_QWORD *)v78 + 2);
    v79 = *((_QWORD *)v78 + 3);
    v81 = *((_QWORD *)v78 + 4);
    v215 = *v78;
    v216 = v80;
    v217 = v79;
    v218 = v81;
    v82 = swift_bridgeObjectRetain(v79);
    AxisGridLine.init(centered:stroke:)(2, &v215, v82);
    *(_QWORD *)&v211 = *(_QWORD *)(v77 + *(int *)(v76 + 60));
    AxisMark.foregroundStyle<A>(_:)(&v211, v56, &type metadata for Color, &protocol witness table for AxisGridLine, &protocol witness table for Color);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
    v75 = v209;
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v209, v65, v62);
    v74 = 0;
  }
  else
  {
    v74 = 1;
    v75 = v209;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v75, v74, 1, v62);
  v84 = AxisValue.index.getter(v83);
  if (a1 == -1)
    goto LABEL_15;
  if (a1)
    v84 %= a1;
  if (!v84)
  {
LABEL_15:
    v88 = type metadata accessor for Date.FormatStyle.DateStyle(0);
    v89 = v162;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v162, 1, 1, v88);
    v90 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
    v91 = v163;
    v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v163, 1, 1, v90);
    v93 = v166;
    static Calendar.current.getter(v92);
    v94 = type metadata accessor for PreparedSparkline(0);
    v95 = v207;
    v96 = v207 + *(int *)(v94 + 24);
    v97 = *(void (**)(char *, uint64_t, uint64_t))(v165 + 16);
    v98 = v168;
    v99 = v167;
    v97(v168, v96, v167);
    Calendar.timeZone.setter(v98);
    v100 = ((uint64_t (*)(char *, uint64_t, uint64_t))v97)(v98, v96, v99);
    v101 = v170;
    v102 = static Locale.autoupdatingCurrent.getter(v100);
    v103 = v171;
    static FormatStyleCapitalizationContext.unknown.getter(v102);
    v104 = v169;
    v105 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v89, v91, v101, v93, v98, v103);
    v106 = v173;
    static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(v105);
    v107 = v172;
    static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)(v106);
    (*(void (**)(char *, _QWORD *))(v176 + 8))(v106, v177);
    v108 = v203;
    Date.FormatStyle.hour(_:)(v107);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v107, v175);
    v109 = v164;
    v177 = *(void (**)(char *, uint64_t))(v164 + 8);
    v110 = v204;
    v177(v104, v204);
    v111 = (*(uint64_t (**)(char *, char *, uint64_t))(v109 + 16))(v104, v108, v110);
    v112 = v178;
    v113 = static AxisValueLabelCollisionResolution.automatic.getter(v111);
    v114 = v181;
    static AxisValueLabelOrientation.automatic.getter(v113);
    v115 = sub_100003D3C(&qword_100114520, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
    v116 = v179;
    AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(v104, 2, 0, 0, 1, 0, 0, 1, v112, 2, v114, 0x4000000000000000, 0, 0x3FF0000000000000, 0, v110, v115, &protocol witness table for Date);
    v117 = (int *)type metadata accessor for SparklineView(0);
    v118 = *(_QWORD *)(v95 + v117[12]);
    v119 = sub_10004E52C();
    v120 = v180;
    v121 = v183;
    AxisMark.font(_:)(v118, v183, v119);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v116, v121);
    v210 = *(_QWORD *)(v95 + v117[13]);
    *(_QWORD *)&v211 = v121;
    *((_QWORD *)&v211 + 1) = v119;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
    v123 = v208;
    v124 = v185;
    AxisMark.foregroundStyle<A>(_:)(&v210, v185, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
    (*(void (**)(char *, uint64_t (*)(_QWORD, _QWORD, _QWORD)))(v184 + 8))(v120, v124);
    v125 = v206;
    v185 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v206 + 32);
    v126 = v205;
    v127 = v186;
    v128 = v185(v205, v123, v186);
    v129 = v187;
    static AxisTick.Length.label(extendPastBy:)(v128, -2.0);
    v130 = (__int128 *)(v95 + v117[14]);
    v132 = *((_QWORD *)v130 + 2);
    v131 = *((_QWORD *)v130 + 3);
    v133 = *((_QWORD *)v130 + 4);
    v211 = *v130;
    v212 = v132;
    v213 = v131;
    v214 = v133;
    v134 = swift_bridgeObjectRetain(v131);
    v135 = v189;
    AxisTick.init(centered:length:stroke:)(2, v129, &v211, v134);
    v210 = *(_QWORD *)(v95 + v117[15]);
    v136 = v193;
    v137 = v191;
    AxisMark.foregroundStyle<A>(_:)(&v210, v191, &type metadata for Color, &protocol witness table for AxisTick, &protocol witness table for Color);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v135, v137);
    v138 = v192;
    v139 = *(void (**)(char *, char *, uint64_t))(v192 + 32);
    v140 = v188;
    v141 = v194;
    v139(v188, v136, v194);
    v142 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
    v143 = v208;
    v142(v208, v126, v127);
    v144 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
    v144(v136, v140, v141);
    v145 = v195;
    v142(v195, v143, v127);
    v146 = v196;
    v147 = &v145[*(int *)(v196 + 48)];
    v144(v147, v136, v141);
    v148 = (uint64_t)v199;
    v185(v199, v145, v127);
    v139((char *)(v148 + *(int *)(v146 + 48)), v147, v141);
    v149 = *(void (**)(char *, uint64_t))(v138 + 8);
    v149(v140, v141);
    v150 = *(void (**)(char *, uint64_t))(v206 + 8);
    v150(v205, v127);
    v177(v203, v204);
    v149(v136, v141);
    v151 = v127;
    v87 = v148;
    v150(v208, v151);
    sub_10004E33C(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 56))(v148, 0, 1, v152);
    v86 = v198;
    sub_10000ED3C(v148, v198, (uint64_t (*)(_QWORD))sub_10004E320);
  }
  else
  {
    sub_10004E33C(0);
    v86 = v198;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v198, 1, 1, v85);
    v87 = (uint64_t)v199;
  }
  v153 = v209;
  v154 = v197;
  sub_10001DE2C(v209, v197, (uint64_t (*)(_QWORD))sub_10004E2B4);
  sub_10001DE2C(v86, v87, (uint64_t (*)(_QWORD))sub_10004E320);
  sub_10004E6A8();
  v155 = v200;
  sub_10001DE2C(v154, v200, (uint64_t (*)(_QWORD))sub_10004E2B4);
  sub_10004EB5C(&qword_100114440, (uint64_t (*)(uint64_t))sub_10004E320, (void (*)(void))sub_10004E740, (uint64_t)&protocol conformance descriptor for <A> A?);
  v156 = v201;
  v157 = v155 + *(int *)(v201 + 48);
  sub_10001DE2C(v87, v157, (uint64_t (*)(_QWORD))sub_10004E320);
  v158 = v155;
  v159 = v202;
  sub_10000ED3C(v158, v202, (uint64_t (*)(_QWORD))sub_10004E2B4);
  sub_10000ED3C(v157, v159 + *(int *)(v156 + 48), (uint64_t (*)(_QWORD))sub_10004E320);
  sub_10001DF70(v86, (uint64_t (*)(_QWORD))sub_10004E320);
  sub_10001DF70(v153, (uint64_t (*)(_QWORD))sub_10004E2B4);
  sub_10001DF70(v87, (uint64_t (*)(_QWORD))sub_10004E320);
  return sub_10001DF70(v154, (uint64_t (*)(_QWORD))sub_10004E2B4);
}

uint64_t sub_100049338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;

  v59 = a2;
  v3 = type metadata accessor for AxisMarkPreset(0);
  v4 = __chkstk_darwin(v3);
  v58 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisMarkValues(0, v4);
  v7 = __chkstk_darwin(v6);
  v57 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AxisMarkPosition(0, v7);
  __chkstk_darwin(v9);
  v56 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SparklineView(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  v16 = (char *)&v56 - v15;
  v17 = type metadata accessor for RedactionReasons(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v56 - v22;
  v24 = sub_10004623C((char **)((char *)&v56 - v22));
  static RedactionReasons.placeholder.getter(v24);
  v25 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  LOBYTE(v11) = dispatch thunk of SetAlgebra.isSuperset(of:)(v20, v17, v25);
  v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v27 = v20;
  v28 = a1;
  v26(v27, v17);
  v26(v23, v17);
  sub_10001DE2C(a1, (uint64_t)v16, type metadata accessor for SparklineView);
  if ((v11 & 1) != 0)
  {
    sub_10001DF70((uint64_t)v16, type metadata accessor for SparklineView);
    v29 = v59;
  }
  else
  {
    v30 = v12;
    v31 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v33 = v56;
    v32 = v57;
    v34 = v58;
    v35 = *(_QWORD *)(*(_QWORD *)v16 + 16);
    v36 = sub_10001DF70((uint64_t)v16, type metadata accessor for SparklineView);
    v29 = v59;
    if (v35)
    {
      v37 = v33;
      static AxisMarkPosition.trailing.getter(v36);
      v60 = 0;
      v38 = sub_10004F4D8();
      v39 = v32;
      static AxisMarkValues.automatic<A>(minimumStride:desiredCount:roundLowerBound:roundUpperBound:)(&v60, 4, 0, 2, 2, &type metadata for Double, v38);
      sub_10001DE2C(v28, (uint64_t)v31, type metadata accessor for SparklineView);
      v40 = *(unsigned __int8 *)(v30 + 80);
      v41 = (v40 + 16) & ~v40;
      v42 = swift_allocObject(&unk_1001056C8, v41 + v13, v40 | 7);
      v43 = sub_10000ED3C((uint64_t)v31, v42 + v41, type metadata accessor for SparklineView);
      static AxisMarkPreset.automatic.getter(v43);
      sub_10004E3C4(0);
      v45 = v44;
      sub_10004E498(255);
      v47 = v46;
      sub_10002F488(255, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
      v49 = v48;
      v50 = sub_10004E52C();
      v60 = v49;
      v61 = (void *)v50;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
      v60 = v47;
      v61 = &type metadata for Color;
      v62 = OpaqueTypeConformance2;
      v63 = &protocol witness table for Color;
      v52 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
      AxisMarks.init(preset:position:values:content:)(v34, v37, v39, sub_10004F6C0, v42, v45, v52);
      sub_10004EA70(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v29, 0, 1, v53);
    }
  }
  sub_10004EA70(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v29, 1, 1, v55);
}

uint64_t sub_10004972C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t OpaqueTypeConformance2;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  __int128 v37;
  unint64_t v38;

  v32 = a2;
  v4 = type metadata accessor for AxisValueLabelOrientation(0, a3);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AxisValueLabelCollisionResolution(0, v5);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F488(0, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  sub_10004E498(0);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = xmmword_1000DCF00;
  v38 = 0xA300000000000000;
  v22 = static AxisValueLabelCollisionResolution.automatic.getter(v21);
  static AxisValueLabelOrientation.automatic.getter(v22);
  v23 = sub_10004F728();
  v31 = 1;
  v30 = 0;
  v29 = 2;
  AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(&v34, 2, 0, 0, 1, 0, 0, 1, v10, v29, v7, 0x4014000000000000, v30, 0, v31, &_s22StocksPriceFormatStyleVN, v23, &protocol witness table for Double);
  v24 = type metadata accessor for SparklineView(0);
  v25 = *(_QWORD *)(a1 + *(int *)(v24 + 48));
  v26 = sub_10004E52C();
  AxisMark.font(_:)(v25, v12, v26);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v33 = *(_QWORD *)(a1 + *(int *)(v24 + 52));
  v34 = v12;
  v35 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
  AxisMark.foregroundStyle<A>(_:)(&v33, v17, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

void sub_1000499A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = static Edge.Set.horizontal.getter();
  v7 = type metadata accessor for SparklineView(0);
  v8 = EdgeInsets.init(_all:)(*(double *)(a2 + *(int *)(v7 + 56)) * 0.5);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = type metadata accessor for ChartPlotContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a3, a1, v15);
  sub_10004EDFC(0);
  v17 = a3 + *(int *)(v16 + 36);
  *(_BYTE *)v17 = v6;
  *(double *)(v17 + 8) = v8;
  *(_QWORD *)(v17 + 16) = v10;
  *(_QWORD *)(v17 + 24) = v12;
  *(_QWORD *)(v17 + 32) = v14;
  *(_BYTE *)(v17 + 40) = 0;
}

uint64_t sub_100049A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for SparklineView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RedactionReasons(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - v10;
  v12 = sub_10004623C((uint64_t *)((char *)&v24 - v10));
  static RedactionReasons.placeholder.getter(v12);
  v13 = sub_100003D3C(&qword_100113080, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  LOBYTE(v2) = dispatch thunk of SetAlgebra.isSuperset(of:)(v8, v5, v13);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v14(v11, v5);
  sub_10001DE2C(v1, (uint64_t)v4, type metadata accessor for SparklineView);
  if ((v2 & 1) != 0)
  {
    sub_10001DF70((uint64_t)v4, type metadata accessor for SparklineView);
LABEL_8:
    if (qword_100111488 != -1)
      swift_once(&qword_100111488, sub_100046E7C);
    v19 = qword_100114188;
    v20 = unk_100114190;
    sub_100007184(qword_100114170, qword_100114188);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v20 + 16) + 424))(v19, *(_QWORD *)(v20 + 16));
    return Color.init(_:)(v18);
  }
  v15 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  sub_10001DF70((uint64_t)v4, type metadata accessor for SparklineView);
  if (!v15)
    goto LABEL_8;
  if ((*(_BYTE *)(v1 + *(int *)(type metadata accessor for PreparedSparkline(0) + 36)) & 1) != 0)
  {
    if (qword_100111488 != -1)
      swift_once(&qword_100111488, sub_100046E7C);
    v16 = qword_100114188;
    v17 = unk_100114190;
    sub_100007184(qword_100114170, qword_100114188);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 64))(v16, v17);
  }
  else
  {
    if (qword_100111488 != -1)
      swift_once(&qword_100111488, sub_100046E7C);
    v21 = qword_100114188;
    v22 = unk_100114190;
    sub_100007184(qword_100114170, qword_100114188);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 56))(v21, v22);
  }
  return Color.init(_:)(v18);
}

uint64_t sub_100049CC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t OpaqueTypeConformance2;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t KeyPath;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  int *v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  double v137;
  double *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  void (*v170)(char *, uint64_t);
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  double *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  void *v214;
  double v215;
  _OWORD v216[2];
  uint64_t v217;
  _OWORD v218[2];
  uint64_t v219;

  sub_10004D914(0);
  v182 = v4;
  v181 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v180 = (char *)&v172 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D86C(0);
  v185 = v6;
  v184 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v183 = (char *)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D798(0);
  v9 = v8;
  v187 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v188 = (char *)&v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v179 = (char *)&v172 - v12;
  __chkstk_darwin(v13);
  v186 = (char *)&v172 - v14;
  sub_10004FA54(0);
  __chkstk_darwin(v15);
  v177 = (char *)&v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v205 = (char *)&v172 - v18;
  __chkstk_darwin(v19);
  v192 = (char *)&v172 - v20;
  sub_10004FAB8(0);
  __chkstk_darwin(v21);
  v204 = (char *)&v172 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v191 = (char *)&v172 - v24;
  sub_10004D6CC(0);
  v195 = v25;
  v194 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v193 = (char *)&v172 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D638(0);
  v201 = v27;
  v199 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v197 = (char *)&v172 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D564(0);
  v203 = v29;
  v202 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v200 = (char *)&v172 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D46C(0);
  v209 = v31;
  v207 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v208 = (char *)&v172 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v206 = (char *)&v172 - v34;
  sub_10002F488(0, &qword_100114540, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for PlottableValue);
  __chkstk_darwin(v35);
  v37 = (char *)&v172 - v36;
  v38 = type metadata accessor for RuleMark(0);
  v173 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v40 = (char *)&v172 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D3F8(0);
  v176 = v41;
  v175 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v43 = (char *)&v172 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D34C(0);
  v45 = v44;
  v46 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v174 = (char *)&v172 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D330(0);
  __chkstk_darwin(v48);
  v178 = (uint64_t)&v172 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v210 = (uint64_t)&v172 - v51;
  v52 = type metadata accessor for PreparedSparkline(0);
  v53 = (double *)((char *)a1 + *(int *)(v52 + 32));
  v54 = *((_BYTE *)v53 + 8);
  v190 = a2;
  v189 = v9;
  v198 = v52;
  v196 = v53;
  if ((v54 & 1) != 0)
  {
    v55 = 1;
    goto LABEL_14;
  }
  v56 = v52;
  v57 = *v53;
  v58 = type metadata accessor for SparklineView(0);
  v59 = (double *)((char *)a1 + *(int *)(v56 + 28));
  v60 = *v59;
  if ((*((_BYTE *)a1 + *(int *)(v58 + 32)) & 1) != 0)
  {
    if (v57 < v60)
      v60 = v57;
    v61 = v59[1];
    if (v57 > v61)
      v61 = v57;
    if (v60 <= v61)
      goto LABEL_11;
    __break(1u);
  }
  v61 = v59[1];
LABEL_11:
  v55 = 1;
  if (v60 <= v57 && v57 <= v61)
  {
    v62 = v58;
    v63 = LocalizedStringKey.init(stringLiteral:)(0x656E696C65736142, 0xE800000000000000);
    v65 = v64;
    v67 = v66;
    *(double *)v218 = v57;
    static PlottableValue.value(_:_:)(v63);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v65);
    RuleMark.init<A>(xStart:xEnd:y:)(0, 1, 0, 1, v37, &type metadata for Double, &protocol witness table for Double);
    v68 = (char *)a1 + *(int *)(v62 + 24);
    v69 = *((_OWORD *)v68 + 1);
    v218[0] = *(_OWORD *)v68;
    v218[1] = v69;
    v219 = *((_QWORD *)v68 + 4);
    ChartContent.lineStyle(_:)(v218, v38, &protocol witness table for RuleMark);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v40, v38);
    v70 = sub_100049A54();
    v71 = Color.opacity(_:)(*(double *)((char *)a1 + *(int *)(v62 + 28)));
    swift_release(v70);
    v211 = v71;
    *(_QWORD *)&v216[0] = v38;
    *((_QWORD *)&v216[0] + 1) = &protocol witness table for RuleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v216, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v73 = v174;
    v74 = v176;
    ChartContent.foregroundStyle<A>(_:)(&v211, v176, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
    swift_release(v71);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v43, v74);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v210, v73, v45);
    v55 = 0;
  }
LABEL_14:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v210, v55, 1, v45);
  *(_QWORD *)&v216[0] = *a1;
  swift_bridgeObjectRetain(*(_QWORD *)&v216[0]);
  v75 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v77 = v76;
  v79 = v78;
  v81 = v80;
  KeyPath = swift_getKeyPath(&unk_1000DDD88);
  v83 = v191;
  static PlottableProjection.value(_:_:)(v75, v77, v79 & 1, v81, KeyPath, &protocol witness table for Date);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v77);
  swift_release(KeyPath);
  v84 = LocalizedStringKey.init(stringLiteral:)(0x6563697250, 0xE500000000000000);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v91 = swift_getKeyPath(&unk_1000DDDA8);
  v92 = v192;
  static PlottableProjection.value(_:_:)(v84, v86, v88 & 1, v90, v91, &protocol witness table for Double);
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v86);
  swift_release(v91);
  sub_10004D760(0);
  v94 = v93;
  v95 = type metadata accessor for Date(0);
  v96 = sub_100003D3C(&qword_100114318, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
  v97 = v193;
  v192 = v94;
  v191 = (char *)v95;
  v176 = v96;
  LinePlot.init<A, B, C>(_:x:y:)(v216, v83, v92, v94, v95, &type metadata for Double);
  v98 = (int *)type metadata accessor for SparklineView(0);
  v99 = (char *)a1 + v98[5];
  v217 = *((_QWORD *)v99 + 4);
  v100 = *((_OWORD *)v99 + 1);
  v216[0] = *(_OWORD *)v99;
  v216[1] = v100;
  v101 = sub_10004EB5C(&qword_100114320, (uint64_t (*)(uint64_t))sub_10004D6CC, (void (*)(void))sub_10004D77C, (uint64_t)&protocol conformance descriptor for <A> LinePlot<A>);
  v102 = v197;
  v103 = v195;
  ChartContent.lineStyle(_:)(v216, v195, v101);
  (*(void (**)(char *, uint64_t))(v194 + 8))(v97, v103);
  v104 = sub_100049A54();
  v215 = *(double *)&v104;
  v211 = v103;
  v212 = (void *)v101;
  v105 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
  v106 = v200;
  v107 = v201;
  ChartContent.foregroundStyle<A>(_:)(&v215, v201, &type metadata for Color, v105, &protocol witness table for Color);
  swift_release(v104);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v102, v107);
  v108 = (char *)a1 + v98[9];
  v109 = *(_QWORD *)v108;
  v110 = v108[8];
  v211 = v107;
  v212 = &type metadata for Color;
  v213 = v105;
  v214 = &protocol witness table for Color;
  v111 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v112 = v208;
  v113 = v203;
  ChartContent.interpolationMethod(_:)(v109, v110, v203, v111);
  (*(void (**)(char *, uint64_t))(v202 + 8))(v106, v113);
  (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v206, v112, v209);
  v211 = *a1;
  swift_bridgeObjectRetain(v211);
  v114 = LocalizedStringKey.init(stringLiteral:)(1702125892, 0xE400000000000000);
  v116 = v115;
  LOBYTE(v113) = v117;
  v119 = v118;
  v120 = swift_getKeyPath(&unk_1000DDD88);
  static PlottableProjection.value(_:_:)(v114, v116, v113 & 1, v119, v120, &protocol witness table for Date);
  swift_bridgeObjectRelease(v119);
  swift_bridgeObjectRelease(v116);
  swift_release(v120);
  v121 = LocalizedStringKey.init(stringLiteral:)(0x746E656964617247, 0xEC000000706F5420);
  v123 = v122;
  LOBYTE(v113) = v124;
  v126 = v125;
  v127 = swift_getKeyPath(&unk_1000DDDA8);
  static PlottableProjection.value(_:_:)(v121, v123, v113 & 1, v126, v127, &protocol witness table for Double);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v123);
  swift_release(v127);
  result = LocalizedStringKey.init(stringLiteral:)(0x746E656964617247, 0xEF6D6F74746F4220);
  v129 = result;
  v131 = v130;
  v133 = v132;
  v135 = v134;
  if (*((_BYTE *)a1 + v98[8]) != 1 || ((_BYTE)v196[1] & 1) != 0)
  {
    v136 = *(double *)((char *)a1 + *(int *)(v198 + 28));
LABEL_22:
    v215 = v136;
    v139 = type metadata accessor for PreparedSparkline.Entry(0);
    v140 = v177;
    static PlottableProjection.value(_:_:)(v129, v131, v133 & 1, v135, &v215, v139, &type metadata for Double, &protocol witness table for Double);
    swift_bridgeObjectRelease(v135);
    swift_bridgeObjectRelease(v131);
    v141 = v180;
    AreaPlot.init<A, B, C>(_:x:yStart:yEnd:)(&v211, v204, v205, v140, v192, &type metadata for Double, v191, v176, &protocol witness table for Double, &protocol witness table for Date);
    sub_1000505B0(0, (unint64_t *)&qword_100114548, (uint64_t)&type metadata for Color);
    v143 = swift_allocObject(v142, 48, 7);
    *(_OWORD *)(v143 + 16) = xmmword_1000DD060;
    v144 = sub_100049A54();
    v145 = Color.opacity(_:)(0.5);
    swift_release(v144);
    *(_QWORD *)(v143 + 32) = v145;
    v146 = sub_100049A54();
    v147 = Color.opacity(_:)(0.0);
    v148 = swift_release(v146);
    *(_QWORD *)(v143 + 40) = v147;
    v211 = v143;
    specialized Array._endMutation()(v148);
    v149 = Gradient.init(colors:)(v211);
    v211 = v149;
    v150 = sub_10004EB5C(&qword_100114350, (uint64_t (*)(uint64_t))sub_10004D914, (void (*)(void))sub_10004D9A8, (uint64_t)&protocol conformance descriptor for <A> AreaPlot<A>);
    v151 = v183;
    v152 = v182;
    ChartContent.foregroundStyle<A>(_:)(&v211, v182, &type metadata for Gradient, v150, &protocol witness table for Gradient);
    swift_bridgeObjectRelease(v149);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v141, v152);
    v153 = *(_QWORD *)v108;
    v154 = v108[8];
    v211 = v152;
    v212 = &type metadata for Gradient;
    v213 = v150;
    v214 = &protocol witness table for Gradient;
    v155 = swift_getOpaqueTypeConformance2(&v211, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v156 = v179;
    v157 = v153;
    v158 = v185;
    ChartContent.interpolationMethod(_:)(v157, v154, v185, v155);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v151, v158);
    v159 = v187;
    v160 = v186;
    v161 = v156;
    v162 = v189;
    (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v186, v161, v189);
    v163 = v210;
    v164 = v178;
    sub_10001DE2C(v210, v178, (uint64_t (*)(_QWORD))sub_10004D330);
    v211 = v164;
    v165 = v207;
    v167 = v208;
    v166 = v209;
    v168 = v206;
    (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v208, v206, v209);
    v212 = v167;
    v169 = v188;
    (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v188, v160, v162);
    v213 = (uint64_t)v169;
    sub_10004AC14(&v211, v190);
    v170 = *(void (**)(char *, uint64_t))(v159 + 8);
    v170(v160, v162);
    v171 = *(void (**)(char *, uint64_t))(v165 + 8);
    v171(v168, v166);
    sub_10001DF70(v163, (uint64_t (*)(_QWORD))sub_10004D330);
    v170(v169, v162);
    v171(v167, v166);
    return sub_10001DF70(v164, (uint64_t (*)(_QWORD))sub_10004D330);
  }
  v137 = *v196;
  v138 = (double *)((char *)a1 + *(int *)(v198 + 28));
  v136 = *v138;
  if (*v196 < *v138)
    v136 = *v196;
  if (v137 <= v138[1])
    v137 = v138[1];
  if (v136 <= v137)
    goto LABEL_22;
  __break(1u);
  return result;
}

uint64_t sub_10004AC14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_10004FB24(0);
  v5 = v4;
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004D330(0);
  sub_10004DB68();
  sub_10001DE2C(*a1, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_10004D330);
  sub_10004D46C(0);
  v9 = v8;
  sub_10004D564(255);
  sub_10004D638(255);
  sub_10004D6CC(255);
  sub_10004EB5C(&qword_100114320, (uint64_t (*)(uint64_t))sub_10004D6CC, (void (*)(void))sub_10004D77C, (uint64_t)&protocol conformance descriptor for <A> LinePlot<A>);
  v10 = &v7[*(int *)(v5 + 48)];
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1[1], v9);
  sub_10004D798(0);
  v13 = v12;
  sub_10004D86C(255);
  sub_10004D914(255);
  sub_10004EB5C(&qword_100114350, (uint64_t (*)(uint64_t))sub_10004D914, (void (*)(void))sub_10004D9A8, (uint64_t)&protocol conformance descriptor for <A> AreaPlot<A>);
  v14 = &v7[*(int *)(v5 + 64)];
  v15 = a1[2];
  v16 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, v15, v13);
  sub_10000ED3C((uint64_t)v7, a2, (uint64_t (*)(_QWORD))sub_10004D330);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2 + *(int *)(v5 + 48), v10, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2 + *(int *)(v5 + 64), v14, v13);
}

id sub_10004ADC0()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v0, "setDateStyle:", 0);
  result = objc_msgSend(v0, "setTimeStyle:", 1);
  qword_100114198 = (uint64_t)v0;
  return result;
}

id sub_10004AE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  id result;
  uint64_t v7;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  static Locale.current.getter(v4);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setLocale:", isa);

  result = objc_msgSend(v4, "setMaximumFractionDigits:", 4);
  qword_1001141A0 = (uint64_t)v4;
  return result;
}

void sub_10004AEF4()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v6._object = (void *)0x80000001000E5D60;
  v3._countAndFlagsBits = 0x7250206B636F7453;
  v3._object = (void *)0xEB00000000656369;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0xD00000000000002BLL;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v6);

  xmmword_1001141A8 = (__int128)v5;
}

void sub_10004AFBC()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v6._object = (void *)0x80000001000E5D20;
  v3._countAndFlagsBits = 1701669204;
  v3._object = (void *)0xE400000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0xD000000000000039;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v6);

  xmmword_1001141B8 = (__int128)v5;
}

void sub_10004B074()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0 = type metadata accessor for Localized();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v6._object = (void *)0x80000001000E5CE0;
  v3._countAndFlagsBits = 0x6563697250;
  v3._object = (void *)0xE500000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0xD000000000000039;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v6);

  xmmword_1001141C8 = (__int128)v5;
}

uint64_t sub_10004B130()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  NSString v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10002D554(0, &qword_1001145F0, AXChartDescriptor_ptr);
  if (qword_1001114A0 != -1)
    swift_once(&qword_1001114A0, sub_10004AEF4);
  v6 = *((_QWORD *)&xmmword_1001141A8 + 1);
  v31 = xmmword_1001141A8;
  sub_10002D554(0, &qword_1001145F8, AXNumericDataAxisDescriptor_ptr);
  v7 = qword_1001114A8;
  v30 = v6;
  swift_bridgeObjectRetain(v6);
  if (v7 != -1)
    swift_once(&qword_1001114A8, sub_10004AFBC);
  v8 = xmmword_1001141B8;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1001141B8 + 1));
  v9 = sub_10004B4C0();
  sub_10001DE2C((uint64_t)v1, (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1001057A8, v11 + v4, v10 | 7);
  sub_10000ED3C((uint64_t)v5, v12 + v11, type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable);
  v13 = AXNumericDataAxisDescriptor.init(title:range:gridlinePositions:valueDescriptionProvider:)(v8, *((_QWORD *)&v8 + 1), v9, sub_100050574, v12, 0.0, 1.0);
  if (qword_1001114B0 != -1)
    swift_once(&qword_1001114B0, sub_10004B074);
  v14 = xmmword_1001141C8;
  v15 = (double *)((char *)v1 + *(int *)(type metadata accessor for PreparedSparkline(0) + 28));
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(*((_QWORD *)&v14 + 1));
  v18 = AXNumericDataAxisDescriptor.init(title:range:gridlinePositions:valueDescriptionProvider:)(v14, *((_QWORD *)&v14 + 1), _swiftEmptyArrayStorage, sub_10004BCB8, 0, v16, v17);
  sub_1000505B0(0, (unint64_t *)&qword_100113E50, (uint64_t)&type metadata for Swift.AnyObject + 8);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1000DD6C0;
  v21 = *((_QWORD *)&xmmword_1001141A8 + 1);
  v22 = *v1;
  __chkstk_darwin(v20);
  *(&v30 - 2) = (uint64_t)v1;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v23 = sub_100014B08((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_1000505F4, (uint64_t)(&v30 - 4), v22);
  swift_bridgeObjectRelease(v22);
  v24 = objc_allocWithZone((Class)AXDataSeriesDescriptor);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  sub_10002D554(0, &qword_100114600, AXDataPoint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v27 = objc_msgSend(v24, "initWithName:isContinuous:dataPoints:", v25, 1, isa);

  *(_QWORD *)(v20 + 32) = v27;
  v33 = v20;
  specialized Array._endMutation()(v28);
  return AXChartDescriptor.init(title:summary:xAxis:yAxis:additionalAxes:series:)(v31, v30, 0, 0, v13, v18, _swiftEmptyArrayStorage, v33);
}

_QWORD *sub_10004B4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  void *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  double v62;
  double v63;
  double v64;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v0 = type metadata accessor for Calendar.SearchDirection(0);
  v76 = *(_QWORD *)(v0 - 8);
  v77 = v0;
  __chkstk_darwin(v0);
  v75 = (char *)&v68 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v85 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v73 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Calendar.MatchingPolicy(0);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  __chkstk_darwin(v3);
  v70 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v84 = (char *)&v68 - v6;
  v86 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v78 = (char *)&v68 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v68 - v13;
  v15 = type metadata accessor for Calendar(0);
  v81 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DateComponents(0, v16);
  v79 = *(_QWORD *)(v19 - 8);
  v80 = (void (*)(char *, uint64_t))v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = objc_msgSend((id)objc_opt_self(NSCalendar), "currentCalendar");
  static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10000EDE8(0, &qword_100114608, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v24 = v23;
  v26 = type metadata accessor for Calendar.Component(0, v25);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v24, v29 + *(_QWORD *)(v27 + 72), v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_1000DB170;
  v31 = v30 + v29;
  v32.n128_f64[0] = (*(double (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v31, enum case for Calendar.Component.hour(_:), v26);
  v33 = sub_100050610(v30, v32);
  swift_setDeallocating(v30);
  swift_arrayDestroy(v31, 1, v26);
  v34 = swift_deallocClassInstance(v30, 32, 7);
  static Date.now.getter(v34);
  Calendar.dateComponents(_:from:)(v33, v14);
  swift_bridgeObjectRelease(v33);
  v72 = v7;
  v35 = *(void (**)(char *, uint64_t))(v7 + 8);
  v35(v14, v86);
  v36 = *(uint64_t (**)(char *, uint64_t))(v81 + 8);
  v37 = v18;
  v81 = v15;
  v38 = v36(v18, v15);
  v39 = DateComponents.hour.getter(v38);
  LOBYTE(v31) = v40;
  v41 = (*(uint64_t (**)(char *, _QWORD))(v79 + 8))(v21, v80);
  if ((v31 & 1) != 0)
    return _swiftEmptyArrayStorage;
  v69 = v35;
  v42 = v37;
  static Calendar.current.getter(v41);
  v43 = v71 + *(int *)(type metadata accessor for PreparedSparkline(0) + 20);
  v44 = *(void (**)(char *, _QWORD, uint64_t))(v82 + 104);
  v79 = v39;
  v45 = v70;
  v44(v70, enum case for Calendar.MatchingPolicy.nextTime(_:), v83);
  v46 = v73;
  v47 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v73, enum case for Calendar.RepeatedTimePolicy.first(_:), v74);
  v49 = v76;
  v48 = v77;
  v50 = *(void (**)(char *, _QWORD, uint64_t))(v76 + 104);
  v80 = (void (*)(char *, uint64_t))v36;
  v51 = v75;
  v50(v75, enum case for Calendar.SearchDirection.forward(_:), v77);
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(v79, 0, 0, v43, v45, v46, v51);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
  v52 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t))(v85 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v45, v83);
  v80(v42, v81);
  v53 = v72;
  v54 = v86;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v52, 1, v86) == 1)
  {
    sub_100028528(v52, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return _swiftEmptyArrayStorage;
  }
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
  v57 = v78;
  v56(v78, v52, v54);
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v9, v57, v54);
  sub_100022800(0);
  v59 = v43 + *(int *)(v58 + 36);
  v55 = _swiftEmptyArrayStorage;
  if (Date.timeIntervalSince(_:)(v59) <= 0.0)
  {
    v60 = v69;
    do
    {
      v63 = Date.timeIntervalSince(_:)(v43);
      v64 = v63 / Date.timeIntervalSince(_:)(v43);
      if (v64 >= 0.0 && v64 <= 1.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
          v55 = sub_100073628(0, v55[2] + 1, 1, v55);
        v67 = v55[2];
        v66 = v55[3];
        if (v67 >= v66 >> 1)
          v55 = sub_100073628((_QWORD *)(v66 > 1), v67 + 1, 1, v55);
        v55[2] = v67 + 1;
        *(double *)&v55[v67 + 4] = v64;
      }
      v62 = static Double.oneHour.getter();
      Date.addingTimeInterval(_:)(v62);
      v60(v9, v54);
      v56(v9, (uint64_t)v14, v54);
    }
    while (Date.timeIntervalSince(_:)(v59) <= 0.0);
  }
  else
  {
    v60 = v69;
  }
  v60(v9, v54);
  v60(v78, v54);
  return v55;
}

uint64_t sub_10004BAF4(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  id v13;
  Class isa;
  void *v15;
  uint64_t v16;
  id v17;
  double v18;
  Class v19;
  id v20;
  uint64_t v21;
  uint64_t v23;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - v9;
  if (qword_100111490 != -1)
    swift_once(&qword_100111490, sub_10004ADC0);
  v11 = (void *)qword_100114198;
  v12 = type metadata accessor for PreparedSparkline(0);
  v13 = v11;
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "setTimeZone:", isa);

  v15 = (void *)qword_100114198;
  v16 = a1 + *(int *)(v12 + 20);
  sub_100022800(0);
  v17 = v15;
  v18 = Date.timeIntervalSince(_:)(v16) * a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
  Date.init(timeInterval:since:)(v7, v18);
  v19 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v20 = objc_msgSend(v17, "stringFromDate:", v19);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  return v21;
}

uint64_t sub_10004BCB8(double a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v9[2];

  if (qword_100111498 != -1)
    swift_once(&qword_100111498, sub_10004AE20);
  v2 = (void *)qword_1001141A0;
  v3 = objc_allocWithZone((Class)NSNumber);
  v4 = v2;
  v5 = objc_msgSend(v3, "initWithDouble:", a1);
  v6 = objc_msgSend(v4, "stringFromNumber:", v5);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  }
  else
  {
    v9[0] = 0;
    v9[1] = 0xE000000000000000;
    Double.write<A>(to:)(v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
    return v9[0];
  }
  return v7;
}

AXDataPoint sub_10004BDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, AXDataPoint *a3@<X8>)
{
  uint64_t v6;
  double v7;
  Swift::Double v8;
  uint64_t v9;
  AXDataPoint result;

  sub_10002D554(0, &qword_100114600, AXDataPoint_ptr);
  v6 = a2 + *(int *)(type metadata accessor for PreparedSparkline(0) + 20);
  v7 = Date.timeIntervalSince(_:)(v6);
  sub_100022800(0);
  v8 = v7 / Date.timeIntervalSince(_:)(v6);
  v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PreparedSparkline.Entry(0) + 20));
  result.super.isa = AXDataPoint.init(x:y:additionalValues:label:)(v8, *(Swift::Double_optional *)(&v9 - 1), 0, (Swift::String_optional)(unint64_t)_swiftEmptyArrayStorage).super.isa;
  a3->super.isa = result.super.isa;
  return result;
}

uint64_t sub_10004BE98()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_10004BEB8()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_10004BED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BEEC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_10004BEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_10004BF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BEEC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

_QWORD *sub_10004BF8C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for PreparedSparkline(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    v14 = swift_bridgeObjectRetain(v4);
    v13(v10, v11, v12, v14);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v13)(&v10[*(int *)(v15 + 36)], &v11[*(int *)(v15 + 36)], v12);
    v16 = v8[6];
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(_OWORD *)((char *)v7 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    v20 = v8[8];
    v21 = (char *)v7 + v20;
    v22 = (char *)a2 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *((_BYTE *)v7 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    v23 = a3[5];
    v24 = a3[6];
    v25 = (_QWORD *)((char *)v7 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    *v25 = *v26;
    v25[1] = v26[1];
    v27 = v26[3];
    v25[2] = v26[2];
    v25[3] = v27;
    v25[4] = v26[4];
    v28 = (_QWORD *)((char *)v7 + v24);
    v29 = (_QWORD *)((char *)a2 + v24);
    *v28 = *v29;
    v28[1] = v29[1];
    v30 = v29[3];
    v28[2] = v29[2];
    v28[3] = v30;
    v28[4] = v29[4];
    v31 = a3[8];
    *(_QWORD *)((char *)v7 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)v7 + v31) = *((_BYTE *)a2 + v31);
    v32 = a3[9];
    v33 = a3[10];
    v34 = (char *)v7 + v32;
    v35 = (char *)a2 + v32;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v36 = *((_BYTE *)a2 + v33);
    v34[8] = v35[8];
    *((_BYTE *)v7 + v33) = v36;
    v37 = a3[11];
    v38 = (_QWORD *)((char *)v7 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v41 = v40;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
    if (swift_getEnumCaseMultiPayload(v39, v41) == 1)
    {
      v42 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v38, v39, v42);
      v43 = 1;
    }
    else
    {
      v44 = *v39;
      *v38 = *v39;
      swift_retain(v44);
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v38, v41, v43);
    v45 = a3[12];
    v46 = a3[13];
    v47 = *(_QWORD *)((char *)a2 + v45);
    *(_QWORD *)((char *)v7 + v45) = v47;
    v48 = *(_QWORD *)((char *)a2 + v46);
    *(_QWORD *)((char *)v7 + v46) = v48;
    v49 = a3[14];
    v50 = a3[15];
    v51 = (_QWORD *)((char *)v7 + v49);
    v52 = (_QWORD *)((char *)a2 + v49);
    *v51 = *v52;
    v51[1] = v52[1];
    v53 = v52[3];
    v51[2] = v52[2];
    v51[3] = v53;
    v51[4] = v52[4];
    v4 = *(_QWORD *)((char *)a2 + v50);
    *(_QWORD *)((char *)v7 + v50) = v4;
    swift_retain(v47);
    swift_retain(v48);
    swift_bridgeObjectRetain(v53);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_10004C244(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease(*a1);
  v4 = type metadata accessor for PreparedSparkline(0);
  v5 = (char *)a1 + *(int *)(v4 + 20);
  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  sub_100022800(0);
  v7(&v5[*(int *)(v8 + 36)], v6);
  v9 = (char *)a1 + *(int *)(v4 + 24);
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[5] + 24));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6] + 24));
  v11 = (_QWORD *)((char *)a1 + a2[11]);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[12]));
  swift_release(*(_QWORD *)((char *)a1 + a2[13]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14] + 24));
  return swift_release(*(_QWORD *)((char *)a1 + a2[15]));
}

_QWORD *sub_10004C3A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *a2;
  *a1 = *a2;
  v7 = (int *)type metadata accessor for PreparedSparkline(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  v13 = swift_bridgeObjectRetain(v6);
  v12(v9, v10, v11, v13);
  sub_100022800(0);
  ((void (*)(char *, char *, uint64_t))v12)(&v9[*(int *)(v14 + 36)], &v10[*(int *)(v14 + 36)], v11);
  v15 = v7[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
  v19 = v7[8];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
  v22 = a3[5];
  v23 = a3[6];
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = (_QWORD *)((char *)a2 + v22);
  *v24 = *v25;
  v24[1] = v25[1];
  v26 = v25[3];
  v24[2] = v25[2];
  v24[3] = v26;
  v24[4] = v25[4];
  v27 = (_QWORD *)((char *)a1 + v23);
  v28 = (_QWORD *)((char *)a2 + v23);
  *v27 = *v28;
  v27[1] = v28[1];
  v29 = v28[3];
  v27[2] = v28[2];
  v27[3] = v29;
  v27[4] = v28[4];
  v30 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
  v31 = a3[9];
  v32 = a3[10];
  v33 = (char *)a1 + v31;
  v34 = (char *)a2 + v31;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = *((_BYTE *)a2 + v32);
  v33[8] = v34[8];
  *((_BYTE *)a1 + v32) = v35;
  v36 = a3[11];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v40 = v39;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  if (swift_getEnumCaseMultiPayload(v38, v40) == 1)
  {
    v41 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v37, v38, v41);
    v42 = 1;
  }
  else
  {
    v43 = *v38;
    *v37 = *v38;
    swift_retain(v43);
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v37, v40, v42);
  v44 = a3[12];
  v45 = a3[13];
  v46 = *(_QWORD *)((char *)a2 + v44);
  *(_QWORD *)((char *)a1 + v44) = v46;
  v47 = *(_QWORD *)((char *)a2 + v45);
  *(_QWORD *)((char *)a1 + v45) = v47;
  v48 = a3[14];
  v49 = a3[15];
  v50 = (_QWORD *)((char *)a1 + v48);
  v51 = (_QWORD *)((char *)a2 + v48);
  *v50 = *v51;
  v50[1] = v51[1];
  v52 = v51[3];
  v50[2] = v51[2];
  v50[3] = v52;
  v50[4] = v51[4];
  v53 = *(_QWORD *)((char *)a2 + v49);
  *(_QWORD *)((char *)a1 + v49) = v53;
  swift_retain(v46);
  swift_retain(v47);
  swift_bridgeObjectRetain(v52);
  swift_retain(v53);
  return a1;
}

_QWORD *sub_10004C638(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for PreparedSparkline(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24);
  v13(v10, v11, v12);
  sub_100022800(0);
  v13(&v10[*(int *)(v14 + 36)], &v11[*(int *)(v14 + 36)], v12);
  v15 = v8[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = v8[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v22 = v8[8];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v25;
  *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
  v26 = a3[5];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)((char *)a2 + v26);
  *((_DWORD *)v27 + 2) = *(_DWORD *)((char *)a2 + v26 + 8);
  *((_DWORD *)v27 + 3) = *(_DWORD *)((char *)a2 + v26 + 12);
  *((_QWORD *)v27 + 2) = *(_QWORD *)((char *)a2 + v26 + 16);
  v29 = *(_QWORD *)((char *)a2 + v26 + 24);
  v30 = *(_QWORD *)((char *)a1 + v26 + 24);
  *((_QWORD *)v27 + 3) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *((_QWORD *)v27 + 4) = *((_QWORD *)v28 + 4);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  *(_QWORD *)v32 = *(_QWORD *)((char *)a2 + v31);
  *((_DWORD *)v32 + 2) = *(_DWORD *)((char *)a2 + v31 + 8);
  *((_DWORD *)v32 + 3) = *(_DWORD *)((char *)a2 + v31 + 12);
  *((_QWORD *)v32 + 2) = *(_QWORD *)((char *)a2 + v31 + 16);
  v34 = *(_QWORD *)((char *)a2 + v31 + 24);
  v35 = *(_QWORD *)((char *)a1 + v31 + 24);
  *((_QWORD *)v32 + 3) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v36 = a3[9];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v37[8] = v38[8];
  *(_QWORD *)v37 = v39;
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  if (a1 != a2)
  {
    v40 = a3[11];
    v41 = (_QWORD *)((char *)a1 + v40);
    v42 = (_QWORD *)((char *)a2 + v40);
    sub_100028528((uint64_t)a1 + v40, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v44 = v43;
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v45 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v41, v42, v45);
      v46 = 1;
    }
    else
    {
      v47 = *v42;
      *v41 = *v42;
      swift_retain(v47);
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v44, v46);
  }
  v48 = a3[12];
  v49 = *(_QWORD *)((char *)a2 + v48);
  v50 = *(_QWORD *)((char *)a1 + v48);
  *(_QWORD *)((char *)a1 + v48) = v49;
  swift_retain(v49);
  swift_release(v50);
  v51 = a3[13];
  v52 = *(_QWORD *)((char *)a2 + v51);
  v53 = *(_QWORD *)((char *)a1 + v51);
  *(_QWORD *)((char *)a1 + v51) = v52;
  swift_retain(v52);
  swift_release(v53);
  v54 = a3[14];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  *(_QWORD *)v55 = *(_QWORD *)((char *)a2 + v54);
  *((_DWORD *)v55 + 2) = *(_DWORD *)((char *)a2 + v54 + 8);
  *((_DWORD *)v55 + 3) = *(_DWORD *)((char *)a2 + v54 + 12);
  *((_QWORD *)v55 + 2) = *(_QWORD *)((char *)a2 + v54 + 16);
  v57 = *(_QWORD *)((char *)a2 + v54 + 24);
  v58 = *(_QWORD *)((char *)a1 + v54 + 24);
  *((_QWORD *)v55 + 3) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
  v59 = a3[15];
  v60 = *(_QWORD *)((char *)a2 + v59);
  v61 = *(_QWORD *)((char *)a1 + v59);
  *(_QWORD *)((char *)a1 + v59) = v60;
  swift_retain(v60);
  swift_release(v61);
  return a1;
}

_QWORD *sub_10004C980(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for PreparedSparkline(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  sub_100022800(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
  v17 = v6[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
  v20 = a3[5];
  v21 = a3[6];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  v25 = (char *)a1 + v21;
  v26 = (char *)a2 + v21;
  v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  v28 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v28) = *((_BYTE *)a2 + v28);
  v29 = a3[9];
  v30 = a3[10];
  v31 = (char *)a1 + v29;
  v32 = (char *)a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v33 = *((_BYTE *)a2 + v30);
  v31[8] = v32[8];
  *((_BYTE *)a1 + v30) = v33;
  v34 = a3[11];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v38 = v37;
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v39 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v35, v36, v39);
    swift_storeEnumTagMultiPayload(v35, v38, 1);
  }
  else
  {
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  v40 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v40) = *(_QWORD *)((char *)a2 + v40);
  v41 = a3[14];
  v42 = a3[15];
  v43 = (char *)a1 + v41;
  v44 = (char *)a2 + v41;
  v45 = *((_OWORD *)v44 + 1);
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *((_OWORD *)v43 + 1) = v45;
  *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  return a1;
}

_QWORD *sub_10004CBB0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = (int *)type metadata accessor for PreparedSparkline(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  sub_100022800(0);
  v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
  v14 = v7[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
  v18 = v7[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
  v21 = a3[5];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)((char *)a2 + v21 + 8);
  *v22 = *(_QWORD *)((char *)a2 + v21);
  v22[1] = v24;
  v22[2] = *(_QWORD *)((char *)a2 + v21 + 16);
  v25 = *(_QWORD *)((char *)a1 + v21 + 24);
  v22[3] = *(_QWORD *)((char *)a2 + v21 + 24);
  swift_bridgeObjectRelease(v25);
  v22[4] = *((_QWORD *)v23 + 4);
  v26 = a3[6];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26 + 8);
  *v27 = *(_QWORD *)((char *)a2 + v26);
  v27[1] = v29;
  v27[2] = *(_QWORD *)((char *)a2 + v26 + 16);
  v30 = *(_QWORD *)((char *)a1 + v26 + 24);
  v27[3] = *(_QWORD *)((char *)a2 + v26 + 24);
  swift_bridgeObjectRelease(v30);
  v27[4] = *((_QWORD *)v28 + 4);
  v31 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  v32 = a3[9];
  v33 = a3[10];
  v34 = (char *)a1 + v32;
  v35 = (char *)a2 + v32;
  v34[8] = v35[8];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
  if (a1 != a2)
  {
    v36 = a3[11];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    sub_100028528((uint64_t)a1 + v36, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v40 = v39;
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v41 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v37, v38, v41);
      swift_storeEnumTagMultiPayload(v37, v40, 1);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
  }
  v42 = a3[12];
  v43 = *(_QWORD *)((char *)a1 + v42);
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  swift_release(v43);
  v44 = a3[13];
  v45 = *(_QWORD *)((char *)a1 + v44);
  *(_QWORD *)((char *)a1 + v44) = *(_QWORD *)((char *)a2 + v44);
  swift_release(v45);
  v46 = a3[14];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)((char *)a2 + v46 + 8);
  *v47 = *(_QWORD *)((char *)a2 + v46);
  v47[1] = v49;
  v47[2] = *(_QWORD *)((char *)a2 + v46 + 16);
  v50 = *(_QWORD *)((char *)a1 + v46 + 24);
  v47[3] = *(_QWORD *)((char *)a2 + v46 + 24);
  swift_bridgeObjectRelease(v50);
  v47[4] = *((_QWORD *)v48 + 4);
  v51 = a3[15];
  v52 = *(_QWORD *)((char *)a1 + v51);
  *(_QWORD *)((char *)a1 + v51) = *(_QWORD *)((char *)a2 + v51);
  swift_release(v52);
  return a1;
}

uint64_t sub_10004CE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004CE88);
}

uint64_t sub_10004CE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for PreparedSparkline(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_10000EDE8(0, &qword_1001141E0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10004CF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004CF58);
}

uint64_t sub_10004CF58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = type metadata accessor for PreparedSparkline(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    sub_10000EDE8(0, &qword_1001141E0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10004D018(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  v2 = type metadata accessor for PreparedSparkline(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    v6[2] = "(";
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[4] = &unk_1000DDCD8;
    v6[5] = &unk_1000DDCF0;
    v6[6] = &unk_1000DDCD8;
    sub_10000EDE8(319, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[10] = "(";
      v6[11] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 12, v6, a1 + 16);
    }
  }
}

uint64_t sub_10004D0F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E89F4, 1);
}

uint64_t type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001145B0, (uint64_t)&nominal type descriptor for SparklineViewAccessibilityChartDescriptorRepresentable);
}

void sub_10004D11C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001142A8)
  {
    sub_10002BC34(255, &qword_1001142B0, (uint64_t (*)(uint64_t))sub_10004D19C, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for BuilderConditional);
    v3 = v2;
    v4 = sub_10004DCCC();
    v5 = type metadata accessor for Chart(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001142A8);
  }
}

void sub_10004D19C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!qword_1001142B8)
  {
    sub_10004D290(255);
    v3 = v2;
    sub_10004DC24(255);
    v5 = v4;
    v6 = sub_100003D3C(&qword_100114388, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t)&protocol conformance descriptor for Plot<A>);
    sub_10004DCB0(255);
    v11 = v7;
    v12 = sub_100003D3C(&qword_100114380, (uint64_t (*)(uint64_t))sub_10004DCB0, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v11 = v3;
    v12 = v5;
    v13 = v6;
    v14 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v11, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001142B8);
  }
}

void sub_10004D290(uint64_t a1)
{
  sub_10001D724(a1, &qword_1001142C0, (uint64_t (*)(uint64_t))sub_10004D2B4, (uint64_t (*)(void))sub_10004D9C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Plot);
}

void sub_10004D2B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (!qword_1001142C8)
  {
    sub_10004D330(255);
    v7[0] = v2;
    sub_10004D46C(255);
    v7[1] = v3;
    sub_10004D798(255);
    v7[2] = v4;
    v5 = type metadata accessor for BuilderTuple(a1, 3, v7);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001142C8);
  }
}

void sub_10004D330(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001142D0, (uint64_t (*)(uint64_t))sub_10004D34C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10004D34C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  if (!qword_1001142D8)
  {
    sub_10004D3F8(255);
    v3 = v2;
    v7 = type metadata accessor for RuleMark(255);
    v8 = &protocol witness table for RuleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v7 = v3;
    v8 = &type metadata for Color;
    v9 = OpaqueTypeConformance2;
    v10 = &protocol witness table for Color;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v7, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 0);
    if (!v6)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001142D8);
  }
}

void sub_10004D3F8(uint64_t a1)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1001142E0)
  {
    v4[0] = type metadata accessor for RuleMark(255);
    v4[1] = &protocol witness table for RuleMark;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v4, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 0);
    if (!v3)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001142E0);
  }
}

void sub_10004D46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  if (!qword_1001142E8)
  {
    sub_10004D564(255);
    v3 = v2;
    sub_10004D638(255);
    v5 = v4;
    sub_10004D6CC(255);
    v11 = v6;
    v12 = (void *)sub_10004EB5C(&qword_100114320, (uint64_t (*)(uint64_t))sub_10004D6CC, (void (*)(void))sub_10004D77C, (uint64_t)&protocol conformance descriptor for <A> LinePlot<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v11 = v5;
    v12 = &type metadata for Color;
    v13 = OpaqueTypeConformance2;
    v14 = &protocol witness table for Color;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v11 = v3;
    v12 = (void *)v8;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v11, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001142E8);
  }
}

void sub_10004D564(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if (!qword_1001142F0)
  {
    sub_10004D638(255);
    v3 = v2;
    sub_10004D6CC(255);
    v8 = v4;
    v9 = (void *)sub_10004EB5C(&qword_100114320, (uint64_t (*)(uint64_t))sub_10004D6CC, (void (*)(void))sub_10004D77C, (uint64_t)&protocol conformance descriptor for <A> LinePlot<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v8 = v3;
    v9 = &type metadata for Color;
    v10 = OpaqueTypeConformance2;
    v11 = &protocol witness table for Color;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001142F0);
  }
}

void sub_10004D638(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1001142F8)
  {
    sub_10004D6CC(255);
    v5[0] = v2;
    v5[1] = sub_10004EB5C(&qword_100114320, (uint64_t (*)(uint64_t))sub_10004D6CC, (void (*)(void))sub_10004D77C, (uint64_t)&protocol conformance descriptor for <A> LinePlot<A>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001142F8);
  }
}

void sub_10004D6CC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114300, (uint64_t (*)(uint64_t))sub_10004D6E8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LinePlot);
}

void sub_10004D6E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100114308)
  {
    sub_10004D760(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100114318, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
    v5 = type metadata accessor for VectorizedLinePlotContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100114308);
  }
}

void sub_10004D760(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114310, type metadata accessor for PreparedSparkline.Entry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

uint64_t sub_10004D77C()
{
  return sub_100003D3C(&qword_100114328, (uint64_t (*)(uint64_t))sub_10004D6E8, (uint64_t)&protocol conformance descriptor for VectorizedLinePlotContent<A>);
}

void sub_10004D798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if (!qword_100114330)
  {
    sub_10004D86C(255);
    v3 = v2;
    sub_10004D914(255);
    v8 = v4;
    v9 = &type metadata for Gradient;
    v10 = sub_10004EB5C(&qword_100114350, (uint64_t (*)(uint64_t))sub_10004D914, (void (*)(void))sub_10004D9A8, (uint64_t)&protocol conformance descriptor for <A> AreaPlot<A>);
    v11 = &protocol witness table for Gradient;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v8 = v3;
    v9 = (void *)OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114330);
  }
}

void sub_10004D86C(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_100114338)
  {
    sub_10004D914(255);
    v5[0] = v2;
    v5[1] = &type metadata for Gradient;
    v5[2] = sub_10004EB5C(&qword_100114350, (uint64_t (*)(uint64_t))sub_10004D914, (void (*)(void))sub_10004D9A8, (uint64_t)&protocol conformance descriptor for <A> AreaPlot<A>);
    v5[3] = &protocol witness table for Gradient;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114338);
  }
}

void sub_10004D914(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114340, (uint64_t (*)(uint64_t))sub_10004D930, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AreaPlot);
}

void sub_10004D930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100114348)
  {
    sub_10004D760(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100114318, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
    v5 = type metadata accessor for VectorizedAreaPlotContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100114348);
  }
}

uint64_t sub_10004D9A8()
{
  return sub_100003D3C(&qword_100114358, (uint64_t (*)(uint64_t))sub_10004D930, (uint64_t)&protocol conformance descriptor for VectorizedAreaPlotContent<A>);
}

unint64_t sub_10004D9C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = qword_100114360;
  if (!qword_100114360)
  {
    sub_10004D2B4(255);
    v2 = v1;
    v20 = sub_10004DB68();
    sub_10004D564(255);
    v4 = v3;
    sub_10004D638(255);
    v6 = v5;
    sub_10004D6CC(255);
    v16 = v7;
    v17 = (void *)sub_10004EB5C(&qword_100114320, (uint64_t (*)(uint64_t))sub_10004D6CC, (void (*)(void))sub_10004D77C, (uint64_t)&protocol conformance descriptor for <A> LinePlot<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v16 = v6;
    v17 = &type metadata for Color;
    v18 = OpaqueTypeConformance2;
    v19 = &protocol witness table for Color;
    v9 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v16 = v4;
    v17 = (void *)v9;
    v21 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    sub_10004D86C(255);
    v11 = v10;
    sub_10004D914(255);
    v13 = v12;
    v14 = sub_10004EB5C(&qword_100114350, (uint64_t (*)(uint64_t))sub_10004D914, (void (*)(void))sub_10004D9A8, (uint64_t)&protocol conformance descriptor for <A> AreaPlot<A>);
    v16 = v13;
    v17 = &type metadata for Gradient;
    v18 = v14;
    v19 = &protocol witness table for Gradient;
    v15 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v16 = v11;
    v17 = (void *)v15;
    v22 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v2);
    atomic_store(result, (unint64_t *)&qword_100114360);
  }
  return result;
}

unint64_t sub_10004DB68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  result = qword_100114368;
  if (!qword_100114368)
  {
    sub_10004D330(255);
    v2 = v1;
    sub_10004D3F8(255);
    v4 = v3;
    v6 = type metadata accessor for RuleMark(255);
    v7 = &protocol witness table for RuleMark;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v6 = v4;
    v7 = &type metadata for Color;
    v8 = OpaqueTypeConformance2;
    v9 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(result, (unint64_t *)&qword_100114368);
  }
  return result;
}

void sub_10004DC24(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100114370)
  {
    sub_10004DCB0(255);
    v5[0] = v2;
    v5[1] = sub_100003D3C(&qword_100114380, (uint64_t (*)(uint64_t))sub_10004DCB0, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114370);
  }
}

void sub_10004DCB0(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114378, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for PlaceholderContentView);
}

unint64_t sub_10004DCCC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = qword_100114390;
  if (!qword_100114390)
  {
    sub_10002BC34(255, &qword_1001142B0, (uint64_t (*)(uint64_t))sub_10004D19C, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for BuilderConditional);
    v2 = v1;
    sub_10004D290(255);
    v4 = v3;
    sub_10004DC24(255);
    v6 = v5;
    v7 = sub_100003D3C(&qword_100114388, (uint64_t (*)(uint64_t))sub_10004D290, (uint64_t)&protocol conformance descriptor for Plot<A>);
    sub_10004DCB0(255);
    v10 = v8;
    v11 = sub_100003D3C(&qword_100114380, (uint64_t (*)(uint64_t))sub_10004DCB0, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v10 = v4;
    v11 = v6;
    v12 = v7;
    v13 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> BuilderConditional<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100114390);
  }
  return result;
}

void sub_10004DDEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_100114398)
  {
    sub_10004D11C(255);
    v3 = v2;
    sub_100022800(255);
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v7[3] = sub_10004DE9C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v7, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 0);
    if (!v6)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114398);
  }
}

unint64_t sub_10004DE9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001143A8;
  if (!qword_1001143A8)
  {
    sub_100022800(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001143A8);
  }
  return result;
}

void sub_10004DEF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  unint64_t v10;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (!qword_1001143B0)
  {
    sub_10004DDEC(255);
    v3 = v2;
    sub_10002F488(255, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v5 = v4;
    sub_10004D11C(255);
    v7 = v6;
    sub_100022800(255);
    v13 = v7;
    v14 = v8;
    v15 = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v16 = sub_10004DE9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v10 = sub_10004E008();
    v13 = v3;
    v14 = v5;
    v15 = OpaqueTypeConformance2;
    v16 = v10;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v13, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 0);
    if (!v12)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001143B0);
  }
}

unint64_t sub_10004E008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001143C0;
  if (!qword_1001143C0)
  {
    sub_10002F488(255, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001143C0);
  }
  return result;
}

void sub_10004E080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (!qword_1001143C8)
  {
    sub_10004DEF4(255);
    v3 = v2;
    sub_10004E204(255);
    v5 = v4;
    sub_10004DDEC(255);
    v7 = v6;
    sub_10002F488(255, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v9 = v8;
    sub_10004D11C(255);
    v11 = v10;
    sub_100022800(255);
    v19 = v11;
    v20 = v12;
    v21 = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v22 = sub_10004DE9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v19, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v14 = sub_10004E008();
    v19 = v7;
    v20 = v9;
    v21 = OpaqueTypeConformance2;
    v22 = v14;
    v15 = swift_getOpaqueTypeConformance2(&v19, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v16 = sub_10004EB5C(&qword_100114450, (uint64_t (*)(uint64_t))sub_10004E204, (void (*)(void))sub_10004E85C, (uint64_t)&protocol conformance descriptor for <A> A?);
    v19 = v3;
    v20 = v5;
    v21 = v15;
    v22 = v16;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v19, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 0);
    if (!v18)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001143C8);
  }
}

void sub_10004E204(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001143D0, (uint64_t (*)(uint64_t))sub_10004E220, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10004E220(uint64_t a1)
{
  sub_10001D724(a1, &qword_1001143D8, (uint64_t (*)(uint64_t))sub_10004E244, (uint64_t (*)(void))sub_10004E618, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for AxisMarks);
}

void sub_10004E244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if (!qword_1001143E0)
  {
    sub_10004E2B4(255);
    v6[0] = v2;
    sub_10004E320(255);
    v6[1] = v3;
    v4 = type metadata accessor for BuilderTuple(a1, 2, v6);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1001143E0);
  }
}

void sub_10004E2B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001143E8)
  {
    sub_10004E594(255, &qword_1001143F0, (uint64_t (*)(uint64_t))&type metadata accessor for AxisGridLine, (uint64_t)&protocol witness table for AxisGridLine);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001143E8);
  }
}

void sub_10004E320(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001143F8, (uint64_t (*)(uint64_t))sub_10004E33C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10004E33C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if (!qword_100114400)
  {
    sub_10004E3C4(255);
    v6[0] = v2;
    sub_10004E594(255, &qword_100114428, (uint64_t (*)(uint64_t))&type metadata accessor for AxisTick, (uint64_t)&protocol witness table for AxisTick);
    v6[1] = v3;
    v4 = type metadata accessor for BuilderTuple(a1, 2, v6);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100114400);
  }
}

void sub_10004E3C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if (!qword_100114408)
  {
    sub_10004E498(255);
    v3 = v2;
    sub_10002F488(255, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
    v8 = v4;
    v9 = (void *)sub_10004E52C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
    v8 = v3;
    v9 = &type metadata for Color;
    v10 = OpaqueTypeConformance2;
    v11 = &protocol witness table for Color;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114408);
  }
}

void sub_10004E498(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100114410)
  {
    sub_10002F488(255, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
    v5[0] = v2;
    v5[1] = sub_10004E52C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114410);
  }
}

unint64_t sub_10004E52C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114420;
  if (!qword_100114420)
  {
    sub_10002F488(255, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
    result = swift_getWitnessTable(&protocol conformance descriptor for AxisValueLabel<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114420);
  }
  return result;
}

void sub_10004E594(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v8;
  _QWORD v9[4];

  if (!*a2)
  {
    v9[0] = a3(255);
    v9[1] = &type metadata for Color;
    v9[2] = a4;
    v9[3] = &protocol witness table for Color;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v9, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 0);
    if (!v8)
      atomic_store(OpaqueTypeMetadata2, a2);
  }
}

unint64_t sub_10004E618()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100114430;
  if (!qword_100114430)
  {
    sub_10004E244(255);
    v2 = v1;
    sub_10004E6A8();
    sub_10004EB5C(&qword_100114440, (uint64_t (*)(uint64_t))sub_10004E320, (void (*)(void))sub_10004E740, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v2);
    atomic_store(result, (unint64_t *)&qword_100114430);
  }
  return result;
}

unint64_t sub_10004E6A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_100114438;
  if (!qword_100114438)
  {
    sub_10004E2B4(255);
    v2 = v1;
    v3[0] = type metadata accessor for AxisGridLine(255);
    v3[1] = &type metadata for Color;
    v3[2] = &protocol witness table for AxisGridLine;
    v3[3] = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v2);
    atomic_store(result, (unint64_t *)&qword_100114438);
  }
  return result;
}

unint64_t sub_10004E740()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  result = qword_100114448;
  if (!qword_100114448)
  {
    sub_10004E33C(255);
    v2 = v1;
    sub_10004E498(255);
    v4 = v3;
    sub_10002F488(255, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
    v7 = v5;
    v8 = (void *)sub_10004E52C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
    v7 = v4;
    v8 = &type metadata for Color;
    v9 = (void *)OpaqueTypeConformance2;
    v10 = &protocol witness table for Color;
    v11 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v7 = type metadata accessor for AxisTick(255);
    v8 = &type metadata for Color;
    v9 = &protocol witness table for AxisTick;
    v10 = &protocol witness table for Color;
    v12 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v2);
    atomic_store(result, (unint64_t *)&qword_100114448);
  }
  return result;
}

uint64_t sub_10004E85C()
{
  return sub_100003D3C(&qword_100114458, (uint64_t (*)(uint64_t))sub_10004E220, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
}

void sub_10004E878(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (!qword_100114460)
  {
    sub_10004E080(255);
    v3 = v2;
    sub_10004EA54(255);
    v5 = v4;
    sub_10004DEF4(255);
    v7 = v6;
    sub_10004E204(255);
    v9 = v8;
    sub_10004DDEC(255);
    v11 = v10;
    sub_10002F488(255, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v13 = v12;
    sub_10004D11C(255);
    v15 = v14;
    sub_100022800(255);
    v25 = v15;
    v26 = v16;
    v27 = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v28 = sub_10004DE9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v18 = sub_10004E008();
    v25 = v11;
    v26 = v13;
    v27 = OpaqueTypeConformance2;
    v28 = v18;
    v19 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v20 = sub_10004EB5C(&qword_100114450, (uint64_t (*)(uint64_t))sub_10004E204, (void (*)(void))sub_10004E85C, (uint64_t)&protocol conformance descriptor for <A> A?);
    v25 = v7;
    v26 = v9;
    v27 = v19;
    v28 = v20;
    v21 = swift_getOpaqueTypeConformance2(&v25, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v22 = sub_10004EB5C(&qword_100114478, (uint64_t (*)(uint64_t))sub_10004EA54, (void (*)(void))sub_10004EBC0, (uint64_t)&protocol conformance descriptor for <A> A?);
    v25 = v3;
    v26 = v5;
    v27 = v21;
    v28 = v22;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v25, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 0);
    if (!v24)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114460);
  }
}

void sub_10004EA54(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114468, (uint64_t (*)(uint64_t))sub_10004EA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10004EA70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  if (!qword_100114470)
  {
    sub_10004E3C4(255);
    v3 = v2;
    sub_10004E498(255);
    v5 = v4;
    sub_10002F488(255, &qword_100114418, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for AxisValueLabel);
    v11 = v6;
    v12 = (void *)sub_10004E52C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
    v11 = v5;
    v12 = &type metadata for Color;
    v13 = OpaqueTypeConformance2;
    v14 = &protocol witness table for Color;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
    v9 = type metadata accessor for AxisMarks(a1, v3, v8);
    if (!v10)
      atomic_store(v9, (unint64_t *)&qword_100114470);
  }
}

uint64_t sub_10004EB5C(unint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004EBC0()
{
  return sub_100003D3C(&qword_100114480, (uint64_t (*)(uint64_t))sub_10004EA70, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
}

void sub_10004EBDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if (!qword_100114488)
  {
    sub_10004E878(255);
    v30 = v2;
    sub_10004EDFC(255);
    v29 = v3;
    sub_10004E080(255);
    v5 = v4;
    sub_10004EA54(255);
    v7 = v6;
    sub_10004DEF4(255);
    v9 = v8;
    sub_10004E204(255);
    v11 = v10;
    sub_10004DDEC(255);
    v13 = v12;
    sub_10002F488(255, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v15 = v14;
    sub_10004D11C(255);
    v17 = v16;
    sub_100022800(255);
    v31 = v17;
    v32 = v18;
    v33 = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v34 = sub_10004DE9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v20 = sub_10004E008();
    v31 = v13;
    v32 = v15;
    v33 = OpaqueTypeConformance2;
    v34 = v20;
    v21 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v22 = sub_10004EB5C(&qword_100114450, (uint64_t (*)(uint64_t))sub_10004E204, (void (*)(void))sub_10004E85C, (uint64_t)&protocol conformance descriptor for <A> A?);
    v31 = v9;
    v32 = v11;
    v33 = v21;
    v34 = v22;
    v23 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v24 = sub_10004EB5C(&qword_100114478, (uint64_t (*)(uint64_t))sub_10004EA54, (void (*)(void))sub_10004EBC0, (uint64_t)&protocol conformance descriptor for <A> A?);
    v31 = v5;
    v32 = v7;
    v33 = v23;
    v34 = v24;
    v25 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v26 = sub_10004EE58();
    v31 = v30;
    v32 = v29;
    v33 = v25;
    v34 = v26;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v31, &opaque type descriptor for <<opaque return type of View.chartPlotStyle<A>(content:)>>, 0);
    if (!v28)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100114488);
  }
}

void sub_10004EDFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100114490)
  {
    v2 = type metadata accessor for ChartPlotContent(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for _PaddingLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100114490);
  }
}

unint64_t sub_10004EE58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100114498;
  if (!qword_100114498)
  {
    sub_10004EDFC(255);
    v2 = v1;
    sub_100003D3C(&qword_1001144A0, (uint64_t (*)(uint64_t))&type metadata accessor for ChartPlotContent, (uint64_t)&protocol conformance descriptor for ChartPlotContent);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100114498);
  }
  return result;
}

void sub_10004EED8(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001144B0, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
}

void sub_10004EEF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1001144B8)
  {
    sub_10002BC34(255, &qword_1001144A8, (uint64_t (*)(uint64_t))sub_10004EBDC, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v5[0] = v2;
    v5[1] = sub_10004EF88();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001144B8);
  }
}

unint64_t sub_10004EF88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  result = qword_1001144C0;
  if (!qword_1001144C0)
  {
    sub_10002BC34(255, &qword_1001144A8, (uint64_t (*)(uint64_t))sub_10004EBDC, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v29 = v1;
    sub_10004E878(255);
    v28 = v2;
    sub_10004EDFC(255);
    v4 = v3;
    sub_10004E080(255);
    v6 = v5;
    sub_10004EA54(255);
    v8 = v7;
    sub_10004DEF4(255);
    v10 = v9;
    sub_10004E204(255);
    v12 = v11;
    sub_10004DDEC(255);
    v14 = v13;
    sub_10002F488(255, (unint64_t *)&qword_1001143B8, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v16 = v15;
    sub_10004D11C(255);
    v18 = v17;
    sub_100022800(255);
    v30 = v18;
    v31 = v19;
    v32 = sub_100003D3C(&qword_1001143A0, (uint64_t (*)(uint64_t))sub_10004D11C, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v33 = sub_10004DE9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v21 = sub_10004E008();
    v30 = v14;
    v31 = v16;
    v32 = OpaqueTypeConformance2;
    v33 = v21;
    v22 = swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v23 = sub_10004EB5C(&qword_100114450, (uint64_t (*)(uint64_t))sub_10004E204, (void (*)(void))sub_10004E85C, (uint64_t)&protocol conformance descriptor for <A> A?);
    v30 = v10;
    v31 = v12;
    v32 = v22;
    v33 = v23;
    v24 = swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v25 = sub_10004EB5C(&qword_100114478, (uint64_t (*)(uint64_t))sub_10004EA54, (void (*)(void))sub_10004EBC0, (uint64_t)&protocol conformance descriptor for <A> A?);
    v30 = v6;
    v31 = v8;
    v32 = v24;
    v33 = v25;
    v26 = swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v27 = sub_10004EE58();
    v30 = v28;
    v31 = v4;
    v32 = v26;
    v33 = v27;
    swift_getOpaqueTypeConformance2(&v30, &opaque type descriptor for <<opaque return type of View.chartPlotStyle<A>(content:)>>, 1);
    sub_100003D3C(&qword_1001144C8, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v29);
    atomic_store(result, (unint64_t *)&qword_1001144C0);
  }
  return result;
}

void sub_10004F1F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!qword_1001144D0)
  {
    sub_10004EEF4(255);
    v3 = v2;
    v4 = type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(255);
    sub_10002BC34(255, &qword_1001144A8, (uint64_t (*)(uint64_t))sub_10004EBDC, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v10 = v5;
    v11 = sub_10004EF88();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v7 = sub_100003D3C(&qword_1001144D8, type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable, (uint64_t)&unk_1000DDE90);
    v10 = v3;
    v11 = v4;
    v12 = OpaqueTypeConformance2;
    v13 = v7;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v10, &opaque type descriptor for <<opaque return type of View.accessibilityChartDescriptor<A>(_:)>>, 0);
    if (!v9)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001144D0);
  }
}

void sub_10004F2F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!qword_1001144E0)
  {
    sub_10004F1F4(255);
    v3 = v2;
    sub_10004EEF4(255);
    v5 = v4;
    v6 = type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(255);
    sub_10002BC34(255, &qword_1001144A8, (uint64_t (*)(uint64_t))sub_10004EBDC, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v13 = v7;
    v14 = sub_10004EF88();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v9 = sub_100003D3C(&qword_1001144D8, type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable, (uint64_t)&unk_1000DDE90);
    v13 = v5;
    v14 = v6;
    v15 = OpaqueTypeConformance2;
    v16 = v9;
    v10 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of View.accessibilityChartDescriptor<A>(_:)>>, 1);
    v13 = v3;
    v14 = v10;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v13, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 0);
    if (!v12)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001144E0);
  }
}

uint64_t sub_10004F410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100047B04(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004F418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100047E18(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004F420@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100049338(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004F42C(uint64_t a1)
{
  return sub_10004F6CC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000499A4);
}

uint64_t sub_10004F438()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10004F458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004BEEC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

uint64_t sub_10004F47C(uint64_t a1)
{
  uint64_t v2;

  sub_10002BC34(0, &qword_1001144A8, (uint64_t (*)(uint64_t))sub_10004EBDC, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10004F4D8()
{
  unint64_t result;

  result = qword_1001144E8;
  if (!qword_1001144E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_1001144E8);
  }
  return result;
}

uint64_t sub_10004F520()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SparklineView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  v7 = type metadata accessor for PreparedSparkline(0);
  v8 = v0 + v4 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  sub_100022800(0);
  v10(v8 + *(int *)(v11 + 36), v9);
  v12 = v0 + v4 + *(int *)(v7 + 24);
  v13 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 24));
  v14 = (_QWORD *)(v0 + v4 + v1[11]);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  swift_release(*(_QWORD *)(v6 + v1[12]));
  swift_release(*(_QWORD *)(v6 + v1[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 24));
  swift_release(*(_QWORD *)(v6 + v1[15]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004F6C0(uint64_t a1)
{
  return sub_10004F6CC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10004972C);
}

uint64_t sub_10004F6CC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SparklineView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_10004F728()
{
  unint64_t result;

  result = qword_1001144F0;
  if (!qword_1001144F0)
  {
    result = swift_getWitnessTable(&unk_1000DE8D4, &_s22StocksPriceFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_1001144F0);
  }
  return result;
}

uint64_t sub_10004F76C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SparklineView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  v7 = type metadata accessor for PreparedSparkline(0);
  v8 = v0 + v4 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  sub_100022800(0);
  v10(v8 + *(int *)(v11 + 36), v9);
  v12 = v0 + v4 + *(int *)(v7 + 24);
  v13 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 24));
  v14 = (_QWORD *)(v0 + v4 + v1[11]);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  swift_release(*(_QWORD *)(v6 + v1[12]));
  swift_release(*(_QWORD *)(v6 + v1[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 24));
  swift_release(*(_QWORD *)(v6 + v1[15]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004F90C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SparklineView(0) - 8) + 80);
  return sub_100048454(*(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

void sub_10004F95C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100114500)
  {
    sub_10004E2B4(255);
    v3 = v2;
    sub_10004E320(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100114500);
  }
}

void sub_10004F9C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100114508)
  {
    sub_10004E3C4(255);
    v3 = v2;
    sub_10004E594(255, &qword_100114428, (uint64_t (*)(uint64_t))&type metadata accessor for AxisTick, (uint64_t)&protocol witness table for AxisTick);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100114508);
  }
}

uint64_t sub_10004FA4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100049CC8(*(_QWORD **)(v1 + 16), a1);
}

void sub_10004FA54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100114530)
  {
    v2 = type metadata accessor for PreparedSparkline.Entry(255);
    v3 = type metadata accessor for PlottableProjection(a1, v2, &type metadata for Double, &protocol witness table for Double);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100114530);
  }
}

void sub_10004FAB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100114538)
  {
    v2 = type metadata accessor for PreparedSparkline.Entry(255);
    v3 = type metadata accessor for Date(255);
    v4 = type metadata accessor for PlottableProjection(a1, v2, v3, &protocol witness table for Date);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100114538);
  }
}

void sub_10004FB24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t TupleTypeMetadata3;
  uint64_t v8;

  if (!qword_100114550)
  {
    sub_10004D330(255);
    v3 = v2;
    sub_10004D46C(255);
    v5 = v4;
    sub_10004D798(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, v5, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100114550);
  }
}

_QWORD *sub_10004FBA8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = type metadata accessor for PreparedSparkline(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v6);
  }
  else
  {
    v7 = (int *)v4;
    v8 = *(int *)(v4 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v6);
    v12(v9, v10, v11, v13);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v12)(&v9[*(int *)(v14 + 36)], &v10[*(int *)(v14 + 36)], v11);
    v15 = v7[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
    v19 = v7[8];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    *((_BYTE *)a1 + v7[9]) = *((_BYTE *)a2 + v7[9]);
  }
  return a1;
}

uint64_t sub_10004FCD4(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*a1);
  v2 = type metadata accessor for PreparedSparkline(0);
  v3 = (char *)a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  sub_100022800(0);
  v5(&v3[*(int *)(v6 + 36)], v4);
  v7 = (char *)a1 + *(int *)(v2 + 24);
  v8 = type metadata accessor for TimeZone(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

_QWORD *sub_10004FD74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v4 = *a2;
  *a1 = *a2;
  v5 = (int *)type metadata accessor for PreparedSparkline(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 16);
  v11 = swift_bridgeObjectRetain(v4);
  v10(v7, v8, v9, v11);
  sub_100022800(0);
  ((void (*)(char *, char *, uint64_t))v10)(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v9);
  v13 = v5[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  *(_OWORD *)((char *)a1 + v5[7]) = *(_OWORD *)((char *)a2 + v5[7]);
  v17 = v5[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *((_BYTE *)a1 + v5[9]) = *((_BYTE *)a2 + v5[9]);
  return a1;
}

_QWORD *sub_10004FE78(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (int *)type metadata accessor for PreparedSparkline(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  sub_100022800(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v6[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  v20 = v6[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  *((_BYTE *)a1 + v6[9]) = *((_BYTE *)a2 + v6[9]);
  return a1;
}

_QWORD *sub_10004FF94(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for PreparedSparkline(0);
  v5 = v4[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  sub_100022800(0);
  v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  v11 = v4[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  v15 = v4[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *((_BYTE *)a1 + v4[9]) = *((_BYTE *)a2 + v4[9]);
  return a1;
}

_QWORD *sub_100050090(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = (int *)type metadata accessor for PreparedSparkline(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  sub_100022800(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = v5[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_OWORD *)((char *)a1 + v5[7]) = *(_OWORD *)((char *)a2 + v5[7]);
  v16 = v5[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_BYTE *)a1 + v5[9]) = *((_BYTE *)a2 + v5[9]);
  return a1;
}

uint64_t sub_100050194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000501A0);
}

uint64_t sub_1000501A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreparedSparkline(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000501DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000501E8);
}

uint64_t sub_1000501E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreparedSparkline(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100050228(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PreparedSparkline(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SparklineView.WidgetAccentabilityMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000502DC + 4 * byte_1000DDC65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100050310 + 4 * byte_1000DDC60[v4]))();
}

uint64_t sub_100050310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100050318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100050320);
  return result;
}

uint64_t sub_10005032C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100050334);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100050338(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100050340(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SparklineView.WidgetAccentabilityMode()
{
  return &type metadata for SparklineView.WidgetAccentabilityMode;
}

uint64_t sub_10005035C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10004F1F4(255);
  v1 = v0;
  sub_10004EEF4(255);
  v3 = v2;
  v4 = type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(255);
  sub_10002BC34(255, &qword_1001144A8, (uint64_t (*)(uint64_t))sub_10004EBDC, (uint64_t (*)(uint64_t))sub_10004EED8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v10 = v5;
  v11 = sub_10004EF88();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v7 = sub_100003D3C(&qword_1001144D8, type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable, (uint64_t)&unk_1000DDE90);
  v10 = v3;
  v11 = v4;
  v12 = OpaqueTypeConformance2;
  v13 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.accessibilityChartDescriptor<A>(_:)>>, 1);
  v10 = v1;
  v11 = v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

unint64_t sub_100050454()
{
  unint64_t result;

  result = qword_1001145E8;
  if (!qword_1001145E8)
  {
    result = swift_getWitnessTable(&unk_1000DDE68, &type metadata for SparklineView.WidgetAccentabilityMode);
    atomic_store(result, (unint64_t *)&qword_1001145E8);
  }
  return result;
}

uint64_t sub_100050498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3));
  v7 = type metadata accessor for PreparedSparkline(0);
  v8 = v6 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  sub_100022800(0);
  v10(v8 + *(int *)(v11 + 36), v9);
  v12 = v6 + *(int *)(v7 + 24);
  v13 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100050574(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SparklineViewAccessibilityChartDescriptorRepresentable(0)
                                      - 8)
                          + 80);
  return sub_10004BAF4(v1 + ((v3 + 16) & ~v3), a1);
}

void sub_1000505B0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for _ContiguousArrayStorage(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

AXDataPoint sub_1000505F4@<X0>(uint64_t a1@<X0>, AXDataPoint *a2@<X8>)
{
  uint64_t v2;

  return sub_10004BDC0(a1, *(_QWORD *)(v2 + 16), a2);
}

void *sub_100050610(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void *result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;

  v3 = type metadata accessor for Calendar.Component(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    sub_100050874(0, v8);
    v12 = static _SetStorage.allocate(capacity:)(v11);
    v13 = 0;
    v14 = *(unsigned __int8 *)(v4 + 80);
    v33 = v11;
    v34 = a1 + ((v14 + 32) & ~v14);
    v15 = *(_QWORD *)(v4 + 72);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v37 = v12 + 56;
    while (1)
    {
      v35 = v13;
      v36(v10, v34 + v15 * v13, v3);
      v16 = *(_QWORD *)(v12 + 40);
      v17 = sub_100003D3C(&qword_100114618, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17);
      v19 = ~(-1 << *(_BYTE *)(v12 + 32));
      v20 = v18 & v19;
      v21 = (v18 & (unint64_t)v19) >> 6;
      v22 = *(_QWORD *)(v37 + 8 * v21);
      v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        do
        {
          v36(v6, *(_QWORD *)(v12 + 48) + v20 * v15, v3);
          v24 = sub_100003D3C(&qword_100114620, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v25 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v10, v3, v24);
          v26 = v4;
          v27 = *(void (**)(char *, uint64_t))(v4 + 8);
          v27(v6, v3);
          if ((v25 & 1) != 0)
          {
            v27(v10, v3);
            v4 = v26;
            v11 = v33;
            goto LABEL_4;
          }
          v20 = (v20 + 1) & v19;
          v21 = v20 >> 6;
          v22 = *(_QWORD *)(v37 + 8 * (v20 >> 6));
          v23 = 1 << v20;
          v4 = v26;
        }
        while ((v22 & (1 << v20)) != 0);
        v11 = v33;
      }
      *(_QWORD *)(v37 + 8 * v21) = v23 | v22;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v12 + 48) + v20 * v15, v10, v3);
      v29 = *(_QWORD *)(v12 + 16);
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        break;
      *(_QWORD *)(v12 + 16) = v31;
LABEL_4:
      v13 = v35 + 1;
      if (v35 + 1 == v11)
        return (void *)v12;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void sub_100050874(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100114610)
  {
    v3 = type metadata accessor for Calendar.Component(255, a2);
    v4 = sub_100003D3C(&qword_100114618, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
    v5 = type metadata accessor for _SetStorage(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100114610);
  }
}

_QWORD *sub_1000508F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  unsigned int (*v25)(char *, uint64_t, int *, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t, __n128);
  int *v72;
  _QWORD *v73;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v71 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v71)(a1, a2, v7);
    v72 = a3;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = *(_QWORD *)((char *)a2 + v8);
    *((_QWORD *)v9 + 1) = v11;
    v12 = *(_QWORD *)((char *)a2 + v8 + 24);
    *((_QWORD *)v9 + 2) = *(_QWORD *)((char *)a2 + v8 + 16);
    *((_QWORD *)v9 + 3) = v12;
    v13 = *(_QWORD *)((char *)a2 + v8 + 40);
    *((_QWORD *)v9 + 4) = *(_QWORD *)((char *)a2 + v8 + 32);
    *((_QWORD *)v9 + 5) = v13;
    v14 = (_OWORD *)((char *)a1 + v8 + 48);
    v15 = (_OWORD *)((char *)a2 + v8 + 48);
    v16 = *(_QWORD *)((char *)a2 + v8 + 72);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v73 = a2;
    if (v16 == 1)
    {
      v17 = *((_OWORD *)v10 + 4);
      *v14 = *v15;
      *((_OWORD *)v9 + 4) = v17;
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v9[56] = v10[56];
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v16;
      swift_bridgeObjectRetain(v16);
    }
    *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
    v9[88] = v10[88];
    v19 = *((_QWORD *)v10 + 13);
    *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
    *((_QWORD *)v9 + 13) = v19;
    *((_QWORD *)v9 + 14) = *((_QWORD *)v10 + 14);
    v9[120] = v10[120];
    *((_QWORD *)v9 + 16) = *((_QWORD *)v10 + 16);
    v9[136] = v10[136];
    v9[137] = v10[137];
    v20 = (int *)type metadata accessor for DetailContentViewModel(0);
    v21 = v20[9];
    v22 = &v9[v21];
    v23 = &v10[v21];
    v24 = (int *)type metadata accessor for PreparedSparkline(0);
    v70 = *((_QWORD *)v24 - 1);
    v25 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v70 + 48);
    v26 = swift_bridgeObjectRetain(v19);
    if (v25(v23, 1, v24, v26))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = *(_QWORD *)v23;
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v29 = v24[5];
      v30 = &v22[v29];
      v31 = &v23[v29];
      v32 = swift_bridgeObjectRetain(v28);
      v71(v30, v31, v7, v32);
      sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
      ((void (*)(char *, char *, uint64_t))v71)(&v30[*(int *)(v33 + 36)], &v31[*(int *)(v33 + 36)], v7);
      v34 = v24[6];
      v35 = &v22[v34];
      v36 = &v23[v34];
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      *(_OWORD *)&v22[v24[7]] = *(_OWORD *)&v23[v24[7]];
      v38 = v24[8];
      v39 = &v22[v38];
      v40 = &v23[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v22[v24[9]] = v23[v24[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v70 + 56))(v22, 0, 1, v24);
    }
    v41 = v20[10];
    v42 = *(_QWORD *)&v10[v41];
    *(_QWORD *)&v9[v41] = v42;
    v43 = v20[11];
    v44 = &v9[v43];
    v45 = &v10[v43];
    sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
    v47 = v46;
    v48 = *(_QWORD *)(v46 - 8);
    v49 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v48 + 48);
    v50 = swift_bridgeObjectRetain(v42);
    if (v49(v45, 1, v47, v50))
    {
      sub_10001D6B0(0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v44, v45, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
    }
    v52 = v20[12];
    v53 = &v9[v52];
    v54 = &v10[v52];
    v55 = type metadata accessor for URL(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v58 = v72[6];
    v59 = (char *)a1 + v58;
    v60 = (char *)v73 + v58;
    v61 = type metadata accessor for WidgetQuote(0);
    v62 = *(_QWORD *)(v61 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      sub_10001D694(0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
    }
    v64 = v72[7];
    v65 = (char *)a1 + v64;
    v66 = (char *)v73 + v64;
    v67 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
    v68 = v72[9];
    *((_BYTE *)a1 + v72[8]) = *((_BYTE *)v73 + v72[8]);
    *((_BYTE *)a1 + v68) = *((_BYTE *)v73 + v68);
  }
  return a1;
}

uint64_t sub_100050DD4(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (_QWORD *)(a1 + a2[5]);
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  v7 = v6[9];
  if (v7 != 1)
    swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6[13]);
  v8 = (int *)type metadata accessor for DetailContentViewModel(0);
  v9 = (_QWORD *)((char *)v6 + v8[9]);
  v10 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*v9);
    v11 = (char *)v9 + *(int *)(v10 + 20);
    v5((uint64_t)v11, v4);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v5((uint64_t)&v11[*(int *)(v12 + 36)], v4);
    v13 = (char *)v9 + *(int *)(v10 + 24);
    v14 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v8[10]));
  v15 = (char *)v6 + v8[11];
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
  v19 = (char *)v6 + v8[12];
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  v22 = a1 + a2[6];
  v23 = type metadata accessor for WidgetQuote(0);
  v24 = *(_QWORD *)(v23 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  v25 = a1 + a2[7];
  v26 = type metadata accessor for PriceChangeDisplay(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
}

uint64_t sub_10005102C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t *, uint64_t, int *, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  int *v70;
  uint64_t v71;
  uint64_t v72;

  v6 = type metadata accessor for Date(0);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v69(a1, a2, v6);
  v70 = a3;
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  v11 = *(_QWORD *)(a2 + v7 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + v7 + 16);
  *(_QWORD *)(v8 + 24) = v11;
  v12 = *(_QWORD *)(a2 + v7 + 40);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
  *(_QWORD *)(v8 + 40) = v12;
  v13 = (_OWORD *)(a1 + v7 + 48);
  v14 = (_OWORD *)(a2 + v7 + 48);
  v15 = *(_QWORD *)(a2 + v7 + 72);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v71 = a2;
  v72 = a1;
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(v9 + 64);
    *v13 = *v14;
    *(_OWORD *)(v8 + 64) = v16;
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v8 + 72) = v15;
    swift_bridgeObjectRetain(v15);
  }
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(v9 + 88);
  v17 = *(_QWORD *)(v9 + 104);
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
  *(_QWORD *)(v8 + 104) = v17;
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 + 112);
  *(_BYTE *)(v8 + 120) = *(_BYTE *)(v9 + 120);
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
  *(_BYTE *)(v8 + 136) = *(_BYTE *)(v9 + 136);
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(v9 + 137);
  v18 = (int *)type metadata accessor for DetailContentViewModel(0);
  v19 = v18[9];
  v20 = (uint64_t *)(v8 + v19);
  v21 = (uint64_t *)(v9 + v19);
  v22 = (int *)type metadata accessor for PreparedSparkline(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v23 + 48);
  v25 = swift_bridgeObjectRetain(v17);
  if (v24(v21, 1, v22, v25))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = *v21;
    *v20 = *v21;
    v28 = v22[5];
    v29 = (char *)v20 + v28;
    v30 = (char *)v21 + v28;
    v31 = swift_bridgeObjectRetain(v27);
    ((void (*)(char *, char *, uint64_t, __n128))v69)(v29, v30, v6, v31);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v69((uint64_t)&v29[*(int *)(v32 + 36)], (uint64_t)&v30[*(int *)(v32 + 36)], v6);
    v33 = v22[6];
    v34 = (char *)v20 + v33;
    v35 = (char *)v21 + v33;
    v36 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
    v37 = v22[8];
    v38 = (char *)v20 + v37;
    v39 = (char *)v21 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v40 = v18[10];
  v41 = *(_QWORD *)(v9 + v40);
  *(_QWORD *)(v8 + v40) = v41;
  v42 = v18[11];
  v43 = (void *)(v8 + v42);
  v44 = (const void *)(v9 + v42);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v46 = v45;
  v47 = *(_QWORD *)(v45 - 8);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v47 + 48);
  v49 = swift_bridgeObjectRetain(v41);
  if (v48(v44, 1, v46, v49))
  {
    sub_10001D6B0(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 16))(v43, v44, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v43, 0, 1, v46);
  }
  v51 = v18[12];
  v52 = (void *)(v8 + v51);
  v53 = (const void *)(v9 + v51);
  v54 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  v57 = v70[6];
  v58 = (void *)(v72 + v57);
  v59 = (const void *)(v71 + v57);
  v60 = type metadata accessor for WidgetQuote(0);
  v61 = *(_QWORD *)(v60 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
  {
    sub_10001D694(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v61 + 16))(v58, v59, v60);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  }
  v63 = v70[7];
  v64 = v72 + v63;
  v65 = v71 + v63;
  v66 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
  v67 = v70[9];
  *(_BYTE *)(v72 + v70[8]) = *(_BYTE *)(v71 + v70[8]);
  *(_BYTE *)(v72 + v67) = *(_BYTE *)(v71 + v67);
  return v72;
}

uint64_t sub_1000514E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(void *, uint64_t, uint64_t);
  int v83;
  int v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void *, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(void *, uint64_t, uint64_t);
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  int *v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;

  v6 = type metadata accessor for Date(0);
  v113 = *(_QWORD *)(v6 - 8);
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 24);
  v111(a1, a2, v6);
  v7 = a3[5];
  v116 = a1;
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 40);
  v15 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = (_OWORD *)(v8 + 48);
  v17 = (_OWORD *)(v9 + 48);
  v18 = *(_QWORD *)(v8 + 72);
  v19 = *(_QWORD *)(v9 + 72);
  v114 = a3;
  v115 = a2;
  if (v18 == 1)
  {
    if (v19 == 1)
    {
      v20 = *(_OWORD *)(v9 + 64);
      *v16 = *v17;
      *(_OWORD *)(v8 + 64) = v20;
    }
    else
    {
      v22 = *(_QWORD *)v17;
      *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
      *(_QWORD *)v16 = v22;
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
      v23 = *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v8 + 72) = v23;
      swift_bridgeObjectRetain(v23);
    }
  }
  else if (v19 == 1)
  {
    sub_10002304C(v8 + 48);
    v21 = *(_OWORD *)(v9 + 64);
    *v16 = *v17;
    *(_OWORD *)(v8 + 64) = v21;
  }
  else
  {
    v24 = *(_QWORD *)v17;
    *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
    *(_QWORD *)v16 = v24;
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
    v25 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v8 + 72) = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v18);
  }
  v26 = *(_QWORD *)(v9 + 80);
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(v9 + 88);
  *(_QWORD *)(v8 + 80) = v26;
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
  v27 = *(_QWORD *)(v9 + 104);
  v28 = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v8 + 104) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(v9 + 112);
  *(_BYTE *)(v8 + 120) = *(_BYTE *)(v9 + 120);
  *(_QWORD *)(v8 + 112) = v29;
  v30 = *(_QWORD *)(v9 + 128);
  *(_BYTE *)(v8 + 136) = *(_BYTE *)(v9 + 136);
  *(_QWORD *)(v8 + 128) = v30;
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(v9 + 137);
  v31 = (int *)type metadata accessor for DetailContentViewModel(0);
  v32 = v31[9];
  v33 = (_QWORD *)(v8 + v32);
  v34 = (_QWORD *)(v9 + v32);
  v35 = (int *)type metadata accessor for PreparedSparkline(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (v39)
      goto LABEL_13;
    v41 = *v34;
    *v33 = *v34;
    v42 = v35[5];
    v43 = (char *)v33 + v42;
    v44 = (char *)v34 + v42;
    v112 = v31;
    v45 = *(void (**)(char *, char *, uint64_t, __n128))(v113 + 16);
    v46 = swift_bridgeObjectRetain(v41);
    v45(v43, v44, v6, v46);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    ((void (*)(char *, char *, uint64_t))v45)(&v43[*(int *)(v47 + 36)], &v44[*(int *)(v47 + 36)], v6);
    v31 = v112;
    v48 = v35[6];
    v49 = (char *)v33 + v48;
    v50 = (char *)v34 + v48;
    v51 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    *(_OWORD *)((char *)v33 + v35[7]) = *(_OWORD *)((char *)v34 + v35[7]);
    v52 = v35[8];
    v53 = (char *)v33 + v52;
    v54 = (char *)v34 + v52;
    v55 = v54[8];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v55;
    *((_BYTE *)v33 + v35[9]) = *((_BYTE *)v34 + v35[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  }
  else
  {
    if (v39)
    {
      sub_10001DF70((uint64_t)v33, type metadata accessor for PreparedSparkline);
LABEL_13:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      goto LABEL_16;
    }
    v56 = *v34;
    v57 = *v33;
    *v33 = *v34;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRelease(v57);
    v58 = v35[5];
    v59 = (char *)v33 + v58;
    v60 = (char *)v34 + v58;
    v111((uint64_t)v33 + v58, (uint64_t)v34 + v58, v6);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v111((uint64_t)&v59[*(int *)(v61 + 36)], (uint64_t)&v60[*(int *)(v61 + 36)], v6);
    v62 = v35[6];
    v63 = (char *)v33 + v62;
    v64 = (char *)v34 + v62;
    v65 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 24))(v63, v64, v65);
    v66 = v35[7];
    v67 = (_QWORD *)((char *)v33 + v66);
    v68 = (_QWORD *)((char *)v34 + v66);
    *v67 = *v68;
    v67[1] = v68[1];
    v69 = v35[8];
    v70 = (char *)v33 + v69;
    v71 = (char *)v34 + v69;
    v72 = v71[8];
    *(_QWORD *)v70 = *(_QWORD *)v71;
    v70[8] = v72;
    *((_BYTE *)v33 + v35[9]) = *((_BYTE *)v34 + v35[9]);
  }
LABEL_16:
  v73 = v31[10];
  v74 = *(_QWORD *)(v9 + v73);
  v75 = *(_QWORD *)(v8 + v73);
  *(_QWORD *)(v8 + v73) = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  v76 = v31[11];
  v77 = (void *)(v8 + v76);
  v78 = (void *)(v9 + v76);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v80 = v79;
  v81 = *(_QWORD *)(v79 - 8);
  v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v81 + 48);
  v83 = v82(v77, 1, v79);
  v84 = v82(v78, 1, v80);
  if (v83)
  {
    v85 = v114;
    if (!v84)
    {
      (*(void (**)(void *, void *, uint64_t))(v81 + 16))(v77, v78, v80);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v77, 0, 1, v80);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v85 = v114;
  if (v84)
  {
    (*(void (**)(void *, uint64_t))(v81 + 8))(v77, v80);
LABEL_21:
    sub_10001D6B0(0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v81 + 24))(v77, v78, v80);
LABEL_22:
  v87 = v31[12];
  v88 = (void *)(v8 + v87);
  v89 = (void *)(v9 + v87);
  v90 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v90 - 8);
  v92 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 48);
  v93 = v92(v88, 1, v90);
  v94 = v92(v89, 1, v90);
  if (v93)
  {
    v95 = v116;
    if (!v94)
    {
      (*(void (**)(void *, void *, uint64_t))(v91 + 16))(v88, v89, v90);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v95 = v116;
  if (v94)
  {
    (*(void (**)(void *, uint64_t))(v91 + 8))(v88, v90);
LABEL_27:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v91 + 24))(v88, v89, v90);
LABEL_28:
  v97 = v85[6];
  v98 = (void *)(v95 + v97);
  v99 = (void *)(v115 + v97);
  v100 = type metadata accessor for WidgetQuote(0);
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v101 + 48);
  v103 = v102(v98, 1, v100);
  v104 = v102(v99, 1, v100);
  if (!v103)
  {
    if (!v104)
    {
      (*(void (**)(void *, void *, uint64_t))(v101 + 24))(v98, v99, v100);
      goto LABEL_34;
    }
    (*(void (**)(void *, uint64_t))(v101 + 8))(v98, v100);
    goto LABEL_33;
  }
  if (v104)
  {
LABEL_33:
    sub_10001D694(0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v101 + 16))(v98, v99, v100);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
LABEL_34:
  v106 = v85[7];
  v107 = v95 + v106;
  v108 = v115 + v106;
  v109 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 24))(v107, v108, v109);
  *(_BYTE *)(v95 + v85[8]) = *(_BYTE *)(v115 + v85[8]);
  *(_BYTE *)(v95 + v85[9]) = *(_BYTE *)(v115 + v85[9]);
  return v95;
}

uint64_t sub_100051C58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  int *v63;

  v6 = type metadata accessor for Date(0);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v62(a1, a2, v6);
  v63 = a3;
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  v11 = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 121) = *(_OWORD *)(a2 + v7 + 121);
  v12 = *(_OWORD *)(a2 + v7 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 + v7 + 96);
  *(_OWORD *)(v8 + 112) = v12;
  v13 = *(_OWORD *)(a2 + v7 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + v7 + 64);
  *(_OWORD *)(v8 + 80) = v13;
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(a2 + v7 + 137);
  v14 = (int *)type metadata accessor for DetailContentViewModel(0);
  v15 = v14[9];
  v16 = (_QWORD *)(v8 + v15);
  v17 = (_QWORD *)(v9 + v15);
  v18 = (int *)type metadata accessor for PreparedSparkline(0);
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v21 = v18[5];
    v60 = a2;
    v61 = a1;
    v22 = (char *)v16 + v21;
    v23 = (char *)v17 + v21;
    v62((uint64_t)v16 + v21, (uint64_t)v17 + v21, v6);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v25 = *(int *)(v24 + 36);
    v26 = &v23[v25];
    a2 = v60;
    v62((uint64_t)&v22[v25], (uint64_t)v26, v6);
    v27 = v18[6];
    v28 = (char *)v16 + v27;
    v29 = (char *)v17 + v27;
    v30 = type metadata accessor for TimeZone(0);
    v31 = v29;
    a1 = v61;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v31, v30);
    *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
    v32 = v18[8];
    v33 = (char *)v16 + v32;
    v34 = (char *)v17 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    *((_BYTE *)v16 + v18[9]) = *((_BYTE *)v17 + v18[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)(v8 + v14[10]) = *(_QWORD *)(v9 + v14[10]);
  v35 = v14[11];
  v36 = (void *)(v8 + v35);
  v37 = (const void *)(v9 + v35);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v38))
  {
    sub_10001D6B0(0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v36, v37, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
  }
  v42 = v14[12];
  v43 = (void *)(v8 + v42);
  v44 = (const void *)(v9 + v42);
  v45 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = v63[6];
  v49 = (void *)(a1 + v48);
  v50 = (const void *)(a2 + v48);
  v51 = type metadata accessor for WidgetQuote(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    sub_10001D694(0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v52 + 32))(v49, v50, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  v54 = v63[7];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
  v58 = v63[9];
  *(_BYTE *)(a1 + v63[8]) = *(_BYTE *)(a2 + v63[8]);
  *(_BYTE *)(a1 + v58) = *(_BYTE *)(a2 + v58);
  return a1;
}

uint64_t sub_100052080(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, int *);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(void *, uint64_t, uint64_t);
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(void *, uint64_t, uint64_t);
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  int *v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;

  v6 = type metadata accessor for Date(0);
  v97 = *(_QWORD *)(v6 - 8);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 40);
  v95(a1, a2, v6);
  v7 = a3[5];
  v100 = a1;
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(v9 + 40);
  v15 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = (_OWORD *)(v8 + 48);
  v17 = (_OWORD *)(v9 + 48);
  v18 = *(_QWORD *)(v8 + 72);
  v98 = a3;
  v99 = a2;
  if (v18 == 1)
    goto LABEL_4;
  v19 = *(_QWORD *)(v9 + 72);
  if (v19 == 1)
  {
    sub_10002304C(v8 + 48);
LABEL_4:
    v20 = *(_OWORD *)(v9 + 64);
    *v16 = *v17;
    *(_OWORD *)(v8 + 64) = v20;
    goto LABEL_6;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v8 + 56) = *(_BYTE *)(v9 + 56);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = v19;
  swift_bridgeObjectRelease(v18);
LABEL_6:
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(v9 + 88);
  v21 = *(_QWORD *)(v9 + 104);
  v22 = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
  *(_QWORD *)(v8 + 104) = v21;
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 + 112);
  *(_BYTE *)(v8 + 120) = *(_BYTE *)(v9 + 120);
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
  *(_WORD *)(v8 + 136) = *(_WORD *)(v9 + 136);
  v23 = (int *)type metadata accessor for DetailContentViewModel(0);
  v24 = v23[9];
  v25 = (char *)(v8 + v24);
  v26 = (char *)(v9 + v24);
  v27 = (int *)type metadata accessor for PreparedSparkline(0);
  v28 = *((_QWORD *)v27 - 1);
  v29 = *(uint64_t (**)(char *, uint64_t, int *))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (v31)
      goto LABEL_11;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v33 = v27[5];
    v34 = &v25[v33];
    v35 = &v26[v33];
    v96 = v23;
    v36 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    v36(&v25[v33], &v26[v33], v6);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v36(&v34[*(int *)(v37 + 36)], &v35[*(int *)(v37 + 36)], v6);
    v23 = v96;
    v38 = v27[6];
    v39 = &v25[v38];
    v40 = &v26[v38];
    v41 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
    *(_OWORD *)&v25[v27[7]] = *(_OWORD *)&v26[v27[7]];
    v42 = v27[8];
    v43 = &v25[v42];
    v44 = &v26[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v25[v27[9]] = v26[v27[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
  }
  else
  {
    if (v31)
    {
      sub_10001DF70((uint64_t)v25, type metadata accessor for PreparedSparkline);
LABEL_11:
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      goto LABEL_14;
    }
    v45 = *(_QWORD *)v25;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    swift_bridgeObjectRelease(v45);
    v46 = v27[5];
    v47 = &v25[v46];
    v48 = &v26[v46];
    v95((uint64_t)&v25[v46], (uint64_t)&v26[v46], v6);
    sub_10001D724(0, (unint64_t *)&qword_100112AB8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(void))sub_100022860, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ClosedRange);
    v95((uint64_t)&v47[*(int *)(v49 + 36)], (uint64_t)&v48[*(int *)(v49 + 36)], v6);
    v50 = v27[6];
    v51 = &v25[v50];
    v52 = &v26[v50];
    v53 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
    *(_OWORD *)&v25[v27[7]] = *(_OWORD *)&v26[v27[7]];
    v54 = v27[8];
    v55 = &v25[v54];
    v56 = &v26[v54];
    v55[8] = v56[8];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v25[v27[9]] = v26[v27[9]];
  }
LABEL_14:
  v57 = v23[10];
  v58 = *(_QWORD *)(v8 + v57);
  *(_QWORD *)(v8 + v57) = *(_QWORD *)(v9 + v57);
  swift_bridgeObjectRelease(v58);
  v59 = v23[11];
  v60 = (void *)(v8 + v59);
  v61 = (void *)(v9 + v59);
  sub_10001D724(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for NonEmpty);
  v63 = v62;
  v64 = *(_QWORD *)(v62 - 8);
  v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v60, 1, v62);
  v67 = v65(v61, 1, v63);
  if (v66)
  {
    v68 = v98;
    if (!v67)
    {
      (*(void (**)(void *, void *, uint64_t))(v64 + 32))(v60, v61, v63);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v60, 0, 1, v63);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v68 = v98;
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v64 + 8))(v60, v63);
LABEL_19:
    sub_10001D6B0(0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v64 + 40))(v60, v61, v63);
LABEL_20:
  v70 = v23[12];
  v71 = (void *)(v8 + v70);
  v72 = (void *)(v9 + v70);
  v73 = type metadata accessor for URL(0);
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v74 + 48);
  v76 = v75(v71, 1, v73);
  v77 = v75(v72, 1, v73);
  if (v76)
  {
    v78 = v100;
    if (!v77)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 32))(v71, v72, v73);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v78 = v100;
  if (v77)
  {
    (*(void (**)(void *, uint64_t))(v74 + 8))(v71, v73);
LABEL_25:
    sub_10000EDE8(0, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v74 + 40))(v71, v72, v73);
LABEL_26:
  v80 = v68[6];
  v81 = (void *)(v78 + v80);
  v82 = (void *)(v99 + v80);
  v83 = type metadata accessor for WidgetQuote(0);
  v84 = *(_QWORD *)(v83 - 8);
  v85 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v84 + 48);
  v86 = v85(v81, 1, v83);
  v87 = v85(v82, 1, v83);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(void *, void *, uint64_t))(v84 + 40))(v81, v82, v83);
      goto LABEL_32;
    }
    (*(void (**)(void *, uint64_t))(v84 + 8))(v81, v83);
    goto LABEL_31;
  }
  if (v87)
  {
LABEL_31:
    sub_10001D694(0);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, void *, uint64_t))(v84 + 32))(v81, v82, v83);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
LABEL_32:
  v89 = v68[7];
  v90 = v78 + v89;
  v91 = v99 + v89;
  v92 = type metadata accessor for PriceChangeDisplay(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
  v93 = v68[9];
  *(_BYTE *)(v78 + v68[8]) = *(_BYTE *)(v99 + v68[8]);
  *(_BYTE *)(v78 + v93) = *(_BYTE *)(v99 + v93);
  return v78;
}

uint64_t sub_100052738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052744);
}

uint64_t sub_100052744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for DetailContentViewModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  sub_10001D694(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = type metadata accessor for PriceChangeDisplay(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(unsigned __int8 *)(a1 + a3[8]);
  if (v17 >= 2)
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100052844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052850);
}

uint64_t sub_100052850(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for DetailContentViewModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  sub_10001D694(0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = type metadata accessor for PriceChangeDisplay(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_BYTE *)(a1 + a4[8]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for DetailTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_100114680;
  if (!qword_100114680)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DetailTimelineEntry);
  return result;
}

void sub_100052978(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for DetailContentViewModel(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001D694(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for PriceChangeDisplay(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_1000DDEE8;
          v10[5] = &unk_1000DDEE8;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100052A40@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  int v27;
  BOOL v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a2;
  v52 = a3;
  v49 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v46 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PriceChangeDisplay(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v48 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  __chkstk_darwin(v7);
  v45 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v42 - v14;
  v43 = type metadata accessor for DetailContentViewModel(0);
  v16 = __chkstk_darwin(v43);
  v44 = (uint64_t)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v42 - v18;
  v20 = enum case for WidgetFamily.accessoryRectangular(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v15, enum case for WidgetFamily.accessoryRectangular(_:), v9);
  v21 = sub_100003D3C(&qword_100113B18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v22 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter(&v55, v9, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v54, v9, v21);
  v23 = v54;
  v24 = v55;
  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v15, v9);
  if (v24 == v23)
  {
    if (qword_1001114F0 != -1)
      swift_once(&qword_1001114F0, sub_10005FAEC);
    v26 = sub_100012524(v43, (uint64_t)qword_100126900);
    sub_10001DE2C(v26, (uint64_t)v19, type metadata accessor for DetailContentViewModel);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v22, v9);
    v27 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
    v29 = v27 == enum case for WidgetFamily.accessoryCircular(_:)
       || v27 == v20
       || v27 == enum case for WidgetFamily.accessoryInline(_:);
    v30 = v29;
    if (!v29)
      v25(v13, v9);
    sub_10005F210(v30, (uint64_t)v19);
  }
  v31 = v44;
  sub_10001DE2C((uint64_t)v19, v44, type metadata accessor for DetailContentViewModel);
  v32 = type metadata accessor for WidgetQuote(0);
  v33 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v45, 1, 1, v32);
  v35 = v50;
  v34 = v51;
  v36 = v48;
  v37 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v50 + 104))(v48, enum case for PriceChangeDisplay.currency(_:), v51);
  v38 = v46;
  Date.init()(v37);
  sub_10001DF70((uint64_t)v19, type metadata accessor for DetailContentViewModel);
  v39 = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v52, v38, v49);
  v40 = (int *)type metadata accessor for DetailTimelineEntry(0);
  sub_10000ED3C(v31, v39 + v40[5], type metadata accessor for DetailContentViewModel);
  sub_10000ED3C(v33, v39 + v40[6], (uint64_t (*)(_QWORD))sub_10001D694);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v39 + v40[7], v36, v34);
  *(_BYTE *)(v39 + v40[8]) = 1;
  *(_BYTE *)(v39 + v40[9]) = v53 & 1;
  return result;
}

uint64_t sub_100052E34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a1;
  v2 = type metadata accessor for DetailTimelineEntry(0);
  __chkstk_darwin(v2);
  v47 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ExchangeStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v43 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100053CF0(0);
  v8 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D694(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100053D50(0);
  __chkstk_darwin(v14);
  v45 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v43 - v20;
  v44 = v2;
  v22 = *(int *)(v2 + 24);
  v46 = v1;
  sub_10001DE2C(v1 + v22, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_10001D694);
  v23 = type metadata accessor for WidgetQuote(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v23);
  if ((_DWORD)v25 == 1)
  {
    sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_10001D694);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v26(v21, 1, 1, v4);
  }
  else
  {
    WidgetQuote.exchangeStatus.getter(v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v23);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v26(v21, 0, 1, v4);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v18, enum case for ExchangeStatus.open(_:), v4);
  v26(v18, 0, 1, v4);
  v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001DE2C((uint64_t)v21, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DE2C((uint64_t)v18, v27, (uint64_t (*)(_QWORD))sub_100053D50);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v28((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DF70((uint64_t)v18, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70((uint64_t)v21, (uint64_t (*)(_QWORD))sub_100053D50);
    if (v28(v27, 1, v4) == 1)
    {
      sub_10001DF70((uint64_t)v10, (uint64_t (*)(_QWORD))sub_100053D50);
      v29 = v47;
      sub_10001DE2C(v46, v47, type metadata accessor for DetailTimelineEntry);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  v30 = v45;
  sub_10001DE2C((uint64_t)v10, v45, (uint64_t (*)(_QWORD))sub_100053D50);
  if (v28(v27, 1, v4) == 1)
  {
    sub_10001DF70((uint64_t)v18, (uint64_t (*)(_QWORD))sub_100053D50);
    sub_10001DF70((uint64_t)v21, (uint64_t (*)(_QWORD))sub_100053D50);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v30, v4);
LABEL_9:
    sub_10001DF70((uint64_t)v10, (uint64_t (*)(_QWORD))sub_100053CF0);
    v29 = v47;
    sub_10001DE2C(v46, v47, type metadata accessor for DetailTimelineEntry);
LABEL_10:
    v31 = sub_10001DF70(v29, type metadata accessor for DetailTimelineEntry);
    v34 = v48;
    goto LABEL_13;
  }
  v35 = v30;
  v36 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v43, v27, v4);
  v37 = sub_100003D3C(&qword_1001146D8, (uint64_t (*)(uint64_t))&type metadata accessor for ExchangeStatus, (uint64_t)&protocol conformance descriptor for ExchangeStatus);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v36, v4, v37);
  v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v36, v4);
  sub_10001DF70((uint64_t)v18, (uint64_t (*)(_QWORD))sub_100053D50);
  sub_10001DF70((uint64_t)v21, (uint64_t (*)(_QWORD))sub_100053D50);
  v39((char *)v35, v4);
  sub_10001DF70((uint64_t)v10, (uint64_t (*)(_QWORD))sub_100053D50);
  v29 = v47;
  sub_10001DE2C(v46, v47, type metadata accessor for DetailTimelineEntry);
  if ((v38 & 1) == 0)
    goto LABEL_10;
LABEL_12:
  v40 = *(_BYTE *)(v29 + *(int *)(v44 + 36));
  v31 = sub_10001DF70(v29, type metadata accessor for DetailTimelineEntry);
  v34 = v48;
  if ((v40 & 1) == 0)
  {
    v33.n128_u64[0] = 0x40AC200000000000;
    v32.n128_u32[0] = 1.0;
    goto LABEL_15;
  }
LABEL_13:
  v32.n128_u32[0] = 0;
  v33.n128_u64[0] = 0;
LABEL_15:
  TimelineEntryRelevance.init(score:duration:)(v31, v32, v33);
  v41 = type metadata accessor for TimelineEntryRelevance(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v34, 0, 1, v41);
}

uint64_t sub_100053300(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005332C + 4 * byte_1000DDEC0[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_10005332C()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_100053340()
{
  return 0x65746F7571;
}

unint64_t sub_100053354()
{
  return 0xD000000000000012;
}

unint64_t sub_100053370()
{
  return 0xD000000000000018;
}

uint64_t sub_100053390()
{
  return 0x726F7272457369;
}

uint64_t sub_1000533A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v3 = v1;
  sub_100053DB0(0, &qword_100114710, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_100053D6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DetailTimelineEntry.CodingKeys, &type metadata for DetailTimelineEntry.CodingKeys, v12, v10, v11);
  v34 = 0;
  v13 = type metadata accessor for Date(0);
  v14 = sub_100003D3C(&qword_100114718, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v34, v6, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for DetailTimelineEntry(0);
    v16 = v3 + v15[5];
    v33 = 1;
    v17 = type metadata accessor for DetailContentViewModel(0);
    v18 = sub_100003D3C(&qword_100114720, type metadata accessor for DetailContentViewModel, (uint64_t)&unk_1000E12D0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v33, v6, v17, v18);
    v19 = v3 + v15[6];
    v32 = 2;
    v20 = type metadata accessor for WidgetQuote(0);
    v21 = sub_100003D3C(&qword_100114728, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t)&protocol conformance descriptor for WidgetQuote);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v32, v6, v20, v21);
    v22 = v3 + v15[7];
    v31 = 3;
    v23 = type metadata accessor for PriceChangeDisplay(0);
    v24 = sub_100003D3C(&qword_100114730, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t)&protocol conformance descriptor for PriceChangeDisplay);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v31, v6, v23, v24);
    v25 = *(unsigned __int8 *)(v3 + v15[8]);
    v30 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v30, v6);
    v26 = *(unsigned __int8 *)(v3 + v15[9]);
    v29 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v29, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100053650@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v36 = a2;
  v41 = type metadata accessor for PriceChangeDisplay(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v37 = (uint64_t *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D694(0);
  __chkstk_darwin(v4);
  v38 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DetailContentViewModel(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v40 = (uint64_t *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100053DB0(0, &qword_1001146E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v42 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v36 - v13;
  v44 = type metadata accessor for DetailTimelineEntry(0);
  __chkstk_darwin(v44);
  v45 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v16);
  v18 = a1[3];
  v17 = a1[4];
  v43 = a1;
  sub_100007184(a1, v18);
  v19 = sub_100053D6C();
  v20 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DetailTimelineEntry.CodingKeys, &type metadata for DetailTimelineEntry.CodingKeys, v19, v18, v17);
  if (v20)
  {
    v21 = v9;
    v25 = v45;
    v26 = v46;
    sub_100007164(v43);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v25, v21);
  }
  else
  {
    v22 = (uint64_t)v38;
    v47 = v12;
    v53 = 0;
    v23 = sub_100003D3C(&qword_1001146F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v24 = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v9, &v53, v42, v9, v23);
    v28 = (uint64_t)v45;
    (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 40))(v45, v40, v9);
    v52 = 1;
    v29 = sub_100003D3C(&qword_1001146F8, type metadata accessor for DetailContentViewModel, (uint64_t)&unk_1000E12F8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v6, &v52, v42, v6, v29);
    v30 = (int *)v44;
    sub_10000ED3C((uint64_t)v8, v28 + *(int *)(v44 + 20), type metadata accessor for DetailContentViewModel);
    v31 = type metadata accessor for WidgetQuote(0);
    v51 = 2;
    v32 = sub_100003D3C(&qword_100114700, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t)&protocol conformance descriptor for WidgetQuote);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v51, v42, v31, v32);
    sub_10000ED3C(v22, v28 + v30[6], (uint64_t (*)(_QWORD))sub_10001D694);
    v50 = 3;
    v33 = sub_100003D3C(&qword_100114708, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t)&protocol conformance descriptor for PriceChangeDisplay);
    v34 = v37;
    v35 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v41, &v50, v42, v41, v33);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v39 + 32))(v28 + v30[7], v34, v35);
    v49 = 4;
    *(_BYTE *)(v28 + v30[8]) = KeyedDecodingContainer.decode(_:forKey:)(&v49, v42) & 1;
    v48 = 5;
    LOBYTE(v34) = KeyedDecodingContainer.decode(_:forKey:)(&v48, v42);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v42);
    *(_BYTE *)(v28 + v30[9]) = v34 & 1;
    sub_10001DE2C(v28, v36, type metadata accessor for DetailTimelineEntry);
    sub_100007164(v43);
    return sub_10001DF70(v28, type metadata accessor for DetailTimelineEntry);
  }
}

uint64_t sub_100053C04()
{
  unsigned __int8 *v0;

  return sub_100053300(*v0);
}

uint64_t sub_100053C0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100054040(a1, a2);
  *a3 = result;
  return result;
}

void sub_100053C30(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100053C3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053D6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100053C64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053D6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100053C8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100053CC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100053650(a1, a2);
}

uint64_t sub_100053CDC(_QWORD *a1)
{
  return sub_1000533A8(a1);
}

void sub_100053CF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1001146C8)
  {
    sub_100053D50(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001146C8);
  }
}

void sub_100053D50(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001146D0, (uint64_t (*)(uint64_t))&type metadata accessor for ExchangeStatus, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

unint64_t sub_100053D6C()
{
  unint64_t result;

  result = qword_1001146E8;
  if (!qword_1001146E8)
  {
    result = swift_getWitnessTable(&unk_1000DE044, &type metadata for DetailTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001146E8);
  }
  return result;
}

void sub_100053DB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100053D6C();
    v7 = a3(a1, &type metadata for DetailTimelineEntry.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t getEnumTagSinglePayload for DetailTimelineEntry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DetailTimelineEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100053EE8 + 4 * byte_1000DDECB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100053F1C + 4 * byte_1000DDEC6[v4]))();
}

uint64_t sub_100053F1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053F2CLL);
  return result;
}

uint64_t sub_100053F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053F40);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100053F44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053F4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DetailTimelineEntry.CodingKeys()
{
  return &type metadata for DetailTimelineEntry.CodingKeys;
}

unint64_t sub_100053F6C()
{
  unint64_t result;

  result = qword_100114738;
  if (!qword_100114738)
  {
    result = swift_getWitnessTable(&unk_1000DE01C, &type metadata for DetailTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100114738);
  }
  return result;
}

unint64_t sub_100053FB4()
{
  unint64_t result;

  result = qword_100114740;
  if (!qword_100114740)
  {
    result = swift_getWitnessTable(&unk_1000DDF8C, &type metadata for DetailTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100114740);
  }
  return result;
}

unint64_t sub_100053FFC()
{
  unint64_t result;

  result = qword_100114748;
  if (!qword_100114748)
  {
    result = swift_getWitnessTable(&unk_1000DDFB4, &type metadata for DetailTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100114748);
  }
  return result;
}

uint64_t sub_100054040(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65746F7571 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746F7571, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x80000001000E5D90;
    if (a2 == 0x80000001000E5D90)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000E5D90, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001000E5DB0)
  {
    v10 = 0x80000001000E5DB0;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001000E5DB0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x726F7272457369 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F7272457369, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

Swift::Double __swiftcall Double.percentChange(with:)(Swift::Double with)
{
  double v1;
  double v2;
  Swift::Double result;

  v2 = v1 - with;
  result = with / v2;
  if (v2 <= 0.0)
    return 0.0;
  return result;
}

Swift::Int sub_1000542AC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  return Hasher._finalize()();
}

Swift::Int sub_1000542E0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  return Hasher._finalize()();
}

uint64_t sub_100054310()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_100054328, v0, 0);
}

uint64_t sub_100054328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40)
                                   + OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_cache);
  v1 = Cache.subscript.getter(10.0);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v0 + 16), "bundleSubscription");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "bundleChannelIDs");
      v6 = (uint64_t)objc_msgSend(v5, "count");

      if (v6 >= 1)
      {
        v8 = Logger.logObject.getter(v7);
        v10 = static os_log_type_t.default.getter(v9);
        if (os_log_type_enabled(v8, v10))
        {
          v11 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v10, "Skipping today dropbox to use cached value", v11, 2u);
          swift_slowDealloc(v11, -1, -1);
        }

        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
      }

    }
    v1 = swift_unknownObjectRelease(v2);
  }
  *(_QWORD *)(v0 + 56) = OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_logger;
  v13 = Logger.logObject.getter(v1);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Peeking at today dropbox", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = *(_QWORD *)(v0 + 40);

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v17 + 112);
  return swift_task_switch(sub_100054524, 0, 0);
}

uint64_t sub_100054524()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v1 = v0[8];
  v2 = swift_task_alloc(32);
  v0[9] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCancellation<A>(after:operation:)[1]);
  v0[10] = v3;
  v4 = sub_10002D488();
  *v3 = v0;
  v3[1] = sub_1000545C0;
  return withCancellation<A>(after:operation:)(v0 + 3, 5000000000000000000, 0, &unk_100114858, v2, v4);
}

uint64_t sub_1000545C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100054714;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
    v4 = sub_10005462C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005462C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[12] = v0[3];
  return swift_task_switch(sub_100054648, v1, 0);
}

uint64_t sub_100054648()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 96);
  swift_unknownObjectRetain();
  v1 = Cache.subscript.setter(v0 + 32);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Did peek at today dropbox", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_100054714()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return swift_task_switch(sub_100054754, v1, 0);
}

uint64_t sub_100054754(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Did peek at today dropbox", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100054800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC12StocksWidget24TodayPrivateDataProvider_cache));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100054864()
{
  return type metadata accessor for TodayPrivateDataProvider(0);
}

uint64_t type metadata accessor for TodayPrivateDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100114790;
  if (!qword_100114790)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TodayPrivateDataProvider);
  return result;
}

uint64_t sub_1000548A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TodayPrivateDataProvider.SingletonKey()
{
  return &type metadata for TodayPrivateDataProvider.SingletonKey;
}

unint64_t sub_10005495C()
{
  unint64_t result;

  result = qword_100114848;
  if (!qword_100114848)
  {
    result = swift_getWitnessTable(&unk_1000DE120, &type metadata for TodayPrivateDataProvider.SingletonKey);
    atomic_store(result, &qword_100114848);
  }
  return result;
}

uint64_t sub_1000549A0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000549AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000549C4, 0, 0);
}

uint64_t sub_1000549C4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  unint64_t v6;

  v1 = (void *)v0[3];
  v2 = swift_allocObject(&unk_1001059F0, 24, 7);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = async function pointer to withEagerCancellation<A>(_:)[1];
  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc(v3);
  v0[5] = v5;
  v6 = sub_10002D488();
  *v5 = v0;
  v5[1] = sub_100054A60;
  return withEagerCancellation<A>(_:)(v0[2], &unk_100114870, v2, v6);
}

uint64_t sub_100054A60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100054AD4, 0, 0);
  swift_release(*(_QWORD *)(v3 + 32));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100054AD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100114854);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000F0A8;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_1000549C4, 0, 0);
}

uint64_t sub_100054B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100054B84, 0, 0);
}

uint64_t sub_100054B84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v1 = v0[3];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  v4 = sub_10002D488();
  *v3 = v0;
  v3[1] = sub_100054C24;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0xD000000000000011, 0x80000001000E5E30, sub_100054EC8, v2, v4);
}

uint64_t sub_100054C24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_100054C78(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[5];
  uint64_t v14;

  sub_100054ED0(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100105A18, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = sub_100054F94;
  v14 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100054DF8;
  aBlock[3] = &unk_100105A30;
  v12 = _Block_copy(aBlock);
  swift_release(v14);
  objc_msgSend(a2, "peekWithAccessor:", v12);
  _Block_release(v12);
}

uint64_t sub_100054DA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = a1;
  sub_100054ED0(0);
  v3 = v2;
  swift_unknownObjectRetain(a1);
  return CheckedContinuation.resume(returning:)(&v5, v3);
}

uint64_t sub_100054DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100054E40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100054E64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10011486C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000E914;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100054B84, 0, 0);
}

void sub_100054EC8(uint64_t a1)
{
  uint64_t v1;

  sub_100054C78(a1, *(void **)(v1 + 16));
}

void sub_100054ED0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100114878)
  {
    v2 = sub_10002D488();
    v3 = type metadata accessor for CheckedContinuation(a1, v2, &type metadata for Never, &protocol witness table for Never);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100114878);
  }
}

uint64_t sub_100054F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100054ED0(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100054F94(uint64_t a1)
{
  sub_100054ED0(0);
  return sub_100054DA4(a1);
}

uint64_t sub_100054FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100054FE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_100054FE8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v13;
  double result;

  KeyPath = swift_getKeyPath(&unk_1000DE1C0);
  v13 = swift_allocObject(&unk_100105AB8, 41, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = a2 & 1;
  *(_QWORD *)(v13 + 32) = a3;
  *(_BYTE *)(v13 + 40) = a4 & 1;
  View.transformEnvironment<A>(_:transform:)(KeyPath, sub_100055118, v13, a5, a6);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

double sub_1000550A8()
{
  unint64_t v0;
  double v2;

  v0 = sub_1000461F8();
  EnvironmentValues.subscript.getter(&v2, &type metadata for TextMarginKey, &type metadata for TextMarginKey, v0);
  return v2;
}

_QWORD *sub_1000550E4(_QWORD *result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a3 & 1) != 0)
  {
    if ((a5 & 1) != 0)
      return result;
LABEL_5:
    result[2] = a4;
    return result;
  }
  *result = a2;
  if ((a5 & 1) == 0)
    goto LABEL_5;
  return result;
}

uint64_t sub_100055108()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

_QWORD *sub_100055118(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_BYTE *)(v1 + 40);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + 40) & 1) != 0)
      return result;
LABEL_5:
    result[2] = v2;
    return result;
  }
  *result = *(_QWORD *)(v1 + 16);
  if ((v3 & 1) == 0)
    goto LABEL_5;
  return result;
}

ValueMetadata *type metadata accessor for TextMarginKey()
{
  return &type metadata for TextMarginKey;
}

double sub_100055154()
{
  double result;

  result = 0.0;
  xmmword_100114880 = 0u;
  *(_OWORD *)algn_100114890 = 0u;
  return result;
}

double sub_100055168@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (qword_1001114B8 != -1)
    swift_once(&qword_1001114B8, sub_100055154);
  result = *(double *)&xmmword_100114880;
  v3 = *(_OWORD *)algn_100114890;
  *a1 = xmmword_100114880;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000551BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_10005520C();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

unint64_t sub_10005520C()
{
  unint64_t result;

  result = qword_1001148A0;
  if (!qword_1001148A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EdgeInsets, &type metadata for EdgeInsets);
    atomic_store(result, (unint64_t *)&qword_1001148A0);
  }
  return result;
}

uint64_t destroy for OverflowIntoTextMarginsModifier(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  return sub_100028060(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for OverflowIntoTextMarginsModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  swift_retain(v3);
  sub_100038430(v4, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for OverflowIntoTextMarginsModifier(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = a2;
  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_100038430(v6, v7, v8, v9, (char)v2);
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = *((_BYTE *)a1 + 40);
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  *((_BYTE *)a1 + 40) = (_BYTE)v2;
  sub_100028060(v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for HeadlineAttribution(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for OverflowIntoTextMarginsModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = *((_BYTE *)a2 + 40);
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = *((_BYTE *)a1 + 40);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = v5;
  sub_100028060(v6, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for OverflowIntoTextMarginsModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OverflowIntoTextMarginsModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OverflowIntoTextMarginsModifier()
{
  return &type metadata for OverflowIntoTextMarginsModifier;
}

uint64_t sub_1000554B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8B74, 1);
}

uint64_t sub_1000554C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  char v25;
  _BYTE v26[40];
  uint64_t v27;

  v22 = a1;
  v23 = a2;
  v3 = type metadata accessor for TextOverflowModifier(0);
  __chkstk_darwin(v3);
  v5 = (double *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000557E0(0);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100055864(v2, (uint64_t)&v27, &qword_100112D48, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
  v10 = *(_OWORD *)(v2 + 24);
  v24[0] = *(_OWORD *)(v2 + 8);
  v24[1] = v10;
  v25 = *(_BYTE *)(v2 + 40);
  sub_100055864((uint64_t)v24, (uint64_t)v26, &qword_100113AF8, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Environment.Content);
  sub_10003BDB8((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
  v11 = sub_100045EEC();
  sub_10003BDB8((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  sub_10003BDB8((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038430);
  sub_100045EEC();
  v13 = v12;
  sub_10003BDB8((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100028060);
  sub_100055864((uint64_t)&v27, (uint64_t)v5, &qword_100112D48, (uint64_t)&type metadata for Font, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
  v5[1] = v11;
  *((_QWORD *)v5 + 2) = v13;
  *((_QWORD *)v5 + 3) = swift_getKeyPath(&unk_1000DE2B0);
  *((_BYTE *)v5 + 32) = 0;
  v14 = (char *)v5 + *(int *)(v3 + 32);
  *(_QWORD *)v14 = swift_getKeyPath(&unk_1000DE2E0);
  sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  sub_100012608(0, &qword_1001148B0, (uint64_t (*)(void))sub_1000276A4, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ViewModifier_Content);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v22, v16);
  sub_1000561D8((uint64_t)v5, (uint64_t)&v9[*(int *)(v7 + 36)]);
  KeyPath = swift_getKeyPath(&unk_1000DE1C0);
  v18 = v23;
  sub_10001DE2C((uint64_t)v9, v23, (uint64_t (*)(_QWORD))sub_1000557E0);
  sub_10005621C(0);
  v20 = v18 + *(int *)(v19 + 36);
  *(_QWORD *)v20 = KeyPath;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  sub_100056298(&v27);
  return sub_10001DF70((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000557E0);
}

uint64_t sub_10005576C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000554C4(a1, a2);
}

uint64_t type metadata accessor for TextOverflowModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_100114928;
  if (!qword_100114928)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TextOverflowModifier);
  return result;
}

void sub_1000557E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001148A8)
  {
    sub_100012608(255, &qword_1001148B0, (uint64_t (*)(void))sub_1000276A4, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ViewModifier_Content);
    v3 = v2;
    v4 = type metadata accessor for TextOverflowModifier(255);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001148A8);
  }
}

uint64_t sub_100055864(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  sub_1000143C4(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_1000558B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = type metadata accessor for Font.Context(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for TextOverflowModifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  sub_10001DE2C((uint64_t)v0, (uint64_t)v7, v9);
  if (v8)
  {
    v10 = v8;
  }
  else
  {
    v11 = *((_QWORD *)v7 + 3);
    v12 = v7[32];
    j__swift_retain(v11);
    v10 = sub_100046268(v11, v12);
    v13 = j__swift_release(v11);
    if (!v10)
      v10 = static Font.body.getter(v13);
  }
  swift_retain(v8);
  sub_10001DF70((uint64_t)v7, type metadata accessor for TextOverflowModifier);
  sub_100046430(v4);
  v14 = Font.platformFont(in:)(v4, v10);
  swift_release(v10);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  return v14;
}

uint64_t sub_100055A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;

  v0 = type metadata accessor for ViewSpacing(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - v5;
  sub_10000EDE8(0, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - v8;
  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025958((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v14 = sub_100028528((uint64_t)v9, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return static ViewSpacing.zero.getter(v14);
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v17 = ViewSpacing.init()(v16);
    v18 = LayoutSubview.spacing.getter(v17);
    v19 = static Edge.Set.horizontal.getter(v18);
    ViewSpacing.union(_:edges:)(v3, v19);
    v20 = *(void (**)(char *, uint64_t))(v1 + 8);
    v20(v3, v0);
    v20(v6, v0);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

double sub_100055BE8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  char v25;
  char v26;

  v24[0] = a1;
  v24[1] = a3;
  v6 = type metadata accessor for ViewDimensions(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - v11;
  v13 = type metadata accessor for LayoutSubview(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025958((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100028528((uint64_t)v12, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    return 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v26 = a2 & 1;
    v25 = a4 & 1;
    v18.n128_f64[0] = LayoutSubview.dimensions(in:)(v24[0]);
    v19 = static VerticalAlignment.firstTextBaseline.getter(v18);
    ViewDimensions.subscript.getter(v19);
    v20 = static VerticalAlignment.top.getter();
    ViewDimensions.subscript.getter(v20);
    v21 = static VerticalAlignment.bottom.getter();
    ViewDimensions.subscript.getter(v21);
    v22 = static VerticalAlignment.lastTextBaseline.getter();
    ViewDimensions.subscript.getter(v22);
    v17 = ViewDimensions.width.getter();
    ViewDimensions.height.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return v17;
}

uint64_t sub_100055E2C(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char v50;
  unsigned __int8 v51;
  char v52;

  v47 = a1;
  v48 = a3;
  v16 = type metadata accessor for ViewDimensions(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v20);
  v22 = (char *)&v45 - v21;
  v23 = type metadata accessor for LayoutSubview(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025958((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    return sub_100028528((uint64_t)v22, &qword_100112910, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  v28 = a2 & 1;
  v52 = v28;
  v29 = a4 & 1;
  v51 = v29;
  v46 = v16;
  v30 = v47;
  v31 = v48;
  v32.n128_f64[0] = LayoutSubview.dimensions(in:)(v47);
  v33 = static VerticalAlignment.firstTextBaseline.getter(v32);
  v34 = ViewDimensions.subscript.getter(v33);
  v35 = static VerticalAlignment.top.getter();
  v36 = v34 - ViewDimensions.subscript.getter(v35) - a9;
  v37 = static VerticalAlignment.bottom.getter();
  v38 = ViewDimensions.subscript.getter(v37);
  v39 = static VerticalAlignment.lastTextBaseline.getter(v38);
  ViewDimensions.subscript.getter(v39);
  if (v36 <= a10)
    v40 = v36;
  else
    v40 = a10;
  if (v40 < 0.0)
    v41 = 0.0;
  else
    v41 = v40;
  v42 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v46);
  v43 = static UnitPoint.topLeading.getter(v42);
  v50 = v28;
  v49 = v29;
  LayoutSubview.place(at:anchor:proposal:)(v30, v28, v31, v29, a5, a6 - v41, v43, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
}

uint64_t sub_100056088()
{
  return sub_100055A14();
}

double sub_100056094(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_100055BE8(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_1000560B4(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  double *v8;

  return sub_100055E2C(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, *v8, v8[1]);
}

uint64_t sub_1000560D4()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1000560EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const __CTFont *v5;
  CGFloat CapHeight;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (const __CTFont *)sub_1000558B4();
  CapHeight = CTFontGetCapHeight(v5);

  *(CGFloat *)a2 = CapHeight;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  sub_100056C40(0);
  v8 = a2 + *(int *)(v7 + 44);
  sub_100056D2C(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a1, v9);
}

uint64_t sub_100056168@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100056190(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000561B8()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t sub_1000561D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextOverflowModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10005621C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001148B8)
  {
    sub_1000557E0(255);
    v3 = v2;
    sub_1000143C4(255, &qword_1001148C0, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    v5 = type metadata accessor for ModifiedContent(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001148B8);
  }
}

_QWORD *sub_100056298(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_1000562C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v8 = a2[3];
    v9 = *((_BYTE *)a2 + 32);
    swift_retain(v5);
    j__swift_retain(v8);
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = v9;
    v10 = *(int *)(a3 + 32);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v15 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = v11;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      v19 = *v12;
      *v11 = *v12;
      swift_retain(v19);
      v16 = v11;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_1000563E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  j__swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for Font.Context(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_100056478(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v7 = a2[3];
  v8 = *((_BYTE *)a2 + 32);
  swift_retain(v6);
  j__swift_retain(v7);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(int *)(a3 + 32);
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)((char *)a2 + v9);
  sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v13 = v12;
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v14 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v11;
    *v10 = *v11;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v13, v15);
  return a1;
}

uint64_t *sub_100056568(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = *((_BYTE *)a2 + 32);
  j__swift_retain(v8);
  v10 = a1[3];
  a1[3] = v8;
  *((_BYTE *)a1 + 32) = v9;
  j__swift_release(v10);
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 32);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    sub_100028528((uint64_t)a1 + v11, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v15 = v14;
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v16 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v13;
      *v12 = *v13;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v15, v17);
  }
  return a1;
}

uint64_t sub_1000566A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 32);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v8 = v7;
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v9 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v5, v6, v9);
    swift_storeEnumTagMultiPayload(v5, v8, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100056774(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v7 = *((_BYTE *)a2 + 32);
  v8 = a1[3];
  a1[3] = a2[3];
  *((_BYTE *)a1 + 32) = v7;
  j__swift_release(v8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_100028528((uint64_t)a1 + v9, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    sub_10000EDE8(0, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v13 = v12;
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v14 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v10, v11, v14);
      swift_storeEnumTagMultiPayload(v10, v13, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100056894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000568A0);
}

uint64_t sub_1000568A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_10000EDE8(0, &qword_1001148C8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v9);
  }
}

uint64_t sub_100056940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005694C);
}

char *sub_10005694C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    sub_10000EDE8(0, &qword_1001148C8, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

void sub_1000569D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_1000DE340;
  sub_10000EDE8(319, &qword_100114168, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Context, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

unint64_t sub_100056A80()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100114970;
  if (!qword_100114970)
  {
    sub_10005621C(255);
    v2 = v1;
    sub_100056AE8();
    sub_100056BD0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100114970);
  }
  return result;
}

unint64_t sub_100056AE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100114978;
  if (!qword_100114978)
  {
    sub_1000557E0(255);
    v2 = v1;
    sub_100056B68();
    sub_100003D3C(&qword_100114988, type metadata accessor for TextOverflowModifier, (uint64_t)&unk_1000DE358);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100114978);
  }
  return result;
}

unint64_t sub_100056B68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114980;
  if (!qword_100114980)
  {
    sub_100012608(255, &qword_1001148B0, (uint64_t (*)(void))sub_1000276A4, (uint64_t)&type metadata for OverflowIntoTextMarginsModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ViewModifier_Content);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114980);
  }
  return result;
}

unint64_t sub_100056BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114990;
  if (!qword_100114990)
  {
    sub_1000143C4(255, &qword_1001148C0, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114990);
  }
  return result;
}

uint64_t sub_100056C30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8BB8, 1);
}

void sub_100056C40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!qword_100114998)
  {
    sub_100012608(255, &qword_1001149A0, (uint64_t (*)(void))sub_100056CE8, (uint64_t)&type metadata for TextOverflowModifier.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _LayoutRoot);
    v3 = v2;
    sub_100056D2C(255);
    v5 = v4;
    v6 = sub_100056E94(&qword_1001149B8, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    v7 = type metadata accessor for _VariadicView.Tree(a1, v3, v5, v6);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_100114998);
  }
}

unint64_t sub_100056CE8()
{
  unint64_t result;

  result = qword_1001149A8;
  if (!qword_1001149A8)
  {
    result = swift_getWitnessTable(&unk_1000DE400, &type metadata for TextOverflowModifier.Layout);
    atomic_store(result, (unint64_t *)&qword_1001149A8);
  }
  return result;
}

void sub_100056D2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1001149B0)
  {
    v2 = type metadata accessor for TextOverflowModifier(255);
    v3 = sub_100003D3C(&qword_100114988, type metadata accessor for TextOverflowModifier, (uint64_t)&unk_1000DE358);
    v4 = type metadata accessor for _ViewModifier_Content(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1001149B0);
  }
}

uint64_t getEnumTagSinglePayload for TextOverflowModifier.Layout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextOverflowModifier.Layout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TextOverflowModifier.Layout()
{
  return &type metadata for TextOverflowModifier.Layout;
}

unint64_t sub_100056E04()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001149C0;
  if (!qword_1001149C0)
  {
    sub_100056C40(255);
    v2 = v1;
    sub_100056E94(&qword_1001149C8, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_100003D3C(&qword_1001149D0, (uint64_t (*)(uint64_t))sub_100056D2C, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001149C0);
  }
  return result;
}

uint64_t sub_100056E94(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_100012608(255, &qword_1001149A0, (uint64_t (*)(void))sub_100056CE8, (uint64_t)&type metadata for TextOverflowModifier.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _LayoutRoot);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100056EF8()
{
  unint64_t result;

  result = qword_1001149D8;
  if (!qword_1001149D8)
  {
    result = swift_getWitnessTable(&unk_1000DE3B0, &type metadata for TextOverflowModifier.Layout);
    atomic_store(result, (unint64_t *)&qword_1001149D8);
  }
  return result;
}

id sub_100056F40(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  const mach_header_64 *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;

  v7 = &_mh_execute_header;
  if (((unint64_t)&_mh_execute_header & 0xFFFFFFFFFE03C781) == 0)
    v7 = 0;
  v8 = (unint64_t)v7 | 0x1FC387F;
  v9 = objc_allocWithZone((Class)FCContentContext);
  v10 = a1;
  v11 = a4;
  swift_unknownObjectRetain(a2);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = objc_msgSend(v9, "initWithConfiguration:configurationManager:contentHostDirectory:networkBehaviorMonitor:desiredHeadlineFieldOptions:feedUsage:appActivityMonitor:backgroundTaskable:pptContext:", v10, a2, v13, v11, v8, 10, 0, 0, 0);

  swift_unknownObjectRelease(a2);
  return v15;
}

uint64_t sub_1000570EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for PriceFormatter(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = static Locale.autoupdatingCurrent.getter(v1);
  qword_1001149E0 = v1;
  return result;
}

uint64_t sub_100057138(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  sub_100012608(0, &qword_100114AA0, (uint64_t (*)(void))sub_100059D0C, (uint64_t)&_s22StocksPriceFormatStyleV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_100059D0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s22StocksPriceFormatStyleV10CodingKeysON, &_s22StocksPriceFormatStyleV10CodingKeysON, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v24 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v24, v6);
  if (!v2)
  {
    v15 = *((unsigned __int8 *)v3 + 16);
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v23, v6);
    v16 = v3[3];
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v22, v6);
    v17 = v3[4];
    v18 = v3[5];
    v21 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v21, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int sub_1000572B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = v0[1];
  if (v2)
  {
    v3 = *v0;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v7, v3, v2);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v0[2] & 1);
  Hasher._combine(_:)(v0[3]);
  v5 = v0[4];
  v4 = v1[5];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100057388()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000573C0 + 4 * byte_1000DE480[*v0]))(0x79636E6572727563, 0xEC00000065646F43);
}

unint64_t sub_1000573C0()
{
  return 0xD000000000000016;
}

uint64_t sub_1000573DC()
{
  return 0x647574696E67616DLL;
}

uint64_t sub_1000573F8()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_100057418@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100058A8C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005743C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100057448(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059D0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100057470(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059D0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100057498@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  v4 = *a1;
  v6 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_BYTE *)(v2 + 16) | (2 * (v5 != 0));
  if (qword_1001114C0 != -1)
    swift_once(&qword_1001114C0, sub_1000570EC);
  result = sub_100021960(v6, v5, v7, 1, v10, v4);
  if (!v12)
  {
    swift_bridgeObjectRetain(v9);
    result = v8;
    v12 = v9;
  }
  *a2 = result;
  a2[1] = v12;
  return result;
}

double sub_10005755C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100058C78(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10005759C(_QWORD *a1)
{
  return sub_100057138(a1);
}

uint64_t sub_1000575B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  Swift::UInt8 v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = v2[1];
  v5 = *((_BYTE *)v2 + 16);
  v7 = v2[3];
  v6 = v2[4];
  v8 = v2[5];
  if (v4)
  {
    v9 = *v2;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v9, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v6, v8);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_100057664(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt8 v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  _QWORD v9[9];

  v3 = *v1;
  v2 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  v6 = v1[3];
  v5 = v1[4];
  v7 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v2);
    String.hash(into:)(v9, v3, v2);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v9, v5, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_100057730(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1000589D8((uint64_t *)v7, (uint64_t)v8) & 1;
}

uint64_t sub_100057774(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  if ((a2 & 1) != 0)
  {
    v15 = *(_QWORD *)(v4 + 56);
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + 64));
  }
  else if ((*(_BYTE *)v4 & 1) != 0 && a4)
  {
    v8 = *(_QWORD *)(v4 + 32);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = *(_QWORD *)(v4 + 48);
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
      v11 = 3;
    else
      v11 = 2;
    v12 = qword_1001114C0;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(a4);
    if (v12 != -1)
      swift_once(&qword_1001114C0, sub_1000570EC);
    v13 = sub_100021960(a3, a4, v8, 1, v11, *(double *)&a1);
    if (v14)
    {
      v15 = v13;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(a4);
    }
    else
    {
      swift_bridgeObjectRelease(a4);
      return v9;
    }
  }
  else
  {
    v16 = *(_QWORD *)(v4 + 8);
    v17 = *(_QWORD *)(v4 + 16);
    v18 = *(_QWORD *)(v4 + 32);
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(_QWORD *)(v4 + 48);
    v21 = 3;
    if (!v17)
      v21 = 1;
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
      v22 = v21;
    else
      v22 = 2 * (v17 != 0);
    if (qword_1001114C0 != -1)
      swift_once(&qword_1001114C0, sub_1000570EC);
    v23 = sub_100021960(v16, v17, v18, 1, v22, *(double *)&a1);
    if (v24)
    {
      return v23;
    }
    else
    {
      swift_bridgeObjectRetain(v20);
      return v19;
    }
  }
  return v15;
}

uint64_t sub_100057920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2 & 1);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 48);
  if (v4)
  {
    v9 = *(_QWORD *)(v2 + 8);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(a1, v9, v4);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v8);
  }
  Hasher._combine(_:)(v5 & 1);
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v6, v8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease_n(v8, 2);
  v11 = *(_QWORD *)(v2 + 56);
  v10 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v11, v10);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100057A14(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[3];
  char v20;

  v3 = v1;
  sub_100012608(0, &qword_100114A88, (uint64_t (*)(void))sub_100059CC8, (uint64_t)&_s11FormatStyleV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)v19 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_100059CC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s11FormatStyleV10CodingKeysON, &_s11FormatStyleV10CodingKeysON, v12, v10, v11);
  v13 = *v3;
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v19, v6);
  if (!v2)
  {
    v14 = *(_OWORD *)(v3 + 24);
    v19[0] = *(_OWORD *)(v3 + 8);
    v19[1] = v14;
    v19[2] = *(_OWORD *)(v3 + 40);
    v20 = 1;
    v15 = sub_100059C3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v6, &_s22StocksPriceFormatStyleVN, v15);
    v16 = *((_QWORD *)v3 + 7);
    v17 = *((_QWORD *)v3 + 8);
    LOBYTE(v19[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v19, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100057B94()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x74537265626D756ELL;
  if (*v0 != 1)
    v1 = 0x6B6361626C6C6166;
  if (*v0)
    return v1;
  else
    return 0x72727543776F6873;
}

uint64_t sub_100057C08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100058E88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100057C2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059CC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100057C54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059CC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100057C7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000582D4(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100057774, a2);
}

__n128 sub_100057C88@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100059024(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100057CD8(_QWORD *a1)
{
  return sub_100057A14(a1);
}

Swift::Int sub_100057CEC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100057920((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100057D2C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100057920((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100057D64(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1000588A0((unsigned __int8 *)v7, (unsigned __int8 *)v9) & 1;
}

uint64_t sub_100057DBC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t inited;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v7 = v4;
  if ((a2 & 1) != 0)
  {
    v10 = *(_QWORD *)(v4 + 56);
    v5 = *(_QWORD *)(v4 + 64);
    goto LABEL_16;
  }
  v10 = a1;
  if (*(double *)&a1 <= 1000000.0)
  {
LABEL_7:
    v18 = *(_QWORD *)(v7 + 8);
    v19 = *(_QWORD *)(v7 + 16);
    v6 = *(_QWORD *)(v7 + 32);
    v10 = *(_QWORD *)(v7 + 40);
    v5 = *(_QWORD *)(v7 + 48);
    if ((*(_BYTE *)v7 & 1) != 0 && a4)
    {
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        LOBYTE(v7) = 3;
      else
        LOBYTE(v7) = 2;
      v20 = qword_1001114C0;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(a4);
      if (v20 == -1)
        goto LABEL_13;
      goto LABEL_31;
    }
    v25 = 3;
    if (!v19)
      v25 = 1;
    if ((*(_BYTE *)(v7 + 24) & 1) != 0)
      v26 = v25;
    else
      v26 = 2 * (v19 != 0);
    if (qword_1001114C0 != -1)
    {
      v29 = *(_QWORD *)(v7 + 8);
      v30 = *(_QWORD *)(v7 + 16);
      swift_once(&qword_1001114C0, sub_1000570EC);
      v19 = v30;
      v18 = v29;
    }
    v27 = sub_100021960(v18, v19, v6, 1, v26, *(double *)&a1);
    if (v28)
      return v27;
LABEL_16:
    swift_bridgeObjectRetain(v5);
    return v10;
  }
  v12 = type metadata accessor for UnitNumberFormatter();
  inited = swift_initStackObject(v12, v31);
  v14 = objc_msgSend(objc_allocWithZone((Class)SCICUNumberFormatter), "init");
  *(_QWORD *)(inited + 16) = v14;
  if ((~v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (*(double *)&a1 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (*(double *)&a1 < 9.22337204e18)
  {
    v15 = v14;
    v10 = sub_10003D8F4((uint64_t)*(double *)&a1, 0, 0);
    v17 = v16;

    if (v17)
      return v10;
    goto LABEL_7;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  swift_once(&qword_1001114C0, sub_1000570EC);
LABEL_13:
  v21 = sub_100021960(a3, a4, v6, 1, v7, *(double *)&a1);
  if (v22)
  {
    v23 = v21;
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a4);
    return v23;
  }
  else
  {
    swift_bridgeObjectRelease(a4);
  }
  return v10;
}

uint64_t sub_10005800C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD v17[4];
  uint64_t v18;

  v2 = v1;
  sub_100012608(0, &qword_100114A20, (uint64_t (*)(void))sub_100059440, (uint64_t)&_s17WidgetFormatStyleV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)v17 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_100059440();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s17WidgetFormatStyleV10CodingKeysON, &_s17WidgetFormatStyleV10CodingKeysON, v11, v9, v10);
  v12 = *(_OWORD *)(v2 + 48);
  v17[2] = *(_OWORD *)(v2 + 32);
  v17[3] = v12;
  v18 = *(_QWORD *)(v2 + 64);
  v13 = *(_OWORD *)(v2 + 16);
  v17[0] = *(_OWORD *)v2;
  v17[1] = v13;
  v14 = sub_1000594C8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17, v15, v5, &_s11FormatStyleVN, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100058138()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100058178()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10005819C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000581D8()
{
  return 1702060386;
}

uint64_t sub_1000581E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1702060386, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_10005826C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100058278(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059440();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000582A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100059440();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000582C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000582D4(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_100057DBC, a2);
}

uint64_t sub_1000582D4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a3 = result;
  a3[1] = v5;
  return result;
}

__n128 _s11FormatStyleVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *_s17WidgetFormatStyleVMa()
{
  return &_s17WidgetFormatStyleVN;
}

__n128 sub_100058360@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_1000592B4(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000583B0(_QWORD *a1)
{
  return sub_10005800C(a1);
}

Swift::Int sub_1000583C4()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  v4 = v0[24];
  v5 = *((_QWORD *)v0 + 4);
  v6 = *((_QWORD *)v0 + 5);
  v7 = *((_QWORD *)v0 + 6);
  v8 = *((_QWORD *)v0 + 7);
  v9 = *((_QWORD *)v0 + 8);
  Hasher.init(_seed:)(v11, 0);
  v12 = v1;
  v13 = v3;
  v14 = v2;
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  sub_100057920((uint64_t)v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_100058484(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = v1[6];
  v4 = v1[8];
  v6 = v1[2];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100057920(a1);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease(v6);
}

Swift::Int sub_100058520(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *v1;
  v4 = *((_QWORD *)v1 + 1);
  v3 = *((_QWORD *)v1 + 2);
  v5 = v1[24];
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  v9 = *((_QWORD *)v1 + 7);
  v10 = *((_QWORD *)v1 + 8);
  Hasher.init(_seed:)(v12, a1);
  v13 = v2;
  v14 = v4;
  v15 = v3;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  sub_100057920((uint64_t)v12);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

BOOL sub_1000585DC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100058754((unsigned __int8 *)v7, (unsigned __int8 *)v9);
}

unint64_t sub_100058638()
{
  unint64_t result;

  result = qword_1001149E8;
  if (!qword_1001149E8)
  {
    result = swift_getWitnessTable(&unk_1000DE4C4, &_s17WidgetFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_1001149E8);
  }
  return result;
}

unint64_t sub_100058680()
{
  unint64_t result;

  result = qword_1001149F0;
  if (!qword_1001149F0)
  {
    result = swift_getWitnessTable(&unk_1000DE554, &_s17WidgetFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_1001149F0);
  }
  return result;
}

unint64_t sub_1000586C8()
{
  unint64_t result;

  result = qword_1001149F8;
  if (!qword_1001149F8)
  {
    result = swift_getWitnessTable(&unk_1000DE52C, &_s17WidgetFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_1001149F8);
  }
  return result;
}

unint64_t sub_100058710()
{
  unint64_t result;

  result = qword_100114A00;
  if (!qword_100114A00)
  {
    result = swift_getWitnessTable(&unk_1000DE4EC, &_s17WidgetFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A00);
  }
  return result;
}

BOOL sub_100058754(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  if (((*a1 ^ *a2) & 1) != 0)
    return 0;
  v4 = *((_QWORD *)a1 + 2);
  v5 = a1[24];
  v7 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 5);
  v9 = *((_QWORD *)a1 + 6);
  v8 = *((_QWORD *)a1 + 7);
  v10 = *((_QWORD *)a1 + 8);
  v11 = *((_QWORD *)a2 + 2);
  v12 = a2[24];
  v13 = *((_QWORD *)a2 + 4);
  v14 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)a2 + 6);
  v15 = *((_QWORD *)a2 + 7);
  v17 = *((_QWORD *)a2 + 8);
  if (v4)
  {
    if (!v11)
      return 0;
    v18 = *((_QWORD *)a1 + 1);
    v19 = *((_QWORD *)a2 + 1);
    if (v18 != v19 || v4 != v11)
    {
      v26 = *((_QWORD *)a2 + 7);
      v27 = *((_QWORD *)a2 + 8);
      v20 = v10;
      v21 = v8;
      v22 = v9;
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v4, v19, v11, 0);
      v9 = v22;
      v8 = v21;
      v10 = v20;
      v15 = v26;
      v17 = v27;
      if ((v23 & 1) == 0)
        return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (((v5 ^ v12) & 1) != 0 || v7 != v13)
    return 0;
  if (v6 != v14 || v9 != v16)
  {
    v24 = v8;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v9, v14, v16, 0);
    v8 = v24;
    if ((v25 & 1) == 0)
      return 0;
  }
  return v8 == v15 && v10 == v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v15, v17, 0) & 1) != 0;
}

uint64_t sub_1000588A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (((*a1 ^ *a2) & 1) != 0)
    return 0;
  v5 = *((_QWORD *)a1 + 2);
  v6 = a1[24];
  v8 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v9 = *((_QWORD *)a1 + 6);
  v10 = *((_QWORD *)a2 + 2);
  v11 = a2[24];
  v13 = *((_QWORD *)a2 + 4);
  v12 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)a2 + 6);
  if (v5)
  {
    if (v10)
    {
      v15 = *((_QWORD *)a1 + 1);
      v16 = *((_QWORD *)a2 + 1);
      if (v15 != v16 || v5 != v10)
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v5, v16, v10, 0);
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v10)
    return 0;
LABEL_11:
  result = 0;
  if (((v6 ^ v11) & 1) == 0 && v8 == v13)
  {
    if (v7 == v12 && v9 == v14
      || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v12, v14, 0), result = 0, (v18 & 1) != 0))
    {
      v19 = *((_QWORD *)a1 + 7);
      v20 = *((_QWORD *)a1 + 8);
      v21 = *((_QWORD *)a2 + 7);
      v22 = *((_QWORD *)a2 + 8);
      if (v19 == v21 && v20 == v22)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v21, v22, 0);
    }
  }
  return result;
}

uint64_t sub_1000589D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (v5)
      return 0;
    goto LABEL_10;
  }
  if (!v5)
    return 0;
  v6 = *a1;
  v7 = *a1 == *(_QWORD *)a2 && v4 == v5;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, *(_QWORD *)a2, v5, 0), result = 0, (v8 & 1) != 0))
  {
LABEL_10:
    if (((*((unsigned __int8 *)a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) == 0 && a1[3] == *(_QWORD *)(a2 + 24))
    {
      v10 = a1[4];
      v11 = a1[5];
      v12 = *(_QWORD *)(a2 + 32);
      v13 = *(_QWORD *)(a2 + 40);
      if (v10 == v12 && v11 == v13)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100058A8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43)
  {
    v5 = 0xEC00000065646F43;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79636E6572727563, 0xEC00000065646F43, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000016)
  {
    v7 = 0x80000001000E5E70;
    if (a2 == 0x80000001000E5E70)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001000E5E70, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x647574696E67616DLL && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x647574696E67616DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease(0xEC00000074786554);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000074786554, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100058C78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v23 = a2;
  sub_100012608(0, &qword_100114A90, (uint64_t (*)(void))sub_100059D0C, (uint64_t)&_s22StocksPriceFormatStyleV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_100059D0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s22StocksPriceFormatStyleV10CodingKeysON, &_s22StocksPriceFormatStyleV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_100007164(a1);
    return swift_bridgeObjectRelease(0);
  }
  else
  {
    v12 = v6;
    v13 = v23;
    v28 = 0;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v28, v5);
    v16 = v15;
    v27 = 1;
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
    v26 = 2;
    v22 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
    v25 = 3;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
    v19 = v8;
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v5);
    result = sub_100007164(a1);
    *(_QWORD *)v13 = v14;
    *(_QWORD *)(v13 + 8) = v16;
    *(_BYTE *)(v13 + 16) = v24 & 1;
    *(_QWORD *)(v13 + 24) = v22;
    *(_QWORD *)(v13 + 32) = v18;
    *(_QWORD *)(v13 + 40) = v21;
  }
  return result;
}

uint64_t sub_100058E88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x72727543776F6873 && a2 == 0xEC00000079636E65)
  {
    v5 = 0xEC00000079636E65;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72727543776F6873, 0xEC00000079636E65, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74537265626D756ELL && a2 == 0xEB00000000656C79)
  {
    v7 = 0xEB00000000656C79;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74537265626D756ELL, 0xEB00000000656C79, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6B6361626C6C6166 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease(0xEC00000074786554);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626C6C6166, 0xEC00000074786554, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100059024@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;

  v32 = a2;
  sub_100012608(0, &qword_100114A78, (uint64_t (*)(void))sub_100059CC8, (uint64_t)&_s11FormatStyleV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_100059CC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s11FormatStyleV10CodingKeysON, &_s11FormatStyleV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_100007164(a1);
    return swift_bridgeObjectRelease(0xA300000000000000);
  }
  else
  {
    v12 = v6;
    v13 = v32;
    LOBYTE(v33) = 0;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
    v40 = 1;
    v15 = sub_100059BF4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &_s22StocksPriceFormatStyleVN, &v40, v5, &_s22StocksPriceFormatStyleVN, v15);
    v16 = v34;
    v39 = v35;
    v29 = v36;
    v30 = v33;
    v17 = v38;
    v28 = v37;
    LOBYTE(v33) = 2;
    swift_bridgeObjectRetain(v34);
    v31 = v17;
    swift_bridgeObjectRetain(v17);
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
    v20 = v19;
    v21 = *(void (**)(char *, uint64_t))(v12 + 8);
    v22 = v18;
    v21(v8, v5);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(0xA300000000000000);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRelease(v23);
    sub_100007164(a1);
    swift_bridgeObjectRelease(v20);
    v24 = v31;
    swift_bridgeObjectRelease(v31);
    result = swift_bridgeObjectRelease(v16);
    *(_BYTE *)v13 = v14 & 1;
    *(_QWORD *)(v13 + 8) = v30;
    *(_QWORD *)(v13 + 16) = v16;
    *(_BYTE *)(v13 + 24) = v39;
    v26 = v28;
    *(_QWORD *)(v13 + 32) = v29;
    *(_QWORD *)(v13 + 40) = v26;
    *(_QWORD *)(v13 + 48) = v24;
    *(_QWORD *)(v13 + 56) = v22;
    *(_QWORD *)(v13 + 64) = v20;
  }
  return result;
}

uint64_t sub_1000592B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  sub_100012608(0, &qword_100114A08, (uint64_t (*)(void))sub_100059440, (uint64_t)&_s17WidgetFormatStyleV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_100059440();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s17WidgetFormatStyleV10CodingKeysON, &_s17WidgetFormatStyleV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_100007164(a1);
  v12 = v29;
  v13 = sub_100059484();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &_s11FormatStyleVN, v14, v5, &_s11FormatStyleVN, v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v24[0];
  v16 = v24[1];
  v17 = v24[2];
  v18 = v25;
  v22 = v27;
  v23 = v26;
  v19 = v28;
  result = sub_100007164(a1);
  *(_BYTE *)v12 = v15;
  *(_QWORD *)(v12 + 8) = v16;
  *(_QWORD *)(v12 + 16) = v17;
  *(_BYTE *)(v12 + 24) = v18;
  v21 = v22;
  *(_OWORD *)(v12 + 32) = v23;
  *(_OWORD *)(v12 + 48) = v21;
  *(_QWORD *)(v12 + 64) = v19;
  return result;
}

unint64_t sub_100059440()
{
  unint64_t result;

  result = qword_100114A10;
  if (!qword_100114A10)
  {
    result = swift_getWitnessTable(&unk_1000DE884, &_s17WidgetFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114A10);
  }
  return result;
}

unint64_t sub_100059484()
{
  unint64_t result;

  result = qword_100114A18;
  if (!qword_100114A18)
  {
    result = swift_getWitnessTable(&unk_1000DE85C, &_s11FormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A18);
  }
  return result;
}

unint64_t sub_1000594C8()
{
  unint64_t result;

  result = qword_100114A28;
  if (!qword_100114A28)
  {
    result = swift_getWitnessTable(&unk_1000DE834, &_s11FormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A28);
  }
  return result;
}

uint64_t _s17WidgetFormatStyleV10CodingKeysOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s17WidgetFormatStyleV10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000595A0 + 4 * byte_1000DE484[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000595C0 + 4 * byte_1000DE489[v4]))();
}

_BYTE *sub_1000595A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000595C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000595C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000595D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000595D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000595E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s17WidgetFormatStyleV10CodingKeysOMa()
{
  return &_s17WidgetFormatStyleV10CodingKeysON;
}

uint64_t _s22StocksPriceFormatStyleVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t _s22StocksPriceFormatStyleVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s22StocksPriceFormatStyleVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s22StocksPriceFormatStyleVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t _s22StocksPriceFormatStyleVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s22StocksPriceFormatStyleVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s22StocksPriceFormatStyleVMa()
{
  return &_s22StocksPriceFormatStyleVN;
}

uint64_t _s11FormatStyleVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t _s11FormatStyleVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s11FormatStyleVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t _s11FormatStyleVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s11FormatStyleVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000599D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s11FormatStyleVMa()
{
  return &_s11FormatStyleVN;
}

unint64_t sub_100059A3C()
{
  unint64_t result;

  result = qword_100114A30;
  if (!qword_100114A30)
  {
    result = swift_getWitnessTable(&unk_1000DE604, &_s11FormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A30);
  }
  return result;
}

unint64_t sub_100059A8C()
{
  unint64_t result;

  result = qword_100114A38;
  if (!qword_100114A38)
  {
    result = swift_getWitnessTable(&unk_1000DE62C, &_s11FormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A38);
  }
  return result;
}

unint64_t sub_100059AD4()
{
  unint64_t result;

  result = qword_100114A40;
  if (!qword_100114A40)
  {
    result = swift_getWitnessTable(&unk_1000DE6C4, &_s22StocksPriceFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A40);
  }
  return result;
}

unint64_t sub_100059B1C()
{
  unint64_t result;

  result = qword_100114A48;
  if (!qword_100114A48)
  {
    result = swift_getWitnessTable(&unk_1000DE80C, &_s17WidgetFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114A48);
  }
  return result;
}

unint64_t sub_100059B64()
{
  unint64_t result;

  result = qword_100114A50;
  if (!qword_100114A50)
  {
    result = swift_getWitnessTable(&unk_1000DE77C, &_s17WidgetFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114A50);
  }
  return result;
}

unint64_t sub_100059BAC()
{
  unint64_t result;

  result = qword_100114A58;
  if (!qword_100114A58)
  {
    result = swift_getWitnessTable(&unk_1000DE7A4, &_s17WidgetFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114A58);
  }
  return result;
}

unint64_t sub_100059BF4()
{
  unint64_t result;

  result = qword_100114A60;
  if (!qword_100114A60)
  {
    result = swift_getWitnessTable(&unk_1000DE754, &_s22StocksPriceFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A60);
  }
  return result;
}

unint64_t sub_100059C3C()
{
  unint64_t result;

  result = qword_100114A68;
  if (!qword_100114A68)
  {
    result = swift_getWitnessTable(&unk_1000DE72C, &_s22StocksPriceFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A68);
  }
  return result;
}

unint64_t sub_100059C84()
{
  unint64_t result;

  result = qword_100114A70;
  if (!qword_100114A70)
  {
    result = swift_getWitnessTable(&unk_1000DE6EC, &_s22StocksPriceFormatStyleVN);
    atomic_store(result, (unint64_t *)&qword_100114A70);
  }
  return result;
}

unint64_t sub_100059CC8()
{
  unint64_t result;

  result = qword_100114A80;
  if (!qword_100114A80)
  {
    result = swift_getWitnessTable(&unk_1000DEAEC, &_s11FormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114A80);
  }
  return result;
}

unint64_t sub_100059D0C()
{
  unint64_t result;

  result = qword_100114A98;
  if (!qword_100114A98)
  {
    result = swift_getWitnessTable(&unk_1000DEA9C, &_s22StocksPriceFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114A98);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TickerCellViewModel.CellType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s22StocksPriceFormatStyleV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100059E2C + 4 * byte_1000DE493[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100059E60 + 4 * byte_1000DE48E[v4]))();
}

uint64_t sub_100059E60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059E68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100059E70);
  return result;
}

uint64_t sub_100059E7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100059E84);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100059E88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059E90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s22StocksPriceFormatStyleV10CodingKeysOMa()
{
  return &_s22StocksPriceFormatStyleV10CodingKeysON;
}

uint64_t _s11FormatStyleV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100059EF8 + 4 * byte_1000DE49D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100059F2C + 4 * byte_1000DE498[v4]))();
}

uint64_t sub_100059F2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059F34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100059F3CLL);
  return result;
}

uint64_t sub_100059F48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100059F50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100059F54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059F5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11FormatStyleV10CodingKeysOMa()
{
  return &_s11FormatStyleV10CodingKeysON;
}

unint64_t sub_100059F7C()
{
  unint64_t result;

  result = qword_100114AA8;
  if (!qword_100114AA8)
  {
    result = swift_getWitnessTable(&unk_1000DE9BC, &_s11FormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114AA8);
  }
  return result;
}

unint64_t sub_100059FC4()
{
  unint64_t result;

  result = qword_100114AB0;
  if (!qword_100114AB0)
  {
    result = swift_getWitnessTable(&unk_1000DEA74, &_s22StocksPriceFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114AB0);
  }
  return result;
}

unint64_t sub_10005A00C()
{
  unint64_t result;

  result = qword_100114AB8;
  if (!qword_100114AB8)
  {
    result = swift_getWitnessTable(&unk_1000DE9E4, &_s22StocksPriceFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114AB8);
  }
  return result;
}

unint64_t sub_10005A054()
{
  unint64_t result;

  result = qword_100114AC0;
  if (!qword_100114AC0)
  {
    result = swift_getWitnessTable(&unk_1000DEA0C, &_s22StocksPriceFormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114AC0);
  }
  return result;
}

unint64_t sub_10005A09C()
{
  unint64_t result;

  result = qword_100114AC8;
  if (!qword_100114AC8)
  {
    result = swift_getWitnessTable(&unk_1000DE92C, &_s11FormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114AC8);
  }
  return result;
}

unint64_t sub_10005A0E4()
{
  unint64_t result;

  result = qword_100114AD0;
  if (!qword_100114AD0)
  {
    result = swift_getWitnessTable(&unk_1000DE954, &_s11FormatStyleV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100114AD0);
  }
  return result;
}

uint64_t sub_10005A138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  Class isa;
  id v23;
  unint64_t v24;
  id v25;
  Class v26;
  id v27;
  id v28;
  Class v29;
  id v30;
  char *v32;
  uint64_t v33;
  char *v34;
  id v35;
  char *v36;
  uint64_t v37;

  v37 = a1;
  sub_10005A76C();
  v33 = v1;
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005A818(0, &qword_100114B80, &qword_100114B88, FCNewsTabiConfiguration_ptr);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v32 = (char *)&v32 - v8;
  sub_10005A7C4(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v14;
  sub_10005A818(0, &qword_100114B98, &qword_100114BA0, FCNewsArticleEmbeddingsConfiguration_ptr);
  v16 = __chkstk_darwin(v15);
  v36 = (char *)&v32 - v17;
  v18 = enum case for FeatureState.disabled<A>(_:);
  (*(void (**)(__n128))(v19 + 104))(v16);
  v35 = sub_10005A86C();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v14, v18, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v9, v18, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 104))(v4, v18, v33);
  v20 = sub_10005AF20((uint64_t)_swiftEmptyArrayStorage);
  v21 = objc_allocWithZone((Class)FCPersonalizationPublisherDampeningConfig);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v23 = objc_msgSend(v21, "initWithConfig:", isa);

  v24 = sub_10005AF20((uint64_t)_swiftEmptyArrayStorage);
  v25 = objc_allocWithZone((Class)FCPersonalizationPublisherDampeningConfig);
  v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v27 = objc_msgSend(v25, "initWithConfig:", v26);

  v28 = objc_allocWithZone((Class)FCStatelessPersonalizationPublisherFavorability);
  sub_10005B2C0(0, &qword_100114BA8, (uint64_t)&type metadata for AnyHashable, (uint64_t)&protocol witness table for AnyHashable, (uint64_t (*)(_QWORD, uint64_t, char *))&type metadata accessor for Dictionary);
  v29 = Array._bridgeToObjectiveC()().super.isa;
  v30 = objc_msgSend(v28, "initWithArray:", v29);

  return Configuration.init(articleEmbeddingsScoringState:clientSideEngagementBoostEnabled:fallbackToReverseChronSorting:newsTabiPersonalizationState:personalizationTreatment:statelessPersonalizationState:extensionStatelessPersonalizationState:publisherDampeningConfig:shadowPublisherDampeningConfig:statelessPersonalizationPublisherFavorability:personalizationAnalyticsEnabled:tabiTagScoringEnabled:tabiCohortMembershipsEnabled:aggregatesInXavierEnabled:)(v36, 0, 0, v32, v35, v34, v4, v23, v27, v30, 0x1000000);
}

uint64_t sub_10005A448@<X0>(uint64_t a1@<X8>)
{
  return sub_10005A138(a1);
}

uint64_t sub_10005A470(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for Configuration(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005A138((uint64_t)v6);
  a2(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10005A504()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for WidgetPersonalizationConfigurationManager()
{
  return objc_opt_self(_TtC12StocksWidget41WidgetPersonalizationConfigurationManager);
}

uint64_t sub_10005A548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for AppConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  sub_100007184((_QWORD *)(*(_QWORD *)v1 + 16), v7);
  dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v7, v8);
  sub_10005A138(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10005A5FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = type metadata accessor for AppConfiguration(0);
  v3 = firstly<A>(closure:)(sub_10005B358, v1, v2);
  v4 = (void *)zalgo.getter(v3);
  v5 = type metadata accessor for Configuration(0);
  v6 = Promise.then<A>(on:closure:)(v4, sub_10005A448, 0, v5);
  swift_release(v3);

  return v6;
}

uint64_t sub_10005A680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[5];

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  sub_100007184((_QWORD *)(*(_QWORD *)v2 + 16), v5);
  v7 = dispatch thunk of AppConfigurationManagerType.asyncObservableAppConfiguration.getter(v5, v6);
  v8 = swift_allocObject(&unk_100106148, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = swift_retain(a2);
  v10 = (void *)zalgo.getter(v9);
  AsyncObservable.onNext(on:eager:block:)(v12, v10, 0, sub_10005A764, v8);
  swift_release(v7);
  swift_release(v8);

  return sub_100007164(v12);
}

uint64_t sub_10005A740()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005A764(uint64_t a1)
{
  uint64_t v1;

  return sub_10005A470(a1, *(void (**)(char *))(v1 + 16));
}

void sub_10005A76C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100114B78)
  {
    v0 = type metadata accessor for FeatureState(0, (char *)&type metadata for () + 8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100114B78);
  }
}

void sub_10005A7C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100114B90)
  {
    v2 = type metadata accessor for StatelessPersonalizationConfiguration(255);
    v3 = type metadata accessor for FeatureState(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100114B90);
  }
}

void sub_10005A818(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10002D554(255, a3, a4);
    v7 = type metadata accessor for FeatureState(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

id sub_10005A86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  Class isa;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  id v27[4];

  v0 = type metadata accessor for NewsPersonalizationTreatment(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  AppConfiguration.newsPersonalizationTreatment.getter();
  v6 = sub_10005B278();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v3, v0, v6);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_release(v5);
  v10 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v27[0] = 0;
  v12 = objc_msgSend(v10, "JSONObjectWithData:options:error:", isa, 4, v27);

  v13 = v27[0];
  if (!v12)
    goto LABEL_5;
  v14 = v27[0];
  _bridgeAnyObjectToAny(_:)(v27, v12);
  swift_unknownObjectRelease(v12);
  sub_10005B2C0(0, &qword_100114BC8, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t (*)(_QWORD, uint64_t, char *))&type metadata accessor for Dictionary);
  if ((swift_dynamicCast(&v26, v27, &type metadata for Any[8], v15, 6, v16) & 1) == 0)
  {
LABEL_6:
    v20 = objc_msgSend(objc_allocWithZone((Class)FCPersonalizationTreatment), "init");
    goto LABEL_7;
  }
  v17 = v26;
  v18 = sub_10005AB40(v26);
  swift_bridgeObjectRelease(v17);
  v13 = objc_allocWithZone((Class)FCPersonalizationTreatment);
  v19 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v20 = objc_msgSend(v13, "initWithPersonalizationTreatmentDictionary:", v19);

  if (!v20)
  {
    __break(1u);
LABEL_5:
    v21 = v13;
    v22 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v23);
    swift_errorRelease(v22);
    goto LABEL_6;
  }
LABEL_7:
  sub_100035568(v7, v9);
  return v20;
}

uint64_t sub_10005AB40(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];
  _OWORD v40[2];
  __int128 v41;
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10005B2C0(0, &qword_100114BB0, (uint64_t)&type metadata for AnyHashable, (uint64_t)&protocol witness table for AnyHashable, (uint64_t (*)(_QWORD, uint64_t, char *))&type metadata accessor for _DictionaryStorage);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10005B314(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v42);
    *(_QWORD *)&v41 = v20;
    *((_QWORD *)&v41 + 1) = v19;
    v39[2] = v41;
    v40[0] = v42[0];
    v40[1] = v42[1];
    *(_QWORD *)&v39[0] = v20;
    *((_QWORD *)&v39[0] + 1) = v19;
    v21 = swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7, v21);
    sub_10002DD6C(v40, v34);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10002DD6C(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10002DD6C(v38, v39);
    sub_10002DD6C(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v7[8 * v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10002DD6C(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_10005B350(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10005AF20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10005B2C0(0, &qword_100114BB0, (uint64_t)&type metadata for AnyHashable, (uint64_t)&protocol witness table for AnyHashable, (uint64_t (*)(_QWORD, uint64_t, char *))&type metadata accessor for _DictionaryStorage);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10005B098(v7, (uint64_t)v16);
    result = sub_10005B068((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10002DD6C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005B068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10005B144(a1, v4);
}

uint64_t sub_10005B098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10005B0DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10005B0DC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_100114BB8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 0, 0);
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100114BB8);
  }
}

unint64_t sub_10005B144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10005B208(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10005B244((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_10005B208(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10005B244(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_10005B278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114BC0;
  if (!qword_100114BC0)
  {
    v1 = type metadata accessor for NewsPersonalizationTreatment(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NewsPersonalizationTreatment, v1);
    atomic_store(result, (unint64_t *)&qword_100114BC0);
  }
  return result;
}

void sub_10005B2C0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, char *))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, &type metadata for Any[8]);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10005B314(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10005B350(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005B358()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_100007184(v0 + 2, v1);
  return dispatch thunk of AppConfigurationManagerType.fetchInitial()(v1, v2);
}

_QWORD *sub_10005B3A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  int *v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      sub_10002A7CC(0);
      v48 = v9;
      v10 = v9[12];
      v11 = (_QWORD *)((char *)a1 + v10);
      v12 = (char *)a2 + v10;
      v13 = *(_QWORD *)((char *)a2 + v10 + 8);
      *v11 = *(_QWORD *)((char *)a2 + v10);
      v11[1] = v13;
      v14 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v15 = v14[5];
      v47 = (char *)v11 + v15;
      v16 = &v12[v15];
      sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
      v18 = v17;
      v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
      v20 = swift_bridgeObjectRetain(v13);
      v19(v47, v16, v18, v20);
      *((_BYTE *)v11 + v14[6]) = v12[v14[6]];
      v21 = v14[7];
      v22 = (char *)v11 + v21;
      v23 = &v12[v21];
      v24 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      *(_QWORD *)((char *)v11 + v14[8]) = *(_QWORD *)&v12[v14[8]];
      *(_QWORD *)((char *)v11 + v14[9]) = *(_QWORD *)&v12[v14[9]];
      *((_BYTE *)v11 + v14[10]) = v12[v14[10]];
      v25 = v14[11];
      v26 = (char *)v11 + v25;
      v27 = &v12[v25];
      sub_10005B650(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0);
      v29 = v28;
      v30 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
      {
        sub_10001D6B0(0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v26, v27, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      }
      *((_BYTE *)a1 + v48[16]) = *((_BYTE *)a2 + v48[16]);
      *((_BYTE *)a1 + v48[20]) = *((_BYTE *)a2 + v48[20]);
      *((_BYTE *)a1 + v48[24]) = *((_BYTE *)a2 + v48[24]);
      v43 = a1;
      v44 = a3;
      v45 = 1;
    }
    else
    {
      sub_10002A734(0);
      v34 = *(int *)(v33 + 48);
      v35 = (_QWORD *)((char *)a1 + v34);
      v36 = (_QWORD *)((char *)a2 + v34);
      v38 = *v36;
      v37 = v36[1];
      *v35 = v38;
      v35[1] = v37;
      v39 = *(int *)(v33 + 64);
      v40 = (_QWORD *)((char *)a1 + v39);
      v41 = (_QWORD *)((char *)a2 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v42);
      v43 = a1;
      v44 = a3;
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v44, v45);
  }
  return a1;
}

void sub_10005B650(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4();
    v9 = type metadata accessor for NonEmpty(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_10005B6B4(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005B6F4(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  if (EnumCaseMultiPayload == 1)
  {
    sub_10002A7CC(0);
    v6 = a1 + *(int *)(v5 + 48);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
    v7 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v8 = v6 + v7[5];
    sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v10 = v6 + v7[7];
    v11 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    v12 = v6 + v7[11];
    sub_10005B650(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0);
    v14 = v13;
    v15 = *(_QWORD *)(v13 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v13);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
  }
  else
  {
    sub_10002A734(0);
    v18 = v17;
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v17 + 48) + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v18 + 64) + 8));
  }
  return result;
}

uint64_t sub_10005B864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v46;
  uint64_t v47;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v47 = a3;
    sub_10002A7CC(0);
    v46 = v8;
    v9 = v8[12];
    v10 = (_QWORD *)(a1 + v9);
    v11 = a2 + v9;
    v12 = *(_QWORD *)(a2 + v9 + 8);
    *v10 = *(_QWORD *)(a2 + v9);
    v10[1] = v12;
    v13 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v14 = v13[5];
    v15 = (char *)v10 + v14;
    v16 = v11 + v14;
    sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    v20 = swift_bridgeObjectRetain(v12);
    v19(v15, v16, v18, v20);
    *((_BYTE *)v10 + v13[6]) = *(_BYTE *)(v11 + v13[6]);
    v21 = v13[7];
    v22 = (char *)v10 + v21;
    v23 = v11 + v21;
    v24 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    *(_QWORD *)((char *)v10 + v13[8]) = *(_QWORD *)(v11 + v13[8]);
    *(_QWORD *)((char *)v10 + v13[9]) = *(_QWORD *)(v11 + v13[9]);
    *((_BYTE *)v10 + v13[10]) = *(_BYTE *)(v11 + v13[10]);
    v25 = v13[11];
    v26 = (char *)v10 + v25;
    v27 = (const void *)(v11 + v25);
    sub_10005B650(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0);
    v29 = v28;
    v30 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
    {
      sub_10001D6B0(0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v30 + 16))(v26, v27, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
    }
    v43 = v47;
    *(_BYTE *)(a1 + v46[16]) = *(_BYTE *)(a2 + v46[16]);
    *(_BYTE *)(a1 + v46[20]) = *(_BYTE *)(a2 + v46[20]);
    *(_BYTE *)(a1 + v46[24]) = *(_BYTE *)(a2 + v46[24]);
    v42 = a1;
    v44 = 1;
  }
  else
  {
    sub_10002A734(0);
    v33 = *(int *)(v32 + 48);
    v34 = (_QWORD *)(a1 + v33);
    v35 = (uint64_t *)(a2 + v33);
    v37 = *v35;
    v36 = v35[1];
    *v34 = v37;
    v34[1] = v36;
    v38 = *(int *)(v32 + 64);
    v39 = (_QWORD *)(a1 + v38);
    v40 = (_QWORD *)(a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v41);
    v42 = a1;
    v43 = a3;
    v44 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v43, v44);
  return a1;
}

uint64_t sub_10005BAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v45;
  uint64_t v46;

  if (a1 != a2)
  {
    sub_10001DF70(a1, type metadata accessor for OverviewTimelineEntry);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v46 = a3;
      sub_10002A7CC(0);
      v45 = v8;
      v9 = v8[12];
      v10 = (_QWORD *)(a1 + v9);
      v11 = a2 + v9;
      *v10 = *(_QWORD *)(a2 + v9);
      v12 = *(_QWORD *)(a2 + v9 + 8);
      v10[1] = v12;
      v13 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v14 = v13[5];
      v15 = (char *)v10 + v14;
      v16 = v11 + v14;
      sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
      v18 = v17;
      v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
      v20 = swift_bridgeObjectRetain(v12);
      v19(v15, v16, v18, v20);
      *((_BYTE *)v10 + v13[6]) = *(_BYTE *)(v11 + v13[6]);
      v21 = v13[7];
      v22 = (char *)v10 + v21;
      v23 = v11 + v21;
      v24 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      *(_QWORD *)((char *)v10 + v13[8]) = *(_QWORD *)(v11 + v13[8]);
      *(_QWORD *)((char *)v10 + v13[9]) = *(_QWORD *)(v11 + v13[9]);
      *((_BYTE *)v10 + v13[10]) = *(_BYTE *)(v11 + v13[10]);
      v25 = v13[11];
      v26 = (char *)v10 + v25;
      v27 = (const void *)(v11 + v25);
      sub_10005B650(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0);
      v29 = v28;
      v30 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v28))
      {
        sub_10001D6B0(0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v30 + 16))(v26, v27, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      }
      v42 = v46;
      *(_BYTE *)(a1 + v45[16]) = *(_BYTE *)(a2 + v45[16]);
      *(_BYTE *)(a1 + v45[20]) = *(_BYTE *)(a2 + v45[20]);
      *(_BYTE *)(a1 + v45[24]) = *(_BYTE *)(a2 + v45[24]);
      v41 = a1;
      v43 = 1;
    }
    else
    {
      sub_10002A734(0);
      v33 = *(int *)(v32 + 48);
      v34 = (_QWORD *)(a1 + v33);
      v35 = (_QWORD *)(a2 + v33);
      *v34 = *v35;
      v36 = v35[1];
      v34[1] = v36;
      v37 = *(int *)(v32 + 64);
      v38 = (_QWORD *)(a1 + v37);
      v39 = (_QWORD *)(a2 + v37);
      *v38 = *v39;
      v40 = v39[1];
      v38[1] = v40;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v40);
      v41 = a1;
      v42 = a3;
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v42, v43);
  }
  return a1;
}

uint64_t type metadata accessor for OverviewTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_100114C40;
  if (!qword_100114C40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OverviewTimelineEntry);
  return result;
}

uint64_t sub_10005BDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    sub_10002A7CC(0);
    v9 = v8;
    v10 = v8[12];
    v11 = a1 + v10;
    v12 = a2 + v10;
    *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
    v13 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
    v14 = v13[5];
    v15 = v11 + v14;
    v16 = v12 + v14;
    sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_BYTE *)(v11 + v13[6]) = *(_BYTE *)(v12 + v13[6]);
    v18 = v13[7];
    v19 = v11 + v18;
    v20 = v12 + v18;
    v21 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_QWORD *)(v11 + v13[8]) = *(_QWORD *)(v12 + v13[8]);
    *(_QWORD *)(v11 + v13[9]) = *(_QWORD *)(v12 + v13[9]);
    *(_BYTE *)(v11 + v13[10]) = *(_BYTE *)(v12 + v13[10]);
    v22 = v13[11];
    v23 = (void *)(v11 + v22);
    v24 = (const void *)(v12 + v22);
    sub_10005B650(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0);
    v26 = v25;
    v27 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      sub_10001D6B0(0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v23, v24, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
    *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
    *(_BYTE *)(a1 + v9[20]) = *(_BYTE *)(a2 + v9[20]);
    *(_BYTE *)(a1 + v9[24]) = *(_BYTE *)(a2 + v9[24]);
    v30 = a1;
    v31 = a3;
    v32 = 1;
  }
  else
  {
    sub_10002A734(0);
    *(_OWORD *)(a1 + *(int *)(v29 + 48)) = *(_OWORD *)(a2 + *(int *)(v29 + 48));
    *(_OWORD *)(a1 + *(int *)(v29 + 64)) = *(_OWORD *)(a2 + *(int *)(v29 + 64));
    v30 = a1;
    v31 = a3;
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  return a1;
}

uint64_t sub_10005C018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_10001DF70(a1, type metadata accessor for OverviewTimelineEntry);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      sub_10002A7CC(0);
      v9 = v8;
      v10 = v8[12];
      v11 = a1 + v10;
      v12 = a2 + v10;
      *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
      v13 = (int *)type metadata accessor for WatchlistOverviewContentViewModel(0);
      v14 = v13[5];
      v15 = v11 + v14;
      v16 = v12 + v14;
      sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_BYTE *)(v11 + v13[6]) = *(_BYTE *)(v12 + v13[6]);
      v18 = v13[7];
      v19 = v11 + v18;
      v20 = v12 + v18;
      v21 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      *(_QWORD *)(v11 + v13[8]) = *(_QWORD *)(v12 + v13[8]);
      *(_QWORD *)(v11 + v13[9]) = *(_QWORD *)(v12 + v13[9]);
      *(_BYTE *)(v11 + v13[10]) = *(_BYTE *)(v12 + v13[10]);
      v22 = v13[11];
      v23 = (void *)(v11 + v22);
      v24 = (const void *)(v12 + v22);
      sub_10005B650(0, (unint64_t *)&qword_100112698, (uint64_t (*)(uint64_t))sub_10001D794, sub_10001D7B0);
      v26 = v25;
      v27 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
      {
        sub_10001D6B0(0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v23, v24, v26);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
      }
      *(_BYTE *)(a1 + v9[16]) = *(_BYTE *)(a2 + v9[16]);
      *(_BYTE *)(a1 + v9[20]) = *(_BYTE *)(a2 + v9[20]);
      *(_BYTE *)(a1 + v9[24]) = *(_BYTE *)(a2 + v9[24]);
      v30 = a1;
      v31 = a3;
      v32 = 1;
    }
    else
    {
      sub_10002A734(0);
      *(_OWORD *)(a1 + *(int *)(v29 + 48)) = *(_OWORD *)(a2 + *(int *)(v29 + 48));
      *(_OWORD *)(a1 + *(int *)(v29 + 64)) = *(_OWORD *)(a2 + *(int *)(v29 + 64));
      v30 = a1;
      v31 = a3;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
  return a1;
}

uint64_t sub_10005C278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10005C284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10005C294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10005C2A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];
  _BYTE v7[32];
  _BYTE v8[32];
  _QWORD v9[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3(v8, v4, &unk_1000DEBD8, &unk_1000DEBF0);
    v9[0] = v8;
    v6[0] = v4;
    result = type metadata accessor for WatchlistOverviewContentViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      v6[2] = &unk_1000DEC08;
      v6[3] = &unk_1000DEC08;
      v6[4] = &unk_1000DEC08;
      swift_getTupleTypeLayout(v7, 0, 5, v6);
      v9[1] = v7;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005C378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for OverviewTimelineEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DE2C(v2, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    sub_10002A7CC(0);
    v11 = v8;
    if (v6[*(int *)(v8 + 64)] == 1)
    {
      v10.n128_u64[0] = 0x40AC200000000000;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v9.n128_u32[0] = 0;
      v10.n128_u64[0] = 0;
    }
    TimelineEntryRelevance.init(score:duration:)(v8, v9, v10);
    v18 = (uint64_t)&v6[*(int *)(v11 + 48)];
    v19 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 0, 1, v19);
    sub_10001DF70(v18, type metadata accessor for WatchlistOverviewContentViewModel);
  }
  else
  {
    sub_10002A734(0);
    v13 = v12;
    swift_bridgeObjectRelease(*(_QWORD *)&v6[*(int *)(v12 + 48) + 8]);
    v14 = swift_bridgeObjectRelease(*(_QWORD *)&v6[*(int *)(v13 + 64) + 8]);
    v14.n128_u32[0] = 0;
    v15.n128_u64[0] = 0;
    TimelineEntryRelevance.init(score:duration:)(v16, v14, v15);
    v17 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
  }
  v20 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v6, v20);
}

uint64_t sub_10005C500@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];

  v2 = v1;
  sub_10005B650(0, &qword_100112EF0, (uint64_t (*)(uint64_t))sub_10002A8DC, sub_10002A8F8);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = &v24[-v7];
  v9 = type metadata accessor for WatchlistOverviewContentViewModel(0);
  __chkstk_darwin(v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for OverviewTimelineEntry(0);
  __chkstk_darwin(v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001DE2C(v2, (uint64_t)v14, v15);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    sub_10002A7CC(0);
    sub_10005C8C4((uint64_t)&v14[*(int *)(v16 + 48)], (uint64_t)v11);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v8, &v11[*(int *)(v9 + 20)], v5);
    sub_10001D694(0);
    NonEmpty.map<A>(_:)(sub_10005C760, 0, v5, v17);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    sub_10001DF70((uint64_t)v11, type metadata accessor for WatchlistOverviewContentViewModel);
    sub_10005B650(0, &qword_100114C78, (uint64_t (*)(uint64_t))sub_10005C908, sub_10005C924);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 0, 1, v18);
  }
  else
  {
    sub_10002A734(0);
    v20 = v19;
    swift_bridgeObjectRelease(*(_QWORD *)&v14[*(int *)(v19 + 48) + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v14[*(int *)(v20 + 64) + 8]);
    sub_10005B650(0, &qword_100114C78, (uint64_t (*)(uint64_t))sub_10005C908, sub_10005C924);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
  }
  v22 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v14, v22);
}

uint64_t sub_10005C760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for TickerCellViewModel(0);
  return sub_10001DE2C(a1 + *(int *)(v4 + 52), a2, (uint64_t (*)(_QWORD))sub_10001D694);
}

uint64_t sub_10005C7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DE2C(v7, (uint64_t)v6, type metadata accessor for OverviewTimelineEntry);
  if (swift_getEnumCaseMultiPayload(v6, a1) == 1)
  {
    sub_10002A7CC(0);
    v9 = (uint64_t)&v6[*(int *)(v8 + 48)];
    v10 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a2, v6, v10);
    return sub_10001DF70(v9, type metadata accessor for WatchlistOverviewContentViewModel);
  }
  else
  {
    sub_10002A734(0);
    v13 = v12;
    swift_bridgeObjectRelease(*(_QWORD *)&v6[*(int *)(v12 + 48) + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v6[*(int *)(v13 + 64) + 8]);
    v14 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a2, v6, v14);
  }
}

uint64_t sub_10005C8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WatchlistOverviewContentViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10005C908(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100114C80, (uint64_t (*)(uint64_t))sub_10001D694, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

uint64_t sub_10005C924()
{
  return sub_10005B6B4(&qword_100114C88, (uint64_t (*)(uint64_t))sub_10005C908);
}

uint64_t sub_10005C938(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t *, uint64_t, int *, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = (_OWORD *)(a1 + 48);
    v11 = a2 + 6;
    v12 = a2[9];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v12 == 1)
    {
      v13 = *((_OWORD *)a2 + 4);
      *v10 = *v11;
      *(_OWORD *)(a1 + 64) = v13;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v12;
      swift_bridgeObjectRetain(v12);
    }
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v15 = a2[13];
    v16 = a2[14];
    v17 = a2[15];
    *(_QWORD *)(a1 + 112) = v16;
    *(_QWORD *)(a1 + 120) = v17;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    *(_QWORD *)(a1 + 136) = a2[17];
    v18 = *(int *)(a3 + 36);
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    *(_QWORD *)(a1 + 104) = v15;
    v21 = (int *)type metadata accessor for PreparedSparkline(0);
    v22 = *((_QWORD *)v21 - 1);
    v23 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v22 + 48);
    v24 = swift_bridgeObjectRetain(v16);
    if (v23(v20, 1, v21, v24))
    {
      sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      v27 = v21[5];
      v45 = (char *)v19 + v27;
      v46 = v22;
      v28 = (char *)v20 + v27;
      v29 = type metadata accessor for Date(0);
      v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
      v31 = swift_bridgeObjectRetain(v26);
      v30(v45, v28, v29, v31);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v30)(&v45[*(int *)(v32 + 36)], &v28[*(int *)(v32 + 36)], v29);
      v33 = v21[6];
      v34 = (char *)v19 + v33;
      v35 = (char *)v20 + v33;
      v36 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      *(_OWORD *)((char *)v19 + v21[7]) = *(_OWORD *)((char *)v20 + v21[7]);
      v37 = v21[8];
      v38 = (char *)v19 + v37;
      v39 = (char *)v20 + v37;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v46 + 56))(v19, 0, 1, v21);
    }
    v40 = *(int *)(a3 + 40);
    v41 = a1 + v40;
    v42 = (uint64_t)a2 + v40;
    sub_100042D9C(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  }
  return a1;
}

uint64_t sub_10005CBE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = a1[9];
  if (v4 != 1)
    swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[14]);
  v5 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  v6 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for Date(0);
    v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    sub_100022800(0);
    v9(&v7[*(int *)(v10 + 36)], v8);
    v11 = (char *)v5 + *(int *)(v6 + 24);
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = (char *)a1 + *(int *)(a2 + 40);
  sub_100042D9C(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t sub_10005CD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t *, uint64_t, int *, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = (_OWORD *)(a1 + 48);
  v10 = a2 + 48;
  v11 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(v10 + 16);
    *v9 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(v10 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v11;
    swift_bridgeObjectRetain(v11);
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v15;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v16 = *(int *)(a3 + 36);
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  *(_QWORD *)(a1 + 104) = v13;
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v20 + 48);
  v22 = swift_bridgeObjectRetain(v14);
  if (v21(v18, 1, v19, v22))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = *v18;
    *v17 = *v18;
    v25 = v19[5];
    v26 = (char *)v17 + v25;
    v47 = a3;
    v27 = (char *)v18 + v25;
    v28 = type metadata accessor for Date(0);
    v46 = v20;
    v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
    v30 = swift_bridgeObjectRetain(v24);
    v29(v26, v27, v28, v30);
    sub_100022800(0);
    v32 = *(int *)(v31 + 36);
    v33 = &v27[v32];
    a3 = v47;
    ((void (*)(char *, char *, uint64_t))v29)(&v26[v32], v33, v28);
    v34 = v19[6];
    v35 = (char *)v17 + v34;
    v36 = (char *)v18 + v34;
    v37 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
    v38 = v19[8];
    v39 = (char *)v17 + v38;
    v40 = (char *)v18 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v46 + 56))(v17, 0, 1, v19);
  }
  v41 = *(int *)(a3 + 40);
  v42 = a1 + v41;
  v43 = a2 + v41;
  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
  return a1;
}

uint64_t sub_10005CF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t, int *);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v76;
  uint64_t v77;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  if (v14 == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 64);
      *v12 = *v13;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      v18 = *(_QWORD *)v13;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)v12 = v18;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v19;
      swift_bridgeObjectRetain(v19);
    }
  }
  else if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
    v17 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v17;
  }
  else
  {
    v20 = *(_QWORD *)v13;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)v12 = v20;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v21 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v14);
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v22 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v22;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v25;
  v26 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v26;
  v27 = *(int *)(a3 + 36);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = (int *)type metadata accessor for PreparedSparkline(0);
  v31 = *((_QWORD *)v30 - 1);
  v32 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v36 = *v29;
      *v28 = *v29;
      v37 = v30[5];
      v76 = (char *)v28 + v37;
      v38 = (char *)v29 + v37;
      v77 = a3;
      v39 = type metadata accessor for Date(0);
      v40 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v39 - 8) + 16);
      v41 = swift_bridgeObjectRetain(v36);
      v40(v76, v38, v39, v41);
      sub_100022800(0);
      v43 = v39;
      a3 = v77;
      ((void (*)(char *, char *, uint64_t))v40)(&v76[*(int *)(v42 + 36)], &v38[*(int *)(v42 + 36)], v43);
      v44 = v30[6];
      v45 = (char *)v28 + v44;
      v46 = (char *)v29 + v44;
      v47 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      *(_OWORD *)((char *)v28 + v30[7]) = *(_OWORD *)((char *)v29 + v30[7]);
      v48 = v30[8];
      v49 = (char *)v28 + v48;
      v50 = (char *)v29 + v48;
      v51 = v50[8];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v51;
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_16;
    }
  }
  else
  {
    if (!v34)
    {
      v52 = *v29;
      v53 = *v28;
      *v28 = *v29;
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRelease(v53);
      v54 = v30[5];
      v55 = (char *)v28 + v54;
      v56 = (char *)v29 + v54;
      v57 = type metadata accessor for Date(0);
      v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 24);
      v58(v55, v56, v57);
      sub_100022800(0);
      v58(&v55[*(int *)(v59 + 36)], &v56[*(int *)(v59 + 36)], v57);
      v60 = v30[6];
      v61 = (char *)v28 + v60;
      v62 = (char *)v29 + v60;
      v63 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
      v64 = v30[7];
      v65 = (_QWORD *)((char *)v28 + v64);
      v66 = (_QWORD *)((char *)v29 + v64);
      *v65 = *v66;
      v65[1] = v66[1];
      v67 = v30[8];
      v68 = (char *)v28 + v67;
      v69 = (char *)v29 + v67;
      v70 = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v70;
      *((_BYTE *)v28 + v30[9]) = *((_BYTE *)v29 + v30[9]);
      goto LABEL_16;
    }
    sub_10001DF70((uint64_t)v28, type metadata accessor for PreparedSparkline);
  }
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
LABEL_16:
  v71 = *(int *)(a3 + 40);
  v72 = a1 + v71;
  v73 = a2 + v71;
  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 24))(v72, v73, v74);
  return a1;
}

uint64_t sub_10005D3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v8 = *(int *)(a3 + 36);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v11 = (int *)type metadata accessor for PreparedSparkline(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = v11[5];
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    v17 = type metadata accessor for Date(0);
    v32 = v3;
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    sub_100022800(0);
    v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
    v3 = v32;
    v20 = v11[6];
    v21 = (char *)v9 + v20;
    v22 = (char *)v10 + v20;
    v23 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_OWORD *)((char *)v9 + v11[7]) = *(_OWORD *)((char *)v10 + v11[7]);
    v24 = v11[8];
    v25 = (char *)v9 + v24;
    v26 = (char *)v10 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    *((_BYTE *)v9 + v11[9]) = *((_BYTE *)v10 + v11[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v27 = *(int *)(v3 + 40);
  v28 = a1 + v27;
  v29 = a2 + v27;
  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

uint64_t sub_10005D5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, int *);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  if (v14 == 1)
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 72);
  if (v15 == 1)
  {
    sub_10002304C(a1 + 48);
LABEL_4:
    v16 = *(_OWORD *)(a2 + 64);
    *v12 = *v13;
    *(_OWORD *)(a1 + 64) = v16;
    goto LABEL_6;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRelease(v14);
LABEL_6:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v19 = *(int *)(a3 + 36);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for PreparedSparkline(0);
  v23 = *((_QWORD *)v22 - 1);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *v20 = *v21;
      v28 = v22[5];
      v29 = (char *)v20 + v28;
      v30 = (char *)v21 + v28;
      v31 = type metadata accessor for Date(0);
      v60 = a3;
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
      v32(v29, v30, v31);
      sub_100022800(0);
      v32(&v29[*(int *)(v33 + 36)], &v30[*(int *)(v33 + 36)], v31);
      a3 = v60;
      v34 = v22[6];
      v35 = (char *)v20 + v34;
      v36 = (char *)v21 + v34;
      v37 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v38 = v22[8];
      v39 = (char *)v20 + v38;
      v40 = (char *)v21 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_14;
    }
  }
  else
  {
    if (!v26)
    {
      v41 = *v20;
      *v20 = *v21;
      swift_bridgeObjectRelease(v41);
      v42 = v22[5];
      v43 = (char *)v20 + v42;
      v44 = (char *)v21 + v42;
      v45 = type metadata accessor for Date(0);
      v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 40);
      v46(v43, v44, v45);
      sub_100022800(0);
      v46(&v43[*(int *)(v47 + 36)], &v44[*(int *)(v47 + 36)], v45);
      v48 = v22[6];
      v49 = (char *)v20 + v48;
      v50 = (char *)v21 + v48;
      v51 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
      *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
      v52 = v22[8];
      v53 = (char *)v20 + v52;
      v54 = (char *)v21 + v52;
      v53[8] = v54[8];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_BYTE *)v20 + v22[9]) = *((_BYTE *)v21 + v22[9]);
      goto LABEL_14;
    }
    sub_10001DF70((uint64_t)v20, type metadata accessor for PreparedSparkline);
  }
  sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_14:
  v55 = *(int *)(a3 + 40);
  v56 = a1 + v55;
  v57 = a2 + v55;
  sub_100042D9C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  return a1;
}

uint64_t sub_10005D954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D960);
}

uint64_t sub_10005D960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      sub_100042D9C(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10005DA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005DA24);
}

uint64_t sub_10005DA24(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_10000EDE8(0, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      sub_100042D9C(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for LargeDetailWithNewsContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100114CE8;
  if (!qword_100114CE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LargeDetailWithNewsContentView);
  return result;
}

void sub_10005DB14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = " ";
  v6[1] = &unk_1000DEC88;
  v6[2] = &unk_1000DECA0;
  v6[3] = &unk_1000DECB8;
  v6[4] = &unk_1000DECD0;
  sub_10000EDE8(319, (unint64_t *)&qword_100111ED8, type metadata accessor for PreparedSparkline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_100042D9C(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_10005DBE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8D38, 1);
}

uint64_t sub_10005DBF4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v76[12];
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 v112;
  _BYTE *v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;

  v101 = a2;
  v95 = type metadata accessor for HeadlinesList(0);
  __chkstk_darwin(v95);
  v97 = &v76[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005E73C(0, &qword_100114D60, v4);
  v96 = v5;
  __chkstk_darwin(v5);
  v100 = &v76[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v99 = &v76[-v8];
  v94 = type metadata accessor for Divider(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = &v76[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005E6E0(0);
  v91 = v10;
  __chkstk_darwin(v10);
  v98 = &v76[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v104 = &v76[-v13];
  v14 = type metadata accessor for RowWithChartTicker(0);
  __chkstk_darwin(v14);
  v16 = &v76[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005E73C(0, &qword_100114D50, v17);
  v89 = v18;
  __chkstk_darwin(v18);
  v103 = &v76[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v102 = &v76[-v21];
  LODWORD(v88) = *((unsigned __int8 *)a1 + 80);
  v22 = a1[1];
  v87 = *a1;
  v23 = a1[3];
  v86 = a1[2];
  v24 = a1[5];
  v85 = a1[4];
  v25 = a1[6];
  v82 = a1[7];
  v27 = a1[8];
  v26 = a1[9];
  v84 = a1[11];
  v83 = *((unsigned __int8 *)a1 + 96);
  v28 = a1[14];
  v81 = a1[13];
  v80 = a1[15];
  v79 = *((unsigned __int8 *)a1 + 128);
  v78 = a1[17];
  v77 = *((unsigned __int8 *)a1 + 144);
  v90 = type metadata accessor for LargeDetailWithNewsContentView(0);
  sub_1000245D0((uint64_t)a1 + *(int *)(v90 + 36), (uint64_t)&v16[*(int *)(v14 + 36)]);
  *v16 = v88;
  *((_QWORD *)v16 + 1) = v87;
  *((_QWORD *)v16 + 2) = v22;
  v29 = v22;
  *((_QWORD *)v16 + 3) = v86;
  *((_QWORD *)v16 + 4) = v23;
  *((_QWORD *)v16 + 5) = v85;
  *((_QWORD *)v16 + 6) = v24;
  v30 = v82;
  *((_QWORD *)v16 + 7) = v25;
  *((_QWORD *)v16 + 8) = v30;
  *((_QWORD *)v16 + 9) = v27;
  *((_QWORD *)v16 + 10) = v26;
  v31 = v83;
  *((_QWORD *)v16 + 11) = v84;
  *((_QWORD *)v16 + 12) = v31;
  *((_QWORD *)v16 + 13) = v81;
  *((_QWORD *)v16 + 14) = v28;
  v32 = v79;
  *((_QWORD *)v16 + 15) = v80;
  *((_QWORD *)v16 + 16) = v32;
  *((_QWORD *)v16 + 17) = v78;
  v16[144] = v77;
  v88 = v14;
  v87 = *(int *)(v14 + 40);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  sub_100024540(v25, v30, v27, v26);
  v33 = qword_100111538;
  swift_bridgeObjectRetain(v28);
  if (v33 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v34 = static Settings.UserPreferences.showCurrency;
  sub_10002F488(0, (unint64_t *)&qword_100111610, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for SettingProperty);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = swift_retain(v34);
  v37 = SettingProperty.init(_:)(v36);
  *(_QWORD *)&v16[v87] = v37;
  v38 = &v16[*(int *)(v88 + 44)];
  *v38 = swift_getKeyPath(&unk_1000DED38);
  sub_10000EDE8(0, &qword_100114160, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  KeyPath = swift_getKeyPath(&unk_1000DED68);
  v41 = swift_allocObject(&unk_1001061B0, 41, 7);
  *(_QWORD *)(v41 + 16) = 0;
  *(_BYTE *)(v41 + 24) = 1;
  *(_QWORD *)(v41 + 32) = 0;
  *(_BYTE *)(v41 + 40) = 0;
  v42 = v103;
  sub_10001DE2C((uint64_t)v16, (uint64_t)v103, type metadata accessor for RowWithChartTicker);
  v43 = (uint64_t *)&v42[*(int *)(v89 + 36)];
  *v43 = KeyPath;
  v43[1] = (uint64_t)sub_10002453C;
  v43[2] = v41;
  sub_10001DF70((uint64_t)v16, type metadata accessor for RowWithChartTicker);
  v44 = v102;
  v45 = sub_10005E818((uint64_t)v42, (uint64_t)v102, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  v46 = static Alignment.center.getter(v45);
  v48 = _FrameLayout.init(width:height:alignment:)(&v105, 0, 1, 0x4020000000000000, 0, v46, v47);
  v89 = v105;
  LODWORD(v88) = v106;
  v87 = v107;
  LODWORD(v86) = v108;
  v85 = v109;
  v84 = v110;
  v49 = v92;
  Divider.init()(v48);
  v50 = swift_getKeyPath(&unk_1000DED90);
  v51 = v93;
  v52 = (uint64_t)v98;
  v53 = v94;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16))(v98, v49, v94);
  v54 = v52 + *(int *)(v91 + 36);
  *(_BYTE *)v54 = 1;
  *(_QWORD *)(v54 + 8) = v50;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)(v54 + 32) = 0;
  *(_BYTE *)(v54 + 40) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v49, v53);
  v55 = sub_10005E7C4(v52, (uint64_t)v104);
  v56 = static Alignment.center.getter(v55);
  _FrameLayout.init(width:height:alignment:)(&v111, 0, 1, 0x4030000000000000, 0, v56, v57);
  v94 = v111;
  LODWORD(v93) = v112;
  v92 = v113;
  LODWORD(v91) = v114;
  v83 = v115;
  v82 = v116;
  v58 = (uint64_t)a1 + *(int *)(v90 + 40);
  sub_100042D9C(0);
  v60 = (uint64_t)v97;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v97, v58, v59);
  v61 = v95;
  *(_QWORD *)(v60 + *(int *)(v95 + 20)) = 3;
  *(_QWORD *)(v60 + *(int *)(v61 + 24)) = 0x4028000000000000;
  v62 = swift_getKeyPath(&unk_1000DED68);
  v63 = swift_allocObject(&unk_1001061D8, 41, 7);
  *(_QWORD *)(v63 + 16) = 0;
  *(_BYTE *)(v63 + 24) = 0;
  *(_QWORD *)(v63 + 32) = 0;
  *(_BYTE *)(v63 + 40) = 1;
  v64 = v100;
  sub_10001DE2C(v60, (uint64_t)v100, type metadata accessor for HeadlinesList);
  v65 = (uint64_t *)&v64[*(int *)(v96 + 36)];
  *v65 = v62;
  v65[1] = (uint64_t)sub_10002453C;
  v65[2] = v63;
  sub_10001DF70(v60, type metadata accessor for HeadlinesList);
  v66 = v99;
  sub_10005E818((uint64_t)v64, (uint64_t)v99, &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10005E864((uint64_t)v44, (uint64_t)v42, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  v67 = v104;
  sub_10001DE2C((uint64_t)v104, v52, (uint64_t (*)(_QWORD))sub_10005E6E0);
  sub_10005E864((uint64_t)v66, (uint64_t)v64, &qword_100114D60, type metadata accessor for HeadlinesList);
  v68 = v101;
  sub_10005E864((uint64_t)v42, v101, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  sub_10005E60C(0);
  v70 = v69;
  v71 = v68 + *(int *)(v69 + 48);
  *(_QWORD *)v71 = 0;
  *(_BYTE *)(v71 + 8) = 1;
  *(_QWORD *)(v71 + 16) = v89;
  *(_BYTE *)(v71 + 24) = v88;
  *(_QWORD *)(v71 + 32) = v87;
  *(_BYTE *)(v71 + 40) = v86;
  v72 = v84;
  *(_QWORD *)(v71 + 48) = v85;
  *(_QWORD *)(v71 + 56) = v72;
  sub_10001DE2C(v52, v68 + *(int *)(v69 + 64), (uint64_t (*)(_QWORD))sub_10005E6E0);
  v73 = v68 + *(int *)(v70 + 80);
  *(_QWORD *)v73 = 0;
  *(_BYTE *)(v73 + 8) = 1;
  *(_QWORD *)(v73 + 16) = v94;
  *(_BYTE *)(v73 + 24) = v93;
  *(_QWORD *)(v73 + 32) = v92;
  *(_BYTE *)(v73 + 40) = v91;
  v74 = v82;
  *(_QWORD *)(v73 + 48) = v83;
  *(_QWORD *)(v73 + 56) = v74;
  sub_10005E864((uint64_t)v64, v68 + *(int *)(v70 + 96), &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10005E8B0((uint64_t)v66, &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10001DF70((uint64_t)v67, (uint64_t (*)(_QWORD))sub_10005E6E0);
  sub_10005E8B0((uint64_t)v102, &qword_100114D50, type metadata accessor for RowWithChartTicker);
  sub_10005E8B0((uint64_t)v64, &qword_100114D60, type metadata accessor for HeadlinesList);
  sub_10001DF70(v52, (uint64_t (*)(_QWORD))sub_10005E6E0);
  return sub_10005E8B0((uint64_t)v103, &qword_100114D50, type metadata accessor for RowWithChartTicker);
}

uint64_t sub_10005E54C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_10005E590(0);
  return sub_10005DBF4(v2, a2 + *(int *)(v4 + 44));
}

void sub_10005E590(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100114D38)
  {
    sub_10000EDE8(255, &qword_100114D40, (uint64_t (*)(uint64_t))sub_10005E60C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _VStackLayout, v2, &protocol witness table for _VStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100114D38);
  }
}

void sub_10005E60C(uint64_t a1)
{
  unint64_t TupleTypeMetadata;
  uint64_t v3;

  if (!qword_100114D48)
  {
    sub_10005E73C(255, &qword_100114D50, type metadata accessor for RowWithChartTicker);
    sub_10002F488(255, (unint64_t *)&qword_100113A30, (uint64_t)&type metadata for Spacer, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    sub_10005E6E0(255);
    sub_10005E73C(255, &qword_100114D60, type metadata accessor for HeadlinesList);
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 5);
    if (!v3)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100114D48);
  }
}

void sub_10005E6E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100114D58)
  {
    v2 = type metadata accessor for Divider(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2, &type metadata for DividerExtendedIntoMargin);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100114D58);
  }
}

void sub_10005E73C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = a3(255);
    sub_100024258();
    v7 = type metadata accessor for ModifiedContent(a1, v5, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10005E7B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10005E7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10005E6E0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E808()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10005E818(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10005E73C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_10005E864(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10005E73C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_10005E8B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_10005E73C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_10005E8EC()
{
  return sub_100003D3C(&qword_100114D68, (uint64_t (*)(uint64_t))sub_10005E918, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

void sub_10005E918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100114D70)
  {
    sub_10000EDE8(255, &qword_100114D40, (uint64_t (*)(uint64_t))sub_10005E60C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = v2;
    v4 = sub_10005E990();
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100114D70);
  }
}

unint64_t sub_10005E990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114D78;
  if (!qword_100114D78)
  {
    sub_10000EDE8(255, &qword_100114D40, (uint64_t (*)(uint64_t))sub_10005E60C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114D78);
  }
  return result;
}

uint64_t sub_10005E9F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  __int128 v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_100003AE0(0, &qword_1001165E0, (uint64_t)&protocol descriptor for TodayPrivateDataProviderType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (v31)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_100007184(a1, v8);
    v10 = sub_100003AE0(0, &qword_100114EB8, (uint64_t)&protocol descriptor for ConfigurationManagerType);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (v29)
    {
      v11 = sub_10005F1A8((uint64_t)v30, v31);
      v12 = __chkstk_darwin(v11);
      v14 = (_QWORD *)((char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v15 + 16))(v14, v12);
      v16 = *v14;
      v17 = type metadata accessor for TodayPrivateDataProvider(0);
      v27[3] = v17;
      v27[4] = &off_1001059D0;
      v27[0] = v16;
      v18 = type metadata accessor for WidgetScoringService();
      v19 = (_QWORD *)swift_allocObject(v18, 104, 7);
      v20 = sub_10005F1A8((uint64_t)v27, v17);
      v21 = __chkstk_darwin(v20);
      v23 = (_QWORD *)((char *)&v27[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v24 + 16))(v23, v21);
      v25 = *v23;
      v19[5] = v17;
      v19[6] = &off_1001059D0;
      v19[2] = v25;
      v19[12] = 0;
      sub_10001D968(&v28, (uint64_t)(v19 + 7));
      sub_100007164(v27);
      sub_100007164(v30);
      a2[3] = v18;
      result = sub_100003D3C(qword_100114EE0, (uint64_t (*)(uint64_t))type metadata accessor for WidgetScoringService, (uint64_t)&unk_1000DCEB0);
      a2[4] = result;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10005EC0C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = a1[3];
  v4 = a1[4];
  sub_100007184(a1, v3);
  v5 = type metadata accessor for WidgetPersonalizationConfigurationManager();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    a2[3] = v5;
    result = sub_100003D3C(&qword_100114ED8, (uint64_t (*)(uint64_t))type metadata accessor for WidgetPersonalizationConfigurationManager, (uint64_t)&unk_1000DEB7C);
    a2[4] = result;
    *a2 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005EC98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_100007184(a1, v1);
  v3 = sub_100003AE0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (v8)
  {
    v5 = type metadata accessor for WidgetPersonalizationConfigurationManager();
    v6 = swift_allocObject(v5, 56, 7);
    sub_10001D968(&v7, v6 + 16);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005ED30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _BYTE v20[24];
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25;

  v4 = a1[3];
  v5 = a1[4];
  sub_100007184(a1, v4);
  v6 = sub_100003AE0(0, &qword_100114EC8, (uint64_t)&protocol descriptor for StockEntityServiceType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!v25)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_100003AE0(0, &qword_100113ED0, (uint64_t)&protocol descriptor for WatchlistManagerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!v23)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_100007184(a1, v11);
  v13 = sub_100003AE0(0, &qword_100112740, (uint64_t)&protocol descriptor for AppConfigurationManagerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!v21)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_100007184(a1, v14);
  v16 = sub_100003AE0(0, &qword_100114EB0, (uint64_t)&protocol descriptor for HeadlineProfileScorerType);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v16, v16, v14, v15);
  if (v19[3])
  {
    v17 = type metadata accessor for NewsHeadlineScorerFactory(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = NewsHeadlineScorerFactory.init(stockEntityService:watchlistManager:appConfigurationManager:newsPersonalizationScorer:tabiScorer:)(v24, v22, v20, v19, 0);
    a2[3] = v17;
    result = sub_100003D3C(&qword_100114ED0, (uint64_t (*)(uint64_t))&type metadata accessor for NewsHeadlineScorerFactory, (uint64_t)&protocol conformance descriptor for NewsHeadlineScorerFactory);
    a2[4] = result;
    *a2 = v18;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PersonalizationAssembly()
{
  return objc_opt_self(_TtC12StocksWidget23PersonalizationAssembly);
}

uint64_t sub_10005EF1C@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = type metadata accessor for NoopFeedPersonalizerHeadlineScorer(0);
  a1[4] = &protocol witness table for NoopFeedPersonalizerHeadlineScorer;
  sub_10005F1D0(a1);
  return NoopFeedPersonalizerHeadlineScorer.init()();
}

uint64_t type metadata accessor for NoopPersonalizationAssembly()
{
  return objc_opt_self(_TtC12StocksWidget27NoopPersonalizationAssembly);
}

uint64_t sub_10005EF7C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = ProxyContainer.public.getter(a1);
  v2 = sub_100003AE0(0, &qword_100114EB0, (uint64_t)&protocol descriptor for HeadlineProfileScorerType);
  v3 = RegistrationContainer.register<A>(_:name:factory:)(v2, 0, 0, sub_10005EF1C, 0, v2);
  swift_release(v3);
  return swift_release(v1);
}

uint64_t sub_10005EFDC()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_100003AE0(0, &qword_100114EB0, (uint64_t)&protocol descriptor for HeadlineProfileScorerType);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10005E9F0, 0, v6);
  swift_release(v7);
  swift_release(v5);
  v9 = ProxyContainer.public.getter(v8);
  v10 = sub_100003AE0(0, &qword_100114EB8, (uint64_t)&protocol descriptor for ConfigurationManagerType);
  v11 = RegistrationContainer.register<A>(_:name:factory:)(v10, 0, 0, sub_10005EC0C, 0, v10);
  swift_release(v11);
  v12 = swift_release(v9);
  v13 = ProxyContainer.private.getter(v12);
  v14 = type metadata accessor for WidgetPersonalizationConfigurationManager();
  v15 = RegistrationContainer.register<A>(_:name:factory:)(v14, 0, 0, sub_10005EC98, 0, v14);
  swift_release(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Scope.singleton(_:), v0);
  v16 = Definition.inScope(_:)(v4);
  swift_release(v16);
  swift_release(v15);
  v17.n128_f64[0] = (*(double (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v18 = ProxyContainer.public.getter(v17);
  v19 = sub_100003AE0(0, &qword_100114EC0, (uint64_t)&protocol descriptor for NewsHeadlineScorerFactoryType);
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_10005ED30, 0, v19);
  swift_release(v20);
  return swift_release(v18);
}

uint64_t sub_10005F1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

_QWORD *sub_10005F1D0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10005F210@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - v5;
  v7 = type metadata accessor for Stock(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetStock(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    if (qword_1001114D0 != -1)
      swift_once(&qword_1001114D0, sub_10005F5A8);
    v14 = static Stock.compactPlaceholder;
  }
  else
  {
    if (qword_1001114C8 != -1)
      swift_once(&qword_1001114C8, sub_10005F470);
    v14 = static Stock.placeholder;
  }
  v15 = sub_100012524(v7, (uint64_t)v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v15, v7);
  v16 = &v13[*(int *)(v11 + 20)];
  v17 = type metadata accessor for WidgetQuote(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (uint64_t)&v13[*(int *)(v11 + 24)];
  sub_100068E94(v18);
  v19 = type metadata accessor for PreparedSparkline(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 0, 1, v19);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v10, v7);
  if (qword_1001114E8 != -1)
    swift_once(&qword_1001114E8, sub_10005F93C);
  v20 = qword_1001268F8;
  sub_100042D9C(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  swift_bridgeObjectRetain(v20);
  return sub_100095528((uint64_t)v13, v20, (uint64_t)v6, a2);
}

uint64_t sub_10005F470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for StockType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Stock(0);
  sub_10001253C(v4, static Stock.placeholder);
  sub_100012524(v4, (uint64_t)static Stock.placeholder);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for StockType.equity(_:), v0);
  return Stock.init(symbol:name:exchange:type:shortName:compactName:sector:industry:)(0x2E2E2E2E2E2E2ELL, 0xE700000000000000, 0x2E2E2E2E2E2ELL, 0xE600000000000000, 0, 0xE000000000000000, v3, 0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t Stock.placeholder.unsafeMutableAddressor()
{
  return sub_10005F6D0(&qword_1001114C8, (uint64_t)static Stock.placeholder, (uint64_t)sub_10005F470);
}

uint64_t static Stock.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10005F72C(&qword_1001114C8, (uint64_t)static Stock.placeholder, (uint64_t)sub_10005F470, a1);
}

uint64_t sub_10005F5A8(uint64_t a1)
{
  return sub_10005F5BC(a1, static Stock.compactPlaceholder, 11565, 0xE200000000000000);
}

uint64_t sub_10005F5BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for StockType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Stock(0);
  sub_10001253C(v11, a2);
  sub_100012524(v11, (uint64_t)a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for StockType.equity(_:), v7);
  return Stock.init(symbol:name:exchange:type:shortName:compactName:sector:industry:)(a3, a4, a3, a4, 0, 0xE000000000000000, v10, 0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t Stock.compactPlaceholder.unsafeMutableAddressor()
{
  return sub_10005F6D0(&qword_1001114D0, (uint64_t)static Stock.compactPlaceholder, (uint64_t)sub_10005F5A8);
}

uint64_t sub_10005F6D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Stock(0);
  return sub_100012524(v4, a2);
}

uint64_t static Stock.compactPlaceholder.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10005F72C(&qword_1001114D0, (uint64_t)static Stock.compactPlaceholder, (uint64_t)sub_10005F5A8, a1);
}

uint64_t sub_10005F72C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Stock(0);
  v7 = sub_100012524(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_10005F794(uint64_t a1)
{
  return sub_10005F5BC(a1, static Stock.largeComplicationPlaceholder, 0x302E3030302C3031, 0xE900000000000030);
}

uint64_t Stock.largeComplicationPlaceholder.unsafeMutableAddressor()
{
  return sub_10005F6D0(&qword_1001114D8, (uint64_t)static Stock.largeComplicationPlaceholder, (uint64_t)sub_10005F794);
}

uint64_t static Stock.largeComplicationPlaceholder.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10005F72C(&qword_1001114D8, (uint64_t)static Stock.largeComplicationPlaceholder, (uint64_t)sub_10005F794, a1);
}

uint64_t sub_10005F7F0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_10000EDE8(0, &qword_1001126D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v10 - v1;
  v3 = type metadata accessor for ExchangeStatus(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetQuote(0);
  sub_10001253C(v7, qword_1001268E0);
  sub_100012524(v7, (uint64_t)qword_1001268E0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for ExchangeStatus.open(_:), v3);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
  return WidgetQuote.init(price:priceChange:marketCapitalization:currencyCode:exchangeStatus:exchangeNextOpen:)(0x40C3880000000000, 0, 0, 1, 0, 1, 0, 0, v6, v2);
}

uint64_t sub_10005F93C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;

  v0 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v0 - 8);
  v18 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = &_swiftEmptyArrayStorage;
  v3 = 10;
  result = sub_1000737D8(0, 10, 0);
  do
  {
    v5 = UUID.init()(result);
    v19 = UUID.uuidString.getter(v5);
    v7 = v6;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v2, v18);
    v20 = 0;
    swift_stdlib_random(&v20, 8);
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    v9 = String.init(repeating:count:)(v8, (v20 >> 62) + 3);
    v20 = 0;
    swift_stdlib_random(&v20, 8);
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    v11 = String.init(repeating:count:)(v10, (v20 >> 63) | 2);
    v12 = (uint64_t)v21;
    result = swift_isUniquelyReferenced_nonNull_native(v21);
    if ((result & 1) == 0)
    {
      result = sub_1000737D8(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = (uint64_t)v21;
    }
    v14 = *(_QWORD *)(v12 + 16);
    v13 = *(_QWORD *)(v12 + 24);
    if (v14 >= v13 >> 1)
    {
      result = sub_1000737D8(v13 > 1, v14 + 1, 1);
      v12 = (uint64_t)v21;
    }
    *(_QWORD *)(v12 + 16) = v14 + 1;
    v15 = (Swift::String *)(v12 + 48 * v14);
    v15[2]._countAndFlagsBits = v19;
    v15[2]._object = v7;
    v15[3] = v9;
    v15[4] = v11;
    --v3;
  }
  while (v3);
  qword_1001268F8 = v12;
  return result;
}

uint64_t sub_10005FAEC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_10000EDE8(0, (unint64_t *)&qword_100112690, (uint64_t (*)(uint64_t))sub_100042D9C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - v1;
  v3 = type metadata accessor for WidgetStock(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DetailContentViewModel(0);
  sub_10001253C(v6, qword_100126900);
  v7 = sub_100012524(v6, (uint64_t)qword_100126900);
  if (qword_1001114F8 != -1)
    swift_once(&qword_1001114F8, sub_10005FC78);
  v8 = sub_100012524(v3, (uint64_t)qword_100126918);
  sub_10005FE64(v8, (uint64_t)v5);
  if (qword_1001114E8 != -1)
    swift_once(&qword_1001114E8, sub_10005F93C);
  v9 = qword_1001268F8;
  sub_100042D9C(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v2, 1, 1, v10);
  swift_bridgeObjectRetain(v9);
  return sub_100095528((uint64_t)v5, v9, (uint64_t)v2, v7);
}

uint64_t sub_10005FC78()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_10000EDE8(0, &qword_100111ED0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v16 - v1;
  v3 = type metadata accessor for Stock(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetStock(0);
  sub_10001253C(v7, qword_100126918);
  v8 = sub_100012524(v7, (uint64_t)qword_100126918);
  if (qword_1001114D8 != -1)
    swift_once(&qword_1001114D8, sub_10005F794);
  v9 = sub_100012524(v3, (uint64_t)static Stock.largeComplicationPlaceholder);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
  if (qword_1001114E0 != -1)
    swift_once(&qword_1001114E0, sub_10005F7F0);
  v10 = type metadata accessor for WidgetQuote(0);
  v11 = sub_100012524(v10, (uint64_t)qword_1001268E0);
  v12 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v2, v11, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v2, 0, 1, v10);
  v13 = v8 + *(int *)(v7 + 24);
  v14 = type metadata accessor for PreparedSparkline(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8, v6, v3);
  return sub_10000731C((uint64_t)v2, v8 + *(int *)(v7 + 20));
}

uint64_t sub_10005FE64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetStock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005FEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v19);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v19 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v16 = v3 + *(int *)(a2 + 60);
    v17 = swift_getAssociatedTypeWitness(0, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v20, v16, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
    dispatch thunk of FormatStyle.format(_:)(v15, v6, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  }
}

uint64_t sub_100060038(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = a2[3];
  dispatch thunk of Hashable.hash(into:)(a1, a2[2], *(_QWORD *)(v4 + 24));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  return dispatch thunk of Hashable.hash(into:)(a1, AssociatedTypeWitness, a2[6]);
}

uint64_t sub_1000600B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  char v16;
  _QWORD v18[5];

  if ((dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8)) & 1) != 0)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
    v18[0] = a3;
    v18[1] = a4;
    v18[2] = a5;
    v18[3] = a6;
    v18[4] = a7;
    v15 = type metadata accessor for NilPlaceholderFormatStyle(0, (uint64_t)v18);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)(a1 + *(int *)(v15 + 60), a2 + *(int *)(v15 + 60), AssociatedTypeWitness, *(_QWORD *)(a7 + 8));
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_100060178(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702060386, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease(0xEB00000000726564);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F686563616C70, 0xEB00000000726564, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100060270(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C6F686563616C70;
  else
    return 1702060386;
}

uint64_t sub_1000602A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v22 = *(_QWORD *)(a2 + 16);
  v25 = v22;
  v24 = *(_OWORD *)(a2 + 24);
  v21 = *(_OWORD *)(a2 + 40);
  v26 = v24;
  v27 = v21;
  v4 = type metadata accessor for NilPlaceholderFormatStyle.CodingKeys(255, (uint64_t)&v25);
  WitnessTable = swift_getWitnessTable(&unk_1000DF088, v4);
  v6 = type metadata accessor for KeyedEncodingContainer(0, v4, WitnessTable);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - v8;
  v11 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v11);
  v12 = WitnessTable;
  v13 = v10;
  v14 = v22;
  v15 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v4, v4, v12, v11, v13);
  LOBYTE(v25) = 0;
  v16 = v24;
  v17 = v28;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v25, v6, v14, *(_QWORD *)(v24 + 16));
  if (!v17)
  {
    v18 = v15 + *(int *)(a2 + 60);
    LOBYTE(v25) = 1;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v16);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v25, v6, AssociatedTypeWitness, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int sub_10006044C(_QWORD *a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  sub_100060038((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t sub_100060490@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t AssociatedTypeWitness;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v57 = a1;
  v40 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v43 = (char *)&v37 - v12;
  v48 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v13);
  v46 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = a2;
  v53 = a3;
  v54 = a4;
  v55 = a5;
  v56 = a6;
  v15 = type metadata accessor for NilPlaceholderFormatStyle.CodingKeys(255, (uint64_t)&v52);
  WitnessTable = swift_getWitnessTable(&unk_1000DF088, v15);
  v50 = type metadata accessor for KeyedDecodingContainer(0, v15, WitnessTable);
  v42 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v18 = (char *)&v37 - v17;
  v47 = a2;
  v52 = a2;
  v53 = a3;
  v45 = a3;
  v41 = a4;
  v54 = a4;
  v55 = a5;
  v56 = a6;
  v38 = type metadata accessor for NilPlaceholderFormatStyle(0, (uint64_t)&v52);
  v19 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v21 = (char *)&v37 - v20;
  v22 = v57;
  v23 = v57[3];
  v24 = v57[4];
  sub_100007184(v57, v23);
  v49 = v18;
  v25 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v15, v15, WitnessTable, v23, v24);
  if (v25)
    return sub_100007164(v22);
  v51 = v19;
  v27 = v42;
  v26 = v43;
  v28 = v21;
  v30 = v47;
  v29 = v48;
  v31 = AssociatedTypeWitness;
  LOBYTE(v52) = 0;
  v32 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v46, v47, &v52, v50, v47, *(_QWORD *)(v45 + 8));
  (*(void (**)(char *, _QWORD *, uint64_t))(v29 + 32))(v28, v32, v30);
  LOBYTE(v52) = 1;
  v33 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v31, &v52, v50, v31, v41);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v49, v50);
  v34 = v38;
  (*(void (**)(char *, _QWORD *, uint64_t))(v39 + 32))(&v28[*(int *)(v38 + 60)], v26, v33);
  v35 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v40, v28, v34);
  sub_100007164(v57);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v28, v34);
}

BOOL sub_1000607B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static StockChartHighlightStyle.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000607CC()
{
  char *v0;

  return StockChartHighlightStyle.hashValue.getter(*v0);
}

void sub_1000607E4(uint64_t a1)
{
  char *v1;

  StockChartHighlightStyle.hash(into:)(a1, *v1);
}

Swift::Int sub_1000607FC(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  StockChartHighlightStyle.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_100060848()
{
  char *v0;

  return sub_100060270(*v0);
}

uint64_t sub_100060860@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100060178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100060894@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100061370();
  *a1 = result;
  return result;
}

uint64_t sub_1000608C8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000DF088, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1000608FC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000DF088, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100060934@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100060490(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_100060958(_QWORD *a1, uint64_t a2)
{
  return sub_1000602A8(a1, a2);
}

Swift::Int sub_100060974(uint64_t a1, _QWORD *a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  sub_100060038((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_1000609B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000600B0(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t sub_1000609C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000609D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  _QWORD v8[2];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 24));
    v3 = AssociatedTypeWitness;
    if (v6 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v8, a1 + 56);
      return 0;
    }
  }
  return v3;
}

uint64_t *sub_100060A78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_100060B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(v4 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24));
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v5 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_100060BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v7 + *(unsigned __int8 *)(v9 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (v7 + *(unsigned __int8 *)(v9 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100060C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))((v7 + *(unsigned __int8 *)(v9 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (v7 + *(unsigned __int8 *)(v9 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100060D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((v7 + *(unsigned __int8 *)(v9 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (v7 + *(unsigned __int8 *)(v9 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100060DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((v7 + *(unsigned __int8 *)(v9 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (v7 + *(unsigned __int8 *)(v9 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_100060E48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_100060FF4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 24)) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = &dword_100000004;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = &_mh_execute_header.magic + 1;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for NilPlaceholderFormatStyle(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for NilPlaceholderFormatStyle);
}

uint64_t sub_100061230(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DEEA0, a1);
}

uint64_t sub_100061240(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DEF30, a1);
}

uint64_t sub_100061250(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DEF08, a1);
}

uint64_t sub_100061260(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DEEC8, a1);
}

uint64_t type metadata accessor for NilPlaceholderFormatStyle.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for NilPlaceholderFormatStyle.CodingKeys);
}

uint64_t sub_10006127C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_100061284(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000612D0 + 4 * byte_1000DEE63[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100061304 + 4 * byte_1000DEE5E[v4]))();
}

uint64_t sub_100061304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006130C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061314);
  return result;
}

uint64_t sub_100061320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061328);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006132C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061340(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DF060, a1);
}

uint64_t sub_100061350(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DEFD0, a1);
}

uint64_t sub_100061360(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000DEFF8, a1);
}

uint64_t sub_100061370()
{
  return 2;
}

uint64_t sub_100061378@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t result;

  *(_BYTE *)(a3 + 48) = 1;
  *(_OWORD *)(a3 + 56) = xmmword_1000DB170;
  v4 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(a3 + 72) = objc_msgSend(v4, "labelColor");
  *(_QWORD *)(a3 + 80) = objc_msgSend(v4, "systemBackgroundColor");
  *(_QWORD *)(a3 + 88) = objc_msgSend(v4, "secondarySystemFillColor");
  *(_QWORD *)(a3 + 96) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 1.0);
  *(_QWORD *)(a3 + 104) = objc_msgSend(v4, "separatorColor");
  *(_QWORD *)(a3 + 112) = objc_msgSend(v4, "separatorColor");
  *(_QWORD *)(a3 + 120) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.882352941, 0.960784314, 0.905882353, 1.0);
  *(_QWORD *)(a3 + 128) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.490196078, 0.105882353, 1.0);
  *(_QWORD *)(a3 + 136) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.203921569, 0.780392157, 0.349019608, 1.0);
  *(_QWORD *)(a3 + 144) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.247058824, 0.941176471, 0.419607843, 1.0);
  *(_QWORD *)(a3 + 152) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.870588235, 0.0274509804, 0.109803922, 1.0);
  *(_QWORD *)(a3 + 160) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.231372549, 0.188235294, 1.0);
  *(_QWORD *)(a3 + 168) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.231372549, 0.588235294, 0.97254902, 1.0);
  *(_QWORD *)(a3 + 176) = objc_msgSend(v4, "secondaryLabelColor");
  *(_QWORD *)(a3 + 184) = objc_msgSend(v4, "tertiaryLabelColor");
  *(_QWORD *)(a3 + 192) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 1.0);
  *(_QWORD *)(a3 + 200) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 0.14);
  *(_QWORD *)(a3 + 208) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.298039216, 0.850980392, 0.392156863, 1.0);
  *(_QWORD *)(a3 + 216) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.352941176, 0.784313725, 0.980392157, 1.0);
  *(_QWORD *)(a3 + 224) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.592156863, 1.0, 1.0);
  *(_QWORD *)(a3 + 232) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.552941176, 0.294117647, 1.0, 1.0);
  *(_QWORD *)(a3 + 240) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.407843137, 0.0, 1.0, 1.0);
  *(_BYTE *)(a3 + 248) = 1;
  *(_QWORD *)(a3 + 256) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.670588235, 1.0);
  v5 = objc_msgSend(v4, "whiteColor");
  v6 = objc_msgSend(v5, "colorWithAlphaComponent:", 0.25);

  *(_QWORD *)(a3 + 264) = v6;
  v7 = objc_msgSend(v4, "whiteColor");
  v8 = objc_msgSend(v7, "colorWithAlphaComponent:", 0.25);

  *(_QWORD *)(a3 + 272) = v8;
  v9 = objc_msgSend(v4, "whiteColor");
  v10 = objc_msgSend(v9, "colorWithAlphaComponent:", 0.6);

  *(_QWORD *)(a3 + 280) = v10;
  v11 = objc_msgSend(v4, "grayColor");
  v12 = objc_msgSend(v11, "colorWithAlphaComponent:", 0.3);

  *(_QWORD *)(a3 + 288) = v12;
  *(_QWORD *)(a3 + 296) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.365, 0.365, 0.365, 1.0);
  *(_QWORD *)(a3 + 304) = objc_msgSend(v4, "whiteColor");
  *(_QWORD *)(a3 + 312) = objc_msgSend(v4, "blackColor");
  *(_QWORD *)(a3 + 320) = objc_msgSend(v4, "secondaryLabelColor");
  *(_QWORD *)(a3 + 328) = objc_msgSend(v4, "secondarySystemBackgroundColor");
  *(_QWORD *)(a3 + 336) = objc_msgSend(v4, "secondaryLabelColor");
  *(_QWORD *)(a3 + 344) = objc_msgSend(v4, "labelColor");
  *(_QWORD *)(a3 + 352) = objc_msgSend(v4, "secondarySystemFillColor");
  *(_QWORD *)(a3 + 360) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.305882353, 0.305882353, 0.31372549, 0.2);
  *(_QWORD *)(a3 + 368) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 1.0);
  *(_QWORD *)(a3 + 376) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 1.0, 1.0, 0.3);
  *(_QWORD *)(a3 + 384) = objc_msgSend(v4, "secondaryLabelColor");
  *(_QWORD *)(a3 + 392) = objc_msgSend(v4, "labelColor");
  result = sub_10001D968(a1, a3);
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

void destroy for DarkTheme(uint64_t a1)
{
  sub_100007164((_QWORD *)a1);

}

uint64_t initializeWithCopy for DarkTheme(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(void **)(a2 + 72);
  v6 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v6;
  v9 = *(void **)(a2 + 88);
  v8 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v8;
  v11 = *(void **)(a2 + 104);
  v10 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  v12 = *(void **)(a2 + 120);
  v13 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = v13;
  v61 = *(void **)(a2 + 136);
  v62 = *(void **)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v61;
  *(_QWORD *)(a1 + 144) = v62;
  v63 = *(void **)(a2 + 152);
  v64 = *(void **)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v63;
  *(_QWORD *)(a1 + 160) = v64;
  v65 = *(void **)(a2 + 168);
  v66 = *(void **)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v65;
  *(_QWORD *)(a1 + 176) = v66;
  v67 = *(void **)(a2 + 184);
  v68 = *(void **)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v67;
  *(_QWORD *)(a1 + 192) = v68;
  v69 = *(void **)(a2 + 200);
  v70 = *(void **)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v69;
  *(_QWORD *)(a1 + 208) = v70;
  v71 = *(void **)(a2 + 216);
  v72 = *(void **)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v71;
  *(_QWORD *)(a1 + 224) = v72;
  v73 = *(void **)(a2 + 232);
  v75 = *(void **)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v73;
  *(_QWORD *)(a1 + 240) = v75;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v14 = *(void **)(a2 + 264);
  v74 = *(void **)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v74;
  *(_QWORD *)(a1 + 264) = v14;
  v76 = v14;
  v77 = *(void **)(a2 + 272);
  v15 = *(void **)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v77;
  *(_QWORD *)(a1 + 280) = v15;
  v78 = v15;
  v79 = *(void **)(a2 + 288);
  v16 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v79;
  *(_QWORD *)(a1 + 296) = v16;
  v80 = v16;
  v81 = *(void **)(a2 + 304);
  v82 = *(void **)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v81;
  *(_QWORD *)(a1 + 312) = v82;
  v83 = *(void **)(a2 + 320);
  v84 = *(void **)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v83;
  *(_QWORD *)(a1 + 328) = v84;
  v85 = *(void **)(a2 + 336);
  v86 = *(void **)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v85;
  *(_QWORD *)(a1 + 344) = v86;
  v87 = *(void **)(a2 + 352);
  v88 = *(void **)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v87;
  *(_QWORD *)(a1 + 360) = v88;
  v89 = *(void **)(a2 + 368);
  v90 = *(void **)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v89;
  *(_QWORD *)(a1 + 376) = v90;
  v17 = *(void **)(a2 + 384);
  v18 = *(void **)(a2 + 392);
  v91 = v17;
  *(_QWORD *)(a1 + 384) = v17;
  *(_QWORD *)(a1 + 392) = v18;
  v19 = v5;
  v20 = v7;
  v21 = v6;
  v22 = v9;
  v23 = v8;
  v24 = v11;
  v25 = v10;
  v26 = v12;
  v27 = v13;
  v28 = v61;
  v29 = v62;
  v30 = v63;
  v31 = v64;
  v32 = v65;
  v33 = v66;
  v34 = v67;
  v35 = v68;
  v36 = v69;
  v37 = v70;
  v38 = v71;
  v39 = v72;
  v40 = v73;
  v41 = v75;
  v42 = v74;
  v43 = v76;
  v44 = v77;
  v45 = v78;
  v46 = v79;
  v47 = v80;
  v48 = v81;
  v49 = v82;
  v50 = v83;
  v51 = v84;
  v52 = v85;
  v53 = v86;
  v54 = v87;
  v55 = v88;
  v56 = v89;
  v57 = v90;
  v58 = v91;
  v59 = v18;
  return a1;
}

uint64_t assignWithCopy for DarkTheme(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  id v126;

  sub_1000621B0((_QWORD *)a1, (_QWORD *)a2);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(void **)(a2 + 72);
  v8 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 80);
  v11 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 88);
  v14 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;
  v15 = v13;

  v16 = *(void **)(a2 + 96);
  v17 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  v18 = v16;

  v19 = *(void **)(a2 + 104);
  v20 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v19;
  v21 = v19;

  v22 = *(void **)(a2 + 112);
  v23 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v22;
  v24 = v22;

  v25 = *(void **)(a2 + 120);
  v26 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v25;
  v27 = v25;

  v28 = *(void **)(a2 + 128);
  v29 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v28;
  v30 = v28;

  v31 = *(void **)(a2 + 136);
  v32 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v31;
  v33 = v31;

  v34 = *(void **)(a2 + 144);
  v35 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v34;
  v36 = v34;

  v37 = *(void **)(a2 + 152);
  v38 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v37;
  v39 = v37;

  v40 = *(void **)(a2 + 160);
  v41 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v40;
  v42 = v40;

  v43 = *(void **)(a2 + 168);
  v44 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v43;
  v45 = v43;

  v46 = *(void **)(a2 + 176);
  v47 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v46;
  v48 = v46;

  v49 = *(void **)(a2 + 184);
  v50 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v49;
  v51 = v49;

  v52 = *(void **)(a2 + 192);
  v53 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v52;
  v54 = v52;

  v55 = *(void **)(a2 + 200);
  v56 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v55;
  v57 = v55;

  v58 = *(void **)(a2 + 208);
  v59 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v58;
  v60 = v58;

  v61 = *(void **)(a2 + 216);
  v62 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v61;
  v63 = v61;

  v64 = *(void **)(a2 + 224);
  v65 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v64;
  v66 = v64;

  v67 = *(void **)(a2 + 232);
  v68 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v67;
  v69 = v67;

  v70 = *(void **)(a2 + 240);
  v71 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v70;
  v72 = v70;

  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v73 = *(void **)(a2 + 256);
  v74 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v73;
  v75 = v73;

  v76 = *(void **)(a2 + 264);
  v77 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v76;
  v78 = v76;

  v79 = *(void **)(a2 + 272);
  v80 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v79;
  v81 = v79;

  v82 = *(void **)(a2 + 280);
  v83 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v82;
  v84 = v82;

  v85 = *(void **)(a2 + 288);
  v86 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v85;
  v87 = v85;

  v88 = *(void **)(a2 + 296);
  v89 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v88;
  v90 = v88;

  v91 = *(void **)(a2 + 304);
  v92 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v91;
  v93 = v91;

  v94 = *(void **)(a2 + 312);
  v95 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v94;
  v96 = v94;

  v97 = *(void **)(a2 + 320);
  v98 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v97;
  v99 = v97;

  v100 = *(void **)(a2 + 328);
  v101 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v100;
  v102 = v100;

  v103 = *(void **)(a2 + 336);
  v104 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v103;
  v105 = v103;

  v106 = *(void **)(a2 + 344);
  v107 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v106;
  v108 = v106;

  v109 = *(void **)(a2 + 352);
  v110 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v109;
  v111 = v109;

  v112 = *(void **)(a2 + 360);
  v113 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v112;
  v114 = v112;

  v115 = *(void **)(a2 + 368);
  v116 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v115;
  v117 = v115;

  v118 = *(void **)(a2 + 376);
  v119 = *(void **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v118;
  v120 = v118;

  v121 = *(void **)(a2 + 384);
  v122 = *(void **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v121;
  v123 = v121;

  v124 = *(void **)(a2 + 392);
  v125 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v124;
  v126 = v124;

  return a1;
}

_QWORD *sub_1000621B0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

void *initializeWithTake for DarkTheme(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t assignWithTake for DarkTheme(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  sub_100007164((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  v8 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  v9 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  v10 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  v11 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  v12 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  v13 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v14 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v15 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  v16 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);

  v17 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);

  v18 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  v19 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);

  v20 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);

  v21 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

  v22 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

  v23 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);

  v24 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);

  v25 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);

  v26 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);

  v27 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  v28 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);

  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v29 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);

  v30 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  v31 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);

  v32 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);

  v33 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);

  v34 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  v35 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);

  v36 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);

  v37 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);

  v38 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);

  v39 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);

  v40 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);

  v41 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);

  v42 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);

  v43 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);

  v44 = *(void **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);

  v45 = *(void **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);

  v46 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);

  return a1;
}

uint64_t getEnumTagSinglePayload for DarkTheme(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 400))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DarkTheme(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 400) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 400) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DarkTheme()
{
  return &type metadata for DarkTheme;
}

id sub_1000626F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000627D8((SEL *)&selRef_systemBackgroundColor, a1);
}

id sub_100062704()
{
  uint64_t v0;
  void *v1;
  id v2;
  id result;

  v1 = *(void **)(v0 + 40);
  if (!v1)
    return objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v2 = objc_msgSend(v1, "horizontalSizeClass");
  if ((unint64_t)v2 < 2)
    return objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  if (v2 == (id)2)
  {
    sub_100062C08();
    return (id)static UIColor.feedBackground.getter();
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005BLL, 0x80000001000E57C0, "StocksWidget/DarkTheme.swift", 28, 2, 73, 0);
    __break(1u);
  }
  return result;
}

id sub_1000627CC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000627D8((SEL *)&selRef_secondarySystemBackgroundColor, a1);
}

id sub_1000627D8@<X0>(SEL *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), *a1);
  *a2 = result;
  return result;
}

uint64_t sub_100062818()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

id sub_100062820()
{
  uint64_t v0;

  return *(id *)(v0 + 80);
}

uint64_t sub_100062828(uint64_t a1, uint64_t a2)
{
  return sub_100062B54(a1, a2, (uint64_t)sub_1000626F8, (uint64_t)sub_100062C44);
}

id sub_100062840()
{
  uint64_t v0;

  return *(id *)(v0 + 88);
}

uint64_t sub_100062850()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_100007184(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_100062894()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_100007184(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

id sub_1000628D8()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
}

id sub_100062904()
{
  uint64_t v0;

  return *(id *)(v0 + 96);
}

id sub_10006290C()
{
  uint64_t v0;

  return *(id *)(v0 + 104);
}

id sub_100062914()
{
  uint64_t v0;

  return *(id *)(v0 + 112);
}

id sub_10006291C()
{
  uint64_t v0;
  _BOOL4 v1;
  uint64_t v2;

  v1 = UIAccessibilityDarkerSystemColorsEnabled();
  v2 = 136;
  if (v1)
    v2 = 144;
  return *(id *)(v0 + v2);
}

id sub_100062944()
{
  uint64_t v0;

  return *(id *)(v0 + 120);
}

id sub_10006294C()
{
  uint64_t v0;

  return *(id *)(v0 + 160);
}

id sub_100062954()
{
  uint64_t v0;

  return *(id *)(v0 + 168);
}

id sub_100062960()
{
  id *v0;
  id *v1;
  BOOL v2;

  if (UIAccessibilityDarkerSystemColorsEnabled())
  {
    v1 = v0 + 16;
  }
  else
  {
    v2 = UIAccessibilityDarkerSystemColorsEnabled();
    v1 = v0 + 18;
    if (!v2)
      v1 = v0 + 17;
  }
  return *v1;
}

id sub_100062998()
{
  uint64_t v0;
  _BOOL4 v1;
  uint64_t v2;

  v1 = UIAccessibilityDarkerSystemColorsEnabled();
  v2 = 160;
  if (v1)
    v2 = 152;
  return *(id *)(v0 + v2);
}

id sub_1000629C0()
{
  uint64_t v0;

  return *(id *)(v0 + 176);
}

id sub_1000629C8()
{
  uint64_t v0;

  return *(id *)(v0 + 184);
}

id sub_1000629D0()
{
  uint64_t v0;

  return *(id *)(v0 + 192);
}

id sub_1000629D8()
{
  uint64_t v0;

  return *(id *)(v0 + 200);
}

id sub_1000629E0()
{
  uint64_t v0;

  return *(id *)(v0 + 352);
}

id sub_1000629E8()
{
  uint64_t v0;

  return *(id *)(v0 + 360);
}

id sub_1000629F4()
{
  id *v0;
  BOOL v1;
  id *v2;

  if (UIAccessibilityDarkerSystemColorsEnabled())
  {
    v1 = UIAccessibilityDarkerSystemColorsEnabled();
    v2 = v0 + 18;
    if (!v1)
      v2 = v0 + 17;
  }
  else
  {
    v2 = v0 + 26;
  }
  return *v2;
}

id sub_100062A2C()
{
  uint64_t v0;

  return *(id *)(v0 + 216);
}

id sub_100062A34()
{
  uint64_t v0;

  return *(id *)(v0 + 224);
}

id sub_100062A3C()
{
  uint64_t v0;

  return *(id *)(v0 + 232);
}

id sub_100062A44()
{
  uint64_t v0;

  return *(id *)(v0 + 240);
}

id sub_100062A4C()
{
  uint64_t v0;

  return *(id *)(v0 + 256);
}

uint64_t sub_100062A54()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 248);
}

uint64_t sub_100062A5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_100007184(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

id sub_100062AA0()
{
  uint64_t v0;

  return *(id *)(v0 + 264);
}

id sub_100062AA8()
{
  uint64_t v0;

  return *(id *)(v0 + 272);
}

id sub_100062AB0()
{
  uint64_t v0;

  return *(id *)(v0 + 280);
}

id sub_100062AB8()
{
  uint64_t v0;

  return *(id *)(v0 + 288);
}

id sub_100062AC0()
{
  uint64_t v0;

  return *(id *)(v0 + 296);
}

id sub_100062AC8()
{
  uint64_t v0;

  return *(id *)(v0 + 304);
}

id sub_100062AD0()
{
  uint64_t v0;

  return *(id *)(v0 + 312);
}

uint64_t sub_100062AD8()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_100062C08();
  static Feed.densityValue<A>(on:off:)(&v2, sub_1000627CC, 0, sub_1000627CC, 0, v0);
  return v2;
}

id sub_100062B20()
{
  uint64_t v0;

  return *(id *)(v0 + 320);
}

id sub_100062B28()
{
  uint64_t v0;

  return *(id *)(v0 + 328);
}

id sub_100062B30()
{
  uint64_t v0;

  return *(id *)(v0 + 336);
}

id sub_100062B38()
{
  uint64_t v0;

  return *(id *)(v0 + 344);
}

uint64_t sub_100062B40(uint64_t a1, uint64_t a2)
{
  return sub_100062B54(a1, a2, (uint64_t)sub_1000626F8, (uint64_t)sub_100062BF8);
}

uint64_t sub_100062B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100062C08();
  static Feed.densityValue<A>(on:off:)(&v9, a3, 0, a4, &v8, v6);
  return v9;
}

id sub_100062BB0()
{
  uint64_t v0;

  return *(id *)(v0 + 368);
}

id sub_100062BB8()
{
  uint64_t v0;

  return *(id *)(v0 + 376);
}

id sub_100062BC0()
{
  uint64_t v0;

  return *(id *)(v0 + 384);
}

id sub_100062BC8()
{
  uint64_t v0;

  return *(id *)(v0 + 392);
}

BOOL sub_100062BD0()
{
  return !UIAccessibilityIsInvertColorsEnabled();
}

uint64_t sub_100062BE8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_100062BF0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

id sub_100062BF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)(v1 + 16) + 80);
  *a1 = v2;
  return v2;
}

unint64_t sub_100062C08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114FE8;
  if (!qword_100114FE8)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100114FE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecord.SymbolConfiguration()
{
  return &type metadata for WidgetSectionConfigRecord.SymbolConfiguration;
}

uint64_t destroy for WidgetSectionConfigRecord(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s12StocksWidget25WidgetSectionConfigRecordVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for WidgetSectionConfigRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for WidgetSectionConfigRecord(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecord()
{
  return &type metadata for WidgetSectionConfigRecord;
}

uint64_t destroy for SymbolName(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for SymbolName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SymbolName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for SymbolName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecord.SymbolConfiguration.Article()
{
  return &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article;
}

uint64_t sub_100062F2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v20 = a5;
  v19 = a4;
  sub_100012608(0, &qword_100115080, (uint64_t (*)(void))sub_1000645E0, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v18 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_100007184(a1, v13);
  v15 = sub_1000645E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys, v15, v13, v14);
  v23 = 0;
  v16 = v21;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v23, v9);
  if (!v16)
  {
    v22 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v22, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10006306C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  sub_100012608(0, &qword_100115040, (uint64_t (*)(void))sub_1000643A8, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100007184(a1, v9);
  v11 = sub_1000643A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys, v11, v9, v10);
  v18 = a2;
  sub_1000643EC();
  v13 = v12;
  v14 = sub_100064484(&qword_100115048, (void (*)(void))sub_1000644E8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, v15, v5, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000631A0()
{
  _BYTE *v0;

  if (*v0)
    return 0x65764F656C746974;
  else
    return 0x49656C6369747261;
}

uint64_t sub_1000631EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000639CC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100063210(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10006321C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000645E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100063244(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000645E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006326C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100063AEC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100063298(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100062F2C(a1, *v1, v1[1], v1[2], v1[3]);
}

unint64_t sub_1000632B4()
{
  return 0xD000000000000011;
}

uint64_t sub_1000632D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100063CB4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000632F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000643A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100063320(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000643A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100063348@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100063D38(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100063370(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10006306C(a1, *v1);
}

uint64_t sub_100063388(char *a1, char *a2)
{
  return sub_1000A3BA0(*a1, *a2);
}

Swift::Int sub_100063394()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x4E64726F6365725FLL;
  if (v1)
    v3 = 0x80000001000E4D40;
  else
    v3 = 0xEB00000000656D61;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100063420(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x4E64726F6365725FLL;
  if (*v1)
    v3 = 0x80000001000E4D40;
  else
    v3 = 0xEB00000000656D61;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100063488(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0xD000000000000014;
  else
    v3 = 0x4E64726F6365725FLL;
  if (v2)
    v4 = 0x80000001000E4D40;
  else
    v4 = 0xEB00000000656D61;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100063510@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103858, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10006356C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x4E64726F6365725FLL;
  if (*v1)
    v2 = 0xD000000000000014;
  v3 = 0x80000001000E4D40;
  if (!*v1)
    v3 = 0xEB00000000656D61;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000635B8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x4E64726F6365725FLL;
}

uint64_t sub_100063600@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100103858, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100063660(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000642BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100063688(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000642BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000636B0(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;

  v41 = a3;
  v39 = a4;
  v40 = a2;
  v5 = type metadata accessor for String.Encoding(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0, v6);
  v37 = *(_QWORD *)(v9 - 8);
  v38 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100115058, (uint64_t (*)(void))sub_1000642BC, (uint64_t)&type metadata for WidgetSectionConfigRecord.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  v17 = a1[3];
  v18 = a1[4];
  sub_100007184(a1, v17);
  v19 = sub_1000642BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetSectionConfigRecord.CodingKeys, &type metadata for WidgetSectionConfigRecord.CodingKeys, v19, v17, v18);
  v45 = 0;
  v20 = v42;
  KeyedEncodingContainer.encode(_:forKey:)(v40, v41, &v45, v13);
  if (v20)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v41 = v8;
  v42 = v14;
  v22 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = JSONEncoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v11, enum case for JSONEncoder.DateEncodingStrategy.iso8601(_:), v38);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v11);
  v24 = v39;
  v43 = v39;
  sub_100064300();
  v26 = v25;
  v27 = sub_10006452C(&qword_100115060, (void (*)(void))sub_10006459C, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  swift_bridgeObjectRetain(v24);
  v28 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v43, v26, v27);
  v30 = v29;
  swift_bridgeObjectRelease(v24);
  v31 = v41;
  static String.Encoding.utf8.getter(v32);
  result = String.init(data:encoding:)(v28, v30, v31);
  v34 = v42;
  if (v33)
  {
    v35 = v33;
    v44 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(result, v33, &v44, v13);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v13);
    sub_100035568(v28, v30);
    swift_bridgeObjectRelease(v35);
    return swift_release(v23);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100063984@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100063EA8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1000639B0(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000636B0(a1, *(_QWORD *)v1, *(char **)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000639CC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x49656C6369747261 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49656C6369747261, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65764F656C746974 && a2 == 0xED00006564697272)
  {
    swift_bridgeObjectRelease(0xED00006564697272);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65764F656C746974, 0xED00006564697272, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100063AEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  sub_100012608(0, &qword_100115070, (uint64_t (*)(void))sub_1000645E0, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v7 = (char *)&v16 - v6;
  v8 = a1[3];
  v9 = a1[4];
  sub_100007184(a1, v8);
  v10 = sub_1000645E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys, v10, v8, v9);
  if (v1)
  {
    sub_100007164(a1);
  }
  else
  {
    v18 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v4);
    v13 = v12;
    v17 = 1;
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v17, v4);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain(v15);
    sub_100007164(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v13);
  }
  return v9;
}

uint64_t sub_100063CB4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001000E5F50)
  {
    swift_bridgeObjectRelease(0x80000001000E5F50);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000E5F50, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_100063D38(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  sub_100012608(0, &qword_100115018, (uint64_t (*)(void))sub_1000643A8, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v7 = (char *)&v18 - v6;
  v8 = a1[3];
  v9 = a1[4];
  v10 = sub_100007184(a1, v8);
  v11 = sub_1000643A8();
  v12 = v10;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys, v11, v8, v9);
  if (!v1)
  {
    sub_1000643EC();
    v14 = v13;
    v15 = sub_100064484(&qword_100115030, (void (*)(void))sub_100064440, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v14, v16, v4, v14, v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = v19;
  }
  sub_100007164(a1);
  return v12;
}

uint64_t sub_100063EA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char v50;

  v2 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin(v2);
  v44 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.Encoding(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100114FF0, (uint64_t (*)(void))sub_1000642BC, (uint64_t)&type metadata for WidgetSectionConfigRecord.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v40 - v10;
  v12 = a1[3];
  v13 = a1[4];
  sub_100007184(a1, v12);
  v14 = sub_1000642BC();
  v15 = (unint64_t)v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetSectionConfigRecord.CodingKeys, &type metadata for WidgetSectionConfigRecord.CodingKeys, v14, v12, v13);
  if (v15)
  {
    sub_100007164(a1);
    return v9;
  }
  v47 = v6;
  v16 = v9;
  v50 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for String, &v50, v8, &type metadata for String, &protocol witness table for String);
  v17 = v11;
  if (v49)
    v9 = v48;
  else
    v9 = 0x676E697373696DLL;
  if (v49)
    v19 = v49;
  else
    v19 = 0xE700000000000000;
  LOBYTE(v48) = 1;
  swift_bridgeObjectRetain(v19);
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v8);
  v22 = v16;
  v23 = v21;
  v24 = v17;
  v25 = a1;
  if (!v21)
    goto LABEL_18;
  v26 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v26 = v20 & 0xFFFFFFFFFFFFLL;
  if (!v26)
  {
    swift_bridgeObjectRelease(v21);
LABEL_18:
    v39 = sub_10002C5EC((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v8);
    goto LABEL_19;
  }
  v40 = v9;
  v27 = (unint64_t)v47;
  v28 = v20;
  static String.Encoding.utf8.getter(v20);
  v41 = String.data(using:allowLossyConversion:)(v27, 0, v28, v23);
  v30 = v29;
  v31 = swift_bridgeObjectRelease(v23);
  result = (*(uint64_t (**)(unint64_t, uint64_t, __n128))(v42 + 8))(v27, v43, v31);
  v47 = (char *)v30;
  if (v30 >> 60 != 15)
  {
    v32 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v33 = JSONDecoder.init()();
    v34 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for JSONDecoder.DateDecodingStrategy.iso8601(_:), v46);
    dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v34);
    sub_100064300();
    v36 = v35;
    v37 = sub_10006452C(&qword_100115008, (void (*)(void))sub_100064364, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v38 = v41;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v36, v41, v47, v36, v37);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v8);
    swift_release(v33);
    sub_1000368C8(v38, (unint64_t)v47);
    v39 = v48;
    v9 = v40;
LABEL_19:
    swift_bridgeObjectRetain(v39);
    sub_100007164(v25);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v19);
    return v9;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000642BC()
{
  unint64_t result;

  result = qword_100114FF8;
  if (!qword_100114FF8)
  {
    result = swift_getWitnessTable(&unk_1000DF670, &type metadata for WidgetSectionConfigRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100114FF8);
  }
  return result;
}

void sub_100064300()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100115000)
  {
    v0 = type metadata accessor for Dictionary(0, &type metadata for String, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration, &protocol witness table for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100115000);
  }
}

unint64_t sub_100064364()
{
  unint64_t result;

  result = qword_100115010;
  if (!qword_100115010)
  {
    result = swift_getWitnessTable(&unk_1000DF314, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration);
    atomic_store(result, (unint64_t *)&qword_100115010);
  }
  return result;
}

unint64_t sub_1000643A8()
{
  unint64_t result;

  result = qword_100115020;
  if (!qword_100115020)
  {
    result = swift_getWitnessTable(&unk_1000DF620, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115020);
  }
  return result;
}

void sub_1000643EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100115028)
  {
    v0 = type metadata accessor for Array(0, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100115028);
  }
}

unint64_t sub_100064440()
{
  unint64_t result;

  result = qword_100115038;
  if (!qword_100115038)
  {
    result = swift_getWitnessTable(&unk_1000DF29C, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article);
    atomic_store(result, (unint64_t *)&qword_100115038);
  }
  return result;
}

uint64_t sub_100064484(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1000643EC();
    v8 = v7;
    a2();
    result = swift_getWitnessTable(a3, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000644E8()
{
  unint64_t result;

  result = qword_100115050;
  if (!qword_100115050)
  {
    result = swift_getWitnessTable(&unk_1000DF274, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article);
    atomic_store(result, (unint64_t *)&qword_100115050);
  }
  return result;
}

uint64_t sub_10006452C(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_100064300();
    v9 = v8;
    a2();
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006459C()
{
  unint64_t result;

  result = qword_100115068;
  if (!qword_100115068)
  {
    result = swift_getWitnessTable(&unk_1000DF2EC, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration);
    atomic_store(result, (unint64_t *)&qword_100115068);
  }
  return result;
}

unint64_t sub_1000645E0()
{
  unint64_t result;

  result = qword_100115078;
  if (!qword_100115078)
  {
    result = swift_getWitnessTable(&unk_1000DF5D0, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115078);
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys()
{
  return &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10006467C + 4 * byte_1000DF210[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10006469C + 4 * byte_1000DF215[v4]))();
}

_BYTE *sub_10006467C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10006469C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000646A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000646AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000646B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000646BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys()
{
  return &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys;
}

uint64_t _s12StocksWidget25WidgetSectionConfigRecordV19SymbolConfigurationV7ArticleV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100064724 + 4 * byte_1000DF21F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100064758 + 4 * byte_1000DF21A[v4]))();
}

uint64_t sub_100064758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100064768);
  return result;
}

uint64_t sub_100064774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006477CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100064780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecord.CodingKeys()
{
  return &type metadata for WidgetSectionConfigRecord.CodingKeys;
}

unint64_t sub_1000647A8()
{
  unint64_t result;

  result = qword_100115088;
  if (!qword_100115088)
  {
    result = swift_getWitnessTable(&unk_1000DF438, &type metadata for WidgetSectionConfigRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115088);
  }
  return result;
}

unint64_t sub_1000647F0()
{
  unint64_t result;

  result = qword_100115090;
  if (!qword_100115090)
  {
    result = swift_getWitnessTable(&unk_1000DF4F0, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115090);
  }
  return result;
}

unint64_t sub_100064838()
{
  unint64_t result;

  result = qword_100115098;
  if (!qword_100115098)
  {
    result = swift_getWitnessTable(&unk_1000DF5A8, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115098);
  }
  return result;
}

unint64_t sub_100064880()
{
  unint64_t result;

  result = qword_1001150A0;
  if (!qword_1001150A0)
  {
    result = swift_getWitnessTable(&unk_1000DF518, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001150A0);
  }
  return result;
}

unint64_t sub_1000648C8()
{
  unint64_t result;

  result = qword_1001150A8;
  if (!qword_1001150A8)
  {
    result = swift_getWitnessTable(&unk_1000DF540, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001150A8);
  }
  return result;
}

unint64_t sub_100064910()
{
  unint64_t result;

  result = qword_1001150B0;
  if (!qword_1001150B0)
  {
    result = swift_getWitnessTable(&unk_1000DF460, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001150B0);
  }
  return result;
}

unint64_t sub_100064958()
{
  unint64_t result;

  result = qword_1001150B8;
  if (!qword_1001150B8)
  {
    result = swift_getWitnessTable(&unk_1000DF488, &type metadata for WidgetSectionConfigRecord.SymbolConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001150B8);
  }
  return result;
}

unint64_t sub_1000649A0()
{
  unint64_t result;

  result = qword_1001150C0;
  if (!qword_1001150C0)
  {
    result = swift_getWitnessTable(&unk_1000DF370, &type metadata for WidgetSectionConfigRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001150C0);
  }
  return result;
}

unint64_t sub_1000649E8()
{
  unint64_t result;

  result = qword_1001150C8;
  if (!qword_1001150C8)
  {
    result = swift_getWitnessTable(&unk_1000DF398, &type metadata for WidgetSectionConfigRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001150C8);
  }
  return result;
}

uint64_t destroy for SymbolSummaryTicker(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  v2 = a1[10];
  if (v2 != 1)
    swift_bridgeObjectRelease(v2);
  result = a1[14];
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for SymbolSummaryTicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = (_OWORD *)(a1 + 56);
  v8 = a2 + 56;
  v9 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v9 == 1)
  {
    v10 = *(_OWORD *)(v8 + 16);
    *v7 = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 72) = v10;
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(v8 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v9;
    swift_bridgeObjectRetain(v9);
  }
  v11 = (_OWORD *)(a1 + 88);
  v12 = (_OWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 112);
  if (v13 == 1)
  {
    v14 = *(_OWORD *)(a2 + 104);
    *v11 = *v12;
    *(_OWORD *)(a1 + 104) = v14;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  }
  else
  {
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t assignWithCopy for SymbolSummaryTicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 56);
  v11 = (_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 80);
  if (v12 == 1)
  {
    if (v13 == 1)
    {
      v14 = *(_OWORD *)(a2 + 72);
      *v10 = *v11;
      *(_OWORD *)(a1 + 72) = v14;
    }
    else
    {
      v16 = *(_QWORD *)v11;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)v10 = v16;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v17 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v17;
      swift_bridgeObjectRetain(v17);
    }
  }
  else if (v13 == 1)
  {
    sub_10002304C(a1 + 56);
    v15 = *(_OWORD *)(a2 + 72);
    *v10 = *v11;
    *(_OWORD *)(a1 + 72) = v15;
  }
  else
  {
    v18 = *(_QWORD *)v11;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)v10 = v18;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v19 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v19;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(v12);
  }
  v20 = (_OWORD *)(a1 + 88);
  v21 = (__int128 *)(a2 + 88);
  v22 = *(_QWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a2 + 112);
  if (v22 == 1)
  {
    if (v23 == 1)
    {
      v24 = *v21;
      v25 = *(_OWORD *)(a2 + 104);
      v26 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
      *(_OWORD *)(a1 + 104) = v25;
      *(_OWORD *)(a1 + 120) = v26;
      *v20 = v24;
    }
    else
    {
      v30 = *(_QWORD *)v21;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)v20 = v30;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v31 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v31;
      v32 = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = v32;
      v33 = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = v33;
      swift_bridgeObjectRetain(v31);
    }
  }
  else if (v23 == 1)
  {
    sub_100064DDC(a1 + 88);
    v28 = *(_OWORD *)(a2 + 104);
    v27 = *(_OWORD *)(a2 + 120);
    v29 = *v21;
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
    *(_OWORD *)(a1 + 104) = v28;
    *(_OWORD *)(a1 + 120) = v27;
    *v20 = v29;
  }
  else
  {
    v34 = *(_QWORD *)v21;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)v20 = v34;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v35 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 112) = v35;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRelease(v22);
    v36 = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v36;
    v37 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v37;
  }
  return a1;
}

uint64_t sub_100064DDC(uint64_t a1)
{
  destroy for StockPrice(a1);
  return a1;
}

__n128 initializeWithTake for SymbolSummaryTicker(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SymbolSummaryTicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 56);
  v11 = (_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 80);
  if (v12 == 1)
    goto LABEL_4;
  v13 = *(_QWORD *)(a2 + 80);
  if (v13 == 1)
  {
    sub_10002304C(a1 + 56);
LABEL_4:
    v14 = *(_OWORD *)(a2 + 72);
    *v10 = *v11;
    *(_OWORD *)(a1 + 72) = v14;
    goto LABEL_6;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease(v12);
LABEL_6:
  v15 = (_QWORD *)(a1 + 88);
  v16 = (_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 112);
  if (v17 != 1)
  {
    v18 = *(_QWORD *)(a2 + 112);
    if (v18 != 1)
    {
      *v15 = *v16;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v18;
      swift_bridgeObjectRelease(v17);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      return a1;
    }
    sub_100064DDC(a1 + 88);
  }
  v19 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(a1 + 104) = v19;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolSummaryTicker(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SymbolSummaryTicker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolSummaryTicker()
{
  return &type metadata for SymbolSummaryTicker;
}

uint64_t sub_100065038(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E8FCC, 1);
}

uint64_t sub_100065048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  sub_1000660E0(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, (unint64_t *)&qword_100115120, v6);
  v38 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v37 = (uint64_t)&v36 - v11;
  sub_100065FD8(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
  v16 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v36 - v21;
  *(_QWORD *)v14 = static VerticalAlignment.firstTextBaseline.getter(v20);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  sub_1000663A4(0, &qword_100115180, (uint64_t (*)(uint64_t))sub_100065FFC, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
  sub_100065424(a1, (uint64_t)&v14[*(int *)(v23 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1000DF728);
  v25 = swift_allocObject(&unk_100106BD8, 41, 7);
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = 1;
  *(_QWORD *)(v25 + 32) = 0;
  *(_BYTE *)(v25 + 40) = 0;
  sub_10001DE2C((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_100065FD8);
  v26 = (uint64_t *)&v18[*(int *)(v16 + 36)];
  *v26 = KeyPath;
  v26[1] = (uint64_t)sub_10002453C;
  v26[2] = v25;
  sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_100065FD8);
  sub_10003BE08((uint64_t)v18, (uint64_t)v22, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
  *(_QWORD *)v5 = static VerticalAlignment.firstTextBaseline.getter(v27);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1000663A4(0, &qword_100115188, (uint64_t (*)(uint64_t))sub_100066104, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
  sub_1000658E0(a1, (uint64_t)&v5[*(int *)(v28 + 44)]);
  v29 = swift_getKeyPath(&unk_1000DF728);
  v30 = swift_allocObject(&unk_100106C00, 41, 7);
  *(_QWORD *)(v30 + 16) = 0;
  *(_BYTE *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_BYTE *)(v30 + 40) = 1;
  sub_10001DE2C((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1000660E0);
  v31 = (uint64_t *)&v9[*(int *)(v38 + 36)];
  *v31 = v29;
  v31[1] = (uint64_t)sub_10002453C;
  v31[2] = v30;
  sub_10001DF70((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1000660E0);
  v32 = v37;
  sub_10003BE08((uint64_t)v9, v37, (unint64_t *)&qword_100115120, (uint64_t (*)(uint64_t))sub_1000660E0);
  sub_100066430((uint64_t)v22, (uint64_t)v18, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
  sub_100066430(v32, (uint64_t)v9, (unint64_t *)&qword_100115120, (uint64_t (*)(uint64_t))sub_1000660E0);
  v33 = v39;
  sub_100066430((uint64_t)v18, v39, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
  sub_100065F4C(0);
  sub_100066430((uint64_t)v9, v33 + *(int *)(v34 + 48), (unint64_t *)&qword_100115120, (uint64_t (*)(uint64_t))sub_1000660E0);
  sub_10006647C(v32, (unint64_t *)&qword_100115120, (uint64_t (*)(uint64_t))sub_1000660E0);
  sub_10006647C((uint64_t)v22, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
  sub_10006647C((uint64_t)v9, (unint64_t *)&qword_100115120, (uint64_t (*)(uint64_t))sub_1000660E0);
  return sub_10006647C((uint64_t)v18, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
}

uint64_t sub_100065424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t KeyPath;
  __int128 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[8];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[9];

  v41 = a2;
  v39 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v39);
  v4 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100066208(0, &qword_100115110, v5, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v38 - v10;
  v11 = (int *)type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100066208(0, &qword_100115108, v14, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - v19;
  sub_1000664FC(a1, (uint64_t)v47, &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  v21 = *(_OWORD *)(a1 + 24);
  v43 = *(_OWORD *)(a1 + 8);
  v44 = v21;
  v45 = v21;
  v46 = v43;
  KeyPath = swift_getKeyPath(&unk_1000DF778);
  sub_1000664FC((uint64_t)v47, (uint64_t)v13, &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  v23 = v43;
  *(_OWORD *)(v13 + 24) = v44;
  *(_OWORD *)(v13 + 8) = v23;
  v24 = &v13[v11[6]];
  *(_QWORD *)v24 = swift_getKeyPath(&unk_1000DF7A0);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = &v13[v11[7]];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1000DF7D0);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = &v13[v11[8]];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = 0;
  sub_100066730((uint64_t)&v46);
  sub_100066730((uint64_t)&v45);
  v29 = sub_100003D3C(&qword_1001151C0, type metadata accessor for SymbolTrendView, (uint64_t)&unk_1000DCA38);
  View.accessibilitySortPriority(_:)(v11, v29, 4.0);
  sub_10001DF70((uint64_t)v13, type metadata accessor for SymbolTrendView);
  sub_10006662C((uint64_t)v17, (uint64_t)v20, &qword_100115108, type metadata accessor for SymbolTrendView);
  sub_1000664FC(a1 + 88, (uint64_t)v42, &qword_100115198, (uint64_t)&type metadata for PriceChange);
  *v4 = swift_getKeyPath(&unk_1000DF750);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v4, v30, 0);
  v31 = v39;
  sub_1000664FC((uint64_t)v42, (uint64_t)v4 + *(int *)(v39 + 20), &qword_100115198, (uint64_t)&type metadata for PriceChange);
  sub_1000664FC((uint64_t)v47, (uint64_t)v4 + *(int *)(v31 + 24), &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  sub_10006655C(v42);
  v32 = sub_100003D3C(&qword_1001151B0, type metadata accessor for PriceChangeView, (uint64_t)&unk_1000E1700);
  View.accessibilitySortPriority(_:)(v31, v32, 2.0);
  sub_10001DF70((uint64_t)v4, type metadata accessor for PriceChangeView);
  v33 = v40;
  sub_10006662C((uint64_t)v8, v40, &qword_100115110, type metadata accessor for PriceChangeView);
  sub_100066684((uint64_t)v20, (uint64_t)v17, &qword_100115108, type metadata accessor for SymbolTrendView);
  sub_100066684(v33, (uint64_t)v8, &qword_100115110, type metadata accessor for PriceChangeView);
  v34 = v41;
  sub_100066684((uint64_t)v17, v41, &qword_100115108, type metadata accessor for SymbolTrendView);
  sub_100066018(0);
  v36 = v34 + *(int *)(v35 + 48);
  *(_QWORD *)v36 = 0x4020000000000000;
  *(_BYTE *)(v36 + 8) = 0;
  sub_100066684((uint64_t)v8, v34 + *(int *)(v35 + 64), &qword_100115110, type metadata accessor for PriceChangeView);
  sub_1000666DC(v33, &qword_100115110, type metadata accessor for PriceChangeView);
  sub_1000666DC((uint64_t)v20, &qword_100115108, type metadata accessor for SymbolTrendView);
  sub_1000666DC((uint64_t)v8, &qword_100115110, type metadata accessor for PriceChangeView);
  return sub_1000666DC((uint64_t)v17, &qword_100115108, type metadata accessor for SymbolTrendView);
}

uint64_t sub_1000658E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37[8];

  v35 = a2;
  v3 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100066270(0);
  v34 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100066208(0, &qword_100115148, v9, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - v14;
  sub_1000661AC(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v33 - v20;
  v22 = *(_QWORD *)(a1 + 48);
  v37[0] = *(_QWORD *)(a1 + 40);
  v37[1] = v22;
  v23 = sub_1000664B8();
  View.accessibilitySortPriority(_:)(&type metadata for CompanyNameView, v23, 3.0);
  sub_1000664FC(a1 + 88, (uint64_t)v37, &qword_100115198, (uint64_t)&type metadata for PriceChange);
  sub_1000664FC(a1, (uint64_t)&v36, &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  *v5 = swift_getKeyPath(&unk_1000DF750);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v5, v24, 0);
  sub_1000664FC((uint64_t)v37, (uint64_t)v5 + *(int *)(v3 + 20), &qword_100115198, (uint64_t)&type metadata for PriceChange);
  sub_1000664FC((uint64_t)&v36, (uint64_t)v5 + *(int *)(v3 + 24), &qword_1001151A0, (uint64_t)&type metadata for ValueChangeTrend);
  KeyPath = swift_getKeyPath(&unk_1000DF750);
  sub_10001DE2C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PriceChangeView);
  v26 = v34;
  v27 = (uint64_t *)&v8[*(int *)(v34 + 36)];
  *v27 = KeyPath;
  v27[1] = (uint64_t)sub_100065C80;
  v27[2] = 0;
  sub_10006655C(v37);
  sub_10001DF70((uint64_t)v5, type metadata accessor for PriceChangeView);
  v28 = sub_100066594();
  View.accessibilitySortPriority(_:)(v26, v28, 1.0);
  sub_10001DF70((uint64_t)v8, (uint64_t (*)(_QWORD))sub_100066270);
  sub_10006662C((uint64_t)v12, (uint64_t)v15, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270);
  sub_10001DE2C((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(_QWORD))sub_1000661AC);
  sub_100066684((uint64_t)v15, (uint64_t)v12, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270);
  v29 = v35;
  sub_10001DE2C((uint64_t)v18, v35, (uint64_t (*)(_QWORD))sub_1000661AC);
  sub_100066120(0);
  v31 = v29 + *(int *)(v30 + 48);
  *(_QWORD *)v31 = 0x4020000000000000;
  *(_BYTE *)(v31 + 8) = 0;
  sub_100066684((uint64_t)v12, v29 + *(int *)(v30 + 64), &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270);
  sub_1000666DC((uint64_t)v15, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270);
  sub_10001DF70((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1000661AC);
  sub_1000666DC((uint64_t)v12, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270);
  return sub_10001DF70((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1000661AC);
}

uint64_t sub_100065C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = type metadata accessor for PriceChangeDisplay(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  v10 = enum case for PriceChangeDisplay.currency(_:);
  if (v9 == enum case for PriceChangeDisplay.currency(_:))
  {
    v10 = enum case for PriceChangeDisplay.percentage(_:);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 104))(v8, v10, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v8, v2);
  }
  if (v9 == enum case for PriceChangeDisplay.percentage(_:))
    goto LABEL_5;
  v10 = enum case for PriceChangeDisplay.percentage(_:);
  if (v9 == enum case for PriceChangeDisplay.marketCapitalization(_:))
    goto LABEL_5;
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v2, v2);
  __break(1u);
  return result;
}

uint64_t sub_100065DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD v18[9];
  char v19;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D724(0, &qword_1001150D0, (uint64_t (*)(uint64_t))sub_100065F30, sub_1000662C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  v6 = v5;
  __chkstk_darwin(v5);
  v8 = (char *)v18 - v7;
  v9 = *(_OWORD *)(v0 + 112);
  v18[6] = *(_OWORD *)(v0 + 96);
  v18[7] = v9;
  v18[8] = *(_OWORD *)(v0 + 128);
  v19 = *(_BYTE *)(v0 + 144);
  v10 = *(_OWORD *)(v0 + 48);
  v18[2] = *(_OWORD *)(v0 + 32);
  v18[3] = v10;
  v11 = *(_OWORD *)(v0 + 80);
  v18[4] = *(_OWORD *)(v0 + 64);
  v18[5] = v11;
  v12 = *(_OWORD *)(v0 + 16);
  v18[0] = *(_OWORD *)v0;
  v18[1] = v12;
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0x4000000000000000;
  v8[16] = 0;
  sub_1000663A4(0, &qword_100115170, (uint64_t (*)(uint64_t))sub_100065F30, (uint64_t)&type metadata for _VStackLayout, (uint64_t)&protocol witness table for _VStackLayout);
  v15 = sub_100065048((uint64_t)v18, (uint64_t)&v8[*(int *)(v14 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v15);
  v16 = sub_1000662E0();
  View.accessibilityElement(children:)(v4, v6, v16);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100066348((uint64_t)v8);
}

void sub_100065F30(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001150D8, (uint64_t (*)(uint64_t))sub_100065F4C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_100065F4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1001150E0)
  {
    sub_10003B594(255, (unint64_t *)&qword_1001150E8, (uint64_t (*)(uint64_t))sub_100065FD8);
    v3 = v2;
    sub_10003B594(255, (unint64_t *)&qword_100115120, (uint64_t (*)(uint64_t))sub_1000660E0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001150E0);
  }
}

void sub_100065FD8(uint64_t a1)
{
  sub_10001D724(a1, &qword_1001150F0, (uint64_t (*)(uint64_t))sub_100065FFC, sub_1000660C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HStack);
}

void sub_100065FFC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001150F8, (uint64_t (*)(uint64_t))sub_100066018, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_100066018(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata3;
  uint64_t v6;

  if (!qword_100115100)
  {
    sub_100066208(255, &qword_100115108, type metadata accessor for SymbolTrendView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    v3 = v2;
    sub_100066208(255, &qword_100115110, type metadata accessor for PriceChangeView, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, &type metadata for Spacer, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100115100);
  }
}

uint64_t sub_1000660C4()
{
  return sub_100003D3C(&qword_100115118, (uint64_t (*)(uint64_t))sub_100065FFC, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

void sub_1000660E0(uint64_t a1)
{
  sub_10001D724(a1, &qword_100115128, (uint64_t (*)(uint64_t))sub_100066104, sub_1000662A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HStack);
}

void sub_100066104(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115130, (uint64_t (*)(uint64_t))sub_100066120, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_100066120(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata3;
  uint64_t v6;

  if (!qword_100115138)
  {
    sub_1000661AC(255);
    v3 = v2;
    sub_100066208(255, &qword_100115148, (uint64_t (*)(uint64_t))sub_100066270, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, &type metadata for Spacer, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100115138);
  }
}

void sub_1000661AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100115140)
  {
    v2 = type metadata accessor for AccessibilityAttachmentModifier(255);
    v3 = type metadata accessor for ModifiedContent(a1, &type metadata for CompanyNameView, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100115140);
  }
}

void sub_100066208(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(255);
    v9 = type metadata accessor for ModifiedContent(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_100066270(uint64_t a1)
{
  sub_100066208(a1, &qword_100115150, type metadata accessor for PriceChangeView, (uint64_t (*)(uint64_t))sub_10006628C);
}

void sub_10006628C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115158, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
}

uint64_t sub_1000662A8()
{
  return sub_100003D3C(&qword_100115160, (uint64_t (*)(uint64_t))sub_100066104, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_1000662C4()
{
  return sub_100003D3C(&qword_100115168, (uint64_t (*)(uint64_t))sub_100065F30, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

unint64_t sub_1000662E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115178;
  if (!qword_100115178)
  {
    sub_10001D724(255, &qword_1001150D0, (uint64_t (*)(uint64_t))sub_100065F30, sub_1000662C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100115178);
  }
  return result;
}

uint64_t sub_100066348(uint64_t a1)
{
  uint64_t v2;

  sub_10001D724(0, &qword_1001150D0, (uint64_t (*)(uint64_t))sub_100065F30, sub_1000662C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000663A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = type metadata accessor for _VariadicView.Tree(a1, a4, v9, a5);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_100066410()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100066420()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100066430(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10003B594(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_10006647C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_10003B594(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1000664B8()
{
  unint64_t result;

  result = qword_100115190;
  if (!qword_100115190)
  {
    result = swift_getWitnessTable(&unk_1000E33F0, &type metadata for CompanyNameView);
    atomic_store(result, (unint64_t *)&qword_100115190);
  }
  return result;
}

uint64_t sub_1000664FC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_1000143C4(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t *sub_10006655C(uint64_t *a1)
{
  sub_100024540(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

unint64_t sub_100066594()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1001151A8;
  if (!qword_1001151A8)
  {
    sub_100066270(255);
    v2 = v1;
    sub_100003D3C(&qword_1001151B0, type metadata accessor for PriceChangeView, (uint64_t)&unk_1000E1700);
    sub_100003D3C(&qword_1001151B8, (uint64_t (*)(uint64_t))sub_10006628C, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1001151A8);
  }
  return result;
}

uint64_t sub_10006662C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_100066208(0, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_100066684(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_100066208(0, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1000666DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_100066208(0, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_100066730(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100066758()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_10001D724(255, &qword_1001150D0, (uint64_t (*)(uint64_t))sub_100065F30, sub_1000662C4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for VStack);
  v2[0] = v0;
  v2[1] = sub_1000662E0();
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_1000667D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = v0;
  return swift_task_switch(sub_1000667E8, v0, 0);
}

uint64_t sub_1000667E8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  id v9;
  id v10;
  NSString v11;
  NSString v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  Class v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0 + 2;
  v2 = (_QWORD *)v0[30];
  v3 = sub_100066F34(v2);
  v5 = v4;
  v0[31] = v3;
  v0[32] = v4;
  sub_1000672BC(0);
  inited = swift_initStackObject(v6, v0 + 10);
  *(_OWORD *)(inited + 16) = xmmword_1000DB170;
  *(_QWORD *)(inited + 32) = 0xD000000000000019;
  *(_QWORD *)(inited + 40) = 0x80000001000E5AB0;
  *(_QWORD *)(inited + 48) = _swiftEmptyArrayStorage;
  v8 = sub_10002C710(inited);
  v9 = objc_msgSend((id)objc_opt_self(FCCachePolicy), "ignoreCacheCachePolicy");
  v0[33] = v9;
  v10 = objc_allocWithZone((Class)FCEdgeCacheHint);
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "initWithGroupName:cacheControlKey:", v11, v12);
  v0[34] = v13;

  v14 = (void *)v2[14];
  sub_100067384(0, (unint64_t *)&qword_1001127A0, (uint64_t (*)(_QWORD, void *))&type metadata accessor for _ContiguousArrayStorage);
  v16 = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000DB170;
  *(_QWORD *)(v16 + 32) = v3;
  *(_QWORD *)(v16 + 40) = v5;
  swift_bridgeObjectRetain(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[35] = isa;
  swift_bridgeObjectRelease(v16);
  sub_100067384(0, (unint64_t *)&qword_100112180, (uint64_t (*)(_QWORD, void *))&type metadata accessor for Array);
  v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[36] = v18;
  v19 = swift_bridgeObjectRelease(v8);
  v0[7] = v0 + 28;
  v0[2] = v0;
  v0[3] = sub_100066A60;
  v20 = swift_continuation_init(v0 + 2, 1, v19);
  v0[17] = _NSConcreteStackBlock;
  v21 = v0 + 17;
  v21[1] = 0x40000000;
  v21[2] = sub_10006704C;
  v21[3] = &unk_100106C78;
  v21[4] = v20;
  objc_msgSend(v14, "fetchRecordTreeWithRootIDs:branchKeysByRecordType:cachePolicy:edgeCacheHint:completion:", isa, v18, v9, v13, v21);
  return swift_continuation_await(v1);
}

uint64_t sub_100066A60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 296) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 240);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 256));
    v4 = sub_100066D8C;
    v5 = v3;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 240);
    v4 = sub_100066AD0;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100066AD0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v1 = *(void **)(v0 + 288);
  v2 = *(void **)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 224);

  if (*(_QWORD *)(v3 + 16))
  {
    v5 = *(_QWORD *)(v0 + 248);
    v4 = *(_QWORD *)(v0 + 256);
    swift_bridgeObjectRetain(v4);
    v6 = sub_10002D24C(v5, v4);
    v7 = *(_QWORD *)(v0 + 256);
    if ((v8 & 1) != 0)
    {
      v9 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
      v10 = *v9;
      v11 = v9[1];
      sub_100067410(*v9, v11);
      swift_bridgeObjectRelease_n(v7, 2);
      swift_bridgeObjectRelease(v3);
      v12 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      v13 = JSONDecoder.init()();
      v14 = sub_100067454();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for WidgetSectionConfigRecord, v10, v11, &type metadata for WidgetSectionConfigRecord, v14);
      v31 = *(void **)(v0 + 264);

      sub_100035568(v10, v11);
      swift_release(v13);

      v32 = *(_QWORD *)(v0 + 200);
      v33 = *(_QWORD *)(v0 + 208);
      v34 = *(_QWORD *)(v0 + 216);
      return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(v0 + 8))(v32, v33, v34);
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  }
  v16 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRelease(v3);
  v17 = sub_1000673CC();
  v18 = swift_allocError(&type metadata for WidgetSectionConfigRecordService.Errors, v17, 0, 0);
  *v19 = v16;
  v19[1] = v15;
  swift_willThrow(v18);
  swift_getErrorValue(v18, v0 + 232, v0 + 176);
  v20 = Error.isMissingRecord.getter(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  if ((v20 & 1) == 0)
  {
    v29 = *(void **)(v0 + 264);
    v28 = *(void **)(v0 + 272);
    swift_willThrow(v20);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100012524(v21, (uint64_t)qword_1001267E8);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Widget Section Config service encountered missing record", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }
  v27 = *(void **)(v0 + 264);
  v26 = *(void **)(v0 + 272);

  v34 = sub_10002C5EC((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v18);

  v33 = 0xE700000000000000;
  v32 = 0x676E697373696DLL;
  return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(v0 + 8))(v32, v33, v34);
}

uint64_t sub_100066D8C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  void *v16;
  void *v17;

  v2 = *(void **)(v1 + 288);
  v4 = *(void **)(v1 + 272);
  v3 = *(void **)(v1 + 280);
  swift_willThrow(a1);

  v5 = *(_QWORD *)(v1 + 296);
  swift_getErrorValue(v5, v1 + 232, v1 + 176);
  v6 = Error.isMissingRecord.getter(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192));
  if ((v6 & 1) != 0)
  {
    if (qword_100111440 != -1)
      swift_once(&qword_100111440, sub_10002DE10);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100012524(v7, (uint64_t)qword_1001267E8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Widget Section Config service encountered missing record", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v13 = *(void **)(v1 + 264);
    v12 = *(void **)(v1 + 272);

    v14 = sub_10002C5EC((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v5);

    return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(v1 + 8))(0x676E697373696DLL, 0xE700000000000000, v14);
  }
  else
  {
    v17 = *(void **)(v1 + 264);
    v16 = *(void **)(v1 + 272);
    swift_willThrow(v6);

    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100066F34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;

  v2 = type metadata accessor for AppConfiguration(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Settings.News.overrideWidgetSectionConfigID.getter(v4);
  v8 = type metadata accessor for WidgetSectionConfigRecordService();
  v9 = sub_1000674EC(&qword_1001152B0, (uint64_t)&unk_1000DF880);
  Configurable.setting<A>(_:)(v7, v8, v9);
  swift_release(v7);
  v10 = v16;
  v11 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v11 = v16 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_bridgeObjectRelease(v17);
    v12 = a1[18];
    v13 = a1[19];
    sub_100007184(a1 + 15, v12);
    v14 = dispatch thunk of AppConfigurationManagerType.appConfiguration.getter(v12, v13);
    v10 = AppConfiguration.widgetSectionConfigID.getter(v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return v10;
}

uint64_t sub_10006704C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100067498();
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, &type metadata for Data, &protocol witness table for String);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000670EC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  sub_100007164((_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WidgetSectionConfigRecordService()
{
  return objc_opt_self(_TtC12StocksWidget32WidgetSectionConfigRecordService);
}

uint64_t sub_100067138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = type metadata accessor for WidgetSectionConfigRecordService();
  return Configurable.setting<A>(_:)(a1, v7, a5);
}

uint64_t sub_100067178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;

  v9 = type metadata accessor for WidgetSectionConfigRecordService();
  return Configurable.setting<A>(_:defaultValue:)(a1, a2, v9, a6);
}

uint64_t sub_1000671C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  v11 = type metadata accessor for WidgetSectionConfigRecordService();
  return Configurable.setting<A>(_:_:)(a1, a2, a3, v11, a7);
}

uint64_t sub_100067220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;

  v13 = type metadata accessor for WidgetSectionConfigRecordService();
  return Configurable.setting<A>(_:defaultValue:_:)(a1, a2, a3, a4, v13, a8);
}

uint64_t sub_100067288(uint64_t a1)
{
  uint64_t result;

  result = sub_1000674EC(&qword_100115288, (uint64_t)&unk_1000DF8DC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1000672BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100115290)
  {
    sub_100067310(255);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100115290);
  }
}

void sub_100067310(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100115298)
  {
    sub_100067384(255, (unint64_t *)&qword_100112180, (uint64_t (*)(_QWORD, void *))&type metadata accessor for Array);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for String, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100115298);
  }
}

void sub_100067384(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, void *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for String);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1000673CC()
{
  unint64_t result;

  result = qword_1001152A0;
  if (!qword_1001152A0)
  {
    result = swift_getWitnessTable(&unk_1000DF90C, &type metadata for WidgetSectionConfigRecordService.Errors);
    atomic_store(result, (unint64_t *)&qword_1001152A0);
  }
  return result;
}

uint64_t sub_100067410(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100067454()
{
  unint64_t result;

  result = qword_1001152A8;
  if (!qword_1001152A8)
  {
    result = swift_getWitnessTable(&unk_1000DF33C, &type metadata for WidgetSectionConfigRecord);
    atomic_store(result, (unint64_t *)&qword_1001152A8);
  }
  return result;
}

unint64_t sub_100067498()
{
  unint64_t result;
  void *v1;

  result = qword_100111900;
  if (!qword_100111900)
  {
    v1 = &protocol descriptor for Error;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_100111900);
  }
  return result;
}

uint64_t sub_1000674EC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for WidgetSectionConfigRecordService();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetSectionConfigRecordService.Errors()
{
  return &type metadata for WidgetSectionConfigRecordService.Errors;
}

ValueMetadata *type metadata accessor for SystemTheme()
{
  return &type metadata for SystemTheme;
}

id sub_100067548()
{
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.305882353, 0.674509804, 0.97254902, 1.0);
}

id sub_10006758C()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
}

_QWORD *sub_1000675BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11, v13);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v12)(&v9[*(int *)(v14 + 36)], &v10[*(int *)(v14 + 36)], v11);
    v15 = a3[6];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[8];
    *(_OWORD *)((char *)v7 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    v20 = (char *)v7 + v19;
    v21 = (char *)a2 + v19;
    v20[8] = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_BYTE *)v7 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return v7;
}

uint64_t sub_1000676DC(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  sub_100022800(0);
  v6(&v4[*(int *)(v7 + 36)], v5);
  v8 = (char *)a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for TimeZone(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *sub_100067774(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  sub_100022800(0);
  ((void (*)(char *, char *, uint64_t))v11)(&v8[*(int *)(v13 + 36)], &v9[*(int *)(v13 + 36)], v10);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_10006786C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  sub_100022800(0);
  v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_100067980(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  sub_100022800(0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_100067A70(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  sub_100022800(0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100067B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067B74);
}

uint64_t sub_100067B74(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_100022800(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimeZone(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100067C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100067C20);
}

char *sub_100067C20(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_100022800(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for TimeZone(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for PreparedSparkline(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100115310, (uint64_t)&nominal type descriptor for PreparedSparkline);
}

void sub_100067CD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100022800(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for TimeZone(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1000DF9D8;
      v6[4] = &unk_1000DF9F0;
      v6[5] = &unk_1000DFA08;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_100067D80@<X0>(double a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  os_log_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*isa)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  double v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char **, _QWORD, uint64_t);
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  __n128 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_QWORD, _QWORD);
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void *object;
  uint64_t countAndFlagsBits;
  char v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v123)(char *, uint64_t);
  void (*v124)(char **, uint64_t);
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  uint64_t v128;
  Swift::String v129;
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  os_log_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t (*v154)(char *, uint64_t, uint64_t);
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  os_log_t v161;
  char *v162;
  char **v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[6];

  v168 = a4;
  v169 = a1;
  v172 = a3;
  v174 = a2;
  v166 = a5;
  v7 = type metadata accessor for Logger(0);
  v164 = *(_QWORD *)(v7 - 8);
  v165 = v7;
  __chkstk_darwin(v7);
  v156 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v9);
  v163 = (char **)((char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002FCAC(0);
  __chkstk_darwin(v11);
  v157 = (uint64_t)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StockType(0);
  v161 = *(os_log_t *)(v13 - 8);
  __chkstk_darwin(v13);
  v160 = (char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v159 = (char *)&v142 - v16;
  v150 = type metadata accessor for Date(0);
  v153 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v152 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D7CC(0);
  __chkstk_darwin(v18);
  v151 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for ExchangeStatus(0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022800(0);
  v146 = v21;
  __chkstk_darwin(v21);
  v162 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v23);
  v145 = (char *)&v142 - v25;
  v171 = type metadata accessor for Chart(0, v24);
  v167 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v27 = (char **)((char *)&v142 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v170 = type metadata accessor for Stock(0);
  v173 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v29 = (char *)&v142 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C330(0);
  __chkstk_darwin(v30);
  v155 = (uint64_t)&v142 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v142 - v34;
  v36 = type metadata accessor for Quote(0, v33);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v39 = (char *)&v142 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v142 - v41;
  __chkstk_darwin(v43);
  v45 = (char *)&v142 - v44;
  __chkstk_darwin(v46);
  v48 = (char *)&v142 - v47;
  sub_10001DE2C(v174, (uint64_t)v35, (uint64_t (*)(_QWORD))sub_10006C330);
  v154 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v49 = v154(v35, 1, v36);
  v158 = v37;
  if (v49 == 1)
  {
    v153 = v36;
    v50 = v169;
    v51 = sub_10001DF70((uint64_t)v35, (uint64_t (*)(_QWORD))sub_10006C330);
  }
  else
  {
    v143 = v45;
    v144 = v42;
    v142 = v39;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v48, v35, v36);
    v52 = v169;
    if ((Chart.valid(for:)(v48) & 1) == 0)
    {
      v75 = v172;
      v76 = v29;
      (*(void (**)(char *, char *, uint64_t))(v173 + 16))(v29, v172, v170);
      v77 = v167;
      v78 = *(void (**)(char **, _QWORD, uint64_t))(v167 + 16);
      v163 = v27;
      v78(v27, *(_QWORD *)&v52, v171);
      v79 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      v79(v143, v48, v36);
      v79(v144, v48, v36);
      v80 = v142;
      v81 = ((uint64_t (*)(char *, char *, uint64_t))v79)(v142, v48, v36);
      v82 = v168;
      v83 = Logger.logObject.getter(v81);
      v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v83, (os_log_type_t)v85))
      {
        LODWORD(v160) = v85;
        v161 = v83;
        v162 = v48;
        v86 = swift_slowAlloc(52, -1);
        v87 = swift_slowAlloc(160, -1);
        v159 = (char *)v87;
        v175 = v87;
        *(_DWORD *)v86 = 136447234;
        v88 = Stock.symbol.getter(v87);
        v90 = v89;
        v176 = sub_10007ECFC(v88, v89, &v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease(v90);
        v173 = *(_QWORD *)(v173 + 8);
        v91 = ((uint64_t (*)(char *, uint64_t))v173)(v76, v170);
        *(_WORD *)(v86 + 12) = 2082;
        v92 = (uint64_t)v145;
        v93 = (uint64_t (*)(_QWORD, _QWORD))v163;
        Chart.dateRange.getter(v91);
        v176 = 0;
        v177[0] = 0xE000000000000000;
        v94 = v150;
        _print_unlocked<A, B>(_:_:)(v92, &v176, v150, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v95._countAndFlagsBits = 3026478;
        v95._object = (void *)0xE300000000000000;
        String.append(_:)(v95);
        _print_unlocked<A, B>(_:_:)(v92 + *(int *)(v146 + 36), &v176, v94, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v96 = v176;
        v97 = v177[0];
        sub_10001DF70(v92, (uint64_t (*)(_QWORD))sub_100022800);
        v176 = sub_10007ECFC(v96, v97, &v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v86 + 14, v86 + 22);
        swift_bridgeObjectRelease(v97);
        v167 = *(_QWORD *)(v77 + 8);
        v98 = ((uint64_t (*)(_QWORD, uint64_t))v167)(v93, v171);
        *(_WORD *)(v86 + 22) = 2082;
        v99 = v147;
        v100 = v143;
        v101 = Quote.exchangeStatus.getter(v98);
        v102 = ExchangeStatus.rawValue.getter(v101);
        v104 = v103;
        (*(void (**)(char *, uint64_t))(v148 + 8))(v99, v149);
        v176 = sub_10007ECFC(v102, v104, &v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v86 + 24, v86 + 32);
        swift_bridgeObjectRelease(v104);
        v163 = *(char ***)(v158 + 8);
        v105 = ((uint64_t (*)(char *, uint64_t))v163)(v100, v36);
        *(_WORD *)(v86 + 32) = 2082;
        v106 = (uint64_t)v151;
        v107 = v144;
        Quote.serverCreatedAt.getter(v105);
        v108 = v153;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v106, 1, v94) == 1)
        {
          sub_10001DF70(v106, (uint64_t (*)(_QWORD))sub_10001D7CC);
          object = (void *)0xE300000000000000;
          countAndFlagsBits = 7104878;
        }
        else
        {
          v129 = Date.formatted()();
          countAndFlagsBits = v129._countAndFlagsBits;
          object = v129._object;
          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v94);
        }
        v176 = sub_10007ECFC(countAndFlagsBits, (unint64_t)object, &v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v86 + 34, v86 + 42);
        swift_bridgeObjectRelease(object);
        v130 = (void (*)(char *, uint64_t))v163;
        v131 = ((uint64_t (*)(char *, uint64_t))v163)(v107, v36);
        *(_WORD *)(v86 + 42) = 2082;
        v132 = v152;
        v133 = v142;
        Quote.dateLastRefreshed.getter(v131);
        v134 = sub_100003D3C(&qword_1001126E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v135 = dispatch thunk of CustomStringConvertible.description.getter(v94, v134);
        v137 = v136;
        (*(void (**)(char *, uint64_t))(v153 + 8))(v132, v94);
        v176 = sub_10007ECFC(v135, v137, &v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v86 + 44, v86 + 52);
        swift_bridgeObjectRelease(v137);
        v130(v133, v36);
        v138 = v161;
        _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v160, "Sparkline model for %{public}s with date range %{public}s not considered valid for quote (exchangeStatus: %{public}s, serverCreatedAt: %{public}s, dateLastRefreshed: %{public}s)", (uint8_t *)v86, 0x34u);
        v139 = v159;
        swift_arrayDestroy(v159, 5, &type metadata for Any[8]);
        swift_slowDealloc(v139, -1, -1);
        swift_slowDealloc(v86, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v168, v165);
        ((void (*)(char *, uint64_t))v173)(v172, v170);
        sub_10001DF70(v174, (uint64_t (*)(_QWORD))sub_10006C330);
        ((void (*)(_QWORD, uint64_t))v167)(*(_QWORD *)&v169, v171);
        v130(v162, v36);
      }
      else
      {

        v123 = *(void (**)(char *, uint64_t))(v158 + 8);
        v123(v80, v36);
        v123(v144, v36);
        v123(v143, v36);
        v124 = *(void (**)(char **, uint64_t))(v77 + 8);
        v125 = v171;
        v124(v163, v171);
        v126 = *(void (**)(char *, uint64_t))(v173 + 8);
        v127 = v76;
        v128 = v170;
        v126(v127, v170);
        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v82, v165);
        v126(v75, v128);
        sub_10001DF70(v174, (uint64_t (*)(_QWORD))sub_10006C330);
        v124(*(char ***)&v52, v125);
        v123(v48, v36);
      }
      goto LABEL_19;
    }
    v50 = v52;
    v53 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
    v153 = v36;
    v51 = v53(v48, v36);
  }
  v54 = v172;
  v55 = v173;
  v56 = v161;
  v57 = v160;
  v58 = v159;
  Stock.type.getter(v51);
  ((void (*)(char *, _QWORD, uint64_t))v56[13].isa)(v57, enum case for StockType.mutualFund(_:), v13);
  v59 = sub_100003D3C(&qword_1001153B0, (uint64_t (*)(uint64_t))&type metadata accessor for StockType, (uint64_t)&protocol conformance descriptor for StockType);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v57, v13, v59);
  isa = (void (*)(char *, uint64_t))v56[1].isa;
  isa(v57, v13);
  v62 = ((uint64_t (*)(char *, uint64_t))isa)(v58, v13);
  if ((v60 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v168, v165);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v170);
    sub_10001DF70(v174, (uint64_t (*)(_QWORD))sub_10006C330);
    (*(void (**)(double, uint64_t))(v167 + 8))(COERCE_DOUBLE(*(_QWORD *)&v50), v171);
  }
  else
  {
    v63 = Chart.dateRange.getter(v62);
    v64 = Chart.marketTimeZone.getter(v63);
    *(double *)&v65 = COERCE_DOUBLE(Chart.previousClose.getter(v64));
    v67 = v66 & 1;
    v68 = v174;
    v69 = v155;
    sub_10001DE2C(v174, v155, (uint64_t (*)(_QWORD))sub_10006C330);
    v70 = v153;
    v71 = v154((char *)v69, 1, v153);
    v169 = *(double *)&v65;
    LODWORD(v161) = v67;
    if (v71 == 1)
    {
      v72 = sub_10001DF70(v69, (uint64_t (*)(_QWORD))sub_10006C330);
      v73 = 0.0;
      v74 = 1;
    }
    else
    {
      v73 = COERCE_DOUBLE(Quote.price.getter());
      v74 = v111 & 1;
      v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 8))(v69, v70);
    }
    v112 = v172;
    v114 = v164;
    v113 = v165;
    v176 = Chart.entries.getter(v72);
    v177[0] = sub_10006BAE8;
    v177[1] = 0;
    v177[2] = sub_10000E2C0;
    v177[3] = 0;
    v177[4] = sub_10000E31C;
    v177[5] = 0;
    v115 = (uint64_t)v156;
    v116 = v168;
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v156, v168, v113);
    v117 = v157;
    sub_10006A4F4((uint64_t)v162, (uint64_t)v163, v169, (int)v161, v73, v74, &v176, v115, v157, a6);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v116, v113);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v112, v170);
    sub_10001DF70(v68, (uint64_t (*)(_QWORD))sub_10006C330);
    (*(void (**)(double, uint64_t))(v167 + 8))(COERCE_DOUBLE(*(_QWORD *)&v50), v171);
    v118 = type metadata accessor for PreparedSparkline(0);
    v119 = *(_QWORD *)(v118 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
    {
      v120 = v117;
      v121 = v166;
      sub_10000ED3C(v120, v166, type metadata accessor for PreparedSparkline);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v119 + 56))(v121, 0, 1, v118);
    }
    sub_10001DF70(v117, (uint64_t (*)(_QWORD))sub_10002FCAC);
  }
LABEL_19:
  v140 = v166;
  v141 = type metadata accessor for PreparedSparkline(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 56))(v140, 1, 1, v141);
}

double sub_100068B54@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;
  double result;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;

  sub_10006A490(0);
  v3 = v2;
  __chkstk_darwin(v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD **)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  sub_100022800(0);
  v38 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v35 - v20;
  sub_10006BB7C(14, 0, 0, (uint64_t)v15);
  sub_10006BB7C(20, 30, 0, (uint64_t)v12);
  v22 = sub_100003D3C((unint64_t *)&qword_100112AC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v15, v12, v9, v22) & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v36 = v21;
  v37 = a1;
  v23 = &v8[*(int *)(v3 + 48)];
  v24 = (void (*)(char *, char *, uint64_t))v10[4];
  v24(v8, v15, v9);
  v24(v23, v12, v9);
  v25 = &v5[*(int *)(v3 + 48)];
  v26 = (void (*)(char *, char *, uint64_t))v10[2];
  v26(v5, v8, v9);
  v26(v25, v23, v9);
  v24(v18, v5, v9);
  v27 = (void (*)(char *, uint64_t))v10[1];
  v27(v25, v9);
  v28 = &v5[*(int *)(v3 + 48)];
  v24(v5, v8, v9);
  v24(v28, v23, v9);
  v24(&v18[*(int *)(v38 + 36)], v28, v9);
  v27(v5, v9);
  v3 = (uint64_t)v36;
  sub_10000ED3C((uint64_t)v18, (uint64_t)v36, (uint64_t (*)(_QWORD))sub_100022800);
  if (qword_100111500 != -1)
LABEL_5:
    swift_once(&qword_100111500, sub_10006BF4C);
  v29 = type metadata accessor for TimeZone(0);
  v30 = sub_100012524(v29, (uint64_t)qword_100126930);
  v31 = (int *)type metadata accessor for PreparedSparkline(0);
  v32 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))((char *)v37 + v31[6], v30, v29);
  *v32 = _swiftEmptyArrayStorage;
  sub_10000ED3C(v3, (uint64_t)v32 + v31[5], (uint64_t (*)(_QWORD))sub_100022800);
  result = 9.0;
  *(_OWORD *)((char *)v32 + v31[7]) = xmmword_1000DF980;
  v34 = (char *)v32 + v31[8];
  *(_QWORD *)v34 = 0x4028000000000000;
  v34[8] = 0;
  *((_BYTE *)v32 + v31[9]) = 0;
  return result;
}

uint64_t sub_100068E94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;

  v2 = type metadata accessor for Logger(0);
  v77 = *(_QWORD *)(v2 - 8);
  v78 = v2;
  __chkstk_darwin(v2);
  v79 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v81 = (uint64_t)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006A490(0);
  v7 = v6;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v72 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD **)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v72 - v18;
  sub_100022800(0);
  v73 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v80 = (uint64_t)&v72 - v24;
  sub_10002FCAC(0);
  __chkstk_darwin(v25);
  v76 = (uint64_t)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006BB7C(14, 0, 0, (uint64_t)v19);
  sub_10006BB7C(20, 30, 0, (uint64_t)v17);
  v27 = sub_100003D3C((unint64_t *)&qword_100112AC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v19, v17, v13, v27) & 1) != 0)
  {
    v72 = a1;
    v28 = &v12[*(int *)(v7 + 48)];
    v29 = (void (*)(char *, char *, uint64_t))v14[4];
    v29(v12, v19, v13);
    v29(v28, v17, v13);
    v30 = &v10[*(int *)(v7 + 48)];
    v31 = (void (*)(char *, char *, uint64_t))v14[2];
    v31(v10, v12, v13);
    v31(v30, v28, v13);
    v29(v23, v10, v13);
    v32 = (void (*)(char *, uint64_t))v14[1];
    v32(v30, v13);
    v33 = &v10[*(int *)(v7 + 48)];
    v29(v10, v12, v13);
    v29(v33, v28, v13);
    v29(&v23[*(int *)(v73 + 36)], v33, v13);
    v32(v10, v13);
    sub_10000ED3C((uint64_t)v23, v80, (uint64_t (*)(_QWORD))sub_100022800);
    if (qword_100111500 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100111500, sub_10006BF4C);
LABEL_3:
  v34 = v75;
  v35 = sub_100012524(v75, (uint64_t)qword_100126930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v81, v35, v34);
  sub_10000EDE8(0, &qword_100115360, (uint64_t (*)(uint64_t))sub_10000EE40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v37 = v36;
  sub_10000EE40(0);
  v39 = v38;
  v40 = *(_QWORD *)(v38 - 8);
  v41 = *(_QWORD *)(v40 + 72);
  v42 = *(unsigned __int8 *)(v40 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = 16 * v41;
  v45 = swift_allocObject(v37, v43 + 17 * v41, v42 | 7);
  *(_OWORD *)(v45 + 16) = xmmword_1000DF990;
  v46 = v45 + v43;
  v47 = *(int *)(v39 + 48);
  sub_10006BB7C(14, 0, 0, v45 + v43);
  *(_QWORD *)(v46 + v47) = 0x402419999999999ALL;
  v48 = *(int *)(v39 + 48);
  sub_10006BB7C(14, 22, 45, v45 + v43 + v41);
  *(_QWORD *)(v46 + v41 + v48) = 0x4023800000000000;
  v49 = *(int *)(v39 + 48);
  sub_10006BB7C(14, 47, 27, v45 + v43 + 2 * v41);
  *(_QWORD *)(v46 + 2 * v41 + v49) = 0x4021CCCCCCCCCCCDLL;
  v50 = *(int *)(v39 + 48);
  sub_10006BB7C(15, 11, 30, v45 + v43 + 3 * v41);
  *(_QWORD *)(v46 + 3 * v41 + v50) = 0x4022800000000000;
  v51 = *(int *)(v39 + 48);
  sub_10006BB7C(15, 36, 2, v45 + v43 + 4 * v41);
  *(_QWORD *)(v46 + 4 * v41 + v51) = 0x4028666666666666;
  v52 = *(int *)(v39 + 48);
  sub_10006BB7C(16, 0, 15, v45 + v43 + 5 * v41);
  *(_QWORD *)(v46 + 5 * v41 + v52) = 0x4025E66666666666;
  v53 = *(int *)(v39 + 48);
  sub_10006BB7C(16, 24, 18, v45 + v43 + 6 * v41);
  *(_QWORD *)(v46 + 6 * v41 + v53) = 0x402F000000000000;
  v54 = *(int *)(v39 + 48);
  sub_10006BB7C(16, 49, 0, v45 + v43 + 7 * v41);
  *(_QWORD *)(v46 + 7 * v41 + v54) = 0x4023B33333333333;
  v55 = *(int *)(v39 + 48);
  sub_10006BB7C(17, 12, 33, v45 + v43 + 8 * v41);
  *(_QWORD *)(v46 + 8 * v41 + v55) = 0x4021800000000000;
  v56 = *(int *)(v39 + 48);
  sub_10006BB7C(17, 39, 22, v45 + v43 + 9 * v41);
  *(_QWORD *)(v46 + 9 * v41 + v56) = 0x4028800000000000;
  v57 = *(int *)(v39 + 48);
  sub_10006BB7C(18, 0, 30, v45 + v43 + 10 * v41);
  *(_QWORD *)(v46 + 10 * v41 + v57) = 0x402A666666666666;
  v58 = *(int *)(v39 + 48);
  sub_10006BB7C(18, 24, 52, v45 + v43 + 11 * v41);
  *(_QWORD *)(v46 + 11 * v41 + v58) = 0x4033B33333333333;
  v59 = *(int *)(v39 + 48);
  sub_10006BB7C(18, 49, 15, v46 + 12 * v41);
  *(_QWORD *)(v46 + 12 * v41 + v59) = 0x402CCCCCCCCCCCCDLL;
  v60 = *(int *)(v39 + 48);
  sub_10006BB7C(19, 13, 18, v46 + 13 * v41);
  *(_QWORD *)(v46 + 13 * v41 + v60) = 0x402F666666666666;
  v61 = *(int *)(v39 + 48);
  sub_10006BB7C(19, 37, 40, v46 + 14 * v41);
  *(_QWORD *)(v46 + 14 * v41 + v61) = 0x40274CCCCCCCCCCDLL;
  v62 = v46 + 15 * v41;
  v63 = *(int *)(v39 + 48);
  sub_10006BB7C(20, 1, 33, v62);
  *(_QWORD *)(v62 + v63) = 0x4030000000000000;
  v64 = v46 + v44;
  v65 = *(int *)(v39 + 48);
  sub_10006BB7C(20, 30, 0, v64);
  *(_QWORD *)(v64 + v65) = 0x4032666666666666;
  if (qword_100111440 != -1)
    swift_once(&qword_100111440, sub_10002DE10);
  v66 = v78;
  v67 = sub_100012524(v78, (uint64_t)qword_1001267E8);
  v68 = (uint64_t)v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v79, v67, v66);
  v69 = v76;
  sub_10006AD1C(v80, v81, 0.0, 1, 0.0, 1, v45, v68, v76, 0.5);
  v70 = type metadata accessor for PreparedSparkline(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v69, 1, v70);
  if ((_DWORD)result != 1)
    return sub_10000ED3C(v69, v72, type metadata accessor for PreparedSparkline);
  __break(1u);
  return result;
}

uint64_t sub_100069648(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  char v18;
  char v19;

  v3 = v1;
  sub_100012608(0, &qword_100115538, (uint64_t (*)(void))sub_10006D308, (uint64_t)&type metadata for PreparedSparkline.Entry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_10006D308();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PreparedSparkline.Entry.CodingKeys, &type metadata for PreparedSparkline.Entry.CodingKeys, v12, v10, v11);
  v19 = 0;
  v13 = type metadata accessor for Date(0);
  v14 = sub_10006C998();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v19, v6, v13, v14);
  if (!v2)
  {
    v15 = *(double *)(v3 + *(int *)(type metadata accessor for PreparedSparkline.Entry(0) + 20));
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v18, v6, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10006979C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  char v31;

  v24 = a2;
  v27 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v28 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100012608(0, &qword_100115528, (uint64_t (*)(void))sub_10006D308, (uint64_t)&type metadata for PreparedSparkline.Entry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v26 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - v6;
  v8 = type metadata accessor for PreparedSparkline.Entry(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_100007184(a1, v11);
  v13 = sub_10006D308();
  v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PreparedSparkline.Entry.CodingKeys, &type metadata for PreparedSparkline.Entry.CodingKeys, v13, v11, v12);
  if (v14)
    return sub_100007164(a1);
  v29 = a1;
  v15 = (uint64_t)v10;
  v16 = v25;
  v31 = 0;
  v17 = sub_10006C8C0();
  v18 = v27;
  v19 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v27, &v31, v26, v27, v17);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v16 + 32))(v15, v28, v18);
  v30 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v30, v19);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  *(_QWORD *)(v15 + *(int *)(v8 + 20)) = v21;
  sub_10001DE2C(v15, v24, type metadata accessor for PreparedSparkline.Entry);
  sub_100007164(v29);
  return sub_10001DF70(v15, type metadata accessor for PreparedSparkline.Entry);
}

uint64_t sub_100069A18(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v32;
  char v33;

  v3 = v1;
  sub_100012608(0, &qword_100115440, (uint64_t (*)(void))sub_10006C860, (uint64_t)&type metadata for PreparedSparkline.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_10006C860();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PreparedSparkline.CodingKeys, &type metadata for PreparedSparkline.CodingKeys, v12, v10, v11);
  *(_QWORD *)&v32 = *v3;
  v33 = 0;
  sub_10004D760(0);
  v14 = v13;
  v15 = sub_10004EB5C(&qword_100115448, (uint64_t (*)(uint64_t))sub_10004D760, (void (*)(void))sub_10006C97C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v33, v6, v14, v15);
  if (!v2)
  {
    v16 = (int *)type metadata accessor for PreparedSparkline(0);
    v17 = (char *)v3 + v16[5];
    LOBYTE(v32) = 1;
    sub_100022800(0);
    v19 = v18;
    v20 = sub_10004EB5C(&qword_100115458, (uint64_t (*)(uint64_t))sub_100022800, (void (*)(void))sub_10006C998, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v32, v6, v19, v20);
    v21 = (char *)v3 + v16[6];
    LOBYTE(v32) = 2;
    v22 = type metadata accessor for TimeZone(0);
    v23 = sub_100003D3C(&qword_100115460, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v32, v6, v22, v23);
    v32 = *(_OWORD *)((char *)v3 + v16[7]);
    v33 = 3;
    sub_10006C8DC();
    v25 = v24;
    v26 = sub_10006C9B4(&qword_100115468, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v33, v6, v25, v26);
    v27 = (char *)v3 + v16[8];
    v28 = *(_QWORD *)v27;
    v29 = v27[8];
    LOBYTE(v32) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v32, v6);
    LOBYTE(v32) = *((_BYTE *)v3 + v16[9]);
    v33 = 5;
    v30 = sub_10006CA10();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v33, v6, &type metadata for ValueChangeTrend, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_100069D14(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 v46;
  char v47;

  v37 = a2;
  v3 = type metadata accessor for TimeZone(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022800(0);
  v41 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012608(0, &qword_100115400, (uint64_t (*)(void))sub_10006C860, (uint64_t)&type metadata for PreparedSparkline.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for KeyedDecodingContainer);
  v44 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for PreparedSparkline(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_100007184(a1, v14);
  v16 = sub_10006C860();
  v43 = v10;
  v17 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PreparedSparkline.CodingKeys, &type metadata for PreparedSparkline.CodingKeys, v16, v14, v15);
  if (v17)
  {
    sub_100007164(a1);
  }
  else
  {
    v19 = v40;
    v18 = v41;
    v20 = v42;
    v36 = v8;
    v45 = a1;
    sub_10004D760(0);
    v22 = v21;
    v47 = 0;
    v23 = sub_10004EB5C(&qword_100115410, (uint64_t (*)(uint64_t))sub_10004D760, (void (*)(void))sub_10006C8A4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v24 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, v22, &v47, v44, v22, v23);
    *(_QWORD *)v13 = v46;
    LOBYTE(v46) = 1;
    v25 = sub_10004EB5C(&qword_100115420, (uint64_t (*)(uint64_t))sub_100022800, (void (*)(void))sub_10006C8C0, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v18, &v46, v24, v18, v25);
    sub_10000ED3C((uint64_t)v19, (uint64_t)&v13[v11[5]], (uint64_t (*)(_QWORD))sub_100022800);
    LOBYTE(v46) = 2;
    v26 = sub_100003D3C(&qword_100115428, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    v27 = v24;
    v28 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v20, v39, &v46, v27, v39, v26);
    (*(void (**)(char *, _QWORD *, uint64_t))(v38 + 32))(&v13[v11[6]], v20, v28);
    sub_10006C8DC();
    v30 = v29;
    v47 = 3;
    v31 = sub_10006C9B4(&qword_100115430, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, v30, &v47, v44, v30, v31);
    *(_OWORD *)&v13[v11[7]] = v46;
    LOBYTE(v46) = 4;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v44);
    v33 = &v13[v11[8]];
    *(_QWORD *)v33 = v32;
    v33[8] = v34 & 1;
    v47 = 5;
    v35 = sub_10006C938();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, &type metadata for ValueChangeTrend, &v47, v44, &type metadata for ValueChangeTrend, v35);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v43, v44);
    v13[v11[9]] = v46;
    sub_10001DE2C((uint64_t)v13, v37, type metadata accessor for PreparedSparkline);
    sub_100007164(v45);
    sub_10001DF70((uint64_t)v13, type metadata accessor for PreparedSparkline);
  }
}

uint64_t sub_10006A214()
{
  _BYTE *v0;

  if (*v0)
    return 0x6563697270;
  else
    return 1702125924;
}

uint64_t sub_10006A244@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006CF58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006A268(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D308();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A290(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D308();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10006A2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.== infix(_:_:)() & 1) != 0
      && *(double *)(a1 + *(int *)(a3 + 20)) == *(double *)(a2 + *(int *)(a3 + 20));
}

uint64_t sub_10006A308@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006979C(a1, a2);
}

uint64_t sub_10006A31C(_QWORD *a1)
{
  return sub_100069648(a1);
}

uint64_t sub_10006A330()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006A360 + 4 * byte_1000DF9A0[*v0]))(0x73656972746E65, 0xE700000000000000);
}

uint64_t sub_10006A360()
{
  return 0x6E756F42656D6974;
}

uint64_t sub_10006A37C()
{
  return 0x656D695473697861;
}

uint64_t sub_10006A39C()
{
  return 0x756F426563697270;
}

uint64_t sub_10006A3BC()
{
  return 0x73756F6976657270;
}

uint64_t sub_10006A3E0()
{
  return 0x646E657274;
}

uint64_t sub_10006A3F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006D030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006A418(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C860();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A440(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C860();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10006A468(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100069D14(a1, a2);
}

uint64_t sub_10006A47C(_QWORD *a1)
{
  return sub_100069A18(a1);
}

void sub_10006A490(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_100115358)
  {
    v2 = type metadata accessor for Date(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v2, "lower upper ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100115358);
  }
}

uint64_t sub_10006A4F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, int a4@<W3>, double a5@<X4>, int a6@<W5>, _QWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  char v51;
  char v52;
  int *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  double *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  double v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  double v91;
  char *v92;
  int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD v110[3];
  uint64_t v111;
  uint64_t v112;

  v101 = a8;
  LODWORD(v90) = a6;
  v91 = a5;
  v93 = a4;
  v99 = a3;
  v108 = a9;
  v109 = a2;
  v105 = a1;
  v98 = type metadata accessor for PreparedSparkline.Entry(0);
  __chkstk_darwin(v98);
  v89 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v92 = (char *)&v86 - v14;
  sub_10006C044(0);
  v97 = v15;
  v96 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v94 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v95 = (uint64_t)&v86 - v18;
  sub_10006C0BC(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C0D8(0);
  v23 = v22;
  v24 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for PreparedSparkline(0);
  v106 = *(_QWORD *)(v27 - 8);
  v107 = (int *)v27;
  __chkstk_darwin(v27);
  v100 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a7[2];
  v30 = a7[4];
  v112 = *a7;
  v31 = a7[6];
  v32 = *((_OWORD *)a7 + 1);
  v110[0] = *(_OWORD *)a7;
  v110[1] = v32;
  v110[2] = *((_OWORD *)a7 + 2);
  v111 = v31;
  sub_10006C34C(&v112);
  sub_10000EE40(0);
  v34 = v33;
  sub_10006C3F4(0, &qword_1001153B8, (uint64_t (*)(uint64_t))sub_10006C374, (uint64_t (*)(uint64_t))sub_10000EE40, sub_10006C530);
  v36 = v35;
  v37 = sub_10006C54C();
  v104 = v29;
  v38 = v29;
  v39 = v24;
  swift_retain(v38);
  v103 = v30;
  swift_retain(v30);
  v102 = v31;
  swift_retain(v31);
  NonEmpty.init<A, B>(_:)(v110, v34, v36, v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23) == 1)
  {
    v40 = sub_10001DF70((uint64_t)v21, (uint64_t (*)(_QWORD))sub_10006C0BC);
    v41 = v101;
    v42 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to create sparkline model: Insufficient data points", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v45 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v41, v45);
    sub_10006C5B4(&v112);
    swift_release(v102);
    swift_release(v103);
    swift_release(v104);
    v46 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v109, v46);
    sub_10001DF70(v105, (uint64_t (*)(_QWORD))sub_100022800);
LABEL_11:
    v80 = 1;
    v53 = v107;
    v81 = v108;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v106 + 56))(v81, v80, 1, v53);
  }
  v47 = v101;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v21, v23);
  v48 = NonEmpty.count.getter(v23);
  v49 = v26;
  if (v48 >= 250)
  {
    v74 = Logger.logObject.getter(v48);
    v75 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to create sparkline model: too many categories", v76, 2u);
      v77 = v76;
      v49 = v26;
      swift_slowDealloc(v77, -1, -1);
    }

    v78 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v47, v78);
    sub_10006C5B4(&v112);
    swift_release(v102);
    swift_release(v103);
    swift_release(v104);
    v79 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v109, v79);
    sub_10001DF70(v105, (uint64_t (*)(_QWORD))sub_100022800);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v49, v23);
    goto LABEL_11;
  }
  v87 = v23;
  v88 = v39;
  v50 = v90 & 1;
  v51 = v93;
  v52 = v93 & 1;
  v53 = v107;
  v54 = v100;
  v55 = v105;
  sub_10001DE2C(v105, (uint64_t)&v100[v107[5]], (uint64_t (*)(_QWORD))sub_100022800);
  v56 = (char *)v54 + v53[6];
  v57 = type metadata accessor for TimeZone(0);
  v86 = *(_QWORD *)(v57 - 8);
  v58 = *(void (**)(char *, uint64_t))(v86 + 16);
  v90 = v57;
  v58(v56, v109);
  v59 = (double *)((char *)v54 + v53[8]);
  *v59 = v99;
  *((_BYTE *)v59 + 8) = v52;
  v60 = v95;
  sub_10006B3FC(v91, v50, v55, v95);
  v61 = v97;
  NonEmpty.elements.getter(v110, v97);
  *v54 = *(_QWORD *)&v110[0];
  sub_10006B8A0(v60, a10);
  v62 = (_QWORD *)((char *)v54 + v53[7]);
  *v62 = v63;
  v62[1] = v64;
  v65 = sub_100003D3C(&qword_1001153A0, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
  v66 = (uint64_t)v92;
  NonEmpty<>.last.getter(v61, v65);
  v67 = *(double *)(v66 + *(int *)(v98 + 20));
  sub_10001DF70(v66, type metadata accessor for PreparedSparkline.Entry);
  v68 = v96;
  v69 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v94, v60, v61);
  if ((v51 & 1) != 0)
  {
    v70 = (uint64_t)v89;
    NonEmpty.first.getter(v61);
    v71 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v47, v71);
    sub_10006C5B4(&v112);
    swift_release(v102);
    swift_release(v103);
    swift_release(v104);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v109, v90);
    sub_10001DF70(v55, (uint64_t (*)(_QWORD))sub_100022800);
    v72 = *(void (**)(char *, uint64_t))(v68 + 8);
    v72(v69, v61);
    v72((char *)v60, v61);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v49, v87);
    v73 = *(double *)(v70 + *(int *)(v98 + 20));
    sub_10001DF70(v70, type metadata accessor for PreparedSparkline.Entry);
  }
  else
  {
    v82 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 8))(v47, v82);
    sub_10006C5B4(&v112);
    swift_release(v102);
    swift_release(v103);
    swift_release(v104);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v109, v90);
    sub_10001DF70(v55, (uint64_t (*)(_QWORD))sub_100022800);
    v83 = *(void (**)(char *, uint64_t))(v68 + 8);
    v83(v69, v61);
    v83((char *)v60, v61);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v49, v87);
    v73 = v99;
  }
  v84 = (uint64_t)v100;
  v100[v53[9]] = v67 - v73 < 0.0;
  v81 = v108;
  sub_10000ED3C(v84, v108, type metadata accessor for PreparedSparkline);
  v80 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v106 + 56))(v81, v80, 1, v53);
}

uint64_t sub_10006AD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, int a4@<W3>, double a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  char v46;
  char v47;
  int *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  double v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  double v87;
  char *v88;
  int v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];

  LODWORD(v86) = a6;
  v87 = a5;
  v89 = a4;
  v95 = a3;
  v100 = a2;
  v101 = a1;
  v99 = a9;
  v92 = type metadata accessor for PreparedSparkline.Entry(0);
  v13 = __chkstk_darwin(v92);
  v85 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v88 = (char *)&v82 - v15;
  sub_10006C044(0);
  v17 = *(_QWORD *)(v16 - 8);
  v93 = v16;
  v94 = v17;
  v18 = __chkstk_darwin(v16);
  v90 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v91 = (uint64_t)&v82 - v20;
  sub_10006C0BC(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C0D8(0);
  v25 = v24;
  v26 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for PreparedSparkline(0);
  v97 = *(_QWORD *)(v29 - 8);
  v98 = (int *)v29;
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102[0] = a7;
  sub_10000EE40(0);
  v33 = v32;
  sub_10000EDE8(0, &qword_100115388, (uint64_t (*)(uint64_t))sub_10000EE40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v35 = v34;
  v36 = sub_10006C160(&qword_100115398, (uint64_t)&protocol conformance descriptor for [A]);
  v96 = a7;
  swift_bridgeObjectRetain(a7);
  NonEmpty.init<A, B>(_:)(v102, v33, v35, v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v25) == 1)
  {
    v37 = sub_10001DF70((uint64_t)v23, (uint64_t (*)(_QWORD))sub_10006C0BC);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to create sparkline model: Insufficient data points", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(a8, v41);
    swift_bridgeObjectRelease(v96);
    v42 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v100, v42);
    sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_100022800);
LABEL_11:
    v76 = 1;
    v48 = v98;
    v77 = v99;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v97 + 56))(v77, v76, 1, v48);
  }
  v84 = a8;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v23, v25);
  v43 = NonEmpty.count.getter(v25);
  v44 = v28;
  if (v43 >= 250)
  {
    v70 = v84;
    v71 = Logger.logObject.getter(v43);
    v72 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Failed to create sparkline model: too many categories", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }

    v74 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v70, v74);
    swift_bridgeObjectRelease(v96);
    v75 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v100, v75);
    sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_100022800);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    goto LABEL_11;
  }
  v45 = v86 & 1;
  v46 = v89;
  v47 = v89 & 1;
  v48 = v98;
  v49 = v101;
  sub_10001DE2C(v101, (uint64_t)v31 + v98[5], (uint64_t (*)(_QWORD))sub_100022800);
  v50 = (char *)v31 + v48[6];
  v51 = type metadata accessor for TimeZone(0);
  v83 = *(_QWORD *)(v51 - 8);
  v52 = *(void (**)(char *, uint64_t))(v83 + 16);
  v86 = v51;
  v52(v50, v100);
  v53 = (double *)((char *)v31 + v48[8]);
  *v53 = v95;
  *((_BYTE *)v53 + 8) = v47;
  v54 = v49;
  v55 = v91;
  sub_10006B3FC(v87, v45, v54, v91);
  v87 = *(double *)&v44;
  v56 = v93;
  NonEmpty.elements.getter(v102, v93);
  *v31 = v102[0];
  sub_10006B8A0(v55, a10);
  v57 = (_QWORD *)((char *)v31 + v48[7]);
  *v57 = v58;
  v57[1] = v59;
  v60 = sub_100003D3C(&qword_1001153A0, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
  v61 = (uint64_t)v88;
  NonEmpty<>.last.getter(v56, v60);
  v62 = v92;
  v63 = *(double *)(v61 + *(int *)(v92 + 20));
  sub_10001DF70(v61, type metadata accessor for PreparedSparkline.Entry);
  v64 = v94;
  v65 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v90, v55, v56);
  if ((v46 & 1) != 0)
  {
    v66 = (uint64_t)v85;
    NonEmpty.first.getter(v56);
    v67 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v84, v67);
    swift_bridgeObjectRelease(v96);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v100, v86);
    sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_100022800);
    v68 = *(void (**)(char *, uint64_t))(v94 + 8);
    v68(v65, v56);
    v68((char *)v55, v56);
    (*(void (**)(double, uint64_t))(v26 + 8))(COERCE_DOUBLE(*(_QWORD *)&v87), v25);
    v69 = *(double *)(v66 + *(int *)(v62 + 20));
    sub_10001DF70(v66, type metadata accessor for PreparedSparkline.Entry);
  }
  else
  {
    v78 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v84, v78);
    swift_bridgeObjectRelease(v96);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v100, v86);
    sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_100022800);
    v79 = *(void (**)(char *, uint64_t))(v64 + 8);
    v79(v65, v56);
    v79((char *)v55, v56);
    (*(void (**)(double, uint64_t))(v26 + 8))(COERCE_DOUBLE(*(_QWORD *)&v87), v25);
    v69 = v95;
  }
  *((_BYTE *)v31 + v48[9]) = v63 - v69 < 0.0;
  v80 = (uint64_t)v31;
  v77 = v99;
  sub_10000ED3C(v80, v99, type metadata accessor for PreparedSparkline);
  v76 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v97 + 56))(v77, v76, 1, v48);
}

uint64_t sub_10006B3FC@<X0>(double a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  double v50;
  uint64_t v51;
  _BYTE v52[40];

  v45 = a3;
  v50 = a1;
  v6 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = (_QWORD *)v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C044(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PreparedSparkline.Entry(0);
  v51 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v49 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v48 = (uint64_t)&v45 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v45 - v19;
  sub_10006C0D8(0);
  NonEmpty.map<A>(_:)(sub_10006B828, 0, v21, v14);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v22(v13, a4, v10);
  v23 = sub_100003D3C(&qword_1001153A0, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty<>.last.getter(v10, v23);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  if ((a2 & 1) == 0 && *(double *)&v20[*(int *)(v14 + 20)] != v50)
  {
    sub_100022800(0);
    v26 = v45 + *(int *)(v25 + 36);
    Date.addingTimeInterval(_:)(1.0);
    v27 = static Date.> infix(_:_:)(v26, v8);
    (*(void (**)(char *, _QWORD *))(v46 + 8))(v8, v47);
    if ((v27 & 1) != 0)
    {
      v28 = v48;
      Date.addingTimeInterval(_:)(1.0);
      *(double *)(v28 + *(int *)(v14 + 20)) = v50;
      v50 = COERCE_DOUBLE(NonEmpty.rawElements.modify(v52, v10));
      v30 = v29;
      v31 = *v29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
      *v30 = v31;
      v47 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v31 = sub_100073154(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
        *v30 = v31;
      }
      v34 = *(_QWORD *)(v31 + 16);
      v33 = *(_QWORD *)(v31 + 24);
      if (v34 >= v33 >> 1)
      {
        v31 = sub_100073154(v33 > 1, v34 + 1, 1, v31);
        *v47 = v31;
      }
      *(_QWORD *)(v31 + 16) = v34 + 1;
      sub_10000ED3C(v48, v31+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v34, type metadata accessor for PreparedSparkline.Entry);
      (*(void (**)(_BYTE *, _QWORD))&v50)(v52, 0);
    }
  }
  v22(v13, a4, v10);
  v35 = NonEmpty.count.getter(v10);
  v24(v13, v10);
  if (v35 == 1)
  {
    v36 = (uint64_t)v49;
    Date.addingTimeInterval(_:)(1.0);
    *(_QWORD *)(v36 + *(int *)(v14 + 20)) = *(_QWORD *)&v20[*(int *)(v14 + 20)];
    v37 = (void (*)(_BYTE *, _QWORD))NonEmpty.rawElements.modify(v52, v10);
    v39 = v38;
    v40 = *v38;
    v41 = swift_isUniquelyReferenced_nonNull_native(*v38);
    *v39 = v40;
    if ((v41 & 1) == 0)
    {
      v40 = sub_100073154(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
      *v39 = v40;
    }
    v43 = *(_QWORD *)(v40 + 16);
    v42 = *(_QWORD *)(v40 + 24);
    if (v43 >= v42 >> 1)
    {
      v40 = sub_100073154(v42 > 1, v43 + 1, 1, v40);
      *v39 = v40;
    }
    *(_QWORD *)(v40 + 16) = v43 + 1;
    sub_10000ED3C(v36, v40+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v43, type metadata accessor for PreparedSparkline.Entry);
    v37(v52, 0);
  }
  return sub_10001DF70((uint64_t)v20, type metadata accessor for PreparedSparkline.Entry);
}

uint64_t sub_10006B828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_10000EE40(0);
  v5 = *(_QWORD *)(a1 + *(int *)(v4 + 48));
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  result = type metadata accessor for PreparedSparkline.Entry(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t sub_10006B8A0(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  unint64_t v30;

  sub_10006C044(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PreparedSparkline.Entry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  v16 = sub_100003D3C(&qword_1001153A0, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty<>.last.getter(v5, v16);
  v17 = *(double *)&v15[*(int *)(v9 + 20)];
  sub_10001DF70((uint64_t)v15, type metadata accessor for PreparedSparkline.Entry);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  sub_100003D3C(&qword_1001153A8, (uint64_t (*)(uint64_t))sub_10006C044, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
  dispatch thunk of Sequence.makeIterator()(v5);
  result = v29;
  v19 = v30;
  v20 = *(_QWORD *)(v29 + 16);
  if (v30 != v20)
  {
    v22 = v17;
    v21 = v17;
    while ((v19 & 0x8000000000000000) == 0)
    {
      if (v19 >= v20)
        goto LABEL_18;
      v23 = result
          + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + *(_QWORD *)(v10 + 72) * v19;
      v30 = v19 + 1;
      sub_10001DE2C(v23, (uint64_t)v13, type metadata accessor for PreparedSparkline.Entry);
      v24 = *(int *)(v9 + 20);
      v25 = *(double *)&v13[v24];
      if (v21 >= v25)
        v21 = *(double *)&v13[v24];
      if (v25 > v22)
        v22 = *(double *)&v13[v24];
      sub_10001DF70((uint64_t)v13, type metadata accessor for PreparedSparkline.Entry);
      result = v29;
      v19 = v30;
      v20 = *(_QWORD *)(v29 + 16);
      if (v30 == v20)
        goto LABEL_11;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v21 = v17;
  v22 = v17;
LABEL_11:
  result = swift_bridgeObjectRelease(result);
  v26 = a2 * 0.5 * v17;
  v27 = v17 + v26;
  v28 = v17 - v26;
  if (v22 > v27)
    v27 = v22;
  if (v28 >= v21)
    v28 = v21;
  if (v28 > v27)
LABEL_19:
    __break(1u);
  return result;
}

uint64_t sub_10006BAE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = Chart.Entry.close.getter();
  if ((v3 & 1) != 0)
  {
    sub_10000EE40(0);
    v11 = v12;
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v9 = a1;
    v10 = 1;
  }
  else
  {
    v4 = v2;
    sub_10000EE40(0);
    v6 = v5;
    v7 = *(int *)(v5 + 48);
    Chart.Entry.referenceDate.getter();
    *(_QWORD *)(a1 + v7) = v4;
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v9 = a1;
    v10 = 0;
    v11 = v6;
  }
  return v8(v9, v10, 1, v11);
}

uint64_t sub_10006BB7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v52 = a2;
  v53 = a3;
  v50 = a1;
  v39 = a4;
  v54 = type metadata accessor for Calendar.SearchDirection(0);
  v51 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v49 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  __chkstk_darwin(v5);
  v44 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Calendar.MatchingPolicy(0);
  v7 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TimeZone(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Calendar.Identifier(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Calendar(0);
  v42 = *(_QWORD *)(v21 - 8);
  v43 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D7CC(0);
  __chkstk_darwin(v24);
  v41 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for Calendar.Identifier.gregorian(_:), v17);
  Calendar.init(identifier:)(v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (qword_100111500 != -1)
    swift_once(&qword_100111500, sub_10006BF4C);
  v26 = sub_100012524(v13, (uint64_t)qword_100126930);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v26, v13);
  v27 = Calendar.timeZone.setter(v16);
  static Date.now.getter(v27);
  v40 = v7;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Calendar.MatchingPolicy.nextTime(_:), v55);
  v28 = v47;
  v29 = v48;
  v30 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v44, enum case for Calendar.RepeatedTimePolicy.first(_:), v48);
  v31 = v51;
  v32 = v49;
  v33 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v49, enum case for Calendar.SearchDirection.forward(_:), v54);
  v34 = v41;
  Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)(v50, v52, v53, v12, v9, v30, v32);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v29);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v55);
  v36 = v45;
  v35 = v46;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v43);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v39, v34, v35);
  __break(1u);
  return result;
}

uint64_t sub_10006BF4C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_10000EDE8(0, &qword_1001127B8, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - v1;
  v3 = type metadata accessor for TimeZone(0);
  sub_10001253C(v3, qword_100126930);
  v4 = sub_100012524(v3, (uint64_t)qword_100126930);
  TimeZone.init(identifier:)(5526341, 0xE300000000000000);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PreparedSparkline.Entry(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001154D0, (uint64_t)&nominal type descriptor for PreparedSparkline.Entry);
}

void sub_10006C044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115368)
  {
    sub_10004D760(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100115370, (uint64_t (*)(uint64_t))sub_10004D760, (uint64_t)&protocol conformance descriptor for [A]);
    v5 = type metadata accessor for NonEmpty(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115368);
  }
}

void sub_10006C0BC(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115378, (uint64_t (*)(uint64_t))sub_10006C0D8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_10006C0D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115380)
  {
    sub_10000EDE8(255, &qword_100115388, (uint64_t (*)(uint64_t))sub_10000EE40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = v2;
    v4 = sub_10006C160(&qword_100115390, (uint64_t)&protocol conformance descriptor for [A]);
    v5 = type metadata accessor for NonEmpty(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115380);
  }
}

uint64_t sub_10006C160(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_10000EDE8(255, &qword_100115388, (uint64_t (*)(uint64_t))sub_10000EE40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_10006C1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  BOOL v19;
  _BOOL8 result;
  uint64_t v21;

  v4 = type metadata accessor for PreparedSparkline.Entry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    v14 = v11 - 1;
    while (1)
    {
      sub_10001DE2C(a1 + v12, (uint64_t)v10, type metadata accessor for PreparedSparkline.Entry);
      sub_10001DE2C(a2 + v12, (uint64_t)v6, type metadata accessor for PreparedSparkline.Entry);
      if ((static Date.== infix(_:_:)(v10, v6) & 1) == 0)
        break;
      v15 = *(int *)(v4 + 20);
      v16 = *(double *)&v10[v15];
      v17 = *(double *)&v6[v15];
      sub_10001DF70((uint64_t)v6, type metadata accessor for PreparedSparkline.Entry);
      sub_10001DF70((uint64_t)v10, type metadata accessor for PreparedSparkline.Entry);
      v19 = v14-- != 0;
      result = v16 == v17;
      if (v16 == v17)
      {
        v12 += v13;
        if (v19)
          continue;
      }
      return result;
    }
    sub_10001DF70((uint64_t)v6, type metadata accessor for PreparedSparkline.Entry);
    sub_10001DF70((uint64_t)v10, type metadata accessor for PreparedSparkline.Entry);
  }
  return 0;
}

void sub_10006C330(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100111EE8, (uint64_t (*)(uint64_t))&type metadata accessor for Quote, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

_QWORD *sub_10006C34C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

void sub_10006C374(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1001153C0)
  {
    sub_10006C3F4(255, &qword_1001153C8, (uint64_t (*)(uint64_t))sub_10006C474, (uint64_t (*)(uint64_t))sub_10006C490, sub_10006C4AC);
    v3 = v2;
    v4 = sub_10006C4C8();
    v5 = type metadata accessor for LazyFilterSequence(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1001153C0);
  }
}

void sub_10006C3F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5();
    v12 = type metadata accessor for LazyMapSequence(a1, v9, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void sub_10006C474(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_1001153D0, (uint64_t (*)(uint64_t))&type metadata accessor for Chart.Entry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

void sub_10006C490(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100112150, (uint64_t (*)(uint64_t))sub_10000EE40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_10006C4AC()
{
  return sub_100003D3C(&qword_1001153D8, (uint64_t (*)(uint64_t))sub_10006C474, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10006C4C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001153E0;
  if (!qword_1001153E0)
  {
    sub_10006C3F4(255, &qword_1001153C8, (uint64_t (*)(uint64_t))sub_10006C474, (uint64_t (*)(uint64_t))sub_10006C490, sub_10006C4AC);
    result = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001153E0);
  }
  return result;
}

uint64_t sub_10006C530()
{
  return sub_100003D3C(&qword_1001153E8, (uint64_t (*)(uint64_t))sub_10006C374, (uint64_t)&protocol conformance descriptor for LazyFilterSequence<A>);
}

unint64_t sub_10006C54C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001153F0;
  if (!qword_1001153F0)
  {
    sub_10006C3F4(255, &qword_1001153B8, (uint64_t (*)(uint64_t))sub_10006C374, (uint64_t (*)(uint64_t))sub_10000EE40, sub_10006C530);
    result = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001153F0);
  }
  return result;
}

_QWORD *sub_10006C5B4(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10006C5DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  double v21;
  double v22;
  double *v23;
  uint64_t v25;
  double *v26;
  char v27;
  double *v28;
  int v29;
  char v30;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;

  sub_100022800(0);
  v5 = v4;
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - v9;
  if (!sub_10006C1B8(*a1, *a2))
    goto LABEL_14;
  v39 = type metadata accessor for PreparedSparkline(0);
  v40 = a2;
  v11 = *(int *)(v39 + 20);
  v12 = (uint64_t)a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = sub_100003D3C(&qword_1001153F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v13, v14, v15);
  sub_10001DE2C(v12, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_100022800);
  sub_10001DE2C(v13, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_100022800);
  if ((v16 & 1) == 0)
  {
    sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_100022800);
    sub_10001DF70((uint64_t)v10, (uint64_t (*)(_QWORD))sub_100022800);
    goto LABEL_14;
  }
  v17 = dispatch thunk of static Equatable.== infix(_:_:)(&v10[*(int *)(v5 + 36)], &v7[*(int *)(v5 + 36)], v14, v15);
  sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_100022800);
  sub_10001DF70((uint64_t)v10, (uint64_t (*)(_QWORD))sub_100022800);
  if ((v17 & 1) == 0)
    goto LABEL_14;
  v19 = (int *)v39;
  v18 = v40;
  if ((static TimeZone.== infix(_:_:)((char *)a1 + *(int *)(v39 + 24), (char *)v40 + *(int *)(v39 + 24)) & 1) == 0)
    goto LABEL_14;
  v20 = v19[7];
  v21 = *(double *)((char *)a1 + v20);
  v22 = *(double *)((char *)a1 + v20 + 8);
  v23 = (double *)((char *)v18 + v20);
  if (v21 != *v23 || v22 != v23[1])
    goto LABEL_14;
  v25 = v19[8];
  v26 = (double *)((char *)a1 + v25);
  v27 = *((_BYTE *)a1 + v25 + 8);
  v28 = (double *)((char *)v18 + v25);
  v29 = *((unsigned __int8 *)v18 + v25 + 8);
  if ((v27 & 1) != 0)
  {
    if (v29)
      goto LABEL_19;
LABEL_14:
    v30 = 0;
    return v30 & 1;
  }
  if (*v26 != *v28)
    LOBYTE(v29) = 1;
  if ((v29 & 1) != 0)
    goto LABEL_14;
LABEL_19:
  v32 = v19[9];
  v33 = *((unsigned __int8 *)a1 + v32);
  v34 = *((unsigned __int8 *)v18 + v32);
  if (v33)
    v35 = 1853321060;
  else
    v35 = 28789;
  if (v33)
    v36 = 0xE400000000000000;
  else
    v36 = 0xE200000000000000;
  if (v34)
    v37 = 1853321060;
  else
    v37 = 28789;
  if (v34)
    v38 = 0xE400000000000000;
  else
    v38 = 0xE200000000000000;
  if (v35 == v37 && v36 == v38)
  {
    swift_bridgeObjectRelease_n(v36, 2);
    v30 = 1;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v37, v38, 0);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v38);
  }
  return v30 & 1;
}

unint64_t sub_10006C860()
{
  unint64_t result;

  result = qword_100115408;
  if (!qword_100115408)
  {
    result = swift_getWitnessTable(&unk_1000DFC14, &type metadata for PreparedSparkline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115408);
  }
  return result;
}

uint64_t sub_10006C8A4()
{
  return sub_100003D3C(&qword_100115418, type metadata accessor for PreparedSparkline.Entry, (uint64_t)&unk_1000DFBEC);
}

uint64_t sub_10006C8C0()
{
  return sub_100003D3C(&qword_1001146F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
}

void sub_10006C8DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1001143B8)
  {
    v0 = type metadata accessor for ClosedRange(0, &type metadata for Double, &protocol witness table for Double);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1001143B8);
  }
}

unint64_t sub_10006C938()
{
  unint64_t result;

  result = qword_100115438;
  if (!qword_100115438)
  {
    result = swift_getWitnessTable(&unk_1000E18FC, &type metadata for ValueChangeTrend);
    atomic_store(result, (unint64_t *)&qword_100115438);
  }
  return result;
}

uint64_t sub_10006C97C()
{
  return sub_100003D3C(&qword_100115450, type metadata accessor for PreparedSparkline.Entry, (uint64_t)&unk_1000DFBC4);
}

uint64_t sub_10006C998()
{
  return sub_100003D3C(&qword_100114718, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
}

uint64_t sub_10006C9B4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_10006C8DC();
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006CA10()
{
  unint64_t result;

  result = qword_100115470;
  if (!qword_100115470)
  {
    result = swift_getWitnessTable(&unk_1000E18D4, &type metadata for ValueChangeTrend);
    atomic_store(result, (unint64_t *)&qword_100115470);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreparedSparkline.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10006CAA0 + 4 * byte_1000DF9AB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10006CAD4 + 4 * byte_1000DF9A6[v4]))();
}

uint64_t sub_10006CAD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006CADC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006CAE4);
  return result;
}

uint64_t sub_10006CAF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006CAF8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10006CAFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006CB04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreparedSparkline.CodingKeys()
{
  return &type metadata for PreparedSparkline.CodingKeys;
}

uint64_t *sub_10006CB20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10006CBA8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10006CBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10006CC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10006CC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10006CCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10006CD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006CD58);
}

uint64_t sub_10006CD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10006CD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006CDA0);
}

uint64_t sub_10006CDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10006CDE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10006CE54()
{
  return sub_100003D3C(&qword_100115508, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
}

unint64_t sub_10006CE84()
{
  unint64_t result;

  result = qword_100115510;
  if (!qword_100115510)
  {
    result = swift_getWitnessTable(&unk_1000DFB9C, &type metadata for PreparedSparkline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115510);
  }
  return result;
}

unint64_t sub_10006CECC()
{
  unint64_t result;

  result = qword_100115518;
  if (!qword_100115518)
  {
    result = swift_getWitnessTable(&unk_1000DFB0C, &type metadata for PreparedSparkline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115518);
  }
  return result;
}

unint64_t sub_10006CF14()
{
  unint64_t result;

  result = qword_100115520;
  if (!qword_100115520)
  {
    result = swift_getWitnessTable(&unk_1000DFB34, &type metadata for PreparedSparkline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115520);
  }
  return result;
}

uint64_t sub_10006CF58(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6563697270 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6563697270, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10006D030(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E756F42656D6974 && a2 == 0xEA00000000007364)
  {
    v7 = 0xEA00000000007364;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F42656D6974, 0xEA00000000007364, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656D695473697861 && a2 == 0xEC000000656E6F5ALL)
  {
    v8 = 0xEC000000656E6F5ALL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D695473697861, 0xEC000000656E6F5ALL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x756F426563697270 && a2 == 0xEB0000000073646ELL)
  {
    v9 = 0xEB0000000073646ELL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F426563697270, 0xEB0000000073646ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x73756F6976657270 && a2 == 0xED000065736F6C43)
  {
    v10 = 0xED000065736F6C43;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73756F6976657270, 0xED000065736F6C43, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x646E657274 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E657274, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_10006D308()
{
  unint64_t result;

  result = qword_100115530;
  if (!qword_100115530)
  {
    result = swift_getWitnessTable(&unk_1000DFD1C, &type metadata for PreparedSparkline.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115530);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreparedSparkline.Entry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006D398 + 4 * byte_1000DF9B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006D3CC + 4 * byte_1000DF9B0[v4]))();
}

uint64_t sub_10006D3CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006D3D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006D3DCLL);
  return result;
}

uint64_t sub_10006D3E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006D3F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006D3F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006D3FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreparedSparkline.Entry.CodingKeys()
{
  return &type metadata for PreparedSparkline.Entry.CodingKeys;
}

unint64_t sub_10006D41C()
{
  unint64_t result;

  result = qword_100115540;
  if (!qword_100115540)
  {
    result = swift_getWitnessTable(&unk_1000DFCF4, &type metadata for PreparedSparkline.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115540);
  }
  return result;
}

unint64_t sub_10006D464()
{
  unint64_t result;

  result = qword_100115548;
  if (!qword_100115548)
  {
    result = swift_getWitnessTable(&unk_1000DFC64, &type metadata for PreparedSparkline.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115548);
  }
  return result;
}

unint64_t sub_10006D4AC()
{
  unint64_t result;

  result = qword_100115550;
  if (!qword_100115550)
  {
    result = swift_getWitnessTable(&unk_1000DFC8C, &type metadata for PreparedSparkline.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100115550);
  }
  return result;
}

uint64_t sub_10006D4F0()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for NoopStocksIntentHandler()
{
  return objc_opt_self(_TtC12StocksWidget23NoopStocksIntentHandler);
}

unint64_t sub_10006D530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115600;
  if (!qword_100115600)
  {
    v1 = type metadata accessor for NoopStocksIntentHandler();
    result = swift_getWitnessTable(&unk_1000DFDB8, v1);
    atomic_store(result, (unint64_t *)&qword_100115600);
  }
  return result;
}

uint64_t sub_10006D574()
{
  uint64_t v0;

  return sub_10006D584(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006D584(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *sub_10006D590(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100073774(0, v1, 0);
    v3 = (_QWORD *)(a1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v6 >> 1)
        sub_100073774(v6 > 1, v7 + 1, 1);
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_10006D664(uint64_t a1)
{
  int64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100073774(0, v1, 0);
    v4 = sub_1000745D4(a1);
    v5 = 0;
    v6 = a1 + 64;
    v20 = v1;
    v21 = v3;
    v22 = a1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != v3)
        goto LABEL_24;
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v4);
      v11 = v10[1];
      v23 = *v10;
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v11);
      if (v13 >= v12 >> 1)
        sub_100073774(v12 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v23;
      v14[5] = v11;
      v7 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = a1 + 64;
      v15 = *(_QWORD *)(v22 + 8 * v9);
      if ((v15 & (1 << v4)) == 0)
        goto LABEL_26;
      v3 = v21;
      if (*(_DWORD *)(a1 + 36) != v21)
        goto LABEL_27;
      v16 = v15 & (-2 << (v4 & 0x3F));
      if (v16)
      {
        v7 = __clz(__rbit64(v16)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v20;
      }
      else
      {
        v17 = v9 + 1;
        v18 = (unint64_t)(v7 + 63) >> 6;
        v8 = v20;
        if (v9 + 1 < v18)
        {
          v19 = *(_QWORD *)(v22 + 8 * v17);
          if (v19)
          {
LABEL_20:
            v7 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v9)
            {
              v19 = *(_QWORD *)(a1 + 80 + 8 * v9++);
              if (v19)
              {
                v17 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v5;
      v4 = v7;
      if (v5 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

uint64_t sub_10006D86C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_10007340C(isUniquelyReferenced_nonNull_native, v23, 1, v3, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for Headline(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

void sub_10006D9E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100073288(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_10006DB34(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int i;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(unint64_t, char *, uint64_t);
  void (*v51)(_QWORD *);
  uint64_t v52;
  uint64_t result;
  int64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v56;
  void (*v57)(unint64_t, char *, uint64_t);
  unint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66[4];

  v64 = a2;
  v9 = type metadata accessor for Headline(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v62 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100115938, v12, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v60 = (uint64_t)&v54 - v15;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v54 - v19;
  v61 = a4;
  v21 = a4 >> 1;
  v22 = __OFSUB__(a4 >> 1, a3);
  v23 = (a4 >> 1) - a3;
  if (v22)
  {
    __break(1u);
    goto LABEL_26;
  }
  v65 = a1;
  a1 = *v4;
  v24 = *(_QWORD *)(*v4 + 16);
  v5 = v24 + v23;
  if (__OFADD__(v24, v23))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v63 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  *v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (v26 = *(_QWORD *)(a1 + 24) >> 1, v26 < v5))
  {
    if (v24 <= v5)
      v27 = v24 + v23;
    else
      v27 = v24;
    a1 = sub_10007340C(isUniquelyReferenced_nonNull_native, v27, 1, a1, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
    *v4 = a1;
    v26 = *(_QWORD *)(a1 + 24) >> 1;
  }
  v28 = *(_QWORD *)(a1 + 16);
  v29 = v26 - v28;
  if (v21 != a3)
  {
    if (v29 < v23)
    {
      __break(1u);
    }
    else
    {
      if (v23 < 0)
      {
LABEL_51:
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
        goto LABEL_52;
      }
      v30 = *(_QWORD *)(v10 + 72);
      v31 = a1
          + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + v30 * v28;
      v32 = v64 + v30 * a3;
      if (v32 < v31 + v30 * v23 && v31 < v32 + v30 * v23)
      {
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_52:
        __break(1u);
        return result;
      }
      swift_arrayInitWithCopy(v31);
      if (!v23)
      {
LABEL_22:
        v5 = v21;
LABEL_23:
        if (v23 != v29)
          return swift_unknownObjectRelease(v65);
        goto LABEL_28;
      }
      v34 = *(_QWORD *)(a1 + 16);
      v22 = __OFADD__(v34, v23);
      v35 = v34 + v23;
      if (!v22)
      {
        *(_QWORD *)(a1 + 16) = v35;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v23 <= 0)
  {
    v23 = 0;
    v5 = a3;
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  v36 = *(_QWORD *)(a1 + 16);
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
  v55(v20, 1, 1, v9, v18);
  v37 = v60;
  sub_100075B24((uint64_t)v20, v60);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  for (i = v59(v37, 1, v9); i != 1; i = v59(v37, 1, v9))
  {
    sub_100075918(v37);
    v40 = *v4;
    v41 = *(_QWORD *)(*v4 + 24);
    if ((uint64_t)(v41 >> 1) < v36 + 1)
    {
      v42 = v5;
      v52 = sub_10007340C(v41 > 1, v36 + 1, 1, v40, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
      *v4 = v52;
      v58 = v52;
      v54 = *(_QWORD *)(v52 + 24) >> 1;
    }
    else
    {
      v54 = v41 >> 1;
      v58 = v40;
      v42 = v5;
    }
    v43 = *(unsigned __int8 *)(v10 + 80);
    v44 = v63;
    sub_100075B24((uint64_t)v20, v63);
    if (v59(v44, 1, v9) == 1)
    {
      v45 = v63;
LABEL_36:
      sub_100075918(v45);
      v39 = v36;
    }
    else
    {
      v56 = v58 + ((v43 + 32) & ~v43);
      v46 = v54;
      if (v36 > v54)
        v46 = v36;
      v57 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
      v58 = v46;
      v47 = v62;
      v45 = v63;
      while (1)
      {
        v49 = v45;
        v50 = v57;
        v57((unint64_t)v47, (char *)v49, v9);
        if (v58 == v36)
          break;
        sub_100075918((uint64_t)v20);
        v50(v56 + *(_QWORD *)(v10 + 72) * v36, v47, v9);
        if (v42 == v21)
        {
          v48 = 1;
          v42 = v21;
        }
        else
        {
          v51 = sub_100074500(v66, v42, v65, v64, a3, v61);
          (*(void (**)(char *))(v10 + 16))(v20);
          ((void (*)(uint64_t *, _QWORD))v51)(v66, 0);
          v22 = __OFADD__(v42++, 1);
          if (v22)
            goto LABEL_50;
          v48 = 0;
          v47 = v62;
        }
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v20, v48, 1, v9);
        v45 = v63;
        sub_100075B24((uint64_t)v20, v63);
        ++v36;
        if (v59(v45, 1, v9) == 1)
          goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
      v39 = v58;
      v36 = v58;
    }
    v5 = v42;
    *(_QWORD *)(*v4 + 16) = v39;
    v37 = v60;
    sub_100075B24((uint64_t)v20, v60);
  }
  sub_100075918((uint64_t)v20);
  swift_unknownObjectRelease(v65);
  return sub_100075918(v37);
}

uint64_t sub_10006E090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch(sub_10006E0AC, v2, 0);
}

uint64_t sub_10006E0AC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  __n128 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  int *v37;
  _QWORD *v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;

  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1 + 14;
  v3 = v1[17];
  v4 = v1[18];
  sub_100007184(v1 + 14, v3);
  v5 = dispatch thunk of FeatureAvailabilityType.appleNewsContent.getter(v3, v4);
  if ((v5 & 1) == 0)
  {
    v20 = Logger.logObject.getter(v5);
    v22 = static os_log_type_t.default.getter(v21);
    if (!os_log_type_enabled(v20, v22))
    {
LABEL_11:

      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
    }
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "Widget news curation is disabled, because no Apple News content is being served", v23, 2u);
LABEL_10:
    swift_slowDealloc(v23, -1, -1);
    goto LABEL_11;
  }
  v6 = v1[17];
  v7 = v1[18];
  sub_100007184(v1 + 14, v6);
  v8 = dispatch thunk of FeatureAvailabilityType.isWidgetNewsCurationEnabled.getter(v6, v7);
  v9 = *(_QWORD *)(v0 + 48);
  if ((v8 & 1) == 0)
  {
    v24 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 48), 2);
    v20 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v20, v26);
    v28 = *(_QWORD *)(v0 + 48);
    if (!v27)
    {

      swift_bridgeObjectRelease_n(v28, 2);
      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
    }
    v29 = *(_QWORD *)(v0 + 40);
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v45 = v30;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)(v0 + 16) = sub_10007ECFC(v29, v28, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v28, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v26, "Widget news curation is disabled, skipping mandatory headlines fetch for symbol=%s", v23, 0xCu);
    swift_arrayDestroy(v30, 1, &type metadata for Any[8]);
    swift_slowDealloc(v30, -1, -1);
    goto LABEL_10;
  }
  v10 = v1[17];
  v11 = v1[18];
  sub_100007184(v2, v10);
  LOBYTE(v10) = dispatch thunk of FeatureAvailabilityType.isWidgetSpecificConfigurationEnabled.getter(v10, v11);
  v12 = swift_bridgeObjectRetain_n(v9, 2);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v13, v15);
  v17 = *(_QWORD *)(v0 + 48);
  if ((v10 & 1) != 0)
  {
    if (v16)
    {
      v42 = *(_QWORD *)(v0 + 40);
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v45 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(v17);
      *(_QWORD *)(v0 + 32) = sub_10007ECFC(v42, v17, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Using widget-specific config for fetching mandatory headlines for symbol=%s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, &type metadata for Any[8]);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    v34 = *(_QWORD *)(v0 + 56);
    v35 = *(_QWORD *)(v34 + 176);
    ObjectType = swift_getObjectType(*(_QWORD *)(v34 + 168));
    v37 = *(int **)(v35 + 16);
    v44 = (int *)((char *)v37 + *v37);
    v38 = (_QWORD *)swift_task_alloc(v37[1]);
    *(_QWORD *)(v0 + 64) = v38;
    v39 = sub_10006E608;
  }
  else
  {
    if (v16)
    {
      v43 = *(_QWORD *)(v0 + 40);
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v45 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(v17);
      *(_QWORD *)(v0 + 24) = sub_10007ECFC(v43, v17, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Using Top Stories-service for fetching mandatory headlines for symbol=%s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, &type metadata for Any[8]);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    v40 = *(_QWORD *)(v0 + 56);
    v35 = *(_QWORD *)(v40 + 160);
    ObjectType = swift_getObjectType(*(_QWORD *)(v40 + 152));
    v41 = *(int **)(v35 + 16);
    v44 = (int *)((char *)v41 + *v41);
    v38 = (_QWORD *)swift_task_alloc(v41[1]);
    *(_QWORD *)(v0 + 72) = v38;
    v39 = sub_10006E65C;
  }
  *v38 = v0;
  v38[1] = v39;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v44)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), ObjectType, v35);
}

uint64_t sub_10006E608(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 64);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10006E65C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 72);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10006E6B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  return swift_task_switch(sub_10006E6C8, v1, 0);
}

uint64_t sub_10006E6C8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  __n128 v28;
  os_log_type_t v29;
  uint8_t *v30;
  unint64_t v31;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ObjectType;
  int *v58;
  _QWORD *v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  int *v62;
  int *v63;
  uint64_t v64;

  v1 = *(_QWORD **)(v0 + 72);
  v2 = v1 + 14;
  v3 = v1[17];
  v4 = v1[18];
  sub_100007184(v1 + 14, v3);
  v5 = dispatch thunk of FeatureAvailabilityType.appleNewsContent.getter(v3, v4);
  if ((v5 & 1) == 0)
  {
    v27 = Logger.logObject.getter(v5);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Widget news curation is disabled, because no Apple News content is being served", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    goto LABEL_9;
  }
  v6 = v1[17];
  v7 = v1[18];
  sub_100007184(v1 + 14, v6);
  v8 = dispatch thunk of FeatureAvailabilityType.isWidgetNewsCurationEnabled.getter(v6, v7);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = (uint64_t *)(v0 + 64);
  if ((v8 & 1) == 0)
  {
    v33 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 64), 2);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    v37 = os_log_type_enabled(v34, v36);
    v38 = *v10;
    if (v37)
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v64 = v40;
      *(_DWORD *)v39 = 136315138;
      *(_QWORD *)(v0 + 16) = v38;
      sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
      v42 = v41;
      v43 = sub_100075848();
      v44 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v42, v43);
      v46 = v45;
      *(_QWORD *)(v0 + 24) = sub_10007ECFC(v44, v45, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v46);
      swift_bridgeObjectRelease_n(v38, 2);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Widget news curation is disabled, skipping mandatory headlines fetch for symbols=[%s]", v39, 0xCu);
      swift_arrayDestroy(v40, 1, &type metadata for Any[8]);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
    }
LABEL_9:
    v31 = sub_10002C71C((uint64_t)_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v31);
  }
  v11 = v1[17];
  v12 = v1[18];
  sub_100007184(v2, v11);
  LOBYTE(v12) = dispatch thunk of FeatureAvailabilityType.isWidgetSpecificConfigurationEnabled.getter(v11, v12);
  v13 = swift_bridgeObjectRetain_n(v9, 2);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = os_log_type_enabled(v14, v16);
  v18 = *v10;
  if ((v12 & 1) != 0)
  {
    if (v17)
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v64 = v20;
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v0 + 48) = v18;
      sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
      v22 = v21;
      v23 = sub_100075848();
      v24 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v22, v23);
      v26 = v25;
      *(_QWORD *)(v0 + 56) = sub_10007ECFC(v24, v25, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease_n(v18, 2);
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Using Top Stories-service for fetching mandatory headlines for symbols=[%s]", v19, 0xCu);
      swift_arrayDestroy(v20, 1, &type metadata for Any[8]);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
    }
    v55 = *(_QWORD *)(v0 + 72);
    v56 = *(_QWORD *)(v55 + 176);
    ObjectType = swift_getObjectType(*(_QWORD *)(v55 + 168));
    v58 = *(int **)(v56 + 24);
    v63 = (int *)((char *)v58 + *v58);
    v59 = (_QWORD *)swift_task_alloc(v58[1]);
    *(_QWORD *)(v0 + 80) = v59;
    v60 = sub_10006ECF4;
  }
  else
  {
    if (v17)
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v64 = v48;
      *(_DWORD *)v47 = 136315138;
      *(_QWORD *)(v0 + 32) = v18;
      sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
      v50 = v49;
      v51 = sub_100075848();
      v52 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v50, v51);
      v54 = v53;
      *(_QWORD *)(v0 + 40) = sub_10007ECFC(v52, v53, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease_n(v18, 2);
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Using widget-specific config for fetching mandatory headlines for symbols=[%s]", v47, 0xCu);
      swift_arrayDestroy(v48, 1, &type metadata for Any[8]);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
    }
    v61 = *(_QWORD *)(v0 + 72);
    v56 = *(_QWORD *)(v61 + 160);
    ObjectType = swift_getObjectType(*(_QWORD *)(v61 + 152));
    v62 = *(int **)(v56 + 24);
    v63 = (int *)((char *)v62 + *v62);
    v59 = (_QWORD *)swift_task_alloc(v62[1]);
    *(_QWORD *)(v0 + 88) = v59;
    v60 = sub_10006ED48;
  }
  *v59 = v0;
  v59[1] = v60;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v63)(*(_QWORD *)(v0 + 64), ObjectType, v56);
}

uint64_t sub_10006ECF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 80);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10006ED48(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 88);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10006ED9C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100007164(v0 + 14);
  swift_unknownObjectRelease(v0[19]);
  swift_unknownObjectRelease(v0[21]);
  v1 = (char *)v0 + OBJC_IVAR____TtC12StocksWidget24MandatoryHeadlineService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10006EE00()
{
  return type metadata accessor for MandatoryHeadlineService(0);
}

uint64_t type metadata accessor for MandatoryHeadlineService(uint64_t a1)
{
  return sub_1000071F8(a1, (uint64_t *)&unk_100115640, (uint64_t)&nominal type descriptor for MandatoryHeadlineService);
}

uint64_t sub_10006EE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100072F38(a1, a2, a3, (uint64_t)&unk_1000DFE68, (uint64_t)&unk_1000DFE80);
}

uint64_t sub_10006EE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100115654);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100075C6C;
  v6[6] = a2;
  v6[7] = v2;
  v6[5] = a1;
  return swift_task_switch(sub_10006E0AC, v2, 0);
}

uint64_t sub_10006EEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10011565C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100075C6C;
  v4[8] = a1;
  v4[9] = v1;
  return swift_task_switch(sub_10006E6C8, v1, 0);
}

uint64_t sub_10006EF00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_10006EF1C, v2, 0);
}

uint64_t sub_10006EF1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = v0[9];
  v0[11] = OBJC_IVAR____TtC12StocksWidget34TopStoriesMandatoryHeadlineService_logger;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = v0[9];
    v7 = v0[8];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    v0[7] = sub_10007ECFC(v7, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Fetching top stories for symbol=%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v10 = v0[9];

    swift_bridgeObjectRelease_n(v10, 2);
  }
  v11 = (_QWORD *)v0[10];
  v12 = v11[17];
  v13 = v11[18];
  sub_100007184(v11 + 14, v12);
  v0[12] = dispatch thunk of TopStoriesServiceType.fetchTopStoriesHeadlines()(v12, v13);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[13] = v14;
  *v14 = v0;
  v14[1] = sub_10006F0F8;
  return Promise.resolveAsync()(v0 + 2);
}

uint64_t sub_10006F0F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 80);
    v5 = sub_10006F4D8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 96));
    v5 = sub_10006F16C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10006F16C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27[2];

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 72), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v27[0] = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 40) = sub_10007ECFC(v7, v6, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2048;
    v10 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease(v1);
    *(_QWORD *)(v0 + 48) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Successfully fetched top stories for symbol=%s, count=%ld", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 72);
    swift_bridgeObjectRelease_n(v1, 2);

    swift_bridgeObjectRelease_n(v11, 2);
  }
  v12 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(v13);
  swift_retain(v12);
  sub_1000749B0(v1, v12, v14, v13);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  swift_release(v12);
  swift_bridgeObjectRetain_n(v13, 2);
  swift_bridgeObjectRetain(v16);
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v18, v20);
  v22 = *(_QWORD *)(v0 + 72);
  if (v21)
  {
    v23 = *(_QWORD *)(v0 + 64);
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(32, -1);
    v27[0] = v25;
    *(_DWORD *)v24 = 134218242;
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v16 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(v0 + 32) = sub_10007ECFC(v23, v22, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "Filtered top stories down to relevant ones for symbol, count=%ld, symbol=%s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v25, 1, &type metadata for Any[8]);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v22, 2);
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
}

uint64_t sub_10006F4D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006F50C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t (*v31)(char *, uint64_t, __n128);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t ObjectType;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t *v41;
  uint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  os_log_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v64 = a3;
  v7 = type metadata accessor for HeadlineMetadata(0);
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  __chkstk_darwin(v7);
  v67 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v62 = (char *)&v57 - v10;
  v11 = type metadata accessor for Headline(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v57 - v16;
  v63 = v18;
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v19((char *)&v57 - v16, a1, v11, v15);
  v65 = v13;
  v66 = a1;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v13, a1, v11);
  v20 = swift_bridgeObjectRetain_n(a4, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(32, -1);
    v60 = v21;
    v25 = v24;
    v26 = swift_slowAlloc(64, -1);
    v61 = v26;
    v72 = v26;
    *(_DWORD *)v25 = 136315650;
    v59 = v23;
    v27 = Headline.title.getter(v26);
    if (v28)
    {
      v29 = v28;
    }
    else
    {
      v27 = 7104878;
      v29 = 0xE300000000000000;
    }
    v70 = sub_10007ECFC(v27, v29, &v72);
    v58 = &v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v25 + 4, v25 + 12);
    v30 = swift_bridgeObjectRelease(v29);
    v31 = *(uint64_t (**)(char *, uint64_t, __n128))(v63 + 8);
    v32 = v31(v17, v11, v30);
    *(_WORD *)(v25 + 12) = 2048;
    v63 = v25 + 14;
    v33 = v65;
    v34 = Headline.fcHeadline.getter(v32);
    ObjectType = swift_getObjectType(v34);
    v36 = v62;
    FCHeadlineProviding.derivedMetadata.getter(ObjectType);
    v37 = swift_unknownObjectRelease(v34);
    v38 = HeadlineMetadata.entityMetadata.getter(v37);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v36, v69);
    v39 = *(_QWORD *)(v38 + 16);
    v40 = swift_bridgeObjectRelease(v38);
    v31(v33, v11, v40);
    v70 = v39;
    v41 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v58, v63, v25 + 22);
    *(_WORD *)(v25 + 22) = 2080;
    swift_bridgeObjectRetain(a4);
    v42 = v64;
    v70 = sub_10007ECFC(v64, a4, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v41, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease_n(a4, 3);
    v43 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v59, "Checking relevance of headline to symbol, headline=%s, entityMetadataCount=%ld, symbol=%s", (uint8_t *)v25, 0x20u);
    v44 = v61;
    swift_arrayDestroy(v61, 2, &type metadata for Any[8]);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    v46 = *(void (**)(char *, uint64_t))(v63 + 8);
    v46(v65, v11);

    v46(v17, v11);
    v45 = swift_bridgeObjectRelease_n(a4, 2);
    v42 = v64;
  }
  v47 = Headline.fcHeadline.getter(v45);
  v48 = swift_getObjectType(v47);
  v49 = v67;
  FCHeadlineProviding.derivedMetadata.getter(v48);
  v50 = swift_unknownObjectRelease(v47);
  v51 = HeadlineMetadata.entityMetadata.getter(v50);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v49, v69);
  v52 = *(_QWORD *)(v51 + 16);
  if (v52)
  {
    v53 = *(_QWORD *)(type metadata accessor for HeadlineMetadata.StockEntityMetadata(0) - 8);
    v54 = v51 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
    v55 = *(_QWORD *)(v53 + 72);
    swift_bridgeObjectRetain(v51);
    while ((sub_10006F95C(v54, a2, v42, a4) & 1) == 0)
    {
      v54 += v55;
      if (!--v52)
      {
        swift_bridgeObjectRelease_n(v51, 2);
        return 0;
      }
    }
    swift_bridgeObjectRelease_n(v51, 2);
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease(v51);
    return 0;
  }
}

uint64_t sub_10006F95C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a3;
  v7 = type metadata accessor for HeadlineMetadata.StockEntityMetadata(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v9);
  v12 = swift_bridgeObjectRetain_n(a4, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    v16 = swift_slowAlloc(22, -1);
    v31 = a1;
    v17 = v16;
    v30 = swift_slowAlloc(64, -1);
    v36 = v30;
    *(_DWORD *)v17 = 136315394;
    v18 = HeadlineMetadata.StockEntityMetadata.symbol.getter();
    if (v19)
    {
      v20 = v19;
    }
    else
    {
      v18 = 7104878;
      v20 = 0xE300000000000000;
    }
    HIDWORD(v29) = v15;
    v34 = sub_10007ECFC(v18, v20, &v36);
    v32 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4, v17 + 12);
    v21 = swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v7, v21);
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v22 = v33;
    v34 = sub_10007ECFC(v33, a4, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, BYTE4(v29), "Checking relevance of entity metadata to symbol, metadataSymbol=%s, symbol=%s", (uint8_t *)v17, 0x16u);
    v23 = v30;
    swift_arrayDestroy(v30, 2, &type metadata for Any[8]);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    swift_bridgeObjectRelease_n(a4, 2);
    v22 = v33;
  }
  v24 = HeadlineMetadata.StockEntityMetadata.symbol.getter();
  if (v25)
  {
    v26 = v25;
    if (v24 == v22 && v25 == a4)
      v27 = 1;
    else
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v22, a4, 0);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t sub_10006FC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = v1;
  return swift_task_switch(sub_10006FC30, v1, 0);
}

uint64_t sub_10006FC30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v1 = v0[6];
  v0[8] = OBJC_IVAR____TtC12StocksWidget34TopStoriesMandatoryHeadlineService_logger;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = v0[6];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v21 = v8;
    v0[4] = v6;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v10 = v9;
    v11 = sub_100075848();
    v12 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v10, v11);
    v14 = v13;
    v0[5] = sub_10007ECFC(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Fetching top stories for symbols=[%s]", v7, 0xCu);
    swift_arrayDestroy(v8, 1, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v15 = v0[6];

    swift_bridgeObjectRelease_n(v15, 2);
  }
  v16 = (_QWORD *)v0[7];
  v17 = v16[17];
  v18 = v16[18];
  sub_100007184(v16 + 14, v17);
  v0[9] = dispatch thunk of TopStoriesServiceType.fetchTopStoriesHeadlines()(v17, v18);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[10] = v19;
  *v19 = v0;
  v19[1] = sub_10006FE48;
  return Promise.resolveAsync()(v0 + 2);
}

uint64_t sub_10006FE48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 56);
    v5 = sub_1000700A4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_release(*(_QWORD *)(v2 + 72));
    v5 = sub_10006FEBC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

void sub_10006FEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Successfully fetched top stories, count=%ld", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
  }

  v18[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  v7 = *(_QWORD *)(v1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(type metadata accessor for Headline(0) - 8);
    v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD **)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRetain(v1);
    sub_1000700D8(v18, v1 + v9, v13, v12);
    if (v11)
    {
      swift_bridgeObjectRelease(v18[0]);
      swift_bridgeObjectRelease(v1);
      return;
    }
    v16 = v7 - 1;
    if (v7 != 1)
    {
      v17 = v1 + v10 + v9;
      do
      {
        sub_1000700D8(v18, v17, *(_QWORD **)(v0 + 48), *(_QWORD *)(v0 + 56));
        v17 += v10;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease_n(v1, 2);
    v15 = (void *)v18[0];
  }
  else
  {
    v14 = swift_bridgeObjectRelease(v1);
    v15 = &_swiftEmptyDictionarySingleton;
  }
  (*(void (**)(void *, __n128))(v0 + 8))(v15, v14);
}

uint64_t sub_1000700A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000700D8(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  __n128 v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  void (*v87)(_QWORD *@<X8>);
  uint64_t result;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char *v92;
  __n128 v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD *@<X8>);
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v103 = a1;
  v107 = type metadata accessor for Headline(0);
  v104 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v102 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v89 - v10;
  v97 = type metadata accessor for HeadlineMetadata.StockEntityMetadata(0);
  v12 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v101 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HeadlineMetadata(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = a2;
  v19 = Headline.fcHeadline.getter(v18);
  ObjectType = swift_getObjectType(v19);
  FCHeadlineProviding.derivedMetadata.getter(ObjectType);
  v21 = swift_unknownObjectRelease(v19);
  v22 = HeadlineMetadata.entityMetadata.getter(v21);
  v23 = v14;
  v24 = v22;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  v109 = *(_QWORD *)(v24 + 16);
  if (!v109)
  {
    swift_bridgeObjectRelease(v24);
    v87 = 0;
    return sub_1000759FC((uint64_t)v87, 0);
  }
  v91 = v4;
  v106 = 0;
  v26 = a4;
  v27 = 0;
  v95 = v26 + OBJC_IVAR____TtC12StocksWidget34TopStoriesMandatoryHeadlineService_logger;
  v96 = v11;
  v108 = v24 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v90 = a3 + 9;
  v25.n128_u64[0] = 136315394;
  v93 = v25;
  v92 = &type metadata for Any[8];
  v28 = v107;
  v29 = v97;
  v30 = v12;
  v31 = v101;
  v94 = a3;
  v98 = v24;
  v99 = v12;
  while (1)
  {
    if (v27 >= *(_QWORD *)(v24 + 16))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v32 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v30 + 16))(v31, v108 + *(_QWORD *)(v30 + 72) * v27, v29);
    v33 = HeadlineMetadata.StockEntityMetadata.symbol.getter(v32);
    if (v34)
      break;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
LABEL_4:
    if (++v27 == v109)
    {
      swift_bridgeObjectRelease(v24);
      v87 = v106;
      return sub_1000759FC((uint64_t)v87, 0);
    }
  }
  v35 = v34;
  v36 = a3[2];
  if (!v36)
    goto LABEL_33;
  v37 = v33;
  v38 = a3[4];
  v39 = a3[5];
  if (v38 == v37 && v35 == v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v37, v35, 0) & 1) != 0)
    goto LABEL_11;
  v29 = v97;
  if (v36 == 1)
    goto LABEL_33;
  v79 = a3[6];
  v80 = a3[7];
  if (v79 == v37 && v35 == v80 || (_stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v37, v35, 0) & 1) != 0)
  {
LABEL_11:
    v40 = v104;
    v41 = v96;
    v100 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
    v100(v96, v105, v28);
    v42 = swift_bridgeObjectRetain_n(v35, 2);
    v43 = Logger.logObject.getter(v42);
    v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      v110 = v47;
      *(_DWORD *)v46 = v93.n128_u32[0];
      v48 = Headline.identifier.getter();
      v50 = v49;
      *(_QWORD *)(v46 + 4) = sub_10007ECFC(v48, v49, &v110);
      v51 = swift_bridgeObjectRelease(v50);
      (*(void (**)(char *, uint64_t, __n128))(v104 + 8))(v41, v107, v51);
      *(_WORD *)(v46 + 12) = 2080;
      swift_bridgeObjectRetain(v35);
      *(_QWORD *)(v46 + 14) = sub_10007ECFC(v37, v35, &v110);
      swift_bridgeObjectRelease_n(v35, 3);
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "Found headline relevant for symbol, headlineID=%s, symbol=%s", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 2, v92);
      v52 = v47;
      v40 = v104;
      swift_slowDealloc(v52, -1, -1);
      v53 = v46;
      v28 = v107;
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v28);
      swift_bridgeObjectRelease_n(v35, 2);
    }
    v100(v102, v105, v28);
    sub_1000759FC((uint64_t)v106, 0);
    v54 = v103;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v103);
    v110 = *v54;
    v56 = v110;
    *v54 = 0x8000000000000000;
    v58 = sub_10002D24C(v37, v35);
    v59 = *(_QWORD *)(v56 + 16);
    v60 = (v57 & 1) == 0;
    v61 = v59 + v60;
    if (__OFADD__(v59, v60))
      goto LABEL_53;
    v62 = v57;
    if (*(_QWORD *)(v56 + 24) >= v61)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000741E0(sub_10002D5F0);
        v56 = v110;
      }
    }
    else
    {
      sub_100073ED0(v61, isUniquelyReferenced_nonNull_native, sub_10002D5F0);
      v56 = v110;
      v63 = sub_10002D24C(v37, v35);
      if ((v62 & 1) != (v64 & 1))
        goto LABEL_56;
      v58 = v63;
    }
    v65 = v103;
    v66 = *v103;
    *v103 = v56;
    swift_bridgeObjectRelease(v66);
    v67 = (_QWORD *)*v65;
    if ((v62 & 1) != 0)
    {
      v68 = (_QWORD *)*v65;
    }
    else
    {
      v67[(v58 >> 6) + 8] |= 1 << v58;
      v69 = (uint64_t *)(v67[6] + 16 * v58);
      *v69 = v37;
      v69[1] = v35;
      *(_QWORD *)(v67[7] + 8 * v58) = _swiftEmptyArrayStorage;
      v70 = v67[2];
      v71 = v70 + 1;
      v72 = __OFADD__(v70, 1);
      v25 = swift_bridgeObjectRetain(v67);
      if (v72)
        goto LABEL_54;
      v67[2] = v71;
      v68 = (_QWORD *)v35;
    }
    swift_bridgeObjectRetain(v68);
    v73 = v67[7];
    swift_bridgeObjectRelease(v67);
    v74 = *(_QWORD *)(v73 + 8 * v58);
    v75 = swift_isUniquelyReferenced_nonNull_native(v74);
    *(_QWORD *)(v73 + 8 * v58) = v74;
    v28 = v107;
    if ((v75 & 1) == 0)
    {
      v74 = sub_10007340C(0, *(_QWORD *)(v74 + 16) + 1, 1, v74, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
      *(_QWORD *)(v73 + 8 * v58) = v74;
    }
    v77 = *(_QWORD *)(v74 + 16);
    v76 = *(_QWORD *)(v74 + 24);
    if (v77 >= v76 >> 1)
    {
      v74 = sub_10007340C(v76 > 1, v77 + 1, 1, v74, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
      *(_QWORD *)(v73 + 8 * v58) = v74;
    }
    a3 = v94;
    *(_QWORD *)(v74 + 16) = v77 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v74+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v77, v102, v28);
    v78 = swift_bridgeObjectRelease(v35);
    v30 = v99;
    v31 = v101;
    v29 = v97;
    (*(void (**)(char *, uint64_t, __n128))(v99 + 8))(v101, v97, v78);
    v106 = sub_1000707F8;
    goto LABEL_34;
  }
  v29 = v97;
  if (v36 == 2)
  {
LABEL_33:
    v30 = v99;
    v31 = v101;
    (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v29);
    v25 = swift_bridgeObjectRelease(v35);
LABEL_34:
    v24 = v98;
    goto LABEL_4;
  }
  v81 = v90;
  v82 = 2;
  while (1)
  {
    v83 = v82 + 1;
    if (__OFADD__(v82, 1))
      break;
    v84 = *(v81 - 1);
    v85 = *v81;
    v86 = v84 == v37 && v35 == v85;
    if (v86 || (_stringCompareWithSmolCheck(_:_:expecting:)(v84, v85, v37, v35, 0) & 1) != 0)
      goto LABEL_11;
    v81 += 2;
    ++v82;
    v86 = v83 == v36;
    v29 = v97;
    if (v86)
      goto LABEL_33;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String, v25);
  __break(1u);
  return result;
}

void sub_1000707F8(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_100070808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100007164((_QWORD *)(v0 + 112));
  v1 = v0 + OBJC_IVAR____TtC12StocksWidget34TopStoriesMandatoryHeadlineService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10007085C()
{
  return type metadata accessor for TopStoriesMandatoryHeadlineService(0);
}

uint64_t type metadata accessor for TopStoriesMandatoryHeadlineService(uint64_t a1)
{
  return sub_1000071F8(a1, (uint64_t *)&unk_100115738, (uint64_t)&nominal type descriptor for TopStoriesMandatoryHeadlineService);
}

uint64_t sub_100070878(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_1000DFE68;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000708F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10011574C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100075C6C;
  v6[9] = a2;
  v6[10] = v2;
  v6[8] = a1;
  return swift_task_switch(sub_10006EF1C, v2, 0);
}

uint64_t sub_100070968(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100115754);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100075C6C;
  v4[6] = a1;
  v4[7] = v1;
  return swift_task_switch(sub_10006FC30, v1, 0);
}

uint64_t sub_1000709C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v4 = type metadata accessor for Headline(0);
  v3[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[18] = v5;
  v3[19] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HeadlineOrigin(0);
  v3[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[21] = v7;
  v3[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100070A54, v2, 0);
}

uint64_t sub_100070A54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = v0[15];
  v0[23] = OBJC_IVAR____TtC12StocksWidget36WidgetConfigMandatoryHeadlineService_logger;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = v0[15];
    v7 = v0[14];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    v0[13] = sub_10007ECFC(v7, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Fetching widget config record to determine mandatory headlines for symbol=%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v10 = v0[15];

    swift_bridgeObjectRelease_n(v10, 2);
  }
  v11 = (_QWORD *)swift_task_alloc(dword_1001151F4);
  v0[24] = v11;
  *v11 = v0;
  v11[1] = sub_100070BFC;
  return sub_1000667D0();
}

uint64_t sub_100070BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(*v4 + 192);
  v6 = *v4;
  *(_QWORD *)(v6 + 200) = a2;
  *(_QWORD *)(v6 + 208) = a3;
  swift_task_dealloc(v5);
  if (!v3)
    return swift_task_switch(sub_100070C7C, *(_QWORD *)(v6 + 128), 0);
  v7 = *(_QWORD *)(v6 + 152);
  swift_task_dealloc(*(_QWORD *)(v6 + 176));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100070C7C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  _QWORD *v9;

  v2 = v0[15];
  v1 = (_QWORD *)v0[16];
  v3 = v0[14];
  v4 = v1[24];
  v5 = v1[25];
  sub_100007184(v1 + 21, v4);
  sub_1000143C4(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000DB170;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v2;
  v8 = swift_bridgeObjectRetain(v2);
  v0[27] = FeedLookupServiceType.fetchFeedIDs(for:)(v7, v4, v5, v8);
  swift_bridgeObjectRelease(v7);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[28] = v9;
  *v9 = v0;
  v9[1] = sub_100070D70;
  return Promise.resolveAsync()(v0 + 5);
}

uint64_t sub_100070D70()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v3);
  v4 = v2[27];
  if (v0)
  {
    v5 = v2[25];
    v6 = v2[26];
    v7 = v2[16];
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v8 = sub_100071900;
    v9 = v7;
  }
  else
  {
    v10 = v2[16];
    swift_release(v4);
    v8 = sub_100070E08;
    v9 = v10;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100070E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  __n128 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  _QWORD *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  uint64_t v64;
  _QWORD *v65;

  v1 = *(_QWORD *)(v0 + 40);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_13;
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(v2);
  v4 = sub_10002D24C(v3, v2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
LABEL_13:
    v32 = *(_QWORD *)(v0 + 208);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
    swift_bridgeObjectRelease(v32);
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * v4);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v6);
  sub_10007465C(v10, v9);
  v12 = v11;
  v1 = v13;
  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease_n(v6, 2);
  if (!v12)
  {
LABEL_15:
    v33 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 120), 2);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    v37 = os_log_type_enabled(v34, v36);
    v38 = *(_QWORD *)(v0 + 120);
    if (v37)
    {
      v39 = *(_QWORD *)(v0 + 112);
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_QWORD *)swift_slowAlloc(32, -1);
      v65 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)(v0 + 32) = sub_10007ECFC(v39, v38, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v38, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "No mandatory headlines found for symbol=%s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, &type metadata for Any[8]);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
    }
    v42 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  *(_QWORD *)(v0 + 240) = v1;
  swift_bridgeObjectRelease(v12);
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_14:
    swift_bridgeObjectRelease(v1);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 120), 2);
  v14 = swift_bridgeObjectRetain_n(v1, 2);
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v15, v17);
  v19 = *(_QWORD *)(v0 + 120);
  if (v18)
  {
    v63 = v17;
    v20 = *(_QWORD *)(v0 + 112);
    v21 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v64 = v62;
    *(_DWORD *)v21 = 136315394;
    swift_bridgeObjectRetain(v19);
    *(_QWORD *)(v0 + 80) = sub_10007ECFC(v20, v19, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(v19, 3);
    *(_WORD *)(v21 + 12) = 2080;
    v22 = *(_QWORD *)(v1 + 16);
    v23 = _swiftEmptyArrayStorage;
    if (v22)
    {
      v59 = v21;
      v60 = v15;
      v65 = _swiftEmptyArrayStorage;
      sub_100073774(0, v22, 0);
      v23 = v65;
      v24 = v65[2];
      v25 = 2 * v24;
      v61 = v1;
      v26 = (uint64_t *)(v1 + 40);
      do
      {
        v27 = *(v26 - 1);
        v28 = *v26;
        v65 = v23;
        v29 = v24 + 1;
        v30 = v23[3];
        swift_bridgeObjectRetain(v28);
        if (v24 >= v30 >> 1)
        {
          sub_100073774(v30 > 1, v29, 1);
          v23 = v65;
        }
        v23[2] = v29;
        v31 = &v23[v25];
        v31[4] = v27;
        v31[5] = v28;
        v25 += 2;
        v26 += 4;
        ++v24;
        --v22;
      }
      while (v22);
      v1 = v61;
      v21 = v59;
      v15 = v60;
    }
    *(_QWORD *)(v0 + 88) = v23;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v45 = v44;
    v46 = sub_100075848();
    v47 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v45, v46);
    v49 = v48;
    swift_bridgeObjectRelease(v23);
    *(_QWORD *)(v0 + 96) = sub_10007ECFC(v47, v49, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v15, v63, "Fetching mandatory headlines for symbol=%s headlineIDs=[%s]", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v62, 2, &type metadata for Any[8]);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v1, 2);
  }
  v50 = *(_QWORD *)(v0 + 168);
  v51 = *(_QWORD *)(v0 + 176);
  v52 = *(_QWORD *)(v0 + 160);
  v53 = *(_QWORD **)(v0 + 128);
  v54 = v53[19];
  v55 = v53[20];
  sub_100007184(v53 + 16, v54);
  v56 = sub_10006D590(v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v51, enum case for HeadlineOrigin.topStories(_:), v52);
  *(_QWORD *)(v0 + 248) = dispatch thunk of NewsHeadlineServiceType.fetchHeadlines(for:origin:)(v56, v51, v54, v55);
  v57 = swift_bridgeObjectRelease(v56);
  (*(void (**)(uint64_t, uint64_t, __n128))(v50 + 8))(v51, v52, v57);
  v58 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  *(_QWORD *)(v0 + 256) = v58;
  *v58 = v0;
  v58[1] = sub_1000713F4;
  return Promise.resolveAsync()(v0 + 16);
}

uint64_t sub_1000713F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  v4 = v2[31];
  if (v0)
  {
    v5 = v2[30];
    v6 = v2[16];
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    v7 = sub_100071940;
    v8 = v6;
  }
  else
  {
    v9 = v2[16];
    swift_release(v4);
    v7 = sub_10007147C;
    v8 = v9;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_10007147C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  NSObject *log;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 120), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v47 = v5;
    log = v3;
    v45 = v0 + 72;
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v8 = swift_slowAlloc(22, -1);
    v46 = swift_slowAlloc(64, -1);
    v51 = v46;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 56) = sub_10007ECFC(v7, v6, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    v48 = (uint8_t *)v8;
    *(_WORD *)(v8 + 12) = 2080;
    v9 = *(_QWORD *)(v1 + 16);
    if (v9)
    {
      v50 = v0;
      v10 = *(_QWORD *)(v0 + 144);
      v52 = _swiftEmptyArrayStorage;
      sub_100073790(0, v9, 0);
      v44 = v1;
      v11 = v1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v12 = *(_QWORD *)(v10 + 72);
      v13 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
      do
      {
        v14 = *(_QWORD *)(v50 + 152);
        v15 = *(_QWORD *)(v50 + 136);
        v16 = v13(v14, v11, v15);
        v17 = Headline.title.getter(v16);
        v19 = v18;
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v15);
        v20 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        {
          sub_100073790(0, v20[2] + 1, 1);
          v20 = v52;
        }
        v22 = v20[2];
        v21 = v20[3];
        v23 = v22 + 1;
        if (v22 >= v21 >> 1)
        {
          sub_100073790(v21 > 1, v22 + 1, 1);
          v20 = v52;
        }
        v20[2] = v23;
        v24 = &v20[2 * v22];
        v24[4] = v17;
        v24[5] = v19;
        v11 += v12;
        --v9;
      }
      while (v9);
      v0 = v50;
      v1 = v44;
    }
    else
    {
      v20 = _swiftEmptyArrayStorage;
      v23 = _swiftEmptyArrayStorage[2];
      v26 = _swiftEmptyArrayStorage;
      if (!v23)
      {
LABEL_21:
        swift_bridgeObjectRelease(v20);
        *(_QWORD *)(v0 + 64) = v26;
        sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
        v34 = v33;
        v35 = sub_100075848();
        v36 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v34, v35);
        v38 = v37;
        swift_bridgeObjectRelease(v26);
        *(_QWORD *)(v0 + 72) = sub_10007ECFC(v36, v38, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v0 + 80, v48 + 14, v48 + 22);
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease_n(v1, 2);
        _os_log_impl((void *)&_mh_execute_header, log, v47, "Fetched mandatory headlines for symbol=%s headlines=[%s]", v48, 0x16u);
        swift_arrayDestroy(v46, 2, &type metadata for Any[8]);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v48, -1, -1);

        goto LABEL_22;
      }
    }
    swift_bridgeObjectRetain(v20);
    v27 = v20 + 5;
    v26 = _swiftEmptyArrayStorage;
    do
    {
      v29 = *v27;
      if (*v27)
      {
        v30 = *(v27 - 1);
        swift_bridgeObjectRetain(*v27);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
          v26 = sub_100073168(0, v26[2] + 1, 1, v26);
        v32 = v26[2];
        v31 = v26[3];
        if (v32 >= v31 >> 1)
          v26 = sub_100073168((_QWORD *)(v31 > 1), v32 + 1, 1, v26);
        v26[2] = v32 + 1;
        v28 = &v26[2 * v32];
        v28[4] = v30;
        v28[5] = v29;
      }
      v27 += 2;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease(v20);
    goto LABEL_21;
  }
  v25 = *(_QWORD *)(v0 + 120);

  swift_bridgeObjectRelease_n(v25, 2);
  swift_bridgeObjectRelease_n(v1, 2);
LABEL_22:
  v39 = *(_QWORD *)(v0 + 240);
  v40 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(v1);
  swift_retain(v40);
  v41 = sub_100075128(v39, v1);
  swift_release(v40);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease(v39);
  v42 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v41);
}

uint64_t sub_100071900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071940()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071980(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for HeadlineOrigin(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000719E0, v1, 0);
}

uint64_t sub_1000719E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v1 = v0[17];
  v0[22] = OBJC_IVAR____TtC12StocksWidget36WidgetConfigMandatoryHeadlineService_logger;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = v0[17];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v18 = v8;
    v0[15] = v6;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v10 = v9;
    v11 = sub_100075848();
    v12 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v10, v11);
    v14 = v13;
    v0[16] = sub_10007ECFC(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Fetching widget config record to determine mandatory headlines for symbols=[%s]", v7, 0xCu);
    swift_arrayDestroy(v8, 1, &type metadata for Any[8]);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v15 = v0[17];

    swift_bridgeObjectRelease_n(v15, 2);
  }
  v16 = (_QWORD *)swift_task_alloc(dword_1001151F4);
  v0[23] = v16;
  *v16 = v0;
  v16[1] = sub_100071BC4;
  return sub_1000667D0();
}

uint64_t sub_100071BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*v4 + 184);
  v6 = *v4;
  *(_QWORD *)(v6 + 192) = a2;
  *(_QWORD *)(v6 + 200) = a3;
  swift_task_dealloc(v5);
  if (!v3)
    return swift_task_switch(sub_100071C38, *(_QWORD *)(v6 + 144), 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 168));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100071C38()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;

  v2 = v0[17];
  v1 = (_QWORD *)v0[18];
  v3 = v1[24];
  v4 = v1[25];
  sub_100007184(v1 + 21, v3);
  v0[26] = FeedLookupServiceType.fetchFeedIDs(for:)(v2, v3, v4, v5);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[27] = v6;
  *v6 = v0;
  v6[1] = sub_100071CC8;
  return Promise.resolveAsync()(v0 + 4);
}

uint64_t sub_100071CC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  v4 = v2[26];
  if (v0)
  {
    v5 = v2[24];
    v6 = v2[25];
    v7 = v2[18];
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v8 = sub_100072628;
    v9 = v7;
  }
  else
  {
    v10 = v2[18];
    swift_release(v4);
    v8 = sub_100071D60;
    v9 = v10;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100071D60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  __n128 v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  __n128 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __n128 v63;
  __n128 v64;
  _QWORD *v65;
  uint64_t v67;
  os_log_type_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;

  v1 = v0[25];
  v2 = v0[4];
  swift_bridgeObjectRetain_n(v0[24], 2);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    v76 = v2;
    v7 = v0[25];
    v74 = v0[24];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v75 = (_QWORD *)swift_slowAlloc(32, -1);
    v78 = v75;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v7);
    sub_10006D664(v9);
    v11 = v10;
    swift_bridgeObjectRelease(v7);
    v0[13] = v11;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v13 = v12;
    v14 = sub_100075848();
    v15 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v13, v14);
    v17 = v16;
    swift_bridgeObjectRelease(v11);
    v0[14] = sub_10007ECFC(v15, v17, (uint64_t *)&v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v74, 2);
    v18 = v7;
    v2 = v76;
    swift_bridgeObjectRelease_n(v18, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Successfully fetched widget config record for symbolIDs=[%s]", v8, 0xCu);
    swift_arrayDestroy(v75, 1, &type metadata for Any[8]);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v19 = v0[24];
    v20 = v0[25];

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v20, 2);
  }
  v22 = v0[24];
  v21 = v0[25];
  v23 = v0[17];
  v24 = v0[18];
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v2);
  swift_retain(v24);
  sub_100074F24((uint64_t)&_swiftEmptyDictionarySingleton, v21, v2);
  v26 = v25;
  v0[29] = v25;
  swift_release(v24);
  swift_bridgeObjectRelease_n(v2, 2);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease_n(v21, 2);
  swift_bridgeObjectRetain(v26);
  sub_100072B60(v27);
  v29 = v28;
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRetain_n(v23, 2);
  v30 = swift_bridgeObjectRetain_n(v29, 2);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = os_log_type_enabled(v31, v33);
  v35 = v0[17];
  if (v34)
  {
    v36 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v77 = v37;
    *(_DWORD *)v36 = 136315394;
    v0[8] = v35;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v39 = v38;
    v72 = sub_100075848();
    v73 = v39;
    v40 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v39, v72);
    v42 = v41;
    v0[9] = sub_10007ECFC(v40, v41, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease_n(v35, 2);
    *(_WORD *)(v36 + 12) = 2080;
    v43 = *(_QWORD *)(v29 + 16);
    v44 = _swiftEmptyArrayStorage;
    if (v43)
    {
      v67 = v37;
      v68 = v33;
      v69 = v36;
      v70 = v31;
      v78 = _swiftEmptyArrayStorage;
      sub_100073774(0, v43, 0);
      v44 = v78;
      v45 = v78[2];
      v46 = 2 * v45;
      v71 = v29;
      v47 = (uint64_t *)(v29 + 40);
      do
      {
        v48 = *(v47 - 1);
        v49 = *v47;
        v78 = v44;
        v50 = v45 + 1;
        v51 = v44[3];
        swift_bridgeObjectRetain(v49);
        if (v45 >= v51 >> 1)
        {
          sub_100073774(v51 > 1, v50, 1);
          v44 = v78;
        }
        v44[2] = v50;
        v52 = &v44[v46];
        v52[4] = v48;
        v52[5] = v49;
        v46 += 2;
        v47 += 4;
        ++v45;
        --v43;
      }
      while (v43);
      v31 = v70;
      v29 = v71;
      v36 = v69;
      v33 = v68;
      v37 = v67;
    }
    v0[10] = v44;
    v53 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v73, v72);
    v55 = v54;
    swift_bridgeObjectRelease(v44);
    v0[11] = sub_10007ECFC(v53, v55, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease_n(v29, 2);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "Fetching all relevant headlines for symbols=[%s], headlineIDs=[%s]", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 2, &type metadata for Any[8]);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease_n(v29, 2);
  }
  v56 = v0[20];
  v57 = v0[21];
  v58 = (_QWORD *)v0[18];
  v59 = v0[19];
  v60 = v58[19];
  v61 = v58[20];
  sub_100007184(v58 + 16, v60);
  v62 = sub_10006D590(v29);
  v63 = swift_bridgeObjectRelease(v29);
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v56 + 104))(v57, enum case for HeadlineOrigin.topStories(_:), v59, v63);
  v0[30] = dispatch thunk of NewsHeadlineServiceType.fetchHeadlines(for:origin:)(v62, v57, v60, v61);
  v64 = swift_bridgeObjectRelease(v62);
  (*(void (**)(uint64_t, uint64_t, __n128))(v56 + 8))(v57, v59, v64);
  v65 = (_QWORD *)swift_task_alloc(async function pointer to Promise.resolveAsync()[1]);
  v0[31] = v65;
  *v65 = v0;
  v65[1] = sub_10007238C;
  return Promise.resolveAsync()(v0 + 2);
}

uint64_t sub_10007238C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v3);
  v4 = v2[30];
  if (v0)
  {
    v5 = v2[29];
    v6 = v2[18];
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    v7 = sub_10007265C;
    v8 = v6;
  }
  else
  {
    v9 = v2[18];
    swift_release(v4);
    v7 = sub_100072414;
    v8 = v9;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100072414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 16);
  swift_retain(v2);
  swift_bridgeObjectRetain(v4);
  v5 = sub_1000755EC(v1, v4, v2);
  swift_release(v2);
  swift_bridgeObjectRelease_n(v4, 2);
  swift_bridgeObjectRelease(v1);
  v6 = swift_bridgeObjectRetain_n(v3, 2);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = *(_QWORD *)(v0 + 136);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v21 = v12;
    *(_QWORD *)(v0 + 48) = v10;
    sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v14 = v13;
    v15 = sub_100075848();
    v16 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v14, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 56) = sub_10007ECFC(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease_n(v10, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Successfully fetched all relevant headlines for symbols=[%s]", v11, 0xCu);
    swift_arrayDestroy(v12, 1, &type metadata for Any[8]);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 136);

    swift_bridgeObjectRelease_n(v19, 2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_100072628()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007265C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100072690(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  _DWORD *v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  __n128 v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  NSObject *v41;
  unint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  _DWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  swift_bridgeObjectRetain_n(v5, 2);
  swift_bridgeObjectRetain(v7);
  v8 = sub_100074CC0(a3, v6, v5);
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease(v5);
  if (v10)
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v12);
    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRetain_n(v7, 2);
      v13 = swift_bridgeObjectRetain_n(v10, 2);
      v14 = Logger.logObject.getter(v13);
      v16 = static os_log_type_t.default.getter(v15);
      if (os_log_type_enabled(v14, v16))
      {
        v44 = v16;
        v46 = v8;
        v47 = a1;
        v17 = (_DWORD *)swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(64, -1);
        v50 = v43;
        v45 = v17;
        *v17 = 136315394;
        v18 = *(_QWORD *)(v7 + 16);
        v19 = _swiftEmptyArrayStorage;
        if (v18)
        {
          v41 = v14;
          v42 = v10;
          v48 = _swiftEmptyArrayStorage;
          sub_100073774(0, v18, 0);
          v19 = _swiftEmptyArrayStorage;
          v20 = (uint64_t *)(v7 + 40);
          do
          {
            v21 = *(v20 - 1);
            v22 = *v20;
            v48 = v19;
            v24 = v19[2];
            v23 = v19[3];
            swift_bridgeObjectRetain(v22);
            if (v24 >= v23 >> 1)
            {
              sub_100073774(v23 > 1, v24 + 1, 1);
              v19 = v48;
            }
            v20 += 4;
            v19[2] = v24 + 1;
            v25 = &v19[2 * v24];
            v25[4] = v21;
            v25[5] = v22;
            --v18;
          }
          while (v18);
          v14 = v41;
          v10 = v42;
        }
        sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
        v34 = v33;
        v35 = sub_100075848();
        v36 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v34, v35);
        v38 = v37;
        swift_bridgeObjectRelease(v19);
        v48 = (_QWORD *)sub_10007ECFC(v36, v38, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v45 + 1, v45 + 3);
        swift_bridgeObjectRelease_n(v7, 2);
        swift_bridgeObjectRelease(v38);
        *((_WORD *)v45 + 6) = 2080;
        swift_bridgeObjectRetain(v10);
        v8 = v46;
        v48 = (_QWORD *)sub_10007ECFC(v46, v10, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, (char *)v45 + 14, (char *)v45 + 22);
        swift_bridgeObjectRelease_n(v10, 3);
        _os_log_impl((void *)&_mh_execute_header, v14, v44, "Found relevant headlines for symbol, headlineIDs=[%s], symbol=%s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy(v43, 2, &type metadata for Any[8]);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v45, -1, -1);

        a1 = v47;
      }
      else
      {
        swift_bridgeObjectRelease_n(v10, 2);
        swift_bridgeObjectRelease_n(v7, 2);

      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v50 = *a1;
      *a1 = 0x8000000000000000;
      sub_100074394(v7, v8, v10, isUniquelyReferenced_nonNull_native);
      v40 = *a1;
      *a1 = v50;
      swift_bridgeObjectRelease(v10);
      v32 = v40;
    }
    else
    {
      swift_bridgeObjectRelease(v10);
      v32 = v7;
    }
    swift_bridgeObjectRelease(v32);
  }
  else
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRetain(v5);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v50 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_bridgeObjectRetain(v5);
      v48 = (_QWORD *)sub_10007ECFC(v6, v5, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "No symbol found matching feedID=%s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, &type metadata for Any[8]);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v5, 2);
    }

  }
}

void sub_100072B60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_23;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_23;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_23;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
    sub_10006D9E4(v10);
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100072CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  v8 = Headline.fcHeadline.getter(a1);
  v9 = swift_allocObject(&unk_100107060, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v16[4] = sub_100073134;
  v17 = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100072E50;
  v16[3] = &unk_100107078;
  v10 = _Block_copy(v16);
  v11 = v17;
  swift_unknownObjectRetain(v8);
  swift_bridgeObjectRetain(a3);
  swift_release(v11);
  v12 = (id)FCMutateHeadlineWithBlock(v8, v10);
  _Block_release(v10);
  swift_unknownObjectRelease(v8);
  if (v12)
  {
    Headline.copy(with:)(v12);
    swift_unknownObjectRelease(v8);
    v13 = (uint64_t)v12;
  }
  else
  {
    v14 = type metadata accessor for Headline(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a4, a1, v14);
    v13 = v8;
  }
  return swift_unknownObjectRelease(v13);
}

void sub_100072DFC(void *a1)
{
  NSString v2;

  if (a1)
  {
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setTitle:", v2);

  }
}

void sub_100072E50(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100072EA4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[14]);
  sub_100007164(v0 + 16);
  sub_100007164(v0 + 21);
  v1 = (char *)v0 + OBJC_IVAR____TtC12StocksWidget36WidgetConfigMandatoryHeadlineService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100072F08()
{
  return type metadata accessor for WidgetConfigMandatoryHeadlineService(0);
}

uint64_t type metadata accessor for WidgetConfigMandatoryHeadlineService(uint64_t a1)
{
  return sub_1000071F8(a1, (uint64_t *)&unk_100115820, (uint64_t)&nominal type descriptor for WidgetConfigMandatoryHeadlineService);
}

uint64_t sub_100072F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100072F38(a1, a2, a3, (uint64_t)&unk_1000DFE80, (uint64_t)&unk_1000DFE68);
}

uint64_t sub_100072F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[5];

  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a5;
  result = type metadata accessor for Logger(319);
  if (v7 <= 0x3F)
  {
    v8[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v8, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100072FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100115834);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100075C6C;
  return sub_1000709C8(a1, a2);
}

uint64_t sub_100073010(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10011583C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000F540;
  return sub_100071980(a1);
}

uint64_t sub_10007305C(uint64_t a1)
{
  uint64_t result;

  result = sub_100003D3C(&qword_100115900, type metadata accessor for WidgetConfigMandatoryHeadlineService, (uint64_t)&unk_1000DFF24);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100073098(uint64_t a1)
{
  uint64_t result;

  result = sub_100003D3C(&qword_100115918, type metadata accessor for TopStoriesMandatoryHeadlineService, (uint64_t)&unk_1000DFF68);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000730D4(uint64_t a1)
{
  uint64_t result;

  result = sub_100003D3C(&qword_100115930, type metadata accessor for MandatoryHeadlineService, (uint64_t)&unk_1000DFFAC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100073110()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100073134(void *a1)
{
  sub_100072DFC(a1);
}

uint64_t sub_10007313C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007314C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100073154(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007340C(a1, a2, a3, a4, &qword_100115978, type metadata accessor for PreparedSparkline.Entry);
}

_QWORD *sub_100073168(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000143C4(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000748C0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100073288(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000143C4(0, &qword_100115948, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100074BD0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000733A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007340C(a1, a2, a3, a4, &qword_100115968, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
}

uint64_t sub_1000733BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007340C(a1, a2, a3, a4, &qword_1001126C0, type metadata accessor for DetailTimelineEntry);
}

uint64_t sub_1000733D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007340C(a1, a2, a3, a4, &qword_100115960, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote);
}

uint64_t sub_1000733E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007340C(a1, a2, a3, a4, &qword_100115990, (uint64_t (*)(uint64_t))&type metadata accessor for Stock);
}

uint64_t sub_1000733F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10007340C(a1, a2, a3, a4, &qword_100115980, type metadata accessor for HeadlineViewModel);
}

uint64_t sub_10007340C(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v19 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000EDE8(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v14 = v13;
  v15 = *(_QWORD *)(a6(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v12, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_29;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v19[2] = v11;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_19:
  v22 = a6(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v25 = (unint64_t)v19 + v24;
  if ((a1 & 1) != 0)
  {
    v26 = a4 + v24;
    if ((unint64_t)v19 < a4 || v25 >= v26 + *(_QWORD *)(v23 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v19 + v24, v26, v11, v22);
    }
    else if (v19 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v19 + v24);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100075A0C(0, v11, v25, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v19;
}

_QWORD *sub_100073628(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000143C4(0, &qword_100115998, (uint64_t)&type metadata for Double, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100075B80(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073748(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100073CE0(a1, a2, a3, (_QWORD *)*v3, &qword_100115988, type metadata accessor for WidgetStock);
  *v3 = result;
  return result;
}

uint64_t sub_100073774(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100073820(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100073790(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10007399C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000737AC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100073CE0(a1, a2, a3, (_QWORD *)*v3, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
  *v3 = result;
  return result;
}

uint64_t sub_1000737D8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100073B34(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000737F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100073CE0(a1, a2, a3, (_QWORD *)*v3, &qword_100115990, (uint64_t (*)(uint64_t))&type metadata accessor for Stock);
  *v3 = result;
  return result;
}

uint64_t sub_100073820(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1000143C4(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007399C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_100075990(0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_1000143C4(0, &qword_100112EE0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100073B34(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1000143C4(0, &qword_100115970, (uint64_t)&type metadata for QuoteDetailItem, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100073CCC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100073CE0(a1, a2, a3, a4, &qword_1001126C0, type metadata accessor for DetailTimelineEntry);
}

uint64_t sub_100073CE0(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000EDE8(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v14 = v13;
  v15 = *(_QWORD *)(a6(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v12, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
    goto LABEL_34;
  v19[2] = v11;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_19:
  v22 = a6(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v25 = (char *)v19 + v24;
  v26 = (char *)a4 + v24;
  if ((a1 & 1) != 0)
  {
    if (v19 < a4 || v25 >= &v26[*(_QWORD *)(v23 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v25, v26, v11, v22);
    }
    else if (v19 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v27 = *(_QWORD *)(v23 + 72) * v11;
  v28 = &v25[v27];
  v29 = (unint64_t)&v26[v27];
  if (v26 >= v28 || (unint64_t)v25 >= v29)
  {
    swift_arrayInitWithCopy(v25);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v19;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100073ED0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  a3(0);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

void *sub_1000741E0(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100074394(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10002D24C(a2, a3);
  v14 = *(_QWORD *)(v10 + 16);
  v15 = (v11 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v11;
  v18 = *(_QWORD *)(v10 + 24);
  if (v18 >= v16 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    sub_1000741E0(sub_10007596C);
LABEL_7:
    v19 = (_QWORD *)*v5;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8 * v12));
      *(_QWORD *)(v20 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v19[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v19[7] + 8 * v12) = a1;
    v24 = v19[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v19[2] = v26;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100073ED0(v16, a4 & 1, sub_10007596C);
  v21 = sub_10002D24C(a2, a3);
  if ((v17 & 1) == (v22 & 1))
  {
    v12 = v21;
    v19 = (_QWORD *)*v5;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String, v13);
  __break(1u);
}

void (*sub_100074500(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(_QWORD *a1)
{
  uint64_t v10;
  uint64_t v11;
  void (*result)(_QWORD *);

  v10 = type metadata accessor for Headline(0);
  *a1 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  a1[1] = v11;
  result = (void (*)(_QWORD *))malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void))(v11 + 16))();
    return sub_1000745A4;
  }
  return result;
}

void sub_1000745A4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1000745D4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10007465C(_QWORD *a1, _QWORD *a2)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v33;

  v2 = 0;
  v5 = a1[8];
  result = (uint64_t)(a1 + 8);
  v4 = v5;
  v31 = result;
  v6 = 1 << *(_BYTE *)(result - 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v33 = (unint64_t)(v6 + 63) >> 6;
  v29 = a2 + 7;
  do
  {
    do
    {
LABEL_4:
      while (v8)
      {
        v9 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v10 = v9 | (v2 << 6);
        v11 = a2[2];
        if (v11)
          goto LABEL_23;
      }
      v12 = v2 + 1;
      if (__OFADD__(v2, 1))
        goto LABEL_42;
      if (v12 >= v33)
        return 0;
      v13 = *(_QWORD *)(v31 + 8 * v12);
      ++v2;
      if (!v13)
      {
        v2 = v12 + 1;
        if (v12 + 1 >= v33)
          return 0;
        v13 = *(_QWORD *)(v31 + 8 * v2);
        if (!v13)
        {
          v2 = v12 + 2;
          if (v12 + 2 >= v33)
            return 0;
          v13 = *(_QWORD *)(v31 + 8 * v2);
          if (!v13)
          {
            v2 = v12 + 3;
            if (v12 + 3 >= v33)
              return 0;
            v13 = *(_QWORD *)(v31 + 8 * v2);
            if (!v13)
            {
              v14 = v12 + 4;
              if (v14 >= v33)
                return 0;
              v13 = *(_QWORD *)(v31 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  v2 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_43;
                  if (v2 >= v33)
                    return 0;
                  v13 = *(_QWORD *)(v31 + 8 * v2);
                  ++v14;
                  if (v13)
                    goto LABEL_22;
                }
              }
              v2 = v14;
            }
          }
        }
      }
LABEL_22:
      v8 = (v13 - 1) & v13;
      v10 = __clz(__rbit64(v13)) + (v2 << 6);
      v11 = a2[2];
    }
    while (!v11);
LABEL_23:
    v15 = (uint64_t *)(a1[6] + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v30 = *(_QWORD *)(a1[7] + 8 * v10);
    v18 = a2;
    v19 = a2[4];
    v20 = a2[5];
    v21 = v19 == *v15 && v20 == v17;
    if (v21
      || (v22 = v2, result = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v16, v17, 0), (result & 1) != 0))
    {
LABEL_38:
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v30);
      return v16;
    }
    a2 = v18;
    v2 = v22;
  }
  while (v11 == 1);
  v23 = v29;
  v24 = 1;
  while (1)
  {
    v25 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    v26 = *(v23 - 1);
    v27 = *v23;
    if (v26 == v16 && v27 == v17)
      goto LABEL_38;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v16, v17, 0);
    if ((result & 1) != 0)
      goto LABEL_38;
    v23 += 2;
    ++v24;
    if (v25 == v11)
    {
      a2 = v18;
      v2 = v22;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000748C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_1000749B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v29 = a2;
  v30 = a3;
  v25 = type metadata accessor for Headline(0);
  v7 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - v11;
  v31 = _swiftEmptyArrayStorage;
  v27 = *(_QWORD *)(a1 + 16);
  if (v27)
  {
    v13 = 0;
    v23 = a4;
    v24 = a1;
    v14 = v25;
    while (v13 < *(_QWORD *)(a1 + 16))
    {
      v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v16 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v12, a1 + v15 + v16 * v13, v14, v10);
      v17 = sub_10006F50C((uint64_t)v12, v29, v30, a4);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v14);
        swift_bridgeObjectRelease(a1);
        swift_release(v31);
        return;
      }
      if ((v17 & 1) != 0)
      {
        v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v26(v28, v12, v14);
        v18 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        {
          sub_1000737AC(0, v18[2] + 1, 1);
          v18 = v31;
        }
        v20 = v18[2];
        v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000737AC(v19 > 1, v20 + 1, 1);
          v18 = v31;
        }
        v18[2] = v20 + 1;
        v21 = (unint64_t)v18 + v15 + v20 * v16;
        v22 = v25;
        v26((char *)v21, v28, v25);
        v31 = v18;
        v14 = v22;
        a4 = v23;
        a1 = v24;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v14);
      }
      if (v27 == ++v13)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_100074BD0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100074CC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  v5 = 0;
  v29 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v30 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
LABEL_4:
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v5 << 6);
    }
    else
    {
      v11 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_41;
      if (v11 >= v30)
        return 0;
      v12 = *(_QWORD *)(v29 + 8 * v11);
      ++v5;
      if (!v12)
      {
        v5 = v11 + 1;
        if (v11 + 1 >= v30)
          return 0;
        v12 = *(_QWORD *)(v29 + 8 * v5);
        if (!v12)
        {
          v5 = v11 + 2;
          if (v11 + 2 >= v30)
            return 0;
          v12 = *(_QWORD *)(v29 + 8 * v5);
          if (!v12)
          {
            v5 = v11 + 3;
            if (v11 + 3 >= v30)
              return 0;
            v12 = *(_QWORD *)(v29 + 8 * v5);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v13 >= v30)
                return 0;
              v12 = *(_QWORD *)(v29 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v5 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_42;
                  if (v5 >= v30)
                    return 0;
                  v12 = *(_QWORD *)(v29 + 8 * v5);
                  ++v13;
                  if (v12)
                    goto LABEL_21;
                }
              }
              v5 = v13;
            }
          }
        }
      }
LABEL_21:
      v8 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v5 << 6);
    }
    v14 = *(_QWORD **)(*(_QWORD *)(result + 56) + 8 * v10);
    v15 = v14[2];
    if (v15)
    {
      v31 = v5;
      v16 = result;
      v17 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v10);
      v27 = v17[1];
      v28 = *v17;
      v18 = v14[4];
      v19 = v14[5];
      v20 = v18 == a2 && v19 == a3;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a2, a3, 0) & 1) != 0)
      {
LABEL_38:
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v14);
        return v28;
      }
      result = v16;
      v5 = v31;
      if (v15 != 1)
        break;
    }
  }
  v21 = v14 + 7;
  v22 = 1;
  while (1)
  {
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    v24 = *(v21 - 1);
    v25 = *v21;
    if (v24 == a2 && v25 == a3)
      goto LABEL_38;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a2, a3, 0);
    if ((result & 1) != 0)
      goto LABEL_38;
    v21 += 2;
    ++v22;
    if (v23 == v15)
    {
      result = v16;
      v5 = v31;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_100074F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21[3];
  uint64_t v22;

  v22 = a1;
  v6 = a2 + 64;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 64);
  v20 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v10 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v17 = v16[1];
    v18 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v21[0] = *v16;
    v21[1] = v17;
    v21[2] = v18;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    sub_100072690(&v22, v21, a3);
    if (v3)
    {
      v19 = v22;
      swift_release(a2);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v19);
      return;
    }
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v20)
      goto LABEL_26;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    if (!v14)
      break;
LABEL_17:
    v9 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v20)
    goto LABEL_26;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 2;
  if (v10 + 2 >= v20)
    goto LABEL_26;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 3;
  if (v10 + 3 >= v20)
    goto LABEL_26;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 4;
  if (v10 + 4 >= v20)
  {
LABEL_26:
    swift_release(a2);
    return;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v20)
      goto LABEL_26;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_100075128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  void (*v45)(char *, char *, uint64_t, __n128);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  sub_10000EDE8(0, &qword_100115938, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - v5;
  v69 = type metadata accessor for Headline(0);
  v7 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v65 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - v10;
  __chkstk_darwin(v12);
  v57 = (char *)&v55 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - v15;
  __chkstk_darwin(v17);
  v58 = (char *)&v55 - v18;
  v64 = *(_QWORD *)(a1 + 16);
  if (!v64)
    return _swiftEmptyArrayStorage;
  v63 = a1 + 32;
  v19 = *(_QWORD *)(a2 + 16);
  v55 = a1;
  swift_bridgeObjectRetain(a1);
  v20 = 0;
  v21 = _swiftEmptyArrayStorage;
  v22 = v69;
  v62 = v19;
  v59 = v6;
  v60 = a2;
  v56 = v16;
  do
  {
    v68 = v20;
    v23 = (uint64_t *)(v63 + 32 * v20);
    v24 = v23[1];
    v25 = v23[3];
    if (v19)
    {
      v66 = v21;
      v67 = v25;
      v26 = *v23;
      v61 = v23[2];
      v27 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(a2);
      v28 = v7;
      v29 = *(_QWORD *)(v7 + 72);
      v30 = v28;
      v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
      v32 = swift_bridgeObjectRetain(v24);
      v33 = v19;
      v70 = v24;
      while (1)
      {
        v34 = v31(v11, v27, v22, v32);
        v35 = Headline.identifier.getter(v34);
        v37 = v36;
        if (v35 == v26 && v36 == v24)
        {
          a2 = v60;
          swift_bridgeObjectRelease(v60);
          v42 = v24;
          goto LABEL_16;
        }
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v26, v24, 0);
        v39 = swift_bridgeObjectRelease(v37);
        if ((v38 & 1) != 0)
          break;
        v22 = v69;
        (*(void (**)(char *, uint64_t, __n128))(v30 + 8))(v11, v69, v39);
        v27 += v29;
        --v33;
        v24 = v70;
        if (!v33)
        {
          a2 = v60;
          v40 = swift_bridgeObjectRelease(v60);
          v6 = v59;
          v7 = v30;
          v21 = v66;
          v41 = v67;
          goto LABEL_13;
        }
      }
      a2 = v60;
      v42 = v60;
LABEL_16:
      v6 = v59;
      v7 = v30;
      v43 = (uint64_t)v56;
      v21 = v66;
      v44 = swift_bridgeObjectRelease(v42);
      v45 = *(void (**)(char *, char *, uint64_t, __n128))(v7 + 32);
      v46 = v57;
      v47 = v69;
      v45(v57, v11, v69, v44);
      ((void (*)(uint64_t, char *, uint64_t))v45)(v43, v46, v47);
      if (v67)
      {
        v48 = v67;
        sub_100072CCC(v43, v61, v67, (uint64_t)v6);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v43, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v47);
        swift_bridgeObjectRelease(v48);
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t))v45)(v6, v43, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v47);
      }
      v22 = v47;
      v24 = v70;
    }
    else
    {
      v41 = v23[3];
      swift_bridgeObjectRetain(v25);
      v40 = swift_bridgeObjectRetain(v24);
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(v6, 1, 1, v22, v40);
      swift_bridgeObjectRelease(v41);
    }
    v49 = swift_bridgeObjectRelease(v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v7 + 48))(v6, 1, v22, v49) == 1)
    {
      sub_100075918((uint64_t)v6);
    }
    else
    {
      v50 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v51 = v58;
      v50(v58, v6, v22);
      v50(v65, v51, v22);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        v21 = (_QWORD *)sub_10007340C(0, v21[2] + 1, 1, (unint64_t)v21, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
      v53 = v21[2];
      v52 = v21[3];
      if (v53 >= v52 >> 1)
        v21 = (_QWORD *)sub_10007340C(v52 > 1, v53 + 1, 1, (unint64_t)v21, &qword_100115940, (uint64_t (*)(uint64_t))&type metadata accessor for Headline);
      v21[2] = v53 + 1;
      v22 = v69;
      v50((char *)v21+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v53, v65, v69);
    }
    v20 = v68 + 1;
    v19 = v62;
  }
  while (v68 + 1 != v64);
  swift_bridgeObjectRelease(v55);
  return v21;
}

uint64_t sub_1000755EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  BOOL v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  sub_10002D5F0(0);
  result = static _DictionaryStorage.copy(original:)(a1);
  v5 = 0;
  v26 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v24 = (unint64_t)(v9 + 63) >> 6;
  v25 = result + 64;
  v29 = (_QWORD *)result;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v30 = (v11 - 1) & v11;
  v31 = v5;
  for (i = __clz(__rbit64(v11)) | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v14 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
    v18 = v17[1];
    v32 = *v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * i);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(a2);
    swift_retain(a3);
    v20 = sub_100075128(v19, a2);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(a2);
    swift_release(a3);
    *(_QWORD *)(v25 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = (uint64_t)v29;
    v21 = (_QWORD *)(v29[6] + 16 * i);
    *v21 = v32;
    v21[1] = v18;
    *(_QWORD *)(v29[7] + 8 * i) = v20;
    v22 = v29[2];
    v13 = __OFADD__(v22, 1);
    v23 = v22 + 1;
    if (v13)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v29[2] = v23;
    v11 = v30;
    v5 = v31;
    if (v30)
      goto LABEL_4;
LABEL_5:
    v13 = __OFADD__(v5, 1);
    v14 = v5 + 1;
    if (v13)
      goto LABEL_25;
    if (v14 >= v24)
      return result;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    if (!v15)
      break;
LABEL_15:
    v30 = (v15 - 1) & v15;
    v31 = v14;
  }
  v16 = v14 + 1;
  if (v14 + 1 >= v24)
    return result;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v14 + 2;
  if (v14 + 2 >= v24)
    return result;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_14;
  v16 = v14 + 3;
  if (v14 + 3 >= v24)
    return result;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_14:
    v14 = v16;
    goto LABEL_15;
  }
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v24)
      return result;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_100075848()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100112188;
  if (!qword_100112188)
  {
    sub_1000143C4(255, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100112188);
  }
  return result;
}

void sub_1000758A8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a5(255, a3, a4, &type metadata accessor for Array);
    v8 = type metadata accessor for _DictionaryStorage(a1, &type metadata for String, v7, &protocol witness table for String);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_100075918(uint64_t a1)
{
  uint64_t v2;

  sub_10000EDE8(0, &qword_100115938, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10007596C(uint64_t a1)
{
  sub_1000758A8(a1, &qword_100115950, (uint64_t)&qword_100115028, (uint64_t)&type metadata for WidgetSectionConfigRecord.SymbolConfiguration.Article, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))sub_1000143C4);
}

void sub_100075990(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100115958)
  {
    sub_1000143C4(255, &qword_100112EE0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100115958);
  }
}

uint64_t sub_1000759FC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100075A0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100075B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000EDE8(0, &qword_100115938, (uint64_t (*)(uint64_t))&type metadata accessor for Headline, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *sub_100075B80(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_100075C70(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  unsigned int (*v14)(uint64_t *, uint64_t, int *, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v9;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v10 = a2[13];
    v11 = a3[10];
    __dst = (uint64_t *)(a1 + v11);
    v12 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v10;
    v13 = (int *)type metadata accessor for PreparedSparkline(0);
    v53 = *((_QWORD *)v13 - 1);
    v14 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v53 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v15 = swift_bridgeObjectRetain(v10);
    if (v14(v12, 1, v13, v15))
    {
      sub_10002FCAC(0);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v18 = *v12;
      *__dst = *v12;
      v19 = v13[5];
      v20 = (char *)__dst + v19;
      v21 = (char *)v12 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 16);
      v24 = swift_bridgeObjectRetain(v18);
      v23(v20, v21, v22, v24);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v23)(&v20[*(int *)(v25 + 36)], &v21[*(int *)(v25 + 36)], v22);
      v26 = v13[6];
      v27 = (char *)__dst + v26;
      v28 = (char *)v12 + v26;
      v29 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      *(_OWORD *)((char *)__dst + v13[7]) = *(_OWORD *)((char *)v12 + v13[7]);
      v30 = v13[8];
      v31 = (char *)__dst + v30;
      v32 = (char *)v12 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *((_BYTE *)__dst + v13[9]) = *((_BYTE *)v12 + v13[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v53 + 56))(__dst, 0, 1, v13);
    }
    v33 = a3[11];
    v34 = a3[12];
    v35 = (char *)v4 + v33;
    v36 = (uint64_t)a2 + v33;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = *(_BYTE *)(v36 + 8);
    v38 = *(_QWORD *)(v36 + 24);
    v37 = *(_QWORD *)(v36 + 32);
    *((_QWORD *)v35 + 3) = v38;
    *((_QWORD *)v35 + 4) = v37;
    v35[40] = *(_BYTE *)(v36 + 40);
    v35[56] = *(_BYTE *)(v36 + 56);
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v36 + 16);
    *((_QWORD *)v35 + 6) = *(_QWORD *)(v36 + 48);
    v39 = (char *)v4 + v34;
    v40 = (char *)a2 + v34;
    v41 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v41 - 8);
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v42 + 48);
    v44 = swift_bridgeObjectRetain(v38);
    if (v43(v40, 1, v41, v44))
    {
      sub_100075FE0(0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v46 = a3[13];
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for WidgetQuote(0);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      sub_10001D694(0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
  }
  return v4;
}

void sub_100075FE0(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100116670, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

uint64_t sub_100075FFC(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = (_QWORD *)((char *)a1 + a2[10]);
  v5 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease(*v4);
    v6 = (char *)v4 + *(int *)(v5 + 20);
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v6, v7);
    sub_100022800(0);
    v8(&v6[*(int *)(v9 + 36)], v7);
    v10 = (char *)v4 + *(int *)(v5 + 24);
    v11 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11] + 24));
  v12 = (char *)a1 + a2[12];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  v15 = (char *)a1 + a2[13];
  v16 = type metadata accessor for WidgetQuote(0);
  v17 = *(_QWORD *)(v16 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  return result;
}

uint64_t sub_10007619C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int *v12;
  unsigned int (*v13)(uint64_t *, uint64_t, int *, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(const void *, uint64_t, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 104);
  v10 = a3[10];
  __dst = (uint64_t *)(a1 + v10);
  v11 = (uint64_t *)(a2 + v10);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v12 = (int *)type metadata accessor for PreparedSparkline(0);
  v51 = *((_QWORD *)v12 - 1);
  v13 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v51 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v14 = swift_bridgeObjectRetain(v9);
  if (v13(v11, 1, v12, v14))
  {
    sub_10002FCAC(0);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = *v11;
    *__dst = *v11;
    v17 = v12[5];
    v18 = (char *)__dst + v17;
    v19 = (char *)v11 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
    v22 = swift_bridgeObjectRetain(v16);
    v21(v18, v19, v20, v22);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v21)(&v18[*(int *)(v23 + 36)], &v19[*(int *)(v23 + 36)], v20);
    v24 = v12[6];
    v25 = (char *)__dst + v24;
    v26 = (char *)v11 + v24;
    v27 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    *(_OWORD *)((char *)__dst + v12[7]) = *(_OWORD *)((char *)v11 + v12[7]);
    v28 = v12[8];
    v29 = (char *)__dst + v28;
    v30 = (char *)v11 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *((_BYTE *)__dst + v12[9]) = *((_BYTE *)v11 + v12[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v51 + 56))(__dst, 0, 1, v12);
  }
  v31 = a3[11];
  v32 = a3[12];
  v33 = a1 + v31;
  v34 = a2 + v31;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  v36 = *(_QWORD *)(v34 + 24);
  v35 = *(_QWORD *)(v34 + 32);
  *(_QWORD *)(v33 + 24) = v36;
  *(_QWORD *)(v33 + 32) = v35;
  *(_BYTE *)(v33 + 40) = *(_BYTE *)(v34 + 40);
  *(_BYTE *)(v33 + 56) = *(_BYTE *)(v34 + 56);
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  *(_QWORD *)(v33 + 48) = *(_QWORD *)(v34 + 48);
  v37 = (void *)(a1 + v32);
  v38 = (const void *)(a2 + v32);
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v40 + 48);
  v42 = swift_bridgeObjectRetain(v36);
  if (v41(v38, 1, v39, v42))
  {
    sub_100075FE0(0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v44 = a3[13];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  v47 = type metadata accessor for WidgetQuote(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    sub_10001D694(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  return a1;
}

uint64_t sub_1000764DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  char *v88;
  int *v89;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[10];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = (int *)type metadata accessor for PreparedSparkline(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      v25 = *v19;
      *v18 = *v19;
      v26 = v20[5];
      v88 = (char *)v18 + v26;
      v27 = (char *)v19 + v26;
      v89 = a3;
      v28 = type metadata accessor for Date(0);
      v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
      v30 = swift_bridgeObjectRetain(v25);
      v29(v88, v27, v28, v30);
      sub_100022800(0);
      v32 = v28;
      a3 = v89;
      ((void (*)(char *, char *, uint64_t))v29)(&v88[*(int *)(v31 + 36)], &v27[*(int *)(v31 + 36)], v32);
      v33 = v20[6];
      v34 = (char *)v18 + v33;
      v35 = (char *)v19 + v33;
      v36 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      *(_OWORD *)((char *)v18 + v20[7]) = *(_OWORD *)((char *)v19 + v20[7]);
      v37 = v20[8];
      v38 = (char *)v18 + v37;
      v39 = (char *)v19 + v37;
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v40;
      *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_10001DF70((uint64_t)v18, type metadata accessor for PreparedSparkline);
LABEL_6:
    sub_10002FCAC(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_7;
  }
  v69 = *v19;
  v70 = *v18;
  *v18 = *v19;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  v71 = v20[5];
  v72 = (char *)v18 + v71;
  v73 = (char *)v19 + v71;
  v74 = type metadata accessor for Date(0);
  v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 24);
  v75(v72, v73, v74);
  sub_100022800(0);
  v75(&v72[*(int *)(v76 + 36)], &v73[*(int *)(v76 + 36)], v74);
  v77 = v20[6];
  v78 = (char *)v18 + v77;
  v79 = (char *)v19 + v77;
  v80 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 24))(v78, v79, v80);
  v81 = v20[7];
  v82 = (_QWORD *)((char *)v18 + v81);
  v83 = (_QWORD *)((char *)v19 + v81);
  *v82 = *v83;
  v82[1] = v83[1];
  v84 = v20[8];
  v85 = (char *)v18 + v84;
  v86 = (char *)v19 + v84;
  v87 = v86[8];
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v85[8] = v87;
  *((_BYTE *)v18 + v20[9]) = *((_BYTE *)v19 + v20[9]);
LABEL_7:
  v42 = a3[11];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_QWORD *)(a2 + v42);
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_QWORD *)v43 = v45;
  *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
  v46 = *(_QWORD *)(v44 + 24);
  v47 = *(_QWORD *)(v43 + 24);
  *(_QWORD *)(v43 + 24) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = *(_QWORD *)(v44 + 32);
  *(_BYTE *)(v43 + 40) = *(_BYTE *)(v44 + 40);
  *(_QWORD *)(v43 + 32) = v48;
  v49 = *(_QWORD *)(v44 + 48);
  *(_BYTE *)(v43 + 56) = *(_BYTE *)(v44 + 56);
  *(_QWORD *)(v43 + 48) = v49;
  v50 = a3[12];
  v51 = (void *)(a1 + v50);
  v52 = (void *)(a2 + v50);
  v53 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, void *, uint64_t))(v54 + 16))(v51, v52, v53);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v54 + 8))(v51, v53);
LABEL_12:
    sub_100075FE0(0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v54 + 24))(v51, v52, v53);
LABEL_13:
  v59 = a3[13];
  v60 = (void *)(a1 + v59);
  v61 = (void *)(a2 + v59);
  v62 = type metadata accessor for WidgetQuote(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 24))(v60, v61, v62);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v63 + 8))(v60, v62);
    goto LABEL_18;
  }
  if (v66)
  {
LABEL_18:
    sub_10001D694(0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 16))(v60, v61, v62);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
  return a1;
}

uint64_t sub_100076A0C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v43;

  v3 = a3;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = a3[10];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v10 = (int *)type metadata accessor for PreparedSparkline(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    sub_10002FCAC(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v13 = v10[5];
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = type metadata accessor for Date(0);
    v43 = v3;
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
    v17(v14, v15, v16);
    sub_100022800(0);
    v17(&v14[*(int *)(v18 + 36)], &v15[*(int *)(v18 + 36)], v16);
    v3 = v43;
    v19 = v10[6];
    v20 = (char *)v8 + v19;
    v21 = (char *)v9 + v19;
    v22 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
    *(_OWORD *)((char *)v8 + v10[7]) = *(_OWORD *)((char *)v9 + v10[7]);
    v23 = v10[8];
    v24 = (char *)v8 + v23;
    v25 = (char *)v9 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *((_BYTE *)v8 + v10[9]) = *((_BYTE *)v9 + v10[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  }
  v26 = v3[11];
  v27 = v3[12];
  v28 = (_OWORD *)(a1 + v26);
  v29 = (_OWORD *)(a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v28[2] = v29[2];
  *(_OWORD *)((char *)v28 + 41) = *(_OWORD *)((char *)v29 + 41);
  v31 = (void *)(a1 + v27);
  v32 = (const void *)(a2 + v27);
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    sub_100075FE0(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v36 = v3[13];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  v39 = type metadata accessor for WidgetQuote(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_10001D694(0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  return a1;
}

uint64_t sub_100076CDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, int *);
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int *v79;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a3[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      *v17 = *v18;
      v24 = v19[5];
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      v79 = a3;
      v27 = type metadata accessor for Date(0);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      sub_100022800(0);
      v30 = v27;
      a3 = v79;
      v28(&v25[*(int *)(v29 + 36)], &v26[*(int *)(v29 + 36)], v30);
      v31 = v19[6];
      v32 = (char *)v17 + v31;
      v33 = (char *)v18 + v31;
      v34 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
      v35 = v19[8];
      v36 = (char *)v17 + v35;
      v37 = (char *)v18 + v35;
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_10001DF70((uint64_t)v17, type metadata accessor for PreparedSparkline);
LABEL_6:
    sub_10002FCAC(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  v63 = *v17;
  *v17 = *v18;
  swift_bridgeObjectRelease(v63);
  v64 = v19[5];
  v65 = (char *)v17 + v64;
  v66 = (char *)v18 + v64;
  v67 = a3;
  v68 = type metadata accessor for Date(0);
  v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 40);
  v69(v65, v66, v68);
  sub_100022800(0);
  v71 = v68;
  a3 = v67;
  v69(&v65[*(int *)(v70 + 36)], &v66[*(int *)(v70 + 36)], v71);
  v72 = v19[6];
  v73 = (char *)v17 + v72;
  v74 = (char *)v18 + v72;
  v75 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 40))(v73, v74, v75);
  *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
  v76 = v19[8];
  v77 = (char *)v17 + v76;
  v78 = (char *)v18 + v76;
  v77[8] = v78[8];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
LABEL_7:
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  *(_QWORD *)v40 = *(_QWORD *)(a2 + v39);
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(a2 + v39 + 8);
  v42 = *(_QWORD *)(a2 + v39 + 24);
  v43 = *(_QWORD *)(a1 + v39 + 24);
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(a2 + v39 + 16);
  *(_QWORD *)(v40 + 24) = v42;
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  *(_BYTE *)(v40 + 40) = *(_BYTE *)(v41 + 40);
  *(_QWORD *)(v40 + 48) = *(_QWORD *)(v41 + 48);
  *(_BYTE *)(v40 + 56) = *(_BYTE *)(v41 + 56);
  v44 = a3[12];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  v47 = type metadata accessor for URL(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
LABEL_12:
    sub_100075FE0(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v45, v46, v47);
LABEL_13:
  v53 = a3[13];
  v54 = (void *)(a1 + v53);
  v55 = (void *)(a2 + v53);
  v56 = type metadata accessor for WidgetQuote(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, void *, uint64_t))(v57 + 40))(v54, v55, v56);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v57 + 8))(v54, v56);
    goto LABEL_18;
  }
  if (v60)
  {
LABEL_18:
    sub_10001D694(0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v57 + 32))(v54, v55, v56);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t sub_10007718C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077198);
}

uint64_t sub_100077198(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_10002FCAC(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[10];
    }
    else
    {
      sub_100075FE0(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[12];
      }
      else
      {
        sub_10001D694(0);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[13];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10007725C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100077268);
}

uint64_t sub_100077268(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    sub_10002FCAC(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      sub_100075FE0(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[12];
      }
      else
      {
        sub_10001D694(0);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[13];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for TickerCellViewModel(uint64_t a1)
{
  return sub_1000071F8(a1, qword_1001159F8, (uint64_t)&nominal type descriptor for TickerCellViewModel);
}

void sub_10007733C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  v8[0] = &unk_1000E0018;
  v8[1] = &unk_1000E0030;
  v8[2] = &unk_1000E0048;
  v8[3] = &unk_1000E0030;
  v8[4] = &unk_1000E0060;
  v8[5] = &unk_1000E0078;
  sub_10002FCAC(319);
  if (v3 <= 0x3F)
  {
    v8[6] = *(_QWORD *)(v2 - 8) + 64;
    v8[7] = &unk_1000E0090;
    sub_100075FE0(319);
    if (v5 <= 0x3F)
    {
      v8[8] = *(_QWORD *)(v4 - 8) + 64;
      sub_10001D694(319);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100077418@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  int *v40;
  uint64_t v41;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v54;
  uint64_t v55;
  int v56;

  v56 = a1;
  sub_10001D694(0);
  __chkstk_darwin(v3);
  v5 = &v43[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075FE0(0);
  __chkstk_darwin(v6);
  v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002FCAC(0);
  __chkstk_darwin(v9);
  v11 = &v43[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = UUID.init()(v16);
  v18 = UUID.uuidString.getter(v17);
  v54 = v19;
  v55 = v18;
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  v21 = String.init(repeating:count:)(v20, 3);
  object = v21._object;
  countAndFlagsBits = v21._countAndFlagsBits;
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  v23 = String.init(repeating:count:)(v22, 5);
  v50 = v23._object;
  v51 = v23._countAndFlagsBits;
  v24._countAndFlagsBits = 46;
  v24._object = (void *)0xE100000000000000;
  v25 = String.init(repeating:count:)(v24, 9);
  v48 = v25._object;
  v49 = v25._countAndFlagsBits;
  sub_100068E94((uint64_t)v11);
  v26 = type metadata accessor for PreparedSparkline(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v11, 0, 1, v26);
  v47 = qword_100116B10;
  v46 = byte_100116B18;
  v27 = unk_100116B28;
  v45 = qword_100116B20;
  v28 = qword_100116B30;
  v29 = byte_100116B38;
  v30 = qword_100116B40;
  v44 = byte_100116B48;
  v31 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
  v32 = qword_1001114E0;
  swift_bridgeObjectRetain(v27);
  if (v32 != -1)
    swift_once(&qword_1001114E0, sub_10005F7F0);
  v33 = type metadata accessor for WidgetQuote(0);
  v34 = sub_100012524(v33, (uint64_t)qword_1001268E0);
  v35 = *(_QWORD *)(v33 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v35 + 16))(v5, v34, v33);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v5, 0, 1, v33);
  *(_BYTE *)a2 = v56;
  v36 = v54;
  *(_QWORD *)(a2 + 8) = v55;
  *(_QWORD *)(a2 + 16) = v36;
  v37 = object;
  *(_QWORD *)(a2 + 24) = countAndFlagsBits;
  *(_QWORD *)(a2 + 32) = v37;
  v38 = v50;
  *(_QWORD *)(a2 + 40) = v51;
  *(_QWORD *)(a2 + 48) = v38;
  v39 = v48;
  *(_QWORD *)(a2 + 56) = v49;
  *(_QWORD *)(a2 + 64) = v39;
  *(_BYTE *)(a2 + 72) = 2;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 1;
  v40 = (int *)type metadata accessor for TickerCellViewModel(0);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  sub_10000ED3C((uint64_t)v11, a2 + v40[10], (uint64_t (*)(_QWORD))sub_10002FCAC);
  v41 = a2 + v40[11];
  *(_QWORD *)v41 = v47;
  *(_BYTE *)(v41 + 8) = v46;
  *(_QWORD *)(v41 + 16) = v45;
  *(_QWORD *)(v41 + 24) = v27;
  *(_QWORD *)(v41 + 32) = v28;
  *(_BYTE *)(v41 + 40) = v29;
  *(_QWORD *)(v41 + 48) = v30;
  *(_BYTE *)(v41 + 56) = v44;
  sub_10000ED3C((uint64_t)v8, a2 + v40[12], (uint64_t (*)(_QWORD))sub_100075FE0);
  return sub_10000ED3C((uint64_t)v5, a2 + v40[13], (uint64_t (*)(_QWORD))sub_10001D694);
}

uint64_t sub_100077768@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100077774@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  double v33;
  char v34;
  char v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _OWORD *v55;
  __int128 v56;
  _BYTE v58[12];
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  int v71;
  _BYTE *v72;
  _OWORD v73[2];
  _OWORD v74[2];

  v71 = a2;
  sub_100075FE0(0);
  __chkstk_darwin(v5);
  v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002FCAC(0);
  __chkstk_darwin(v8);
  v69 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001D694(0);
  __chkstk_darwin(v10);
  v70 = &v58[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v58[-v13];
  v15 = type metadata accessor for WidgetStock(0);
  v16 = __chkstk_darwin(v15);
  v18 = &v58[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = Stock.identifier.getter(v16);
  v67 = v20;
  v68 = v19;
  v21 = sub_10001DE2C(a1, (uint64_t)v18, type metadata accessor for WidgetStock);
  v22 = Stock.compactName.getter(v21);
  v65 = v23;
  v66 = v22;
  v24 = Stock.shortName.getter();
  v63 = v25;
  v64 = v24;
  v26 = sub_10001DF70((uint64_t)v18, type metadata accessor for WidgetStock);
  v27 = Stock.name.getter(v26);
  v61 = v28;
  v29 = a1 + *(int *)(v15 + 20);
  sub_10001DE2C(v29, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_10001D694);
  v30 = type metadata accessor for WidgetQuote(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v30);
  v72 = v7;
  v62 = v27;
  if (v32 == 1)
  {
    sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_10001D694);
LABEL_6:
    v36 = 2;
    goto LABEL_7;
  }
  v33 = COERCE_DOUBLE(WidgetQuote.priceChange.getter());
  v35 = v34;
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v14, v30);
  if ((v35 & 1) != 0)
    goto LABEL_6;
  if (v33 >= 0.0)
  {
    v59 = 0;
    goto LABEL_8;
  }
  v36 = 1;
LABEL_7:
  v59 = v36;
LABEL_8:
  v37 = sub_1000B57BC();
  v39 = v38;
  v41 = v40;
  v60 = v42;
  v43 = v69;
  sub_10001DE2C(a1 + *(int *)(v15 + 24), (uint64_t)v69, (uint64_t (*)(_QWORD))sub_10002FCAC);
  sub_10001DE2C(a1, (uint64_t)v18, type metadata accessor for WidgetStock);
  v44 = sub_10009BBA8((uint64_t)v18, (uint64_t)v73);
  v45 = (uint64_t)v72;
  Stock.universalLinkURL.getter(v44);
  v46 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
  v47 = v29;
  v48 = v70;
  sub_10001DE2C(v47, (uint64_t)v70, (uint64_t (*)(_QWORD))sub_10001D694);
  sub_10001DF70(a1, type metadata accessor for WidgetStock);
  *(_BYTE *)a3 = v71;
  v49 = v67;
  *(_QWORD *)(a3 + 8) = v68;
  *(_QWORD *)(a3 + 16) = v49;
  v50 = v65;
  *(_QWORD *)(a3 + 24) = v66;
  *(_QWORD *)(a3 + 32) = v50;
  v51 = v63;
  *(_QWORD *)(a3 + 40) = v64;
  *(_QWORD *)(a3 + 48) = v51;
  v52 = v61;
  *(_QWORD *)(a3 + 56) = v62;
  *(_QWORD *)(a3 + 64) = v52;
  *(_BYTE *)(a3 + 72) = v59;
  *(_QWORD *)(a3 + 80) = v37;
  *(_BYTE *)(a3 + 88) = v39 & 1;
  v53 = v60;
  *(_QWORD *)(a3 + 96) = v41;
  *(_QWORD *)(a3 + 104) = v53;
  v54 = (int *)type metadata accessor for TickerCellViewModel(0);
  sub_10000ED3C((uint64_t)v43, a3 + v54[10], (uint64_t (*)(_QWORD))sub_10002FCAC);
  v55 = (_OWORD *)(a3 + v54[11]);
  v56 = v73[1];
  *v55 = v73[0];
  v55[1] = v56;
  v55[2] = v74[0];
  *(_OWORD *)((char *)v55 + 41) = *(_OWORD *)((char *)v74 + 9);
  sub_10000ED3C(v45, a3 + v54[12], (uint64_t (*)(_QWORD))sub_100075FE0);
  return sub_10000ED3C((uint64_t)v48, a3 + v54[13], (uint64_t (*)(_QWORD))sub_10001D694);
}

void sub_100077B40()
{
  qword_100126948 = 0x4020000000000000;
}

void sub_100077B50()
{
  qword_100126950 = 0x4000000000000000;
}

uint64_t sub_100077B60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  unint64_t v31;
  __n128 v32;
  double v33;
  id v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  _QWORD *v49;
  void (*v50)(_QWORD *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;

  v2 = v1;
  v79 = a1;
  v80 = 9666786;
  v78 = type metadata accessor for PriceChangeDisplay(0);
  v74 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v77 = (uint64_t *)((char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = _s11FormatStyleVMa_0(0);
  __chkstk_darwin(v72);
  v73 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDE8(0, &qword_100115B18, (uint64_t (*)(uint64_t))sub_10007CE34, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  v10 = v9;
  __chkstk_darwin(v9);
  v12 = (char *)&v69 - v11;
  sub_10007D67C(0);
  v14 = v13;
  v70 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100115C70, v17, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v75 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v69 - v19;
  v21 = sub_10007811C(v2, (uint64_t)v12);
  static AccessibilityChildBehavior.ignore.getter(v21);
  v22 = sub_10007D708();
  View.accessibilityElement(children:)(v8, v10, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100028528((uint64_t)v12, &qword_100115B18, (uint64_t (*)(uint64_t))sub_10007CE34, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
  v23 = *(_QWORD *)(v2 + 64);
  v82 = *(_QWORD *)(v2 + 56);
  v83 = v23;
  swift_bridgeObjectRetain(v23);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25 = v83;
  v27 = *(_QWORD *)(v2 + 40);
  v26 = *(void **)(v2 + 48);
  swift_bridgeObjectRetain(v83);
  v28._countAndFlagsBits = v27;
  v28._object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v25);
  v29 = v83;
  v81[0] = v10;
  v81[1] = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v81, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v31 = sub_1000144A0();
  v76 = v20;
  v71 = v31;
  View.accessibilityLabel<A>(_:)(&v82, v14, &type metadata for String, OpaqueTypeConformance2);
  v32 = swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, __n128))(v70 + 8))(v16, v14, v32);
  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
    goto LABEL_7;
  v33 = *(double *)(v2 + 80);
  if (qword_1001114C0 != -1)
    swift_once(&qword_1001114C0, sub_1000570EC);
  v34 = (id)sub_1000221F8(0, 3, 1, v33);
  objc_msgSend(v34, "setNumberStyle:", 1);
  v35 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v33);
  v36 = objc_msgSend(v34, "stringFromNumber:", v35);

  if (!v36)
  {

LABEL_7:
    v70 = 0xA300000000000000;
    goto LABEL_8;
  }
  v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v70 = v37;

LABEL_8:
  v38 = v2 + *(int *)(type metadata accessor for TickerCellViewModel(0) + 44);
  v39 = *(_QWORD *)v38;
  v40 = *(unsigned __int8 *)(v38 + 8);
  v41 = *(_QWORD *)(v38 + 32);
  v42 = *(_BYTE *)(v38 + 40);
  v69 = *(_QWORD *)(v38 + 48);
  v43 = *(unsigned __int8 *)(v38 + 56);
  type metadata accessor for TickerCellView(0);
  v44 = v77;
  sub_100046458(v77);
  v45 = (uint64_t)v73;
  v46 = v74;
  v47 = v78;
  (*(void (**)(char *, _QWORD *, uint64_t))(v74 + 16))(v73, v44, v78);
  v48 = (int *)v72;
  *(_BYTE *)(v45 + *(int *)(v72 + 20)) = 0;
  *(_BYTE *)(v45 + v48[6]) = 0;
  *(_BYTE *)(v45 + v48[7]) = 1;
  v49 = (_QWORD *)(v45 + v48[8]);
  *v49 = 0;
  v49[1] = 0xE000000000000000;
  v50 = *(void (**)(_QWORD *, uint64_t))(v46 + 8);
  v50(v44, v47);
  v51 = sub_100081FC0(v39, v40, v41, v42, v69, v43);
  v53 = v52;
  sub_10001DF70(v45, _s11FormatStyleVMa_0);
  sub_1000143C4(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v55 = swift_allocObject(v54, 80, 7);
  *(_OWORD *)(v55 + 16) = xmmword_1000DB8B0;
  v56 = v70;
  *(_QWORD *)(v55 + 32) = v80;
  *(_QWORD *)(v55 + 40) = v56;
  sub_100046458(v44);
  v57 = sub_100040998();
  v59 = v58;
  v50(v44, v47);
  *(_QWORD *)(v55 + 48) = v57;
  *(_QWORD *)(v55 + 56) = v59;
  *(_QWORD *)(v55 + 64) = v51;
  *(_QWORD *)(v55 + 72) = v53;
  v82 = v55;
  sub_1000143C4(0, (unint64_t *)&qword_100112180, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
  v61 = v60;
  v62 = sub_100075848();
  v63 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v61, v62);
  v65 = v64;
  v66 = swift_bridgeObjectRelease(v55);
  v82 = v63;
  v83 = v65;
  v67 = (uint64_t)v76;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v82, v75, &type metadata for String, v71, v66);
  swift_bridgeObjectRelease(v65);
  return sub_10007D824(v67, &qword_100115C70, (uint64_t (*)(uint64_t))sub_10007D67C, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
}

uint64_t sub_10007811C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a2;
  sub_10007CE58(0);
  v36 = v3;
  v33 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100115C78, v6, (uint64_t (*)(uint64_t))sub_10007CEB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v34 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - v8;
  sub_10007CEB8(0);
  v11 = v10;
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075FE0(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v33 - v22;
  v24 = type metadata accessor for TickerCellViewModel(0);
  sub_10001DE2C(a1 + *(int *)(v24 + 48), (uint64_t)v16, (uint64_t (*)(_QWORD))sub_100075FE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10001DF70((uint64_t)v16, (uint64_t (*)(_QWORD))sub_100075FE0);
    sub_10007844C((uint64_t)v13);
    sub_10001DE2C((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_10007CEB8);
    swift_storeEnumTagMultiPayload(v9, v34, 1);
    v25 = sub_10007D7A0();
    v26 = sub_10007D530();
    _ConditionalContent<>.init(storage:)(v9, v36, v11, v25, v26);
    return sub_10001DF70((uint64_t)v13, (uint64_t (*)(_QWORD))sub_10007CEB8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 16))(v20, v23, v17);
    __chkstk_darwin(v28);
    *(&v33 - 2) = a1;
    v29 = sub_10007D530();
    Link.init(destination:label:)(v20, sub_10007D7BC, &v33 - 4, v11, v29);
    v30 = v33;
    v31 = v36;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v9, v5, v36);
    swift_storeEnumTagMultiPayload(v9, v34, 0);
    v32 = sub_10007D7A0();
    _ConditionalContent<>.init(storage:)(v9, v31, v11, v32, v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }
}

void sub_10007844C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[14];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v20 = type metadata accessor for LineTicker(0);
  __chkstk_darwin(v20);
  __chkstk_darwin(v2);
  v17[11] = (char *)v17 - v3;
  sub_10002BC34(0, &qword_100115C80, type metadata accessor for RowWithChartTicker, v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v17[13] = v5;
  __chkstk_darwin(v5);
  v19 = (char *)v17 - v6;
  sub_10007D50C(0);
  v25 = v7;
  __chkstk_darwin(v7);
  v21 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RowWithChartTicker(0);
  __chkstk_darwin(v18);
  __chkstk_darwin(v9);
  v17[12] = (char *)v17 - v10;
  sub_10007D1BC(0);
  __chkstk_darwin(v11);
  sub_10002BC34(0, &qword_100115C88, (uint64_t (*)(uint64_t))sub_10007CEDC, (uint64_t (*)(uint64_t))sub_10007D50C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v22 = v12;
  __chkstk_darwin(v12);
  v24 = (char *)v17 - v13;
  sub_10002BC34(0, &qword_100115C90, (uint64_t (*)(uint64_t))sub_10007CF00, (uint64_t (*)(uint64_t))sub_10007D1BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  __chkstk_darwin(v14);
  sub_10007CEDC(0);
  v23 = v15;
  __chkstk_darwin(v15);
  sub_10007CF00(0);
  __chkstk_darwin(v16);
  __asm { BR              X10 }
}

uint64_t sub_100078728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_100111510 != -1)
    a1 = swift_once(&qword_100111510, sub_100077B50);
  v9 = qword_100126950;
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(v4 + 8) = v9;
  *(_BYTE *)(v4 + 16) = 0;
  sub_1000663A4(0, &qword_100115CA0, (uint64_t (*)(uint64_t))sub_10007CF78, (uint64_t)&type metadata for _VStackLayout, (uint64_t)&protocol witness table for _VStackLayout);
  sub_100078D98(v2, v4 + *(int *)(v10 + 44));
  sub_10001DE2C(v4, v7, (uint64_t (*)(_QWORD))sub_10007CF00);
  swift_storeEnumTagMultiPayload(v7, v6, 0);
  v11 = sub_10007D5E8();
  v12 = sub_10007D604();
  _ConditionalContent<>.init(storage:)(v7, v3, v5, v11, v12);
  v13 = *(_QWORD *)(v8 - 112);
  sub_10001DE2C(v1, v13, (uint64_t (*)(_QWORD))sub_10007CEDC);
  swift_storeEnumTagMultiPayload(v13, *(_QWORD *)(v8 - 128), 0);
  v14 = sub_10007D554();
  v15 = sub_10007D620();
  _ConditionalContent<>.init(storage:)(v13, *(_QWORD *)(v8 - 120), *(_QWORD *)(v8 - 104), v14, v15);
  sub_10001DF70(v1, (uint64_t (*)(_QWORD))sub_10007CEDC);
  return sub_10001DF70(v4, (uint64_t (*)(_QWORD))sub_10007CF00);
}

uint64_t sub_100078D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  sub_10007D098(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_100115B60, v6);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v38 = (uint64_t)&v37 - v11;
  sub_10003D488(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_100115B58, v15);
  v17 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v37 - v22;
  *(_QWORD *)v14 = static VerticalAlignment.firstTextBaseline.getter(v21);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  sub_1000663A4(0, (unint64_t *)&qword_100113C28, (uint64_t (*)(uint64_t))sub_10007D020, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
  sub_100079198(a1, (uint64_t)&v14[*(int *)(v24 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1000E0240);
  v26 = swift_allocObject(&unk_100107150, 41, 7);
  *(_QWORD *)(v26 + 16) = 0;
  *(_BYTE *)(v26 + 24) = 1;
  *(_QWORD *)(v26 + 32) = 0;
  *(_BYTE *)(v26 + 40) = 0;
  sub_10001DE2C((uint64_t)v14, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_10003D488);
  v27 = (uint64_t *)&v19[*(int *)(v17 + 36)];
  *v27 = KeyPath;
  v27[1] = (uint64_t)sub_10002453C;
  v27[2] = v26;
  sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_10003D488);
  sub_10003BE08((uint64_t)v19, (uint64_t)v23, &qword_100115B58, (uint64_t (*)(uint64_t))sub_10003D488);
  *(_QWORD *)v5 = static VerticalAlignment.firstTextBaseline.getter(v28);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1000663A4(0, &qword_100115CA8, (uint64_t (*)(uint64_t))sub_10007D110, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
  sub_1000796AC(a1, &v5[*(int *)(v29 + 44)]);
  v30 = swift_getKeyPath(&unk_1000E0240);
  v31 = swift_allocObject(&unk_100107178, 41, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_BYTE *)(v31 + 40) = 1;
  sub_10001DE2C((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_10007D098);
  v32 = (uint64_t *)&v9[*(int *)(v39 + 36)];
  *v32 = v30;
  v32[1] = (uint64_t)sub_10002453C;
  v32[2] = v31;
  sub_10001DF70((uint64_t)v5, (uint64_t (*)(_QWORD))sub_10007D098);
  v33 = v38;
  sub_10003BE08((uint64_t)v9, v38, &qword_100115B60, (uint64_t (*)(uint64_t))sub_10007D098);
  sub_100066430((uint64_t)v23, (uint64_t)v19, &qword_100115B58, (uint64_t (*)(uint64_t))sub_10003D488);
  sub_100066430(v33, (uint64_t)v9, &qword_100115B60, (uint64_t (*)(uint64_t))sub_10007D098);
  v34 = v40;
  sub_100066430((uint64_t)v19, v40, &qword_100115B58, (uint64_t (*)(uint64_t))sub_10003D488);
  sub_10007CF94(0);
  sub_100066430((uint64_t)v9, v34 + *(int *)(v35 + 48), &qword_100115B60, (uint64_t (*)(uint64_t))sub_10007D098);
  sub_10003C184(v33, (uint64_t)&qword_100115B60, (uint64_t)sub_10007D098, (uint64_t (*)(_QWORD))sub_10003B594);
  sub_10003C184((uint64_t)v23, (uint64_t)&qword_100115B58, (uint64_t)sub_10003D488, (uint64_t (*)(_QWORD))sub_10003B594);
  sub_10003C184((uint64_t)v9, (uint64_t)&qword_100115B60, (uint64_t)sub_10007D098, (uint64_t (*)(_QWORD))sub_10003B594);
  return sub_10003C184((uint64_t)v19, (uint64_t)&qword_100115B58, (uint64_t)sub_10003D488, (uint64_t (*)(_QWORD))sub_10003B594);
}

uint64_t sub_100079198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *KeyPath;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = a2;
  v3 = type metadata accessor for Font.Leading(0);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v57 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for StockPriceView(0);
  __chkstk_darwin(v60);
  v6 = (uint64_t *)((char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002BC34(0, (unint64_t *)&qword_100113C00, v7, (uint64_t (*)(uint64_t))sub_10007D03C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v61 = v8;
  __chkstk_darwin(v8);
  v64 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v63 = (uint64_t)&v54 - v11;
  v12 = (int *)type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v54 - v16;
  v18 = *(_BYTE *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 48);
  KeyPath = (char *)swift_getKeyPath(&unk_1000E0290);
  *v14 = v18;
  *((_QWORD *)v14 + 1) = v20;
  *((_QWORD *)v14 + 2) = v19;
  *((_QWORD *)v14 + 3) = v21;
  *((_QWORD *)v14 + 4) = v22;
  v23 = &v14[v12[6]];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1000E01E0);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v55 = v24;
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = &v14[v12[7]];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_1000E02B8);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = &v14[v12[8]];
  *(_QWORD *)v27 = KeyPath;
  v27[8] = 0;
  KeyPath = v17;
  sub_10000ED3C((uint64_t)v14, (uint64_t)v17, type metadata accessor for SymbolTrendView);
  v28 = qword_100111508;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  if (v28 != -1)
    swift_once(&qword_100111508, sub_100077B40);
  v56 = qword_100126948;
  v54 = *(_QWORD *)(a1 + 80);
  v29 = *(unsigned __int8 *)(a1 + 88);
  v31 = *(_QWORD *)(a1 + 96);
  v30 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain(v30);
  v33 = static Font.footnote.getter(v32);
  v34 = Font.bold()();
  swift_release(v33);
  v35 = v57;
  v36 = v58;
  v37 = v59;
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, enum case for Font.Leading.tight(_:), v59);
  v38 = Font.leading(_:)(v35, v34);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
  v39 = swift_getKeyPath(&unk_1000E0290);
  *v6 = v54;
  v6[1] = v29;
  v6[2] = v31;
  v6[3] = v30;
  v6[4] = v38;
  v40 = v60;
  v41 = (_QWORD *)((char *)v6 + *(int *)(v60 + 24));
  *v41 = swift_getKeyPath(&unk_1000E01E0);
  swift_storeEnumTagMultiPayload(v41, v55, 0);
  v42 = (char *)v6 + *(int *)(v40 + 28);
  *(_QWORD *)v42 = v39;
  v42[8] = 0;
  v43 = *(int *)(v40 + 32);
  if (qword_100111538 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v44 = static Settings.UserPreferences.showCurrency;
  sub_1000035F0();
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v46 = swift_retain(v44);
  *(_QWORD *)((char *)v6 + v43) = SettingProperty.init(_:)(v46);
  v47 = v64;
  sub_10001DE2C((uint64_t)v6, v64, type metadata accessor for StockPriceView);
  *(_QWORD *)(v47 + *(int *)(v61 + 36)) = 0x3FF0000000000000;
  sub_10001DF70((uint64_t)v6, type metadata accessor for StockPriceView);
  v48 = v63;
  sub_10007D888(v47, v63, (unint64_t *)&qword_100113C00, type metadata accessor for StockPriceView, (uint64_t (*)(uint64_t))sub_10007D03C);
  v49 = (uint64_t)KeyPath;
  sub_10001DE2C((uint64_t)KeyPath, (uint64_t)v14, type metadata accessor for SymbolTrendView);
  sub_10007D8E4(v48, v47, (unint64_t *)&qword_100113C00, type metadata accessor for StockPriceView, (uint64_t (*)(uint64_t))sub_10007D03C);
  v50 = v65;
  sub_10001DE2C((uint64_t)v14, v65, type metadata accessor for SymbolTrendView);
  sub_10003D500(0);
  v52 = v50 + *(int *)(v51 + 48);
  *(_QWORD *)v52 = v56;
  *(_BYTE *)(v52 + 8) = 0;
  sub_10007D8E4(v47, v50 + *(int *)(v51 + 64), (unint64_t *)&qword_100113C00, type metadata accessor for StockPriceView, (uint64_t (*)(uint64_t))sub_10007D03C);
  sub_10007D824(v48, (unint64_t *)&qword_100113C00, type metadata accessor for StockPriceView, (uint64_t (*)(uint64_t))sub_10007D03C);
  sub_10001DF70(v49, type metadata accessor for SymbolTrendView);
  sub_10007D824(v47, (unint64_t *)&qword_100113C00, type metadata accessor for StockPriceView, (uint64_t (*)(uint64_t))sub_10007D03C);
  return sub_10001DF70((uint64_t)v14, type metadata accessor for SymbolTrendView);
}

double sub_1000796AC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v37 = a2;
  v34 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v34);
  v4 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007D198(0);
  v32 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v35 = (uint64_t)&v30 - v9;
  v10 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 56);
  v11 = qword_100111508;
  v36 = v10;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1)
    swift_once(&qword_100111508, sub_100077B40);
  v31 = qword_100126948;
  v12 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TickerCellViewModel(0) + 44));
  v13 = *v12;
  v30 = *((unsigned __int8 *)v12 + 8);
  v14 = v12[2];
  v15 = v12[3];
  v16 = v12[4];
  v17 = *((unsigned __int8 *)v12 + 40);
  v18 = v12[6];
  v19 = *((_BYTE *)v12 + 56);
  v20 = *(_BYTE *)(a1 + 72);
  *v4 = swift_getKeyPath(&unk_1000E0268);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v4, v21, 0);
  v22 = v34;
  v23 = (char *)v4 + *(int *)(v34 + 20);
  v24 = v30;
  *(_QWORD *)v23 = v13;
  *((_QWORD *)v23 + 1) = v24;
  *((_QWORD *)v23 + 2) = v14;
  *((_QWORD *)v23 + 3) = v15;
  *((_QWORD *)v23 + 4) = v16;
  *((_QWORD *)v23 + 5) = v17;
  *((_QWORD *)v23 + 6) = v18;
  v23[56] = v19;
  *((_BYTE *)v4 + *(int *)(v22 + 24)) = v20;
  sub_10001DE2C((uint64_t)v4, (uint64_t)v7, type metadata accessor for PriceChangeView);
  *(_QWORD *)&v7[*(int *)(v32 + 36)] = 0x3FF0000000000000;
  swift_bridgeObjectRetain(v15);
  sub_10001DF70((uint64_t)v4, type metadata accessor for PriceChangeView);
  v25 = v35;
  sub_10000ED3C((uint64_t)v7, v35, (uint64_t (*)(_QWORD))sub_10007D198);
  sub_10001DE2C(v25, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_10007D198);
  v27 = v36;
  v26 = v37;
  *v37 = v33;
  v26[1] = v27;
  v26[2] = v31;
  *((_BYTE *)v26 + 24) = 0;
  sub_10007D12C(0);
  sub_10001DE2C((uint64_t)v7, (uint64_t)v26 + *(int *)(v28 + 64), (uint64_t (*)(_QWORD))sub_10007D198);
  swift_bridgeObjectRetain(v27);
  sub_10001DF70(v25, (uint64_t (*)(_QWORD))sub_10007D198);
  sub_10001DF70((uint64_t)v7, (uint64_t (*)(_QWORD))sub_10007D198);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v27).n128_u64[0];
  return result;
}

uint64_t sub_10007992C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  sub_10007D3E4(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_100115BD8, v6);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v38 = (uint64_t)&v37 - v11;
  sub_10007D2DC(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B594(0, &qword_100115BB0, v15);
  v17 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v37 - v22;
  *(_QWORD *)v14 = static VerticalAlignment.firstTextBaseline.getter(v21);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  sub_1000663A4(0, &qword_100115CB0, (uint64_t (*)(uint64_t))sub_10007D354, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
  sub_100079D2C(a1, (uint64_t)&v14[*(int *)(v24 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1000E0240);
  v26 = swift_allocObject(&unk_1001071A0, 41, 7);
  *(_QWORD *)(v26 + 16) = 0;
  *(_BYTE *)(v26 + 24) = 1;
  *(_QWORD *)(v26 + 32) = 0;
  *(_BYTE *)(v26 + 40) = 0;
  sub_10001DE2C((uint64_t)v14, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_10007D2DC);
  v27 = (uint64_t *)&v19[*(int *)(v17 + 36)];
  *v27 = KeyPath;
  v27[1] = (uint64_t)sub_10002453C;
  v27[2] = v26;
  sub_10001DF70((uint64_t)v14, (uint64_t (*)(_QWORD))sub_10007D2DC);
  sub_10003BE08((uint64_t)v19, (uint64_t)v23, &qword_100115BB0, (uint64_t (*)(uint64_t))sub_10007D2DC);
  *(_QWORD *)v5 = static VerticalAlignment.firstTextBaseline.getter(v28);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1000663A4(0, &qword_100115CB8, (uint64_t (*)(uint64_t))sub_10007D45C, (uint64_t)&type metadata for _HStackLayout, (uint64_t)&protocol witness table for _HStackLayout);
  sub_10007A12C(a1, (uint64_t)&v5[*(int *)(v29 + 44)]);
  v30 = swift_getKeyPath(&unk_1000E0240);
  v31 = swift_allocObject(&unk_1001071C8, 41, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_BYTE *)(v31 + 40) = 1;
  sub_10001DE2C((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_10007D3E4);
  v32 = (uint64_t *)&v9[*(int *)(v39 + 36)];
  *v32 = v30;
  v32[1] = (uint64_t)sub_10002453C;
  v32[2] = v31;
  sub_10001DF70((uint64_t)v5, (uint64_t (*)(_QWORD))sub_10007D3E4);
  v33 = v38;
  sub_10003BE08((uint64_t)v9, v38, &qword_100115BD8, (uint64_t (*)(uint64_t))sub_10007D3E4);
  sub_100066430((uint64_t)v23, (uint64_t)v19, &qword_100115BB0, (uint64_t (*)(uint64_t))sub_10007D2DC);
  sub_100066430(v33, (uint64_t)v9, &qword_100115BD8, (uint64_t (*)(uint64_t))sub_10007D3E4);
  v34 = v40;
  sub_100066430((uint64_t)v19, v40, &qword_100115BB0, (uint64_t (*)(uint64_t))sub_10007D2DC);
  sub_10007D250(0);
  sub_100066430((uint64_t)v9, v34 + *(int *)(v35 + 48), &qword_100115BD8, (uint64_t (*)(uint64_t))sub_10007D3E4);
  sub_10003C184(v33, (uint64_t)&qword_100115BD8, (uint64_t)sub_10007D3E4, (uint64_t (*)(_QWORD))sub_10003B594);
  sub_10003C184((uint64_t)v23, (uint64_t)&qword_100115BB0, (uint64_t)sub_10007D2DC, (uint64_t (*)(_QWORD))sub_10003B594);
  sub_10003C184((uint64_t)v9, (uint64_t)&qword_100115BD8, (uint64_t)sub_10007D3E4, (uint64_t (*)(_QWORD))sub_10003B594);
  return sub_10003C184((uint64_t)v19, (uint64_t)&qword_100115BB0, (uint64_t)sub_10007D2DC, (uint64_t (*)(_QWORD))sub_10003B594);
}

uint64_t sub_100079D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a2;
  v51 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v51);
  v52 = (uint64_t *)((char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007D198(0);
  v50 = v4;
  __chkstk_darwin(v4);
  v55 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v54 = (uint64_t)&v47 - v7;
  v8 = (int *)type metadata accessor for SymbolTrendView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - v12;
  v14 = *(_BYTE *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  KeyPath = (char *)swift_getKeyPath(&unk_1000E0290);
  *v10 = v14;
  *((_QWORD *)v10 + 1) = v16;
  *((_QWORD *)v10 + 2) = v15;
  *((_QWORD *)v10 + 3) = v17;
  *((_QWORD *)v10 + 4) = v18;
  v19 = &v10[v8[6]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1000E01E0);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = &v10[v8[7]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1000E02B8);
  sub_10000EDE8(0, &qword_100112C40, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = &v10[v8[8]];
  *(_QWORD *)v23 = KeyPath;
  v23[8] = 0;
  KeyPath = v13;
  sub_10000ED3C((uint64_t)v10, (uint64_t)v13, type metadata accessor for SymbolTrendView);
  v24 = qword_100111508;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  if (v24 != -1)
    swift_once(&qword_100111508, sub_100077B40);
  v49 = qword_100126948;
  v25 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TickerCellViewModel(0) + 44));
  v26 = *v25;
  v48 = *((unsigned __int8 *)v25 + 8);
  v28 = v25[2];
  v27 = v25[3];
  v29 = v25[4];
  v30 = *((unsigned __int8 *)v25 + 40);
  v31 = v25[6];
  v32 = *((_BYTE *)v25 + 56);
  v33 = *(_BYTE *)(a1 + 72);
  v34 = swift_getKeyPath(&unk_1000E0268);
  v35 = (uint64_t)v52;
  *v52 = v34;
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  v37 = v51;
  v38 = v35 + *(int *)(v51 + 20);
  v39 = v48;
  *(_QWORD *)v38 = v26;
  *(_QWORD *)(v38 + 8) = v39;
  *(_QWORD *)(v38 + 16) = v28;
  *(_QWORD *)(v38 + 24) = v27;
  *(_QWORD *)(v38 + 32) = v29;
  *(_QWORD *)(v38 + 40) = v30;
  *(_QWORD *)(v38 + 48) = v31;
  *(_BYTE *)(v38 + 56) = v32;
  *(_BYTE *)(v35 + *(int *)(v37 + 24)) = v33;
  v40 = v55;
  sub_10001DE2C(v35, v55, type metadata accessor for PriceChangeView);
  *(_QWORD *)(v40 + *(int *)(v50 + 36)) = 0x3FF0000000000000;
  swift_bridgeObjectRetain(v27);
  sub_10001DF70(v35, type metadata accessor for PriceChangeView);
  v41 = v54;
  sub_10000ED3C(v40, v54, (uint64_t (*)(_QWORD))sub_10007D198);
  v42 = (uint64_t)KeyPath;
  sub_10001DE2C((uint64_t)KeyPath, (uint64_t)v10, type metadata accessor for SymbolTrendView);
  sub_10001DE2C(v41, v40, (uint64_t (*)(_QWORD))sub_10007D198);
  v43 = v56;
  sub_10001DE2C((uint64_t)v10, v56, type metadata accessor for SymbolTrendView);
  sub_10007D370(0);
  v45 = v43 + *(int *)(v44 + 48);
  *(_QWORD *)v45 = v49;
  *(_BYTE *)(v45 + 8) = 0;
  sub_10001DE2C(v40, v43 + *(int *)(v44 + 64), (uint64_t (*)(_QWORD))sub_10007D198);
  sub_10001DF70(v41, (uint64_t (*)(_QWORD))sub_10007D198);
  sub_10001DF70(v42, type metadata accessor for SymbolTrendView);
  sub_10001DF70(v40, (uint64_t (*)(_QWORD))sub_10007D198);
  return sub_10001DF70((uint64_t)v10, type metadata accessor for SymbolTrendView);
}

uint64_t sub_10007A12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = a2;
  v63 = type metadata accessor for PriceChangeView(0);
  __chkstk_darwin(v63);
  v64 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007D198(0);
  v62 = v4;
  __chkstk_darwin(v4);
  v65 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002BC34(0, &qword_100115BF8, v6, (uint64_t (*)(uint64_t))sub_10006628C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  v61 = v7;
  __chkstk_darwin(v7);
  v67 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v66 = (uint64_t)&v57 - v10;
  v11 = (int *)type metadata accessor for StockPriceView(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - v15;
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(unsigned __int8 *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v21 = swift_bridgeObjectRetain(v19);
  v22 = static Font.caption2.getter(v21);
  static Font.Weight.medium.getter(v22);
  v23 = Font.weight(_:)(v22);
  swift_release(v22);
  KeyPath = swift_getKeyPath(&unk_1000E0290);
  *v13 = v17;
  v13[1] = v18;
  v13[2] = v20;
  v13[3] = v19;
  v13[4] = v23;
  v25 = (_QWORD *)((char *)v13 + v11[6]);
  *v25 = swift_getKeyPath(&unk_1000E01E0);
  sub_10000EDE8(0, &qword_100112C38, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = (char *)v13 + v11[7];
  *(_QWORD *)v27 = KeyPath;
  v27[8] = 0;
  v28 = v11[8];
  if (qword_100111538 != -1)
    swift_once(&qword_100111538, sub_1000A9EB8);
  v29 = static Settings.UserPreferences.showCurrency;
  sub_1000035F0();
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = swift_retain(v29);
  *(_QWORD *)((char *)v13 + v28) = SettingProperty.init(_:)(v31);
  sub_10000ED3C((uint64_t)v13, (uint64_t)v16, type metadata accessor for StockPriceView);
  v60 = v16;
  if (qword_100111508 != -1)
    swift_once(&qword_100111508, sub_100077B40);
  v59 = qword_100126948;
  v32 = (uint64_t *)(a1 + *(int *)(type metadata accessor for TickerCellViewModel(0) + 44));
  v58 = *v32;
  v33 = *((unsigned __int8 *)v32 + 8);
  v35 = v32[2];
  v34 = v32[3];
  v36 = v32[4];
  v37 = *((unsigned __int8 *)v32 + 40);
  v38 = v32[6];
  v39 = a1;
  v40 = *((_BYTE *)v32 + 56);
  v41 = *(_BYTE *)(v39 + 72);
  v42 = swift_getKeyPath(&unk_1000E0268);
  v43 = (uint64_t)v64;
  *v64 = v42;
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  swift_storeEnumTagMultiPayload(v43, v44, 0);
  v45 = v63;
  v46 = v43 + *(int *)(v63 + 20);
  *(_QWORD *)v46 = v58;
  *(_QWORD *)(v46 + 8) = v33;
  *(_QWORD *)(v46 + 16) = v35;
  *(_QWORD *)(v46 + 24) = v34;
  *(_QWORD *)(v46 + 32) = v36;
  *(_QWORD *)(v46 + 40) = v37;
  *(_QWORD *)(v46 + 48) = v38;
  *(_BYTE *)(v46 + 56) = v40;
  *(_BYTE *)(v43 + *(int *)(v45 + 24)) = v41;
  v47 = v65;
  sub_10001DE2C(v43, v65, type metadata accessor for PriceChangeView);
  *(_QWORD *)(v47 + *(int *)(v62 + 36)) = 0x3FF0000000000000;
  swift_bridgeObjectRetain(v34);
  sub_10001DF70(v43, type metadata accessor for PriceChangeView);
  v48 = swift_getKeyPath(&unk_1000E0268);
  v49 = v67;
  sub_10001DE2C(v47, v67, (uint64_t (*)(_QWORD))sub_10007D198);
  v50 = (uint64_t *)(v49 + *(int *)(v61 + 36));
  *v50 = v48;
  v50[1] = (uint64_t)sub_100065C80;
  v50[2] = 0;
  sub_10001DF70(v47, (uint64_t (*)(_QWORD))sub_10007D198);
  v51 = v66;
  sub_10007D888(v49, v66, &qword_100115BF8, (uint64_t (*)(uint64_t))sub_10007D198, (uint64_t (*)(uint64_t))sub_10006628C);
  v52 = (uint64_t)v60;
  sub_10001DE2C((uint64_t)v60, (uint64_t)v13, type metadata accessor for StockPriceView);
  sub_10007D8E4(v51, v49, &qword_100115BF8, (uint64_t (*)(uint64_t))sub_10007D198, (uint64_t (*)(uint64_t))sub_10006628C);
  v53 = v68;
  sub_10001DE2C((uint64_t)v13, v68, type metadata accessor for StockPriceView);
  sub_10007D478(0);
  v55 = v53 + *(int *)(v54 + 48);
  *(_QWORD *)v55 = v59;
  *(_BYTE *)(v55 + 8) = 0;
  sub_10007D8E4(v49, v53 + *(int *)(v54 + 64), &qword_100115BF8, (uint64_t (*)(uint64_t))sub_10007D198, (uint64_t (*)(uint64_t))sub_10006628C);
  sub_10007D824(v51, &qword_100115BF8, (uint64_t (*)(uint64_t))sub_10007D198, (uint64_t (*)(uint64_t))sub_10006628C);
  sub_10001DF70(v52, type metadata accessor for StockPriceView);
  sub_10007D824(v49, &qword_100115BF8, (uint64_t (*)(uint64_t))sub_10007D198, (uint64_t (*)(uint64_t))sub_10006628C);
  return sub_10001DF70((uint64_t)v13, type metadata accessor for StockPriceView);
}

BOOL sub_10007A63C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _BOOL8 result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  void (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  char v77;
  unsigned __int8 *v78;
  __int128 v79;
  unsigned __int8 *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int *v94;
  char *v95;
  uint64_t v96;
  char v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  int *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD v134[2];
  _OWORD v135[2];
  _OWORD v136[2];
  _BYTE v137[25];

  v4 = type metadata accessor for WidgetQuote(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007B1D4(0, &qword_100115A50, (uint64_t (*)(uint64_t))sub_10001D694);
  v121 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v112 - v9;
  sub_10001D694(0);
  __chkstk_darwin(v11);
  v119 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v124 = (uint64_t)&v112 - v14;
  __chkstk_darwin(v15);
  v122 = (uint64_t)&v112 - v16;
  v127 = type metadata accessor for URL(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v120 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007B1D4(0, &qword_100115A58, (uint64_t (*)(uint64_t))sub_100075FE0);
  v125 = v18;
  __chkstk_darwin(v18);
  v131 = (uint64_t)&v112 - v19;
  sub_100075FE0(0);
  __chkstk_darwin(v20);
  v123 = (uint64_t)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v130 = (uint64_t)&v112 - v23;
  __chkstk_darwin(v24);
  v128 = (uint64_t)&v112 - v25;
  v132 = type metadata accessor for PreparedSparkline(0);
  v26 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v129 = (uint64_t)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007B1D4(0, &qword_100115A60, (uint64_t (*)(uint64_t))sub_10002FCAC);
  v29 = v28;
  __chkstk_darwin(v28);
  v133 = (uint64_t)&v112 - v30;
  sub_10002FCAC(0);
  __chkstk_darwin(v31);
  __chkstk_darwin(v32);
  v34 = (char *)&v112 - v33;
  __chkstk_darwin(v35);
  v38 = (char *)&v112 - v37;
  if (*a1 != *a2)
    return 0;
  v118 = v36;
  v114 = v7;
  v116 = v5;
  v117 = v10;
  v115 = v4;
  v39 = *((_QWORD *)a1 + 1);
  v40 = *((_QWORD *)a1 + 2);
  v41 = *((_QWORD *)a2 + 1);
  v42 = *((_QWORD *)a2 + 2);
  if (v39 == v41 && v40 == v42
    || (v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v41, v42, 0), result = 0, (v43 & 1) != 0))
  {
    v45 = *((_QWORD *)a1 + 3);
    v46 = *((_QWORD *)a1 + 4);
    v47 = *((_QWORD *)a1 + 5);
    v48 = *((_QWORD *)a1 + 6);
    v49 = *((_QWORD *)a2 + 3);
    v50 = *((_QWORD *)a2 + 4);
    v51 = *((_QWORD *)a2 + 5);
    v52 = *((_QWORD *)a2 + 6);
    if (v45 == v49 && v46 == v50)
      goto LABEL_63;
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v49, v50, 0);
    result = 0;
    if ((v53 & 1) != 0)
    {
LABEL_63:
      if (v47 == v51 && v48 == v52
        || (v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v51, v52, 0), result = 0, (v54 & 1) != 0))
      {
        if ((v55 = *((_QWORD *)a1 + 7),
              v56 = *((_QWORD *)a1 + 8),
              v57 = *((_QWORD *)a2 + 7),
              v58 = *((_QWORD *)a2 + 8),
              v55 == v57)
          && v56 == v58
          || (v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, v57, v58, 0), result = 0, (v59 & 1) != 0))
        {
          v60 = a1[72];
          v61 = a2[72];
          if (v60 == 2)
          {
            if (v61 != 2)
              return 0;
          }
          else
          {
            if (v61 == 2)
              return 0;
            if ((v60 & 1) != 0)
              v62 = 1853321060;
            else
              v62 = 28789;
            if ((v60 & 1) != 0)
              v63 = 0xE400000000000000;
            else
              v63 = 0xE200000000000000;
            if ((v61 & 1) != 0)
              v64 = 1853321060;
            else
              v64 = 28789;
            if ((v61 & 1) != 0)
              v65 = 0xE400000000000000;
            else
              v65 = 0xE200000000000000;
            if (v62 == v64 && v63 == v65)
            {
              swift_bridgeObjectRelease_n(v63, 2);
            }
            else
            {
              v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v64, v65, 0);
              swift_bridgeObjectRelease(v63);
              swift_bridgeObjectRelease(v65);
              result = 0;
              if ((v66 & 1) == 0)
                return result;
            }
          }
          if (!sub_1000852B4(*((_QWORD *)a1 + 10), a1[88], *((_QWORD *)a1 + 12), *((_QWORD *)a1 + 13), *((_QWORD *)a2 + 10), a2[88], *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13)))return 0;
          v67 = (int *)type metadata accessor for TickerCellViewModel(0);
          sub_10001DE2C((uint64_t)&a1[v67[10]], (uint64_t)v38, (uint64_t (*)(_QWORD))sub_10002FCAC);
          sub_10001DE2C((uint64_t)&a2[v67[10]], (uint64_t)v34, (uint64_t (*)(_QWORD))sub_10002FCAC);
          v68 = v133;
          v69 = v133 + *(int *)(v29 + 48);
          sub_10001DE2C((uint64_t)v38, v133, (uint64_t (*)(_QWORD))sub_10002FCAC);
          sub_10001DE2C((uint64_t)v34, v69, (uint64_t (*)(_QWORD))sub_10002FCAC);
          v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
          v71 = v132;
          if (v70(v68, 1, v132) == 1)
          {
            sub_10001DF70((uint64_t)v34, (uint64_t (*)(_QWORD))sub_10002FCAC);
            sub_10001DF70((uint64_t)v38, (uint64_t (*)(_QWORD))sub_10002FCAC);
            if (v70(v69, 1, v71) == 1)
            {
              sub_10001DF70(v68, (uint64_t (*)(_QWORD))sub_10002FCAC);
              goto LABEL_44;
            }
          }
          else
          {
            v113 = v67;
            v72 = v118;
            sub_10001DE2C(v68, v118, (uint64_t (*)(_QWORD))sub_10002FCAC);
            if (v70(v69, 1, v71) != 1)
            {
              v76 = v129;
              sub_10000ED3C(v69, v129, type metadata accessor for PreparedSparkline);
              v77 = sub_100069A14(v72, v76);
              sub_10001DF70(v76, type metadata accessor for PreparedSparkline);
              sub_10001DF70((uint64_t)v34, (uint64_t (*)(_QWORD))sub_10002FCAC);
              sub_10001DF70((uint64_t)v38, (uint64_t (*)(_QWORD))sub_10002FCAC);
              sub_10001DF70(v72, type metadata accessor for PreparedSparkline);
              sub_10001DF70(v68, (uint64_t (*)(_QWORD))sub_10002FCAC);
              v67 = v113;
              if ((v77 & 1) == 0)
                return 0;
LABEL_44:
              v78 = &a1[v67[11]];
              v79 = *((_OWORD *)v78 + 2);
              v134[1] = *((_OWORD *)v78 + 1);
              v135[0] = v79;
              *(_OWORD *)((char *)v135 + 9) = *(_OWORD *)(v78 + 41);
              v134[0] = *(_OWORD *)v78;
              v80 = &a2[v67[11]];
              *(_OWORD *)&v137[9] = *(_OWORD *)(v80 + 41);
              v81 = *((_OWORD *)v80 + 2);
              v136[1] = *((_OWORD *)v80 + 1);
              *(_OWORD *)v137 = v81;
              v136[0] = *(_OWORD *)v80;
              if ((sub_10009BAC4((uint64_t)v134, (uint64_t)v136) & 1) == 0)
                return 0;
              v82 = v128;
              sub_10001DE2C((uint64_t)&a1[v67[12]], v128, (uint64_t (*)(_QWORD))sub_100075FE0);
              v83 = v130;
              sub_10001DE2C((uint64_t)&a2[v67[12]], v130, (uint64_t (*)(_QWORD))sub_100075FE0);
              v84 = v131;
              v85 = v131 + *(int *)(v125 + 48);
              sub_10001DE2C(v82, v131, (uint64_t (*)(_QWORD))sub_100075FE0);
              sub_10001DE2C(v83, v85, (uint64_t (*)(_QWORD))sub_100075FE0);
              v86 = v126;
              v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
              v88 = v127;
              if (v87(v84, 1, v127) == 1)
              {
                sub_10001DF70(v83, (uint64_t (*)(_QWORD))sub_100075FE0);
                sub_10001DF70(v82, (uint64_t (*)(_QWORD))sub_100075FE0);
                v89 = v87(v85, 1, v88);
                v68 = (uint64_t)v117;
                v90 = v116;
                if (v89 == 1)
                {
                  sub_10001DF70(v131, (uint64_t (*)(_QWORD))sub_100075FE0);
LABEL_52:
                  v100 = (uint64_t)&a1[v67[13]];
                  v101 = v122;
                  sub_10001DE2C(v100, v122, (uint64_t (*)(_QWORD))sub_10001D694);
                  v102 = (uint64_t)&a2[v67[13]];
                  v103 = v124;
                  sub_10001DE2C(v102, v124, (uint64_t (*)(_QWORD))sub_10001D694);
                  v104 = v68 + *(int *)(v121 + 48);
                  sub_10001DE2C(v101, v68, (uint64_t (*)(_QWORD))sub_10001D694);
                  sub_10001DE2C(v103, v104, (uint64_t (*)(_QWORD))sub_10001D694);
                  v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
                  v106 = v115;
                  if (v105(v68, 1, v115) == 1)
                  {
                    sub_10001DF70(v103, (uint64_t (*)(_QWORD))sub_10001D694);
                    sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_10001D694);
                    if (v105(v104, 1, v106) == 1)
                    {
                      sub_10001DF70(v68, (uint64_t (*)(_QWORD))sub_10001D694);
                      return 1;
                    }
                    goto LABEL_57;
                  }
                  v107 = v119;
                  sub_10001DE2C(v68, v119, (uint64_t (*)(_QWORD))sub_10001D694);
                  if (v105(v104, 1, v106) == 1)
                  {
                    sub_10001DF70(v124, (uint64_t (*)(_QWORD))sub_10001D694);
                    sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_10001D694);
                    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v107, v106);
LABEL_57:
                    v73 = &qword_100115A50;
                    v74 = sub_10001D694;
                    goto LABEL_41;
                  }
                  v108 = v114;
                  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v114, v104, v106);
                  v109 = sub_100003D3C(&qword_100115A68, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetQuote, (uint64_t)&protocol conformance descriptor for WidgetQuote);
                  v110 = dispatch thunk of static Equatable.== infix(_:_:)(v107, v108, v106, v109);
                  v111 = *(void (**)(char *, uint64_t))(v90 + 8);
                  v111(v108, v106);
                  sub_10001DF70(v124, (uint64_t (*)(_QWORD))sub_10001D694);
                  sub_10001DF70(v101, (uint64_t (*)(_QWORD))sub_10001D694);
                  v111((char *)v107, v106);
                  sub_10001DF70(v68, (uint64_t (*)(_QWORD))sub_10001D694);
                  return (v110 & 1) != 0;
                }
              }
              else
              {
                v91 = v123;
                sub_10001DE2C(v84, v123, (uint64_t (*)(_QWORD))sub_100075FE0);
                v92 = v87(v85, 1, v88);
                v68 = (uint64_t)v117;
                if (v92 != 1)
                {
                  v93 = v91;
                  v94 = v67;
                  v95 = v120;
                  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v120, v85, v88);
                  v96 = sub_100003D3C(&qword_100115A70, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
                  v97 = dispatch thunk of static Equatable.== infix(_:_:)(v93, v95, v88, v96);
                  v98 = *(void (**)(char *, uint64_t))(v86 + 8);
                  v99 = v95;
                  v67 = v94;
                  v90 = v116;
                  v98(v99, v88);
                  sub_10001DF70(v130, (uint64_t (*)(_QWORD))sub_100075FE0);
                  sub_10001DF70(v128, (uint64_t (*)(_QWORD))sub_100075FE0);
                  v98((char *)v93, v88);
                  sub_10001DF70(v131, (uint64_t (*)(_QWORD))sub_100075FE0);
                  if ((v97 & 1) == 0)
                    return 0;
                  goto LABEL_52;
                }
                sub_10001DF70(v130, (uint64_t (*)(_QWORD))sub_100075FE0);
                sub_10001DF70(v82, (uint64_t (*)(_QWORD))sub_100075FE0);
                (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v91, v88);
              }
              v73 = &qword_100115A58;
              v74 = sub_100075FE0;
              v75 = v131;
              goto LABEL_42;
            }
            sub_10001DF70((uint64_t)v34, (uint64_t (*)(_QWORD))sub_10002FCAC);
            sub_10001DF70((uint64_t)v38, (uint64_t (*)(_QWORD))sub_10002FCAC);
            sub_10001DF70(v72, type metadata accessor for PreparedSparkline);
          }
          v73 = &qword_100115A60;
          v74 = sub_10002FCAC;
LABEL_41:
          v75 = v68;
LABEL_42:
          sub_10003C184(v75, (uint64_t)v73, (uint64_t)v74, (uint64_t (*)(_QWORD))sub_10007B1D4);
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_10007B1D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v5, v5, 0, 0);
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t storeEnumTagSinglePayload for TickerCellViewModel.CellType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10007B278 + 4 * byte_1000DFFED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10007B2AC + 4 * byte_1000DFFE8[v4]))();
}

uint64_t sub_10007B2AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B2B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007B2BCLL);
  return result;
}

uint64_t sub_10007B2C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007B2D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10007B2D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B2DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TickerCellViewModel.CellType()
{
  return &type metadata for TickerCellViewModel.CellType;
}

unint64_t sub_10007B2FC()
{
  unint64_t result;

  result = qword_100115A78;
  if (!qword_100115A78)
  {
    result = swift_getWitnessTable(&unk_1000E0114, &type metadata for TickerCellViewModel.CellType);
    atomic_store(result, (unint64_t *)&qword_100115A78);
  }
  return result;
}

_QWORD *sub_10007B340(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  unsigned int (*v15)(uint64_t *, uint64_t, int *, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t *__dst;
  int *v65;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v9;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v10 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v10;
    v11 = type metadata accessor for TickerCellViewModel(0);
    v12 = *(int *)(v11 + 40);
    __dst = (_QWORD *)((char *)v4 + v12);
    v65 = (int *)v11;
    v13 = (uint64_t *)((char *)a2 + v12);
    v14 = (int *)type metadata accessor for PreparedSparkline(0);
    v63 = *((_QWORD *)v14 - 1);
    v15 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v63 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v16 = swift_bridgeObjectRetain(v10);
    if (v15(v13, 1, v14, v16))
    {
      sub_10002FCAC(0);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = *v13;
      *__dst = *v13;
      v20 = v14[5];
      v21 = (char *)__dst + v20;
      v22 = (char *)v13 + v20;
      v23 = type metadata accessor for Date(0);
      v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
      v25 = swift_bridgeObjectRetain(v19);
      v24(v21, v22, v23, v25);
      sub_100022800(0);
      ((void (*)(char *, char *, uint64_t))v24)(&v21[*(int *)(v26 + 36)], &v22[*(int *)(v26 + 36)], v23);
      v27 = v14[6];
      v28 = (char *)__dst + v27;
      v29 = (char *)v13 + v27;
      v30 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      *(_OWORD *)((char *)__dst + v14[7]) = *(_OWORD *)((char *)v13 + v14[7]);
      v31 = v14[8];
      v32 = (char *)__dst + v31;
      v33 = (char *)v13 + v31;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      *((_BYTE *)__dst + v14[9]) = *((_BYTE *)v13 + v14[9]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v63 + 56))(__dst, 0, 1, v14);
    }
    v34 = v65[11];
    v35 = (char *)v4 + v34;
    v36 = (uint64_t)a2 + v34;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = *(_BYTE *)(v36 + 8);
    v37 = *(_QWORD *)(v36 + 24);
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v36 + 16);
    *((_QWORD *)v35 + 3) = v37;
    *((_QWORD *)v35 + 4) = *(_QWORD *)(v36 + 32);
    v35[40] = *(_BYTE *)(v36 + 40);
    *((_QWORD *)v35 + 6) = *(_QWORD *)(v36 + 48);
    v35[56] = *(_BYTE *)(v36 + 56);
    v38 = v65[12];
    v39 = (char *)v4 + v38;
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v41 - 8);
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v42 + 48);
    v44 = swift_bridgeObjectRetain(v37);
    if (v43(v40, 1, v41, v44))
    {
      sub_100075FE0(0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v46 = v65[13];
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for WidgetQuote(0);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      sub_10001D694(0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    v52 = *(int *)(a3 + 20);
    v53 = (_QWORD *)((char *)v4 + v52);
    v54 = (uint64_t *)((char *)a2 + v52);
    sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    v56 = v55;
    if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
    {
      v57 = type metadata accessor for PriceChangeDisplay(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v53, v54, v57);
      v58 = v53;
      v59 = v56;
      v60 = 1;
    }
    else
    {
      v61 = *v54;
      *v53 = *v54;
      swift_retain(v61);
      v58 = v53;
      v59 = v56;
      v60 = 0;
    }
    swift_storeEnumTagMultiPayload(v58, v59, v60);
  }
  return v4;
}

uint64_t sub_10007B750(_QWORD *a1, uint64_t a2)
{
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[13]);
  v4 = (int *)type metadata accessor for TickerCellViewModel(0);
  v5 = (_QWORD *)((char *)a1 + v4[10]);
  v6 = type metadata accessor for PreparedSparkline(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for Date(0);
    v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    sub_100022800(0);
    v9(&v7[*(int *)(v10 + 36)], v8);
    v11 = (char *)v5 + *(int *)(v6 + 24);
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[11] + 24));
  v13 = (char *)a1 + v4[12];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  v16 = (char *)a1 + v4[13];
  v17 = type metadata accessor for WidgetQuote(0);
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  v19 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (swift_getEnumCaseMultiPayload(v19, v20) != 1)
    return swift_release(*v19);
  v21 = type metadata accessor for PriceChangeDisplay(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
}

uint64_t sub_10007B958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  unsigned int (*v14)(uint64_t *, uint64_t, int *, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(const void *, uint64_t, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t *__dst;
  int *v61;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = type metadata accessor for TickerCellViewModel(0);
  v11 = *(int *)(v10 + 40);
  __dst = (uint64_t *)(a1 + v11);
  v61 = (int *)v10;
  v12 = (uint64_t *)(a2 + v11);
  v13 = (int *)type metadata accessor for PreparedSparkline(0);
  v59 = *((_QWORD *)v13 - 1);
  v14 = *(unsigned int (**)(uint64_t *, uint64_t, int *, __n128))(v59 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v15 = swift_bridgeObjectRetain(v9);
  if (v14(v12, 1, v13, v15))
  {
    sub_10002FCAC(0);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = *v12;
    *__dst = *v12;
    v18 = v13[5];
    v19 = (char *)__dst + v18;
    v20 = (char *)v12 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
    v23 = swift_bridgeObjectRetain(v17);
    v22(v19, v20, v21, v23);
    sub_100022800(0);
    ((void (*)(char *, char *, uint64_t))v22)(&v19[*(int *)(v24 + 36)], &v20[*(int *)(v24 + 36)], v21);
    v25 = v13[6];
    v26 = (char *)__dst + v25;
    v27 = (char *)v12 + v25;
    v28 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    *(_OWORD *)((char *)__dst + v13[7]) = *(_OWORD *)((char *)v12 + v13[7]);
    v29 = v13[8];
    v30 = (char *)__dst + v29;
    v31 = (char *)v12 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    *((_BYTE *)__dst + v13[9]) = *((_BYTE *)v12 + v13[9]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v59 + 56))(__dst, 0, 1, v13);
  }
  v32 = v61[11];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  v35 = *(_QWORD *)(v34 + 24);
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  *(_QWORD *)(v33 + 24) = v35;
  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  *(_BYTE *)(v33 + 40) = *(_BYTE *)(v34 + 40);
  *(_QWORD *)(v33 + 48) = *(_QWORD *)(v34 + 48);
  *(_BYTE *)(v33 + 56) = *(_BYTE *)(v34 + 56);
  v36 = v61[12];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v40 + 48);
  v42 = swift_bridgeObjectRetain(v35);
  if (v41(v38, 1, v39, v42))
  {
    sub_100075FE0(0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v44 = v61[13];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  v47 = type metadata accessor for WidgetQuote(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    sub_10001D694(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  v50 = *(int *)(a3 + 20);
  v51 = (uint64_t *)(a1 + v50);
  v52 = (uint64_t *)(a2 + v50);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v54 = v53;
  if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
  {
    v55 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v51, v52, v55);
    v56 = 1;
  }
  else
  {
    v57 = *v52;
    *v51 = *v52;
    swift_retain(v57);
    v56 = 0;
  }
  swift_storeEnumTagMultiPayload(v51, v54, v56);
  return a1;
}

uint64_t sub_10007BD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, uint64_t, int *);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void *, uint64_t, uint64_t);
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  char *v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for TickerCellViewModel(0);
  v18 = v17[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = (int *)type metadata accessor for PreparedSparkline(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v26 = *v20;
      *v19 = *v20;
      v27 = v21[5];
      v100 = (char *)v19 + v27;
      v101 = v17;
      v28 = (char *)v20 + v27;
      v29 = type metadata accessor for Date(0);
      v102 = a3;
      v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
      v31 = swift_bridgeObjectRetain(v26);
      v30(v100, v28, v29, v31);
      sub_100022800(0);
      v33 = *(int *)(v32 + 36);
      v34 = &v28[v33];
      v17 = v101;
      ((void (*)(char *, char *, uint64_t))v30)(&v100[v33], v34, v29);
      a3 = v102;
      v35 = v21[6];
      v36 = (char *)v19 + v35;
      v37 = (char *)v20 + v35;
      v38 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      *(_OWORD *)((char *)v19 + v21[7]) = *(_OWORD *)((char *)v20 + v21[7]);
      v39 = v21[8];
      v40 = (char *)v19 + v39;
      v41 = (char *)v20 + v39;
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_10001DF70((uint64_t)v19, type metadata accessor for PreparedSparkline);
LABEL_6:
    sub_10002FCAC(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_7;
  }
  v78 = *v20;
  v79 = *v19;
  *v19 = *v20;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRelease(v79);
  v80 = v21[5];
  v81 = (char *)v19 + v80;
  v103 = a3;
  v82 = (char *)v20 + v80;
  v83 = v17;
  v84 = type metadata accessor for Date(0);
  v85 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 24);
  v85(v81, v82, v84);
  sub_100022800(0);
  v87 = v84;
  v17 = v83;
  v85(&v81[*(int *)(v86 + 36)], &v82[*(int *)(v86 + 36)], v87);
  v88 = v21[6];
  v89 = (char *)v19 + v88;
  v90 = (char *)v20 + v88;
  v91 = type metadata accessor for TimeZone(0);
  v92 = v90;
  a3 = v103;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 24))(v89, v92, v91);
  v93 = v21[7];
  v94 = (_QWORD *)((char *)v19 + v93);
  v95 = (_QWORD *)((char *)v20 + v93);
  *v94 = *v95;
  v94[1] = v95[1];
  v96 = v21[8];
  v97 = (char *)v19 + v96;
  v98 = (char *)v20 + v96;
  v99 = v98[8];
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v97[8] = v99;
  *((_BYTE *)v19 + v21[9]) = *((_BYTE *)v20 + v21[9]);
LABEL_7:
  v44 = v17[11];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = *(_QWORD *)(a2 + v44);
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v45 = v47;
  *(_QWORD *)(v45 + 16) = *(_QWORD *)(v46 + 16);
  v48 = *(_QWORD *)(v46 + 24);
  v49 = *(_QWORD *)(v45 + 24);
  *(_QWORD *)(v45 + 24) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = *(_QWORD *)(v46 + 32);
  *(_BYTE *)(v45 + 40) = *(_BYTE *)(v46 + 40);
  *(_QWORD *)(v45 + 32) = v50;
  v51 = *(_QWORD *)(v46 + 48);
  *(_BYTE *)(v45 + 56) = *(_BYTE *)(v46 + 56);
  *(_QWORD *)(v45 + 48) = v51;
  v52 = v17[12];
  v53 = (void *)(a1 + v52);
  v54 = (void *)(a2 + v52);
  v55 = type metadata accessor for URL(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v56 + 48);
  LODWORD(v49) = v57(v53, 1, v55);
  v58 = v57(v54, 1, v55);
  if ((_DWORD)v49)
  {
    if (!v58)
    {
      (*(void (**)(void *, void *, uint64_t))(v56 + 16))(v53, v54, v55);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v56 + 8))(v53, v55);
LABEL_12:
    sub_100075FE0(0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v56 + 24))(v53, v54, v55);
LABEL_13:
  v60 = v17[13];
  v61 = (void *)(a1 + v60);
  v62 = (void *)(a2 + v60);
  v63 = type metadata accessor for WidgetQuote(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, void *, uint64_t))(v64 + 16))(v61, v62, v63);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      if (a1 == a2)
        return a1;
      goto LABEL_20;
    }
LABEL_19:
    sub_10001D694(0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_20;
  }
  if (v67)
  {
    (*(void (**)(void *, uint64_t))(v64 + 8))(v61, v63);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v64 + 24))(v61, v62, v63);
  if (a1 == a2)
    return a1;
LABEL_20:
  v69 = *(int *)(a3 + 20);
  v70 = (uint64_t *)(a1 + v69);
  v71 = (uint64_t *)(a2 + v69);
  sub_100028528(a1 + v69, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v73 = v72;
  if (swift_getEnumCaseMultiPayload(v71, v72) == 1)
  {
    v74 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v70, v71, v74);
    v75 = 1;
  }
  else
  {
    v76 = *v71;
    *v70 = *v71;
    swift_retain(v76);
    v75 = 0;
  }
  swift_storeEnumTagMultiPayload(v70, v73, v75);
  return a1;
}

uint64_t sub_10007C344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = (int *)type metadata accessor for TickerCellViewModel(0);
  v8 = v7[10];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for PreparedSparkline(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    sub_10002FCAC(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v14 = v11[5];
    v52 = a3;
    v15 = (char *)v9 + v14;
    v16 = (char *)v10 + v14;
    v17 = type metadata accessor for Date(0);
    v51 = v12;
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    sub_100022800(0);
    v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
    v20 = v11[6];
    v21 = (char *)v9 + v20;
    v22 = (char *)v10 + v20;
    v23 = type metadata accessor for TimeZone(0);
    v24 = v21;
    a3 = v52;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v24, v22, v23);
    *(_OWORD *)((char *)v9 + v11[7]) = *(_OWORD *)((char *)v10 + v11[7]);
    v25 = v11[8];
    v26 = (char *)v9 + v25;
    v27 = (char *)v10 + v25;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    *((_BYTE *)v9 + v11[9]) = *((_BYTE *)v10 + v11[9]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v51 + 56))(v9, 0, 1, v11);
  }
  v28 = v7[11];
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v29[2] = v30[2];
  *(_OWORD *)((char *)v29 + 41) = *(_OWORD *)((char *)v30 + 41);
  v32 = v7[12];
  v33 = (void *)(a1 + v32);
  v34 = (const void *)(a2 + v32);
  v35 = type metadata accessor for URL(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    sub_100075FE0(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = v7[13];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  v41 = type metadata accessor for WidgetQuote(0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    sub_10001D694(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v39, v40, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = *(int *)(a3 + 20);
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v48 = v47;
  if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
  {
    v49 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v45, v46, v49);
    swift_storeEnumTagMultiPayload(v45, v48, 1);
  }
  else
  {
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10007C6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, int *);
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int *v86;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v86 = (int *)type metadata accessor for TickerCellViewModel(0);
  v16 = v86[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for PreparedSparkline(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      *v17 = *v18;
      v24 = v19[5];
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      v85 = a3;
      v27 = type metadata accessor for Date(0);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
      v28(v25, v26, v27);
      sub_100022800(0);
      v30 = v27;
      a3 = v85;
      v28(&v25[*(int *)(v29 + 36)], &v26[*(int *)(v29 + 36)], v30);
      v31 = v19[6];
      v32 = (char *)v17 + v31;
      v33 = (char *)v18 + v31;
      v34 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
      v35 = v19[8];
      v36 = (char *)v17 + v35;
      v37 = (char *)v18 + v35;
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_10001DF70((uint64_t)v17, type metadata accessor for PreparedSparkline);
LABEL_6:
    sub_10002FCAC(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  v69 = *v17;
  *v17 = *v18;
  swift_bridgeObjectRelease(v69);
  v70 = v19[5];
  v71 = (char *)v17 + v70;
  v72 = (char *)v18 + v70;
  v73 = a3;
  v74 = type metadata accessor for Date(0);
  v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 40);
  v75(v71, v72, v74);
  sub_100022800(0);
  v77 = v74;
  a3 = v73;
  v75(&v71[*(int *)(v76 + 36)], &v72[*(int *)(v76 + 36)], v77);
  v78 = v19[6];
  v79 = (char *)v17 + v78;
  v80 = (char *)v18 + v78;
  v81 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 40))(v79, v80, v81);
  *(_OWORD *)((char *)v17 + v19[7]) = *(_OWORD *)((char *)v18 + v19[7]);
  v82 = v19[8];
  v83 = (char *)v17 + v82;
  v84 = (char *)v18 + v82;
  v83[8] = v84[8];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *((_BYTE *)v17 + v19[9]) = *((_BYTE *)v18 + v19[9]);
LABEL_7:
  v39 = v86[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  *(_QWORD *)v40 = *(_QWORD *)(a2 + v39);
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(a2 + v39 + 8);
  v42 = *(_QWORD *)(a2 + v39 + 24);
  v43 = *(_QWORD *)(a1 + v39 + 24);
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(a2 + v39 + 16);
  *(_QWORD *)(v40 + 24) = v42;
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  *(_BYTE *)(v40 + 40) = *(_BYTE *)(v41 + 40);
  *(_QWORD *)(v40 + 48) = *(_QWORD *)(v41 + 48);
  *(_BYTE *)(v40 + 56) = *(_BYTE *)(v41 + 56);
  v44 = v86[12];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  v47 = type metadata accessor for URL(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
LABEL_12:
    sub_100075FE0(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v45, v46, v47);
LABEL_13:
  v53 = v86[13];
  v54 = (void *)(a1 + v53);
  v55 = (void *)(a2 + v53);
  v56 = type metadata accessor for WidgetQuote(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, void *, uint64_t))(v57 + 32))(v54, v55, v56);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      if (a1 == a2)
        return a1;
      goto LABEL_20;
    }
LABEL_19:
    sub_10001D694(0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_20;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v57 + 8))(v54, v56);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v57 + 40))(v54, v55, v56);
  if (a1 == a2)
    return a1;
LABEL_20:
  v62 = *(int *)(a3 + 20);
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  sub_100028528(a1 + v62, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  sub_10000EDE8(0, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  v66 = v65;
  if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
  {
    v67 = type metadata accessor for PriceChangeDisplay(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v63, v64, v67);
    swift_storeEnumTagMultiPayload(v63, v66, 1);
  }
  else
  {
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10007CC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007CC48);
}

uint64_t sub_10007CC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for TickerCellViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10007CCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007CCE0);
}

uint64_t sub_10007CCE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for TickerCellViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_10000EDE8(0, &qword_100115A80, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TickerCellView(uint64_t a1)
{
  return sub_1000071F8(a1, qword_100115AE0, (uint64_t)&nominal type descriptor for TickerCellView);
}

void sub_10007CD88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for TickerCellViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000EDE8(319, &qword_100113B30, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_10007CE24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000E9340, 1);
}

void sub_10007CE34(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100115B20, (uint64_t (*)(uint64_t))sub_10007CE58, (uint64_t (*)(uint64_t))sub_10007CEB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_10007CE58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115B28)
  {
    sub_10007CEB8(255);
    v3 = v2;
    v4 = sub_10007D530();
    v5 = type metadata accessor for Link(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115B28);
  }
}

void sub_10007CEB8(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100115B30, (uint64_t (*)(uint64_t))sub_10007CEDC, (uint64_t (*)(uint64_t))sub_10007D50C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_10007CEDC(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100115B38, (uint64_t (*)(uint64_t))sub_10007CF00, (uint64_t (*)(uint64_t))sub_10007D1BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

void sub_10007CF00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115B40)
  {
    sub_10007CF78(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100115B90, (uint64_t (*)(uint64_t))sub_10007CF78, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115B40);
  }
}

void sub_10007CF78(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115B48, (uint64_t (*)(uint64_t))sub_10007CF94, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10007CF94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100115B50)
  {
    sub_10003B594(255, &qword_100115B58, (uint64_t (*)(uint64_t))sub_10003D488);
    v3 = v2;
    sub_10003B594(255, &qword_100115B60, (uint64_t (*)(uint64_t))sub_10007D098);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100115B50);
  }
}

void sub_10007D020(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100113BF0, (uint64_t (*)(uint64_t))sub_10003D500, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10007D03C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100113C08)
  {
    v2 = type metadata accessor for LayoutPriorityTraitKey(255);
    v3 = type metadata accessor for _TraitWritingModifier(a1, v2, &protocol witness table for LayoutPriorityTraitKey);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100113C08);
  }
}

void sub_10007D098(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115B68)
  {
    sub_10007D110(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100115B88, (uint64_t (*)(uint64_t))sub_10007D110, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115B68);
  }
}

void sub_10007D110(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115B70, (uint64_t (*)(uint64_t))sub_10007D12C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10007D12C(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!qword_100115B78)
  {
    sub_10007D198(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, &type metadata for CompanyNameView, &type metadata for Spacer, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100115B78);
  }
}

void sub_10007D198(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100115B80, type metadata accessor for PriceChangeView, (uint64_t (*)(uint64_t))sub_10007D03C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
}

void sub_10007D1BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115B98)
  {
    sub_10007D234(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100115C08, (uint64_t (*)(uint64_t))sub_10007D234, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115B98);
  }
}

void sub_10007D234(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115BA0, (uint64_t (*)(uint64_t))sub_10007D250, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10007D250(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_100115BA8)
  {
    sub_10003B594(255, &qword_100115BB0, (uint64_t (*)(uint64_t))sub_10007D2DC);
    v3 = v2;
    sub_10003B594(255, &qword_100115BD8, (uint64_t (*)(uint64_t))sub_10007D3E4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100115BA8);
  }
}

void sub_10007D2DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115BB8)
  {
    sub_10007D354(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100115BD0, (uint64_t (*)(uint64_t))sub_10007D354, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115BB8);
  }
}

void sub_10007D354(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115BC0, (uint64_t (*)(uint64_t))sub_10007D370, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10007D370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!qword_100115BC8)
  {
    v2 = type metadata accessor for SymbolTrendView(255);
    sub_10007D198(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for Spacer, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100115BC8);
  }
}

void sub_10007D3E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_100115BE0)
  {
    sub_10007D45C(255);
    v3 = v2;
    v4 = sub_100003D3C(&qword_100115C00, (uint64_t (*)(uint64_t))sub_10007D45C, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_100115BE0);
  }
}

void sub_10007D45C(uint64_t a1)
{
  sub_10000EDE8(a1, &qword_100115BE8, (uint64_t (*)(uint64_t))sub_10007D478, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_10007D478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!qword_100115BF0)
  {
    v2 = type metadata accessor for StockPriceView(255);
    sub_10002BC34(255, &qword_100115BF8, (uint64_t (*)(uint64_t))sub_10007D198, (uint64_t (*)(uint64_t))sub_10006628C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v2, &type metadata for Spacer, v3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100115BF0);
  }
}

void sub_10007D50C(uint64_t a1)
{
  sub_10002BC34(a1, &qword_100115C10, type metadata accessor for RowWithChartTicker, type metadata accessor for LineTicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _ConditionalContent);
}

uint64_t sub_10007D530()
{
  return sub_10007D578(&qword_100115C18, (uint64_t (*)(uint64_t))sub_10007CEB8, (void (*)(void))sub_10007D554, (void (*)(void))sub_10007D620);
}

uint64_t sub_10007D554()
{
  return sub_10007D578(&qword_100115C20, (uint64_t (*)(uint64_t))sub_10007CEDC, (void (*)(void))sub_10007D5E8, (void (*)(void))sub_10007D604);
}

uint64_t sub_10007D578(unint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007D5E8()
{
  return sub_100003D3C(&qword_100115C28, (uint64_t (*)(uint64_t))sub_10007CF00, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10007D604()
{
  return sub_100003D3C(&qword_100115C30, (uint64_t (*)(uint64_t))sub_10007D1BC, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10007D620()
{
  return sub_10007D578(&qword_100115C38, (uint64_t (*)(uint64_t))sub_10007D50C, (void (*)(void))sub_10007D644, (void (*)(void))sub_10007D660);
}

uint64_t sub_10007D644()
{
  return sub_100003D3C(&qword_100115C40, type metadata accessor for RowWithChartTicker, (uint64_t)&unk_1000E3CE0);
}

uint64_t sub_10007D660()
{
  return sub_100003D3C(&qword_100115C48, type metadata accessor for LineTicker, (uint64_t)&unk_1000DD5B8);
}

void sub_10007D67C(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_100115C50)
  {
    sub_10000EDE8(255, &qword_100115B18, (uint64_t (*)(uint64_t))sub_10007CE34, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v5[0] = v2;
    v5[1] = sub_10007D708();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100115C50);
  }
}

unint64_t sub_10007D708()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100115C58;
  if (!qword_100115C58)
  {
    sub_10000EDE8(255, &qword_100115B18, (uint64_t (*)(uint64_t))sub_10007CE34, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v2 = v1;
    sub_10007D578(&qword_100115C60, (uint64_t (*)(uint64_t))sub_10007CE34, (void (*)(void))sub_10007D7A0, (void (*)(void))sub_10007D530);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v2);
    atomic_store(result, (unint64_t *)&qword_100115C58);
  }
  return result;
}

uint64_t sub_10007D7A0()
{
  return sub_100003D3C(&qword_100115C68, (uint64_t (*)(uint64_t))sub_10007CE58, (uint64_t)&protocol conformance descriptor for Link<A>);
}

void sub_10007D7BC(uint64_t a1@<X8>)
{
  sub_10007844C(a1);
}

uint64_t sub_10007D7F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10007D800()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10007D824(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  sub_10002BC34(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_10007D868()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10007D878()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10007D888(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7;

  sub_10002BC34(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_10007D8E4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v7;

  sub_10002BC34(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t sub_10007D944()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_100115CC0;
  if (!qword_100115CC0)
  {
    sub_10002BC34(255, &qword_100115C70, (uint64_t (*)(uint64_t))sub_10007D67C, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for ModifiedContent);
    v2 = v1;
    sub_10000EDE8(255, &qword_100115B18, (uint64_t (*)(uint64_t))sub_10007CE34, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Group);
    v4[0] = v3;
    v4[1] = sub_10007D708();
    swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003D3C(&qword_100115CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_100115CC0);
  }
  return result;
}

uint64_t sub_10007DA28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for TaskDeadlineError(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  sub_10000EDE8(0, &qword_100115E28, (uint64_t (*)(uint64_t))&type metadata accessor for NewsUserProfile, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_10007DAE0, 0, 0);
}

uint64_t sub_10007DAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 56);
  Cache.subscript.getter(10.0);
  v2 = type metadata accessor for NewsUserProfile(0);
  *(_QWORD *)(v0 + 96) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v0 + 104) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 32);
    sub_10007EC2C(*(_QWORD *)(v0 + 80));
    sub_100007184((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
    v5 = (_QWORD *)swift_task_alloc(dword_1001147A4);
    *(_QWORD *)(v0 + 112) = v5;
    *v5 = v0;
    v5[1] = sub_10007DBEC;
    return sub_100054310();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 80), v2);
    v7 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007DBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10007E014;
  else
    v5 = sub_10007DC58;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007DC58()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;

  v1 = objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)(v0 + 120)), "bundleSubscription");
  if (!v1)
  {
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    swift_unknownObjectRelease(v8);
    v11 = type metadata accessor for TodayPrivateDataError(0);
    v12 = sub_10007ECBC(&qword_100115E30, 255, type metadata accessor for TodayPrivateDataError, (uint64_t)&unk_1000E0670);
    swift_allocError(v11, v12, 0, 0);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v13, 1, 2, v9);
    swift_willThrow(v14);
    swift_unknownObjectRelease(v8);
LABEL_7:
    v21 = *(_QWORD *)(v0 + 72);
    v23 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "bundleChannelIDs");
  v4 = objc_msgSend(v3, "count");

  v5 = *(_QWORD *)(v0 + 120);
  if ((uint64_t)v4 <= 0)
  {
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 48);
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 120));
    v17 = type metadata accessor for TodayPrivateDataError(0);
    v18 = sub_10007ECBC(&qword_100115E30, 255, type metadata accessor for TodayPrivateDataError, (uint64_t)&unk_1000E0670);
    swift_allocError(v17, v18, 0, 0);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v19, 2, 2, v15);
    swift_willThrow(v20);
    swift_unknownObjectRelease(v5);

    goto LABEL_7;
  }
  v6 = objc_msgSend(*(id *)(v0 + 120), "rankedAllSubscribedTagIDs");
  if (v6)
  {
    v7 = v6;
    v47 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String);

  }
  else
  {
    v47 = _swiftEmptyArrayStorage;
  }
  v25 = objc_msgSend(*(id *)(v0 + 120), "mutedTagIDs");
  if (v25)
  {
    v26 = v25;
    v27 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String, &protocol witness table for String);

  }
  else
  {
    v27 = &_swiftEmptySetSingleton;
  }
  v28 = *(void **)(v0 + 120);
  v46 = sub_10007F4EC((uint64_t)v27);
  v29 = objc_msgSend(v28, "autoFavoriteTagIDs", swift_bridgeObjectRelease(v27).n128_f64[0]);
  if (v29)
  {
    v30 = v29;
    v45 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for String);

  }
  else
  {
    v45 = _swiftEmptyArrayStorage;
  }
  v31 = *(void **)(v0 + 120);
  v32 = objc_msgSend(v31, "purchasedTagIDs");
  swift_unknownObjectRelease(v31);
  if (v32)
  {
    v33 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v32, &type metadata for String, &protocol witness table for String);

  }
  else
  {
    v33 = &_swiftEmptySetSingleton;
  }
  v34 = *(_QWORD *)(v0 + 120);
  v36 = *(_QWORD *)(v0 + 96);
  v35 = *(_QWORD *)(v0 + 104);
  v37 = *(_QWORD *)(v0 + 72);
  v38 = *(_QWORD *)(v0 + 24);
  v39 = sub_10007F4EC((uint64_t)v33);
  swift_bridgeObjectRelease(v33);
  v40 = v2;
  NewsUserProfile.init(subscribedTagIDs:mutedTagIDs:autoFavoritedTagIDs:purchasedTagIDs:bundleSubscription:)(v47, v46, v45, v39, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v37, v38, v36);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v37, 0, 1, v36);
  Cache.subscript.setter(v37);
  swift_unknownObjectRelease(v34);

  v41 = *(_QWORD *)(v0 + 72);
  v43 = *(_QWORD *)(v0 + 56);
  v42 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10007E014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  swift_errorRetain(v1);
  v4 = sub_100067498();
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0, v5))
  {
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    swift_errorRelease(*(_QWORD *)(v0 + 128));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v7, v6, v8);
    v10 = type metadata accessor for TodayPrivateDataError(0);
    v11 = sub_10007ECBC(&qword_100115E30, 255, type metadata accessor for TodayPrivateDataError, (uint64_t)&unk_1000E0670);
    swift_allocError(v10, v11, 0, 0);
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v7, v8);
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 2, v8);
    swift_willThrow(v14);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v15 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007E174()
{
  uint64_t v0;

  sub_100007164((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for WidgetNewsUserProfileProvider()
{
  return objc_opt_self(_TtC12StocksWidget29WidgetNewsUserProfileProvider);
}

uint64_t sub_10007E1C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10007E23C()
{
  uint64_t v0;

  sub_10000EDE8(0, &qword_100115E10, (uint64_t (*)(uint64_t))&type metadata accessor for NewsUserProfile, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Promise);
  swift_retain(v0);
  return Promise.__allocating_init<A>(task:)(&unk_100115E20, v0);
}

void sub_10007E294()
{
  SceneStateMonitor.sceneDidBecomeActive()();
}

uint64_t sub_10007E29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return SceneStateMonitor.sceneDidBecomeActive(with:sourceApplication:sceneID:)(a1, a2, a3, a4, a5, *v5);
}

void sub_10007E2A4()
{
  SceneStateMonitor.sceneWillResignActive()();
}

void sub_10007E2AC(Swift::String with)
{
  SceneStateMonitor.sceneWillResignActive(with:)(with);
}

void sub_10007E2B4()
{
  SceneStateMonitor.sceneWillEnterForeground()();
}

void sub_10007E2BC()
{
  SceneStateMonitor.sceneDidEnterBackground()();
}

void sub_10007E2C4(Swift::String with)
{
  SceneStateMonitor.sceneDidEnterBackground(with:)(with);
}

uint64_t sub_10007E2CC(uint64_t a1)
{
  _QWORD *v1;

  return SceneStateMonitor.sceneWillConnectToSession(withOptions:)(a1, *v1);
}

void sub_10007E2D4()
{
  SceneStateMonitor.sceneDidDisconnect()();
}

uint64_t sub_10007E2DC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10007F9B4();
  v1 = swift_allocError(&type metadata for WidgetNewsUserProfileProvider.Error, v0, 0, 0);
  sub_10000EDE8(0, &qword_100115E40, (uint64_t (*)(uint64_t))&type metadata accessor for RemoteNotificationFetchResult, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Promise);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return Promise.init(error:)(v1);
}

uint64_t sub_10007E34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, char *, uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NewsUserProfile(0);
  v6 = firstly<A>(closure:)(sub_10007F9F8, v0, v5);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v23 = v0 + qword_100126958;
  v24 = v7;
  ((void (*)(char *))v7)(v4);
  v8 = *(unsigned __int8 *)(v2 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = v9 + v3;
  v22 = v8 | 7;
  v11 = swift_allocObject(&unk_100107370, v10, v8 | 7);
  v12 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v13 = v12(v11 + v9, v4, v1);
  v14 = (void *)zalgo.getter(v13);
  v15 = Promise.then<A>(on:closure:)(v14, sub_10007FA14, v11, v5);
  swift_release(v6);
  swift_release(v11);

  v24(v4, v23, v1);
  v16 = swift_allocObject(&unk_100107398, v10, v22);
  v17 = v12(v16 + v9, v4, v1);
  v18 = (void *)zalgo.getter(v17);
  v19 = Promise.error(on:closure:)(v18, sub_10007FA70, v16);
  swift_release(v16);

  swift_release(v15);
  return v19;
}

uint64_t sub_10007E4EC(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  v1 = *a1;
  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "fetching news user profile", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return dispatch thunk of NewsUserProfileProviderType.fetchNewsUserProfile()(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_10007E5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  void *v9;
  id v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  void *v14;
  id v15;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(60);
  v4._countAndFlagsBits = 40;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = NewsUserProfile.mutedTagIDs.getter();
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 0x6154646574756D20;
  v8._object = (void *)0xEE00202C73444967;
  String.append(_:)(v8);
  v9 = (void *)NewsUserProfile.bundleSubscription.getter();
  v10 = objc_msgSend(v9, "bundleChannelIDs");

  objc_msgSend(v10, "count");
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._object = (void *)0x80000001000E6330;
  v13._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  v14 = (void *)NewsUserProfile.bundleSubscription.getter();
  v15 = objc_msgSend(v14, "subscriptionState");

  v32 = (uint64_t)v15;
  type metadata accessor for FCSubscriptionState(0);
  _print_unlocked<A, B>(_:_:)(&v32, &v30, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v17._countAndFlagsBits = 0xD000000000000014;
  v17._object = (void *)0x80000001000E6350;
  String.append(_:)(v17);
  v19 = v30;
  v18 = v31;
  swift_bridgeObjectRetain(v31);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v21, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = a2;
    v25 = swift_slowAlloc(32, -1);
    v30 = v25;
    *(_DWORD *)v24 = 136446210;
    swift_bridgeObjectRetain(v18);
    v32 = sub_10007ECFC(v19, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "fetched news user profile: %{public}s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, &type metadata for Any[8]);
    v26 = v25;
    a2 = v29;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v18, 2);
  }

  v27 = type metadata accessor for NewsUserProfile(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a2, a1, v27);
}

void sub_10007E8E4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_errorRetain(a1);
  v2 = swift_errorRetain(a1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(a1);
    v7 = _swift_stdlib_bridgeErrorToNSError(a1);
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch news user profile with error: %{public}@", v5, 0xCu);
    sub_10000EDE8(0, &qword_100111EC0, (uint64_t (*)(uint64_t))sub_1000071A8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
}

uint64_t sub_10007EA70(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of RemoteNotificationHandler.handleRemoteNotification(userInfo:)(a1, *(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 88) + 8));
}

uint64_t sub_10007EA9C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[2]);
  v1 = (char *)v0 + qword_100126958;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t type metadata accessor for LoggingNewsUserProfileProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021720(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoggingNewsUserProfileProvider);
}

ValueMetadata *type metadata accessor for WidgetNewsUserProfileProvider.CacheKey()
{
  return &type metadata for WidgetNewsUserProfileProvider.CacheKey;
}

unint64_t sub_10007EB14()
{
  unint64_t result;

  result = qword_100115DF8;
  if (!qword_100115DF8)
  {
    result = swift_getWitnessTable(&unk_1000E03AC, &type metadata for WidgetNewsUserProfileProvider.CacheKey);
    atomic_store(result, (unint64_t *)&qword_100115DF8);
  }
  return result;
}

uint64_t sub_10007EB60(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000E0414, a1);
}

uint64_t sub_10007EB70(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000E043C, a1);
}

uint64_t sub_10007EB80(uint64_t a1, uint64_t a2)
{
  return sub_10007ECBC(&qword_100115E00, a2, (uint64_t (*)(uint64_t))type metadata accessor for WidgetNewsUserProfileProvider, (uint64_t)&unk_1000E04DC);
}

uint64_t sub_10007EBAC(uint64_t a1, uint64_t a2)
{
  return sub_10007ECBC(&qword_100115E08, a2, (uint64_t (*)(uint64_t))type metadata accessor for WidgetNewsUserProfileProvider, (uint64_t)&unk_1000E0504);
}

uint64_t sub_10007EBD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_100115E1C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10000E914;
  return sub_10007DA28(a1, v1);
}

uint64_t sub_10007EC2C(uint64_t a1)
{
  uint64_t v2;

  sub_10000EDE8(0, &qword_100115E28, (uint64_t (*)(uint64_t))&type metadata accessor for NewsUserProfile, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TodayPrivateDataError(uint64_t a1)
{
  uint64_t result;

  result = qword_100115EC0;
  if (!qword_100115EC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TodayPrivateDataError);
  return result;
}

uint64_t sub_10007ECBC(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007ECFC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10007EDCC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10005B314((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10005B314((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100007164(v12);
  return v7;
}

uint64_t sub_10007EDCC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10007EF84(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10007EF84(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10007F018(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10007F1FC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10007F1FC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10007F018(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10007F18C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10007F18C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  sub_1000505B0(0, &qword_100115E48, (uint64_t)&type metadata for UInt8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10007F1FC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1000505B0(0, &qword_100115E48, (uint64_t)&type metadata for UInt8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10007F354(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    sub_1000505B0(0, &qword_100115970, (uint64_t)&type metadata for QuoteDetailItem);
    v9 = (_QWORD *)swift_allocObject(v8, 48 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 48);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 48 * a3;
  if (v12 >= (unint64_t)&v9[6 * v5 + 4] || v11 >= v12 + 48 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_10007F4EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_1000505B0(0, (unint64_t *)&qword_1001127A0, (uint64_t)&type metadata for String);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_10007F7B8((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10005B350(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_10007F5DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    sub_10000EDE8(0, &qword_100115988, type metadata accessor for WidgetStock, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v9 = v8;
    v10 = *(_QWORD *)(type metadata accessor for WidgetStock(0) - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = *(unsigned __int8 *)(v10 + 80);
    v13 = (v12 + 32) & ~v12;
    v14 = (_QWORD *)swift_allocObject(v9, v13 + v11 * v5, v12 | 7);
    v15 = j__malloc_size(v14);
    if (!v11)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v15 - v13 == 0x8000000000000000 && v11 == -1)
      goto LABEL_23;
    v14[2] = v5;
    v14[3] = 2 * ((uint64_t)(v15 - v13) / v11);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
  v14 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_10:
  if (v5 < 0)
  {
LABEL_24:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_25;
  }
  v17 = *(_QWORD *)(type metadata accessor for WidgetStock(0) - 8);
  v18 = (char *)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = *(_QWORD *)(v17 + 72);
  v20 = a2 + v19 * a3;
  v21 = v19 * v5;
  v22 = &v18[v21];
  v23 = v20 + v21;
  if (v20 >= (unint64_t)v22 || (unint64_t)v18 >= v23)
  {
    swift_arrayInitWithCopy(v18);
    return v14;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10007F7B8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_10007F9B4()
{
  unint64_t result;

  result = qword_100115E38;
  if (!qword_100115E38)
  {
    result = swift_getWitnessTable(&unk_1000E0630, &type metadata for WidgetNewsUserProfileProvider.Error);
    atomic_store(result, (unint64_t *)&qword_100115E38);
  }
  return result;
}

uint64_t sub_10007F9F8()
{
  uint64_t *v0;

  return sub_10007E4EC(v0);
}

uint64_t sub_10007FA14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Logger(0);
  return sub_10007E5A8(a1, a2);
}

void sub_10007FA70(uint64_t a1)
{
  type metadata accessor for Logger(0);
  sub_10007E8E4(a1);
}

uint64_t storeEnumTagSinglePayload for WidgetNewsUserProfileProvider.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10007FAEC + 4 * byte_1000E02F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10007FB0C + 4 * byte_1000E02F5[v4]))();
}

_BYTE *sub_10007FAEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10007FB0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007FB14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007FB1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007FB24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007FB2C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for WidgetNewsUserProfileProvider.Error()
{
  return &type metadata for WidgetNewsUserProfileProvider.Error;
}

uint64_t *sub_10007FB48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for TaskDeadlineError(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_10007FC10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for TaskDeadlineError(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_10007FC78(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskDeadlineError(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_10007FD1C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for TaskDeadlineError(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_10007FE0C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskDeadlineError(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_10007FEB0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for TaskDeadlineError(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_10007FFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007FFAC);
}

uint64_t sub_10007FFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for TaskDeadlineError(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_10007FFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100080004);
}

uint64_t sub_100080004(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for TaskDeadlineError(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_100080058(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TaskDeadlineError(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_100080090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TaskDeadlineError(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_1000800D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for TaskDeadlineError(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

unint64_t sub_100080128()
{
  unint64_t result;

  result = qword_100115ED0;
  if (!qword_100115ED0)
  {
    result = swift_getWitnessTable(&unk_1000E0608, &type metadata for WidgetNewsUserProfileProvider.Error);
    atomic_store(result, (unint64_t *)&qword_100115ED0);
  }
  return result;
}

unint64_t sub_100080194()
{
  unint64_t result;

  result = qword_100115ED8;
  if (!qword_100115ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SidebarAppearance, &type metadata for SidebarAppearance);
    atomic_store(result, (unint64_t *)&qword_100115ED8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SidebarAppearance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100080224 + 4 * byte_1000E06B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100080258 + 4 * byte_1000E06B0[v4]))();
}

uint64_t sub_100080258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100080268);
  return result;
}

uint64_t sub_100080274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008027CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100080280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SidebarAppearance()
{
  return &type metadata for SidebarAppearance;
}

uint64_t sub_1000802A4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  *(_BYTE *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 48) = xmmword_1000DB8C0;
  *(_QWORD *)(a2 + 64) = 0;
  v3 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(a2 + 72) = objc_msgSend(v3, "blackColor");
  *(_QWORD *)(a2 + 80) = objc_msgSend(v3, "whiteColor");
  sub_100062C08();
  *(_QWORD *)(a2 + 88) = static UIColor.feedBackground.getter();
  *(_QWORD *)(a2 + 96) = objc_msgSend(v3, "systemWhiteColor");
  *(_QWORD *)(a2 + 104) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.490196078, 0.498039216, 0.498039216, 1.0);
  *(_QWORD *)(a2 + 112) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.8, 0.8, 0.8, 1.0);
  *(_QWORD *)(a2 + 120) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.882352941, 0.960784314, 0.905882353, 1.0);
  *(_QWORD *)(a2 + 128) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.490196078, 0.105882353, 1.0);
  *(_QWORD *)(a2 + 136) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.203921569, 0.780392157, 0.349019608, 1.0);
  *(_QWORD *)(a2 + 144) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.247058824, 0.941176471, 0.419607843, 1.0);
  *(_QWORD *)(a2 + 152) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.870588235, 0.0274509804, 0.109803922, 1.0);
  *(_QWORD *)(a2 + 160) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.231372549, 0.188235294, 1.0);
  *(_QWORD *)(a2 + 168) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.231372549, 0.588235294, 0.97254902, 1.0);
  *(_QWORD *)(a2 + 176) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.501960784, 0.501960784, 0.501960784, 1.0);
  *(_QWORD *)(a2 + 184) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.329411765, 0.329411765, 0.329411765, 1.0);
  *(_QWORD *)(a2 + 192) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 1.0);
  *(_QWORD *)(a2 + 200) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 0.12);
  *(_QWORD *)(a2 + 208) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.298039216, 0.850980392, 0.392156863, 1.0);
  *(_QWORD *)(a2 + 216) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.352941176, 0.784313725, 0.980392157, 1.0);
  *(_QWORD *)(a2 + 224) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.592156863, 1.0, 1.0);
  *(_QWORD *)(a2 + 232) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.552941176, 0.294117647, 1.0, 1.0);
  *(_QWORD *)(a2 + 240) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.407843137, 0.0, 1.0, 1.0);
  *(_BYTE *)(a2 + 248) = 1;
  *(_QWORD *)(a2 + 256) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.670588235, 1.0);
  v4 = objc_msgSend(v3, "blackColor");
  v5 = objc_msgSend(v4, "colorWithAlphaComponent:", 0.25);

  *(_QWORD *)(a2 + 264) = v5;
  v6 = objc_msgSend(v3, "blackColor");
  v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.25);

  *(_QWORD *)(a2 + 272) = v7;
  v8 = objc_msgSend(v3, "blackColor");
  v9 = objc_msgSend(v8, "colorWithAlphaComponent:", 0.6);

  *(_QWORD *)(a2 + 280) = v9;
  v10 = objc_msgSend(v3, "grayColor");
  v11 = objc_msgSend(v10, "colorWithAlphaComponent:", 0.3);

  *(_QWORD *)(a2 + 288) = v11;
  *(_QWORD *)(a2 + 296) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.365, 0.365, 0.365, 1.0);
  *(_QWORD *)(a2 + 304) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 1.0);
  *(_QWORD *)(a2 + 312) = objc_msgSend(v3, "whiteColor");
  *(_QWORD *)(a2 + 320) = static UIColor.feedBackground.getter();
  *(_QWORD *)(a2 + 328) = objc_msgSend(v3, "secondaryLabelColor");
  v12 = objc_msgSend(v3, "whiteColor");
  v13 = objc_msgSend(v3, "secondarySystemBackgroundColor");
  v14 = objc_msgSend(v3, "ts_dynamicColor:withDarkStyleVariant:", v12, v13);

  *(_QWORD *)(a2 + 336) = v14;
  *(_QWORD *)(a2 + 344) = objc_msgSend(v3, "secondaryLabelColor");
  *(_QWORD *)(a2 + 352) = objc_msgSend(v3, "labelColor");
  *(_QWORD *)(a2 + 360) = objc_msgSend(v3, "systemBackgroundColor");
  *(_QWORD *)(a2 + 368) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.933333333, 0.933333333, 0.937254902, 1.0);
  *(_QWORD *)(a2 + 376) = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.556862745, 0.556862745, 0.576470588, 1.0);
  *(_QWORD *)(a2 + 384) = objc_msgSend(v3, "separatorColor");
  *(_QWORD *)(a2 + 392) = objc_msgSend(v3, "secondaryLabelColor");
  *(_QWORD *)(a2 + 400) = objc_msgSend(v3, "labelColor");
  return sub_10001D968(a1, a2);
}

void destroy for LightTheme(uint64_t a1)
{
  sub_100007164((_QWORD *)a1);

}

uint64_t initializeWithCopy for LightTheme(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v7 = *(void **)(a2 + 80);
  v6 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v6;
  v9 = *(void **)(a2 + 96);
  v8 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v8;
  v11 = *(void **)(a2 + 112);
  v10 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = v10;
  v12 = *(void **)(a2 + 128);
  v13 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  v66 = *(void **)(a2 + 144);
  v67 = *(void **)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v66;
  *(_QWORD *)(a1 + 152) = v67;
  v68 = *(void **)(a2 + 160);
  v69 = *(void **)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v68;
  *(_QWORD *)(a1 + 168) = v69;
  v70 = *(void **)(a2 + 176);
  v71 = *(void **)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v70;
  *(_QWORD *)(a1 + 184) = v71;
  v72 = *(void **)(a2 + 192);
  v73 = *(void **)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v72;
  *(_QWORD *)(a1 + 200) = v73;
  v74 = *(void **)(a2 + 208);
  v75 = *(void **)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v74;
  *(_QWORD *)(a1 + 216) = v75;
  v76 = *(void **)(a2 + 224);
  v77 = *(void **)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v76;
  *(_QWORD *)(a1 + 232) = v77;
  v79 = *(void **)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v79;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v14 = *(void **)(a2 + 264);
  v78 = *(void **)(a2 + 256);
  *(_QWORD *)(a1 + 256) = v78;
  *(_QWORD *)(a1 + 264) = v14;
  v80 = v14;
  v81 = *(void **)(a2 + 272);
  v15 = *(void **)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v81;
  *(_QWORD *)(a1 + 280) = v15;
  v82 = v15;
  v83 = *(void **)(a2 + 288);
  v16 = *(void **)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v83;
  *(_QWORD *)(a1 + 296) = v16;
  v84 = v16;
  v85 = *(void **)(a2 + 304);
  v17 = *(void **)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v85;
  *(_QWORD *)(a1 + 312) = v17;
  v86 = v17;
  v87 = *(void **)(a2 + 320);
  v18 = *(void **)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v87;
  *(_QWORD *)(a1 + 328) = v18;
  v88 = v18;
  v89 = *(void **)(a2 + 336);
  v19 = *(void **)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v89;
  *(_QWORD *)(a1 + 344) = v19;
  v90 = v19;
  v91 = *(void **)(a2 + 352);
  v20 = *(void **)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v91;
  *(_QWORD *)(a1 + 360) = v20;
  v92 = v20;
  v93 = *(void **)(a2 + 368);
  v21 = *(void **)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v93;
  *(_QWORD *)(a1 + 376) = v21;
  v94 = v21;
  v95 = *(void **)(a2 + 384);
  v22 = *(void **)(a2 + 392);
  v23 = *(void **)(a2 + 400);
  v96 = v22;
  *(_QWORD *)(a1 + 384) = v95;
  *(_QWORD *)(a1 + 392) = v22;
  *(_QWORD *)(a1 + 400) = v23;
  v24 = v5;
  v25 = v7;
  v26 = v6;
  v27 = v9;
  v28 = v8;
  v29 = v11;
  v30 = v10;
  v31 = v12;
  v32 = v13;
  v33 = v66;
  v34 = v67;
  v35 = v68;
  v36 = v69;
  v37 = v70;
  v38 = v71;
  v39 = v72;
  v40 = v73;
  v41 = v74;
  v42 = v75;
  v43 = v76;
  v44 = v77;
  v45 = v79;
  v46 = v78;
  v47 = v80;
  v48 = v81;
  v49 = v82;
  v50 = v83;
  v51 = v84;
  v52 = v85;
  v53 = v86;
  v54 = v87;
  v55 = v88;
  v56 = v89;
  v57 = v90;
  v58 = v91;
  v59 = v92;
  v60 = v93;
  v61 = v94;
  v62 = v95;
  v63 = v96;
  v64 = v23;
  return a1;
}

uint64_t assignWithCopy for LightTheme(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  id v126;

  sub_1000621B0((_QWORD *)a1, (_QWORD *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(void **)(a2 + 72);
  v5 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 80);
  v8 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 88);
  v11 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 96);
  v14 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v13;
  v15 = v13;

  v16 = *(void **)(a2 + 104);
  v17 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  v18 = v16;

  v19 = *(void **)(a2 + 112);
  v20 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v19;
  v21 = v19;

  v22 = *(void **)(a2 + 120);
  v23 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v22;
  v24 = v22;

  v25 = *(void **)(a2 + 128);
  v26 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v25;
  v27 = v25;

  v28 = *(void **)(a2 + 136);
  v29 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v28;
  v30 = v28;

  v31 = *(void **)(a2 + 144);
  v32 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v31;
  v33 = v31;

  v34 = *(void **)(a2 + 152);
  v35 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v34;
  v36 = v34;

  v37 = *(void **)(a2 + 160);
  v38 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v37;
  v39 = v37;

  v40 = *(void **)(a2 + 168);
  v41 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v40;
  v42 = v40;

  v43 = *(void **)(a2 + 176);
  v44 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v43;
  v45 = v43;

  v46 = *(void **)(a2 + 184);
  v47 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v46;
  v48 = v46;

  v49 = *(void **)(a2 + 192);
  v50 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v49;
  v51 = v49;

  v52 = *(void **)(a2 + 200);
  v53 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v52;
  v54 = v52;

  v55 = *(void **)(a2 + 208);
  v56 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v55;
  v57 = v55;

  v58 = *(void **)(a2 + 216);
  v59 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v58;
  v60 = v58;

  v61 = *(void **)(a2 + 224);
  v62 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v61;
  v63 = v61;

  v64 = *(void **)(a2 + 232);
  v65 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v64;
  v66 = v64;

  v67 = *(void **)(a2 + 240);
  v68 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v67;
  v69 = v67;

  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v70 = *(void **)(a2 + 256);
  v71 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v70;
  v72 = v70;

  v73 = *(void **)(a2 + 264);
  v74 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v73;
  v75 = v73;

  v76 = *(void **)(a2 + 272);
  v77 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v76;
  v78 = v76;

  v79 = *(void **)(a2 + 280);
  v80 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v79;
  v81 = v79;

  v82 = *(void **)(a2 + 288);
  v83 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v82;
  v84 = v82;

  v85 = *(void **)(a2 + 296);
  v86 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v85;
  v87 = v85;

  v88 = *(void **)(a2 + 304);
  v89 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v88;
  v90 = v88;

  v91 = *(void **)(a2 + 312);
  v92 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v91;
  v93 = v91;

  v94 = *(void **)(a2 + 320);
  v95 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v94;
  v96 = v94;

  v97 = *(void **)(a2 + 328);
  v98 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v97;
  v99 = v97;

  v100 = *(void **)(a2 + 336);
  v101 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v100;
  v102 = v100;

  v103 = *(void **)(a2 + 344);
  v104 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v103;
  v105 = v103;

  v106 = *(void **)(a2 + 352);
  v107 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v106;
  v108 = v106;

  v109 = *(void **)(a2 + 360);
  v110 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v109;
  v111 = v109;

  v112 = *(void **)(a2 + 368);
  v113 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v112;
  v114 = v112;

  v115 = *(void **)(a2 + 376);
  v116 = *(void **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v115;
  v117 = v115;

  v118 = *(void **)(a2 + 384);
  v119 = *(void **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v118;
  v120 = v118;

  v121 = *(void **)(a2 + 392);
  v122 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v121;
  v123 = v121;

  v124 = *(void **)(a2 + 400);
  v125 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v124;
  v126 = v124;

  return a1;
}

void *initializeWithTake for LightTheme(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x198uLL);
}

uint64_t assignWithTake for LightTheme(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  sub_100007164((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;

  v7 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  v8 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  v9 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  v10 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  v11 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  v12 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v13 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v14 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  v15 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);

  v16 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);

  v17 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  v18 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);

  v19 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);

  v20 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);

  v21 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

  v22 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);

  v23 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);

  v24 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);

  v25 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);

  v26 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  v27 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);

  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  v28 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);

  v29 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  v30 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);

  v31 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);

  v32 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);

  v33 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);

  v34 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);

  v35 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);

  v36 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);

  v37 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);

  v38 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);

  v39 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);

  v40 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);

  v41 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);

  v42 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);

  v43 = *(void **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);

  v44 = *(void **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);

  v45 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);

  v46 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);

  return a1;
}

uint64_t getEnumTagSinglePayload for LightTheme(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 408))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LightTheme(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 408) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 408) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LightTheme()
{
  return &type metadata for LightTheme;
}

uint64_t sub_100081548@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_100062C08();
  result = static UIColor.feedBackground.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100081578()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

id sub_100081580(uint64_t a1, uint64_t a2)
{
  return sub_100081598(a1, a2, (SEL *)&selRef_systemGroupedBackgroundColor);
}

id sub_10008158C(uint64_t a1, uint64_t a2)
{
  return sub_100081598(a1, a2, (SEL *)&selRef_whiteColor);
}

id sub_100081598(uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend((id)objc_opt_self(UIColor), *a3);
}

id sub_1000815CC()
{
  uint64_t v0;
  _BOOL4 v1;
  uint64_t v2;

  v1 = UIAccessibilityDarkerSystemColorsEnabled();
  v2 = 136;
  if (v1)
    v2 = 128;
  return *(id *)(v0 + v2);
}

id sub_1000815F4()
{
  id *v0;
  id *v1;
  BOOL v2;

  if (UIAccessibilityDarkerSystemColorsEnabled())
  {
    v1 = v0 + 18;
  }
  else
  {
    v2 = UIAccessibilityDarkerSystemColorsEnabled();
    v1 = v0 + 16;
    if (!v2)
      v1 = v0 + 17;
  }
  return *v1;
}

id sub_100081630()
{
  id *v0;
  BOOL v1;
  id *v2;

  if (UIAccessibilityDarkerSystemColorsEnabled())
  {
    v1 = UIAccessibilityDarkerSystemColorsEnabled();
    v2 = v0 + 16;
    if (!v1)
      v2 = v0 + 17;
  }
  else
  {
    v2 = v0 + 26;
  }
  return *v2;
}

uint64_t sub_100081668()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100062C08();
  static Feed.densityValue<A>(on:off:)(&v3, sub_100081548, 0, sub_100062BF8, &v2, v0);
  return v3;
}

id sub_1000816B4()
{
  uint64_t v0;

  return *(id *)(v0 + 400);
}

uint64_t sub_1000816BC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

double sub_1000816CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = type metadata accessor for PriceChangeDisplay(0);
  v4 = sub_100003D3C(&qword_100115FB8, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t)&protocol conformance descriptor for PriceChangeDisplay);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = (int *)_s11FormatStyleVMa_0(0);
  Hasher._combine(_:)(*(_BYTE *)(v1 + v5[5]));
  Hasher._combine(_:)(*(_BYTE *)(v1 + v5[6]));
  Hasher._combine(_:)(*(_BYTE *)(v1 + v5[7]));
  v6 = (uint64_t *)(v1 + v5[8]);
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

uint64_t sub_100081788(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v3 = v1;
  sub_100082B40(0, &qword_100115FB0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedEncodingContainer);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v23 - v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100007184(a1, v10);
  v12 = sub_100082AFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s11FormatStyleV10CodingKeysON_0, &_s11FormatStyleV10CodingKeysON_0, v12, v10, v11);
  v28 = 0;
  v13 = type metadata accessor for PriceChangeDisplay(0);
  v14 = sub_100003D3C(&qword_100114730, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t)&protocol conformance descriptor for PriceChangeDisplay);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v28, v6, v13, v14);
  if (!v2)
  {
    v15 = (int *)_s11FormatStyleVMa_0(0);
    v16 = *(unsigned __int8 *)(v3 + v15[5]);
    v27 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v27, v6);
    v17 = *(unsigned __int8 *)(v3 + v15[6]);
    v26 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v26, v6);
    v18 = *(unsigned __int8 *)(v3 + v15[7]);
    v25 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v25, v6);
    v19 = (uint64_t *)(v3 + v15[8]);
    v20 = *v19;
    v21 = v19[1];
    v24 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v24, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10008196C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v27 = a2;
  v3 = type metadata accessor for PriceChangeDisplay(0);
  v28 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v29 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100082B40(0, &qword_100115FA0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for KeyedDecodingContainer);
  v31 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - v7;
  v9 = (int *)_s11FormatStyleVMa_0(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v11[*(int *)(v12 + 32)];
  *(_QWORD *)v13 = 9666786;
  *((_QWORD *)v13 + 1) = 0xA300000000000000;
  v32 = v13;
  v14 = a1[3];
  v15 = a1[4];
  sub_100007184(a1, v14);
  v16 = sub_100082AFC();
  v30 = v8;
  v17 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s11FormatStyleV10CodingKeysON_0, &_s11FormatStyleV10CodingKeysON_0, v16, v14, v15);
  if (v17)
  {
    sub_100007164(a1);
    swift_bridgeObjectRelease(*((_QWORD *)v32 + 1));
  }
  else
  {
    v18 = v6;
    v19 = v28;
    v38 = 0;
    v20 = sub_100003D3C(&qword_100114708, (uint64_t (*)(uint64_t))&type metadata accessor for PriceChangeDisplay, (uint64_t)&protocol conformance descriptor for PriceChangeDisplay);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v3, &v38, v31, v3, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v29, v3);
    v37 = 1;
    v11[v9[5]] = KeyedDecodingContainer.decode(_:forKey:)(&v37, v31) & 1;
    v36 = 2;
    v11[v9[6]] = KeyedDecodingContainer.decode(_:forKey:)(&v36, v31) & 1;
    v35 = 3;
    v11[v9[7]] = KeyedDecodingContainer.decode(_:forKey:)(&v35, v31) & 1;
    v34 = 4;
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v31);
    v22 = v32;
    v23 = v21;
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v30, v31);
    swift_bridgeObjectRelease(v22[1]);
    *v22 = v23;
    v22[1] = v25;
    sub_10008251C((uint64_t)v11, v27);
    sub_100007164(a1);
    sub_100082560((uint64_t)v11);
  }
}

uint64_t sub_100081C9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100081CCC + 4 * byte_1000E07C8[*v0]))(0x79616C70736964, 0xE700000000000000);
}

uint64_t sub_100081CCC()
{
  return 0x6665725065646968;
}

unint64_t sub_100081CE8()
{
  return 0xD000000000000010;
}

uint64_t sub_100081D04()
{
  return 0x6B61657053726F66;
}

uint64_t sub_100081D24()
{
  return 0x6B6361626C6C6166;
}

